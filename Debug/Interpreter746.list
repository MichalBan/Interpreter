
Interpreter746.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3b8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000094c  0800b580  0800b580  0001b580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800becc  0800becc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800becc  0800becc  0001becc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bed4  0800bed4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000030  0800bed4  0800bed4  0001bed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000030  0800bf04  0800bf04  0001bf04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800bf34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000070  0800bfa4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  0800bfa4  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0022eaa2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000deea  00000000  00000000  0024eb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 0000af90  00000000  00000000  0025ca30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000ae18  00000000  00000000  002679c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fdff  00000000  00000000  002727d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000481af  00000000  00000000  002a25d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001c0acf  00000000  00000000  002ea786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  004ab255  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0003580c  00000000  00000000  004ab2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b568 	.word	0x0800b568

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	0800b568 	.word	0x0800b568

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <_ZSt26__throw_bad_variant_accessPKc>:
    friend void __throw_bad_variant_access(const char* __what);
  };

  inline void
  __throw_bad_variant_access(const char* __what)
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	f00a fe32 	bl	800b198 <abort>

08000534 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	60fb      	str	r3, [r7, #12]
      return __builtin_is_constant_evaluated();
 8000540:	2300      	movs	r3, #0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
 8000542:	2b00      	cmp	r3, #0
 8000544:	d004      	beq.n	8000550 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 fa30 	bl	80009ac <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 800054c:	4603      	mov	r3, r0
 800054e:	e004      	b.n	800055a <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff fe59 	bl	8000208 <strlen>
 8000556:	4603      	mov	r3, r0
 8000558:	bf00      	nop
      }
 800055a:	4618      	mov	r0, r3
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 f805 	bl	8000580 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
    }
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>:
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<typename _T1, typename _T2>
    struct pair
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f00a fce3 	bl	800af98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80005e8:	68fc      	ldr	r4, [r7, #12]
 80005ea:	68b8      	ldr	r0, [r7, #8]
 80005ec:	f000 fa46 	bl	8000a7c <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80005f0:	4605      	mov	r5, r0
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00a fb54 	bl	800aca4 <_ZNSaIcEC1Ev>
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	461a      	mov	r2, r3
 8000602:	4629      	mov	r1, r5
 8000604:	4620      	mov	r0, r4
 8000606:	f000 fa44 	bl	8000a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4618      	mov	r0, r3
 8000610:	f00a fb49 	bl	800aca6 <_ZNSaIcED1Ev>
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff ffc9 	bl	80005ac <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 800061a:	4603      	mov	r3, r0
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	761a      	strb	r2, [r3, #24]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bdb0      	pop	{r4, r5, r7, pc}

0800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8000638:	68fc      	ldr	r4, [r7, #12]
 800063a:	68b8      	ldr	r0, [r7, #8]
 800063c:	f000 fa4f 	bl	8000ade <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8000640:	4605      	mov	r5, r0
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4618      	mov	r0, r3
 8000648:	f00a fb2c 	bl	800aca4 <_ZNSaIcEC1Ev>
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	461a      	mov	r2, r3
 8000652:	4629      	mov	r1, r5
 8000654:	4620      	mov	r0, r4
 8000656:	f000 fa1c 	bl	8000a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4618      	mov	r0, r3
 8000660:	f00a fb21 	bl	800aca6 <_ZNSaIcED1Ev>
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ffa1 	bl	80005ac <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 800066a:	4603      	mov	r3, r0
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	761a      	strb	r2, [r3, #24]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	4618      	mov	r0, r3
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bdb0      	pop	{r4, r5, r7, pc}

0800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800067c:	b5b0      	push	{r4, r5, r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8000688:	68fc      	ldr	r4, [r7, #12]
 800068a:	68b8      	ldr	r0, [r7, #8]
 800068c:	f000 fa32 	bl	8000af4 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8000690:	4605      	mov	r5, r0
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4618      	mov	r0, r3
 8000698:	f00a fb04 	bl	800aca4 <_ZNSaIcEC1Ev>
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	461a      	mov	r2, r3
 80006a2:	4629      	mov	r1, r5
 80006a4:	4620      	mov	r0, r4
 80006a6:	f000 f9f4 	bl	8000a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4618      	mov	r0, r3
 80006b0:	f00a faf9 	bl	800aca6 <_ZNSaIcED1Ev>
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff ff79 	bl	80005ac <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 80006ba:	4603      	mov	r3, r0
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	761a      	strb	r2, [r3, #24]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4618      	mov	r0, r3
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bdb0      	pop	{r4, r5, r7, pc}

080006cc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80006d8:	68fc      	ldr	r4, [r7, #12]
 80006da:	68b8      	ldr	r0, [r7, #8]
 80006dc:	f000 fa15 	bl	8000b0a <_ZSt7forwardIRA3_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80006e0:	4605      	mov	r5, r0
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4618      	mov	r0, r3
 80006e8:	f00a fadc 	bl	800aca4 <_ZNSaIcEC1Ev>
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	461a      	mov	r2, r3
 80006f2:	4629      	mov	r1, r5
 80006f4:	4620      	mov	r0, r4
 80006f6:	f000 f9cc 	bl	8000a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4618      	mov	r0, r3
 8000700:	f00a fad1 	bl	800aca6 <_ZNSaIcED1Ev>
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff ff51 	bl	80005ac <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 800070a:	4603      	mov	r3, r0
 800070c:	781a      	ldrb	r2, [r3, #0]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	761a      	strb	r2, [r3, #24]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4618      	mov	r0, r3
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bdb0      	pop	{r4, r5, r7, pc}

0800071c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800071c:	b5b0      	push	{r4, r5, r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8000728:	68fc      	ldr	r4, [r7, #12]
 800072a:	68b8      	ldr	r0, [r7, #8]
 800072c:	f000 f9f8 	bl	8000b20 <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8000730:	4605      	mov	r5, r0
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4618      	mov	r0, r3
 8000738:	f00a fab4 	bl	800aca4 <_ZNSaIcEC1Ev>
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	461a      	mov	r2, r3
 8000742:	4629      	mov	r1, r5
 8000744:	4620      	mov	r0, r4
 8000746:	f000 f9a4 	bl	8000a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4618      	mov	r0, r3
 8000750:	f00a faa9 	bl	800aca6 <_ZNSaIcED1Ev>
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff29 	bl	80005ac <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 800075a:	4603      	mov	r3, r0
 800075c:	781a      	ldrb	r2, [r3, #0]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	761a      	strb	r2, [r3, #24]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4618      	mov	r0, r3
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bdb0      	pop	{r4, r5, r7, pc}

0800076c <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 fa7e 	bl	8000c76 <_ZNSaIP6SymbolED1Ev>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fa61 	bl	8000c56 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE12_Vector_implC1Ev>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <_ZNSt6vectorIP6SymbolSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ffeb 	bl	8000784 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EEC1Ev>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <_ZN8ExecutorC1EP11Transmitter>:
Symbol::~Symbol()
{

}

Executor::Executor(Transmitter *Trans)
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <_ZN8ExecutorC1EP11Transmitter+0x40>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3304      	adds	r3, #4
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ffe6 	bl	800079e <_ZNSt6vectorIP6SymbolSaIS1_EEC1Ev>
{
	this->Trans = Trans;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	615a      	str	r2, [r3, #20]
	this->Fun = new Function_handler();
 80007d8:	2018      	movs	r0, #24
 80007da:	f00a fa52 	bl	800ac82 <_Znwj>
 80007de:	4603      	mov	r3, r0
 80007e0:	461c      	mov	r4, r3
 80007e2:	4620      	mov	r0, r4
 80007e4:	f004 fb9c 	bl	8004f20 <_ZN16Function_handlerC1Ev>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	611c      	str	r4, [r3, #16]
}
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4618      	mov	r0, r3
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd90      	pop	{r4, r7, pc}
 80007f6:	bf00      	nop
 80007f8:	0800bdb0 	.word	0x0800bdb0

080007fc <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS8_EEESt4lessIS5_ESaISt4pairIKS5_SC_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fa81 	bl	8000d0e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EED1Ev>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_ZN16Function_handlerD1Ev>:

typedef void (*function_pointer)(std::vector<Expression*>);

#define FUNCTION(x) functions.insert({#x, &x});

class Function_handler
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ffeb 	bl	80007fc <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS8_EEESt4lessIS5_ESaISt4pairIKS5_SC_EEED1Ev>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <_ZN8ExecutorD1Ev>:

Executor::~Executor()
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <_ZN8ExecutorD1Ev+0x38>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	601a      	str	r2, [r3, #0]
{
	delete Fun;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	691c      	ldr	r4, [r3, #16]
 8000842:	2c00      	cmp	r4, #0
 8000844:	d006      	beq.n	8000854 <_ZN8ExecutorD1Ev+0x24>
 8000846:	4620      	mov	r0, r4
 8000848:	f7ff ffe5 	bl	8000816 <_ZN16Function_handlerD1Ev>
 800084c:	2118      	movs	r1, #24
 800084e:	4620      	mov	r0, r4
 8000850:	f00a fa15 	bl	800ac7e <_ZdlPvj>
Executor::~Executor()
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3304      	adds	r3, #4
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fa31 	bl	8000cc0 <_ZNSt6vectorIP6SymbolSaIS1_EED1Ev>
}
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bd90      	pop	{r4, r7, pc}
 8000868:	0800bdb0 	.word	0x0800bdb0

0800086c <_ZN8ExecutorD0Ev>:
Executor::~Executor()
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
}
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ffdb 	bl	8000830 <_ZN8ExecutorD1Ev>
 800087a:	2118      	movs	r1, #24
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f00a f9fe 	bl	800ac7e <_ZdlPvj>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <_ZSt3getIP13Function_callJP10AssignmentS1_P11Method_callP15While_statementP12If_statementEERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f000 fa97 	bl	8000dc8 <_ZSt3getILj1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800089a:	4603      	mov	r3, r0
    }
 800089c:	4618      	mov	r0, r3
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <_ZN8Executor12run_functionEP9Statement>:
{

}

void Executor::run_function(Statement *st)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b095      	sub	sp, #84	; 0x54
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
	Function_call *fcall = std::get<Function_call*>(st->content);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	330c      	adds	r3, #12
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ffea 	bl	800088c <_ZSt3getIP13Function_callJP10AssignmentS1_P11Method_callP15While_statementP12If_statementEERT_RSt7variantIJDpT0_EE>
 80008b8:	4603      	mov	r3, r0
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	64fb      	str	r3, [r7, #76]	; 0x4c

	auto search = Fun->functions.find(fcall->id);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	461a      	mov	r2, r3
 80008c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008c6:	4619      	mov	r1, r3
 80008c8:	4610      	mov	r0, r2
 80008ca:	f000 fa99 	bl	8000e00 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS8_EEESt4lessIS5_ESaISt4pairIKS5_SC_EEE4findERSG_>
 80008ce:	4603      	mov	r3, r0
 80008d0:	60bb      	str	r3, [r7, #8]
	if (search != Fun->functions.end())
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 faa1 	bl	8000e1e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS8_EEESt4lessIS5_ESaISt4pairIKS5_SC_EEE3endEv>
 80008dc:	4603      	mov	r3, r0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	f107 020c 	add.w	r2, r7, #12
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 faa4 	bl	8000e38 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEESI_>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d019      	beq.n	800092a <_ZN8Executor12run_functionEP9Statement+0x86>
	{
		search->second(fcall->arguments);
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fab0 	bl	8000e60 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEptEv>
 8000900:	4603      	mov	r3, r0
 8000902:	699c      	ldr	r4, [r3, #24]
 8000904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000906:	f103 0218 	add.w	r2, r3, #24
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fab3 	bl	8000e7c <_ZNSt6vectorIP10ExpressionSaIS1_EEC1ERKS3_>
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	4618      	mov	r0, r3
 800091c:	47a0      	blx	r4
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fae7 	bl	8000ef6 <_ZNSt6vectorIP10ExpressionSaIS1_EED1Ev>
	{
		Trans->report_error(std::string("function " + fcall->id + " not found"),
				st->line, st->position);
	}

}
 8000928:	e023      	b.n	8000972 <_ZN8Executor12run_functionEP9Statement+0xce>
		Trans->report_error(std::string("function " + fcall->id + " not found"),
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	695c      	ldr	r4, [r3, #20]
 800092e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000930:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000934:	4911      	ldr	r1, [pc, #68]	; (800097c <_ZN8Executor12run_functionEP9Statement+0xd8>)
 8000936:	4618      	mov	r0, r3
 8000938:	f000 faf8 	bl	8000f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000944:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <_ZN8Executor12run_functionEP9Statement+0xdc>)
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fb15 	bl	8000f76 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f107 011c 	add.w	r1, r7, #28
 8000958:	4620      	mov	r0, r4
 800095a:	f006 fa73 	bl	8006e44 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4618      	mov	r0, r3
 8000964:	f00a fb18 	bl	800af98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000968:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800096c:	4618      	mov	r0, r3
 800096e:	f00a fb13 	bl	800af98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8000972:	bf00      	nop
 8000974:	3754      	adds	r7, #84	; 0x54
 8000976:	46bd      	mov	sp, r7
 8000978:	bd90      	pop	{r4, r7, pc}
 800097a:	bf00      	nop
 800097c:	0800b580 	.word	0x0800b580
 8000980:	0800b58c 	.word	0x0800b58c

08000984 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	429a      	cmp	r2, r3
 8000998:	bf0c      	ite	eq
 800099a:	2301      	moveq	r3, #1
 800099c:	2300      	movne	r3, #0
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	4413      	add	r3, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	72fa      	strb	r2, [r7, #11]
 80009c2:	f107 020b 	add.w	r2, r7, #11
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ffdb 	bl	8000984 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f083 0301 	eor.w	r3, r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x36>
        ++__i;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3301      	adds	r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80009e0:	e7ea      	b.n	80009b8 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xc>
      return __i;
 80009e2:	68fb      	ldr	r3, [r7, #12]
    }
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <_ZNSaISt4pairIKc10token_typeEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f000 fae4 	bl	8000fc2 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1Ev>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_ZNSaISt4pairIKc10token_typeEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 fae3 	bl	8000fd8 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEED1Ev>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
      map(initializer_list<value_type> __l,
 8000a1c:	b5b0      	push	{r4, r5, r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	1d38      	adds	r0, r7, #4
 8000a26:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a2a:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8000a2c:	68fc      	ldr	r4, [r7, #12]
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fada 	bl	8000fee <_ZNSaISt4pairIKc10token_typeEEC1ERKS3_>
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	461a      	mov	r2, r3
 8000a40:	6839      	ldr	r1, [r7, #0]
 8000a42:	4620      	mov	r0, r4
 8000a44:	f000 faed 	bl	8001022 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ffd9 	bl	8000a04 <_ZNSaISt4pairIKc10token_typeEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8000a52:	68fc      	ldr	r4, [r7, #12]
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fb16 	bl	8001088 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>
 8000a5c:	4605      	mov	r5, r0
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fb1d 	bl	80010a0 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE3endEv>
 8000a66:	4603      	mov	r3, r0
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4629      	mov	r1, r5
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f000 fb29 	bl	80010c4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bdb0      	pop	{r4, r5, r7, pc}

08000a7c <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8000a92:	b590      	push	{r4, r7, lr}
 8000a94:	b085      	sub	sp, #20
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8000a9e:	68fc      	ldr	r4, [r7, #12]
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f00a f9c9 	bl	800ae38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4620      	mov	r0, r4
 8000aae:	f00a fb35 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d006      	beq.n	8000ac6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x34>
 8000ab8:	68b8      	ldr	r0, [r7, #8]
 8000aba:	f7ff fd3b 	bl	8000534 <_ZNSt11char_traitsIcE6lengthEPKc>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	e001      	b.n	8000aca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x38>
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	461a      	mov	r2, r3
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f000 fa68 	bl	8000fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd90      	pop	{r4, r7, pc}

08000ade <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_ZSt7forwardIRA3_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 faec 	bl	800111c <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 faeb 	bl	8001132 <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>:
      map(initializer_list<value_type> __l,
 8000b66:	b5b0      	push	{r4, r5, r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	1d38      	adds	r0, r7, #4
 8000b70:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b74:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8000b76:	68fc      	ldr	r4, [r7, #12]
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fae2 	bl	8001148 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKS9_>
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	461a      	mov	r2, r3
 8000b8a:	6839      	ldr	r1, [r7, #0]
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f000 faf5 	bl	800117c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1ERKSD_RKSE_>
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ffd9 	bl	8000b4e <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8000b9c:	68fc      	ldr	r4, [r7, #12]
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fb1e 	bl	80011e2 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>
 8000ba6:	4605      	mov	r5, r0
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fb25 	bl	80011fa <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE3endEv>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4629      	mov	r1, r5
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f000 fb34 	bl	8001224 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bdb0      	pop	{r4, r5, r7, pc}

08000bc6 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 fb54 	bl	800127c <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1Ev>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_ZNSaISt4pairIKc12double_tokenEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f000 fb53 	bl	8001292 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEED1Ev>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
      map(initializer_list<value_type> __l,
 8000bf6:	b5b0      	push	{r4, r5, r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	1d38      	adds	r0, r7, #4
 8000c00:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c04:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8000c06:	68fc      	ldr	r4, [r7, #12]
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fb4a 	bl	80012a8 <_ZNSaISt4pairIKc12double_tokenEEC1ERKS3_>
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	461a      	mov	r2, r3
 8000c1a:	6839      	ldr	r1, [r7, #0]
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f000 fb5d 	bl	80012dc <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ffd9 	bl	8000bde <_ZNSaISt4pairIKc12double_tokenEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8000c2c:	68fc      	ldr	r4, [r7, #12]
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 fb86 	bl	8001342 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>
 8000c36:	4605      	mov	r5, r0
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fb8d 	bl	800135a <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE3endEv>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	4629      	mov	r1, r5
 8000c46:	4620      	mov	r0, r4
 8000c48:	f000 fb9b 	bl	8001382 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bdb0      	pop	{r4, r5, r7, pc}

08000c56 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 fbbb 	bl	80013da <_ZNSaIP6SymbolEC1Ev>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fbc3 	bl	80013f2 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_ZNSaIP6SymbolED1Ev>:
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 fbcb 	bl	800141a <_ZN9__gnu_cxx13new_allocatorIP6SymbolED1Ev>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_ZNSt12_Vector_baseIP6SymbolSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f000 fbc1 	bl	8001430 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE13_M_deallocateEPS1_j>
      }
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fd5b 	bl	800076c <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE12_Vector_implD1Ev>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_ZNSt6vectorIP6SymbolSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000cc0:	b5b0      	push	{r4, r5, r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681c      	ldr	r4, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fbbf 	bl	8001456 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE19_M_get_Tp_allocatorEv>
 8000cd8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4629      	mov	r1, r5
 8000cde:	4620      	mov	r0, r4
 8000ce0:	f000 fbc4 	bl	800146c <_ZSt8_DestroyIPP6SymbolS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ffd1 	bl	8000c8e <_ZNSt12_Vector_baseIP6SymbolSaIS1_EED1Ev>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bdb0      	pop	{r4, r5, r7, pc}

08000cf6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE13_Rb_tree_implISJ_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f000 fbc2 	bl	8001488 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEED1Ev>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 fbe1 	bl	80014de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE8_M_beginEv>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 fbbd 	bl	80014a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE8_M_eraseEPSt13_Rb_tree_nodeISF_E>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ffe4 	bl	8000cf6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE13_Rb_tree_implISJ_Lb1EED1Ev>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv>:
	}

      constexpr bool valueless_by_exception() const noexcept
      { return !this->_M_valid(); }

      constexpr size_t index() const noexcept
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
      {
	if (this->_M_index ==
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	791b      	ldrb	r3, [r3, #4]
 8000d44:	2bff      	cmp	r3, #255	; 0xff
 8000d46:	d102      	bne.n	8000d4e <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv+0x16>
	    typename _Base::__index_type(variant_npos))
	  return variant_npos;
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4c:	e001      	b.n	8000d52 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv+0x1a>
	return this->_M_index;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	791b      	ldrb	r3, [r3, #4]
      }
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	7138      	strb	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8000d68:	6838      	ldr	r0, [r7, #0]
 8000d6a:	f000 fbda 	bl	8001522 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISD_E4typeE>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fbe1 	bl	8001538 <_ZNRSt8__detail9__variant14_UninitializedIP13Function_callLb1EE6_M_getEv>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	7138      	strb	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8000d8a:	6838      	ldr	r0, [r7, #0]
 8000d8c:	f000 fbbe 	bl	800150c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8000d90:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8000d92:	4619      	mov	r1, r3
 8000d94:	4620      	mov	r0, r4
 8000d96:	f7ff ffe2 	bl	8000d5e <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>
 8000d9a:	4603      	mov	r3, r0
    }
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd90      	pop	{r4, r7, pc}

08000da4 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 fba2 	bl	80014f6 <_ZSt7forwardIRSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEOT_RNSt16remove_referenceISD_E4typeE>
 8000db2:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8000db4:	4619      	mov	r1, r3
 8000db6:	4620      	mov	r0, r4
 8000db8:	f7ff ffe2 	bl	8000d80 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8000dbc:	4603      	mov	r3, r0
    }
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd90      	pop	{r4, r7, pc}
	...

08000dc8 <_ZSt3getILj1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
#undef _VARIANT_RELATION_FUNCTION_TEMPLATE
    };

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>>&
    get(variant<_Types...>& __v)
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
    {
      static_assert(_Np < sizeof...(_Types),
		    "The index should be in [0, number of alternatives)");
      if (__v.index() != _Np)
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ffb1 	bl	8000d38 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	bf14      	ite	ne
 8000ddc:	2301      	movne	r3, #1
 8000dde:	2300      	moveq	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <_ZSt3getILj1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <_ZSt3getILj1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 8000de8:	f7ff fb9e 	bl	8000528 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ffd9 	bl	8000da4 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>
 8000df2:	4603      	mov	r3, r0
    }
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	0800b598 	.word	0x0800b598

08000e00 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS8_EEESt4lessIS5_ESaISt4pairIKS5_SC_EEE4findERSG_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6839      	ldr	r1, [r7, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fb9d 	bl	800154e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE4findERS7_>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS8_EEESt4lessIS5_ESaISt4pairIKS5_SC_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fbcc 	bl	80015c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE3endEv>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEESI_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	bf14      	ite	ne
 8000e4e:	2301      	movne	r3, #1
 8000e50:	2300      	moveq	r3, #0
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fbbb 	bl	80015e8 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEE9_M_valptrEv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZNSt6vectorIP10ExpressionSaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8000e86:	687c      	ldr	r4, [r7, #4]
 8000e88:	6838      	ldr	r0, [r7, #0]
 8000e8a:	f000 fbbb 	bl	8001604 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 8000e8e:	4605      	mov	r5, r0
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fbd4 	bl	8001640 <_ZNKSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fbbf 	bl	8001624 <_ZN9__gnu_cxx14__alloc_traitsISaIP10ExpressionES2_E17_S_select_on_copyERKS3_>
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4629      	mov	r1, r5
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f000 fbe9 	bl	8001686 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EEC1EjRKS2_>
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fbcc 	bl	8001656 <_ZNSaIP10ExpressionED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8000ebe:	6838      	ldr	r0, [r7, #0]
 8000ec0:	f000 fc0e 	bl	80016e0 <_ZNKSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 8000ec4:	4605      	mov	r5, r0
 8000ec6:	6838      	ldr	r0, [r7, #0]
 8000ec8:	f000 fc1e 	bl	8001708 <_ZNKSt6vectorIP10ExpressionSaIS1_EE3endEv>
 8000ecc:	4606      	mov	r6, r0
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fc2b 	bl	8001730 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8000eda:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8000edc:	4622      	mov	r2, r4
 8000ede:	4631      	mov	r1, r6
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	f000 fc30 	bl	8001746 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 8000ee6:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	605a      	str	r2, [r3, #4]
      }
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ef6 <_ZNSt6vectorIP10ExpressionSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8000ef6:	b5b0      	push	{r4, r5, r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681c      	ldr	r4, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 fc11 	bl	8001730 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8000f0e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000f10:	461a      	mov	r2, r3
 8000f12:	4629      	mov	r1, r5
 8000f14:	4620      	mov	r0, r4
 8000f16:	f000 fc27 	bl	8001768 <_ZSt8_DestroyIPP10ExpressionS1_EvT_S3_RSaIT0_E>
      }
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 fbc6 	bl	80016ae <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EED1Ev>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bdb0      	pop	{r4, r5, r7, pc}

08000f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
 8000f38:	68b8      	ldr	r0, [r7, #8]
 8000f3a:	f7ff fafb 	bl	8000534 <_ZNSt11char_traitsIcE6lengthEPKc>
 8000f3e:	6178      	str	r0, [r7, #20]
      __string_type __str;
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f00a f808 	bl	800af56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
      __str.reserve(__len + __rhs.size());
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f00a f854 	bl	800aff4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	4413      	add	r3, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f00a f851 	bl	800affc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f00a f8a6 	bl	800b0b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f00a f89c 	bl	800b0a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 8000f6c:	bf00      	nop
    }
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	68b8      	ldr	r0, [r7, #8]
 8000f86:	f00a f8a3 	bl	800b0d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fbf9 	bl	8001784 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4619      	mov	r1, r3
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f009 ffe4 	bl	800af64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f000 fbf0 	bl	800179a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>
        }
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_ZNSaISt4pairIKc10token_typeEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8000ff8:	6839      	ldr	r1, [r7, #0]
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 fbde 	bl	80017bc <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1ERKS5_>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 fbeb 	bl	80017ee <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree(const _Compare& __comp,
 8001022:	b590      	push	{r4, r7, lr}
 8001024:	b087      	sub	sp, #28
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 800102e:	68fc      	ldr	r4, [r7, #12]
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fbcc 	bl	80017d4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1IS3_EERKSaIT_E>
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	461a      	mov	r2, r3
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	4620      	mov	r0, r4
 8001046:	f000 fbde 	bl	8001806 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fbcd 	bl	80017ee <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4618      	mov	r0, r3
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd90      	pop	{r4, r7, pc}

0800105e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fc09 	bl	800187e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 800106c:	4603      	mov	r3, r0
 800106e:	4619      	mov	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 fbe5 	bl	8001840 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ffc6 	bl	800100a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ffed 	bl	8001088 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>
 80010ae:	4604      	mov	r4, r0
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 fbf0 	bl	8001896 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE4sizeEv>
 80010b6:	4603      	mov	r3, r0
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4423      	add	r3, r4
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd90      	pop	{r4, r7, pc}

080010c4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	using __same_value_type
	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;

      template<typename _InputIterator>
	__enable_if_t<__same_value_type<_InputIterator>::value>
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
	{
	  _Alloc_node __an(*this);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fbe9 	bl	80018ae <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d017      	beq.n	8001114 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f000 fbf1 	bl	80018cc <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 80010ea:	4603      	mov	r3, r0
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	f107 021c 	add.w	r2, r7, #28
 80010f2:	f107 0318 	add.w	r3, r7, #24
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fbf8 	bl	80018ee <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	69b9      	ldr	r1, [r7, #24]
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 fc01 	bl	800190e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	3302      	adds	r3, #2
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	e7e3      	b.n	80010dc <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKS9_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001152:	6839      	ldr	r1, [r7, #0]
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 fc0d 	bl	8001974 <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSB_>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fc1a 	bl	80019a6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1ERKSD_RKSE_>:
      _Rb_tree(const _Compare& __comp,
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8001188:	68fc      	ldr	r4, [r7, #12]
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fbfb 	bl	800198c <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1IS9_EERKSaIT_E>
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	461a      	mov	r2, r3
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	4620      	mov	r0, r4
 80011a0:	f000 fc0d 	bl	80019be <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 fbfc 	bl	80019a6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4618      	mov	r0, r3
 80011b2:	371c      	adds	r7, #28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd90      	pop	{r4, r7, pc}

080011b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 fc38 	bl	8001a36 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4619      	mov	r1, r3
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fc14 	bl	80019f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ffc6 	bl	8001164 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>:
      begin() const noexcept { return _M_array; }
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE3endEv>:
      end() const noexcept { return begin() + size(); }
 80011fa:	b590      	push	{r4, r7, lr}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffed 	bl	80011e2 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>
 8001208:	4604      	mov	r4, r0
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 fc1f 	bl	8001a4e <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE4sizeEv>
 8001210:	4602      	mov	r2, r0
 8001212:	4613      	mov	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	1a9b      	subs	r3, r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4423      	add	r3, r4
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}

08001224 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	68f9      	ldr	r1, [r7, #12]
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fc15 	bl	8001a66 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>
	  for (; __first != __last; ++__first)
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	429a      	cmp	r2, r3
 8001242:	d017      	beq.n	8001274 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f000 fc1d 	bl	8001a84 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 800124a:	4603      	mov	r3, r0
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	f107 021c 	add.w	r2, r7, #28
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fc24 	bl	8001aa6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSt17_Rb_tree_iteratorIS9_E>
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	69b9      	ldr	r1, [r7, #24]
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f000 fc2d 	bl	8001ac6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	331c      	adds	r3, #28
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	e7e3      	b.n	800123c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x18>
	}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_ZNSaISt4pairIKc12double_tokenEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 fc39 	bl	8001b2c <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1ERKS5_>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 fc46 	bl	8001b5e <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree(const _Compare& __comp,
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 80012e8:	68fc      	ldr	r4, [r7, #12]
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fc27 	bl	8001b44 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1IS3_EERKSaIT_E>
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	461a      	mov	r2, r3
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	4620      	mov	r0, r4
 8001300:	f000 fc39 	bl	8001b76 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fc28 	bl	8001b5e <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4618      	mov	r0, r3
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd90      	pop	{r4, r7, pc}

08001318 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 fc64 	bl	8001bee <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8001326:	4603      	mov	r3, r0
 8001328:	4619      	mov	r1, r3
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fc40 	bl	8001bb0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ffc6 	bl	80012c4 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE3endEv>:
      end() const noexcept { return begin() + size(); }
 800135a:	b590      	push	{r4, r7, lr}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffed 	bl	8001342 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>
 8001368:	4604      	mov	r4, r0
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fc4b 	bl	8001c06 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE4sizeEv>
 8001370:	4602      	mov	r2, r0
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	4423      	add	r3, r4
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}

08001382 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8001382:	b580      	push	{r7, lr}
 8001384:	b088      	sub	sp, #32
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	68f9      	ldr	r1, [r7, #12]
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fc42 	bl	8001c1e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d017      	beq.n	80013d2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 fc4a 	bl	8001c3c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 80013a8:	4603      	mov	r3, r0
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	f107 021c 	add.w	r2, r7, #28
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fc51 	bl	8001c5e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	69b9      	ldr	r1, [r7, #24]
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f000 fc5a 	bl	8001c7e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3303      	adds	r3, #3
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	e7e3      	b.n	800139a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 80013d2:	bf00      	nop
 80013d4:	3720      	adds	r7, #32
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_ZNSaIP6SymbolEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fc7e 	bl	8001ce4 <_ZN9__gnu_cxx13new_allocatorIP6SymbolEC1Ev>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
	{ }
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_ZN9__gnu_cxx13new_allocatorIP6SymbolED1Ev>:
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
	if (__p)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 fc56 	bl	8001cfa <_ZNSt16allocator_traitsISaIP6SymbolEE10deallocateERS2_PS1_j>
      }
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZSt8_DestroyIPP6SymbolS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 fc4c 	bl	8001d18 <_ZSt8_DestroyIPP6SymbolEvT_S3_>
    }
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 fc4e 	bl	8001d32 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEED1Ev>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE8_M_eraseEPSt13_Rb_tree_nodeISF_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d012      	beq.n	80014d6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE8_M_eraseEPSt13_Rb_tree_nodeISF_E+0x36>
	{
	  _M_erase(_S_right(__x));
 80014b0:	6838      	ldr	r0, [r7, #0]
 80014b2:	f000 fc49 	bl	8001d48 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE8_S_rightEPSt18_Rb_tree_node_base>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4619      	mov	r1, r3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fff0 	bl	80014a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE8_M_eraseEPSt13_Rb_tree_nodeISF_E>
	  _Link_type __y = _S_left(__x);
 80014c0:	6838      	ldr	r0, [r7, #0]
 80014c2:	f000 fc4d 	bl	8001d60 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE7_S_leftEPSt18_Rb_tree_node_base>
 80014c6:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80014c8:	6839      	ldr	r1, [r7, #0]
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 fc54 	bl	8001d78 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISF_E>
	  __x = __y;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80014d4:	e7e9      	b.n	80014aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE8_M_eraseEPSt13_Rb_tree_nodeISF_E+0xa>
	}
    }
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_ZSt7forwardIRSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_ZNRSt8__detail9__variant14_UninitializedIP13Function_callLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE4findERS7_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800154e:	b590      	push	{r4, r7, lr}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ffc0 	bl	80014de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE8_M_beginEv>
 800155e:	4604      	mov	r4, r0
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fc1a 	bl	8001d9a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE6_M_endEv>
 8001566:	4602      	mov	r2, r0
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	4621      	mov	r1, r4
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 fc20 	bl	8001db2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE14_M_lower_boundEPSt13_Rb_tree_nodeISF_EPSt18_Rb_tree_node_baseRS7_>
 8001572:	4603      	mov	r3, r0
 8001574:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f825 	bl	80015c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE3endEv>
 800157c:	4603      	mov	r3, r0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	f107 020c 	add.w	r2, r7, #12
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4611      	mov	r1, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fc42 	bl	8001e14 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEESI_>
 8001590:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10d      	bne.n	80015b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 8001596:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8001598:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fc4e 	bl	8001e3c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	6839      	ldr	r1, [r7, #0]
 80015a6:	4620      	mov	r0, r4
 80015a8:	f000 fc54 	bl	8001e54 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d004      	beq.n	80015bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f807 	bl	80015c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE3endEv>
 80015b8:	4603      	mov	r3, r0
 80015ba:	e000      	b.n	80015be <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE4findERS7_+0x70>
 80015bc:	68bb      	ldr	r3, [r7, #8]
    }
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd90      	pop	{r4, r7, pc}

080015c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	1d1a      	adds	r2, r3, #4
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fc4a 	bl	8001e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEC1EPSt18_Rb_tree_node_base>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEE9_M_valptrEv>:
      _M_valptr()
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3310      	adds	r3, #16
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fc4b 	bl	8001e90 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEE6_M_ptrEv>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	109b      	asrs	r3, r3, #2
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_ZN9__gnu_cxx14__alloc_traitsISaIP10ExpressionES2_E17_S_select_on_copyERKS3_>:
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fc38 	bl	8001ea8 <_ZNSt16allocator_traitsISaIP10ExpressionEE37select_on_container_copy_constructionERKS2_>
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_ZNKSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <_ZNSaIP10ExpressionED1Ev>:
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fc2f 	bl	8001ec2 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionED1Ev>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffed 	bl	8001656 <_ZNSaIP10ExpressionED1Ev>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fc1e 	bl	8001ed8 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 fc2c 	bl	8001efc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE17_M_create_storageEj>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80016c6:	461a      	mov	r2, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 fc32 	bl	8001f32 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ffcc 	bl	800166e <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implD1Ev>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_ZNKSt6vectorIP10ExpressionSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	f107 020c 	add.w	r2, r7, #12
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fc2d 	bl	8001f58 <_ZN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_ZNKSt6vectorIP10ExpressionSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	f107 020c 	add.w	r2, r7, #12
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fc19 	bl	8001f58 <_ZN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 fc0d 	bl	8001f78 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800175e:	4603      	mov	r3, r0
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <_ZSt8_DestroyIPP10ExpressionS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 fc10 	bl	8001f9c <_ZSt8_DestroyIPP10ExpressionEvT_S3_>
    }
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800179a:	b590      	push	{r4, r7, lr}
 800179c:	b087      	sub	sp, #28
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80017a8:	4623      	mov	r3, r4
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 fc16 	bl	8001fe0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
	}
 80017b4:	bf00      	nop
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd90      	pop	{r4, r7, pc}

080017bc <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fc46 	bl	8002070 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1Ev>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fc45 	bl	8002086 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 fc42 	bl	800209c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEEONSt16remove_referenceIT_E4typeEOS9_>
 8001818:	4603      	mov	r3, r0
 800181a:	4619      	mov	r1, r3
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 fc48 	bl	80020b2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS5_>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fc51 	bl	80020ce <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	3304      	adds	r3, #4
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fe96 	bl	8000562 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d012      	beq.n	8001876 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 8001850:	6838      	ldr	r0, [r7, #0]
 8001852:	f000 fc48 	bl	80020e6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001856:	4603      	mov	r3, r0
 8001858:	4619      	mov	r1, r3
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fff0 	bl	8001840 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 8001860:	6838      	ldr	r0, [r7, #0]
 8001862:	f000 fc4c 	bl	80020fe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001866:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fc53 	bl	8002116 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001874:	e7e9      	b.n	800184a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	1d1a      	adds	r2, r3, #4
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 fc2a 	bl	8002138 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800190e:	b5b0      	push	{r4, r5, r7, lr}
 8001910:	b08a      	sub	sp, #40	; 0x28
 8001912:	af02      	add	r7, sp, #8
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fd3a 	bl	800239c <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 8001928:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 800192a:	f107 0010 	add.w	r0, r7, #16
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	68f9      	ldr	r1, [r7, #12]
 8001932:	f000 fc10 	bl	8002156 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>
      if (__res.second)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00f      	beq.n	800195c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
			  __node_gen);
 800193c:	693c      	ldr	r4, [r7, #16]
 800193e:	697d      	ldr	r5, [r7, #20]
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 fd37 	bl	80023b4 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001946:	4602      	mov	r2, r0
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	4613      	mov	r3, r2
 800194e:	462a      	mov	r2, r5
 8001950:	4621      	mov	r1, r4
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 fd39 	bl	80023ca <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 8001958:	4603      	mov	r3, r0
 800195a:	e007      	b.n	800196c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fbe7 	bl	8002138 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 800196a:	69fb      	ldr	r3, [r7, #28]
    }
 800196c:	4618      	mov	r0, r3
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bdb0      	pop	{r4, r5, r7, pc}

08001974 <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSB_>:
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1IS9_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 fd60 	bl	800245c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1Ev>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fd5f 	bl	8002472 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fd5c 	bl	8002488 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEEONSt16remove_referenceIT_E4typeEOSF_>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4619      	mov	r1, r3
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 fd62 	bl	800249e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSB_>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 fd6b 	bl	80024ba <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3304      	adds	r3, #4
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdba 	bl	8000562 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d012      	beq.n	8001a2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x36>
	  _M_erase(_S_right(__x));
 8001a08:	6838      	ldr	r0, [r7, #0]
 8001a0a:	f000 fd62 	bl	80024d2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4619      	mov	r1, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fff0 	bl	80019f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
	  _Link_type __y = _S_left(__x);
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f000 fd66 	bl	80024ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001a1e:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001a20:	6839      	ldr	r1, [r7, #0]
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 fd6d 	bl	8002502 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>
	  __x = __y;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001a2c:	e7e9      	b.n	8001a02 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0xa>
    }
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE4sizeEv>:
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>:
	_Alloc_node(_Rb_tree& __t)
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	1d1a      	adds	r2, r3, #4
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fd44 	bl	8002524 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSt17_Rb_tree_iteratorIS9_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001ac6:	b5b0      	push	{r4, r5, r7, lr}
 8001ac8:	b08a      	sub	sp, #40	; 0x28
 8001aca:	af02      	add	r7, sp, #8
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 fe54 	bl	8002788 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 8001ae0:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 8001ae2:	f107 0010 	add.w	r0, r7, #16
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	68f9      	ldr	r1, [r7, #12]
 8001aea:	f000 fd2a 	bl	8002542 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_>
      if (__res.second)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00f      	beq.n	8001b14 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x4e>
			  __node_gen);
 8001af4:	693c      	ldr	r4, [r7, #16]
 8001af6:	697d      	ldr	r5, [r7, #20]
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 fe51 	bl	80027a0 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8001afe:	4602      	mov	r2, r0
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	4613      	mov	r3, r2
 8001b06:	462a      	mov	r2, r5
 8001b08:	4621      	mov	r1, r4
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 fe53 	bl	80027b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>
 8001b10:	4603      	mov	r3, r0
 8001b12:	e007      	b.n	8001b24 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fd01 	bl	8002524 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8001b22:	69fb      	ldr	r3, [r7, #28]
    }
 8001b24:	4618      	mov	r0, r3
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bdb0      	pop	{r4, r5, r7, pc}

08001b2c <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1ERKS5_>:
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 fe7a 	bl	8002848 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1Ev>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fe79 	bl	800285e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 fe76 	bl	8002874 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEEONSt16remove_referenceIT_E4typeEOS9_>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 fe7c 	bl	800288a <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS5_>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 fa99 	bl	80020ce <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcde 	bl	8000562 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d012      	beq.n	8001be6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 8001bc0:	6838      	ldr	r0, [r7, #0]
 8001bc2:	f000 fe70 	bl	80028a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fff0 	bl	8001bb0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 8001bd0:	6838      	ldr	r0, [r7, #0]
 8001bd2:	f000 fe74 	bl	80028be <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001bd6:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001bd8:	6839      	ldr	r1, [r7, #0]
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 fe7b 	bl	80028d6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001be4:	e7e9      	b.n	8001bba <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE4sizeEv>:
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1d1a      	adds	r2, r3, #4
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 fe52 	bl	80028f8 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001c7e:	b5b0      	push	{r4, r5, r7, lr}
 8001c80:	b08a      	sub	sp, #40	; 0x28
 8001c82:	af02      	add	r7, sp, #8
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8001c8c:	f107 0318 	add.w	r3, r7, #24
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 ff62 	bl	8002b5c <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 8001c98:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 8001c9a:	f107 0010 	add.w	r0, r7, #16
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	68f9      	ldr	r1, [r7, #12]
 8001ca2:	f000 fe38 	bl	8002916 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>
      if (__res.second)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00f      	beq.n	8001ccc <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
			  __node_gen);
 8001cac:	693c      	ldr	r4, [r7, #16]
 8001cae:	697d      	ldr	r5, [r7, #20]
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 ff5f 	bl	8002b74 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	462a      	mov	r2, r5
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 ff61 	bl	8002b8a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	e007      	b.n	8001cdc <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 fe0f 	bl	80028f8 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8001cda:	69fb      	ldr	r3, [r7, #28]
    }
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bdb0      	pop	{r4, r5, r7, pc}

08001ce4 <_ZN9__gnu_cxx13new_allocatorIP6SymbolEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_ZNSt16allocator_traitsISaIP6SymbolEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 ff86 	bl	8002c1c <_ZN9__gnu_cxx13new_allocatorIP6SymbolE10deallocateEPS2_j>
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <_ZSt8_DestroyIPP6SymbolEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001d22:	6839      	ldr	r1, [r7, #0]
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 ff85 	bl	8002c34 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6SymbolEEvT_S5_>
    }
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISF_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001d82:	6839      	ldr	r1, [r7, #0]
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 ff60 	bl	8002c4a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISF_E>
	_M_put_node(__p);
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 ff71 	bl	8002c74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE11_M_put_nodeEPSt13_Rb_tree_nodeISF_E>
      }
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3304      	adds	r3, #4
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE14_M_lower_boundEPSt13_Rb_tree_nodeISF_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001db2:	b590      	push	{r4, r7, lr}
 8001db4:	b087      	sub	sp, #28
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d01b      	beq.n	8001dfe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE14_M_lower_boundEPSt13_Rb_tree_nodeISF_EPSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001dc6:	68fc      	ldr	r4, [r7, #12]
 8001dc8:	68b8      	ldr	r0, [r7, #8]
 8001dca:	f000 ff65 	bl	8002c98 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE6_S_keyEPKSt13_Rb_tree_nodeISF_E>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f000 f83d 	bl	8001e54 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f083 0301 	eor.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE14_M_lower_boundEPSt13_Rb_tree_nodeISF_EPSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	68b8      	ldr	r0, [r7, #8]
 8001dec:	f7ff ffb8 	bl	8001d60 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001df0:	60b8      	str	r0, [r7, #8]
 8001df2:	e7e5      	b.n	8001dc0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE14_M_lower_boundEPSt13_Rb_tree_nodeISF_EPSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 8001df4:	68b8      	ldr	r0, [r7, #8]
 8001df6:	f7ff ffa7 	bl	8001d48 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001dfa:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001dfc:	e7e0      	b.n	8001dc0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE14_M_lower_boundEPSt13_Rb_tree_nodeISF_EPSt18_Rb_tree_node_baseRS7_+0xe>
      return iterator(__y);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 f834 	bl	8001e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEC1EPSt18_Rb_tree_node_base>
 8001e0a:	697b      	ldr	r3, [r7, #20]
    }
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd90      	pop	{r4, r7, pc}

08001e14 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEESI_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 ff27 	bl	8002c98 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE6_S_keyEPKSt13_Rb_tree_nodeISF_E>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	68b8      	ldr	r0, [r7, #8]
 8001e64:	f000 ff2b 	bl	8002cbe <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 ff20 	bl	8002cde <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEE7_M_addrEv>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <_ZNSt16allocator_traitsISaIP10ExpressionEE37select_on_container_copy_constructionERKS2_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8001eb2:	6839      	ldr	r1, [r7, #0]
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 ff1d 	bl	8002cf4 <_ZNSaIP10ExpressionEC1ERKS1_>
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionED1Ev>:
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 ff05 	bl	8002cf4 <_ZNSaIP10ExpressionEC1ERKS1_>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 ff0f 	bl	8002d10 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8001f06:	6839      	ldr	r1, [r7, #0]
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 ff15 	bl	8002d38 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	441a      	add	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	609a      	str	r2, [r3, #8]
      }
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
	if (__p)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 ff08 	bl	8002d60 <_ZNSt16allocator_traitsISaIP10ExpressionEE10deallocateERS2_PS1_j>
      }
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_ZN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS4_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8001f84:	2301      	movs	r3, #1
 8001f86:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 fef6 	bl	8002d7e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 8001f92:	4603      	mov	r3, r0
    }
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_ZSt8_DestroyIPP10ExpressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001fa6:	6839      	ldr	r1, [r7, #0]
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fef8 	bl	8002d9e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10ExpressionEEvT_S5_>
    }
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001fb6:	b5b0      	push	{r4, r5, r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001fc0:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 ff05 	bl	8002dd4 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8001fca:	462a      	mov	r2, r5
 8001fcc:	6839      	ldr	r1, [r7, #0]
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f000 ff0a 	bl	8002de8 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8001fd4:	4603      	mov	r3, r0
    }
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001fe0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	703b      	strb	r3, [r7, #0]
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001fee:	68b8      	ldr	r0, [r7, #8]
 8001ff0:	f000 fee0 	bl	8002db4 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d001      	beq.n	8002006 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x28>
 8002006:	2300      	movs	r3, #0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 800200c:	4817      	ldr	r0, [pc, #92]	; (800206c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8c>)
 800200e:	f008 ff00 	bl	800ae12 <_ZSt19__throw_logic_errorPKc>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	68b8      	ldr	r0, [r7, #8]
 8002016:	f7ff ffce 	bl	8001fb6 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800201a:	4603      	mov	r3, r0
 800201c:	617b      	str	r3, [r7, #20]
	if (__dnew > size_type(_S_local_capacity))
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d910      	bls.n	8002046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x66>
	    _M_data(_M_create(__dnew, size_type(0)));
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	4619      	mov	r1, r3
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f008 ff0d 	bl	800ae4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002032:	4603      	mov	r3, r0
 8002034:	4619      	mov	r1, r3
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f008 fefa 	bl	800ae30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	4619      	mov	r1, r3
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f008 fefb 	bl	800ae3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f008 fef4 	bl	800ae34 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800204c:	4603      	mov	r3, r0
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	4618      	mov	r0, r3
 8002054:	f008 ff3e 	bl	800aed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	_M_set_length(__dnew);
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4619      	mov	r1, r3
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f008 feef 	bl	800ae40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	0800b5ac 	.word	0x0800b5ac

08002070 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80020bc:	6839      	ldr	r1, [r7, #0]
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fea1 	bl	8002e06 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS7_>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
      { }
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8002120:	6839      	ldr	r1, [r7, #0]
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fe7b 	bl	8002e1e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 8002128:	6839      	ldr	r1, [r7, #0]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fe8c 	bl	8002e48 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002156:	b590      	push	{r4, r7, lr}
 8002158:	b08d      	sub	sp, #52	; 0x34
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fe80 	bl	8002e6c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEE13_M_const_castEv>
 800216c:	4603      	mov	r3, r0
 800216e:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8002170:	69bc      	ldr	r4, [r7, #24]
 8002172:	68b8      	ldr	r0, [r7, #8]
 8002174:	f000 fe8b 	bl	8002e8e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8002178:	4603      	mov	r3, r0
 800217a:	429c      	cmp	r4, r3
 800217c:	bf0c      	ite	eq
 800217e:	2301      	moveq	r3, #1
 8002180:	2300      	movne	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d030      	beq.n	80021ea <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 8002188:	68b8      	ldr	r0, [r7, #8]
 800218a:	f000 fe8c 	bl	8002ea6 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>
 800218e:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8002194:	68bc      	ldr	r4, [r7, #8]
 8002196:	68b8      	ldr	r0, [r7, #8]
 8002198:	f000 fe91 	bl	8002ebe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 800219c:	4603      	mov	r3, r0
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fe98 	bl	8002ed6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80021a6:	4603      	mov	r3, r0
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	4620      	mov	r0, r4
 80021ae:	f000 fe9e 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 80021bc:	2300      	movs	r3, #0
	  if (size() > 0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00c      	beq.n	80021dc <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	68b8      	ldr	r0, [r7, #8]
 80021c8:	f000 fe79 	bl	8002ebe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f107 031c 	add.w	r3, r7, #28
 80021d2:	4619      	mov	r1, r3
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 fe9f 	bl	8002f18 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80021da:	e0db      	b.n	8002394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 feae 	bl	8002f44 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 80021e8:	e0d4      	b.n	8002394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80021ea:	68bc      	ldr	r4, [r7, #8]
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fe71 	bl	8002ed6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	6839      	ldr	r1, [r7, #0]
 80021fa:	4620      	mov	r0, r4
 80021fc:	f000 fe77 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d057      	beq.n	80022b6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800220a:	69bc      	ldr	r4, [r7, #24]
 800220c:	68b8      	ldr	r0, [r7, #8]
 800220e:	f000 ff1e 	bl	800304e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8002212:	4603      	mov	r3, r0
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	429c      	cmp	r4, r3
 8002218:	bf0c      	ite	eq
 800221a:	2301      	moveq	r3, #1
 800221c:	2300      	movne	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00d      	beq.n	8002240 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8002224:	68b8      	ldr	r0, [r7, #8]
 8002226:	f000 ff12 	bl	800304e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 800222a:	4604      	mov	r4, r0
 800222c:	68b8      	ldr	r0, [r7, #8]
 800222e:	f000 ff0e 	bl	800304e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	4621      	mov	r1, r4
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 ff14 	bl	8003066 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800223e:	e0a9      	b.n	8002394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8002240:	68bc      	ldr	r4, [r7, #8]
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4618      	mov	r0, r3
 8002248:	f000 ff26 	bl	8003098 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>
 800224c:	4603      	mov	r3, r0
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f000 fe40 	bl	8002ed6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002256:	4603      	mov	r3, r0
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4619      	mov	r1, r3
 800225c:	4620      	mov	r0, r4
 800225e:	f000 fe46 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01f      	beq.n	80022a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff ff3b 	bl	80020e6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
 8002284:	f107 0214 	add.w	r2, r7, #20
 8002288:	f107 0320 	add.w	r3, r7, #32
 800228c:	4619      	mov	r1, r3
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fe42 	bl	8002f18 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8002294:	e07e      	b.n	8002394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8002296:	f107 0218 	add.w	r2, r7, #24
 800229a:	f107 0318 	add.w	r3, r7, #24
 800229e:	4619      	mov	r1, r3
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fee0 	bl	8003066 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80022a6:	e075      	b.n	8002394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fe48 	bl	8002f44 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 80022b4:	e06e      	b.n	8002394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80022b6:	68bc      	ldr	r4, [r7, #8]
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fe0b 	bl	8002ed6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80022c0:	4603      	mov	r3, r0
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	4619      	mov	r1, r3
 80022c6:	4620      	mov	r0, r4
 80022c8:	f000 fe11 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d056      	beq.n	8002380 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80022d6:	69bc      	ldr	r4, [r7, #24]
 80022d8:	68b8      	ldr	r0, [r7, #8]
 80022da:	f000 fdf0 	bl	8002ebe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80022de:	4603      	mov	r3, r0
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	429c      	cmp	r4, r3
 80022e4:	bf0c      	ite	eq
 80022e6:	2301      	moveq	r3, #1
 80022e8:	2300      	movne	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00c      	beq.n	800230a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
 80022f4:	68b8      	ldr	r0, [r7, #8]
 80022f6:	f000 fde2 	bl	8002ebe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80022fa:	4602      	mov	r2, r0
 80022fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002300:	4619      	mov	r1, r3
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fe08 	bl	8002f18 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8002308:	e044      	b.n	8002394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800230a:	68bc      	ldr	r4, [r7, #8]
 800230c:	f107 0310 	add.w	r3, r7, #16
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fed2 	bl	80030ba <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEppEv>
 8002316:	4603      	mov	r3, r0
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fddb 	bl	8002ed6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	6839      	ldr	r1, [r7, #0]
 8002326:	4620      	mov	r0, r4
 8002328:	f000 fde1 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01f      	beq.n	8002372 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fed6 	bl	80020e6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 800234a:	2300      	movs	r3, #0
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
 800234e:	f107 0218 	add.w	r2, r7, #24
 8002352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002356:	4619      	mov	r1, r3
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fddd 	bl	8002f18 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800235e:	e019      	b.n	8002394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8002360:	f107 0210 	add.w	r2, r7, #16
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	4619      	mov	r1, r3
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 fe7b 	bl	8003066 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8002370:	e010      	b.n	8002394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fde3 	bl	8002f44 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 800237e:	e009      	b.n	8002394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8002380:	2300      	movs	r3, #0
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002384:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002388:	f107 0318 	add.w	r3, r7, #24
 800238c:	4619      	mov	r1, r3
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 fea4 	bl	80030dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	3734      	adds	r7, #52	; 0x34
 8002398:	46bd      	mov	sp, r7
 800239a:	bd90      	pop	{r4, r7, pc}

0800239c <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80023ca:	b5b0      	push	{r4, r5, r7, lr}
 80023cc:	b088      	sub	sp, #32
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d11a      	bne.n	8002414 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 fd55 	bl	8002e8e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 80023e4:	4602      	mov	r2, r0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d013      	beq.n	8002414 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80023ec:	68fc      	ldr	r4, [r7, #12]
 80023ee:	f107 0310 	add.w	r3, r7, #16
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ffd1 	bl	800239c <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 80023fa:	4605      	mov	r5, r0
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fd6a 	bl	8002ed6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	4629      	mov	r1, r5
 8002408:	4620      	mov	r0, r4
 800240a:	f000 fd70 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 8002418:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800241a:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800241c:	6838      	ldr	r0, [r7, #0]
 800241e:	f7ff ffc9 	bl	80023b4 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002422:	4603      	mov	r3, r0
 8002424:	4619      	mov	r1, r3
 8002426:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002428:	f000 fe6e 	bl	8003108 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 800242c:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8002432:	7ff8      	ldrb	r0, [r7, #31]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f008 fc8c 	bl	800ad54 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	69b9      	ldr	r1, [r7, #24]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fe73 	bl	8002138 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002452:	697b      	ldr	r3, [r7, #20]
      }
 8002454:	4618      	mov	r0, r3
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bdb0      	pop	{r4, r5, r7, pc}

0800245c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSB_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80024a8:	6839      	ldr	r1, [r7, #0]
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fe40 	bl	8003130 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSD_>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
      { }
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800250c:	6839      	ldr	r1, [r7, #0]
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fe1a 	bl	8003148 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>
	_M_put_node(__p);
 8002514:	6839      	ldr	r1, [r7, #0]
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fe2b 	bl	8003172 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>
      }
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002542:	b590      	push	{r4, r7, lr}
 8002544:	b08d      	sub	sp, #52	; 0x34
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fe1f 	bl	8003196 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE13_M_const_castEv>
 8002558:	4603      	mov	r3, r0
 800255a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800255c:	69bc      	ldr	r4, [r7, #24]
 800255e:	68b8      	ldr	r0, [r7, #8]
 8002560:	f000 fe2a 	bl	80031b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8002564:	4603      	mov	r3, r0
 8002566:	429c      	cmp	r4, r3
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d030      	beq.n	80025d6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x94>
	  if (size() > 0
 8002574:	68b8      	ldr	r0, [r7, #8]
 8002576:	f000 fe2b 	bl	80031d0 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>
 800257a:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x66>
 8002580:	68bc      	ldr	r4, [r7, #8]
 8002582:	68b8      	ldr	r0, [r7, #8]
 8002584:	f000 fe30 	bl	80031e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 8002588:	4603      	mov	r3, r0
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fe37 	bl	8003200 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002592:	4603      	mov	r3, r0
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	4619      	mov	r1, r3
 8002598:	4620      	mov	r0, r4
 800259a:	f7ff fc5b 	bl	8001e54 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x66>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x68>
 80025a8:	2300      	movs	r3, #0
	  if (size() > 0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00c      	beq.n	80025c8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x86>
	    return _Res(0, _M_rightmost());
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	68b8      	ldr	r0, [r7, #8]
 80025b4:	f000 fe18 	bl	80031e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f107 031c 	add.w	r3, r7, #28
 80025be:	4619      	mov	r1, r3
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 fca9 	bl	8002f18 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80025c6:	e0db      	b.n	8002780 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fe22 	bl	8003218 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 80025d4:	e0d4      	b.n	8002780 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80025d6:	68bc      	ldr	r4, [r7, #8]
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fe10 	bl	8003200 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	6839      	ldr	r1, [r7, #0]
 80025e6:	4620      	mov	r0, r4
 80025e8:	f7ff fc34 	bl	8001e54 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d057      	beq.n	80026a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x160>
	  iterator __before = __pos;
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80025f6:	69bc      	ldr	r4, [r7, #24]
 80025f8:	68b8      	ldr	r0, [r7, #8]
 80025fa:	f000 fe92 	bl	8003322 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 80025fe:	4603      	mov	r3, r0
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	429c      	cmp	r4, r3
 8002604:	bf0c      	ite	eq
 8002606:	2301      	moveq	r3, #1
 8002608:	2300      	movne	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00d      	beq.n	800262c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8002610:	68b8      	ldr	r0, [r7, #8]
 8002612:	f000 fe86 	bl	8003322 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 8002616:	4604      	mov	r4, r0
 8002618:	68b8      	ldr	r0, [r7, #8]
 800261a:	f000 fe82 	bl	8003322 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	4621      	mov	r1, r4
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fd1e 	bl	8003066 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800262a:	e0a9      	b.n	8002780 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800262c:	68bc      	ldr	r4, [r7, #8]
 800262e:	f107 0314 	add.w	r3, r7, #20
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fe81 	bl	800333a <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>
 8002638:	4603      	mov	r3, r0
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fddf 	bl	8003200 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002642:	4603      	mov	r3, r0
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	4619      	mov	r1, r3
 8002648:	4620      	mov	r0, r4
 800264a:	f7ff fc03 	bl	8001e54 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01f      	beq.n	8002694 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ff3b 	bl	80024d2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x140>
		return _Res(0, __before._M_node);
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
 8002670:	f107 0214 	add.w	r2, r7, #20
 8002674:	f107 0320 	add.w	r3, r7, #32
 8002678:	4619      	mov	r1, r3
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fc4c 	bl	8002f18 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8002680:	e07e      	b.n	8002780 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8002682:	f107 0218 	add.w	r2, r7, #24
 8002686:	f107 0318 	add.w	r3, r7, #24
 800268a:	4619      	mov	r1, r3
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 fcea 	bl	8003066 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8002692:	e075      	b.n	8002780 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fdbc 	bl	8003218 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 80026a0:	e06e      	b.n	8002780 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80026a2:	68bc      	ldr	r4, [r7, #8]
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fdaa 	bl	8003200 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80026ac:	4603      	mov	r3, r0
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	4620      	mov	r0, r4
 80026b4:	f7ff fbce 	bl	8001e54 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d056      	beq.n	800276c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x22a>
	  iterator __after = __pos;
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80026c2:	69bc      	ldr	r4, [r7, #24]
 80026c4:	68b8      	ldr	r0, [r7, #8]
 80026c6:	f000 fd8f 	bl	80031e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 80026ca:	4603      	mov	r3, r0
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	429c      	cmp	r4, r3
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x1b4>
	    return _Res(0, _M_rightmost());
 80026dc:	2300      	movs	r3, #0
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
 80026e0:	68b8      	ldr	r0, [r7, #8]
 80026e2:	f000 fd81 	bl	80031e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 80026e6:	4602      	mov	r2, r0
 80026e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ec:	4619      	mov	r1, r3
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fc12 	bl	8002f18 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80026f4:	e044      	b.n	8002780 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80026f6:	68bc      	ldr	r4, [r7, #8]
 80026f8:	f107 0310 	add.w	r3, r7, #16
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fe2d 	bl	800335c <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEppEv>
 8002702:	4603      	mov	r3, r0
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fd7a 	bl	8003200 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	6839      	ldr	r1, [r7, #0]
 8002712:	4620      	mov	r0, r4
 8002714:	f7ff fb9e 	bl	8001e54 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d01f      	beq.n	800275e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fed6 	bl	80024d2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x20a>
		return _Res(0, __pos._M_node);
 8002736:	2300      	movs	r3, #0
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
 800273a:	f107 0218 	add.w	r2, r7, #24
 800273e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002742:	4619      	mov	r1, r3
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 fbe7 	bl	8002f18 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800274a:	e019      	b.n	8002780 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800274c:	f107 0210 	add.w	r2, r7, #16
 8002750:	f107 0310 	add.w	r3, r7, #16
 8002754:	4619      	mov	r1, r3
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fc85 	bl	8003066 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800275c:	e010      	b.n	8002780 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fd57 	bl	8003218 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 800276a:	e009      	b.n	8002780 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	return _Res(__pos._M_node, 0);
 800276c:	2300      	movs	r3, #0
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002770:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002774:	f107 0318 	add.w	r3, r7, #24
 8002778:	4619      	mov	r1, r3
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fcae 	bl	80030dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	3734      	adds	r7, #52	; 0x34
 8002784:	46bd      	mov	sp, r7
 8002786:	bd90      	pop	{r4, r7, pc}

08002788 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>:
      operator()(const _Pair& __x) const
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80027b6:	b5b0      	push	{r4, r5, r7, lr}
 80027b8:	b088      	sub	sp, #32
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d11a      	bne.n	8002800 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fcf4 	bl	80031b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 80027d0:	4602      	mov	r2, r0
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d013      	beq.n	8002800 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80027d8:	68fc      	ldr	r4, [r7, #12]
 80027da:	f107 0310 	add.w	r3, r7, #16
 80027de:	6839      	ldr	r1, [r7, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ffd1 	bl	8002788 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 80027e6:	4605      	mov	r5, r0
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fd09 	bl	8003200 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	4629      	mov	r1, r5
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff fb2d 	bl	8001e54 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4e>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x50>
 8002804:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8002806:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8002808:	6838      	ldr	r0, [r7, #0]
 800280a:	f7ff ffc9 	bl	80027a0 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 800280e:	4603      	mov	r3, r0
 8002810:	4619      	mov	r1, r3
 8002812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002814:	f000 fdb3 	bl	800337e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>
 8002818:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800281e:	7ff8      	ldrb	r0, [r7, #31]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	69b9      	ldr	r1, [r7, #24]
 8002824:	f008 fa96 	bl	800ad54 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8002832:	f107 0314 	add.w	r3, r7, #20
 8002836:	69b9      	ldr	r1, [r7, #24]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fe73 	bl	8002524 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 800283e:	697b      	ldr	r3, [r7, #20]
      }
 8002840:	4618      	mov	r0, r3
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bdb0      	pop	{r4, r5, r7, pc}

08002848 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002894:	6839      	ldr	r1, [r7, #0]
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fd85 	bl	80033a6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS7_>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80028e0:	6839      	ldr	r1, [r7, #0]
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fd6b 	bl	80033be <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 80028e8:	6839      	ldr	r1, [r7, #0]
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fd7c 	bl	80033e8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002916:	b590      	push	{r4, r7, lr}
 8002918:	b08d      	sub	sp, #52	; 0x34
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fd70 	bl	800340c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEE13_M_const_castEv>
 800292c:	4603      	mov	r3, r0
 800292e:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8002930:	69bc      	ldr	r4, [r7, #24]
 8002932:	68b8      	ldr	r0, [r7, #8]
 8002934:	f000 fd7b 	bl	800342e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8002938:	4603      	mov	r3, r0
 800293a:	429c      	cmp	r4, r3
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d030      	beq.n	80029aa <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 8002948:	68b8      	ldr	r0, [r7, #8]
 800294a:	f000 fd7c 	bl	8003446 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>
 800294e:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8002954:	68bc      	ldr	r4, [r7, #8]
 8002956:	68b8      	ldr	r0, [r7, #8]
 8002958:	f000 fd81 	bl	800345e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 800295c:	4603      	mov	r3, r0
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fd88 	bl	8003476 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002966:	4603      	mov	r3, r0
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	4619      	mov	r1, r3
 800296c:	4620      	mov	r0, r4
 800296e:	f000 fabe 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 800297c:	2300      	movs	r3, #0
	  if (size() > 0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00c      	beq.n	800299c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	68b8      	ldr	r0, [r7, #8]
 8002988:	f000 fd69 	bl	800345e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 800298c:	4602      	mov	r2, r0
 800298e:	f107 031c 	add.w	r3, r7, #28
 8002992:	4619      	mov	r1, r3
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fabf 	bl	8002f18 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800299a:	e0db      	b.n	8002b54 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fd73 	bl	800348e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 80029a8:	e0d4      	b.n	8002b54 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80029aa:	68bc      	ldr	r4, [r7, #8]
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fd61 	bl	8003476 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461a      	mov	r2, r3
 80029b8:	6839      	ldr	r1, [r7, #0]
 80029ba:	4620      	mov	r0, r4
 80029bc:	f000 fa97 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d057      	beq.n	8002a76 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80029ca:	69bc      	ldr	r4, [r7, #24]
 80029cc:	68b8      	ldr	r0, [r7, #8]
 80029ce:	f000 fde3 	bl	8003598 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 80029d2:	4603      	mov	r3, r0
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	429c      	cmp	r4, r3
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00d      	beq.n	8002a00 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 80029e4:	68b8      	ldr	r0, [r7, #8]
 80029e6:	f000 fdd7 	bl	8003598 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 80029ea:	4604      	mov	r4, r0
 80029ec:	68b8      	ldr	r0, [r7, #8]
 80029ee:	f000 fdd3 	bl	8003598 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 80029f2:	4603      	mov	r3, r0
 80029f4:	461a      	mov	r2, r3
 80029f6:	4621      	mov	r1, r4
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fb34 	bl	8003066 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80029fe:	e0a9      	b.n	8002b54 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8002a00:	68bc      	ldr	r4, [r7, #8]
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fdd2 	bl	80035b0 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fd30 	bl	8003476 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002a16:	4603      	mov	r3, r0
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f000 fa66 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d01f      	beq.n	8002a68 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ff3b 	bl	80028a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8002a40:	2300      	movs	r3, #0
 8002a42:	623b      	str	r3, [r7, #32]
 8002a44:	f107 0214 	add.w	r2, r7, #20
 8002a48:	f107 0320 	add.w	r3, r7, #32
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fa62 	bl	8002f18 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8002a54:	e07e      	b.n	8002b54 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8002a56:	f107 0218 	add.w	r2, r7, #24
 8002a5a:	f107 0318 	add.w	r3, r7, #24
 8002a5e:	4619      	mov	r1, r3
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fb00 	bl	8003066 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8002a66:	e075      	b.n	8002b54 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fd0d 	bl	800348e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8002a74:	e06e      	b.n	8002b54 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8002a76:	68bc      	ldr	r4, [r7, #8]
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fcfb 	bl	8003476 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002a80:	4603      	mov	r3, r0
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	4620      	mov	r0, r4
 8002a88:	f000 fa31 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d056      	beq.n	8002b40 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8002a96:	69bc      	ldr	r4, [r7, #24]
 8002a98:	68b8      	ldr	r0, [r7, #8]
 8002a9a:	f000 fce0 	bl	800345e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	429c      	cmp	r4, r3
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2301      	moveq	r3, #1
 8002aa8:	2300      	movne	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00c      	beq.n	8002aca <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab4:	68b8      	ldr	r0, [r7, #8]
 8002ab6:	f000 fcd2 	bl	800345e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8002aba:	4602      	mov	r2, r0
 8002abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fa28 	bl	8002f18 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8002ac8:	e044      	b.n	8002b54 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8002aca:	68bc      	ldr	r4, [r7, #8]
 8002acc:	f107 0310 	add.w	r3, r7, #16
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fd7e 	bl	80035d2 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEppEv>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fccb 	bl	8003476 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6839      	ldr	r1, [r7, #0]
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	f000 fa01 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01f      	beq.n	8002b32 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fed6 	bl	80028a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b0e:	f107 0218 	add.w	r2, r7, #24
 8002b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b16:	4619      	mov	r1, r3
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f9fd 	bl	8002f18 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8002b1e:	e019      	b.n	8002b54 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8002b20:	f107 0210 	add.w	r2, r7, #16
 8002b24:	f107 0310 	add.w	r3, r7, #16
 8002b28:	4619      	mov	r1, r3
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fa9b 	bl	8003066 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8002b30:	e010      	b.n	8002b54 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fca8 	bl	800348e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8002b3e:	e009      	b.n	8002b54 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b44:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002b48:	f107 0318 	add.w	r3, r7, #24
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fac4 	bl	80030dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	3734      	adds	r7, #52	; 0x34
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd90      	pop	{r4, r7, pc}

08002b5c <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>:
      operator()(const _Pair& __x) const
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002b8a:	b5b0      	push	{r4, r5, r7, lr}
 8002b8c:	b088      	sub	sp, #32
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d11a      	bne.n	8002bd4 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fc45 	bl	800342e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d013      	beq.n	8002bd4 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8002bac:	68fc      	ldr	r4, [r7, #12]
 8002bae:	f107 0310 	add.w	r3, r7, #16
 8002bb2:	6839      	ldr	r1, [r7, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ffd1 	bl	8002b5c <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 8002bba:	4605      	mov	r5, r0
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fc5a 	bl	8003476 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f000 f990 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 8002bd8:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8002bda:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8002bdc:	6838      	ldr	r0, [r7, #0]
 8002bde:	f7ff ffc9 	bl	8002b74 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4619      	mov	r1, r3
 8002be6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002be8:	f000 fd04 	bl	80035f4 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 8002bec:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8002bf2:	7ff8      	ldrb	r0, [r7, #31]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	69b9      	ldr	r1, [r7, #24]
 8002bf8:	f008 f8ac 	bl	800ad54 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8002c06:	f107 0314 	add.w	r3, r7, #20
 8002c0a:	69b9      	ldr	r1, [r7, #24]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fe73 	bl	80028f8 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8002c12:	697b      	ldr	r3, [r7, #20]
      }
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bdb0      	pop	{r4, r5, r7, pc}

08002c1c <_ZN9__gnu_cxx13new_allocatorIP6SymbolE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8002c28:	68b8      	ldr	r0, [r7, #8]
 8002c2a:	f008 f826 	bl	800ac7a <_ZdlPv>
      }
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6SymbolEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISF_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002c4a:	b590      	push	{r4, r7, lr}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fce1 	bl	800361c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE21_M_get_Node_allocatorEv>
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	6838      	ldr	r0, [r7, #0]
 8002c5e:	f7fe fcc3 	bl	80015e8 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEE9_M_valptrEv>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4619      	mov	r1, r3
 8002c66:	4620      	mov	r0, r4
 8002c68:	f000 fce3 	bl	8003632 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEEEE7destroyISG_EEvRSI_PT_>
      }
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd90      	pop	{r4, r7, pc}

08002c74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE11_M_put_nodeEPSt13_Rb_tree_nodeISF_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fccc 	bl	800361c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE21_M_get_Node_allocatorEv>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2201      	movs	r2, #1
 8002c88:	6839      	ldr	r1, [r7, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fcde 	bl	800364c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEEEE10deallocateERSI_PSH_j>
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE6_S_keyEPKSt13_Rb_tree_nodeISF_E>:
      _S_key(_Const_Link_type __x)
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fce2 	bl	800366a <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEE9_M_valptrEv>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	f107 030c 	add.w	r3, r7, #12
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fce9 	bl	8003686 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEclERKSF_>
 8002cb4:	4603      	mov	r3, r0
      }
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 8002cc8:	6839      	ldr	r1, [r7, #0]
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f008 fa18 	bl	800b100 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	0fdb      	lsrs	r3, r3, #31
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEE7_M_addrEv>:
      _M_addr() noexcept
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <_ZNSaIP10ExpressionEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002cfe:	6839      	ldr	r1, [r7, #0]
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fccc 	bl	800369e <_ZN9__gnu_cxx13new_allocatorIP10ExpressionEC1ERKS3_>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
	{ }
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj+0x1e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6839      	ldr	r1, [r7, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fcb2 	bl	80036b6 <_ZNSt16allocator_traitsISaIP10ExpressionEE8allocateERS2_j>
 8002d52:	4603      	mov	r3, r0
 8002d54:	e000      	b.n	8002d58 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj+0x20>
 8002d56:	2300      	movs	r3, #0
      }
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <_ZNSt16allocator_traitsISaIP10ExpressionEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fcaf 	bl	80036d4 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE10deallocateEPS2_j>
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fcac 	bl	80036ec <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10ExpressionEEvT_S5_>:
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
    }
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002e1e:	b590      	push	{r4, r7, lr}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fc77 	bl	800371c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8002e2e:	4604      	mov	r4, r0
 8002e30:	6838      	ldr	r0, [r7, #0]
 8002e32:	f000 fc7e 	bl	8003732 <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f000 fc87 	bl	800374e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE7destroyIS4_EEvRS6_PT_>
      }
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}

08002e48 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fc62 	bl	800371c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	6839      	ldr	r1, [r7, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fc82 	bl	8003768 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE10deallocateERS6_PS5_j>
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	f107 030c 	add.w	r3, r7, #12
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff f95a 	bl	8002138 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3310      	adds	r3, #16
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fc51 	bl	8003786 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <_ZNKSt4lessIcEclERKcS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	bf34      	ite	cc
 8002f06:	2301      	movcc	r3, #1
 8002f08:	2300      	movcs	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fc3d 	bl	80037ac <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002f32:	4603      	mov	r3, r0
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b08b      	sub	sp, #44	; 0x2c
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8002f50:	68b8      	ldr	r0, [r7, #8]
 8002f52:	f7fe fc94 	bl	800187e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8002f56:	4603      	mov	r3, r0
 8002f58:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8002f5a:	68b8      	ldr	r0, [r7, #8]
 8002f5c:	f7ff ff97 	bl	8002e8e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8002f60:	4603      	mov	r3, r0
 8002f62:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d020      	beq.n	8002fb2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8002f74:	68bc      	ldr	r4, [r7, #8]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fc04 	bl	8003786 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4620      	mov	r0, r4
 8002f86:	f7ff ffb2 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8002f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff f8af 	bl	80020fe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	e004      	b.n	8002fae <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff f89d 	bl	80020e6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002fac:	4603      	mov	r3, r0
 8002fae:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8002fb0:	e7db      	b.n	8002f6a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	f107 0310 	add.w	r3, r7, #16
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff f8bc 	bl	8002138 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8002fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01d      	beq.n	8003004 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8002fc8:	68b8      	ldr	r0, [r7, #8]
 8002fca:	f000 fbfa 	bl	80037c2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	f107 021c 	add.w	r2, r7, #28
 8002fd6:	f107 0310 	add.w	r3, r7, #16
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fc01 	bl	80037e4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc10token_typeEES6_>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8002fe8:	f107 0214 	add.w	r2, r7, #20
 8002fec:	f107 0318 	add.w	r3, r7, #24
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fc0a 	bl	800380c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>
 8002ff8:	e025      	b.n	8003046 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8002ffa:	f107 0310 	add.w	r3, r7, #16
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 f84a 	bl	8003098 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8003004:	68bc      	ldr	r4, [r7, #8]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff64 	bl	8002ed6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800300e:	4603      	mov	r3, r0
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4619      	mov	r1, r3
 8003014:	4620      	mov	r0, r4
 8003016:	f7ff ff6a 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8003020:	f107 0214 	add.w	r2, r7, #20
 8003024:	f107 0318 	add.w	r3, r7, #24
 8003028:	4619      	mov	r1, r3
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fbee 	bl	800380c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>
 8003030:	e009      	b.n	8003046 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8003032:	2300      	movs	r3, #0
 8003034:	623b      	str	r3, [r7, #32]
 8003036:	f107 0220 	add.w	r2, r7, #32
 800303a:	f107 0310 	add.w	r3, r7, #16
 800303e:	4619      	mov	r1, r3
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f84b 	bl	80030dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	372c      	adds	r7, #44	; 0x2c
 800304a:	46bd      	mov	sp, r7
 800304c:	bd90      	pop	{r4, r7, pc}

0800304e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	330c      	adds	r3, #12
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8003072:	68b8      	ldr	r0, [r7, #8]
 8003074:	f000 fb9a 	bl	80037ac <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003078:	4603      	mov	r3, r0
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fb93 	bl	80037ac <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003086:	4603      	mov	r3, r0
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f007 fe53 	bl	800ad50 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80030aa:	4602      	mov	r2, r0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	601a      	str	r2, [r3, #0]
	return *this;
 80030b0:	687b      	ldr	r3, [r7, #4]
      }
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f007 fe2f 	bl	800ad2a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80030cc:	4602      	mov	r2, r0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	601a      	str	r2, [r3, #0]
	return *this;
 80030d2:	687b      	ldr	r3, [r7, #4]
      }
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 80030e8:	68b8      	ldr	r0, [r7, #8]
 80030ea:	f000 fb5f 	bl	80037ac <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80030ee:	4603      	mov	r3, r0
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681c      	ldr	r4, [r3, #0]
 8003116:	6838      	ldr	r0, [r7, #0]
 8003118:	f7ff f94c 	bl	80023b4 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 800311c:	4603      	mov	r3, r0
 800311e:	4619      	mov	r1, r3
 8003120:	4620      	mov	r0, r4
 8003122:	f000 fb8c 	bl	800383e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 8003126:	4603      	mov	r3, r0
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bd90      	pop	{r4, r7, pc}

08003130 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSD_>:
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fb8a 	bl	800386c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8003158:	4604      	mov	r4, r0
 800315a:	6838      	ldr	r0, [r7, #0]
 800315c:	f000 fb91 	bl	8003882 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 8003160:	4603      	mov	r3, r0
 8003162:	4619      	mov	r1, r3
 8003164:	4620      	mov	r0, r4
 8003166:	f000 fb9a 	bl	800389e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE7destroyISA_EEvRSC_PT_>
      }
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bd90      	pop	{r4, r7, pc}

08003172 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fb75 	bl	800386c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8003182:	4603      	mov	r3, r0
 8003184:	2201      	movs	r2, #1
 8003186:	6839      	ldr	r1, [r7, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fb95 	bl	80038b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE10deallocateERSC_PSB_j>
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	f107 030c 	add.w	r3, r7, #12
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff f9bb 	bl	8002524 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3304      	adds	r3, #4
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3310      	adds	r3, #16
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fb64 	bl	80038d6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 800320e:	4603      	mov	r3, r0
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b08b      	sub	sp, #44	; 0x2c
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8003224:	68b8      	ldr	r0, [r7, #8]
 8003226:	f7fe fc06 	bl	8001a36 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 800322a:	4603      	mov	r3, r0
 800322c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800322e:	68b8      	ldr	r0, [r7, #8]
 8003230:	f7ff ffc2 	bl	80031b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8003234:	4603      	mov	r3, r0
 8003236:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8003238:	2301      	movs	r3, #1
 800323a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d020      	beq.n	8003286 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6e>
	  __y = __x;
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8003248:	68bc      	ldr	r4, [r7, #8]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fb42 	bl	80038d6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8003252:	4603      	mov	r3, r0
 8003254:	461a      	mov	r2, r3
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4620      	mov	r0, r4
 800325a:	f7fe fdfb 	bl	8001e54 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800325e:	4603      	mov	r3, r0
 8003260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8003264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x60>
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff f93b 	bl	80024ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8003274:	4603      	mov	r3, r0
 8003276:	e004      	b.n	8003282 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6a>
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff f929 	bl	80024d2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003280:	4603      	mov	r3, r0
 8003282:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8003284:	e7db      	b.n	800323e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x26>
      iterator __j = iterator(__y);
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	f107 0310 	add.w	r3, r7, #16
 800328c:	4611      	mov	r1, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f948 	bl	8002524 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8003294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01d      	beq.n	80032d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 800329c:	68b8      	ldr	r0, [r7, #8]
 800329e:	f000 fb2d 	bl	80038fc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>
 80032a2:	4603      	mov	r3, r0
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	f107 021c 	add.w	r2, r7, #28
 80032aa:	f107 0310 	add.w	r3, r7, #16
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fb34 	bl	800391e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 80032bc:	f107 0214 	add.w	r2, r7, #20
 80032c0:	f107 0318 	add.w	r3, r7, #24
 80032c4:	4619      	mov	r1, r3
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fb3d 	bl	8003946 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>
 80032cc:	e025      	b.n	800331a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 80032ce:	f107 0310 	add.w	r3, r7, #16
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f831 	bl	800333a <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80032d8:	68bc      	ldr	r4, [r7, #8]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff8f 	bl	8003200 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80032e2:	4603      	mov	r3, r0
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4619      	mov	r1, r3
 80032e8:	4620      	mov	r0, r4
 80032ea:	f7fe fdb3 	bl	8001e54 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 80032f4:	f107 0214 	add.w	r2, r7, #20
 80032f8:	f107 0318 	add.w	r3, r7, #24
 80032fc:	4619      	mov	r1, r3
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fb21 	bl	8003946 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>
 8003304:	e009      	b.n	800331a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 8003306:	2300      	movs	r3, #0
 8003308:	623b      	str	r3, [r7, #32]
 800330a:	f107 0220 	add.w	r2, r7, #32
 800330e:	f107 0310 	add.w	r3, r7, #16
 8003312:	4619      	mov	r1, r3
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f7ff fee1 	bl	80030dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	372c      	adds	r7, #44	; 0x2c
 800331e:	46bd      	mov	sp, r7
 8003320:	bd90      	pop	{r4, r7, pc}

08003322 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	330c      	adds	r3, #12
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f007 fd02 	bl	800ad50 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800334c:	4602      	mov	r2, r0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	601a      	str	r2, [r3, #0]
	return *this;
 8003352:	687b      	ldr	r3, [r7, #4]
      }
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f007 fcde 	bl	800ad2a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800336e:	4602      	mov	r2, r0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	601a      	str	r2, [r3, #0]
	return *this;
 8003374:	687b      	ldr	r3, [r7, #4]
      }
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>:
	  operator()(_Arg&& __arg) const
 800337e:	b590      	push	{r4, r7, lr}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681c      	ldr	r4, [r3, #0]
 800338c:	6838      	ldr	r0, [r7, #0]
 800338e:	f7ff fa07 	bl	80027a0 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8003392:	4603      	mov	r3, r0
 8003394:	4619      	mov	r1, r3
 8003396:	4620      	mov	r0, r4
 8003398:	f000 faee 	bl	8003978 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>
 800339c:	4603      	mov	r3, r0
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd90      	pop	{r4, r7, pc}

080033a6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS7_>:
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80033be:	b590      	push	{r4, r7, lr}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 faec 	bl	80039a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 80033ce:	4604      	mov	r4, r0
 80033d0:	6838      	ldr	r0, [r7, #0]
 80033d2:	f000 faf3 	bl	80039bc <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 80033d6:	4603      	mov	r3, r0
 80033d8:	4619      	mov	r1, r3
 80033da:	4620      	mov	r0, r4
 80033dc:	f000 fafc 	bl	80039d8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE7destroyIS4_EEvRS6_PT_>
      }
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd90      	pop	{r4, r7, pc}

080033e8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fad7 	bl	80039a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2201      	movs	r2, #1
 80033fc:	6839      	ldr	r1, [r7, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 faf7 	bl	80039f2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE10deallocateERS6_PS5_j>
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	f107 030c 	add.w	r3, r7, #12
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fa6a 	bl	80028f8 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3304      	adds	r3, #4
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3310      	adds	r3, #16
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fac6 	bl	8003a10 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8003484:	4603      	mov	r3, r0
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800348e:	b590      	push	{r4, r7, lr}
 8003490:	b08b      	sub	sp, #44	; 0x2c
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800349a:	68b8      	ldr	r0, [r7, #8]
 800349c:	f7fe fba7 	bl	8001bee <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 80034a0:	4603      	mov	r3, r0
 80034a2:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80034a4:	68b8      	ldr	r0, [r7, #8]
 80034a6:	f7ff ffc2 	bl	800342e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 80034aa:	4603      	mov	r3, r0
 80034ac:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d020      	beq.n	80034fc <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80034be:	68bc      	ldr	r4, [r7, #8]
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 faa4 	bl	8003a10 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4620      	mov	r0, r4
 80034d0:	f7ff fd0d 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80034da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff f9ea 	bl	80028be <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 80034ea:	4603      	mov	r3, r0
 80034ec:	e004      	b.n	80034f8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff f9d8 	bl	80028a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 80034f6:	4603      	mov	r3, r0
 80034f8:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80034fa:	e7db      	b.n	80034b4 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	f107 0310 	add.w	r3, r7, #16
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff f9f7 	bl	80028f8 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800350a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01d      	beq.n	800354e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8003512:	68b8      	ldr	r0, [r7, #8]
 8003514:	f000 fa8f 	bl	8003a36 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>
 8003518:	4603      	mov	r3, r0
 800351a:	61fb      	str	r3, [r7, #28]
 800351c:	f107 021c 	add.w	r2, r7, #28
 8003520:	f107 0310 	add.w	r3, r7, #16
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fa96 	bl	8003a58 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEES6_>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8003532:	f107 0214 	add.w	r2, r7, #20
 8003536:	f107 0318 	add.w	r3, r7, #24
 800353a:	4619      	mov	r1, r3
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 fa9f 	bl	8003a80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>
 8003542:	e025      	b.n	8003590 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8003544:	f107 0310 	add.w	r3, r7, #16
 8003548:	4618      	mov	r0, r3
 800354a:	f000 f831 	bl	80035b0 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800354e:	68bc      	ldr	r4, [r7, #8]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ff8f 	bl	8003476 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003558:	4603      	mov	r3, r0
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4619      	mov	r1, r3
 800355e:	4620      	mov	r0, r4
 8003560:	f7ff fcc5 	bl	8002eee <_ZNKSt4lessIcEclERKcS2_>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 800356a:	f107 0214 	add.w	r2, r7, #20
 800356e:	f107 0318 	add.w	r3, r7, #24
 8003572:	4619      	mov	r1, r3
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fa83 	bl	8003a80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>
 800357a:	e009      	b.n	8003590 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 800357c:	2300      	movs	r3, #0
 800357e:	623b      	str	r3, [r7, #32]
 8003580:	f107 0220 	add.w	r2, r7, #32
 8003584:	f107 0310 	add.w	r3, r7, #16
 8003588:	4619      	mov	r1, r3
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff fda6 	bl	80030dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	372c      	adds	r7, #44	; 0x2c
 8003594:	46bd      	mov	sp, r7
 8003596:	bd90      	pop	{r4, r7, pc}

08003598 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	330c      	adds	r3, #12
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f007 fbc7 	bl	800ad50 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80035c2:	4602      	mov	r2, r0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	601a      	str	r2, [r3, #0]
	return *this;
 80035c8:	687b      	ldr	r3, [r7, #4]
      }
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f007 fba3 	bl	800ad2a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80035e4:	4602      	mov	r2, r0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	601a      	str	r2, [r3, #0]
	return *this;
 80035ea:	687b      	ldr	r3, [r7, #4]
      }
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681c      	ldr	r4, [r3, #0]
 8003602:	6838      	ldr	r0, [r7, #0]
 8003604:	f7ff fab6 	bl	8002b74 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003608:	4603      	mov	r3, r0
 800360a:	4619      	mov	r1, r3
 800360c:	4620      	mov	r0, r4
 800360e:	f000 fa50 	bl	8003ab2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 8003612:	4603      	mov	r3, r0
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bd90      	pop	{r4, r7, pc}

0800361c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEEEE7destroyISG_EEvRSI_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8003632:	b580      	push	{r7, lr}
 8003634:	b082      	sub	sp, #8
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800363c:	6839      	ldr	r1, [r7, #0]
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa5b 	bl	8003afa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEE7destroyISH_EEvPT_>
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEEEE10deallocateERSI_PSH_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 fa58 	bl	8003b12 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEE10deallocateEPSI_j>
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEE9_M_valptrEv>:
      _M_valptr() const
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3310      	adds	r3, #16
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fa57 	bl	8003b2a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEE6_M_ptrEv>
 800367c:	4603      	mov	r3, r0
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEclERKSF_>:
      operator()(const _Pair& __x) const
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <_ZN9__gnu_cxx13new_allocatorIP10ExpressionEC1ERKS3_>:
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <_ZNSt16allocator_traitsISaIP10ExpressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80036c0:	2200      	movs	r2, #0
 80036c2:	6839      	ldr	r1, [r7, #0]
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fa3c 	bl	8003b42 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE8allocateEjPKv>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80036e0:	68b8      	ldr	r0, [r7, #8]
 80036e2:	f007 faca 	bl	800ac7a <_ZdlPv>
      }
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fa41 	bl	8003b80 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEET_SA_>
 80036fe:	4604      	mov	r4, r0
 8003700:	68b8      	ldr	r0, [r7, #8]
 8003702:	f000 fa3d 	bl	8003b80 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEET_SA_>
 8003706:	4603      	mov	r3, r0
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	4619      	mov	r1, r3
 800370c:	4620      	mov	r0, r4
 800370e:	f000 fa42 	bl	8003b96 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_ET1_T0_SC_SB_>
 8003712:	4603      	mov	r3, r0
    }
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	bd90      	pop	{r4, r7, pc}

0800371c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4618      	mov	r0, r3
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>:
      _M_valptr()
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3310      	adds	r3, #16
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fa4c 	bl	8003bdc <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>
 8003744:	4603      	mov	r3, r0
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8003758:	6839      	ldr	r1, [r7, #0]
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fa4a 	bl	8003bf4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE7destroyIS5_EEvPT_>
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fa46 	bl	8003c0a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE10deallocateEPS6_j>
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fa47 	bl	8003c22 <_ZNKSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 8003794:	4602      	mov	r2, r0
 8003796:	f107 030c 	add.w	r3, r7, #12
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe fdfd 	bl	800239c <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 80037a2:	4603      	mov	r3, r0
      }
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	f107 030c 	add.w	r3, r7, #12
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe fcaf 	bl	8002138 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc10token_typeEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8003818:	68b8      	ldr	r0, [r7, #8]
 800381a:	f000 fa10 	bl	8003c3e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc10token_typeEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800381e:	4603      	mov	r3, r0
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff ffc0 	bl	80037ac <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800382c:	4603      	mov	r3, r0
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	605a      	str	r2, [r3, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fa03 	bl	8003c54 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>
 800384e:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8003850:	6838      	ldr	r0, [r7, #0]
 8003852:	f7fe fdaf 	bl	80023b4 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	68f9      	ldr	r1, [r7, #12]
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fa0a 	bl	8003c76 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 8003862:	68fb      	ldr	r3, [r7, #12]
	}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>:
      _M_valptr()
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3310      	adds	r3, #16
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fa11 	bl	8003cb6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>
 8003894:	4603      	mov	r3, r0
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE7destroyISA_EEvRSC_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80038a8:	6839      	ldr	r1, [r7, #0]
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fa0f 	bl	8003cce <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE7destroyISB_EEvPT_>
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fa0c 	bl	8003ce6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE10deallocateEPSC_j>
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>:
      _S_key(_Const_Link_type __x)
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fa0d 	bl	8003cfe <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 80038e4:	4602      	mov	r2, r0
 80038e6:	f107 030c 	add.w	r3, r7, #12
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fe ff4b 	bl	8002788 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 80038f2:	4603      	mov	r3, r0
      }
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe fe08 	bl	8002524 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8003952:	68b8      	ldr	r0, [r7, #8]
 8003954:	f000 f9e1 	bl	8003d1a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEOT_RNSt16remove_referenceISE_E4typeE>
 8003958:	4603      	mov	r3, r0
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff23 	bl	80037ac <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003966:	4603      	mov	r3, r0
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f9d4 	bl	8003d30 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>
 8003988:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800398a:	6838      	ldr	r0, [r7, #0]
 800398c:	f7fe ff08 	bl	80027a0 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8003990:	4603      	mov	r3, r0
 8003992:	461a      	mov	r2, r3
 8003994:	68f9      	ldr	r1, [r7, #12]
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f9db 	bl	8003d52 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>
	  return __tmp;
 800399c:	68fb      	ldr	r3, [r7, #12]
	}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>:
      _M_valptr()
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3310      	adds	r3, #16
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 f9e2 	bl	8003d92 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>
 80039ce:	4603      	mov	r3, r0
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80039e2:	6839      	ldr	r1, [r7, #0]
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f9e0 	bl	8003daa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE7destroyIS5_EEvPT_>
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f9dc 	bl	8003dc0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE10deallocateEPS6_j>
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f9dd 	bl	8003dd8 <_ZNKSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	f107 030c 	add.w	r3, r7, #12
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff f898 	bl	8002b5c <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 8003a2c:	4603      	mov	r3, r0
      }
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	f107 030c 	add.w	r3, r7, #12
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe ff55 	bl	80028f8 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	bf0c      	ite	eq
 8003a6e:	2301      	moveq	r3, #1
 8003a70:	2300      	movne	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8003a8c:	68b8      	ldr	r0, [r7, #8]
 8003a8e:	f000 f9b1 	bl	8003df4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003a92:	4603      	mov	r3, r0
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff fe86 	bl	80037ac <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f9a4 	bl	8003e0a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>
 8003ac2:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8003ac4:	6838      	ldr	r0, [r7, #0]
 8003ac6:	f7ff f855 	bl	8002b74 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	68f9      	ldr	r1, [r7, #12]
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f9ab 	bl	8003e2c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
	}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS9_EEEED1Ev>:
    struct pair
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f007 fa54 	bl	800af98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEE7destroyISH_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8003b04:	6838      	ldr	r0, [r7, #0]
 8003b06:	f7ff ffeb 	bl	8003ae0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS9_EEEED1Ev>
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEE10deallocateEPSI_j>:
      deallocate(pointer __p, size_type)
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003b1e:	68b8      	ldr	r0, [r7, #8]
 8003b20:	f007 f8ab 	bl	800ac7a <_ZdlPv>
      }
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f99a 	bl	8003e6c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEE7_M_addrEv>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f997 	bl	8003e82 <_ZNK9__gnu_cxx13new_allocatorIP10ExpressionE8max_sizeEv>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	bf8c      	ite	hi
 8003b5c:	2301      	movhi	r3, #1
 8003b5e:	2300      	movls	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003b66:	f007 f951 	bl	800ae0c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f007 f887 	bl	800ac82 <_Znwj>
 8003b74:	4603      	mov	r3, r0
 8003b76:	bf00      	nop
      }
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEET_SA_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_ET1_T0_SC_SB_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003b96:	b5b0      	push	{r4, r5, r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f979 	bl	8003e9a <_ZSt12__niter_baseIPKP10ExpressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8003ba8:	4604      	mov	r4, r0
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f000 f975 	bl	8003e9a <_ZSt12__niter_baseIPKP10ExpressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8003bb0:	4605      	mov	r5, r0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 f97e 	bl	8003eb6 <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f000 f983 	bl	8003ecc <_ZSt13__copy_move_aILb0EPKP10ExpressionPS1_ET1_T0_S6_S5_>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	1d3b      	adds	r3, r7, #4
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 f98f 	bl	8003ef0 <_ZSt12__niter_wrapIPP10ExpressionET_RKS3_S3_>
 8003bd2:	4603      	mov	r3, r0
    }
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bdb0      	pop	{r4, r5, r7, pc}

08003bdc <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>:
      _M_ptr() noexcept
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f98f 	bl	8003f08 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>
 8003bea:	4603      	mov	r3, r0
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE7destroyIS5_EEvPT_>:
	destroy(_Up* __p)
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003c16:	68b8      	ldr	r0, [r7, #8]
 8003c18:	f007 f82f 	bl	800ac7a <_ZdlPv>
      }
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <_ZNKSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>:
      _M_valptr() const
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3310      	adds	r3, #16
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f975 	bl	8003f1e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc10token_typeEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff fd5d 	bl	800371c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 f965 	bl	8003f36 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE8allocateERS6_j>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8003c76:	b5b0      	push	{r4, r5, r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4619      	mov	r1, r3
 8003c86:	2014      	movs	r0, #20
 8003c88:	f7fc fc42 	bl	8000510 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff fd45 	bl	800371c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8003c92:	4604      	mov	r4, r0
 8003c94:	68b8      	ldr	r0, [r7, #8]
 8003c96:	f7ff fd4c 	bl	8003732 <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fe fb89 	bl	80023b4 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f000 f953 	bl	8003f54 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bdb0      	pop	{r4, r5, r7, pc}

08003cb6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>:
      _M_ptr() noexcept
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f95b 	bl	8003f7a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE7destroyISB_EEvPT_>:
	destroy(_Up* __p)
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8003cd8:	6838      	ldr	r0, [r7, #0]
 8003cda:	f7fc fc72 	bl	80005c2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE10deallocateEPSC_j>:
      deallocate(pointer __p, size_type)
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003cf2:	68b8      	ldr	r0, [r7, #8]
 8003cf4:	f006 ffc1 	bl	800ac7a <_ZdlPv>
      }
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>:
      _M_valptr() const
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3310      	adds	r3, #16
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f940 	bl	8003f90 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>
 8003d10:	4603      	mov	r3, r0
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>:
      _M_get_node()
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff fd97 	bl	800386c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2101      	movs	r1, #1
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 f930 	bl	8003fa8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE8allocateERSC_j>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8003d52:	b5b0      	push	{r4, r5, r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4619      	mov	r1, r3
 8003d62:	202c      	movs	r0, #44	; 0x2c
 8003d64:	f7fc fbd4 	bl	8000510 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff fd7f 	bl	800386c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8003d6e:	4604      	mov	r4, r0
 8003d70:	68b8      	ldr	r0, [r7, #8]
 8003d72:	f7ff fd86 	bl	8003882 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 8003d76:	4605      	mov	r5, r0
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7fe fd11 	bl	80027a0 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	461a      	mov	r2, r3
 8003d82:	4629      	mov	r1, r5
 8003d84:	4620      	mov	r0, r4
 8003d86:	f000 f91e 	bl	8003fc6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>
	}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bdb0      	pop	{r4, r5, r7, pc}

08003d92 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>:
      _M_ptr() noexcept
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f926 	bl	8003fec <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>
 8003da0:	4603      	mov	r3, r0
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE7destroyIS5_EEvPT_>:
	destroy(_Up* __p)
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003dcc:	68b8      	ldr	r0, [r7, #8]
 8003dce:	f006 ff54 	bl	800ac7a <_ZdlPv>
      }
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <_ZNKSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>:
      _M_valptr() const
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3310      	adds	r3, #16
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 f90c 	bl	8004002 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff fdc7 	bl	80039a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f8fc 	bl	800401a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE8allocateERS6_j>
 8003e22:	4603      	mov	r3, r0
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8003e2c:	b5b0      	push	{r4, r5, r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	2014      	movs	r0, #20
 8003e3e:	f7fc fb67 	bl	8000510 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7ff fdaf 	bl	80039a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8003e48:	4604      	mov	r4, r0
 8003e4a:	68b8      	ldr	r0, [r7, #8]
 8003e4c:	f7ff fdb6 	bl	80039bc <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 8003e50:	4605      	mov	r5, r0
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fe fe8e 	bl	8002b74 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f000 f8ea 	bl	8004038 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bdb0      	pop	{r4, r5, r7, pc}

08003e6c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEE7_M_addrEv>:
      _M_addr() const noexcept
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <_ZNK9__gnu_cxx13new_allocatorIP10ExpressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003e8a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <_ZSt12__niter_baseIPKP10ExpressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8003ea2:	1d3b      	adds	r3, r7, #4
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 f8da 	bl	800405e <_ZNK9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <_ZSt12__niter_baseIPP10ExpressionET_S3_>:
    __niter_base(_Iterator __it)
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <_ZSt13__copy_move_aILb0EPKP10ExpressionPS1_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8003ed8:	2301      	movs	r3, #1
 8003eda:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f8c7 	bl	8004074 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP10ExpressionEEPT_PKS5_S8_S6_>
 8003ee6:	4603      	mov	r3, r0
    }
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <_ZSt12__niter_wrapIPP10ExpressionET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
    { return __res; }
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>:
      _M_addr() noexcept
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f8c1 	bl	80040ae <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003f40:	2200      	movs	r2, #0
 8003f42:	6839      	ldr	r1, [r7, #0]
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8bd 	bl	80040c4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fe fa27 	bl	80023b4 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003f66:	4603      	mov	r3, r0
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f8cb 	bl	8004108 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>:
      _M_addr() noexcept
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f8cd 	bl	8004138 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	6839      	ldr	r1, [r7, #0]
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8c9 	bl	800414e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fe fbe4 	bl	80027a0 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f8ea 	bl	80041b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE9constructISB_JRKSB_EEEvPT_DpOT0_>
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>:
      _M_addr() noexcept
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f8ec 	bl	80041e8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>
 8004010:	4603      	mov	r3, r0
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004024:	2200      	movs	r2, #0
 8004026:	6839      	ldr	r1, [r7, #0]
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f8e8 	bl	80041fe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv>
 800402e:	4603      	mov	r3, r0
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7fe fd95 	bl	8002b74 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 800404a:	4603      	mov	r3, r0
 800404c:	461a      	mov	r2, r3
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f8f6 	bl	8004242 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <_ZNK9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4618      	mov	r0, r3
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP10ExpressionEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	109b      	asrs	r3, r3, #2
 8004088:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d006      	beq.n	800409e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP10ExpressionEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	461a      	mov	r2, r3
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f007 f8f5 	bl	800b288 <memmove>
	  return __result + _Num;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4413      	add	r3, r2
	}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>:
      _M_addr() const noexcept
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f8cf 	bl	8004274 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv>
 80040d6:	4602      	mov	r2, r0
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4293      	cmp	r3, r2
 80040dc:	bf8c      	ite	hi
 80040de:	2301      	movhi	r3, #1
 80040e0:	2300      	movls	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80040e8:	f006 fe90 	bl	800ae0c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f006 fdc3 	bl	800ac82 <_Znwj>
 80040fc:	4603      	mov	r3, r0
 80040fe:	bf00      	nop
      }
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004108:	b590      	push	{r4, r7, lr}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7fe f94d 	bl	80023b4 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 800411a:	4604      	mov	r4, r0
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4619      	mov	r1, r3
 8004120:	2002      	movs	r0, #2
 8004122:	f7fc f9f5 	bl	8000510 <_ZnwjPv>
 8004126:	4603      	mov	r3, r0
 8004128:	461a      	mov	r2, r3
 800412a:	4623      	mov	r3, r4
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	8013      	strh	r3, [r2, #0]
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	bd90      	pop	{r4, r7, pc}

08004138 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>:
      _M_addr() const noexcept
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f898 	bl	8004290 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv>
 8004160:	4602      	mov	r2, r0
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4293      	cmp	r3, r2
 8004166:	bf8c      	ite	hi
 8004168:	2301      	movhi	r3, #1
 800416a:	2300      	movls	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004172:	f006 fe4b 	bl	800ae0c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	222c      	movs	r2, #44	; 0x2c
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	4618      	mov	r0, r3
 8004180:	f006 fd7f 	bl	800ac82 <_Znwj>
 8004184:	4603      	mov	r3, r0
 8004186:	bf00      	nop
      }
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1ERKS8_>:
      constexpr pair(const pair&) = default;
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f006 ffe1 	bl	800b168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	7e1a      	ldrb	r2, [r3, #24]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	761a      	strb	r2, [r3, #24]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE9constructISB_JRKSB_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7fe faeb 	bl	80027a0 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 80041ca:	4604      	mov	r4, r0
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4619      	mov	r1, r3
 80041d0:	201c      	movs	r0, #28
 80041d2:	f7fc f99d 	bl	8000510 <_ZnwjPv>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4621      	mov	r1, r4
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ffd8 	bl	8004190 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1ERKS8_>
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd90      	pop	{r4, r7, pc}

080041e8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>:
      _M_addr() const noexcept
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f84e 	bl	80042ac <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv>
 8004210:	4602      	mov	r2, r0
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4293      	cmp	r3, r2
 8004216:	bf8c      	ite	hi
 8004218:	2301      	movhi	r3, #1
 800421a:	2300      	movls	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004222:	f006 fdf3 	bl	800ae0c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4618      	mov	r0, r3
 8004232:	f006 fd26 	bl	800ac82 <_Znwj>
 8004236:	4603      	mov	r3, r0
 8004238:	bf00      	nop
      }
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004242:	b590      	push	{r4, r7, lr}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fe fc90 	bl	8002b74 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004254:	4604      	mov	r4, r0
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4619      	mov	r1, r3
 800425a:	2003      	movs	r0, #3
 800425c:	f7fc f958 	bl	8000510 <_ZnwjPv>
 8004260:	4603      	mov	r3, r0
 8004262:	4622      	mov	r2, r4
 8004264:	8811      	ldrh	r1, [r2, #0]
 8004266:	7892      	ldrb	r2, [r2, #2]
 8004268:	8019      	strh	r1, [r3, #0]
 800426a:	709a      	strb	r2, [r3, #2]
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	bd90      	pop	{r4, r7, pc}

08004274 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800427c:	4b03      	ldr	r3, [pc, #12]	; (800428c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv+0x18>)
      }
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	06666666 	.word	0x06666666

08004290 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004298:	4b03      	ldr	r3, [pc, #12]	; (80042a8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv+0x18>)
      }
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	02e8ba2e 	.word	0x02e8ba2e

080042ac <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv+0x18>)
      }
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	06666666 	.word	0x06666666

080042c8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>:
      ~map() = default;
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fd f820 	bl	8001318 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>:
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fc ff63 	bl	80011b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>:
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fc fea9 	bl	800105e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <_Z41__static_initialization_and_destruction_0ii>:
 8004318:	b590      	push	{r4, r7, lr}
 800431a:	b0e7      	sub	sp, #412	; 0x19c
 800431c:	af02      	add	r7, sp, #8
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	6018      	str	r0, [r3, #0]
 8004322:	463b      	mov	r3, r7
 8004324:	6019      	str	r1, [r3, #0]
 8004326:	1d3b      	adds	r3, r7, #4
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b01      	cmp	r3, #1
 800432c:	f040 819d 	bne.w	800466a <_Z41__static_initialization_and_destruction_0ii+0x352>
 8004330:	463b      	mov	r3, r7
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004338:	4293      	cmp	r3, r2
 800433a:	f040 8196 	bne.w	800466a <_Z41__static_initialization_and_destruction_0ii+0x352>
	{'^', TOKEN_POWER},
	{'%', TOKEN_MODULO},
	{'(', TOKEN_LEFT_BRACKET},
	{')', TOKEN_RIGHT_BRACKET},
	{'\0', TOKEN_END_OF_FILE},
};
 800433e:	f107 0314 	add.w	r3, r7, #20
 8004342:	4618      	mov	r0, r3
 8004344:	2322      	movs	r3, #34	; 0x22
 8004346:	461a      	mov	r2, r3
 8004348:	2100      	movs	r1, #0
 800434a:	f006 ffb7 	bl	800b2bc <memset>
 800434e:	f107 0314 	add.w	r3, r7, #20
 8004352:	223a      	movs	r2, #58	; 0x3a
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	f107 0314 	add.w	r3, r7, #20
 800435a:	2201      	movs	r2, #1
 800435c:	705a      	strb	r2, [r3, #1]
 800435e:	f107 0314 	add.w	r3, r7, #20
 8004362:	220a      	movs	r2, #10
 8004364:	709a      	strb	r2, [r3, #2]
 8004366:	f107 0314 	add.w	r3, r7, #20
 800436a:	220a      	movs	r2, #10
 800436c:	70da      	strb	r2, [r3, #3]
 800436e:	f107 0314 	add.w	r3, r7, #20
 8004372:	222c      	movs	r2, #44	; 0x2c
 8004374:	711a      	strb	r2, [r3, #4]
 8004376:	f107 0314 	add.w	r3, r7, #20
 800437a:	220c      	movs	r2, #12
 800437c:	715a      	strb	r2, [r3, #5]
 800437e:	f107 0314 	add.w	r3, r7, #20
 8004382:	222e      	movs	r2, #46	; 0x2e
 8004384:	719a      	strb	r2, [r3, #6]
 8004386:	f107 0314 	add.w	r3, r7, #20
 800438a:	220b      	movs	r2, #11
 800438c:	71da      	strb	r2, [r3, #7]
 800438e:	f107 0314 	add.w	r3, r7, #20
 8004392:	225b      	movs	r2, #91	; 0x5b
 8004394:	721a      	strb	r2, [r3, #8]
 8004396:	f107 0314 	add.w	r3, r7, #20
 800439a:	220d      	movs	r2, #13
 800439c:	725a      	strb	r2, [r3, #9]
 800439e:	f107 0314 	add.w	r3, r7, #20
 80043a2:	225d      	movs	r2, #93	; 0x5d
 80043a4:	729a      	strb	r2, [r3, #10]
 80043a6:	f107 0314 	add.w	r3, r7, #20
 80043aa:	220e      	movs	r2, #14
 80043ac:	72da      	strb	r2, [r3, #11]
 80043ae:	f107 0314 	add.w	r3, r7, #20
 80043b2:	227c      	movs	r2, #124	; 0x7c
 80043b4:	731a      	strb	r2, [r3, #12]
 80043b6:	f107 0314 	add.w	r3, r7, #20
 80043ba:	2215      	movs	r2, #21
 80043bc:	735a      	strb	r2, [r3, #13]
 80043be:	f107 0314 	add.w	r3, r7, #20
 80043c2:	2226      	movs	r2, #38	; 0x26
 80043c4:	739a      	strb	r2, [r3, #14]
 80043c6:	f107 0314 	add.w	r3, r7, #20
 80043ca:	2216      	movs	r2, #22
 80043cc:	73da      	strb	r2, [r3, #15]
 80043ce:	f107 0314 	add.w	r3, r7, #20
 80043d2:	222b      	movs	r2, #43	; 0x2b
 80043d4:	741a      	strb	r2, [r3, #16]
 80043d6:	f107 0314 	add.w	r3, r7, #20
 80043da:	221f      	movs	r2, #31
 80043dc:	745a      	strb	r2, [r3, #17]
 80043de:	f107 0314 	add.w	r3, r7, #20
 80043e2:	222d      	movs	r2, #45	; 0x2d
 80043e4:	749a      	strb	r2, [r3, #18]
 80043e6:	f107 0314 	add.w	r3, r7, #20
 80043ea:	2220      	movs	r2, #32
 80043ec:	74da      	strb	r2, [r3, #19]
 80043ee:	f107 0314 	add.w	r3, r7, #20
 80043f2:	222a      	movs	r2, #42	; 0x2a
 80043f4:	751a      	strb	r2, [r3, #20]
 80043f6:	f107 0314 	add.w	r3, r7, #20
 80043fa:	2221      	movs	r2, #33	; 0x21
 80043fc:	755a      	strb	r2, [r3, #21]
 80043fe:	f107 0314 	add.w	r3, r7, #20
 8004402:	222f      	movs	r2, #47	; 0x2f
 8004404:	759a      	strb	r2, [r3, #22]
 8004406:	f107 0314 	add.w	r3, r7, #20
 800440a:	2222      	movs	r2, #34	; 0x22
 800440c:	75da      	strb	r2, [r3, #23]
 800440e:	f107 0314 	add.w	r3, r7, #20
 8004412:	225e      	movs	r2, #94	; 0x5e
 8004414:	761a      	strb	r2, [r3, #24]
 8004416:	f107 0314 	add.w	r3, r7, #20
 800441a:	2223      	movs	r2, #35	; 0x23
 800441c:	765a      	strb	r2, [r3, #25]
 800441e:	f107 0314 	add.w	r3, r7, #20
 8004422:	2225      	movs	r2, #37	; 0x25
 8004424:	769a      	strb	r2, [r3, #26]
 8004426:	f107 0314 	add.w	r3, r7, #20
 800442a:	2224      	movs	r2, #36	; 0x24
 800442c:	76da      	strb	r2, [r3, #27]
 800442e:	f107 0314 	add.w	r3, r7, #20
 8004432:	2228      	movs	r2, #40	; 0x28
 8004434:	771a      	strb	r2, [r3, #28]
 8004436:	f107 0314 	add.w	r3, r7, #20
 800443a:	2226      	movs	r2, #38	; 0x26
 800443c:	775a      	strb	r2, [r3, #29]
 800443e:	f107 0314 	add.w	r3, r7, #20
 8004442:	2229      	movs	r2, #41	; 0x29
 8004444:	779a      	strb	r2, [r3, #30]
 8004446:	f107 0314 	add.w	r3, r7, #20
 800444a:	2227      	movs	r2, #39	; 0x27
 800444c:	77da      	strb	r2, [r3, #31]
 800444e:	f107 0314 	add.w	r3, r7, #20
 8004452:	2225      	movs	r2, #37	; 0x25
 8004454:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004458:	f107 030c 	add.w	r3, r7, #12
 800445c:	f107 0214 	add.w	r2, r7, #20
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	f107 030c 	add.w	r3, r7, #12
 8004466:	2211      	movs	r2, #17
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800446e:	4618      	mov	r0, r3
 8004470:	f7fc fabc 	bl	80009ec <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8004474:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004478:	f107 020c 	add.w	r2, r7, #12
 800447c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	460b      	mov	r3, r1
 8004484:	ca06      	ldmia	r2, {r1, r2}
 8004486:	4885      	ldr	r0, [pc, #532]	; (800469c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8004488:	f7fc fac8 	bl	8000a1c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800448c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004490:	4618      	mov	r0, r3
 8004492:	f7fc fab7 	bl	8000a04 <_ZNSaISt4pairIKc10token_typeEED1Ev>

static const std::map<std::string, token_type> token_strings
{
	{"true", TOKEN_TRUE},
 8004496:	2305      	movs	r3, #5
 8004498:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
	{"if", TOKEN_IF},
	{"elseif", TOKEN_ELSEIF},
	{"else", TOKEN_ELSE},
	{"while", TOKEN_WHILE},
	{"end", TOKEN_END},
};
 800449c:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80044a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044a4:	497e      	ldr	r1, [pc, #504]	; (80046a0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fc f898 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80044ac:	2306      	movs	r3, #6
 80044ae:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80044b2:	f207 1263 	addw	r2, r7, #355	; 0x163
 80044b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044ba:	331c      	adds	r3, #28
 80044bc:	4979      	ldr	r1, [pc, #484]	; (80046a4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fc f8b4 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80044c4:	2307      	movs	r3, #7
 80044c6:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80044ca:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80044ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044d2:	3338      	adds	r3, #56	; 0x38
 80044d4:	4974      	ldr	r1, [pc, #464]	; (80046a8 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc f8a8 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80044dc:	2308      	movs	r3, #8
 80044de:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80044e2:	f207 1265 	addw	r2, r7, #357	; 0x165
 80044e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044ea:	3354      	adds	r3, #84	; 0x54
 80044ec:	496f      	ldr	r1, [pc, #444]	; (80046ac <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fc f874 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 80044f4:	2309      	movs	r3, #9
 80044f6:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 80044fa:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 80044fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004502:	3370      	adds	r3, #112	; 0x70
 8004504:	496a      	ldr	r1, [pc, #424]	; (80046b0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8004506:	4618      	mov	r0, r3
 8004508:	f7fc f8b8 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 800450c:	2310      	movs	r3, #16
 800450e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8004512:	f207 1267 	addw	r2, r7, #359	; 0x167
 8004516:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800451a:	338c      	adds	r3, #140	; 0x8c
 800451c:	4965      	ldr	r1, [pc, #404]	; (80046b4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800451e:	4618      	mov	r0, r3
 8004520:	f7fc f8d4 	bl	80006cc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8004524:	2311      	movs	r3, #17
 8004526:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800452a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800452e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004532:	33a8      	adds	r3, #168	; 0xa8
 8004534:	4960      	ldr	r1, [pc, #384]	; (80046b8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8004536:	4618      	mov	r0, r3
 8004538:	f7fc f8a0 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 800453c:	2312      	movs	r3, #18
 800453e:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8004542:	f207 1269 	addw	r2, r7, #361	; 0x169
 8004546:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800454a:	33c4      	adds	r3, #196	; 0xc4
 800454c:	495b      	ldr	r1, [pc, #364]	; (80046bc <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800454e:	4618      	mov	r0, r3
 8004550:	f7fc f844 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8004554:	2313      	movs	r3, #19
 8004556:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800455a:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800455e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004562:	33e0      	adds	r3, #224	; 0xe0
 8004564:	4956      	ldr	r1, [pc, #344]	; (80046c0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8004566:	4618      	mov	r0, r3
 8004568:	f7fc f860 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 800456c:	2314      	movs	r3, #20
 800456e:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8004572:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8004576:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800457a:	33fc      	adds	r3, #252	; 0xfc
 800457c:	4951      	ldr	r1, [pc, #324]	; (80046c4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800457e:	4618      	mov	r0, r3
 8004580:	f7fc f8cc 	bl	800071c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8004584:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004588:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004592:	220a      	movs	r2, #10
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800459a:	4618      	mov	r0, r3
 800459c:	f7fc facb 	bl	8000b36 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80045a0:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80045a4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80045a8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	460b      	mov	r3, r1
 80045b0:	ca06      	ldmia	r2, {r1, r2}
 80045b2:	4845      	ldr	r0, [pc, #276]	; (80046c8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80045b4:	f7fc fad7 	bl	8000b66 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80045b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fc fac6 	bl	8000b4e <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80045c2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80045c6:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80045ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045ce:	429c      	cmp	r4, r3
 80045d0:	d004      	beq.n	80045dc <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 80045d2:	3c1c      	subs	r4, #28
 80045d4:	4620      	mov	r0, r4
 80045d6:	f7fb fff4 	bl	80005c2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80045da:	e7f6      	b.n	80045ca <_Z41__static_initialization_and_destruction_0ii+0x2b2>
{
	{'<', {TOKEN_SMALLER_THAN, TOKEN_SMALLER_OR_EQUAL}},
	{'>', {TOKEN_GREATER_THAN, TOKEN_GREATER_OR_EQUAL}},
	{'=', {TOKEN_ASSIGN, TOKEN_EQUALS}},
	{'!', {TOKEN_EXCLAMATION, TOKEN_NOT_EQUAL}},
};
 80045dc:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	233c      	movs	r3, #60	; 0x3c
 80045ea:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80045ee:	231b      	movs	r3, #27
 80045f0:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80045f4:	231c      	movs	r3, #28
 80045f6:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80045fa:	233e      	movs	r3, #62	; 0x3e
 80045fc:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8004600:	2319      	movs	r3, #25
 8004602:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8004606:	231a      	movs	r3, #26
 8004608:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 800460c:	233d      	movs	r3, #61	; 0x3d
 800460e:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8004612:	2318      	movs	r3, #24
 8004614:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8004618:	231d      	movs	r3, #29
 800461a:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800461e:	2321      	movs	r3, #33	; 0x21
 8004620:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8004624:	2317      	movs	r3, #23
 8004626:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800462a:	231e      	movs	r3, #30
 800462c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8004630:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004634:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004638:	2304      	movs	r3, #4
 800463a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800463e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004642:	4618      	mov	r0, r3
 8004644:	f7fc fabf 	bl	8000bc6 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8004648:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800464c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	4613      	mov	r3, r2
 8004654:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8004658:	ca06      	ldmia	r2, {r1, r2}
 800465a:	481c      	ldr	r0, [pc, #112]	; (80046cc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800465c:	f7fc facb 	bl	8000bf6 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8004660:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004664:	4618      	mov	r0, r3
 8004666:	f7fc faba 	bl	8000bde <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 800466a:	1d3b      	adds	r3, r7, #4
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10e      	bne.n	8004690 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8004672:	463b      	mov	r3, r7
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800467a:	4293      	cmp	r3, r2
 800467c:	d108      	bne.n	8004690 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800467e:	4813      	ldr	r0, [pc, #76]	; (80046cc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8004680:	f7ff fe22 	bl	80042c8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8004684:	4810      	ldr	r0, [pc, #64]	; (80046c8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8004686:	f7ff fe2c 	bl	80042e2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800468a:	4804      	ldr	r0, [pc, #16]	; (800469c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800468c:	f7ff fe36 	bl	80042fc <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8004690:	bf00      	nop
 8004692:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8004696:	46bd      	mov	sp, r7
 8004698:	bd90      	pop	{r4, r7, pc}
 800469a:	bf00      	nop
 800469c:	2000008c 	.word	0x2000008c
 80046a0:	0800b5d8 	.word	0x0800b5d8
 80046a4:	0800b5e0 	.word	0x0800b5e0
 80046a8:	0800b5e8 	.word	0x0800b5e8
 80046ac:	0800b5f0 	.word	0x0800b5f0
 80046b0:	0800b5f8 	.word	0x0800b5f8
 80046b4:	0800b600 	.word	0x0800b600
 80046b8:	0800b604 	.word	0x0800b604
 80046bc:	0800b60c 	.word	0x0800b60c
 80046c0:	0800b614 	.word	0x0800b614
 80046c4:	0800b61c 	.word	0x0800b61c
 80046c8:	200000a4 	.word	0x200000a4
 80046cc:	200000bc 	.word	0x200000bc

080046d0 <_GLOBAL__sub_I__ZN6SymbolD2Ev>:
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046d8:	2001      	movs	r0, #1
 80046da:	f7ff fe1d 	bl	8004318 <_Z41__static_initialization_and_destruction_0ii>
 80046de:	bd80      	pop	{r7, pc}

080046e0 <_GLOBAL__sub_D__ZN6SymbolD2Ev>:
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046e8:	2000      	movs	r0, #0
 80046ea:	f7ff fe15 	bl	8004318 <_Z41__static_initialization_and_destruction_0ii>
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <_ZSt7forwardIRP13Function_callEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <_ZSt11__addressofIP13Function_callEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <_Z41__static_initialization_and_destruction_0ii>:
{
	for(And_expression* exp : and_exps)
	{
		delete exp;
	}
}
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b0e7      	sub	sp, #412	; 0x19c
 8004720:	af02      	add	r7, sp, #8
 8004722:	1d3b      	adds	r3, r7, #4
 8004724:	6018      	str	r0, [r3, #0]
 8004726:	463b      	mov	r3, r7
 8004728:	6019      	str	r1, [r3, #0]
 800472a:	1d3b      	adds	r3, r7, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b01      	cmp	r3, #1
 8004730:	f040 819d 	bne.w	8004a6e <_Z41__static_initialization_and_destruction_0ii+0x352>
 8004734:	463b      	mov	r3, r7
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800473c:	4293      	cmp	r3, r2
 800473e:	f040 8196 	bne.w	8004a6e <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8004742:	f107 0314 	add.w	r3, r7, #20
 8004746:	4618      	mov	r0, r3
 8004748:	2322      	movs	r3, #34	; 0x22
 800474a:	461a      	mov	r2, r3
 800474c:	2100      	movs	r1, #0
 800474e:	f006 fdb5 	bl	800b2bc <memset>
 8004752:	f107 0314 	add.w	r3, r7, #20
 8004756:	223a      	movs	r2, #58	; 0x3a
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	f107 0314 	add.w	r3, r7, #20
 800475e:	2201      	movs	r2, #1
 8004760:	705a      	strb	r2, [r3, #1]
 8004762:	f107 0314 	add.w	r3, r7, #20
 8004766:	220a      	movs	r2, #10
 8004768:	709a      	strb	r2, [r3, #2]
 800476a:	f107 0314 	add.w	r3, r7, #20
 800476e:	220a      	movs	r2, #10
 8004770:	70da      	strb	r2, [r3, #3]
 8004772:	f107 0314 	add.w	r3, r7, #20
 8004776:	222c      	movs	r2, #44	; 0x2c
 8004778:	711a      	strb	r2, [r3, #4]
 800477a:	f107 0314 	add.w	r3, r7, #20
 800477e:	220c      	movs	r2, #12
 8004780:	715a      	strb	r2, [r3, #5]
 8004782:	f107 0314 	add.w	r3, r7, #20
 8004786:	222e      	movs	r2, #46	; 0x2e
 8004788:	719a      	strb	r2, [r3, #6]
 800478a:	f107 0314 	add.w	r3, r7, #20
 800478e:	220b      	movs	r2, #11
 8004790:	71da      	strb	r2, [r3, #7]
 8004792:	f107 0314 	add.w	r3, r7, #20
 8004796:	225b      	movs	r2, #91	; 0x5b
 8004798:	721a      	strb	r2, [r3, #8]
 800479a:	f107 0314 	add.w	r3, r7, #20
 800479e:	220d      	movs	r2, #13
 80047a0:	725a      	strb	r2, [r3, #9]
 80047a2:	f107 0314 	add.w	r3, r7, #20
 80047a6:	225d      	movs	r2, #93	; 0x5d
 80047a8:	729a      	strb	r2, [r3, #10]
 80047aa:	f107 0314 	add.w	r3, r7, #20
 80047ae:	220e      	movs	r2, #14
 80047b0:	72da      	strb	r2, [r3, #11]
 80047b2:	f107 0314 	add.w	r3, r7, #20
 80047b6:	227c      	movs	r2, #124	; 0x7c
 80047b8:	731a      	strb	r2, [r3, #12]
 80047ba:	f107 0314 	add.w	r3, r7, #20
 80047be:	2215      	movs	r2, #21
 80047c0:	735a      	strb	r2, [r3, #13]
 80047c2:	f107 0314 	add.w	r3, r7, #20
 80047c6:	2226      	movs	r2, #38	; 0x26
 80047c8:	739a      	strb	r2, [r3, #14]
 80047ca:	f107 0314 	add.w	r3, r7, #20
 80047ce:	2216      	movs	r2, #22
 80047d0:	73da      	strb	r2, [r3, #15]
 80047d2:	f107 0314 	add.w	r3, r7, #20
 80047d6:	222b      	movs	r2, #43	; 0x2b
 80047d8:	741a      	strb	r2, [r3, #16]
 80047da:	f107 0314 	add.w	r3, r7, #20
 80047de:	221f      	movs	r2, #31
 80047e0:	745a      	strb	r2, [r3, #17]
 80047e2:	f107 0314 	add.w	r3, r7, #20
 80047e6:	222d      	movs	r2, #45	; 0x2d
 80047e8:	749a      	strb	r2, [r3, #18]
 80047ea:	f107 0314 	add.w	r3, r7, #20
 80047ee:	2220      	movs	r2, #32
 80047f0:	74da      	strb	r2, [r3, #19]
 80047f2:	f107 0314 	add.w	r3, r7, #20
 80047f6:	222a      	movs	r2, #42	; 0x2a
 80047f8:	751a      	strb	r2, [r3, #20]
 80047fa:	f107 0314 	add.w	r3, r7, #20
 80047fe:	2221      	movs	r2, #33	; 0x21
 8004800:	755a      	strb	r2, [r3, #21]
 8004802:	f107 0314 	add.w	r3, r7, #20
 8004806:	222f      	movs	r2, #47	; 0x2f
 8004808:	759a      	strb	r2, [r3, #22]
 800480a:	f107 0314 	add.w	r3, r7, #20
 800480e:	2222      	movs	r2, #34	; 0x22
 8004810:	75da      	strb	r2, [r3, #23]
 8004812:	f107 0314 	add.w	r3, r7, #20
 8004816:	225e      	movs	r2, #94	; 0x5e
 8004818:	761a      	strb	r2, [r3, #24]
 800481a:	f107 0314 	add.w	r3, r7, #20
 800481e:	2223      	movs	r2, #35	; 0x23
 8004820:	765a      	strb	r2, [r3, #25]
 8004822:	f107 0314 	add.w	r3, r7, #20
 8004826:	2225      	movs	r2, #37	; 0x25
 8004828:	769a      	strb	r2, [r3, #26]
 800482a:	f107 0314 	add.w	r3, r7, #20
 800482e:	2224      	movs	r2, #36	; 0x24
 8004830:	76da      	strb	r2, [r3, #27]
 8004832:	f107 0314 	add.w	r3, r7, #20
 8004836:	2228      	movs	r2, #40	; 0x28
 8004838:	771a      	strb	r2, [r3, #28]
 800483a:	f107 0314 	add.w	r3, r7, #20
 800483e:	2226      	movs	r2, #38	; 0x26
 8004840:	775a      	strb	r2, [r3, #29]
 8004842:	f107 0314 	add.w	r3, r7, #20
 8004846:	2229      	movs	r2, #41	; 0x29
 8004848:	779a      	strb	r2, [r3, #30]
 800484a:	f107 0314 	add.w	r3, r7, #20
 800484e:	2227      	movs	r2, #39	; 0x27
 8004850:	77da      	strb	r2, [r3, #31]
 8004852:	f107 0314 	add.w	r3, r7, #20
 8004856:	2225      	movs	r2, #37	; 0x25
 8004858:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800485c:	f107 030c 	add.w	r3, r7, #12
 8004860:	f107 0214 	add.w	r2, r7, #20
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	f107 030c 	add.w	r3, r7, #12
 800486a:	2211      	movs	r2, #17
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004872:	4618      	mov	r0, r3
 8004874:	f7fc f8ba 	bl	80009ec <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8004878:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800487c:	f107 020c 	add.w	r2, r7, #12
 8004880:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	460b      	mov	r3, r1
 8004888:	ca06      	ldmia	r2, {r1, r2}
 800488a:	4885      	ldr	r0, [pc, #532]	; (8004aa0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800488c:	f7fc f8c6 	bl	8000a1c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8004890:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004894:	4618      	mov	r0, r3
 8004896:	f7fc f8b5 	bl	8000a04 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 800489a:	2305      	movs	r3, #5
 800489c:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80048a0:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80048a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048a8:	497e      	ldr	r1, [pc, #504]	; (8004aa4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fb fe96 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80048b0:	2306      	movs	r3, #6
 80048b2:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80048b6:	f207 1263 	addw	r2, r7, #355	; 0x163
 80048ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048be:	331c      	adds	r3, #28
 80048c0:	4979      	ldr	r1, [pc, #484]	; (8004aa8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fb feb2 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80048c8:	2307      	movs	r3, #7
 80048ca:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80048ce:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80048d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048d6:	3338      	adds	r3, #56	; 0x38
 80048d8:	4974      	ldr	r1, [pc, #464]	; (8004aac <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fb fea6 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80048e0:	2308      	movs	r3, #8
 80048e2:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80048e6:	f207 1265 	addw	r2, r7, #357	; 0x165
 80048ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048ee:	3354      	adds	r3, #84	; 0x54
 80048f0:	496f      	ldr	r1, [pc, #444]	; (8004ab0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fb fe72 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 80048f8:	2309      	movs	r3, #9
 80048fa:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 80048fe:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8004902:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004906:	3370      	adds	r3, #112	; 0x70
 8004908:	496a      	ldr	r1, [pc, #424]	; (8004ab4 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800490a:	4618      	mov	r0, r3
 800490c:	f7fb feb6 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8004910:	2310      	movs	r3, #16
 8004912:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8004916:	f207 1267 	addw	r2, r7, #359	; 0x167
 800491a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800491e:	338c      	adds	r3, #140	; 0x8c
 8004920:	4965      	ldr	r1, [pc, #404]	; (8004ab8 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8004922:	4618      	mov	r0, r3
 8004924:	f7fb fed2 	bl	80006cc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8004928:	2311      	movs	r3, #17
 800492a:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800492e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8004932:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004936:	33a8      	adds	r3, #168	; 0xa8
 8004938:	4960      	ldr	r1, [pc, #384]	; (8004abc <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800493a:	4618      	mov	r0, r3
 800493c:	f7fb fe9e 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8004940:	2312      	movs	r3, #18
 8004942:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8004946:	f207 1269 	addw	r2, r7, #361	; 0x169
 800494a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800494e:	33c4      	adds	r3, #196	; 0xc4
 8004950:	495b      	ldr	r1, [pc, #364]	; (8004ac0 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8004952:	4618      	mov	r0, r3
 8004954:	f7fb fe42 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8004958:	2313      	movs	r3, #19
 800495a:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800495e:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8004962:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004966:	33e0      	adds	r3, #224	; 0xe0
 8004968:	4956      	ldr	r1, [pc, #344]	; (8004ac4 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800496a:	4618      	mov	r0, r3
 800496c:	f7fb fe5e 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8004970:	2314      	movs	r3, #20
 8004972:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8004976:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800497a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800497e:	33fc      	adds	r3, #252	; 0xfc
 8004980:	4951      	ldr	r1, [pc, #324]	; (8004ac8 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8004982:	4618      	mov	r0, r3
 8004984:	f7fb feca 	bl	800071c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8004988:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800498c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004996:	220a      	movs	r2, #10
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fc f8c9 	bl	8000b36 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80049a4:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80049a8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80049ac:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	460b      	mov	r3, r1
 80049b4:	ca06      	ldmia	r2, {r1, r2}
 80049b6:	4845      	ldr	r0, [pc, #276]	; (8004acc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80049b8:	f7fc f8d5 	bl	8000b66 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80049bc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fc f8c4 	bl	8000b4e <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80049c6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80049ca:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80049ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049d2:	429c      	cmp	r4, r3
 80049d4:	d004      	beq.n	80049e0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 80049d6:	3c1c      	subs	r4, #28
 80049d8:	4620      	mov	r0, r4
 80049da:	f7fb fdf2 	bl	80005c2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80049de:	e7f6      	b.n	80049ce <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80049e0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	609a      	str	r2, [r3, #8]
 80049ec:	233c      	movs	r3, #60	; 0x3c
 80049ee:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80049f2:	231b      	movs	r3, #27
 80049f4:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80049f8:	231c      	movs	r3, #28
 80049fa:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80049fe:	233e      	movs	r3, #62	; 0x3e
 8004a00:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8004a04:	2319      	movs	r3, #25
 8004a06:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8004a0a:	231a      	movs	r3, #26
 8004a0c:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8004a10:	233d      	movs	r3, #61	; 0x3d
 8004a12:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8004a16:	2318      	movs	r3, #24
 8004a18:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8004a1c:	231d      	movs	r3, #29
 8004a1e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8004a22:	2321      	movs	r3, #33	; 0x21
 8004a24:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8004a28:	2317      	movs	r3, #23
 8004a2a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8004a2e:	231e      	movs	r3, #30
 8004a30:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8004a34:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004a38:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004a42:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fc f8bd 	bl	8000bc6 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8004a4c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8004a50:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	4613      	mov	r3, r2
 8004a58:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8004a5c:	ca06      	ldmia	r2, {r1, r2}
 8004a5e:	481c      	ldr	r0, [pc, #112]	; (8004ad0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8004a60:	f7fc f8c9 	bl	8000bf6 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8004a64:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fc f8b8 	bl	8000bde <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10e      	bne.n	8004a94 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8004a76:	463b      	mov	r3, r7
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d108      	bne.n	8004a94 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8004a82:	4813      	ldr	r0, [pc, #76]	; (8004ad0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8004a84:	f7ff fc20 	bl	80042c8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8004a88:	4810      	ldr	r0, [pc, #64]	; (8004acc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8004a8a:	f7ff fc2a 	bl	80042e2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8004a8e:	4804      	ldr	r0, [pc, #16]	; (8004aa0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8004a90:	f7ff fc34 	bl	80042fc <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8004a94:	bf00      	nop
 8004a96:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd90      	pop	{r4, r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	200000d4 	.word	0x200000d4
 8004aa4:	0800b660 	.word	0x0800b660
 8004aa8:	0800b668 	.word	0x0800b668
 8004aac:	0800b670 	.word	0x0800b670
 8004ab0:	0800b678 	.word	0x0800b678
 8004ab4:	0800b680 	.word	0x0800b680
 8004ab8:	0800b688 	.word	0x0800b688
 8004abc:	0800b68c 	.word	0x0800b68c
 8004ac0:	0800b694 	.word	0x0800b694
 8004ac4:	0800b69c 	.word	0x0800b69c
 8004ac8:	0800b6a4 	.word	0x0800b6a4
 8004acc:	200000ec 	.word	0x200000ec
 8004ad0:	20000104 	.word	0x20000104

08004ad4 <_GLOBAL__sub_I__ZN17Primal_expressionD2Ev>:
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004adc:	2001      	movs	r0, #1
 8004ade:	f7ff fe1d 	bl	800471c <_Z41__static_initialization_and_destruction_0ii>
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <_GLOBAL__sub_D__ZN17Primal_expressionD2Ev>:
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004aec:	2000      	movs	r0, #0
 8004aee:	f7ff fe15 	bl	800471c <_Z41__static_initialization_and_destruction_0ii>
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <_Z41__static_initialization_and_destruction_0ii>:
}

bool Expression_calculator::get_string(std::string *var, Expression *exp)
{
	return true;
}
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b0e7      	sub	sp, #412	; 0x19c
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	1d3b      	adds	r3, r7, #4
 8004afc:	6018      	str	r0, [r3, #0]
 8004afe:	463b      	mov	r3, r7
 8004b00:	6019      	str	r1, [r3, #0]
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	f040 819d 	bne.w	8004e46 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b14:	4293      	cmp	r3, r2
 8004b16:	f040 8196 	bne.w	8004e46 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8004b1a:	f107 0314 	add.w	r3, r7, #20
 8004b1e:	4618      	mov	r0, r3
 8004b20:	2322      	movs	r3, #34	; 0x22
 8004b22:	461a      	mov	r2, r3
 8004b24:	2100      	movs	r1, #0
 8004b26:	f006 fbc9 	bl	800b2bc <memset>
 8004b2a:	f107 0314 	add.w	r3, r7, #20
 8004b2e:	223a      	movs	r2, #58	; 0x3a
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	f107 0314 	add.w	r3, r7, #20
 8004b36:	2201      	movs	r2, #1
 8004b38:	705a      	strb	r2, [r3, #1]
 8004b3a:	f107 0314 	add.w	r3, r7, #20
 8004b3e:	220a      	movs	r2, #10
 8004b40:	709a      	strb	r2, [r3, #2]
 8004b42:	f107 0314 	add.w	r3, r7, #20
 8004b46:	220a      	movs	r2, #10
 8004b48:	70da      	strb	r2, [r3, #3]
 8004b4a:	f107 0314 	add.w	r3, r7, #20
 8004b4e:	222c      	movs	r2, #44	; 0x2c
 8004b50:	711a      	strb	r2, [r3, #4]
 8004b52:	f107 0314 	add.w	r3, r7, #20
 8004b56:	220c      	movs	r2, #12
 8004b58:	715a      	strb	r2, [r3, #5]
 8004b5a:	f107 0314 	add.w	r3, r7, #20
 8004b5e:	222e      	movs	r2, #46	; 0x2e
 8004b60:	719a      	strb	r2, [r3, #6]
 8004b62:	f107 0314 	add.w	r3, r7, #20
 8004b66:	220b      	movs	r2, #11
 8004b68:	71da      	strb	r2, [r3, #7]
 8004b6a:	f107 0314 	add.w	r3, r7, #20
 8004b6e:	225b      	movs	r2, #91	; 0x5b
 8004b70:	721a      	strb	r2, [r3, #8]
 8004b72:	f107 0314 	add.w	r3, r7, #20
 8004b76:	220d      	movs	r2, #13
 8004b78:	725a      	strb	r2, [r3, #9]
 8004b7a:	f107 0314 	add.w	r3, r7, #20
 8004b7e:	225d      	movs	r2, #93	; 0x5d
 8004b80:	729a      	strb	r2, [r3, #10]
 8004b82:	f107 0314 	add.w	r3, r7, #20
 8004b86:	220e      	movs	r2, #14
 8004b88:	72da      	strb	r2, [r3, #11]
 8004b8a:	f107 0314 	add.w	r3, r7, #20
 8004b8e:	227c      	movs	r2, #124	; 0x7c
 8004b90:	731a      	strb	r2, [r3, #12]
 8004b92:	f107 0314 	add.w	r3, r7, #20
 8004b96:	2215      	movs	r2, #21
 8004b98:	735a      	strb	r2, [r3, #13]
 8004b9a:	f107 0314 	add.w	r3, r7, #20
 8004b9e:	2226      	movs	r2, #38	; 0x26
 8004ba0:	739a      	strb	r2, [r3, #14]
 8004ba2:	f107 0314 	add.w	r3, r7, #20
 8004ba6:	2216      	movs	r2, #22
 8004ba8:	73da      	strb	r2, [r3, #15]
 8004baa:	f107 0314 	add.w	r3, r7, #20
 8004bae:	222b      	movs	r2, #43	; 0x2b
 8004bb0:	741a      	strb	r2, [r3, #16]
 8004bb2:	f107 0314 	add.w	r3, r7, #20
 8004bb6:	221f      	movs	r2, #31
 8004bb8:	745a      	strb	r2, [r3, #17]
 8004bba:	f107 0314 	add.w	r3, r7, #20
 8004bbe:	222d      	movs	r2, #45	; 0x2d
 8004bc0:	749a      	strb	r2, [r3, #18]
 8004bc2:	f107 0314 	add.w	r3, r7, #20
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	74da      	strb	r2, [r3, #19]
 8004bca:	f107 0314 	add.w	r3, r7, #20
 8004bce:	222a      	movs	r2, #42	; 0x2a
 8004bd0:	751a      	strb	r2, [r3, #20]
 8004bd2:	f107 0314 	add.w	r3, r7, #20
 8004bd6:	2221      	movs	r2, #33	; 0x21
 8004bd8:	755a      	strb	r2, [r3, #21]
 8004bda:	f107 0314 	add.w	r3, r7, #20
 8004bde:	222f      	movs	r2, #47	; 0x2f
 8004be0:	759a      	strb	r2, [r3, #22]
 8004be2:	f107 0314 	add.w	r3, r7, #20
 8004be6:	2222      	movs	r2, #34	; 0x22
 8004be8:	75da      	strb	r2, [r3, #23]
 8004bea:	f107 0314 	add.w	r3, r7, #20
 8004bee:	225e      	movs	r2, #94	; 0x5e
 8004bf0:	761a      	strb	r2, [r3, #24]
 8004bf2:	f107 0314 	add.w	r3, r7, #20
 8004bf6:	2223      	movs	r2, #35	; 0x23
 8004bf8:	765a      	strb	r2, [r3, #25]
 8004bfa:	f107 0314 	add.w	r3, r7, #20
 8004bfe:	2225      	movs	r2, #37	; 0x25
 8004c00:	769a      	strb	r2, [r3, #26]
 8004c02:	f107 0314 	add.w	r3, r7, #20
 8004c06:	2224      	movs	r2, #36	; 0x24
 8004c08:	76da      	strb	r2, [r3, #27]
 8004c0a:	f107 0314 	add.w	r3, r7, #20
 8004c0e:	2228      	movs	r2, #40	; 0x28
 8004c10:	771a      	strb	r2, [r3, #28]
 8004c12:	f107 0314 	add.w	r3, r7, #20
 8004c16:	2226      	movs	r2, #38	; 0x26
 8004c18:	775a      	strb	r2, [r3, #29]
 8004c1a:	f107 0314 	add.w	r3, r7, #20
 8004c1e:	2229      	movs	r2, #41	; 0x29
 8004c20:	779a      	strb	r2, [r3, #30]
 8004c22:	f107 0314 	add.w	r3, r7, #20
 8004c26:	2227      	movs	r2, #39	; 0x27
 8004c28:	77da      	strb	r2, [r3, #31]
 8004c2a:	f107 0314 	add.w	r3, r7, #20
 8004c2e:	2225      	movs	r2, #37	; 0x25
 8004c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004c34:	f107 030c 	add.w	r3, r7, #12
 8004c38:	f107 0214 	add.w	r2, r7, #20
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	f107 030c 	add.w	r3, r7, #12
 8004c42:	2211      	movs	r2, #17
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fb fece 	bl	80009ec <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8004c50:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004c54:	f107 020c 	add.w	r2, r7, #12
 8004c58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	ca06      	ldmia	r2, {r1, r2}
 8004c62:	4885      	ldr	r0, [pc, #532]	; (8004e78 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8004c64:	f7fb feda 	bl	8000a1c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8004c68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fb fec9 	bl	8000a04 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8004c72:	2305      	movs	r3, #5
 8004c74:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8004c78:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8004c7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c80:	497e      	ldr	r1, [pc, #504]	; (8004e7c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fb fcaa 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8004c88:	2306      	movs	r3, #6
 8004c8a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8004c8e:	f207 1263 	addw	r2, r7, #355	; 0x163
 8004c92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c96:	331c      	adds	r3, #28
 8004c98:	4979      	ldr	r1, [pc, #484]	; (8004e80 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fb fcc6 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8004ca0:	2307      	movs	r3, #7
 8004ca2:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8004ca6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8004caa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cae:	3338      	adds	r3, #56	; 0x38
 8004cb0:	4974      	ldr	r1, [pc, #464]	; (8004e84 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fb fcba 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8004cb8:	2308      	movs	r3, #8
 8004cba:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8004cbe:	f207 1265 	addw	r2, r7, #357	; 0x165
 8004cc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cc6:	3354      	adds	r3, #84	; 0x54
 8004cc8:	496f      	ldr	r1, [pc, #444]	; (8004e88 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fb fc86 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8004cd0:	2309      	movs	r3, #9
 8004cd2:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8004cd6:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8004cda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cde:	3370      	adds	r3, #112	; 0x70
 8004ce0:	496a      	ldr	r1, [pc, #424]	; (8004e8c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fb fcca 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8004ce8:	2310      	movs	r3, #16
 8004cea:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8004cee:	f207 1267 	addw	r2, r7, #359	; 0x167
 8004cf2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cf6:	338c      	adds	r3, #140	; 0x8c
 8004cf8:	4965      	ldr	r1, [pc, #404]	; (8004e90 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fb fce6 	bl	80006cc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8004d00:	2311      	movs	r3, #17
 8004d02:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8004d06:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8004d0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d0e:	33a8      	adds	r3, #168	; 0xa8
 8004d10:	4960      	ldr	r1, [pc, #384]	; (8004e94 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fb fcb2 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8004d18:	2312      	movs	r3, #18
 8004d1a:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8004d1e:	f207 1269 	addw	r2, r7, #361	; 0x169
 8004d22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d26:	33c4      	adds	r3, #196	; 0xc4
 8004d28:	495b      	ldr	r1, [pc, #364]	; (8004e98 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fb fc56 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8004d30:	2313      	movs	r3, #19
 8004d32:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8004d36:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8004d3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d3e:	33e0      	adds	r3, #224	; 0xe0
 8004d40:	4956      	ldr	r1, [pc, #344]	; (8004e9c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fb fc72 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8004d48:	2314      	movs	r3, #20
 8004d4a:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8004d4e:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8004d52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d56:	33fc      	adds	r3, #252	; 0xfc
 8004d58:	4951      	ldr	r1, [pc, #324]	; (8004ea0 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fb fcde 	bl	800071c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8004d60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d64:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d6e:	220a      	movs	r2, #10
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fb fedd 	bl	8000b36 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8004d7c:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8004d80:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004d84:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	ca06      	ldmia	r2, {r1, r2}
 8004d8e:	4845      	ldr	r0, [pc, #276]	; (8004ea4 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8004d90:	f7fb fee9 	bl	8000b66 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8004d94:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fb fed8 	bl	8000b4e <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8004d9e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8004da2:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8004da6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004daa:	429c      	cmp	r4, r3
 8004dac:	d004      	beq.n	8004db8 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8004dae:	3c1c      	subs	r4, #28
 8004db0:	4620      	mov	r0, r4
 8004db2:	f7fb fc06 	bl	80005c2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8004db6:	e7f6      	b.n	8004da6 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8004db8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	605a      	str	r2, [r3, #4]
 8004dc2:	609a      	str	r2, [r3, #8]
 8004dc4:	233c      	movs	r3, #60	; 0x3c
 8004dc6:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8004dca:	231b      	movs	r3, #27
 8004dcc:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8004dd0:	231c      	movs	r3, #28
 8004dd2:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8004dd6:	233e      	movs	r3, #62	; 0x3e
 8004dd8:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8004ddc:	2319      	movs	r3, #25
 8004dde:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8004de2:	231a      	movs	r3, #26
 8004de4:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8004de8:	233d      	movs	r3, #61	; 0x3d
 8004dea:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8004dee:	2318      	movs	r3, #24
 8004df0:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8004df4:	231d      	movs	r3, #29
 8004df6:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8004dfa:	2321      	movs	r3, #33	; 0x21
 8004dfc:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8004e00:	2317      	movs	r3, #23
 8004e02:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8004e06:	231e      	movs	r3, #30
 8004e08:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8004e0c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004e10:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004e14:	2304      	movs	r3, #4
 8004e16:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004e1a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fb fed1 	bl	8000bc6 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8004e24:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8004e28:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8004e34:	ca06      	ldmia	r2, {r1, r2}
 8004e36:	481c      	ldr	r0, [pc, #112]	; (8004ea8 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8004e38:	f7fb fedd 	bl	8000bf6 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8004e3c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fb fecc 	bl	8000bde <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8004e46:	1d3b      	adds	r3, r7, #4
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10e      	bne.n	8004e6c <_Z41__static_initialization_and_destruction_0ii+0x378>
 8004e4e:	463b      	mov	r3, r7
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d108      	bne.n	8004e6c <_Z41__static_initialization_and_destruction_0ii+0x378>
 8004e5a:	4813      	ldr	r0, [pc, #76]	; (8004ea8 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8004e5c:	f7ff fa34 	bl	80042c8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8004e60:	4810      	ldr	r0, [pc, #64]	; (8004ea4 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8004e62:	f7ff fa3e 	bl	80042e2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8004e66:	4804      	ldr	r0, [pc, #16]	; (8004e78 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8004e68:	f7ff fa48 	bl	80042fc <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8004e6c:	bf00      	nop
 8004e6e:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd90      	pop	{r4, r7, pc}
 8004e76:	bf00      	nop
 8004e78:	2000011c 	.word	0x2000011c
 8004e7c:	0800b6d4 	.word	0x0800b6d4
 8004e80:	0800b6dc 	.word	0x0800b6dc
 8004e84:	0800b6e4 	.word	0x0800b6e4
 8004e88:	0800b6ec 	.word	0x0800b6ec
 8004e8c:	0800b6f4 	.word	0x0800b6f4
 8004e90:	0800b6fc 	.word	0x0800b6fc
 8004e94:	0800b700 	.word	0x0800b700
 8004e98:	0800b708 	.word	0x0800b708
 8004e9c:	0800b710 	.word	0x0800b710
 8004ea0:	0800b718 	.word	0x0800b718
 8004ea4:	20000134 	.word	0x20000134
 8004ea8:	2000014c 	.word	0x2000014c

08004eac <_GLOBAL__sub_I__ZN21Expression_calculatorC2Ev>:
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	f7ff fe1d 	bl	8004af4 <_Z41__static_initialization_and_destruction_0ii>
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <_GLOBAL__sub_D__ZN21Expression_calculatorC2Ev>:
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f7ff fe15 	bl	8004af4 <_Z41__static_initialization_and_destruction_0ii>
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <_ZN12_GLOBAL__N_131run_single_experiment_iterationESt6vectorIP10ExpressionSaIS2_EE>:
#include <Function_handler.h>

namespace
{
void run_single_experiment_iteration(arglist arguments = {})
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	int x = 2;
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	60fb      	str	r3, [r7, #12]
	++x;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EEC1Ev>:
      _Rb_tree() = default;
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 f83d 	bl	8004f74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE13_Rb_tree_implISJ_Lb1EEC1Ev>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS8_EEESt4lessIS5_ESaISt4pairIKS5_SC_EEEC1Ev>:
      map() = default;
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff ffeb 	bl	8004eea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EEC1Ev>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <_ZN16Function_handlerC1Ev>:

}

Function_handler::Function_handler()
 8004f20:	b590      	push	{r4, r7, lr}
 8004f22:	b08d      	sub	sp, #52	; 0x34
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff ffea 	bl	8004f04 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS8_EEESt4lessIS5_ESaISt4pairIKS5_SC_EEEC1Ev>
{
	FUNCTION(run_single_experiment_iteration);
 8004f30:	687c      	ldr	r4, [r7, #4]
 8004f32:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <_ZN16Function_handlerC1Ev+0x4c>)
 8004f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f36:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004f3a:	f107 0310 	add.w	r3, r7, #16
 8004f3e:	490c      	ldr	r1, [pc, #48]	; (8004f70 <_ZN16Function_handlerC1Ev+0x50>)
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f82c 	bl	8004f9e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS9_EEEEC1IRA32_KcSD_Lb1EEEOT_OT0_>
 8004f46:	f107 0308 	add.w	r3, r7, #8
 8004f4a:	f107 0210 	add.w	r2, r7, #16
 8004f4e:	4621      	mov	r1, r4
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 f84c 	bl	8004fee <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS8_EEESt4lessIS5_ESaISt4pairIKS5_SC_EEE6insertEOSH_>
 8004f56:	f107 0310 	add.w	r3, r7, #16
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fe fdc0 	bl	8003ae0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS9_EEEED1Ev>
}
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4618      	mov	r0, r3
 8004f64:	3734      	adds	r7, #52	; 0x34
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd90      	pop	{r4, r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	08004ecd 	.word	0x08004ecd
 8004f70:	0800b71c 	.word	0x0800b71c

08004f74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE13_Rb_tree_implISJ_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f84a 	bl	8005016 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEEC1Ev>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 f852 	bl	800502e <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fb fae7 	bl	8000562 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS9_EEEEC1IRA32_KcSD_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004f9e:	b5b0      	push	{r4, r5, r7, lr}
 8004fa0:	b086      	sub	sp, #24
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004faa:	68fc      	ldr	r4, [r7, #12]
 8004fac:	68b8      	ldr	r0, [r7, #8]
 8004fae:	f000 f849 	bl	8005044 <_ZSt7forwardIRA32_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	f107 0314 	add.w	r3, r7, #20
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f005 fe73 	bl	800aca4 <_ZNSaIcEC1Ev>
 8004fbe:	f107 0314 	add.w	r3, r7, #20
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f7fb fd63 	bl	8000a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8004fcc:	f107 0314 	add.w	r3, r7, #20
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f005 fe68 	bl	800aca6 <_ZNSaIcED1Ev>
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f83f 	bl	800505a <_ZSt7forwardIPFvSt6vectorIP10ExpressionSaIS2_EEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	619a      	str	r2, [r3, #24]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bdb0      	pop	{r4, r5, r7, pc}

08004fee <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS8_EEESt4lessIS5_ESaISt4pairIKS5_SC_EEE6insertEOSH_>:
      insert(value_type&& __x)
 8004fee:	b590      	push	{r4, r7, lr}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	607a      	str	r2, [r7, #4]
      { return _M_t._M_insert_unique(std::move(__x)); }
 8004ffa:	68bc      	ldr	r4, [r7, #8]
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f837 	bl	8005070 <_ZSt4moveIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEONSt16remove_referenceIT_E4typeEOSI_>
 8005002:	4602      	mov	r2, r0
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4621      	mov	r1, r4
 8005008:	4618      	mov	r0, r3
 800500a:	f000 f83c 	bl	8005086 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE16_M_insert_uniqueISF_EES6_ISt17_Rb_tree_iteratorISF_EbEOT_>
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	bd90      	pop	{r4, r7, pc}

08005016 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f880 	bl	8005124 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEEC1Ev>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
      { }
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <_ZSt7forwardIRA32_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <_ZSt7forwardIPFvSt6vectorIP10ExpressionSaIS2_EEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <_ZSt4moveIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEONSt16remove_referenceIT_E4typeEOSI_>:
    move(_Tp&& __t) noexcept
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4618      	mov	r0, r3
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE16_M_insert_uniqueISF_EES6_ISt17_Rb_tree_iteratorISF_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005086:	b5b0      	push	{r4, r5, r7, lr}
 8005088:	b08e      	sub	sp, #56	; 0x38
 800508a:	af02      	add	r7, sp, #8
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 8005092:	f107 031c 	add.w	r3, r7, #28
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	4618      	mov	r0, r3
 800509a:	f000 f8d3 	bl	8005244 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEclERSF_>
 800509e:	4602      	mov	r2, r0
      pair<_Base_ptr, _Base_ptr> __res
 80050a0:	f107 0314 	add.w	r3, r7, #20
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f847 	bl	800513a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE24_M_get_insert_unique_posERS7_>
      if (__res.second)
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d022      	beq.n	80050f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE16_M_insert_uniqueISF_EES6_ISt17_Rb_tree_iteratorISF_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 80050b2:	f107 0310 	add.w	r3, r7, #16
 80050b6:	68b9      	ldr	r1, [r7, #8]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 f8cf 	bl	800525c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE11_Alloc_nodeC1ERSL_>
	  return _Res(_M_insert_(__res.first, __res.second,
 80050be:	697c      	ldr	r4, [r7, #20]
 80050c0:	69bd      	ldr	r5, [r7, #24]
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f8d9 	bl	800527a <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEOT_RNSt16remove_referenceISG_E4typeE>
 80050c8:	4602      	mov	r2, r0
 80050ca:	f107 0310 	add.w	r3, r7, #16
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	4613      	mov	r3, r2
 80050d2:	462a      	mov	r2, r5
 80050d4:	4621      	mov	r1, r4
 80050d6:	68b8      	ldr	r0, [r7, #8]
 80050d8:	f000 f8da 	bl	8005290 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE10_M_insert_ISF_NSL_11_Alloc_nodeEEESt17_Rb_tree_iteratorISF_EPSt18_Rb_tree_node_baseSR_OT_RT0_>
 80050dc:	4603      	mov	r3, r0
 80050de:	623b      	str	r3, [r7, #32]
		      true);
 80050e0:	2301      	movs	r3, #1
 80050e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80050e6:	f107 0227 	add.w	r2, r7, #39	; 0x27
 80050ea:	f107 0320 	add.w	r3, r7, #32
 80050ee:	4619      	mov	r1, r3
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f916 	bl	8005322 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEbEC1ISG_bLb1EEEOT_OT0_>
 80050f6:	e011      	b.n	800511c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE16_M_insert_uniqueISF_EES6_ISt17_Rb_tree_iteratorISF_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050fe:	4611      	mov	r1, r2
 8005100:	4618      	mov	r0, r3
 8005102:	f7fc feb6 	bl	8001e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEC1EPSt18_Rb_tree_node_base>
 8005106:	2300      	movs	r3, #0
 8005108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800510c:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8005110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005114:	4619      	mov	r1, r3
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f903 	bl	8005322 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEbEC1ISG_bLb1EEEOT_OT0_>
    }
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	3730      	adds	r7, #48	; 0x30
 8005120:	46bd      	mov	sp, r7
 8005122:	bdb0      	pop	{r4, r5, r7, pc}

08005124 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4618      	mov	r0, r3
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800513a:	b590      	push	{r4, r7, lr}
 800513c:	b08b      	sub	sp, #44	; 0x2c
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8005146:	68b8      	ldr	r0, [r7, #8]
 8005148:	f7fc f9c9 	bl	80014de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE8_M_beginEv>
 800514c:	4603      	mov	r3, r0
 800514e:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8005150:	68b8      	ldr	r0, [r7, #8]
 8005152:	f7fc fe22 	bl	8001d9a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE6_M_endEv>
 8005156:	4603      	mov	r3, r0
 8005158:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d020      	beq.n	80051a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE24_M_get_insert_unique_posERS7_+0x6e>
	  __y = __x;
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800516a:	68bc      	ldr	r4, [r7, #8]
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	4618      	mov	r0, r3
 8005170:	f7fd fd92 	bl	8002c98 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE6_S_keyEPKSt13_Rb_tree_nodeISF_E>
 8005174:	4603      	mov	r3, r0
 8005176:	461a      	mov	r2, r3
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	4620      	mov	r0, r4
 800517c:	f7fc fe6a 	bl	8001e54 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8005180:	4603      	mov	r3, r0
 8005182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8005186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800518a:	2b00      	cmp	r3, #0
 800518c:	d005      	beq.n	800519a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE24_M_get_insert_unique_posERS7_+0x60>
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	4618      	mov	r0, r3
 8005192:	f7fc fde5 	bl	8001d60 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE7_S_leftEPSt18_Rb_tree_node_base>
 8005196:	4603      	mov	r3, r0
 8005198:	e004      	b.n	80051a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE24_M_get_insert_unique_posERS7_+0x6a>
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	4618      	mov	r0, r3
 800519e:	f7fc fdd3 	bl	8001d48 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE8_S_rightEPSt18_Rb_tree_node_base>
 80051a2:	4603      	mov	r3, r0
 80051a4:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80051a6:	e7db      	b.n	8005160 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE24_M_get_insert_unique_posERS7_+0x26>
      iterator __j = iterator(__y);
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	f107 0310 	add.w	r3, r7, #16
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fc fe5e 	bl	8001e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80051b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01d      	beq.n	80051fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 80051be:	68b8      	ldr	r0, [r7, #8]
 80051c0:	f000 f8c8 	bl	8005354 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE5beginEv>
 80051c4:	4603      	mov	r3, r0
 80051c6:	61fb      	str	r3, [r7, #28]
 80051c8:	f107 021c 	add.w	r2, r7, #28
 80051cc:	f107 0310 	add.w	r3, r7, #16
 80051d0:	4611      	mov	r1, r2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fc fe1e 	bl	8001e14 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEESI_>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d008      	beq.n	80051f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 80051de:	f107 0214 	add.w	r2, r7, #20
 80051e2:	f107 0318 	add.w	r3, r7, #24
 80051e6:	4619      	mov	r1, r3
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f8c4 	bl	8005376 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISE_EEEEERS1_Lb1EEEOT_OT0_>
 80051ee:	e025      	b.n	800523c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 80051f0:	f107 0310 	add.w	r3, r7, #16
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 f8d7 	bl	80053a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80051fa:	68bc      	ldr	r4, [r7, #8]
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fc fe1c 	bl	8001e3c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005204:	4603      	mov	r3, r0
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	4619      	mov	r1, r3
 800520a:	4620      	mov	r0, r4
 800520c:	f7fc fe22 	bl	8001e54 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 8005216:	f107 0214 	add.w	r2, r7, #20
 800521a:	f107 0318 	add.w	r3, r7, #24
 800521e:	4619      	mov	r1, r3
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f8a8 	bl	8005376 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISE_EEEEERS1_Lb1EEEOT_OT0_>
 8005226:	e009      	b.n	800523c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 8005228:	2300      	movs	r3, #0
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	f107 0220 	add.w	r2, r7, #32
 8005230:	f107 0310 	add.w	r3, r7, #16
 8005234:	4619      	mov	r1, r3
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f7fd ff50 	bl	80030dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	372c      	adds	r7, #44	; 0x2c
 8005240:	46bd      	mov	sp, r7
 8005242:	bd90      	pop	{r4, r7, pc}

08005244 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEclERSF_>:
      operator()(_Pair& __x) const
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE11_Alloc_nodeC1ERSL_>:
	_Alloc_node(_Rb_tree& __t)
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEOT_RNSt16remove_referenceISG_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4618      	mov	r0, r3
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE10_M_insert_ISF_NSL_11_Alloc_nodeEEESt17_Rb_tree_iteratorISF_EPSt18_Rb_tree_node_baseSR_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005290:	b5b0      	push	{r4, r5, r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11a      	bne.n	80052da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE10_M_insert_ISF_NSL_11_Alloc_nodeEEESt17_Rb_tree_iteratorISF_EPSt18_Rb_tree_node_baseSR_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7fc fd78 	bl	8001d9a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE6_M_endEv>
 80052aa:	4602      	mov	r2, r0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d013      	beq.n	80052da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE10_M_insert_ISF_NSL_11_Alloc_nodeEEESt17_Rb_tree_iteratorISF_EPSt18_Rb_tree_node_baseSR_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80052b2:	68fc      	ldr	r4, [r7, #12]
 80052b4:	f107 0310 	add.w	r3, r7, #16
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff ffc2 	bl	8005244 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEclERSF_>
 80052c0:	4605      	mov	r5, r0
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fc fdba 	bl	8001e3c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80052c8:	4603      	mov	r3, r0
 80052ca:	461a      	mov	r2, r3
 80052cc:	4629      	mov	r1, r5
 80052ce:	4620      	mov	r0, r4
 80052d0:	f7fc fdc0 	bl	8001e54 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE10_M_insert_ISF_NSL_11_Alloc_nodeEEESt17_Rb_tree_iteratorISF_EPSt18_Rb_tree_node_baseSR_OT_RT0_+0x4e>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE10_M_insert_ISF_NSL_11_Alloc_nodeEEESt17_Rb_tree_iteratorISF_EPSt18_Rb_tree_node_baseSR_OT_RT0_+0x50>
 80052de:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 80052e0:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 80052e2:	6838      	ldr	r0, [r7, #0]
 80052e4:	f7ff ffc9 	bl	800527a <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEOT_RNSt16remove_referenceISG_E4typeE>
 80052e8:	4603      	mov	r3, r0
 80052ea:	4619      	mov	r1, r3
 80052ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052ee:	f000 f86c 	bl	80053ca <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE11_Alloc_nodeclISF_EEPSt13_Rb_tree_nodeISF_EOT_>
 80052f2:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80052f8:	7ff8      	ldrb	r0, [r7, #31]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	69b9      	ldr	r1, [r7, #24]
 80052fe:	f005 fd29 	bl	800ad54 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800530c:	f107 0314 	add.w	r3, r7, #20
 8005310:	69b9      	ldr	r1, [r7, #24]
 8005312:	4618      	mov	r0, r3
 8005314:	f7fc fdad 	bl	8001e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEC1EPSt18_Rb_tree_node_base>
 8005318:	697b      	ldr	r3, [r7, #20]
      }
 800531a:	4618      	mov	r0, r3
 800531c:	3720      	adds	r7, #32
 800531e:	46bd      	mov	sp, r7
 8005320:	bdb0      	pop	{r4, r5, r7, pc}

08005322 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEbEC1ISG_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800532e:	68b8      	ldr	r0, [r7, #8]
 8005330:	f000 f85f 	bl	80053f2 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEEEOT_RNSt16remove_referenceISI_E4typeE>
 8005334:	4602      	mov	r2, r0
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f863 	bl	8005408 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8005342:	4603      	mov	r3, r0
 8005344:	781a      	ldrb	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	711a      	strb	r2, [r3, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	f107 030c 	add.w	r3, r7, #12
 8005364:	4611      	mov	r1, r2
 8005366:	4618      	mov	r0, r3
 8005368:	f7fc fd83 	bl	8001e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEC1EPSt18_Rb_tree_node_base>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISE_EEEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005382:	68b8      	ldr	r0, [r7, #8]
 8005384:	f000 f84b 	bl	800541e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEEEOT_RNSt16remove_referenceISK_E4typeE>
 8005388:	4603      	mov	r3, r0
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7fe fa0b 	bl	80037ac <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8005396:	4603      	mov	r3, r0
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	605a      	str	r2, [r3, #4]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f005 fccb 	bl	800ad50 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80053ba:	4602      	mov	r2, r0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	601a      	str	r2, [r3, #0]
	return *this;
 80053c0:	687b      	ldr	r3, [r7, #4]
      }
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE11_Alloc_nodeclISF_EEPSt13_Rb_tree_nodeISF_EOT_>:
	  operator()(_Arg&& __arg) const
 80053ca:	b590      	push	{r4, r7, lr}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681c      	ldr	r4, [r3, #0]
 80053d8:	6838      	ldr	r0, [r7, #0]
 80053da:	f7ff ff4e 	bl	800527a <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEOT_RNSt16remove_referenceISG_E4typeE>
 80053de:	4603      	mov	r3, r0
 80053e0:	4619      	mov	r1, r3
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 f826 	bl	8005434 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE14_M_create_nodeIJSF_EEEPSt13_Rb_tree_nodeISF_EDpOT_>
 80053e8:	4603      	mov	r3, r0
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd90      	pop	{r4, r7, pc}

080053f2 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEEEOT_RNSt16remove_referenceISI_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEEEOT_RNSt16remove_referenceISK_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE14_M_create_nodeIJSF_EEEPSt13_Rb_tree_nodeISF_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f80f 	bl	8005462 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE11_M_get_nodeEv>
 8005444:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8005446:	6838      	ldr	r0, [r7, #0]
 8005448:	f7ff ff17 	bl	800527a <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEOT_RNSt16remove_referenceISG_E4typeE>
 800544c:	4603      	mov	r3, r0
 800544e:	461a      	mov	r2, r3
 8005450:	68f9      	ldr	r1, [r7, #12]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f816 	bl	8005484 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE17_M_construct_nodeIJSF_EEEvPSt13_Rb_tree_nodeISF_EDpOT_>
	  return __tmp;
 8005458:	68fb      	ldr	r3, [r7, #12]
	}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE11_M_get_nodeEv>:
      _M_get_node()
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fe f8d6 	bl	800361c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE21_M_get_Node_allocatorEv>
 8005470:	4603      	mov	r3, r0
 8005472:	2101      	movs	r1, #1
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f825 	bl	80054c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEEEE8allocateERSI_j>
 800547a:	4603      	mov	r3, r0
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE17_M_construct_nodeIJSF_EEEvPSt13_Rb_tree_nodeISF_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8005484:	b5b0      	push	{r4, r5, r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4619      	mov	r1, r3
 8005494:	202c      	movs	r0, #44	; 0x2c
 8005496:	f7fb f83b 	bl	8000510 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f7fe f8be 	bl	800361c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvSt6vectorIP10ExpressionSaISA_EEEESt10_Select1stISF_ESt4lessIS5_ESaISF_EE21_M_get_Node_allocatorEv>
 80054a0:	4604      	mov	r4, r0
 80054a2:	68b8      	ldr	r0, [r7, #8]
 80054a4:	f7fc f8a0 	bl	80015e8 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEE9_M_valptrEv>
 80054a8:	4605      	mov	r5, r0
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff fee5 	bl	800527a <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEOT_RNSt16remove_referenceISG_E4typeE>
 80054b0:	4603      	mov	r3, r0
 80054b2:	461a      	mov	r2, r3
 80054b4:	4629      	mov	r1, r5
 80054b6:	4620      	mov	r0, r4
 80054b8:	f000 f813 	bl	80054e2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEEEE9constructISG_JSG_EEEvRSI_PT_DpOT0_>
	}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bdb0      	pop	{r4, r5, r7, pc}

080054c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEEEE8allocateERSI_j>:
      allocate(allocator_type& __a, size_type __n)
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80054ce:	2200      	movs	r2, #0
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f818 	bl	8005508 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEE8allocateEjPKv>
 80054d8:	4603      	mov	r3, r0
 80054da:	4618      	mov	r0, r3
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISB_EEEEEEE9constructISG_JSG_EEEvRSI_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff fec3 	bl	800527a <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEOT_RNSt16remove_referenceISG_E4typeE>
 80054f4:	4603      	mov	r3, r0
 80054f6:	461a      	mov	r2, r3
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f839 	bl	8005572 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEE9constructISH_JSH_EEEvPT_DpOT0_>
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f845 	bl	80055a4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEE8max_sizeEv>
 800551a:	4602      	mov	r2, r0
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4293      	cmp	r3, r2
 8005520:	bf8c      	ite	hi
 8005522:	2301      	movhi	r3, #1
 8005524:	2300      	movls	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800552c:	f005 fc6e 	bl	800ae0c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	222c      	movs	r2, #44	; 0x2c
 8005534:	fb02 f303 	mul.w	r3, r2, r3
 8005538:	4618      	mov	r0, r3
 800553a:	f005 fba2 	bl	800ac82 <_Znwj>
 800553e:	4603      	mov	r3, r0
 8005540:	bf00      	nop
      }
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS9_EEEEC1EOSE_>:
      constexpr pair(pair&&) = default;
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f005 fe04 	bl	800b168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	699a      	ldr	r2, [r3, #24]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	619a      	str	r2, [r3, #24]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEE9constructISH_JSH_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005572:	b590      	push	{r4, r7, lr}
 8005574:	b085      	sub	sp, #20
 8005576:	af00      	add	r7, sp, #0
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff fe7b 	bl	800527a <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISA_EEEEEOT_RNSt16remove_referenceISG_E4typeE>
 8005584:	4604      	mov	r4, r0
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4619      	mov	r1, r3
 800558a:	201c      	movs	r0, #28
 800558c:	f7fa ffc0 	bl	8000510 <_ZnwjPv>
 8005590:	4603      	mov	r3, r0
 8005592:	4621      	mov	r1, r4
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff ffd8 	bl	800554a <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaIS9_EEEEC1EOSE_>
 800559a:	bf00      	nop
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd90      	pop	{r4, r7, pc}
	...

080055a4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80055ac:	4b03      	ldr	r3, [pc, #12]	; (80055bc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvSt6vectorIP10ExpressionSaISC_EEEEEE8max_sizeEv+0x18>)
      }
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	02e8ba2e 	.word	0x02e8ba2e

080055c0 <_Z41__static_initialization_and_destruction_0ii>:
 80055c0:	b590      	push	{r4, r7, lr}
 80055c2:	b0e7      	sub	sp, #412	; 0x19c
 80055c4:	af02      	add	r7, sp, #8
 80055c6:	1d3b      	adds	r3, r7, #4
 80055c8:	6018      	str	r0, [r3, #0]
 80055ca:	463b      	mov	r3, r7
 80055cc:	6019      	str	r1, [r3, #0]
 80055ce:	1d3b      	adds	r3, r7, #4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	f040 819d 	bne.w	8005912 <_Z41__static_initialization_and_destruction_0ii+0x352>
 80055d8:	463b      	mov	r3, r7
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055e0:	4293      	cmp	r3, r2
 80055e2:	f040 8196 	bne.w	8005912 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 80055e6:	f107 0314 	add.w	r3, r7, #20
 80055ea:	4618      	mov	r0, r3
 80055ec:	2322      	movs	r3, #34	; 0x22
 80055ee:	461a      	mov	r2, r3
 80055f0:	2100      	movs	r1, #0
 80055f2:	f005 fe63 	bl	800b2bc <memset>
 80055f6:	f107 0314 	add.w	r3, r7, #20
 80055fa:	223a      	movs	r2, #58	; 0x3a
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	f107 0314 	add.w	r3, r7, #20
 8005602:	2201      	movs	r2, #1
 8005604:	705a      	strb	r2, [r3, #1]
 8005606:	f107 0314 	add.w	r3, r7, #20
 800560a:	220a      	movs	r2, #10
 800560c:	709a      	strb	r2, [r3, #2]
 800560e:	f107 0314 	add.w	r3, r7, #20
 8005612:	220a      	movs	r2, #10
 8005614:	70da      	strb	r2, [r3, #3]
 8005616:	f107 0314 	add.w	r3, r7, #20
 800561a:	222c      	movs	r2, #44	; 0x2c
 800561c:	711a      	strb	r2, [r3, #4]
 800561e:	f107 0314 	add.w	r3, r7, #20
 8005622:	220c      	movs	r2, #12
 8005624:	715a      	strb	r2, [r3, #5]
 8005626:	f107 0314 	add.w	r3, r7, #20
 800562a:	222e      	movs	r2, #46	; 0x2e
 800562c:	719a      	strb	r2, [r3, #6]
 800562e:	f107 0314 	add.w	r3, r7, #20
 8005632:	220b      	movs	r2, #11
 8005634:	71da      	strb	r2, [r3, #7]
 8005636:	f107 0314 	add.w	r3, r7, #20
 800563a:	225b      	movs	r2, #91	; 0x5b
 800563c:	721a      	strb	r2, [r3, #8]
 800563e:	f107 0314 	add.w	r3, r7, #20
 8005642:	220d      	movs	r2, #13
 8005644:	725a      	strb	r2, [r3, #9]
 8005646:	f107 0314 	add.w	r3, r7, #20
 800564a:	225d      	movs	r2, #93	; 0x5d
 800564c:	729a      	strb	r2, [r3, #10]
 800564e:	f107 0314 	add.w	r3, r7, #20
 8005652:	220e      	movs	r2, #14
 8005654:	72da      	strb	r2, [r3, #11]
 8005656:	f107 0314 	add.w	r3, r7, #20
 800565a:	227c      	movs	r2, #124	; 0x7c
 800565c:	731a      	strb	r2, [r3, #12]
 800565e:	f107 0314 	add.w	r3, r7, #20
 8005662:	2215      	movs	r2, #21
 8005664:	735a      	strb	r2, [r3, #13]
 8005666:	f107 0314 	add.w	r3, r7, #20
 800566a:	2226      	movs	r2, #38	; 0x26
 800566c:	739a      	strb	r2, [r3, #14]
 800566e:	f107 0314 	add.w	r3, r7, #20
 8005672:	2216      	movs	r2, #22
 8005674:	73da      	strb	r2, [r3, #15]
 8005676:	f107 0314 	add.w	r3, r7, #20
 800567a:	222b      	movs	r2, #43	; 0x2b
 800567c:	741a      	strb	r2, [r3, #16]
 800567e:	f107 0314 	add.w	r3, r7, #20
 8005682:	221f      	movs	r2, #31
 8005684:	745a      	strb	r2, [r3, #17]
 8005686:	f107 0314 	add.w	r3, r7, #20
 800568a:	222d      	movs	r2, #45	; 0x2d
 800568c:	749a      	strb	r2, [r3, #18]
 800568e:	f107 0314 	add.w	r3, r7, #20
 8005692:	2220      	movs	r2, #32
 8005694:	74da      	strb	r2, [r3, #19]
 8005696:	f107 0314 	add.w	r3, r7, #20
 800569a:	222a      	movs	r2, #42	; 0x2a
 800569c:	751a      	strb	r2, [r3, #20]
 800569e:	f107 0314 	add.w	r3, r7, #20
 80056a2:	2221      	movs	r2, #33	; 0x21
 80056a4:	755a      	strb	r2, [r3, #21]
 80056a6:	f107 0314 	add.w	r3, r7, #20
 80056aa:	222f      	movs	r2, #47	; 0x2f
 80056ac:	759a      	strb	r2, [r3, #22]
 80056ae:	f107 0314 	add.w	r3, r7, #20
 80056b2:	2222      	movs	r2, #34	; 0x22
 80056b4:	75da      	strb	r2, [r3, #23]
 80056b6:	f107 0314 	add.w	r3, r7, #20
 80056ba:	225e      	movs	r2, #94	; 0x5e
 80056bc:	761a      	strb	r2, [r3, #24]
 80056be:	f107 0314 	add.w	r3, r7, #20
 80056c2:	2223      	movs	r2, #35	; 0x23
 80056c4:	765a      	strb	r2, [r3, #25]
 80056c6:	f107 0314 	add.w	r3, r7, #20
 80056ca:	2225      	movs	r2, #37	; 0x25
 80056cc:	769a      	strb	r2, [r3, #26]
 80056ce:	f107 0314 	add.w	r3, r7, #20
 80056d2:	2224      	movs	r2, #36	; 0x24
 80056d4:	76da      	strb	r2, [r3, #27]
 80056d6:	f107 0314 	add.w	r3, r7, #20
 80056da:	2228      	movs	r2, #40	; 0x28
 80056dc:	771a      	strb	r2, [r3, #28]
 80056de:	f107 0314 	add.w	r3, r7, #20
 80056e2:	2226      	movs	r2, #38	; 0x26
 80056e4:	775a      	strb	r2, [r3, #29]
 80056e6:	f107 0314 	add.w	r3, r7, #20
 80056ea:	2229      	movs	r2, #41	; 0x29
 80056ec:	779a      	strb	r2, [r3, #30]
 80056ee:	f107 0314 	add.w	r3, r7, #20
 80056f2:	2227      	movs	r2, #39	; 0x27
 80056f4:	77da      	strb	r2, [r3, #31]
 80056f6:	f107 0314 	add.w	r3, r7, #20
 80056fa:	2225      	movs	r2, #37	; 0x25
 80056fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005700:	f107 030c 	add.w	r3, r7, #12
 8005704:	f107 0214 	add.w	r2, r7, #20
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	f107 030c 	add.w	r3, r7, #12
 800570e:	2211      	movs	r2, #17
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005716:	4618      	mov	r0, r3
 8005718:	f7fb f968 	bl	80009ec <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 800571c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005720:	f107 020c 	add.w	r2, r7, #12
 8005724:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	460b      	mov	r3, r1
 800572c:	ca06      	ldmia	r2, {r1, r2}
 800572e:	4885      	ldr	r0, [pc, #532]	; (8005944 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8005730:	f7fb f974 	bl	8000a1c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8005734:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005738:	4618      	mov	r0, r3
 800573a:	f7fb f963 	bl	8000a04 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 800573e:	2305      	movs	r3, #5
 8005740:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8005744:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8005748:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800574c:	497e      	ldr	r1, [pc, #504]	; (8005948 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800574e:	4618      	mov	r0, r3
 8005750:	f7fa ff44 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8005754:	2306      	movs	r3, #6
 8005756:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 800575a:	f207 1263 	addw	r2, r7, #355	; 0x163
 800575e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005762:	331c      	adds	r3, #28
 8005764:	4979      	ldr	r1, [pc, #484]	; (800594c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8005766:	4618      	mov	r0, r3
 8005768:	f7fa ff60 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 800576c:	2307      	movs	r3, #7
 800576e:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8005772:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8005776:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800577a:	3338      	adds	r3, #56	; 0x38
 800577c:	4974      	ldr	r1, [pc, #464]	; (8005950 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800577e:	4618      	mov	r0, r3
 8005780:	f7fa ff54 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8005784:	2308      	movs	r3, #8
 8005786:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 800578a:	f207 1265 	addw	r2, r7, #357	; 0x165
 800578e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005792:	3354      	adds	r3, #84	; 0x54
 8005794:	496f      	ldr	r1, [pc, #444]	; (8005954 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8005796:	4618      	mov	r0, r3
 8005798:	f7fa ff20 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 800579c:	2309      	movs	r3, #9
 800579e:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 80057a2:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 80057a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057aa:	3370      	adds	r3, #112	; 0x70
 80057ac:	496a      	ldr	r1, [pc, #424]	; (8005958 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fa ff64 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 80057b4:	2310      	movs	r3, #16
 80057b6:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 80057ba:	f207 1267 	addw	r2, r7, #359	; 0x167
 80057be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057c2:	338c      	adds	r3, #140	; 0x8c
 80057c4:	4965      	ldr	r1, [pc, #404]	; (800595c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fa ff80 	bl	80006cc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 80057cc:	2311      	movs	r3, #17
 80057ce:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 80057d2:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80057d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057da:	33a8      	adds	r3, #168	; 0xa8
 80057dc:	4960      	ldr	r1, [pc, #384]	; (8005960 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fa ff4c 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 80057e4:	2312      	movs	r3, #18
 80057e6:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 80057ea:	f207 1269 	addw	r2, r7, #361	; 0x169
 80057ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057f2:	33c4      	adds	r3, #196	; 0xc4
 80057f4:	495b      	ldr	r1, [pc, #364]	; (8005964 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fa fef0 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 80057fc:	2313      	movs	r3, #19
 80057fe:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8005802:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8005806:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800580a:	33e0      	adds	r3, #224	; 0xe0
 800580c:	4956      	ldr	r1, [pc, #344]	; (8005968 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800580e:	4618      	mov	r0, r3
 8005810:	f7fa ff0c 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8005814:	2314      	movs	r3, #20
 8005816:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 800581a:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800581e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005822:	33fc      	adds	r3, #252	; 0xfc
 8005824:	4951      	ldr	r1, [pc, #324]	; (800596c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8005826:	4618      	mov	r0, r3
 8005828:	f7fa ff78 	bl	800071c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 800582c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005830:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800583a:	220a      	movs	r2, #10
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005842:	4618      	mov	r0, r3
 8005844:	f7fb f977 	bl	8000b36 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8005848:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800584c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005850:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	460b      	mov	r3, r1
 8005858:	ca06      	ldmia	r2, {r1, r2}
 800585a:	4845      	ldr	r0, [pc, #276]	; (8005970 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800585c:	f7fb f983 	bl	8000b66 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8005860:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005864:	4618      	mov	r0, r3
 8005866:	f7fb f972 	bl	8000b4e <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800586a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800586e:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8005872:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005876:	429c      	cmp	r4, r3
 8005878:	d004      	beq.n	8005884 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 800587a:	3c1c      	subs	r4, #28
 800587c:	4620      	mov	r0, r4
 800587e:	f7fa fea0 	bl	80005c2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8005882:	e7f6      	b.n	8005872 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8005884:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	605a      	str	r2, [r3, #4]
 800588e:	609a      	str	r2, [r3, #8]
 8005890:	233c      	movs	r3, #60	; 0x3c
 8005892:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8005896:	231b      	movs	r3, #27
 8005898:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 800589c:	231c      	movs	r3, #28
 800589e:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80058a2:	233e      	movs	r3, #62	; 0x3e
 80058a4:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80058a8:	2319      	movs	r3, #25
 80058aa:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 80058ae:	231a      	movs	r3, #26
 80058b0:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 80058b4:	233d      	movs	r3, #61	; 0x3d
 80058b6:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 80058ba:	2318      	movs	r3, #24
 80058bc:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 80058c0:	231d      	movs	r3, #29
 80058c2:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80058c6:	2321      	movs	r3, #33	; 0x21
 80058c8:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80058cc:	2317      	movs	r3, #23
 80058ce:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80058d2:	231e      	movs	r3, #30
 80058d4:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80058d8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80058dc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80058e0:	2304      	movs	r3, #4
 80058e2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80058e6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fb f96b 	bl	8000bc6 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 80058f0:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80058f4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	4613      	mov	r3, r2
 80058fc:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8005900:	ca06      	ldmia	r2, {r1, r2}
 8005902:	481c      	ldr	r0, [pc, #112]	; (8005974 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8005904:	f7fb f977 	bl	8000bf6 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8005908:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800590c:	4618      	mov	r0, r3
 800590e:	f7fb f966 	bl	8000bde <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8005912:	1d3b      	adds	r3, r7, #4
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10e      	bne.n	8005938 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800591a:	463b      	mov	r3, r7
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005922:	4293      	cmp	r3, r2
 8005924:	d108      	bne.n	8005938 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8005926:	4813      	ldr	r0, [pc, #76]	; (8005974 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8005928:	f7fe fcce 	bl	80042c8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 800592c:	4810      	ldr	r0, [pc, #64]	; (8005970 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800592e:	f7fe fcd8 	bl	80042e2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8005932:	4804      	ldr	r0, [pc, #16]	; (8005944 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8005934:	f7fe fce2 	bl	80042fc <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8005938:	bf00      	nop
 800593a:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800593e:	46bd      	mov	sp, r7
 8005940:	bd90      	pop	{r4, r7, pc}
 8005942:	bf00      	nop
 8005944:	20000164 	.word	0x20000164
 8005948:	0800b768 	.word	0x0800b768
 800594c:	0800b770 	.word	0x0800b770
 8005950:	0800b778 	.word	0x0800b778
 8005954:	0800b780 	.word	0x0800b780
 8005958:	0800b788 	.word	0x0800b788
 800595c:	0800b790 	.word	0x0800b790
 8005960:	0800b794 	.word	0x0800b794
 8005964:	0800b79c 	.word	0x0800b79c
 8005968:	0800b7a4 	.word	0x0800b7a4
 800596c:	0800b7ac 	.word	0x0800b7ac
 8005970:	2000017c 	.word	0x2000017c
 8005974:	20000194 	.word	0x20000194

08005978 <_GLOBAL__sub_I__ZN16Function_handlerC2Ev>:
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
 800597c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005980:	2001      	movs	r0, #1
 8005982:	f7ff fe1d 	bl	80055c0 <_Z41__static_initialization_and_destruction_0ii>
 8005986:	bd80      	pop	{r7, pc}

08005988 <_GLOBAL__sub_D__ZN16Function_handlerC2Ev>:
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
 800598c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005990:	2000      	movs	r0, #0
 8005992:	f7ff fe15 	bl	80055c0 <_Z41__static_initialization_and_destruction_0ii>
 8005996:	bd80      	pop	{r7, pc}

08005998 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>:
      variant() = default;
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f873 	bl	8005a8e <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <_ZN5TokenC1Ev>:
#include <string>
#include "token_types.h"

typedef std::variant<std::string, int, float, bool> token_value;

class Token
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b082      	sub	sp, #8
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3304      	adds	r3, #4
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff ffea 	bl	8005998 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <_ZN5LexerC1EP6Source>:
#include <Lexer.h>

Lexer::Lexer(Source *Code)
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b082      	sub	sp, #8
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	6039      	str	r1, [r7, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff ffe8 	bl	80059b2 <_ZN5TokenC1Ev>
{
	this->Code = Code;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	62da      	str	r2, [r3, #44]	; 0x2c
	char_buffer = ' ';
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	701a      	strb	r2, [r3, #0]
}
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	7039      	strb	r1, [r7, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4611      	mov	r1, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f874 	bl	8005af4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	7039      	strb	r1, [r7, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4611      	mov	r1, r2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff ffe7 	bl	80059f8 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	7039      	strb	r1, [r7, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4611      	mov	r1, r2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff ffe7 	bl	8005a16 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	7039      	strb	r1, [r7, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4611      	mov	r1, r2
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff ffe7 	bl	8005a34 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	7039      	strb	r1, [r7, #0]
	: _Base(__i, std::forward<_Args>(__args)...)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff ffe7 	bl	8005a52 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>:
      _Variant_base()
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
      : _Variant_base(in_place_index<0>) { }
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff ffe9 	bl	8005a70 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	7039      	strb	r1, [r7, #0]
	  ::new ((void*)std::addressof(_M_storage))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f82f 	bl	8005b18 <_ZSt9addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 8005aba:	4603      	mov	r3, r0
 8005abc:	4619      	mov	r1, r3
 8005abe:	2018      	movs	r0, #24
 8005ac0:	f7fa fd26 	bl	8000510 <_ZnwjPv>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f005 fa45 	bl	800af56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	}
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b082      	sub	sp, #8
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	7039      	strb	r1, [r7, #0]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff ffdf 	bl	8005aa8 <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	7039      	strb	r1, [r7, #0]
	_M_index(_Np)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4611      	mov	r1, r2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff ffe7 	bl	8005ad6 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJEEESt16in_place_index_tILj0EEDpOT_>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	761a      	strb	r2, [r3, #24]
	{ }
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <_ZSt9addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>:
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */
  template<typename _Tp>
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f805 	bl	8005b30 <_ZSt11__addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 8005b26:	4603      	mov	r3, r0
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <_ZSt11__addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <_Z41__static_initialization_and_destruction_0ii>:
	while (is_invalid_char())
	{
		skip_comment();
		skip_whitespace();
	}
}
 8005b48:	b590      	push	{r4, r7, lr}
 8005b4a:	b0e7      	sub	sp, #412	; 0x19c
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	1d3b      	adds	r3, r7, #4
 8005b50:	6018      	str	r0, [r3, #0]
 8005b52:	463b      	mov	r3, r7
 8005b54:	6019      	str	r1, [r3, #0]
 8005b56:	1d3b      	adds	r3, r7, #4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	f040 819d 	bne.w	8005e9a <_Z41__static_initialization_and_destruction_0ii+0x352>
 8005b60:	463b      	mov	r3, r7
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	f040 8196 	bne.w	8005e9a <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8005b6e:	f107 0314 	add.w	r3, r7, #20
 8005b72:	4618      	mov	r0, r3
 8005b74:	2322      	movs	r3, #34	; 0x22
 8005b76:	461a      	mov	r2, r3
 8005b78:	2100      	movs	r1, #0
 8005b7a:	f005 fb9f 	bl	800b2bc <memset>
 8005b7e:	f107 0314 	add.w	r3, r7, #20
 8005b82:	223a      	movs	r2, #58	; 0x3a
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	f107 0314 	add.w	r3, r7, #20
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	705a      	strb	r2, [r3, #1]
 8005b8e:	f107 0314 	add.w	r3, r7, #20
 8005b92:	220a      	movs	r2, #10
 8005b94:	709a      	strb	r2, [r3, #2]
 8005b96:	f107 0314 	add.w	r3, r7, #20
 8005b9a:	220a      	movs	r2, #10
 8005b9c:	70da      	strb	r2, [r3, #3]
 8005b9e:	f107 0314 	add.w	r3, r7, #20
 8005ba2:	222c      	movs	r2, #44	; 0x2c
 8005ba4:	711a      	strb	r2, [r3, #4]
 8005ba6:	f107 0314 	add.w	r3, r7, #20
 8005baa:	220c      	movs	r2, #12
 8005bac:	715a      	strb	r2, [r3, #5]
 8005bae:	f107 0314 	add.w	r3, r7, #20
 8005bb2:	222e      	movs	r2, #46	; 0x2e
 8005bb4:	719a      	strb	r2, [r3, #6]
 8005bb6:	f107 0314 	add.w	r3, r7, #20
 8005bba:	220b      	movs	r2, #11
 8005bbc:	71da      	strb	r2, [r3, #7]
 8005bbe:	f107 0314 	add.w	r3, r7, #20
 8005bc2:	225b      	movs	r2, #91	; 0x5b
 8005bc4:	721a      	strb	r2, [r3, #8]
 8005bc6:	f107 0314 	add.w	r3, r7, #20
 8005bca:	220d      	movs	r2, #13
 8005bcc:	725a      	strb	r2, [r3, #9]
 8005bce:	f107 0314 	add.w	r3, r7, #20
 8005bd2:	225d      	movs	r2, #93	; 0x5d
 8005bd4:	729a      	strb	r2, [r3, #10]
 8005bd6:	f107 0314 	add.w	r3, r7, #20
 8005bda:	220e      	movs	r2, #14
 8005bdc:	72da      	strb	r2, [r3, #11]
 8005bde:	f107 0314 	add.w	r3, r7, #20
 8005be2:	227c      	movs	r2, #124	; 0x7c
 8005be4:	731a      	strb	r2, [r3, #12]
 8005be6:	f107 0314 	add.w	r3, r7, #20
 8005bea:	2215      	movs	r2, #21
 8005bec:	735a      	strb	r2, [r3, #13]
 8005bee:	f107 0314 	add.w	r3, r7, #20
 8005bf2:	2226      	movs	r2, #38	; 0x26
 8005bf4:	739a      	strb	r2, [r3, #14]
 8005bf6:	f107 0314 	add.w	r3, r7, #20
 8005bfa:	2216      	movs	r2, #22
 8005bfc:	73da      	strb	r2, [r3, #15]
 8005bfe:	f107 0314 	add.w	r3, r7, #20
 8005c02:	222b      	movs	r2, #43	; 0x2b
 8005c04:	741a      	strb	r2, [r3, #16]
 8005c06:	f107 0314 	add.w	r3, r7, #20
 8005c0a:	221f      	movs	r2, #31
 8005c0c:	745a      	strb	r2, [r3, #17]
 8005c0e:	f107 0314 	add.w	r3, r7, #20
 8005c12:	222d      	movs	r2, #45	; 0x2d
 8005c14:	749a      	strb	r2, [r3, #18]
 8005c16:	f107 0314 	add.w	r3, r7, #20
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	74da      	strb	r2, [r3, #19]
 8005c1e:	f107 0314 	add.w	r3, r7, #20
 8005c22:	222a      	movs	r2, #42	; 0x2a
 8005c24:	751a      	strb	r2, [r3, #20]
 8005c26:	f107 0314 	add.w	r3, r7, #20
 8005c2a:	2221      	movs	r2, #33	; 0x21
 8005c2c:	755a      	strb	r2, [r3, #21]
 8005c2e:	f107 0314 	add.w	r3, r7, #20
 8005c32:	222f      	movs	r2, #47	; 0x2f
 8005c34:	759a      	strb	r2, [r3, #22]
 8005c36:	f107 0314 	add.w	r3, r7, #20
 8005c3a:	2222      	movs	r2, #34	; 0x22
 8005c3c:	75da      	strb	r2, [r3, #23]
 8005c3e:	f107 0314 	add.w	r3, r7, #20
 8005c42:	225e      	movs	r2, #94	; 0x5e
 8005c44:	761a      	strb	r2, [r3, #24]
 8005c46:	f107 0314 	add.w	r3, r7, #20
 8005c4a:	2223      	movs	r2, #35	; 0x23
 8005c4c:	765a      	strb	r2, [r3, #25]
 8005c4e:	f107 0314 	add.w	r3, r7, #20
 8005c52:	2225      	movs	r2, #37	; 0x25
 8005c54:	769a      	strb	r2, [r3, #26]
 8005c56:	f107 0314 	add.w	r3, r7, #20
 8005c5a:	2224      	movs	r2, #36	; 0x24
 8005c5c:	76da      	strb	r2, [r3, #27]
 8005c5e:	f107 0314 	add.w	r3, r7, #20
 8005c62:	2228      	movs	r2, #40	; 0x28
 8005c64:	771a      	strb	r2, [r3, #28]
 8005c66:	f107 0314 	add.w	r3, r7, #20
 8005c6a:	2226      	movs	r2, #38	; 0x26
 8005c6c:	775a      	strb	r2, [r3, #29]
 8005c6e:	f107 0314 	add.w	r3, r7, #20
 8005c72:	2229      	movs	r2, #41	; 0x29
 8005c74:	779a      	strb	r2, [r3, #30]
 8005c76:	f107 0314 	add.w	r3, r7, #20
 8005c7a:	2227      	movs	r2, #39	; 0x27
 8005c7c:	77da      	strb	r2, [r3, #31]
 8005c7e:	f107 0314 	add.w	r3, r7, #20
 8005c82:	2225      	movs	r2, #37	; 0x25
 8005c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005c88:	f107 030c 	add.w	r3, r7, #12
 8005c8c:	f107 0214 	add.w	r2, r7, #20
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	f107 030c 	add.w	r3, r7, #12
 8005c96:	2211      	movs	r2, #17
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fa fea4 	bl	80009ec <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8005ca4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005ca8:	f107 020c 	add.w	r2, r7, #12
 8005cac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	ca06      	ldmia	r2, {r1, r2}
 8005cb6:	4885      	ldr	r0, [pc, #532]	; (8005ecc <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8005cb8:	f7fa feb0 	bl	8000a1c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8005cbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fa fe9f 	bl	8000a04 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8005cc6:	2305      	movs	r3, #5
 8005cc8:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8005ccc:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8005cd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005cd4:	497e      	ldr	r1, [pc, #504]	; (8005ed0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fa fc80 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8005cdc:	2306      	movs	r3, #6
 8005cde:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8005ce2:	f207 1263 	addw	r2, r7, #355	; 0x163
 8005ce6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005cea:	331c      	adds	r3, #28
 8005cec:	4979      	ldr	r1, [pc, #484]	; (8005ed4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fa fc9c 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8005cf4:	2307      	movs	r3, #7
 8005cf6:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8005cfa:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8005cfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d02:	3338      	adds	r3, #56	; 0x38
 8005d04:	4974      	ldr	r1, [pc, #464]	; (8005ed8 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fa fc90 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8005d0c:	2308      	movs	r3, #8
 8005d0e:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8005d12:	f207 1265 	addw	r2, r7, #357	; 0x165
 8005d16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d1a:	3354      	adds	r3, #84	; 0x54
 8005d1c:	496f      	ldr	r1, [pc, #444]	; (8005edc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fa fc5c 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8005d24:	2309      	movs	r3, #9
 8005d26:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8005d2a:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8005d2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d32:	3370      	adds	r3, #112	; 0x70
 8005d34:	496a      	ldr	r1, [pc, #424]	; (8005ee0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fa fca0 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8005d3c:	2310      	movs	r3, #16
 8005d3e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8005d42:	f207 1267 	addw	r2, r7, #359	; 0x167
 8005d46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d4a:	338c      	adds	r3, #140	; 0x8c
 8005d4c:	4965      	ldr	r1, [pc, #404]	; (8005ee4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fa fcbc 	bl	80006cc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8005d54:	2311      	movs	r3, #17
 8005d56:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8005d5a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005d5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d62:	33a8      	adds	r3, #168	; 0xa8
 8005d64:	4960      	ldr	r1, [pc, #384]	; (8005ee8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fa fc88 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8005d6c:	2312      	movs	r3, #18
 8005d6e:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8005d72:	f207 1269 	addw	r2, r7, #361	; 0x169
 8005d76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d7a:	33c4      	adds	r3, #196	; 0xc4
 8005d7c:	495b      	ldr	r1, [pc, #364]	; (8005eec <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7fa fc2c 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8005d84:	2313      	movs	r3, #19
 8005d86:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8005d8a:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8005d8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d92:	33e0      	adds	r3, #224	; 0xe0
 8005d94:	4956      	ldr	r1, [pc, #344]	; (8005ef0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fa fc48 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8005d9c:	2314      	movs	r3, #20
 8005d9e:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8005da2:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8005da6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005daa:	33fc      	adds	r3, #252	; 0xfc
 8005dac:	4951      	ldr	r1, [pc, #324]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fa fcb4 	bl	800071c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8005db4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005db8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005dc2:	220a      	movs	r2, #10
 8005dc4:	605a      	str	r2, [r3, #4]
 8005dc6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fa feb3 	bl	8000b36 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8005dd0:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8005dd4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005dd8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	460b      	mov	r3, r1
 8005de0:	ca06      	ldmia	r2, {r1, r2}
 8005de2:	4845      	ldr	r0, [pc, #276]	; (8005ef8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8005de4:	f7fa febf 	bl	8000b66 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8005de8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fa feae 	bl	8000b4e <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8005df2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8005df6:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8005dfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005dfe:	429c      	cmp	r4, r3
 8005e00:	d004      	beq.n	8005e0c <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8005e02:	3c1c      	subs	r4, #28
 8005e04:	4620      	mov	r0, r4
 8005e06:	f7fa fbdc 	bl	80005c2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8005e0a:	e7f6      	b.n	8005dfa <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8005e0c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	609a      	str	r2, [r3, #8]
 8005e18:	233c      	movs	r3, #60	; 0x3c
 8005e1a:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8005e1e:	231b      	movs	r3, #27
 8005e20:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8005e24:	231c      	movs	r3, #28
 8005e26:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8005e2a:	233e      	movs	r3, #62	; 0x3e
 8005e2c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8005e30:	2319      	movs	r3, #25
 8005e32:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8005e36:	231a      	movs	r3, #26
 8005e38:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8005e3c:	233d      	movs	r3, #61	; 0x3d
 8005e3e:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8005e42:	2318      	movs	r3, #24
 8005e44:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8005e48:	231d      	movs	r3, #29
 8005e4a:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8005e4e:	2321      	movs	r3, #33	; 0x21
 8005e50:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8005e54:	2317      	movs	r3, #23
 8005e56:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8005e5a:	231e      	movs	r3, #30
 8005e5c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8005e60:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005e64:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005e68:	2304      	movs	r3, #4
 8005e6a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005e6e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fa fea7 	bl	8000bc6 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8005e78:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8005e7c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	4613      	mov	r3, r2
 8005e84:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8005e88:	ca06      	ldmia	r2, {r1, r2}
 8005e8a:	481c      	ldr	r0, [pc, #112]	; (8005efc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8005e8c:	f7fa feb3 	bl	8000bf6 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8005e90:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fa fea2 	bl	8000bde <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8005e9a:	1d3b      	adds	r3, r7, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10e      	bne.n	8005ec0 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8005ea2:	463b      	mov	r3, r7
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d108      	bne.n	8005ec0 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8005eae:	4813      	ldr	r0, [pc, #76]	; (8005efc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8005eb0:	f7fe fa0a 	bl	80042c8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8005eb4:	4810      	ldr	r0, [pc, #64]	; (8005ef8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8005eb6:	f7fe fa14 	bl	80042e2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8005eba:	4804      	ldr	r0, [pc, #16]	; (8005ecc <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8005ebc:	f7fe fa1e 	bl	80042fc <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8005ec0:	bf00      	nop
 8005ec2:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd90      	pop	{r4, r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	200001ac 	.word	0x200001ac
 8005ed0:	0800b7ec 	.word	0x0800b7ec
 8005ed4:	0800b7f4 	.word	0x0800b7f4
 8005ed8:	0800b7fc 	.word	0x0800b7fc
 8005edc:	0800b804 	.word	0x0800b804
 8005ee0:	0800b80c 	.word	0x0800b80c
 8005ee4:	0800b814 	.word	0x0800b814
 8005ee8:	0800b818 	.word	0x0800b818
 8005eec:	0800b820 	.word	0x0800b820
 8005ef0:	0800b828 	.word	0x0800b828
 8005ef4:	0800b830 	.word	0x0800b830
 8005ef8:	200001c4 	.word	0x200001c4
 8005efc:	200001dc 	.word	0x200001dc

08005f00 <_GLOBAL__sub_I__ZN5LexerC2EP6Source>:
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f08:	2001      	movs	r0, #1
 8005f0a:	f7ff fe1d 	bl	8005b48 <_Z41__static_initialization_and_destruction_0ii>
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <_GLOBAL__sub_D__ZN5LexerC2EP6Source>:
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f18:	2000      	movs	r0, #0
 8005f1a:	f7ff fe15 	bl	8005b48 <_Z41__static_initialization_and_destruction_0ii>
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <_ZN6ParserC1EP5LexerP11Transmitter>:
#include "Parser.h"

Parser::Parser(Lexer *Lex, Transmitter *Trans)
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fd3e 	bl	80059b2 <_ZN5TokenC1Ev>
{
	this->Lex = Lex;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	601a      	str	r2, [r3, #0]
	this->Trans = Trans;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	605a      	str	r2, [r3, #4]
}
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 f83f 	bl	8005fda <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implC1Ev>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <_ZNSt6vectorIP10ExpressionSaIS1_EEC1Ev>:
      vector() = default;
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff ffeb 	bl	8005f4c <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EEC1Ev>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <_ZN13Function_callC1Ev>:
	variable_type type;
	std::string id;
	Expression* index;
};

class Function_call
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f004 ffe3 	bl	800af56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3318      	adds	r3, #24
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff ffe6 	bl	8005f66 <_ZNSt6vectorIP10ExpressionSaIS1_EEC1Ev>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1Ev>:
      variant() = default;
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 f86e 	bl	8006090 <_ZNSt8__detail9__variant13_Variant_baseIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1Ev>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <_ZN9StatementC1Ev>:
	STATEMENT_IF
}statement_type;

typedef std::variant<Assignment*, Function_call*, Method_call*, While_statement*, If_statement*> statement_content;

class Statement
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff ffea 	bl	8005fa4 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1Ev>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f861 	bl	80060aa <_ZNSaIP10ExpressionEC1Ev>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fc fe90 	bl	8002d10 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	7039      	strb	r1, [r7, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4611      	mov	r1, r2
 8006008:	4618      	mov	r0, r3
 800600a:	f000 f878 	bl	80060fe <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	7039      	strb	r1, [r7, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff ffe7 	bl	8005ffa <_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <_ZNSt8__detail9__variant17_Copy_assign_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	7039      	strb	r1, [r7, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4611      	mov	r1, r2
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff ffe7 	bl	8006018 <_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <_ZNSt8__detail9__variant17_Move_assign_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	7039      	strb	r1, [r7, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4611      	mov	r1, r2
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff ffe7 	bl	8006036 <_ZNSt8__detail9__variant17_Copy_assign_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <_ZNSt8__detail9__variant13_Variant_baseIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	7039      	strb	r1, [r7, #0]
	: _Base(__i, std::forward<_Args>(__args)...)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4611      	mov	r1, r2
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff ffe7 	bl	8006054 <_ZNSt8__detail9__variant17_Move_assign_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <_ZNSt8__detail9__variant13_Variant_baseIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1Ev>:
      _Variant_base()
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
      : _Variant_base(in_place_index<0>) { }
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff ffe9 	bl	8006072 <_ZNSt8__detail9__variant13_Variant_baseIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <_ZNSaIP10ExpressionEC1Ev>:
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f835 	bl	8006122 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionEC1Ev>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <_ZNSt8__detail9__variant14_UninitializedIP10AssignmentLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	7039      	strb	r1, [r7, #0]
	: _M_storage(std::forward<_Args>(__args)...)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
	{ }
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4618      	mov	r0, r3
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <_ZNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	7039      	strb	r1, [r7, #0]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4611      	mov	r1, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff ffe7 	bl	80060c2 <_ZNSt8__detail9__variant14_UninitializedIP10AssignmentLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	7039      	strb	r1, [r7, #0]
	_M_index(_Np)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4611      	mov	r1, r2
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff ffe7 	bl	80060e0 <_ZNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1IJEEESt16in_place_index_tILj0EEDpOT_>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	711a      	strb	r2, [r3, #4]
	{ }
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE8_M_resetEv>:
      void _M_reset()
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
      { _M_index = variant_npos; }
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	22ff      	movs	r2, #255	; 0xff
 8006144:	711a      	strb	r2, [r3, #4]
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <_ZSt9addressofIP13Function_callEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fe fad3 	bl	8004706 <_ZSt11__addressofIP13Function_callEPT_RS2_>
 8006160:	4603      	mov	r3, r0
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8006172:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006176:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f824 	bl	80061c6 <_ZNSt16allocator_traitsISaIP10ExpressionEE8max_sizeERKS2_>
 800617e:	4603      	mov	r3, r0
 8006180:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006182:	f107 0208 	add.w	r2, r7, #8
 8006186:	f107 030c 	add.w	r3, r7, #12
 800618a:	4611      	mov	r1, r2
 800618c:	4618      	mov	r0, r3
 800618e:	f000 f806 	bl	800619e <_ZSt3minIjERKT_S2_S2_>
 8006192:	4603      	mov	r3, r0
 8006194:	681b      	ldr	r3, [r3, #0]
      }
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d201      	bcs.n	80061b8 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	e000      	b.n	80061ba <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80061b8:	687b      	ldr	r3, [r7, #4]
    }
 80061ba:	4618      	mov	r0, r3
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <_ZNSt16allocator_traitsISaIP10ExpressionEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fd fe57 	bl	8003e82 <_ZNK9__gnu_cxx13new_allocatorIP10ExpressionE8max_sizeEv>
 80061d4:	4603      	mov	r3, r0
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <_Z41__static_initialization_and_destruction_0ii>:
	parse_setup(Prog);
	parse_loop(Prog);
	parse_finish(Prog);
	assert_token(TOKEN_END_OF_FILE, "end of file");
	return Prog;
}
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b0e7      	sub	sp, #412	; 0x19c
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	1d3b      	adds	r3, r7, #4
 80061e8:	6018      	str	r0, [r3, #0]
 80061ea:	463b      	mov	r3, r7
 80061ec:	6019      	str	r1, [r3, #0]
 80061ee:	1d3b      	adds	r3, r7, #4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	f040 819d 	bne.w	8006532 <_Z41__static_initialization_and_destruction_0ii+0x352>
 80061f8:	463b      	mov	r3, r7
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006200:	4293      	cmp	r3, r2
 8006202:	f040 8196 	bne.w	8006532 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8006206:	f107 0314 	add.w	r3, r7, #20
 800620a:	4618      	mov	r0, r3
 800620c:	2322      	movs	r3, #34	; 0x22
 800620e:	461a      	mov	r2, r3
 8006210:	2100      	movs	r1, #0
 8006212:	f005 f853 	bl	800b2bc <memset>
 8006216:	f107 0314 	add.w	r3, r7, #20
 800621a:	223a      	movs	r2, #58	; 0x3a
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	f107 0314 	add.w	r3, r7, #20
 8006222:	2201      	movs	r2, #1
 8006224:	705a      	strb	r2, [r3, #1]
 8006226:	f107 0314 	add.w	r3, r7, #20
 800622a:	220a      	movs	r2, #10
 800622c:	709a      	strb	r2, [r3, #2]
 800622e:	f107 0314 	add.w	r3, r7, #20
 8006232:	220a      	movs	r2, #10
 8006234:	70da      	strb	r2, [r3, #3]
 8006236:	f107 0314 	add.w	r3, r7, #20
 800623a:	222c      	movs	r2, #44	; 0x2c
 800623c:	711a      	strb	r2, [r3, #4]
 800623e:	f107 0314 	add.w	r3, r7, #20
 8006242:	220c      	movs	r2, #12
 8006244:	715a      	strb	r2, [r3, #5]
 8006246:	f107 0314 	add.w	r3, r7, #20
 800624a:	222e      	movs	r2, #46	; 0x2e
 800624c:	719a      	strb	r2, [r3, #6]
 800624e:	f107 0314 	add.w	r3, r7, #20
 8006252:	220b      	movs	r2, #11
 8006254:	71da      	strb	r2, [r3, #7]
 8006256:	f107 0314 	add.w	r3, r7, #20
 800625a:	225b      	movs	r2, #91	; 0x5b
 800625c:	721a      	strb	r2, [r3, #8]
 800625e:	f107 0314 	add.w	r3, r7, #20
 8006262:	220d      	movs	r2, #13
 8006264:	725a      	strb	r2, [r3, #9]
 8006266:	f107 0314 	add.w	r3, r7, #20
 800626a:	225d      	movs	r2, #93	; 0x5d
 800626c:	729a      	strb	r2, [r3, #10]
 800626e:	f107 0314 	add.w	r3, r7, #20
 8006272:	220e      	movs	r2, #14
 8006274:	72da      	strb	r2, [r3, #11]
 8006276:	f107 0314 	add.w	r3, r7, #20
 800627a:	227c      	movs	r2, #124	; 0x7c
 800627c:	731a      	strb	r2, [r3, #12]
 800627e:	f107 0314 	add.w	r3, r7, #20
 8006282:	2215      	movs	r2, #21
 8006284:	735a      	strb	r2, [r3, #13]
 8006286:	f107 0314 	add.w	r3, r7, #20
 800628a:	2226      	movs	r2, #38	; 0x26
 800628c:	739a      	strb	r2, [r3, #14]
 800628e:	f107 0314 	add.w	r3, r7, #20
 8006292:	2216      	movs	r2, #22
 8006294:	73da      	strb	r2, [r3, #15]
 8006296:	f107 0314 	add.w	r3, r7, #20
 800629a:	222b      	movs	r2, #43	; 0x2b
 800629c:	741a      	strb	r2, [r3, #16]
 800629e:	f107 0314 	add.w	r3, r7, #20
 80062a2:	221f      	movs	r2, #31
 80062a4:	745a      	strb	r2, [r3, #17]
 80062a6:	f107 0314 	add.w	r3, r7, #20
 80062aa:	222d      	movs	r2, #45	; 0x2d
 80062ac:	749a      	strb	r2, [r3, #18]
 80062ae:	f107 0314 	add.w	r3, r7, #20
 80062b2:	2220      	movs	r2, #32
 80062b4:	74da      	strb	r2, [r3, #19]
 80062b6:	f107 0314 	add.w	r3, r7, #20
 80062ba:	222a      	movs	r2, #42	; 0x2a
 80062bc:	751a      	strb	r2, [r3, #20]
 80062be:	f107 0314 	add.w	r3, r7, #20
 80062c2:	2221      	movs	r2, #33	; 0x21
 80062c4:	755a      	strb	r2, [r3, #21]
 80062c6:	f107 0314 	add.w	r3, r7, #20
 80062ca:	222f      	movs	r2, #47	; 0x2f
 80062cc:	759a      	strb	r2, [r3, #22]
 80062ce:	f107 0314 	add.w	r3, r7, #20
 80062d2:	2222      	movs	r2, #34	; 0x22
 80062d4:	75da      	strb	r2, [r3, #23]
 80062d6:	f107 0314 	add.w	r3, r7, #20
 80062da:	225e      	movs	r2, #94	; 0x5e
 80062dc:	761a      	strb	r2, [r3, #24]
 80062de:	f107 0314 	add.w	r3, r7, #20
 80062e2:	2223      	movs	r2, #35	; 0x23
 80062e4:	765a      	strb	r2, [r3, #25]
 80062e6:	f107 0314 	add.w	r3, r7, #20
 80062ea:	2225      	movs	r2, #37	; 0x25
 80062ec:	769a      	strb	r2, [r3, #26]
 80062ee:	f107 0314 	add.w	r3, r7, #20
 80062f2:	2224      	movs	r2, #36	; 0x24
 80062f4:	76da      	strb	r2, [r3, #27]
 80062f6:	f107 0314 	add.w	r3, r7, #20
 80062fa:	2228      	movs	r2, #40	; 0x28
 80062fc:	771a      	strb	r2, [r3, #28]
 80062fe:	f107 0314 	add.w	r3, r7, #20
 8006302:	2226      	movs	r2, #38	; 0x26
 8006304:	775a      	strb	r2, [r3, #29]
 8006306:	f107 0314 	add.w	r3, r7, #20
 800630a:	2229      	movs	r2, #41	; 0x29
 800630c:	779a      	strb	r2, [r3, #30]
 800630e:	f107 0314 	add.w	r3, r7, #20
 8006312:	2227      	movs	r2, #39	; 0x27
 8006314:	77da      	strb	r2, [r3, #31]
 8006316:	f107 0314 	add.w	r3, r7, #20
 800631a:	2225      	movs	r2, #37	; 0x25
 800631c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006320:	f107 030c 	add.w	r3, r7, #12
 8006324:	f107 0214 	add.w	r2, r7, #20
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	f107 030c 	add.w	r3, r7, #12
 800632e:	2211      	movs	r2, #17
 8006330:	605a      	str	r2, [r3, #4]
 8006332:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006336:	4618      	mov	r0, r3
 8006338:	f7fa fb58 	bl	80009ec <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 800633c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006340:	f107 020c 	add.w	r2, r7, #12
 8006344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	460b      	mov	r3, r1
 800634c:	ca06      	ldmia	r2, {r1, r2}
 800634e:	4885      	ldr	r0, [pc, #532]	; (8006564 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006350:	f7fa fb64 	bl	8000a1c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8006354:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006358:	4618      	mov	r0, r3
 800635a:	f7fa fb53 	bl	8000a04 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 800635e:	2305      	movs	r3, #5
 8006360:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8006364:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8006368:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800636c:	497e      	ldr	r1, [pc, #504]	; (8006568 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800636e:	4618      	mov	r0, r3
 8006370:	f7fa f934 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8006374:	2306      	movs	r3, #6
 8006376:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 800637a:	f207 1263 	addw	r2, r7, #355	; 0x163
 800637e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006382:	331c      	adds	r3, #28
 8006384:	4979      	ldr	r1, [pc, #484]	; (800656c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8006386:	4618      	mov	r0, r3
 8006388:	f7fa f950 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 800638c:	2307      	movs	r3, #7
 800638e:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8006392:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8006396:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800639a:	3338      	adds	r3, #56	; 0x38
 800639c:	4974      	ldr	r1, [pc, #464]	; (8006570 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fa f944 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80063a4:	2308      	movs	r3, #8
 80063a6:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80063aa:	f207 1265 	addw	r2, r7, #357	; 0x165
 80063ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80063b2:	3354      	adds	r3, #84	; 0x54
 80063b4:	496f      	ldr	r1, [pc, #444]	; (8006574 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fa f910 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 80063bc:	2309      	movs	r3, #9
 80063be:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 80063c2:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 80063c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80063ca:	3370      	adds	r3, #112	; 0x70
 80063cc:	496a      	ldr	r1, [pc, #424]	; (8006578 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fa f954 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 80063d4:	2310      	movs	r3, #16
 80063d6:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 80063da:	f207 1267 	addw	r2, r7, #359	; 0x167
 80063de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80063e2:	338c      	adds	r3, #140	; 0x8c
 80063e4:	4965      	ldr	r1, [pc, #404]	; (800657c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fa f970 	bl	80006cc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 80063ec:	2311      	movs	r3, #17
 80063ee:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 80063f2:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80063f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80063fa:	33a8      	adds	r3, #168	; 0xa8
 80063fc:	4960      	ldr	r1, [pc, #384]	; (8006580 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fa f93c 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8006404:	2312      	movs	r3, #18
 8006406:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 800640a:	f207 1269 	addw	r2, r7, #361	; 0x169
 800640e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006412:	33c4      	adds	r3, #196	; 0xc4
 8006414:	495b      	ldr	r1, [pc, #364]	; (8006584 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8006416:	4618      	mov	r0, r3
 8006418:	f7fa f8e0 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 800641c:	2313      	movs	r3, #19
 800641e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8006422:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8006426:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800642a:	33e0      	adds	r3, #224	; 0xe0
 800642c:	4956      	ldr	r1, [pc, #344]	; (8006588 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800642e:	4618      	mov	r0, r3
 8006430:	f7fa f8fc 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8006434:	2314      	movs	r3, #20
 8006436:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 800643a:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800643e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006442:	33fc      	adds	r3, #252	; 0xfc
 8006444:	4951      	ldr	r1, [pc, #324]	; (800658c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8006446:	4618      	mov	r0, r3
 8006448:	f7fa f968 	bl	800071c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 800644c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006450:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800645a:	220a      	movs	r2, #10
 800645c:	605a      	str	r2, [r3, #4]
 800645e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006462:	4618      	mov	r0, r3
 8006464:	f7fa fb67 	bl	8000b36 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8006468:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800646c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006470:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	460b      	mov	r3, r1
 8006478:	ca06      	ldmia	r2, {r1, r2}
 800647a:	4845      	ldr	r0, [pc, #276]	; (8006590 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800647c:	f7fa fb73 	bl	8000b66 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8006480:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006484:	4618      	mov	r0, r3
 8006486:	f7fa fb62 	bl	8000b4e <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800648a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800648e:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8006492:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006496:	429c      	cmp	r4, r3
 8006498:	d004      	beq.n	80064a4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 800649a:	3c1c      	subs	r4, #28
 800649c:	4620      	mov	r0, r4
 800649e:	f7fa f890 	bl	80005c2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80064a2:	e7f6      	b.n	8006492 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80064a4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	609a      	str	r2, [r3, #8]
 80064b0:	233c      	movs	r3, #60	; 0x3c
 80064b2:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80064b6:	231b      	movs	r3, #27
 80064b8:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80064bc:	231c      	movs	r3, #28
 80064be:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80064c2:	233e      	movs	r3, #62	; 0x3e
 80064c4:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80064c8:	2319      	movs	r3, #25
 80064ca:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 80064ce:	231a      	movs	r3, #26
 80064d0:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 80064d4:	233d      	movs	r3, #61	; 0x3d
 80064d6:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 80064da:	2318      	movs	r3, #24
 80064dc:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 80064e0:	231d      	movs	r3, #29
 80064e2:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80064e6:	2321      	movs	r3, #33	; 0x21
 80064e8:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80064ec:	2317      	movs	r3, #23
 80064ee:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80064f2:	231e      	movs	r3, #30
 80064f4:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80064f8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80064fc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006500:	2304      	movs	r3, #4
 8006502:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8006506:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800650a:	4618      	mov	r0, r3
 800650c:	f7fa fb5b 	bl	8000bc6 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8006510:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8006514:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	4613      	mov	r3, r2
 800651c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8006520:	ca06      	ldmia	r2, {r1, r2}
 8006522:	481c      	ldr	r0, [pc, #112]	; (8006594 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8006524:	f7fa fb67 	bl	8000bf6 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8006528:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800652c:	4618      	mov	r0, r3
 800652e:	f7fa fb56 	bl	8000bde <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8006532:	1d3b      	adds	r3, r7, #4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10e      	bne.n	8006558 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800653a:	463b      	mov	r3, r7
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006542:	4293      	cmp	r3, r2
 8006544:	d108      	bne.n	8006558 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8006546:	4813      	ldr	r0, [pc, #76]	; (8006594 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8006548:	f7fd febe 	bl	80042c8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 800654c:	4810      	ldr	r0, [pc, #64]	; (8006590 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800654e:	f7fd fec8 	bl	80042e2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8006552:	4804      	ldr	r0, [pc, #16]	; (8006564 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006554:	f7fd fed2 	bl	80042fc <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8006558:	bf00      	nop
 800655a:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800655e:	46bd      	mov	sp, r7
 8006560:	bd90      	pop	{r4, r7, pc}
 8006562:	bf00      	nop
 8006564:	200001f4 	.word	0x200001f4
 8006568:	0800ba20 	.word	0x0800ba20
 800656c:	0800ba28 	.word	0x0800ba28
 8006570:	0800ba30 	.word	0x0800ba30
 8006574:	0800ba38 	.word	0x0800ba38
 8006578:	0800ba40 	.word	0x0800ba40
 800657c:	0800ba48 	.word	0x0800ba48
 8006580:	0800ba4c 	.word	0x0800ba4c
 8006584:	0800ba54 	.word	0x0800ba54
 8006588:	0800ba5c 	.word	0x0800ba5c
 800658c:	0800ba64 	.word	0x0800ba64
 8006590:	2000020c 	.word	0x2000020c
 8006594:	20000224 	.word	0x20000224

08006598 <_GLOBAL__sub_I__ZN6ParserC2EP5LexerP11Transmitter>:
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
 800659c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80065a0:	2001      	movs	r0, #1
 80065a2:	f7ff fe1d 	bl	80061e0 <_Z41__static_initialization_and_destruction_0ii>
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <_GLOBAL__sub_D__ZN6ParserC2EP5LexerP11Transmitter>:
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80065b0:	2000      	movs	r0, #0
 80065b2:	f7ff fe15 	bl	80061e0 <_Z41__static_initialization_and_destruction_0ii>
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <_ZN6SourceC1EP20__UART_HandleTypeDef>:

#ifdef TESTS
static std::ifstream indata{};
#endif

Source::Source(UART_HandleTypeDef* huart)
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
 80065c2:	4a09      	ldr	r2, [pc, #36]	; (80065e8 <_ZN6SourceC1EP20__UART_HandleTypeDef+0x30>)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	601a      	str	r2, [r3, #0]
{
	line = 1;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	605a      	str	r2, [r3, #4]
	position = 0;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	609a      	str	r2, [r3, #8]
	this->huart = huart;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	60da      	str	r2, [r3, #12]
#ifdef TESTS
    indata.open("code.txt");
#endif
}
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	0800bdc0 	.word	0x0800bdc0

080065ec <_ZN6SourceD1Ev>:

Source::~Source()
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	4a04      	ldr	r2, [pc, #16]	; (8006608 <_ZN6SourceD1Ev+0x1c>)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	601a      	str	r2, [r3, #0]
{
#ifdef TESTS
    indata.close();
#endif
}
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	0800bdc0 	.word	0x0800bdc0

0800660c <_ZN6SourceD0Ev>:
Source::~Source()
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
}
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7ff ffe9 	bl	80065ec <_ZN6SourceD1Ev>
 800661a:	2110      	movs	r1, #16
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f004 fb2e 	bl	800ac7e <_ZdlPvj>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <_Z41__static_initialization_and_destruction_0ii>:
}

Variable::~Variable()
{
	delete index;
}
 800662c:	b590      	push	{r4, r7, lr}
 800662e:	b0e7      	sub	sp, #412	; 0x19c
 8006630:	af02      	add	r7, sp, #8
 8006632:	1d3b      	adds	r3, r7, #4
 8006634:	6018      	str	r0, [r3, #0]
 8006636:	463b      	mov	r3, r7
 8006638:	6019      	str	r1, [r3, #0]
 800663a:	1d3b      	adds	r3, r7, #4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b01      	cmp	r3, #1
 8006640:	f040 819d 	bne.w	800697e <_Z41__static_initialization_and_destruction_0ii+0x352>
 8006644:	463b      	mov	r3, r7
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800664c:	4293      	cmp	r3, r2
 800664e:	f040 8196 	bne.w	800697e <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8006652:	f107 0314 	add.w	r3, r7, #20
 8006656:	4618      	mov	r0, r3
 8006658:	2322      	movs	r3, #34	; 0x22
 800665a:	461a      	mov	r2, r3
 800665c:	2100      	movs	r1, #0
 800665e:	f004 fe2d 	bl	800b2bc <memset>
 8006662:	f107 0314 	add.w	r3, r7, #20
 8006666:	223a      	movs	r2, #58	; 0x3a
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	f107 0314 	add.w	r3, r7, #20
 800666e:	2201      	movs	r2, #1
 8006670:	705a      	strb	r2, [r3, #1]
 8006672:	f107 0314 	add.w	r3, r7, #20
 8006676:	220a      	movs	r2, #10
 8006678:	709a      	strb	r2, [r3, #2]
 800667a:	f107 0314 	add.w	r3, r7, #20
 800667e:	220a      	movs	r2, #10
 8006680:	70da      	strb	r2, [r3, #3]
 8006682:	f107 0314 	add.w	r3, r7, #20
 8006686:	222c      	movs	r2, #44	; 0x2c
 8006688:	711a      	strb	r2, [r3, #4]
 800668a:	f107 0314 	add.w	r3, r7, #20
 800668e:	220c      	movs	r2, #12
 8006690:	715a      	strb	r2, [r3, #5]
 8006692:	f107 0314 	add.w	r3, r7, #20
 8006696:	222e      	movs	r2, #46	; 0x2e
 8006698:	719a      	strb	r2, [r3, #6]
 800669a:	f107 0314 	add.w	r3, r7, #20
 800669e:	220b      	movs	r2, #11
 80066a0:	71da      	strb	r2, [r3, #7]
 80066a2:	f107 0314 	add.w	r3, r7, #20
 80066a6:	225b      	movs	r2, #91	; 0x5b
 80066a8:	721a      	strb	r2, [r3, #8]
 80066aa:	f107 0314 	add.w	r3, r7, #20
 80066ae:	220d      	movs	r2, #13
 80066b0:	725a      	strb	r2, [r3, #9]
 80066b2:	f107 0314 	add.w	r3, r7, #20
 80066b6:	225d      	movs	r2, #93	; 0x5d
 80066b8:	729a      	strb	r2, [r3, #10]
 80066ba:	f107 0314 	add.w	r3, r7, #20
 80066be:	220e      	movs	r2, #14
 80066c0:	72da      	strb	r2, [r3, #11]
 80066c2:	f107 0314 	add.w	r3, r7, #20
 80066c6:	227c      	movs	r2, #124	; 0x7c
 80066c8:	731a      	strb	r2, [r3, #12]
 80066ca:	f107 0314 	add.w	r3, r7, #20
 80066ce:	2215      	movs	r2, #21
 80066d0:	735a      	strb	r2, [r3, #13]
 80066d2:	f107 0314 	add.w	r3, r7, #20
 80066d6:	2226      	movs	r2, #38	; 0x26
 80066d8:	739a      	strb	r2, [r3, #14]
 80066da:	f107 0314 	add.w	r3, r7, #20
 80066de:	2216      	movs	r2, #22
 80066e0:	73da      	strb	r2, [r3, #15]
 80066e2:	f107 0314 	add.w	r3, r7, #20
 80066e6:	222b      	movs	r2, #43	; 0x2b
 80066e8:	741a      	strb	r2, [r3, #16]
 80066ea:	f107 0314 	add.w	r3, r7, #20
 80066ee:	221f      	movs	r2, #31
 80066f0:	745a      	strb	r2, [r3, #17]
 80066f2:	f107 0314 	add.w	r3, r7, #20
 80066f6:	222d      	movs	r2, #45	; 0x2d
 80066f8:	749a      	strb	r2, [r3, #18]
 80066fa:	f107 0314 	add.w	r3, r7, #20
 80066fe:	2220      	movs	r2, #32
 8006700:	74da      	strb	r2, [r3, #19]
 8006702:	f107 0314 	add.w	r3, r7, #20
 8006706:	222a      	movs	r2, #42	; 0x2a
 8006708:	751a      	strb	r2, [r3, #20]
 800670a:	f107 0314 	add.w	r3, r7, #20
 800670e:	2221      	movs	r2, #33	; 0x21
 8006710:	755a      	strb	r2, [r3, #21]
 8006712:	f107 0314 	add.w	r3, r7, #20
 8006716:	222f      	movs	r2, #47	; 0x2f
 8006718:	759a      	strb	r2, [r3, #22]
 800671a:	f107 0314 	add.w	r3, r7, #20
 800671e:	2222      	movs	r2, #34	; 0x22
 8006720:	75da      	strb	r2, [r3, #23]
 8006722:	f107 0314 	add.w	r3, r7, #20
 8006726:	225e      	movs	r2, #94	; 0x5e
 8006728:	761a      	strb	r2, [r3, #24]
 800672a:	f107 0314 	add.w	r3, r7, #20
 800672e:	2223      	movs	r2, #35	; 0x23
 8006730:	765a      	strb	r2, [r3, #25]
 8006732:	f107 0314 	add.w	r3, r7, #20
 8006736:	2225      	movs	r2, #37	; 0x25
 8006738:	769a      	strb	r2, [r3, #26]
 800673a:	f107 0314 	add.w	r3, r7, #20
 800673e:	2224      	movs	r2, #36	; 0x24
 8006740:	76da      	strb	r2, [r3, #27]
 8006742:	f107 0314 	add.w	r3, r7, #20
 8006746:	2228      	movs	r2, #40	; 0x28
 8006748:	771a      	strb	r2, [r3, #28]
 800674a:	f107 0314 	add.w	r3, r7, #20
 800674e:	2226      	movs	r2, #38	; 0x26
 8006750:	775a      	strb	r2, [r3, #29]
 8006752:	f107 0314 	add.w	r3, r7, #20
 8006756:	2229      	movs	r2, #41	; 0x29
 8006758:	779a      	strb	r2, [r3, #30]
 800675a:	f107 0314 	add.w	r3, r7, #20
 800675e:	2227      	movs	r2, #39	; 0x27
 8006760:	77da      	strb	r2, [r3, #31]
 8006762:	f107 0314 	add.w	r3, r7, #20
 8006766:	2225      	movs	r2, #37	; 0x25
 8006768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800676c:	f107 030c 	add.w	r3, r7, #12
 8006770:	f107 0214 	add.w	r2, r7, #20
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	f107 030c 	add.w	r3, r7, #12
 800677a:	2211      	movs	r2, #17
 800677c:	605a      	str	r2, [r3, #4]
 800677e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006782:	4618      	mov	r0, r3
 8006784:	f7fa f932 	bl	80009ec <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8006788:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800678c:	f107 020c 	add.w	r2, r7, #12
 8006790:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	460b      	mov	r3, r1
 8006798:	ca06      	ldmia	r2, {r1, r2}
 800679a:	4885      	ldr	r0, [pc, #532]	; (80069b0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800679c:	f7fa f93e 	bl	8000a1c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80067a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fa f92d 	bl	8000a04 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 80067aa:	2305      	movs	r3, #5
 80067ac:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80067b0:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80067b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80067b8:	497e      	ldr	r1, [pc, #504]	; (80069b4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7f9 ff0e 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80067c0:	2306      	movs	r3, #6
 80067c2:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80067c6:	f207 1263 	addw	r2, r7, #355	; 0x163
 80067ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80067ce:	331c      	adds	r3, #28
 80067d0:	4979      	ldr	r1, [pc, #484]	; (80069b8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7f9 ff2a 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80067d8:	2307      	movs	r3, #7
 80067da:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80067de:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80067e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80067e6:	3338      	adds	r3, #56	; 0x38
 80067e8:	4974      	ldr	r1, [pc, #464]	; (80069bc <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7f9 ff1e 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80067f6:	f207 1265 	addw	r2, r7, #357	; 0x165
 80067fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80067fe:	3354      	adds	r3, #84	; 0x54
 8006800:	496f      	ldr	r1, [pc, #444]	; (80069c0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8006802:	4618      	mov	r0, r3
 8006804:	f7f9 feea 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8006808:	2309      	movs	r3, #9
 800680a:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800680e:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8006812:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006816:	3370      	adds	r3, #112	; 0x70
 8006818:	496a      	ldr	r1, [pc, #424]	; (80069c4 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800681a:	4618      	mov	r0, r3
 800681c:	f7f9 ff2e 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8006820:	2310      	movs	r3, #16
 8006822:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8006826:	f207 1267 	addw	r2, r7, #359	; 0x167
 800682a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800682e:	338c      	adds	r3, #140	; 0x8c
 8006830:	4965      	ldr	r1, [pc, #404]	; (80069c8 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8006832:	4618      	mov	r0, r3
 8006834:	f7f9 ff4a 	bl	80006cc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8006838:	2311      	movs	r3, #17
 800683a:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800683e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8006842:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006846:	33a8      	adds	r3, #168	; 0xa8
 8006848:	4960      	ldr	r1, [pc, #384]	; (80069cc <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800684a:	4618      	mov	r0, r3
 800684c:	f7f9 ff16 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8006850:	2312      	movs	r3, #18
 8006852:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8006856:	f207 1269 	addw	r2, r7, #361	; 0x169
 800685a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800685e:	33c4      	adds	r3, #196	; 0xc4
 8006860:	495b      	ldr	r1, [pc, #364]	; (80069d0 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8006862:	4618      	mov	r0, r3
 8006864:	f7f9 feba 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8006868:	2313      	movs	r3, #19
 800686a:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800686e:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8006872:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006876:	33e0      	adds	r3, #224	; 0xe0
 8006878:	4956      	ldr	r1, [pc, #344]	; (80069d4 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800687a:	4618      	mov	r0, r3
 800687c:	f7f9 fed6 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8006880:	2314      	movs	r3, #20
 8006882:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8006886:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800688a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800688e:	33fc      	adds	r3, #252	; 0xfc
 8006890:	4951      	ldr	r1, [pc, #324]	; (80069d8 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8006892:	4618      	mov	r0, r3
 8006894:	f7f9 ff42 	bl	800071c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8006898:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800689c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80068a6:	220a      	movs	r2, #10
 80068a8:	605a      	str	r2, [r3, #4]
 80068aa:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fa f941 	bl	8000b36 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80068b4:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80068b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80068bc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	460b      	mov	r3, r1
 80068c4:	ca06      	ldmia	r2, {r1, r2}
 80068c6:	4845      	ldr	r0, [pc, #276]	; (80069dc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80068c8:	f7fa f94d 	bl	8000b66 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80068cc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fa f93c 	bl	8000b4e <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80068d6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80068da:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80068de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80068e2:	429c      	cmp	r4, r3
 80068e4:	d004      	beq.n	80068f0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 80068e6:	3c1c      	subs	r4, #28
 80068e8:	4620      	mov	r0, r4
 80068ea:	f7f9 fe6a 	bl	80005c2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80068ee:	e7f6      	b.n	80068de <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80068f0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	605a      	str	r2, [r3, #4]
 80068fa:	609a      	str	r2, [r3, #8]
 80068fc:	233c      	movs	r3, #60	; 0x3c
 80068fe:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8006902:	231b      	movs	r3, #27
 8006904:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8006908:	231c      	movs	r3, #28
 800690a:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800690e:	233e      	movs	r3, #62	; 0x3e
 8006910:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8006914:	2319      	movs	r3, #25
 8006916:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800691a:	231a      	movs	r3, #26
 800691c:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8006920:	233d      	movs	r3, #61	; 0x3d
 8006922:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8006926:	2318      	movs	r3, #24
 8006928:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 800692c:	231d      	movs	r3, #29
 800692e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8006932:	2321      	movs	r3, #33	; 0x21
 8006934:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8006938:	2317      	movs	r3, #23
 800693a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800693e:	231e      	movs	r3, #30
 8006940:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8006944:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8006948:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800694c:	2304      	movs	r3, #4
 800694e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8006952:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006956:	4618      	mov	r0, r3
 8006958:	f7fa f935 	bl	8000bc6 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 800695c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8006960:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	4613      	mov	r3, r2
 8006968:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 800696c:	ca06      	ldmia	r2, {r1, r2}
 800696e:	481c      	ldr	r0, [pc, #112]	; (80069e0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8006970:	f7fa f941 	bl	8000bf6 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8006974:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006978:	4618      	mov	r0, r3
 800697a:	f7fa f930 	bl	8000bde <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 800697e:	1d3b      	adds	r3, r7, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10e      	bne.n	80069a4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8006986:	463b      	mov	r3, r7
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800698e:	4293      	cmp	r3, r2
 8006990:	d108      	bne.n	80069a4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8006992:	4813      	ldr	r0, [pc, #76]	; (80069e0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8006994:	f7fd fc98 	bl	80042c8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8006998:	4810      	ldr	r0, [pc, #64]	; (80069dc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800699a:	f7fd fca2 	bl	80042e2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800699e:	4804      	ldr	r0, [pc, #16]	; (80069b0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80069a0:	f7fd fcac 	bl	80042fc <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80069a4:	bf00      	nop
 80069a6:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd90      	pop	{r4, r7, pc}
 80069ae:	bf00      	nop
 80069b0:	2000023c 	.word	0x2000023c
 80069b4:	0800baa8 	.word	0x0800baa8
 80069b8:	0800bab0 	.word	0x0800bab0
 80069bc:	0800bab8 	.word	0x0800bab8
 80069c0:	0800bac0 	.word	0x0800bac0
 80069c4:	0800bac8 	.word	0x0800bac8
 80069c8:	0800bad0 	.word	0x0800bad0
 80069cc:	0800bad4 	.word	0x0800bad4
 80069d0:	0800badc 	.word	0x0800badc
 80069d4:	0800bae4 	.word	0x0800bae4
 80069d8:	0800baec 	.word	0x0800baec
 80069dc:	20000254 	.word	0x20000254
 80069e0:	2000026c 	.word	0x2000026c

080069e4 <_GLOBAL__sub_I__ZN4BodyD2Ev>:
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80069ec:	2001      	movs	r0, #1
 80069ee:	f7ff fe1d 	bl	800662c <_Z41__static_initialization_and_destruction_0ii>
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <_GLOBAL__sub_D__ZN4BodyD2Ev>:
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80069fc:	2000      	movs	r0, #0
 80069fe:	f7ff fe15 	bl	800662c <_Z41__static_initialization_and_destruction_0ii>
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <_Z41__static_initialization_and_destruction_0ii>:
	return position;
}
void Token::set_position(int position)
{
	this->position = position;
}
 8006a04:	b590      	push	{r4, r7, lr}
 8006a06:	b0e7      	sub	sp, #412	; 0x19c
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	1d3b      	adds	r3, r7, #4
 8006a0c:	6018      	str	r0, [r3, #0]
 8006a0e:	463b      	mov	r3, r7
 8006a10:	6019      	str	r1, [r3, #0]
 8006a12:	1d3b      	adds	r3, r7, #4
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	f040 819d 	bne.w	8006d56 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8006a1c:	463b      	mov	r3, r7
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a24:	4293      	cmp	r3, r2
 8006a26:	f040 8196 	bne.w	8006d56 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8006a2a:	f107 0314 	add.w	r3, r7, #20
 8006a2e:	4618      	mov	r0, r3
 8006a30:	2322      	movs	r3, #34	; 0x22
 8006a32:	461a      	mov	r2, r3
 8006a34:	2100      	movs	r1, #0
 8006a36:	f004 fc41 	bl	800b2bc <memset>
 8006a3a:	f107 0314 	add.w	r3, r7, #20
 8006a3e:	223a      	movs	r2, #58	; 0x3a
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	f107 0314 	add.w	r3, r7, #20
 8006a46:	2201      	movs	r2, #1
 8006a48:	705a      	strb	r2, [r3, #1]
 8006a4a:	f107 0314 	add.w	r3, r7, #20
 8006a4e:	220a      	movs	r2, #10
 8006a50:	709a      	strb	r2, [r3, #2]
 8006a52:	f107 0314 	add.w	r3, r7, #20
 8006a56:	220a      	movs	r2, #10
 8006a58:	70da      	strb	r2, [r3, #3]
 8006a5a:	f107 0314 	add.w	r3, r7, #20
 8006a5e:	222c      	movs	r2, #44	; 0x2c
 8006a60:	711a      	strb	r2, [r3, #4]
 8006a62:	f107 0314 	add.w	r3, r7, #20
 8006a66:	220c      	movs	r2, #12
 8006a68:	715a      	strb	r2, [r3, #5]
 8006a6a:	f107 0314 	add.w	r3, r7, #20
 8006a6e:	222e      	movs	r2, #46	; 0x2e
 8006a70:	719a      	strb	r2, [r3, #6]
 8006a72:	f107 0314 	add.w	r3, r7, #20
 8006a76:	220b      	movs	r2, #11
 8006a78:	71da      	strb	r2, [r3, #7]
 8006a7a:	f107 0314 	add.w	r3, r7, #20
 8006a7e:	225b      	movs	r2, #91	; 0x5b
 8006a80:	721a      	strb	r2, [r3, #8]
 8006a82:	f107 0314 	add.w	r3, r7, #20
 8006a86:	220d      	movs	r2, #13
 8006a88:	725a      	strb	r2, [r3, #9]
 8006a8a:	f107 0314 	add.w	r3, r7, #20
 8006a8e:	225d      	movs	r2, #93	; 0x5d
 8006a90:	729a      	strb	r2, [r3, #10]
 8006a92:	f107 0314 	add.w	r3, r7, #20
 8006a96:	220e      	movs	r2, #14
 8006a98:	72da      	strb	r2, [r3, #11]
 8006a9a:	f107 0314 	add.w	r3, r7, #20
 8006a9e:	227c      	movs	r2, #124	; 0x7c
 8006aa0:	731a      	strb	r2, [r3, #12]
 8006aa2:	f107 0314 	add.w	r3, r7, #20
 8006aa6:	2215      	movs	r2, #21
 8006aa8:	735a      	strb	r2, [r3, #13]
 8006aaa:	f107 0314 	add.w	r3, r7, #20
 8006aae:	2226      	movs	r2, #38	; 0x26
 8006ab0:	739a      	strb	r2, [r3, #14]
 8006ab2:	f107 0314 	add.w	r3, r7, #20
 8006ab6:	2216      	movs	r2, #22
 8006ab8:	73da      	strb	r2, [r3, #15]
 8006aba:	f107 0314 	add.w	r3, r7, #20
 8006abe:	222b      	movs	r2, #43	; 0x2b
 8006ac0:	741a      	strb	r2, [r3, #16]
 8006ac2:	f107 0314 	add.w	r3, r7, #20
 8006ac6:	221f      	movs	r2, #31
 8006ac8:	745a      	strb	r2, [r3, #17]
 8006aca:	f107 0314 	add.w	r3, r7, #20
 8006ace:	222d      	movs	r2, #45	; 0x2d
 8006ad0:	749a      	strb	r2, [r3, #18]
 8006ad2:	f107 0314 	add.w	r3, r7, #20
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	74da      	strb	r2, [r3, #19]
 8006ada:	f107 0314 	add.w	r3, r7, #20
 8006ade:	222a      	movs	r2, #42	; 0x2a
 8006ae0:	751a      	strb	r2, [r3, #20]
 8006ae2:	f107 0314 	add.w	r3, r7, #20
 8006ae6:	2221      	movs	r2, #33	; 0x21
 8006ae8:	755a      	strb	r2, [r3, #21]
 8006aea:	f107 0314 	add.w	r3, r7, #20
 8006aee:	222f      	movs	r2, #47	; 0x2f
 8006af0:	759a      	strb	r2, [r3, #22]
 8006af2:	f107 0314 	add.w	r3, r7, #20
 8006af6:	2222      	movs	r2, #34	; 0x22
 8006af8:	75da      	strb	r2, [r3, #23]
 8006afa:	f107 0314 	add.w	r3, r7, #20
 8006afe:	225e      	movs	r2, #94	; 0x5e
 8006b00:	761a      	strb	r2, [r3, #24]
 8006b02:	f107 0314 	add.w	r3, r7, #20
 8006b06:	2223      	movs	r2, #35	; 0x23
 8006b08:	765a      	strb	r2, [r3, #25]
 8006b0a:	f107 0314 	add.w	r3, r7, #20
 8006b0e:	2225      	movs	r2, #37	; 0x25
 8006b10:	769a      	strb	r2, [r3, #26]
 8006b12:	f107 0314 	add.w	r3, r7, #20
 8006b16:	2224      	movs	r2, #36	; 0x24
 8006b18:	76da      	strb	r2, [r3, #27]
 8006b1a:	f107 0314 	add.w	r3, r7, #20
 8006b1e:	2228      	movs	r2, #40	; 0x28
 8006b20:	771a      	strb	r2, [r3, #28]
 8006b22:	f107 0314 	add.w	r3, r7, #20
 8006b26:	2226      	movs	r2, #38	; 0x26
 8006b28:	775a      	strb	r2, [r3, #29]
 8006b2a:	f107 0314 	add.w	r3, r7, #20
 8006b2e:	2229      	movs	r2, #41	; 0x29
 8006b30:	779a      	strb	r2, [r3, #30]
 8006b32:	f107 0314 	add.w	r3, r7, #20
 8006b36:	2227      	movs	r2, #39	; 0x27
 8006b38:	77da      	strb	r2, [r3, #31]
 8006b3a:	f107 0314 	add.w	r3, r7, #20
 8006b3e:	2225      	movs	r2, #37	; 0x25
 8006b40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006b44:	f107 030c 	add.w	r3, r7, #12
 8006b48:	f107 0214 	add.w	r2, r7, #20
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	f107 030c 	add.w	r3, r7, #12
 8006b52:	2211      	movs	r2, #17
 8006b54:	605a      	str	r2, [r3, #4]
 8006b56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7f9 ff46 	bl	80009ec <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8006b60:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006b64:	f107 020c 	add.w	r2, r7, #12
 8006b68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	ca06      	ldmia	r2, {r1, r2}
 8006b72:	4885      	ldr	r0, [pc, #532]	; (8006d88 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006b74:	f7f9 ff52 	bl	8000a1c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8006b78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7f9 ff41 	bl	8000a04 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8006b82:	2305      	movs	r3, #5
 8006b84:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8006b88:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8006b8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b90:	497e      	ldr	r1, [pc, #504]	; (8006d8c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7f9 fd22 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8006b98:	2306      	movs	r3, #6
 8006b9a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8006b9e:	f207 1263 	addw	r2, r7, #355	; 0x163
 8006ba2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006ba6:	331c      	adds	r3, #28
 8006ba8:	4979      	ldr	r1, [pc, #484]	; (8006d90 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7f9 fd3e 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8006bb0:	2307      	movs	r3, #7
 8006bb2:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8006bb6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8006bba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006bbe:	3338      	adds	r3, #56	; 0x38
 8006bc0:	4974      	ldr	r1, [pc, #464]	; (8006d94 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7f9 fd32 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8006bc8:	2308      	movs	r3, #8
 8006bca:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8006bce:	f207 1265 	addw	r2, r7, #357	; 0x165
 8006bd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006bd6:	3354      	adds	r3, #84	; 0x54
 8006bd8:	496f      	ldr	r1, [pc, #444]	; (8006d98 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7f9 fcfe 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8006be0:	2309      	movs	r3, #9
 8006be2:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8006be6:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8006bea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006bee:	3370      	adds	r3, #112	; 0x70
 8006bf0:	496a      	ldr	r1, [pc, #424]	; (8006d9c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7f9 fd42 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8006bf8:	2310      	movs	r3, #16
 8006bfa:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8006bfe:	f207 1267 	addw	r2, r7, #359	; 0x167
 8006c02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c06:	338c      	adds	r3, #140	; 0x8c
 8006c08:	4965      	ldr	r1, [pc, #404]	; (8006da0 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7f9 fd5e 	bl	80006cc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8006c10:	2311      	movs	r3, #17
 8006c12:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8006c16:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8006c1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c1e:	33a8      	adds	r3, #168	; 0xa8
 8006c20:	4960      	ldr	r1, [pc, #384]	; (8006da4 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7f9 fd2a 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8006c28:	2312      	movs	r3, #18
 8006c2a:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8006c2e:	f207 1269 	addw	r2, r7, #361	; 0x169
 8006c32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c36:	33c4      	adds	r3, #196	; 0xc4
 8006c38:	495b      	ldr	r1, [pc, #364]	; (8006da8 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7f9 fcce 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8006c40:	2313      	movs	r3, #19
 8006c42:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8006c46:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8006c4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c4e:	33e0      	adds	r3, #224	; 0xe0
 8006c50:	4956      	ldr	r1, [pc, #344]	; (8006dac <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7f9 fcea 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8006c58:	2314      	movs	r3, #20
 8006c5a:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8006c5e:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8006c62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c66:	33fc      	adds	r3, #252	; 0xfc
 8006c68:	4951      	ldr	r1, [pc, #324]	; (8006db0 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7f9 fd56 	bl	800071c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8006c70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c74:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c7e:	220a      	movs	r2, #10
 8006c80:	605a      	str	r2, [r3, #4]
 8006c82:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7f9 ff55 	bl	8000b36 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8006c8c:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8006c90:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006c94:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	ca06      	ldmia	r2, {r1, r2}
 8006c9e:	4845      	ldr	r0, [pc, #276]	; (8006db4 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8006ca0:	f7f9 ff61 	bl	8000b66 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8006ca4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7f9 ff50 	bl	8000b4e <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8006cae:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8006cb2:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8006cb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006cba:	429c      	cmp	r4, r3
 8006cbc:	d004      	beq.n	8006cc8 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8006cbe:	3c1c      	subs	r4, #28
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f7f9 fc7e 	bl	80005c2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8006cc6:	e7f6      	b.n	8006cb6 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8006cc8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	605a      	str	r2, [r3, #4]
 8006cd2:	609a      	str	r2, [r3, #8]
 8006cd4:	233c      	movs	r3, #60	; 0x3c
 8006cd6:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8006cda:	231b      	movs	r3, #27
 8006cdc:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8006ce0:	231c      	movs	r3, #28
 8006ce2:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8006ce6:	233e      	movs	r3, #62	; 0x3e
 8006ce8:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8006cec:	2319      	movs	r3, #25
 8006cee:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8006cf2:	231a      	movs	r3, #26
 8006cf4:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8006cf8:	233d      	movs	r3, #61	; 0x3d
 8006cfa:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8006cfe:	2318      	movs	r3, #24
 8006d00:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8006d04:	231d      	movs	r3, #29
 8006d06:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8006d0a:	2321      	movs	r3, #33	; 0x21
 8006d0c:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8006d10:	2317      	movs	r3, #23
 8006d12:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8006d16:	231e      	movs	r3, #30
 8006d18:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8006d1c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8006d20:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006d24:	2304      	movs	r3, #4
 8006d26:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8006d2a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7f9 ff49 	bl	8000bc6 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8006d34:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8006d38:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8006d44:	ca06      	ldmia	r2, {r1, r2}
 8006d46:	481c      	ldr	r0, [pc, #112]	; (8006db8 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8006d48:	f7f9 ff55 	bl	8000bf6 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8006d4c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7f9 ff44 	bl	8000bde <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10e      	bne.n	8006d7c <_Z41__static_initialization_and_destruction_0ii+0x378>
 8006d5e:	463b      	mov	r3, r7
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d108      	bne.n	8006d7c <_Z41__static_initialization_and_destruction_0ii+0x378>
 8006d6a:	4813      	ldr	r0, [pc, #76]	; (8006db8 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8006d6c:	f7fd faac 	bl	80042c8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8006d70:	4810      	ldr	r0, [pc, #64]	; (8006db4 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8006d72:	f7fd fab6 	bl	80042e2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8006d76:	4804      	ldr	r0, [pc, #16]	; (8006d88 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006d78:	f7fd fac0 	bl	80042fc <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8006d7c:	bf00      	nop
 8006d7e:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd90      	pop	{r4, r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000284 	.word	0x20000284
 8006d8c:	0800bb30 	.word	0x0800bb30
 8006d90:	0800bb38 	.word	0x0800bb38
 8006d94:	0800bb40 	.word	0x0800bb40
 8006d98:	0800bb48 	.word	0x0800bb48
 8006d9c:	0800bb50 	.word	0x0800bb50
 8006da0:	0800bb58 	.word	0x0800bb58
 8006da4:	0800bb5c 	.word	0x0800bb5c
 8006da8:	0800bb64 	.word	0x0800bb64
 8006dac:	0800bb6c 	.word	0x0800bb6c
 8006db0:	0800bb74 	.word	0x0800bb74
 8006db4:	2000029c 	.word	0x2000029c
 8006db8:	200002b4 	.word	0x200002b4

08006dbc <_GLOBAL__sub_I__ZN5TokenD2Ev>:
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006dc4:	2001      	movs	r0, #1
 8006dc6:	f7ff fe1d 	bl	8006a04 <_Z41__static_initialization_and_destruction_0ii>
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <_GLOBAL__sub_D__ZN5TokenD2Ev>:
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	f7ff fe15 	bl	8006a04 <_Z41__static_initialization_and_destruction_0ii>
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <_ZN11TransmitterC1EP20__UART_HandleTypeDef>:
#include <Transmitter.h>

Transmitter::Transmitter(UART_HandleTypeDef *huart)
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
 8006de6:	4a06      	ldr	r2, [pc, #24]	; (8006e00 <_ZN11TransmitterC1EP20__UART_HandleTypeDef+0x24>)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	601a      	str	r2, [r3, #0]
{
	this->huart = huart;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	605a      	str	r2, [r3, #4]
}
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	0800bdd0 	.word	0x0800bdd0

08006e04 <_ZN11TransmitterD1Ev>:
typedef int UART_HandleTypeDef;
#endif

#include <string>

class Transmitter
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	4a04      	ldr	r2, [pc, #16]	; (8006e20 <_ZN11TransmitterD1Ev+0x1c>)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	0800bdd0 	.word	0x0800bdd0

08006e24 <_ZN11TransmitterD0Ev>:
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff ffe9 	bl	8006e04 <_ZN11TransmitterD1Ev>
 8006e32:	210c      	movs	r1, #12
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f003 ff22 	bl	800ac7e <_ZdlPvj>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>:

Transmitter::~Transmitter() = default;

void Transmitter::report_error(std::string message, int line, int position)
{
 8006e44:	b5b0      	push	{r4, r5, r7, lr}
 8006e46:	b0a2      	sub	sp, #136	; 0x88
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
	std::string full_message = message + "\nin line: " + itoa(line, nullptr, 10)
 8006e52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006e56:	4a2f      	ldr	r2, [pc, #188]	; (8006f14 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xd0>)
 8006e58:	68b9      	ldr	r1, [r7, #8]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 f860 	bl	8006f20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8006e60:	220a      	movs	r2, #10
 8006e62:	2100      	movs	r1, #0
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f004 f9e1 	bl	800b22c <itoa>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006e70:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fa f87e 	bl	8000f76 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
			+ " in position: " + itoa(position, nullptr, 10) + "\n";
 8006e7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006e7e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006e82:	4a25      	ldr	r2, [pc, #148]	; (8006f18 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xd4>)
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fa f876 	bl	8000f76 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8006e8a:	220a      	movs	r2, #10
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	6838      	ldr	r0, [r7, #0]
 8006e90:	f004 f9cc 	bl	800b22c <itoa>
 8006e94:	4602      	mov	r2, r0
 8006e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e9a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fa f869 	bl	8000f76 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8006ea4:	f107 0310 	add.w	r3, r7, #16
 8006ea8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006eac:	4a1b      	ldr	r2, [pc, #108]	; (8006f1c <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xd8>)
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fa f861 	bl	8000f76 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8006eb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f004 f86d 	bl	800af98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ebe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f004 f868 	bl	800af98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	std::string full_message = message + "\nin line: " + itoa(line, nullptr, 10)
 8006ec8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f004 f863 	bl	800af98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ed2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f004 f85e 	bl	800af98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006edc:	b672      	cpsid	i
}
 8006ede:	bf00      	nop
#ifndef TESTS
	__disable_irq();
	while (1)
	{
		HAL_UART_Transmit(huart, (uint8_t*)full_message.c_str(), full_message.length(), 100);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	685c      	ldr	r4, [r3, #4]
 8006ee4:	f107 0310 	add.w	r3, r7, #16
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f004 f907 	bl	800b0fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8006eee:	4605      	mov	r5, r0
 8006ef0:	f107 0310 	add.w	r3, r7, #16
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f004 f87f 	bl	800aff8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8006efa:	4603      	mov	r3, r0
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	2364      	movs	r3, #100	; 0x64
 8006f00:	4629      	mov	r1, r5
 8006f02:	4620      	mov	r0, r4
 8006f04:	f003 f808 	bl	8009f18 <HAL_UART_Transmit>
		HAL_Delay(500);
 8006f08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f0c:	f001 fb88 	bl	8008620 <HAL_Delay>
		HAL_UART_Transmit(huart, (uint8_t*)full_message.c_str(), full_message.length(), 100);
 8006f10:	e7e6      	b.n	8006ee0 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x9c>
 8006f12:	bf00      	nop
 8006f14:	0800bb78 	.word	0x0800bb78
 8006f18:	0800bb84 	.word	0x0800bb84
 8006f1c:	0800bb94 	.word	0x0800bb94

08006f20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f004 f91a 	bl	800b168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f004 f8ca 	bl	800b0d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8006f3c:	bf00      	nop
    }
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <_Z41__static_initialization_and_destruction_0ii>:
	{
		get_next_token();
		exp->and_exps.push_back(parse_and_expression());
	}
	return exp;
}
 8006f48:	b590      	push	{r4, r7, lr}
 8006f4a:	b0e7      	sub	sp, #412	; 0x19c
 8006f4c:	af02      	add	r7, sp, #8
 8006f4e:	1d3b      	adds	r3, r7, #4
 8006f50:	6018      	str	r0, [r3, #0]
 8006f52:	463b      	mov	r3, r7
 8006f54:	6019      	str	r1, [r3, #0]
 8006f56:	1d3b      	adds	r3, r7, #4
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	f040 819d 	bne.w	800729a <_Z41__static_initialization_and_destruction_0ii+0x352>
 8006f60:	463b      	mov	r3, r7
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	f040 8196 	bne.w	800729a <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8006f6e:	f107 0314 	add.w	r3, r7, #20
 8006f72:	4618      	mov	r0, r3
 8006f74:	2322      	movs	r3, #34	; 0x22
 8006f76:	461a      	mov	r2, r3
 8006f78:	2100      	movs	r1, #0
 8006f7a:	f004 f99f 	bl	800b2bc <memset>
 8006f7e:	f107 0314 	add.w	r3, r7, #20
 8006f82:	223a      	movs	r2, #58	; 0x3a
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	f107 0314 	add.w	r3, r7, #20
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	705a      	strb	r2, [r3, #1]
 8006f8e:	f107 0314 	add.w	r3, r7, #20
 8006f92:	220a      	movs	r2, #10
 8006f94:	709a      	strb	r2, [r3, #2]
 8006f96:	f107 0314 	add.w	r3, r7, #20
 8006f9a:	220a      	movs	r2, #10
 8006f9c:	70da      	strb	r2, [r3, #3]
 8006f9e:	f107 0314 	add.w	r3, r7, #20
 8006fa2:	222c      	movs	r2, #44	; 0x2c
 8006fa4:	711a      	strb	r2, [r3, #4]
 8006fa6:	f107 0314 	add.w	r3, r7, #20
 8006faa:	220c      	movs	r2, #12
 8006fac:	715a      	strb	r2, [r3, #5]
 8006fae:	f107 0314 	add.w	r3, r7, #20
 8006fb2:	222e      	movs	r2, #46	; 0x2e
 8006fb4:	719a      	strb	r2, [r3, #6]
 8006fb6:	f107 0314 	add.w	r3, r7, #20
 8006fba:	220b      	movs	r2, #11
 8006fbc:	71da      	strb	r2, [r3, #7]
 8006fbe:	f107 0314 	add.w	r3, r7, #20
 8006fc2:	225b      	movs	r2, #91	; 0x5b
 8006fc4:	721a      	strb	r2, [r3, #8]
 8006fc6:	f107 0314 	add.w	r3, r7, #20
 8006fca:	220d      	movs	r2, #13
 8006fcc:	725a      	strb	r2, [r3, #9]
 8006fce:	f107 0314 	add.w	r3, r7, #20
 8006fd2:	225d      	movs	r2, #93	; 0x5d
 8006fd4:	729a      	strb	r2, [r3, #10]
 8006fd6:	f107 0314 	add.w	r3, r7, #20
 8006fda:	220e      	movs	r2, #14
 8006fdc:	72da      	strb	r2, [r3, #11]
 8006fde:	f107 0314 	add.w	r3, r7, #20
 8006fe2:	227c      	movs	r2, #124	; 0x7c
 8006fe4:	731a      	strb	r2, [r3, #12]
 8006fe6:	f107 0314 	add.w	r3, r7, #20
 8006fea:	2215      	movs	r2, #21
 8006fec:	735a      	strb	r2, [r3, #13]
 8006fee:	f107 0314 	add.w	r3, r7, #20
 8006ff2:	2226      	movs	r2, #38	; 0x26
 8006ff4:	739a      	strb	r2, [r3, #14]
 8006ff6:	f107 0314 	add.w	r3, r7, #20
 8006ffa:	2216      	movs	r2, #22
 8006ffc:	73da      	strb	r2, [r3, #15]
 8006ffe:	f107 0314 	add.w	r3, r7, #20
 8007002:	222b      	movs	r2, #43	; 0x2b
 8007004:	741a      	strb	r2, [r3, #16]
 8007006:	f107 0314 	add.w	r3, r7, #20
 800700a:	221f      	movs	r2, #31
 800700c:	745a      	strb	r2, [r3, #17]
 800700e:	f107 0314 	add.w	r3, r7, #20
 8007012:	222d      	movs	r2, #45	; 0x2d
 8007014:	749a      	strb	r2, [r3, #18]
 8007016:	f107 0314 	add.w	r3, r7, #20
 800701a:	2220      	movs	r2, #32
 800701c:	74da      	strb	r2, [r3, #19]
 800701e:	f107 0314 	add.w	r3, r7, #20
 8007022:	222a      	movs	r2, #42	; 0x2a
 8007024:	751a      	strb	r2, [r3, #20]
 8007026:	f107 0314 	add.w	r3, r7, #20
 800702a:	2221      	movs	r2, #33	; 0x21
 800702c:	755a      	strb	r2, [r3, #21]
 800702e:	f107 0314 	add.w	r3, r7, #20
 8007032:	222f      	movs	r2, #47	; 0x2f
 8007034:	759a      	strb	r2, [r3, #22]
 8007036:	f107 0314 	add.w	r3, r7, #20
 800703a:	2222      	movs	r2, #34	; 0x22
 800703c:	75da      	strb	r2, [r3, #23]
 800703e:	f107 0314 	add.w	r3, r7, #20
 8007042:	225e      	movs	r2, #94	; 0x5e
 8007044:	761a      	strb	r2, [r3, #24]
 8007046:	f107 0314 	add.w	r3, r7, #20
 800704a:	2223      	movs	r2, #35	; 0x23
 800704c:	765a      	strb	r2, [r3, #25]
 800704e:	f107 0314 	add.w	r3, r7, #20
 8007052:	2225      	movs	r2, #37	; 0x25
 8007054:	769a      	strb	r2, [r3, #26]
 8007056:	f107 0314 	add.w	r3, r7, #20
 800705a:	2224      	movs	r2, #36	; 0x24
 800705c:	76da      	strb	r2, [r3, #27]
 800705e:	f107 0314 	add.w	r3, r7, #20
 8007062:	2228      	movs	r2, #40	; 0x28
 8007064:	771a      	strb	r2, [r3, #28]
 8007066:	f107 0314 	add.w	r3, r7, #20
 800706a:	2226      	movs	r2, #38	; 0x26
 800706c:	775a      	strb	r2, [r3, #29]
 800706e:	f107 0314 	add.w	r3, r7, #20
 8007072:	2229      	movs	r2, #41	; 0x29
 8007074:	779a      	strb	r2, [r3, #30]
 8007076:	f107 0314 	add.w	r3, r7, #20
 800707a:	2227      	movs	r2, #39	; 0x27
 800707c:	77da      	strb	r2, [r3, #31]
 800707e:	f107 0314 	add.w	r3, r7, #20
 8007082:	2225      	movs	r2, #37	; 0x25
 8007084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8007088:	f107 030c 	add.w	r3, r7, #12
 800708c:	f107 0214 	add.w	r2, r7, #20
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	f107 030c 	add.w	r3, r7, #12
 8007096:	2211      	movs	r2, #17
 8007098:	605a      	str	r2, [r3, #4]
 800709a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800709e:	4618      	mov	r0, r3
 80070a0:	f7f9 fca4 	bl	80009ec <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 80070a4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80070a8:	f107 020c 	add.w	r2, r7, #12
 80070ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	460b      	mov	r3, r1
 80070b4:	ca06      	ldmia	r2, {r1, r2}
 80070b6:	4885      	ldr	r0, [pc, #532]	; (80072cc <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80070b8:	f7f9 fcb0 	bl	8000a1c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80070bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7f9 fc9f 	bl	8000a04 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 80070c6:	2305      	movs	r3, #5
 80070c8:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80070cc:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80070d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80070d4:	497e      	ldr	r1, [pc, #504]	; (80072d0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7f9 fa80 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80070dc:	2306      	movs	r3, #6
 80070de:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80070e2:	f207 1263 	addw	r2, r7, #355	; 0x163
 80070e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80070ea:	331c      	adds	r3, #28
 80070ec:	4979      	ldr	r1, [pc, #484]	; (80072d4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7f9 fa9c 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80070f4:	2307      	movs	r3, #7
 80070f6:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80070fa:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80070fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007102:	3338      	adds	r3, #56	; 0x38
 8007104:	4974      	ldr	r1, [pc, #464]	; (80072d8 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8007106:	4618      	mov	r0, r3
 8007108:	f7f9 fa90 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 800710c:	2308      	movs	r3, #8
 800710e:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8007112:	f207 1265 	addw	r2, r7, #357	; 0x165
 8007116:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800711a:	3354      	adds	r3, #84	; 0x54
 800711c:	496f      	ldr	r1, [pc, #444]	; (80072dc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800711e:	4618      	mov	r0, r3
 8007120:	f7f9 fa5c 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8007124:	2309      	movs	r3, #9
 8007126:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800712a:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 800712e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007132:	3370      	adds	r3, #112	; 0x70
 8007134:	496a      	ldr	r1, [pc, #424]	; (80072e0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8007136:	4618      	mov	r0, r3
 8007138:	f7f9 faa0 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 800713c:	2310      	movs	r3, #16
 800713e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8007142:	f207 1267 	addw	r2, r7, #359	; 0x167
 8007146:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800714a:	338c      	adds	r3, #140	; 0x8c
 800714c:	4965      	ldr	r1, [pc, #404]	; (80072e4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800714e:	4618      	mov	r0, r3
 8007150:	f7f9 fabc 	bl	80006cc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8007154:	2311      	movs	r3, #17
 8007156:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800715a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800715e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007162:	33a8      	adds	r3, #168	; 0xa8
 8007164:	4960      	ldr	r1, [pc, #384]	; (80072e8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8007166:	4618      	mov	r0, r3
 8007168:	f7f9 fa88 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 800716c:	2312      	movs	r3, #18
 800716e:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8007172:	f207 1269 	addw	r2, r7, #361	; 0x169
 8007176:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800717a:	33c4      	adds	r3, #196	; 0xc4
 800717c:	495b      	ldr	r1, [pc, #364]	; (80072ec <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800717e:	4618      	mov	r0, r3
 8007180:	f7f9 fa2c 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8007184:	2313      	movs	r3, #19
 8007186:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800718a:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800718e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007192:	33e0      	adds	r3, #224	; 0xe0
 8007194:	4956      	ldr	r1, [pc, #344]	; (80072f0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8007196:	4618      	mov	r0, r3
 8007198:	f7f9 fa48 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 800719c:	2314      	movs	r3, #20
 800719e:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 80071a2:	f207 126b 	addw	r2, r7, #363	; 0x16b
 80071a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80071aa:	33fc      	adds	r3, #252	; 0xfc
 80071ac:	4951      	ldr	r1, [pc, #324]	; (80072f4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7f9 fab4 	bl	800071c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 80071b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80071b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80071c2:	220a      	movs	r2, #10
 80071c4:	605a      	str	r2, [r3, #4]
 80071c6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7f9 fcb3 	bl	8000b36 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80071d0:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80071d4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80071d8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	460b      	mov	r3, r1
 80071e0:	ca06      	ldmia	r2, {r1, r2}
 80071e2:	4845      	ldr	r0, [pc, #276]	; (80072f8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80071e4:	f7f9 fcbf 	bl	8000b66 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80071e8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7f9 fcae 	bl	8000b4e <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80071f2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80071f6:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80071fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80071fe:	429c      	cmp	r4, r3
 8007200:	d004      	beq.n	800720c <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8007202:	3c1c      	subs	r4, #28
 8007204:	4620      	mov	r0, r4
 8007206:	f7f9 f9dc 	bl	80005c2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 800720a:	e7f6      	b.n	80071fa <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 800720c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	609a      	str	r2, [r3, #8]
 8007218:	233c      	movs	r3, #60	; 0x3c
 800721a:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 800721e:	231b      	movs	r3, #27
 8007220:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8007224:	231c      	movs	r3, #28
 8007226:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800722a:	233e      	movs	r3, #62	; 0x3e
 800722c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8007230:	2319      	movs	r3, #25
 8007232:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8007236:	231a      	movs	r3, #26
 8007238:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 800723c:	233d      	movs	r3, #61	; 0x3d
 800723e:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8007242:	2318      	movs	r3, #24
 8007244:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8007248:	231d      	movs	r3, #29
 800724a:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800724e:	2321      	movs	r3, #33	; 0x21
 8007250:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8007254:	2317      	movs	r3, #23
 8007256:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800725a:	231e      	movs	r3, #30
 800725c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8007260:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8007264:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8007268:	2304      	movs	r3, #4
 800726a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800726e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8007272:	4618      	mov	r0, r3
 8007274:	f7f9 fca7 	bl	8000bc6 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8007278:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800727c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	4613      	mov	r3, r2
 8007284:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8007288:	ca06      	ldmia	r2, {r1, r2}
 800728a:	481c      	ldr	r0, [pc, #112]	; (80072fc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800728c:	f7f9 fcb3 	bl	8000bf6 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8007290:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8007294:	4618      	mov	r0, r3
 8007296:	f7f9 fca2 	bl	8000bde <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 800729a:	1d3b      	adds	r3, r7, #4
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10e      	bne.n	80072c0 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80072a2:	463b      	mov	r3, r7
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d108      	bne.n	80072c0 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80072ae:	4813      	ldr	r0, [pc, #76]	; (80072fc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80072b0:	f7fd f80a 	bl	80042c8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 80072b4:	4810      	ldr	r0, [pc, #64]	; (80072f8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80072b6:	f7fd f814 	bl	80042e2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 80072ba:	4804      	ldr	r0, [pc, #16]	; (80072cc <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80072bc:	f7fd f81e 	bl	80042fc <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80072c0:	bf00      	nop
 80072c2:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd90      	pop	{r4, r7, pc}
 80072ca:	bf00      	nop
 80072cc:	200002cc 	.word	0x200002cc
 80072d0:	0800bc10 	.word	0x0800bc10
 80072d4:	0800bc18 	.word	0x0800bc18
 80072d8:	0800bc20 	.word	0x0800bc20
 80072dc:	0800bc28 	.word	0x0800bc28
 80072e0:	0800bc30 	.word	0x0800bc30
 80072e4:	0800bc38 	.word	0x0800bc38
 80072e8:	0800bc3c 	.word	0x0800bc3c
 80072ec:	0800bc44 	.word	0x0800bc44
 80072f0:	0800bc4c 	.word	0x0800bc4c
 80072f4:	0800bc54 	.word	0x0800bc54
 80072f8:	200002e4 	.word	0x200002e4
 80072fc:	200002fc 	.word	0x200002fc

08007300 <_GLOBAL__sub_I__ZN6Parser31parse_variable_or_function_callEP17Primal_expression>:
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
 8007304:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007308:	2001      	movs	r0, #1
 800730a:	f7ff fe1d 	bl	8006f48 <_Z41__static_initialization_and_destruction_0ii>
 800730e:	bd80      	pop	{r7, pc}

08007310 <_GLOBAL__sub_D__ZN6Parser31parse_variable_or_function_callEP17Primal_expression>:
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
 8007314:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007318:	2000      	movs	r0, #0
 800731a:	f7ff fe15 	bl	8006f48 <_Z41__static_initialization_and_destruction_0ii>
 800731e:	bd80      	pop	{r7, pc}

08007320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007324:	f001 f91f 	bl	8008566 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007328:	f000 f80a 	bl	8007340 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800732c:	f000 f8e0 	bl	80074f0 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8007330:	f000 f8aa 	bl	8007488 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  my_main_run(&huart1);
 8007334:	4801      	ldr	r0, [pc, #4]	; (800733c <main+0x1c>)
 8007336:	f000 fae5 	bl	8007904 <_Z11my_main_runP20__UART_HandleTypeDef>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800733a:	e7fe      	b.n	800733a <main+0x1a>
 800733c:	2000035c 	.word	0x2000035c

08007340 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b0b4      	sub	sp, #208	; 0xd0
 8007344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007346:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800734a:	2230      	movs	r2, #48	; 0x30
 800734c:	2100      	movs	r1, #0
 800734e:	4618      	mov	r0, r3
 8007350:	f003 ffb4 	bl	800b2bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007354:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	605a      	str	r2, [r3, #4]
 800735e:	609a      	str	r2, [r3, #8]
 8007360:	60da      	str	r2, [r3, #12]
 8007362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007364:	f107 0308 	add.w	r3, r7, #8
 8007368:	2284      	movs	r2, #132	; 0x84
 800736a:	2100      	movs	r1, #0
 800736c:	4618      	mov	r0, r3
 800736e:	f003 ffa5 	bl	800b2bc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007372:	4b43      	ldr	r3, [pc, #268]	; (8007480 <_Z18SystemClock_Configv+0x140>)
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	4a42      	ldr	r2, [pc, #264]	; (8007480 <_Z18SystemClock_Configv+0x140>)
 8007378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800737c:	6413      	str	r3, [r2, #64]	; 0x40
 800737e:	4b40      	ldr	r3, [pc, #256]	; (8007480 <_Z18SystemClock_Configv+0x140>)
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007386:	607b      	str	r3, [r7, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800738a:	4b3e      	ldr	r3, [pc, #248]	; (8007484 <_Z18SystemClock_Configv+0x144>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a3d      	ldr	r2, [pc, #244]	; (8007484 <_Z18SystemClock_Configv+0x144>)
 8007390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	4b3b      	ldr	r3, [pc, #236]	; (8007484 <_Z18SystemClock_Configv+0x144>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80073a2:	2302      	movs	r3, #2
 80073a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80073a8:	2301      	movs	r3, #1
 80073aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80073ae:	2310      	movs	r3, #16
 80073b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80073b4:	2302      	movs	r3, #2
 80073b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80073ba:	2300      	movs	r3, #0
 80073bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80073c0:	2308      	movs	r3, #8
 80073c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80073c6:	23d8      	movs	r3, #216	; 0xd8
 80073c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80073cc:	2302      	movs	r3, #2
 80073ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80073d2:	2302      	movs	r3, #2
 80073d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80073d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80073dc:	4618      	mov	r0, r3
 80073de:	f001 fce3 	bl	8008da8 <HAL_RCC_OscConfig>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	bf14      	ite	ne
 80073e8:	2301      	movne	r3, #1
 80073ea:	2300      	moveq	r3, #0
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 80073f2:	f000 f895 	bl	8007520 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80073f6:	f001 fc87 	bl	8008d08 <HAL_PWREx_EnableOverDrive>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	bf14      	ite	ne
 8007400:	2301      	movne	r3, #1
 8007402:	2300      	moveq	r3, #0
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 800740a:	f000 f889 	bl	8007520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800740e:	230f      	movs	r3, #15
 8007410:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007414:	2302      	movs	r3, #2
 8007416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800741a:	2300      	movs	r3, #0
 800741c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007420:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800742c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8007430:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007434:	2107      	movs	r1, #7
 8007436:	4618      	mov	r0, r3
 8007438:	f001 ff5a 	bl	80092f0 <HAL_RCC_ClockConfig>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	bf14      	ite	ne
 8007442:	2301      	movne	r3, #1
 8007444:	2300      	moveq	r3, #0
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <_Z18SystemClock_Configv+0x110>
  {
    Error_Handler();
 800744c:	f000 f868 	bl	8007520 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007450:	2340      	movs	r3, #64	; 0x40
 8007452:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007454:	2300      	movs	r3, #0
 8007456:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007458:	f107 0308 	add.w	r3, r7, #8
 800745c:	4618      	mov	r0, r3
 800745e:	f002 f91d 	bl	800969c <HAL_RCCEx_PeriphCLKConfig>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	bf14      	ite	ne
 8007468:	2301      	movne	r3, #1
 800746a:	2300      	moveq	r3, #0
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <_Z18SystemClock_Configv+0x136>
  {
    Error_Handler();
 8007472:	f000 f855 	bl	8007520 <Error_Handler>
  }
}
 8007476:	bf00      	nop
 8007478:	37d0      	adds	r7, #208	; 0xd0
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	40023800 	.word	0x40023800
 8007484:	40007000 	.word	0x40007000

08007488 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800748c:	4b16      	ldr	r3, [pc, #88]	; (80074e8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800748e:	4a17      	ldr	r2, [pc, #92]	; (80074ec <_ZL19MX_USART1_UART_Initv+0x64>)
 8007490:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007492:	4b15      	ldr	r3, [pc, #84]	; (80074e8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8007494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007498:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800749a:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800749c:	2200      	movs	r2, #0
 800749e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80074a0:	4b11      	ldr	r3, [pc, #68]	; (80074e8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80074a6:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80074ac:	4b0e      	ldr	r3, [pc, #56]	; (80074e8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80074ae:	220c      	movs	r2, #12
 80074b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074b2:	4b0d      	ldr	r3, [pc, #52]	; (80074e8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80074b8:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80074be:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80074c4:	4b08      	ldr	r3, [pc, #32]	; (80074e8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80074ca:	4807      	ldr	r0, [pc, #28]	; (80074e8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80074cc:	f002 fcd6 	bl	8009e7c <HAL_UART_Init>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bf14      	ite	ne
 80074d6:	2301      	movne	r3, #1
 80074d8:	2300      	moveq	r3, #0
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80074e0:	f000 f81e 	bl	8007520 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80074e4:	bf00      	nop
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	2000035c 	.word	0x2000035c
 80074ec:	40011000 	.word	0x40011000

080074f0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074f6:	4b09      	ldr	r3, [pc, #36]	; (800751c <_ZL12MX_GPIO_Initv+0x2c>)
 80074f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fa:	4a08      	ldr	r2, [pc, #32]	; (800751c <_ZL12MX_GPIO_Initv+0x2c>)
 80074fc:	f043 0301 	orr.w	r3, r3, #1
 8007500:	6313      	str	r3, [r2, #48]	; 0x30
 8007502:	4b06      	ldr	r3, [pc, #24]	; (800751c <_ZL12MX_GPIO_Initv+0x2c>)
 8007504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	607b      	str	r3, [r7, #4]
 800750c:	687b      	ldr	r3, [r7, #4]

}
 800750e:	bf00      	nop
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40023800 	.word	0x40023800

08007520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007524:	b672      	cpsid	i
}
 8007526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007528:	e7fe      	b.n	8007528 <Error_Handler+0x8>
	...

0800752c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800752c:	b590      	push	{r4, r7, lr}
 800752e:	b0e7      	sub	sp, #412	; 0x19c
 8007530:	af02      	add	r7, sp, #8
 8007532:	1d3b      	adds	r3, r7, #4
 8007534:	6018      	str	r0, [r3, #0]
 8007536:	463b      	mov	r3, r7
 8007538:	6019      	str	r1, [r3, #0]
 800753a:	1d3b      	adds	r3, r7, #4
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b01      	cmp	r3, #1
 8007540:	f040 819d 	bne.w	800787e <_Z41__static_initialization_and_destruction_0ii+0x352>
 8007544:	463b      	mov	r3, r7
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800754c:	4293      	cmp	r3, r2
 800754e:	f040 8196 	bne.w	800787e <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8007552:	f107 0314 	add.w	r3, r7, #20
 8007556:	4618      	mov	r0, r3
 8007558:	2322      	movs	r3, #34	; 0x22
 800755a:	461a      	mov	r2, r3
 800755c:	2100      	movs	r1, #0
 800755e:	f003 fead 	bl	800b2bc <memset>
 8007562:	f107 0314 	add.w	r3, r7, #20
 8007566:	223a      	movs	r2, #58	; 0x3a
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	f107 0314 	add.w	r3, r7, #20
 800756e:	2201      	movs	r2, #1
 8007570:	705a      	strb	r2, [r3, #1]
 8007572:	f107 0314 	add.w	r3, r7, #20
 8007576:	220a      	movs	r2, #10
 8007578:	709a      	strb	r2, [r3, #2]
 800757a:	f107 0314 	add.w	r3, r7, #20
 800757e:	220a      	movs	r2, #10
 8007580:	70da      	strb	r2, [r3, #3]
 8007582:	f107 0314 	add.w	r3, r7, #20
 8007586:	222c      	movs	r2, #44	; 0x2c
 8007588:	711a      	strb	r2, [r3, #4]
 800758a:	f107 0314 	add.w	r3, r7, #20
 800758e:	220c      	movs	r2, #12
 8007590:	715a      	strb	r2, [r3, #5]
 8007592:	f107 0314 	add.w	r3, r7, #20
 8007596:	222e      	movs	r2, #46	; 0x2e
 8007598:	719a      	strb	r2, [r3, #6]
 800759a:	f107 0314 	add.w	r3, r7, #20
 800759e:	220b      	movs	r2, #11
 80075a0:	71da      	strb	r2, [r3, #7]
 80075a2:	f107 0314 	add.w	r3, r7, #20
 80075a6:	225b      	movs	r2, #91	; 0x5b
 80075a8:	721a      	strb	r2, [r3, #8]
 80075aa:	f107 0314 	add.w	r3, r7, #20
 80075ae:	220d      	movs	r2, #13
 80075b0:	725a      	strb	r2, [r3, #9]
 80075b2:	f107 0314 	add.w	r3, r7, #20
 80075b6:	225d      	movs	r2, #93	; 0x5d
 80075b8:	729a      	strb	r2, [r3, #10]
 80075ba:	f107 0314 	add.w	r3, r7, #20
 80075be:	220e      	movs	r2, #14
 80075c0:	72da      	strb	r2, [r3, #11]
 80075c2:	f107 0314 	add.w	r3, r7, #20
 80075c6:	227c      	movs	r2, #124	; 0x7c
 80075c8:	731a      	strb	r2, [r3, #12]
 80075ca:	f107 0314 	add.w	r3, r7, #20
 80075ce:	2215      	movs	r2, #21
 80075d0:	735a      	strb	r2, [r3, #13]
 80075d2:	f107 0314 	add.w	r3, r7, #20
 80075d6:	2226      	movs	r2, #38	; 0x26
 80075d8:	739a      	strb	r2, [r3, #14]
 80075da:	f107 0314 	add.w	r3, r7, #20
 80075de:	2216      	movs	r2, #22
 80075e0:	73da      	strb	r2, [r3, #15]
 80075e2:	f107 0314 	add.w	r3, r7, #20
 80075e6:	222b      	movs	r2, #43	; 0x2b
 80075e8:	741a      	strb	r2, [r3, #16]
 80075ea:	f107 0314 	add.w	r3, r7, #20
 80075ee:	221f      	movs	r2, #31
 80075f0:	745a      	strb	r2, [r3, #17]
 80075f2:	f107 0314 	add.w	r3, r7, #20
 80075f6:	222d      	movs	r2, #45	; 0x2d
 80075f8:	749a      	strb	r2, [r3, #18]
 80075fa:	f107 0314 	add.w	r3, r7, #20
 80075fe:	2220      	movs	r2, #32
 8007600:	74da      	strb	r2, [r3, #19]
 8007602:	f107 0314 	add.w	r3, r7, #20
 8007606:	222a      	movs	r2, #42	; 0x2a
 8007608:	751a      	strb	r2, [r3, #20]
 800760a:	f107 0314 	add.w	r3, r7, #20
 800760e:	2221      	movs	r2, #33	; 0x21
 8007610:	755a      	strb	r2, [r3, #21]
 8007612:	f107 0314 	add.w	r3, r7, #20
 8007616:	222f      	movs	r2, #47	; 0x2f
 8007618:	759a      	strb	r2, [r3, #22]
 800761a:	f107 0314 	add.w	r3, r7, #20
 800761e:	2222      	movs	r2, #34	; 0x22
 8007620:	75da      	strb	r2, [r3, #23]
 8007622:	f107 0314 	add.w	r3, r7, #20
 8007626:	225e      	movs	r2, #94	; 0x5e
 8007628:	761a      	strb	r2, [r3, #24]
 800762a:	f107 0314 	add.w	r3, r7, #20
 800762e:	2223      	movs	r2, #35	; 0x23
 8007630:	765a      	strb	r2, [r3, #25]
 8007632:	f107 0314 	add.w	r3, r7, #20
 8007636:	2225      	movs	r2, #37	; 0x25
 8007638:	769a      	strb	r2, [r3, #26]
 800763a:	f107 0314 	add.w	r3, r7, #20
 800763e:	2224      	movs	r2, #36	; 0x24
 8007640:	76da      	strb	r2, [r3, #27]
 8007642:	f107 0314 	add.w	r3, r7, #20
 8007646:	2228      	movs	r2, #40	; 0x28
 8007648:	771a      	strb	r2, [r3, #28]
 800764a:	f107 0314 	add.w	r3, r7, #20
 800764e:	2226      	movs	r2, #38	; 0x26
 8007650:	775a      	strb	r2, [r3, #29]
 8007652:	f107 0314 	add.w	r3, r7, #20
 8007656:	2229      	movs	r2, #41	; 0x29
 8007658:	779a      	strb	r2, [r3, #30]
 800765a:	f107 0314 	add.w	r3, r7, #20
 800765e:	2227      	movs	r2, #39	; 0x27
 8007660:	77da      	strb	r2, [r3, #31]
 8007662:	f107 0314 	add.w	r3, r7, #20
 8007666:	2225      	movs	r2, #37	; 0x25
 8007668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800766c:	f107 030c 	add.w	r3, r7, #12
 8007670:	f107 0214 	add.w	r2, r7, #20
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	f107 030c 	add.w	r3, r7, #12
 800767a:	2211      	movs	r2, #17
 800767c:	605a      	str	r2, [r3, #4]
 800767e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007682:	4618      	mov	r0, r3
 8007684:	f7f9 f9b2 	bl	80009ec <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8007688:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800768c:	f107 020c 	add.w	r2, r7, #12
 8007690:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	460b      	mov	r3, r1
 8007698:	ca06      	ldmia	r2, {r1, r2}
 800769a:	4885      	ldr	r0, [pc, #532]	; (80078b0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800769c:	f7f9 f9be 	bl	8000a1c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80076a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7f9 f9ad 	bl	8000a04 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 80076aa:	2305      	movs	r3, #5
 80076ac:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80076b0:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80076b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076b8:	497e      	ldr	r1, [pc, #504]	; (80078b4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7f8 ff8e 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80076c0:	2306      	movs	r3, #6
 80076c2:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80076c6:	f207 1263 	addw	r2, r7, #355	; 0x163
 80076ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076ce:	331c      	adds	r3, #28
 80076d0:	4979      	ldr	r1, [pc, #484]	; (80078b8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7f8 ffaa 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80076d8:	2307      	movs	r3, #7
 80076da:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80076de:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80076e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076e6:	3338      	adds	r3, #56	; 0x38
 80076e8:	4974      	ldr	r1, [pc, #464]	; (80078bc <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7f8 ff9e 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80076f0:	2308      	movs	r3, #8
 80076f2:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80076f6:	f207 1265 	addw	r2, r7, #357	; 0x165
 80076fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076fe:	3354      	adds	r3, #84	; 0x54
 8007700:	496f      	ldr	r1, [pc, #444]	; (80078c0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8007702:	4618      	mov	r0, r3
 8007704:	f7f8 ff6a 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8007708:	2309      	movs	r3, #9
 800770a:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800770e:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8007712:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007716:	3370      	adds	r3, #112	; 0x70
 8007718:	496a      	ldr	r1, [pc, #424]	; (80078c4 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800771a:	4618      	mov	r0, r3
 800771c:	f7f8 ffae 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8007720:	2310      	movs	r3, #16
 8007722:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8007726:	f207 1267 	addw	r2, r7, #359	; 0x167
 800772a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800772e:	338c      	adds	r3, #140	; 0x8c
 8007730:	4965      	ldr	r1, [pc, #404]	; (80078c8 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8007732:	4618      	mov	r0, r3
 8007734:	f7f8 ffca 	bl	80006cc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8007738:	2311      	movs	r3, #17
 800773a:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800773e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007742:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007746:	33a8      	adds	r3, #168	; 0xa8
 8007748:	4960      	ldr	r1, [pc, #384]	; (80078cc <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800774a:	4618      	mov	r0, r3
 800774c:	f7f8 ff96 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8007750:	2312      	movs	r3, #18
 8007752:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8007756:	f207 1269 	addw	r2, r7, #361	; 0x169
 800775a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800775e:	33c4      	adds	r3, #196	; 0xc4
 8007760:	495b      	ldr	r1, [pc, #364]	; (80078d0 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8007762:	4618      	mov	r0, r3
 8007764:	f7f8 ff3a 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8007768:	2313      	movs	r3, #19
 800776a:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800776e:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8007772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007776:	33e0      	adds	r3, #224	; 0xe0
 8007778:	4956      	ldr	r1, [pc, #344]	; (80078d4 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800777a:	4618      	mov	r0, r3
 800777c:	f7f8 ff56 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8007780:	2314      	movs	r3, #20
 8007782:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8007786:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800778a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800778e:	33fc      	adds	r3, #252	; 0xfc
 8007790:	4951      	ldr	r1, [pc, #324]	; (80078d8 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8007792:	4618      	mov	r0, r3
 8007794:	f7f8 ffc2 	bl	800071c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8007798:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800779c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077a6:	220a      	movs	r2, #10
 80077a8:	605a      	str	r2, [r3, #4]
 80077aa:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7f9 f9c1 	bl	8000b36 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80077b4:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80077b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80077bc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	460b      	mov	r3, r1
 80077c4:	ca06      	ldmia	r2, {r1, r2}
 80077c6:	4845      	ldr	r0, [pc, #276]	; (80078dc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80077c8:	f7f9 f9cd 	bl	8000b66 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80077cc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7f9 f9bc 	bl	8000b4e <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80077d6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80077da:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80077de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80077e2:	429c      	cmp	r4, r3
 80077e4:	d004      	beq.n	80077f0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 80077e6:	3c1c      	subs	r4, #28
 80077e8:	4620      	mov	r0, r4
 80077ea:	f7f8 feea 	bl	80005c2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80077ee:	e7f6      	b.n	80077de <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80077f0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	605a      	str	r2, [r3, #4]
 80077fa:	609a      	str	r2, [r3, #8]
 80077fc:	233c      	movs	r3, #60	; 0x3c
 80077fe:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8007802:	231b      	movs	r3, #27
 8007804:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8007808:	231c      	movs	r3, #28
 800780a:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800780e:	233e      	movs	r3, #62	; 0x3e
 8007810:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8007814:	2319      	movs	r3, #25
 8007816:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800781a:	231a      	movs	r3, #26
 800781c:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8007820:	233d      	movs	r3, #61	; 0x3d
 8007822:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8007826:	2318      	movs	r3, #24
 8007828:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 800782c:	231d      	movs	r3, #29
 800782e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8007832:	2321      	movs	r3, #33	; 0x21
 8007834:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8007838:	2317      	movs	r3, #23
 800783a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800783e:	231e      	movs	r3, #30
 8007840:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8007844:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8007848:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800784c:	2304      	movs	r3, #4
 800784e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8007852:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8007856:	4618      	mov	r0, r3
 8007858:	f7f9 f9b5 	bl	8000bc6 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 800785c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8007860:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	4613      	mov	r3, r2
 8007868:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 800786c:	ca06      	ldmia	r2, {r1, r2}
 800786e:	481c      	ldr	r0, [pc, #112]	; (80078e0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8007870:	f7f9 f9c1 	bl	8000bf6 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8007874:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8007878:	4618      	mov	r0, r3
 800787a:	f7f9 f9b0 	bl	8000bde <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 800787e:	1d3b      	adds	r3, r7, #4
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10e      	bne.n	80078a4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8007886:	463b      	mov	r3, r7
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800788e:	4293      	cmp	r3, r2
 8007890:	d108      	bne.n	80078a4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8007892:	4813      	ldr	r0, [pc, #76]	; (80078e0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8007894:	f7fc fd18 	bl	80042c8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8007898:	4810      	ldr	r0, [pc, #64]	; (80078dc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800789a:	f7fc fd22 	bl	80042e2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800789e:	4804      	ldr	r0, [pc, #16]	; (80078b0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80078a0:	f7fc fd2c 	bl	80042fc <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80078a4:	bf00      	nop
 80078a6:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd90      	pop	{r4, r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000314 	.word	0x20000314
 80078b4:	0800bc84 	.word	0x0800bc84
 80078b8:	0800bc8c 	.word	0x0800bc8c
 80078bc:	0800bc94 	.word	0x0800bc94
 80078c0:	0800bc9c 	.word	0x0800bc9c
 80078c4:	0800bca4 	.word	0x0800bca4
 80078c8:	0800bcac 	.word	0x0800bcac
 80078cc:	0800bcb0 	.word	0x0800bcb0
 80078d0:	0800bcb8 	.word	0x0800bcb8
 80078d4:	0800bcc0 	.word	0x0800bcc0
 80078d8:	0800bcc8 	.word	0x0800bcc8
 80078dc:	2000032c 	.word	0x2000032c
 80078e0:	20000344 	.word	0x20000344

080078e4 <_GLOBAL__sub_I_huart1>:
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80078ec:	2001      	movs	r0, #1
 80078ee:	f7ff fe1d 	bl	800752c <_Z41__static_initialization_and_destruction_0ii>
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <_GLOBAL__sub_D_huart1>:
 80078f4:	b580      	push	{r7, lr}
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80078fc:	2000      	movs	r0, #0
 80078fe:	f7ff fe15 	bl	800752c <_Z41__static_initialization_and_destruction_0ii>
 8007902:	bd80      	pop	{r7, pc}

08007904 <_Z11my_main_runP20__UART_HandleTypeDef>:
#include "my_main.h"

// main function called after setup from CUBEMX
void my_main_run(UART_HandleTypeDef* huart)
{
 8007904:	b590      	push	{r4, r7, lr}
 8007906:	b0b7      	sub	sp, #220	; 0xdc
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	Source Com(huart);
 800790c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fe50 	bl	80065b8 <_ZN6SourceC1EP20__UART_HandleTypeDef>
	Transmitter Trans(huart);
 8007918:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff fa5c 	bl	8006ddc <_ZN11TransmitterC1EP20__UART_HandleTypeDef>
	Lexer Lex(&Com);
 8007924:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8007928:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800792c:	4611      	mov	r1, r2
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe f84d 	bl	80059ce <_ZN5LexerC1EP6Source>
	Parser Par(&Lex, &Trans);
 8007934:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8007938:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800793c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007940:	4618      	mov	r0, r3
 8007942:	f7fe faed 	bl	8005f20 <_ZN6ParserC1EP5LexerP11Transmitter>

//	Program* P = Par.parse_program();
//	delete P;

	Executor Exec(&Trans);
 8007946:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800794a:	f107 0320 	add.w	r3, r7, #32
 800794e:	4611      	mov	r1, r2
 8007950:	4618      	mov	r0, r3
 8007952:	f7f8 ff31 	bl	80007b8 <_ZN8ExecutorC1EP11Transmitter>
	Statement st;
 8007956:	f107 030c 	add.w	r3, r7, #12
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe fb2f 	bl	8005fbe <_ZN9StatementC1Ev>
	auto fc = new Function_call();
 8007960:	2024      	movs	r0, #36	; 0x24
 8007962:	f003 f98e 	bl	800ac82 <_Znwj>
 8007966:	4603      	mov	r3, r0
 8007968:	461c      	mov	r4, r3
 800796a:	4620      	mov	r0, r4
 800796c:	2324      	movs	r3, #36	; 0x24
 800796e:	461a      	mov	r2, r3
 8007970:	2100      	movs	r1, #0
 8007972:	f003 fca3 	bl	800b2bc <memset>
 8007976:	4620      	mov	r0, r4
 8007978:	f7fe fb02 	bl	8005f80 <_ZN13Function_callC1Ev>
 800797c:	60bc      	str	r4, [r7, #8]
	fc->id = std::string("run_single_experiment_iteration");
 800797e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007982:	4618      	mov	r0, r3
 8007984:	f003 f98e 	bl	800aca4 <_ZNSaIcEC1Ev>
 8007988:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800798c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007990:	491b      	ldr	r1, [pc, #108]	; (8007a00 <_Z11my_main_runP20__UART_HandleTypeDef+0xfc>)
 8007992:	4618      	mov	r0, r3
 8007994:	f7f9 f87d 	bl	8000a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	461a      	mov	r2, r3
 800799c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80079a0:	4619      	mov	r1, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	f003 fafe 	bl	800afa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80079a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80079ac:	4618      	mov	r0, r3
 80079ae:	f003 faf3 	bl	800af98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80079b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80079b6:	4618      	mov	r0, r3
 80079b8:	f003 f975 	bl	800aca6 <_ZNSaIcED1Ev>
	fc->arguments = {};
 80079bc:	2300      	movs	r3, #0
 80079be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079c2:	2300      	movs	r3, #0
 80079c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	f103 0018 	add.w	r0, r3, #24
 80079ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80079d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80079d6:	f000 f815 	bl	8007a04 <_ZNSt6vectorIP10ExpressionSaIS1_EEaSESt16initializer_listIS1_E>
	st.content = fc;
 80079da:	f107 0208 	add.w	r2, r7, #8
 80079de:	f107 030c 	add.w	r3, r7, #12
 80079e2:	330c      	adds	r3, #12
 80079e4:	4611      	mov	r1, r2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 f827 	bl	8007a3a <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIRS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISI_SF_E15is_assignable_vIRSI_SF_EERSA_E4typeESG_>

	Exec.run_function(&st);
 80079ec:	f107 020c 	add.w	r2, r7, #12
 80079f0:	f107 0320 	add.w	r3, r7, #32
 80079f4:	4611      	mov	r1, r2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7f8 ff54 	bl	80008a4 <_ZN8Executor12run_functionEP9Statement>

	for(;;)
 80079fc:	e7fe      	b.n	80079fc <_Z11my_main_runP20__UART_HandleTypeDef+0xf8>
 80079fe:	bf00      	nop
 8007a00:	0800bccc 	.word	0x0800bccc

08007a04 <_ZNSt6vectorIP10ExpressionSaIS1_EEaSESt16initializer_listIS1_E>:
      operator=(initializer_list<value_type> __l)
 8007a04:	b5b0      	push	{r4, r5, r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	1d3b      	adds	r3, r7, #4
 8007a0e:	e883 0006 	stmia.w	r3, {r1, r2}
	this->_M_assign_aux(__l.begin(), __l.end(),
 8007a12:	1d3b      	adds	r3, r7, #4
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 f83a 	bl	8007a8e <_ZNKSt16initializer_listIP10ExpressionE5beginEv>
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	1d3b      	adds	r3, r7, #4
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 f841 	bl	8007aa6 <_ZNKSt16initializer_listIP10ExpressionE3endEv>
 8007a24:	4602      	mov	r2, r0
 8007a26:	462b      	mov	r3, r5
 8007a28:	4621      	mov	r1, r4
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f000 f861 	bl	8007af2 <_ZNSt6vectorIP10ExpressionSaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
	return *this;
 8007a30:	68fb      	ldr	r3, [r7, #12]
      }
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bdb0      	pop	{r4, r5, r7, pc}

08007a3a <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIRS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISI_SF_E15is_assignable_vIRSI_SF_EERSA_E4typeESG_>:
	operator=(_Tp&& __rhs)
 8007a3a:	b590      	push	{r4, r7, lr}
 8007a3c:	b085      	sub	sp, #20
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 8007a44:	2301      	movs	r3, #1
 8007a46:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7f9 f975 	bl	8000d38 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	bf0c      	ite	eq
 8007a54:	2301      	moveq	r3, #1
 8007a56:	2300      	movne	r3, #0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIRS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISI_SF_E15is_assignable_vIRSI_SF_EERSA_E4typeESG_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 8007a5e:	6838      	ldr	r0, [r7, #0]
 8007a60:	f7fc fe46 	bl	80046f0 <_ZSt7forwardIRP13Function_callEOT_RNSt16remove_referenceIS3_E4typeE>
 8007a64:	4603      	mov	r3, r0
 8007a66:	681c      	ldr	r4, [r3, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7f9 f9ad 	bl	8000dc8 <_ZSt3getILj1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	601c      	str	r4, [r3, #0]
 8007a72:	e007      	b.n	8007a84 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIRS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISI_SF_E15is_assignable_vIRSI_SF_EERSA_E4typeESG_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8007a74:	6838      	ldr	r0, [r7, #0]
 8007a76:	f7fc fe3b 	bl	80046f0 <_ZSt7forwardIRP13Function_callEOT_RNSt16remove_referenceIS3_E4typeE>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f8d0 	bl	8007c24 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE7emplaceILj1EJRS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSG_E4typeEDpOSH_>
	  return *this;
 8007a84:	687b      	ldr	r3, [r7, #4]
	}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd90      	pop	{r4, r7, pc}

08007a8e <_ZNKSt16initializer_listIP10ExpressionE5beginEv>:
      begin() const noexcept { return _M_array; }
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <_ZNKSt16initializer_listIP10ExpressionE3endEv>:
      end() const noexcept { return begin() + size(); }
 8007aa6:	b590      	push	{r4, r7, lr}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7ff ffed 	bl	8007a8e <_ZNKSt16initializer_listIP10ExpressionE5beginEv>
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f8cd 	bl	8007c56 <_ZNKSt16initializer_listIP10ExpressionE4sizeEv>
 8007abc:	4603      	mov	r3, r0
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4423      	add	r3, r4
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd90      	pop	{r4, r7, pc}

08007aca <_ZSt8distanceIPKP10ExpressionENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
    distance(_InputIterator __first, _InputIterator __last)
 8007aca:	b5b0      	push	{r4, r5, r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8007ad4:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8007ad6:	1d3b      	adds	r3, r7, #4
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 f8c8 	bl	8007c6e <_ZSt19__iterator_categoryIPKP10ExpressionENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 8007ade:	462a      	mov	r2, r5
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f000 f8cd 	bl	8007c82 <_ZSt10__distanceIPKP10ExpressionENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 8007ae8:	4603      	mov	r3, r0
    }
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bdb0      	pop	{r4, r5, r7, pc}

08007af2 <_ZNSt6vectorIP10ExpressionSaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 8007af2:	b5b0      	push	{r4, r5, r7, lr}
 8007af4:	b088      	sub	sp, #32
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	60b9      	str	r1, [r7, #8]
 8007afc:	607a      	str	r2, [r7, #4]
 8007afe:	703b      	strb	r3, [r7, #0]
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);
 8007b00:	6879      	ldr	r1, [r7, #4]
 8007b02:	68b8      	ldr	r0, [r7, #8]
 8007b04:	f7ff ffe1 	bl	8007aca <_ZSt8distanceIPKP10ExpressionENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	61fb      	str	r3, [r7, #28]

	if (__len > capacity())
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 f8c8 	bl	8007ca2 <_ZNKSt6vectorIP10ExpressionSaIS1_EE8capacityEv>
 8007b12:	4602      	mov	r2, r0
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	4293      	cmp	r3, r2
 8007b18:	bf8c      	ite	hi
 8007b1a:	2301      	movhi	r3, #1
 8007b1c:	2300      	movls	r3, #0
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d038      	beq.n	8007b96 <_ZNSt6vectorIP10ExpressionSaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xa4>
	  {
	    _S_check_init_len(__len, _M_get_Tp_allocator());
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7f9 fe02 	bl	8001730 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	4619      	mov	r1, r3
 8007b30:	69f8      	ldr	r0, [r7, #28]
 8007b32:	f000 f8c7 	bl	8007cc4 <_ZNSt6vectorIP10ExpressionSaIS1_EE17_S_check_init_lenEjRKS2_>
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	69f9      	ldr	r1, [r7, #28]
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 f8e9 	bl	8007d14 <_ZNSt6vectorIP10ExpressionSaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_jT_S8_>
 8007b42:	6178      	str	r0, [r7, #20]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681c      	ldr	r4, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7f9 fdee 	bl	8001730 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8007b54:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007b56:	461a      	mov	r2, r3
 8007b58:	4629      	mov	r1, r5
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f7f9 fe04 	bl	8001768 <_ZSt8_DestroyIPP10ExpressionS1_EvT_S3_RSaIT0_E>
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_start);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	109b      	asrs	r3, r3, #2
	    _M_deallocate(this->_M_impl._M_start,
 8007b72:	461a      	mov	r2, r3
 8007b74:	f7fa f9dd 	bl	8001f32 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>
	    this->_M_impl._M_start = __tmp;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	441a      	add	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	609a      	str	r2, [r3, #8]
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
	  }
      }
 8007b94:	e042      	b.n	8007c1c <_ZNSt6vectorIP10ExpressionSaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x12a>
	else if (size() >= __len)
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7f9 fd34 	bl	8001604 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	bf94      	ite	ls
 8007ba4:	2301      	movls	r3, #1
 8007ba6:	2300      	movhi	r3, #0
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00c      	beq.n	8007bc8 <_ZNSt6vectorIP10ExpressionSaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xd6>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	68b8      	ldr	r0, [r7, #8]
 8007bb8:	f000 f8e9 	bl	8007d8e <_ZSt4copyIPKP10ExpressionPS1_ET0_T_S6_S5_>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 f8c3 	bl	8007d4c <_ZNSt6vectorIP10ExpressionSaIS1_EE15_M_erase_at_endEPS1_>
      }
 8007bc6:	e029      	b.n	8007c1c <_ZNSt6vectorIP10ExpressionSaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x12a>
	    _ForwardIterator __mid = __first;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	613b      	str	r3, [r7, #16]
	    std::advance(__mid, size());
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7f9 fd19 	bl	8001604 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	f107 0310 	add.w	r3, r7, #16
 8007bd8:	4611      	mov	r1, r2
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 f8ef 	bl	8007dbe <_ZSt7advanceIPKP10ExpressionjEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 8007be0:	6939      	ldr	r1, [r7, #16]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	68b8      	ldr	r0, [r7, #8]
 8007bea:	f000 f8d0 	bl	8007d8e <_ZSt4copyIPKP10ExpressionPS1_ET0_T_S6_S5_>
	    const size_type __attribute__((__unused__)) __n = __len - size();
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f7f9 fd08 	bl	8001604 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	1a9b      	subs	r3, r3, r2
 8007bfa:	61bb      	str	r3, [r7, #24]
	      std::__uninitialized_copy_a(__mid, __last,
 8007bfc:	693c      	ldr	r4, [r7, #16]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7f9 fd93 	bl	8001730 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8007c0a:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 f8e7 	bl	8007de4 <_ZSt22__uninitialized_copy_aIPKP10ExpressionPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 8007c16:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	605a      	str	r2, [r3, #4]
      }
 8007c1c:	bf00      	nop
 8007c1e:	3720      	adds	r7, #32
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bdb0      	pop	{r4, r5, r7, pc}

08007c24 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE7emplaceILj1EJRS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSG_E4typeEDpOSH_>:
	emplace(_Args&&... __args)
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fe fa81 	bl	8006138 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8007c36:	6838      	ldr	r0, [r7, #0]
 8007c38:	f7fc fd5a 	bl	80046f0 <_ZSt7forwardIRP13Function_callEOT_RNSt16remove_referenceIS3_E4typeE>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f8e0 	bl	8007e06 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEJRS4_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7f9 f8be 	bl	8000dc8 <_ZSt3getILj1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8007c4c:	4603      	mov	r3, r0
	}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <_ZNKSt16initializer_listIP10ExpressionE4sizeEv>:
      size() const noexcept { return _M_len; }
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	4618      	mov	r0, r3
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <_ZSt19__iterator_categoryIPKP10ExpressionENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
    __iterator_category(const _Iter&)
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8007c76:	4618      	mov	r0, r3
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <_ZSt10__distanceIPKP10ExpressionENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8007c82:	b480      	push	{r7}
 8007c84:	b085      	sub	sp, #20
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	109b      	asrs	r3, r3, #2
    }
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <_ZNKSt6vectorIP10ExpressionSaIS1_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	109b      	asrs	r3, r3, #2
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
	...

08007cc4 <_ZNSt6vectorIP10ExpressionSaIS1_EE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8007cc4:	b590      	push	{r4, r7, lr}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8007cce:	f107 030c 	add.w	r3, r7, #12
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fb f80d 	bl	8002cf4 <_ZNSaIP10ExpressionEC1ERKS1_>
 8007cda:	f107 030c 	add.w	r3, r7, #12
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fe fa43 	bl	800616a <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_max_sizeERKS2_>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	bf8c      	ite	hi
 8007cec:	2301      	movhi	r3, #1
 8007cee:	2300      	movls	r3, #0
 8007cf0:	b2dc      	uxtb	r4, r3
 8007cf2:	f107 030c 	add.w	r3, r7, #12
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7f9 fcad 	bl	8001656 <_ZNSaIP10ExpressionED1Ev>
 8007cfc:	2c00      	cmp	r4, #0
 8007cfe:	d002      	beq.n	8007d06 <_ZNSt6vectorIP10ExpressionSaIS1_EE17_S_check_init_lenEjRKS2_+0x42>
	  __throw_length_error(
 8007d00:	4803      	ldr	r0, [pc, #12]	; (8007d10 <_ZNSt6vectorIP10ExpressionSaIS1_EE17_S_check_init_lenEjRKS2_+0x4c>)
 8007d02:	f003 f889 	bl	800ae18 <_ZSt20__throw_length_errorPKc>
	return __n;
 8007d06:	687b      	ldr	r3, [r7, #4]
      }
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd90      	pop	{r4, r7, pc}
 8007d10:	0800bd00 	.word	0x0800bd00

08007d14 <_ZNSt6vectorIP10ExpressionSaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_jT_S8_>:
	_M_allocate_and_copy(size_type __n,
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
 8007d20:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	68b9      	ldr	r1, [r7, #8]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fb f806 	bl	8002d38 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj>
 8007d2c:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7f9 fcfd 	bl	8001730 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8007d36:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f851 	bl	8007de4 <_ZSt22__uninitialized_copy_aIPKP10ExpressionPS1_S1_ET0_T_S6_S5_RSaIT1_E>
	      return __result;
 8007d42:	697b      	ldr	r3, [r7, #20]
	}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <_ZNSt6vectorIP10ExpressionSaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8007d4c:	b590      	push	{r4, r7, lr}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	109b      	asrs	r3, r3, #2
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00e      	beq.n	8007d86 <_ZNSt6vectorIP10ExpressionSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7f9 fcde 	bl	8001730 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8007d74:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8007d76:	461a      	mov	r2, r3
 8007d78:	4621      	mov	r1, r4
 8007d7a:	6838      	ldr	r0, [r7, #0]
 8007d7c:	f7f9 fcf4 	bl	8001768 <_ZSt8_DestroyIPP10ExpressionS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8007d86:	bf00      	nop
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd90      	pop	{r4, r7, pc}

08007d8e <_ZSt4copyIPKP10ExpressionPS1_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8007d8e:	b590      	push	{r4, r7, lr}
 8007d90:	b085      	sub	sp, #20
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 f852 	bl	8007e44 <_ZSt12__miter_baseIPKP10ExpressionET_S4_>
 8007da0:	4604      	mov	r4, r0
 8007da2:	68b8      	ldr	r0, [r7, #8]
 8007da4:	f000 f84e 	bl	8007e44 <_ZSt12__miter_baseIPKP10ExpressionET_S4_>
 8007da8:	4603      	mov	r3, r0
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	4619      	mov	r1, r3
 8007dae:	4620      	mov	r0, r4
 8007db0:	f000 f853 	bl	8007e5a <_ZSt14__copy_move_a2ILb0EPKP10ExpressionPS1_ET1_T0_S6_S5_>
 8007db4:	4603      	mov	r3, r0
    }
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd90      	pop	{r4, r7, pc}

08007dbe <_ZSt7advanceIPKP10ExpressionjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8007dbe:	b590      	push	{r4, r7, lr}
 8007dc0:	b085      	sub	sp, #20
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff ff4e 	bl	8007c6e <_ZSt19__iterator_categoryIPKP10ExpressionENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8007dd2:	4622      	mov	r2, r4
 8007dd4:	68f9      	ldr	r1, [r7, #12]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f862 	bl	8007ea0 <_ZSt9__advanceIPKP10ExpressioniEvRT_T0_St26random_access_iterator_tag>
    }
 8007ddc:	bf00      	nop
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd90      	pop	{r4, r7, pc}

08007de4 <_ZSt22__uninitialized_copy_aIPKP10ExpressionPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 f865 	bl	8007ec6 <_ZSt18uninitialized_copyIPKP10ExpressionPS1_ET0_T_S6_S5_>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEJRS4_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8007e06:	b590      	push	{r4, r7, lr}
 8007e08:	b085      	sub	sp, #20
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7f8 ffc4 	bl	8000da4 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>
 8007e1c:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8007e1e:	6838      	ldr	r0, [r7, #0]
 8007e20:	f7fc fc66 	bl	80046f0 <_ZSt7forwardIRP13Function_callEOT_RNSt16remove_referenceIS3_E4typeE>
 8007e24:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8007e26:	681c      	ldr	r4, [r3, #0]
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f7fe f992 	bl	8006152 <_ZSt9addressofIP13Function_callEPT_RS2_>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	4619      	mov	r1, r3
 8007e32:	2004      	movs	r0, #4
 8007e34:	f7f8 fb6c 	bl	8000510 <_ZnwjPv>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	601c      	str	r4, [r3, #0]
    }
 8007e3c:	bf00      	nop
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd90      	pop	{r4, r7, pc}

08007e44 <_ZSt12__miter_baseIPKP10ExpressionET_S4_>:
    __miter_base(_Iterator __it)
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <_ZSt14__copy_move_a2ILb0EPKP10ExpressionPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007e5a:	b5b0      	push	{r4, r5, r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	60f8      	str	r0, [r7, #12]
 8007e62:	60b9      	str	r1, [r7, #8]
 8007e64:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 f83f 	bl	8007eea <_ZSt12__niter_baseIPKP10ExpressionET_S4_>
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	68b8      	ldr	r0, [r7, #8]
 8007e70:	f000 f83b 	bl	8007eea <_ZSt12__niter_baseIPKP10ExpressionET_S4_>
 8007e74:	4605      	mov	r5, r0
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fc f81c 	bl	8003eb6 <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	461a      	mov	r2, r3
 8007e82:	4629      	mov	r1, r5
 8007e84:	4620      	mov	r0, r4
 8007e86:	f7fc f821 	bl	8003ecc <_ZSt13__copy_move_aILb0EPKP10ExpressionPS1_ET1_T0_S6_S5_>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	1d3b      	adds	r3, r7, #4
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fc f82d 	bl	8003ef0 <_ZSt12__niter_wrapIPP10ExpressionET_RKS3_S3_>
 8007e96:	4603      	mov	r3, r0
    }
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bdb0      	pop	{r4, r5, r7, pc}

08007ea0 <_ZSt9__advanceIPKP10ExpressioniEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	441a      	add	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	601a      	str	r2, [r3, #0]
    }
 8007eba:	bf00      	nop
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <_ZSt18uninitialized_copyIPKP10ExpressionPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	68b9      	ldr	r1, [r7, #8]
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 f810 	bl	8007f00 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKP10ExpressionPS3_EET0_T_S8_S7_>
 8007ee0:	4603      	mov	r3, r0
    }
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <_ZSt12__niter_baseIPKP10ExpressionET_S4_>:
    __niter_base(_Iterator __it)
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKP10ExpressionPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	68b9      	ldr	r1, [r7, #8]
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f7ff ff3c 	bl	8007d8e <_ZSt4copyIPKP10ExpressionPS1_ET0_T_S6_S5_>
 8007f16:	4603      	mov	r3, r0
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <_Z41__static_initialization_and_destruction_0ii>:
	{

	}
}
 8007f20:	b590      	push	{r4, r7, lr}
 8007f22:	b0e7      	sub	sp, #412	; 0x19c
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	1d3b      	adds	r3, r7, #4
 8007f28:	6018      	str	r0, [r3, #0]
 8007f2a:	463b      	mov	r3, r7
 8007f2c:	6019      	str	r1, [r3, #0]
 8007f2e:	1d3b      	adds	r3, r7, #4
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	f040 819d 	bne.w	8008272 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8007f38:	463b      	mov	r3, r7
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f40:	4293      	cmp	r3, r2
 8007f42:	f040 8196 	bne.w	8008272 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8007f46:	f107 0314 	add.w	r3, r7, #20
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	2322      	movs	r3, #34	; 0x22
 8007f4e:	461a      	mov	r2, r3
 8007f50:	2100      	movs	r1, #0
 8007f52:	f003 f9b3 	bl	800b2bc <memset>
 8007f56:	f107 0314 	add.w	r3, r7, #20
 8007f5a:	223a      	movs	r2, #58	; 0x3a
 8007f5c:	701a      	strb	r2, [r3, #0]
 8007f5e:	f107 0314 	add.w	r3, r7, #20
 8007f62:	2201      	movs	r2, #1
 8007f64:	705a      	strb	r2, [r3, #1]
 8007f66:	f107 0314 	add.w	r3, r7, #20
 8007f6a:	220a      	movs	r2, #10
 8007f6c:	709a      	strb	r2, [r3, #2]
 8007f6e:	f107 0314 	add.w	r3, r7, #20
 8007f72:	220a      	movs	r2, #10
 8007f74:	70da      	strb	r2, [r3, #3]
 8007f76:	f107 0314 	add.w	r3, r7, #20
 8007f7a:	222c      	movs	r2, #44	; 0x2c
 8007f7c:	711a      	strb	r2, [r3, #4]
 8007f7e:	f107 0314 	add.w	r3, r7, #20
 8007f82:	220c      	movs	r2, #12
 8007f84:	715a      	strb	r2, [r3, #5]
 8007f86:	f107 0314 	add.w	r3, r7, #20
 8007f8a:	222e      	movs	r2, #46	; 0x2e
 8007f8c:	719a      	strb	r2, [r3, #6]
 8007f8e:	f107 0314 	add.w	r3, r7, #20
 8007f92:	220b      	movs	r2, #11
 8007f94:	71da      	strb	r2, [r3, #7]
 8007f96:	f107 0314 	add.w	r3, r7, #20
 8007f9a:	225b      	movs	r2, #91	; 0x5b
 8007f9c:	721a      	strb	r2, [r3, #8]
 8007f9e:	f107 0314 	add.w	r3, r7, #20
 8007fa2:	220d      	movs	r2, #13
 8007fa4:	725a      	strb	r2, [r3, #9]
 8007fa6:	f107 0314 	add.w	r3, r7, #20
 8007faa:	225d      	movs	r2, #93	; 0x5d
 8007fac:	729a      	strb	r2, [r3, #10]
 8007fae:	f107 0314 	add.w	r3, r7, #20
 8007fb2:	220e      	movs	r2, #14
 8007fb4:	72da      	strb	r2, [r3, #11]
 8007fb6:	f107 0314 	add.w	r3, r7, #20
 8007fba:	227c      	movs	r2, #124	; 0x7c
 8007fbc:	731a      	strb	r2, [r3, #12]
 8007fbe:	f107 0314 	add.w	r3, r7, #20
 8007fc2:	2215      	movs	r2, #21
 8007fc4:	735a      	strb	r2, [r3, #13]
 8007fc6:	f107 0314 	add.w	r3, r7, #20
 8007fca:	2226      	movs	r2, #38	; 0x26
 8007fcc:	739a      	strb	r2, [r3, #14]
 8007fce:	f107 0314 	add.w	r3, r7, #20
 8007fd2:	2216      	movs	r2, #22
 8007fd4:	73da      	strb	r2, [r3, #15]
 8007fd6:	f107 0314 	add.w	r3, r7, #20
 8007fda:	222b      	movs	r2, #43	; 0x2b
 8007fdc:	741a      	strb	r2, [r3, #16]
 8007fde:	f107 0314 	add.w	r3, r7, #20
 8007fe2:	221f      	movs	r2, #31
 8007fe4:	745a      	strb	r2, [r3, #17]
 8007fe6:	f107 0314 	add.w	r3, r7, #20
 8007fea:	222d      	movs	r2, #45	; 0x2d
 8007fec:	749a      	strb	r2, [r3, #18]
 8007fee:	f107 0314 	add.w	r3, r7, #20
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	74da      	strb	r2, [r3, #19]
 8007ff6:	f107 0314 	add.w	r3, r7, #20
 8007ffa:	222a      	movs	r2, #42	; 0x2a
 8007ffc:	751a      	strb	r2, [r3, #20]
 8007ffe:	f107 0314 	add.w	r3, r7, #20
 8008002:	2221      	movs	r2, #33	; 0x21
 8008004:	755a      	strb	r2, [r3, #21]
 8008006:	f107 0314 	add.w	r3, r7, #20
 800800a:	222f      	movs	r2, #47	; 0x2f
 800800c:	759a      	strb	r2, [r3, #22]
 800800e:	f107 0314 	add.w	r3, r7, #20
 8008012:	2222      	movs	r2, #34	; 0x22
 8008014:	75da      	strb	r2, [r3, #23]
 8008016:	f107 0314 	add.w	r3, r7, #20
 800801a:	225e      	movs	r2, #94	; 0x5e
 800801c:	761a      	strb	r2, [r3, #24]
 800801e:	f107 0314 	add.w	r3, r7, #20
 8008022:	2223      	movs	r2, #35	; 0x23
 8008024:	765a      	strb	r2, [r3, #25]
 8008026:	f107 0314 	add.w	r3, r7, #20
 800802a:	2225      	movs	r2, #37	; 0x25
 800802c:	769a      	strb	r2, [r3, #26]
 800802e:	f107 0314 	add.w	r3, r7, #20
 8008032:	2224      	movs	r2, #36	; 0x24
 8008034:	76da      	strb	r2, [r3, #27]
 8008036:	f107 0314 	add.w	r3, r7, #20
 800803a:	2228      	movs	r2, #40	; 0x28
 800803c:	771a      	strb	r2, [r3, #28]
 800803e:	f107 0314 	add.w	r3, r7, #20
 8008042:	2226      	movs	r2, #38	; 0x26
 8008044:	775a      	strb	r2, [r3, #29]
 8008046:	f107 0314 	add.w	r3, r7, #20
 800804a:	2229      	movs	r2, #41	; 0x29
 800804c:	779a      	strb	r2, [r3, #30]
 800804e:	f107 0314 	add.w	r3, r7, #20
 8008052:	2227      	movs	r2, #39	; 0x27
 8008054:	77da      	strb	r2, [r3, #31]
 8008056:	f107 0314 	add.w	r3, r7, #20
 800805a:	2225      	movs	r2, #37	; 0x25
 800805c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8008060:	f107 030c 	add.w	r3, r7, #12
 8008064:	f107 0214 	add.w	r2, r7, #20
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	f107 030c 	add.w	r3, r7, #12
 800806e:	2211      	movs	r2, #17
 8008070:	605a      	str	r2, [r3, #4]
 8008072:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008076:	4618      	mov	r0, r3
 8008078:	f7f8 fcb8 	bl	80009ec <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 800807c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008080:	f107 020c 	add.w	r2, r7, #12
 8008084:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	460b      	mov	r3, r1
 800808c:	ca06      	ldmia	r2, {r1, r2}
 800808e:	4885      	ldr	r0, [pc, #532]	; (80082a4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8008090:	f7f8 fcc4 	bl	8000a1c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8008094:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008098:	4618      	mov	r0, r3
 800809a:	f7f8 fcb3 	bl	8000a04 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 800809e:	2305      	movs	r3, #5
 80080a0:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80080a4:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80080a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80080ac:	497e      	ldr	r1, [pc, #504]	; (80082a8 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7f8 fa94 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80080b4:	2306      	movs	r3, #6
 80080b6:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80080ba:	f207 1263 	addw	r2, r7, #355	; 0x163
 80080be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80080c2:	331c      	adds	r3, #28
 80080c4:	4979      	ldr	r1, [pc, #484]	; (80082ac <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7f8 fab0 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80080cc:	2307      	movs	r3, #7
 80080ce:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80080d2:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80080d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80080da:	3338      	adds	r3, #56	; 0x38
 80080dc:	4974      	ldr	r1, [pc, #464]	; (80082b0 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80080de:	4618      	mov	r0, r3
 80080e0:	f7f8 faa4 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80080e4:	2308      	movs	r3, #8
 80080e6:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80080ea:	f207 1265 	addw	r2, r7, #357	; 0x165
 80080ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80080f2:	3354      	adds	r3, #84	; 0x54
 80080f4:	496f      	ldr	r1, [pc, #444]	; (80082b4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7f8 fa70 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 80080fc:	2309      	movs	r3, #9
 80080fe:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8008102:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8008106:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800810a:	3370      	adds	r3, #112	; 0x70
 800810c:	496a      	ldr	r1, [pc, #424]	; (80082b8 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800810e:	4618      	mov	r0, r3
 8008110:	f7f8 fab4 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8008114:	2310      	movs	r3, #16
 8008116:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 800811a:	f207 1267 	addw	r2, r7, #359	; 0x167
 800811e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008122:	338c      	adds	r3, #140	; 0x8c
 8008124:	4965      	ldr	r1, [pc, #404]	; (80082bc <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8008126:	4618      	mov	r0, r3
 8008128:	f7f8 fad0 	bl	80006cc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 800812c:	2311      	movs	r3, #17
 800812e:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8008132:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8008136:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800813a:	33a8      	adds	r3, #168	; 0xa8
 800813c:	4960      	ldr	r1, [pc, #384]	; (80082c0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800813e:	4618      	mov	r0, r3
 8008140:	f7f8 fa9c 	bl	800067c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8008144:	2312      	movs	r3, #18
 8008146:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 800814a:	f207 1269 	addw	r2, r7, #361	; 0x169
 800814e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008152:	33c4      	adds	r3, #196	; 0xc4
 8008154:	495b      	ldr	r1, [pc, #364]	; (80082c4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008156:	4618      	mov	r0, r3
 8008158:	f7f8 fa40 	bl	80005dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 800815c:	2313      	movs	r3, #19
 800815e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8008162:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8008166:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800816a:	33e0      	adds	r3, #224	; 0xe0
 800816c:	4956      	ldr	r1, [pc, #344]	; (80082c8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800816e:	4618      	mov	r0, r3
 8008170:	f7f8 fa5c 	bl	800062c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8008174:	2314      	movs	r3, #20
 8008176:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 800817a:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800817e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008182:	33fc      	adds	r3, #252	; 0xfc
 8008184:	4951      	ldr	r1, [pc, #324]	; (80082cc <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8008186:	4618      	mov	r0, r3
 8008188:	f7f8 fac8 	bl	800071c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 800818c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008190:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800819a:	220a      	movs	r2, #10
 800819c:	605a      	str	r2, [r3, #4]
 800819e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7f8 fcc7 	bl	8000b36 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80081a8:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80081ac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80081b0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	460b      	mov	r3, r1
 80081b8:	ca06      	ldmia	r2, {r1, r2}
 80081ba:	4845      	ldr	r0, [pc, #276]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80081bc:	f7f8 fcd3 	bl	8000b66 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80081c0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7f8 fcc2 	bl	8000b4e <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80081ca:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80081ce:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80081d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80081d6:	429c      	cmp	r4, r3
 80081d8:	d004      	beq.n	80081e4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 80081da:	3c1c      	subs	r4, #28
 80081dc:	4620      	mov	r0, r4
 80081de:	f7f8 f9f0 	bl	80005c2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80081e2:	e7f6      	b.n	80081d2 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80081e4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	605a      	str	r2, [r3, #4]
 80081ee:	609a      	str	r2, [r3, #8]
 80081f0:	233c      	movs	r3, #60	; 0x3c
 80081f2:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80081f6:	231b      	movs	r3, #27
 80081f8:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80081fc:	231c      	movs	r3, #28
 80081fe:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8008202:	233e      	movs	r3, #62	; 0x3e
 8008204:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8008208:	2319      	movs	r3, #25
 800820a:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800820e:	231a      	movs	r3, #26
 8008210:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8008214:	233d      	movs	r3, #61	; 0x3d
 8008216:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 800821a:	2318      	movs	r3, #24
 800821c:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8008220:	231d      	movs	r3, #29
 8008222:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8008226:	2321      	movs	r3, #33	; 0x21
 8008228:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 800822c:	2317      	movs	r3, #23
 800822e:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8008232:	231e      	movs	r3, #30
 8008234:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8008238:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800823c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8008240:	2304      	movs	r3, #4
 8008242:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8008246:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800824a:	4618      	mov	r0, r3
 800824c:	f7f8 fcbb 	bl	8000bc6 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8008250:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8008254:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	4613      	mov	r3, r2
 800825c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8008260:	ca06      	ldmia	r2, {r1, r2}
 8008262:	481c      	ldr	r0, [pc, #112]	; (80082d4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8008264:	f7f8 fcc7 	bl	8000bf6 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8008268:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800826c:	4618      	mov	r0, r3
 800826e:	f7f8 fcb6 	bl	8000bde <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8008272:	1d3b      	adds	r3, r7, #4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10e      	bne.n	8008298 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800827a:	463b      	mov	r3, r7
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008282:	4293      	cmp	r3, r2
 8008284:	d108      	bne.n	8008298 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8008286:	4813      	ldr	r0, [pc, #76]	; (80082d4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8008288:	f7fc f81e 	bl	80042c8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 800828c:	4810      	ldr	r0, [pc, #64]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800828e:	f7fc f828 	bl	80042e2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8008292:	4804      	ldr	r0, [pc, #16]	; (80082a4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8008294:	f7fc f832 	bl	80042fc <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8008298:	bf00      	nop
 800829a:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd90      	pop	{r4, r7, pc}
 80082a2:	bf00      	nop
 80082a4:	200003e0 	.word	0x200003e0
 80082a8:	0800bd60 	.word	0x0800bd60
 80082ac:	0800bd68 	.word	0x0800bd68
 80082b0:	0800bd70 	.word	0x0800bd70
 80082b4:	0800bd78 	.word	0x0800bd78
 80082b8:	0800bd80 	.word	0x0800bd80
 80082bc:	0800bd88 	.word	0x0800bd88
 80082c0:	0800bd8c 	.word	0x0800bd8c
 80082c4:	0800bd94 	.word	0x0800bd94
 80082c8:	0800bd9c 	.word	0x0800bd9c
 80082cc:	0800bda4 	.word	0x0800bda4
 80082d0:	200003f8 	.word	0x200003f8
 80082d4:	20000410 	.word	0x20000410

080082d8 <_GLOBAL__sub_I__Z11my_main_runP20__UART_HandleTypeDef>:
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
 80082dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80082e0:	2001      	movs	r0, #1
 80082e2:	f7ff fe1d 	bl	8007f20 <_Z41__static_initialization_and_destruction_0ii>
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <_GLOBAL__sub_D__Z11my_main_runP20__UART_HandleTypeDef>:
 80082e8:	b580      	push	{r7, lr}
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80082f0:	2000      	movs	r0, #0
 80082f2:	f7ff fe15 	bl	8007f20 <_Z41__static_initialization_and_destruction_0ii>
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80082fe:	4b0f      	ldr	r3, [pc, #60]	; (800833c <HAL_MspInit+0x44>)
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	4a0e      	ldr	r2, [pc, #56]	; (800833c <HAL_MspInit+0x44>)
 8008304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008308:	6413      	str	r3, [r2, #64]	; 0x40
 800830a:	4b0c      	ldr	r3, [pc, #48]	; (800833c <HAL_MspInit+0x44>)
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008312:	607b      	str	r3, [r7, #4]
 8008314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008316:	4b09      	ldr	r3, [pc, #36]	; (800833c <HAL_MspInit+0x44>)
 8008318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831a:	4a08      	ldr	r2, [pc, #32]	; (800833c <HAL_MspInit+0x44>)
 800831c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008320:	6453      	str	r3, [r2, #68]	; 0x44
 8008322:	4b06      	ldr	r3, [pc, #24]	; (800833c <HAL_MspInit+0x44>)
 8008324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40023800 	.word	0x40023800

08008340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08a      	sub	sp, #40	; 0x28
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008348:	f107 0314 	add.w	r3, r7, #20
 800834c:	2200      	movs	r2, #0
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	605a      	str	r2, [r3, #4]
 8008352:	609a      	str	r2, [r3, #8]
 8008354:	60da      	str	r2, [r3, #12]
 8008356:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a1b      	ldr	r2, [pc, #108]	; (80083cc <HAL_UART_MspInit+0x8c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d130      	bne.n	80083c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008362:	4b1b      	ldr	r3, [pc, #108]	; (80083d0 <HAL_UART_MspInit+0x90>)
 8008364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008366:	4a1a      	ldr	r2, [pc, #104]	; (80083d0 <HAL_UART_MspInit+0x90>)
 8008368:	f043 0310 	orr.w	r3, r3, #16
 800836c:	6453      	str	r3, [r2, #68]	; 0x44
 800836e:	4b18      	ldr	r3, [pc, #96]	; (80083d0 <HAL_UART_MspInit+0x90>)
 8008370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008372:	f003 0310 	and.w	r3, r3, #16
 8008376:	613b      	str	r3, [r7, #16]
 8008378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800837a:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <HAL_UART_MspInit+0x90>)
 800837c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837e:	4a14      	ldr	r2, [pc, #80]	; (80083d0 <HAL_UART_MspInit+0x90>)
 8008380:	f043 0301 	orr.w	r3, r3, #1
 8008384:	6313      	str	r3, [r2, #48]	; 0x30
 8008386:	4b12      	ldr	r3, [pc, #72]	; (80083d0 <HAL_UART_MspInit+0x90>)
 8008388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008392:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008398:	2302      	movs	r3, #2
 800839a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800839c:	2300      	movs	r3, #0
 800839e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083a0:	2303      	movs	r3, #3
 80083a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80083a4:	2307      	movs	r3, #7
 80083a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083a8:	f107 0314 	add.w	r3, r7, #20
 80083ac:	4619      	mov	r1, r3
 80083ae:	4809      	ldr	r0, [pc, #36]	; (80083d4 <HAL_UART_MspInit+0x94>)
 80083b0:	f000 fafe 	bl	80089b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80083b4:	2200      	movs	r2, #0
 80083b6:	2100      	movs	r1, #0
 80083b8:	2025      	movs	r0, #37	; 0x25
 80083ba:	f000 fa30 	bl	800881e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80083be:	2025      	movs	r0, #37	; 0x25
 80083c0:	f000 fa49 	bl	8008856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80083c4:	bf00      	nop
 80083c6:	3728      	adds	r7, #40	; 0x28
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40011000 	.word	0x40011000
 80083d0:	40023800 	.word	0x40023800
 80083d4:	40020000 	.word	0x40020000

080083d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80083dc:	e7fe      	b.n	80083dc <NMI_Handler+0x4>

080083de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80083de:	b480      	push	{r7}
 80083e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80083e2:	e7fe      	b.n	80083e2 <HardFault_Handler+0x4>

080083e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80083e4:	b480      	push	{r7}
 80083e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80083e8:	e7fe      	b.n	80083e8 <MemManage_Handler+0x4>

080083ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80083ea:	b480      	push	{r7}
 80083ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80083ee:	e7fe      	b.n	80083ee <BusFault_Handler+0x4>

080083f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80083f0:	b480      	push	{r7}
 80083f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80083f4:	e7fe      	b.n	80083f4 <UsageFault_Handler+0x4>

080083f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80083f6:	b480      	push	{r7}
 80083f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80083fa:	bf00      	nop
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008408:	bf00      	nop
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008412:	b480      	push	{r7}
 8008414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008416:	bf00      	nop
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008424:	f000 f8dc 	bl	80085e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008428:	bf00      	nop
 800842a:	bd80      	pop	{r7, pc}

0800842c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008430:	4802      	ldr	r0, [pc, #8]	; (800843c <USART1_IRQHandler+0x10>)
 8008432:	f001 fe05 	bl	800a040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008436:	bf00      	nop
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	2000035c 	.word	0x2000035c

08008440 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
	return 1;
 8008444:	2301      	movs	r3, #1
}
 8008446:	4618      	mov	r0, r3
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <_kill>:

int _kill(int pid, int sig)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800845a:	f002 fea5 	bl	800b1a8 <__errno>
 800845e:	4603      	mov	r3, r0
 8008460:	2216      	movs	r2, #22
 8008462:	601a      	str	r2, [r3, #0]
	return -1;
 8008464:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <_exit>:

void _exit (int status)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008478:	f04f 31ff 	mov.w	r1, #4294967295
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff ffe7 	bl	8008450 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008482:	e7fe      	b.n	8008482 <_exit+0x12>

08008484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800848c:	4a14      	ldr	r2, [pc, #80]	; (80084e0 <_sbrk+0x5c>)
 800848e:	4b15      	ldr	r3, [pc, #84]	; (80084e4 <_sbrk+0x60>)
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008498:	4b13      	ldr	r3, [pc, #76]	; (80084e8 <_sbrk+0x64>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d102      	bne.n	80084a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80084a0:	4b11      	ldr	r3, [pc, #68]	; (80084e8 <_sbrk+0x64>)
 80084a2:	4a12      	ldr	r2, [pc, #72]	; (80084ec <_sbrk+0x68>)
 80084a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80084a6:	4b10      	ldr	r3, [pc, #64]	; (80084e8 <_sbrk+0x64>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4413      	add	r3, r2
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d207      	bcs.n	80084c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80084b4:	f002 fe78 	bl	800b1a8 <__errno>
 80084b8:	4603      	mov	r3, r0
 80084ba:	220c      	movs	r2, #12
 80084bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80084be:	f04f 33ff 	mov.w	r3, #4294967295
 80084c2:	e009      	b.n	80084d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80084c4:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <_sbrk+0x64>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80084ca:	4b07      	ldr	r3, [pc, #28]	; (80084e8 <_sbrk+0x64>)
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4413      	add	r3, r2
 80084d2:	4a05      	ldr	r2, [pc, #20]	; (80084e8 <_sbrk+0x64>)
 80084d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80084d6:	68fb      	ldr	r3, [r7, #12]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20050000 	.word	0x20050000
 80084e4:	00000400 	.word	0x00000400
 80084e8:	20000428 	.word	0x20000428
 80084ec:	20000450 	.word	0x20000450

080084f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80084f0:	b480      	push	{r7}
 80084f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084f4:	4b06      	ldr	r3, [pc, #24]	; (8008510 <SystemInit+0x20>)
 80084f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fa:	4a05      	ldr	r2, [pc, #20]	; (8008510 <SystemInit+0x20>)
 80084fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008504:	bf00      	nop
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	e000ed00 	.word	0xe000ed00

08008514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800854c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008518:	480d      	ldr	r0, [pc, #52]	; (8008550 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800851a:	490e      	ldr	r1, [pc, #56]	; (8008554 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800851c:	4a0e      	ldr	r2, [pc, #56]	; (8008558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800851e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008520:	e002      	b.n	8008528 <LoopCopyDataInit>

08008522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008526:	3304      	adds	r3, #4

08008528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800852a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800852c:	d3f9      	bcc.n	8008522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800852e:	4a0b      	ldr	r2, [pc, #44]	; (800855c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008530:	4c0b      	ldr	r4, [pc, #44]	; (8008560 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008534:	e001      	b.n	800853a <LoopFillZerobss>

08008536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008538:	3204      	adds	r2, #4

0800853a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800853a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800853c:	d3fb      	bcc.n	8008536 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800853e:	f7ff ffd7 	bl	80084f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008542:	f002 fe37 	bl	800b1b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008546:	f7fe feeb 	bl	8007320 <main>
  bx  lr    
 800854a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800854c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8008550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008554:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8008558:	0800bf34 	.word	0x0800bf34
  ldr r2, =_sbss
 800855c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8008560:	2000044c 	.word	0x2000044c

08008564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008564:	e7fe      	b.n	8008564 <ADC_IRQHandler>

08008566 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800856a:	2003      	movs	r0, #3
 800856c:	f000 f94c 	bl	8008808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008570:	200f      	movs	r0, #15
 8008572:	f000 f805 	bl	8008580 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8008576:	f7ff febf 	bl	80082f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008588:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <HAL_InitTick+0x54>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	4b12      	ldr	r3, [pc, #72]	; (80085d8 <HAL_InitTick+0x58>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	4619      	mov	r1, r3
 8008592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008596:	fbb3 f3f1 	udiv	r3, r3, r1
 800859a:	fbb2 f3f3 	udiv	r3, r2, r3
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 f967 	bl	8008872 <HAL_SYSTICK_Config>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e00e      	b.n	80085cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b0f      	cmp	r3, #15
 80085b2:	d80a      	bhi.n	80085ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80085b4:	2200      	movs	r2, #0
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	f04f 30ff 	mov.w	r0, #4294967295
 80085bc:	f000 f92f 	bl	800881e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80085c0:	4a06      	ldr	r2, [pc, #24]	; (80085dc <HAL_InitTick+0x5c>)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e000      	b.n	80085cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20000000 	.word	0x20000000
 80085d8:	20000008 	.word	0x20000008
 80085dc:	20000004 	.word	0x20000004

080085e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80085e4:	4b06      	ldr	r3, [pc, #24]	; (8008600 <HAL_IncTick+0x20>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	4b06      	ldr	r3, [pc, #24]	; (8008604 <HAL_IncTick+0x24>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4413      	add	r3, r2
 80085f0:	4a04      	ldr	r2, [pc, #16]	; (8008604 <HAL_IncTick+0x24>)
 80085f2:	6013      	str	r3, [r2, #0]
}
 80085f4:	bf00      	nop
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	20000008 	.word	0x20000008
 8008604:	20000438 	.word	0x20000438

08008608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008608:	b480      	push	{r7}
 800860a:	af00      	add	r7, sp, #0
  return uwTick;
 800860c:	4b03      	ldr	r3, [pc, #12]	; (800861c <HAL_GetTick+0x14>)
 800860e:	681b      	ldr	r3, [r3, #0]
}
 8008610:	4618      	mov	r0, r3
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	20000438 	.word	0x20000438

08008620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008628:	f7ff ffee 	bl	8008608 <HAL_GetTick>
 800862c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008638:	d005      	beq.n	8008646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800863a:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <HAL_Delay+0x44>)
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4413      	add	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008646:	bf00      	nop
 8008648:	f7ff ffde 	bl	8008608 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	429a      	cmp	r2, r3
 8008656:	d8f7      	bhi.n	8008648 <HAL_Delay+0x28>
  {
  }
}
 8008658:	bf00      	nop
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20000008 	.word	0x20000008

08008668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008678:	4b0b      	ldr	r3, [pc, #44]	; (80086a8 <__NVIC_SetPriorityGrouping+0x40>)
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008684:	4013      	ands	r3, r2
 8008686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008690:	4b06      	ldr	r3, [pc, #24]	; (80086ac <__NVIC_SetPriorityGrouping+0x44>)
 8008692:	4313      	orrs	r3, r2
 8008694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008696:	4a04      	ldr	r2, [pc, #16]	; (80086a8 <__NVIC_SetPriorityGrouping+0x40>)
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	60d3      	str	r3, [r2, #12]
}
 800869c:	bf00      	nop
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	e000ed00 	.word	0xe000ed00
 80086ac:	05fa0000 	.word	0x05fa0000

080086b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80086b0:	b480      	push	{r7}
 80086b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80086b4:	4b04      	ldr	r3, [pc, #16]	; (80086c8 <__NVIC_GetPriorityGrouping+0x18>)
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	0a1b      	lsrs	r3, r3, #8
 80086ba:	f003 0307 	and.w	r3, r3, #7
}
 80086be:	4618      	mov	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	e000ed00 	.word	0xe000ed00

080086cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	db0b      	blt.n	80086f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	f003 021f 	and.w	r2, r3, #31
 80086e4:	4907      	ldr	r1, [pc, #28]	; (8008704 <__NVIC_EnableIRQ+0x38>)
 80086e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086ea:	095b      	lsrs	r3, r3, #5
 80086ec:	2001      	movs	r0, #1
 80086ee:	fa00 f202 	lsl.w	r2, r0, r2
 80086f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80086f6:	bf00      	nop
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	e000e100 	.word	0xe000e100

08008708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	6039      	str	r1, [r7, #0]
 8008712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008718:	2b00      	cmp	r3, #0
 800871a:	db0a      	blt.n	8008732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	b2da      	uxtb	r2, r3
 8008720:	490c      	ldr	r1, [pc, #48]	; (8008754 <__NVIC_SetPriority+0x4c>)
 8008722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008726:	0112      	lsls	r2, r2, #4
 8008728:	b2d2      	uxtb	r2, r2
 800872a:	440b      	add	r3, r1
 800872c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008730:	e00a      	b.n	8008748 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	b2da      	uxtb	r2, r3
 8008736:	4908      	ldr	r1, [pc, #32]	; (8008758 <__NVIC_SetPriority+0x50>)
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	f003 030f 	and.w	r3, r3, #15
 800873e:	3b04      	subs	r3, #4
 8008740:	0112      	lsls	r2, r2, #4
 8008742:	b2d2      	uxtb	r2, r2
 8008744:	440b      	add	r3, r1
 8008746:	761a      	strb	r2, [r3, #24]
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	e000e100 	.word	0xe000e100
 8008758:	e000ed00 	.word	0xe000ed00

0800875c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800875c:	b480      	push	{r7}
 800875e:	b089      	sub	sp, #36	; 0x24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f003 0307 	and.w	r3, r3, #7
 800876e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	f1c3 0307 	rsb	r3, r3, #7
 8008776:	2b04      	cmp	r3, #4
 8008778:	bf28      	it	cs
 800877a:	2304      	movcs	r3, #4
 800877c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	3304      	adds	r3, #4
 8008782:	2b06      	cmp	r3, #6
 8008784:	d902      	bls.n	800878c <NVIC_EncodePriority+0x30>
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	3b03      	subs	r3, #3
 800878a:	e000      	b.n	800878e <NVIC_EncodePriority+0x32>
 800878c:	2300      	movs	r3, #0
 800878e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008790:	f04f 32ff 	mov.w	r2, #4294967295
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	fa02 f303 	lsl.w	r3, r2, r3
 800879a:	43da      	mvns	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	401a      	ands	r2, r3
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087a4:	f04f 31ff 	mov.w	r1, #4294967295
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	fa01 f303 	lsl.w	r3, r1, r3
 80087ae:	43d9      	mvns	r1, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087b4:	4313      	orrs	r3, r2
         );
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3724      	adds	r7, #36	; 0x24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
	...

080087c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087d4:	d301      	bcc.n	80087da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80087d6:	2301      	movs	r3, #1
 80087d8:	e00f      	b.n	80087fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80087da:	4a0a      	ldr	r2, [pc, #40]	; (8008804 <SysTick_Config+0x40>)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3b01      	subs	r3, #1
 80087e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80087e2:	210f      	movs	r1, #15
 80087e4:	f04f 30ff 	mov.w	r0, #4294967295
 80087e8:	f7ff ff8e 	bl	8008708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80087ec:	4b05      	ldr	r3, [pc, #20]	; (8008804 <SysTick_Config+0x40>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80087f2:	4b04      	ldr	r3, [pc, #16]	; (8008804 <SysTick_Config+0x40>)
 80087f4:	2207      	movs	r2, #7
 80087f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	e000e010 	.word	0xe000e010

08008808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff ff29 	bl	8008668 <__NVIC_SetPriorityGrouping>
}
 8008816:	bf00      	nop
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800881e:	b580      	push	{r7, lr}
 8008820:	b086      	sub	sp, #24
 8008822:	af00      	add	r7, sp, #0
 8008824:	4603      	mov	r3, r0
 8008826:	60b9      	str	r1, [r7, #8]
 8008828:	607a      	str	r2, [r7, #4]
 800882a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800882c:	2300      	movs	r3, #0
 800882e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008830:	f7ff ff3e 	bl	80086b0 <__NVIC_GetPriorityGrouping>
 8008834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	68b9      	ldr	r1, [r7, #8]
 800883a:	6978      	ldr	r0, [r7, #20]
 800883c:	f7ff ff8e 	bl	800875c <NVIC_EncodePriority>
 8008840:	4602      	mov	r2, r0
 8008842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008846:	4611      	mov	r1, r2
 8008848:	4618      	mov	r0, r3
 800884a:	f7ff ff5d 	bl	8008708 <__NVIC_SetPriority>
}
 800884e:	bf00      	nop
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
 800885c:	4603      	mov	r3, r0
 800885e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff ff31 	bl	80086cc <__NVIC_EnableIRQ>
}
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7ff ffa2 	bl	80087c4 <SysTick_Config>
 8008880:	4603      	mov	r3, r0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008896:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008898:	f7ff feb6 	bl	8008608 <HAL_GetTick>
 800889c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d008      	beq.n	80088bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2280      	movs	r2, #128	; 0x80
 80088ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e052      	b.n	8008962 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f022 0216 	bic.w	r2, r2, #22
 80088ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	695a      	ldr	r2, [r3, #20]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d103      	bne.n	80088ec <HAL_DMA_Abort+0x62>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d007      	beq.n	80088fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 0208 	bic.w	r2, r2, #8
 80088fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 0201 	bic.w	r2, r2, #1
 800890a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800890c:	e013      	b.n	8008936 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800890e:	f7ff fe7b 	bl	8008608 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	2b05      	cmp	r3, #5
 800891a:	d90c      	bls.n	8008936 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2220      	movs	r2, #32
 8008920:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2203      	movs	r2, #3
 800892e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e015      	b.n	8008962 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1e4      	bne.n	800890e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008948:	223f      	movs	r2, #63	; 0x3f
 800894a:	409a      	lsls	r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b02      	cmp	r3, #2
 800897c:	d004      	beq.n	8008988 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2280      	movs	r2, #128	; 0x80
 8008982:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e00c      	b.n	80089a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2205      	movs	r2, #5
 800898c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f022 0201 	bic.w	r2, r2, #1
 800899e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
	...

080089b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b089      	sub	sp, #36	; 0x24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80089ba:	2300      	movs	r3, #0
 80089bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80089be:	2300      	movs	r3, #0
 80089c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80089c2:	2300      	movs	r3, #0
 80089c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80089c6:	2300      	movs	r3, #0
 80089c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80089ca:	2300      	movs	r3, #0
 80089cc:	61fb      	str	r3, [r7, #28]
 80089ce:	e175      	b.n	8008cbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80089d0:	2201      	movs	r2, #1
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	fa02 f303 	lsl.w	r3, r2, r3
 80089d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	4013      	ands	r3, r2
 80089e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	f040 8164 	bne.w	8008cb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d00b      	beq.n	8008a0e <HAL_GPIO_Init+0x5e>
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d007      	beq.n	8008a0e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a02:	2b11      	cmp	r3, #17
 8008a04:	d003      	beq.n	8008a0e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	2b12      	cmp	r3, #18
 8008a0c:	d130      	bne.n	8008a70 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	005b      	lsls	r3, r3, #1
 8008a18:	2203      	movs	r2, #3
 8008a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1e:	43db      	mvns	r3, r3
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	4013      	ands	r3, r2
 8008a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	68da      	ldr	r2, [r3, #12]
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008a44:	2201      	movs	r2, #1
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4c:	43db      	mvns	r3, r3
 8008a4e:	69ba      	ldr	r2, [r7, #24]
 8008a50:	4013      	ands	r3, r2
 8008a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	091b      	lsrs	r3, r3, #4
 8008a5a:	f003 0201 	and.w	r2, r3, #1
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	fa02 f303 	lsl.w	r3, r2, r3
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	005b      	lsls	r3, r3, #1
 8008a7a:	2203      	movs	r2, #3
 8008a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a80:	43db      	mvns	r3, r3
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	4013      	ands	r3, r2
 8008a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	fa02 f303 	lsl.w	r3, r2, r3
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d003      	beq.n	8008ab0 <HAL_GPIO_Init+0x100>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2b12      	cmp	r3, #18
 8008aae:	d123      	bne.n	8008af8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	08da      	lsrs	r2, r3, #3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3208      	adds	r2, #8
 8008ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	f003 0307 	and.w	r3, r3, #7
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	220f      	movs	r2, #15
 8008ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8008acc:	43db      	mvns	r3, r3
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	691a      	ldr	r2, [r3, #16]
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	08da      	lsrs	r2, r3, #3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3208      	adds	r2, #8
 8008af2:	69b9      	ldr	r1, [r7, #24]
 8008af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	005b      	lsls	r3, r3, #1
 8008b02:	2203      	movs	r2, #3
 8008b04:	fa02 f303 	lsl.w	r3, r2, r3
 8008b08:	43db      	mvns	r3, r3
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f003 0203 	and.w	r2, r3, #3
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b20:	69ba      	ldr	r2, [r7, #24]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 80be 	beq.w	8008cb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b3a:	4b66      	ldr	r3, [pc, #408]	; (8008cd4 <HAL_GPIO_Init+0x324>)
 8008b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3e:	4a65      	ldr	r2, [pc, #404]	; (8008cd4 <HAL_GPIO_Init+0x324>)
 8008b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b44:	6453      	str	r3, [r2, #68]	; 0x44
 8008b46:	4b63      	ldr	r3, [pc, #396]	; (8008cd4 <HAL_GPIO_Init+0x324>)
 8008b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008b52:	4a61      	ldr	r2, [pc, #388]	; (8008cd8 <HAL_GPIO_Init+0x328>)
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	089b      	lsrs	r3, r3, #2
 8008b58:	3302      	adds	r3, #2
 8008b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	f003 0303 	and.w	r3, r3, #3
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	220f      	movs	r2, #15
 8008b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6e:	43db      	mvns	r3, r3
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	4013      	ands	r3, r2
 8008b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a58      	ldr	r2, [pc, #352]	; (8008cdc <HAL_GPIO_Init+0x32c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d037      	beq.n	8008bee <HAL_GPIO_Init+0x23e>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a57      	ldr	r2, [pc, #348]	; (8008ce0 <HAL_GPIO_Init+0x330>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d031      	beq.n	8008bea <HAL_GPIO_Init+0x23a>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a56      	ldr	r2, [pc, #344]	; (8008ce4 <HAL_GPIO_Init+0x334>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d02b      	beq.n	8008be6 <HAL_GPIO_Init+0x236>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a55      	ldr	r2, [pc, #340]	; (8008ce8 <HAL_GPIO_Init+0x338>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d025      	beq.n	8008be2 <HAL_GPIO_Init+0x232>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a54      	ldr	r2, [pc, #336]	; (8008cec <HAL_GPIO_Init+0x33c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d01f      	beq.n	8008bde <HAL_GPIO_Init+0x22e>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a53      	ldr	r2, [pc, #332]	; (8008cf0 <HAL_GPIO_Init+0x340>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d019      	beq.n	8008bda <HAL_GPIO_Init+0x22a>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a52      	ldr	r2, [pc, #328]	; (8008cf4 <HAL_GPIO_Init+0x344>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d013      	beq.n	8008bd6 <HAL_GPIO_Init+0x226>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a51      	ldr	r2, [pc, #324]	; (8008cf8 <HAL_GPIO_Init+0x348>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d00d      	beq.n	8008bd2 <HAL_GPIO_Init+0x222>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a50      	ldr	r2, [pc, #320]	; (8008cfc <HAL_GPIO_Init+0x34c>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d007      	beq.n	8008bce <HAL_GPIO_Init+0x21e>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a4f      	ldr	r2, [pc, #316]	; (8008d00 <HAL_GPIO_Init+0x350>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d101      	bne.n	8008bca <HAL_GPIO_Init+0x21a>
 8008bc6:	2309      	movs	r3, #9
 8008bc8:	e012      	b.n	8008bf0 <HAL_GPIO_Init+0x240>
 8008bca:	230a      	movs	r3, #10
 8008bcc:	e010      	b.n	8008bf0 <HAL_GPIO_Init+0x240>
 8008bce:	2308      	movs	r3, #8
 8008bd0:	e00e      	b.n	8008bf0 <HAL_GPIO_Init+0x240>
 8008bd2:	2307      	movs	r3, #7
 8008bd4:	e00c      	b.n	8008bf0 <HAL_GPIO_Init+0x240>
 8008bd6:	2306      	movs	r3, #6
 8008bd8:	e00a      	b.n	8008bf0 <HAL_GPIO_Init+0x240>
 8008bda:	2305      	movs	r3, #5
 8008bdc:	e008      	b.n	8008bf0 <HAL_GPIO_Init+0x240>
 8008bde:	2304      	movs	r3, #4
 8008be0:	e006      	b.n	8008bf0 <HAL_GPIO_Init+0x240>
 8008be2:	2303      	movs	r3, #3
 8008be4:	e004      	b.n	8008bf0 <HAL_GPIO_Init+0x240>
 8008be6:	2302      	movs	r3, #2
 8008be8:	e002      	b.n	8008bf0 <HAL_GPIO_Init+0x240>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e000      	b.n	8008bf0 <HAL_GPIO_Init+0x240>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	f002 0203 	and.w	r2, r2, #3
 8008bf6:	0092      	lsls	r2, r2, #2
 8008bf8:	4093      	lsls	r3, r2
 8008bfa:	69ba      	ldr	r2, [r7, #24]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008c00:	4935      	ldr	r1, [pc, #212]	; (8008cd8 <HAL_GPIO_Init+0x328>)
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	089b      	lsrs	r3, r3, #2
 8008c06:	3302      	adds	r3, #2
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c0e:	4b3d      	ldr	r3, [pc, #244]	; (8008d04 <HAL_GPIO_Init+0x354>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	43db      	mvns	r3, r3
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008c32:	4a34      	ldr	r2, [pc, #208]	; (8008d04 <HAL_GPIO_Init+0x354>)
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008c38:	4b32      	ldr	r3, [pc, #200]	; (8008d04 <HAL_GPIO_Init+0x354>)
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	43db      	mvns	r3, r3
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	4013      	ands	r3, r2
 8008c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008c5c:	4a29      	ldr	r2, [pc, #164]	; (8008d04 <HAL_GPIO_Init+0x354>)
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c62:	4b28      	ldr	r3, [pc, #160]	; (8008d04 <HAL_GPIO_Init+0x354>)
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	43db      	mvns	r3, r3
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008c86:	4a1f      	ldr	r2, [pc, #124]	; (8008d04 <HAL_GPIO_Init+0x354>)
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008c8c:	4b1d      	ldr	r3, [pc, #116]	; (8008d04 <HAL_GPIO_Init+0x354>)
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	43db      	mvns	r3, r3
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	4013      	ands	r3, r2
 8008c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d003      	beq.n	8008cb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008cb0:	4a14      	ldr	r2, [pc, #80]	; (8008d04 <HAL_GPIO_Init+0x354>)
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	61fb      	str	r3, [r7, #28]
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	2b0f      	cmp	r3, #15
 8008cc0:	f67f ae86 	bls.w	80089d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop
 8008cc8:	3724      	adds	r7, #36	; 0x24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	40023800 	.word	0x40023800
 8008cd8:	40013800 	.word	0x40013800
 8008cdc:	40020000 	.word	0x40020000
 8008ce0:	40020400 	.word	0x40020400
 8008ce4:	40020800 	.word	0x40020800
 8008ce8:	40020c00 	.word	0x40020c00
 8008cec:	40021000 	.word	0x40021000
 8008cf0:	40021400 	.word	0x40021400
 8008cf4:	40021800 	.word	0x40021800
 8008cf8:	40021c00 	.word	0x40021c00
 8008cfc:	40022000 	.word	0x40022000
 8008d00:	40022400 	.word	0x40022400
 8008d04:	40013c00 	.word	0x40013c00

08008d08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008d12:	4b23      	ldr	r3, [pc, #140]	; (8008da0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d16:	4a22      	ldr	r2, [pc, #136]	; (8008da0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8008d1e:	4b20      	ldr	r3, [pc, #128]	; (8008da0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d26:	603b      	str	r3, [r7, #0]
 8008d28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008d2a:	4b1e      	ldr	r3, [pc, #120]	; (8008da4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a1d      	ldr	r2, [pc, #116]	; (8008da4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d36:	f7ff fc67 	bl	8008608 <HAL_GetTick>
 8008d3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008d3c:	e009      	b.n	8008d52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008d3e:	f7ff fc63 	bl	8008608 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d4c:	d901      	bls.n	8008d52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e022      	b.n	8008d98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008d52:	4b14      	ldr	r3, [pc, #80]	; (8008da4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d5e:	d1ee      	bne.n	8008d3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008d60:	4b10      	ldr	r3, [pc, #64]	; (8008da4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a0f      	ldr	r2, [pc, #60]	; (8008da4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d6c:	f7ff fc4c 	bl	8008608 <HAL_GetTick>
 8008d70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008d72:	e009      	b.n	8008d88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008d74:	f7ff fc48 	bl	8008608 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d82:	d901      	bls.n	8008d88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e007      	b.n	8008d98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d94:	d1ee      	bne.n	8008d74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	40023800 	.word	0x40023800
 8008da4:	40007000 	.word	0x40007000

08008da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008db0:	2300      	movs	r3, #0
 8008db2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e291      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f000 8087 	beq.w	8008eda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008dcc:	4b96      	ldr	r3, [pc, #600]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f003 030c 	and.w	r3, r3, #12
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d00c      	beq.n	8008df2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008dd8:	4b93      	ldr	r3, [pc, #588]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	f003 030c 	and.w	r3, r3, #12
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	d112      	bne.n	8008e0a <HAL_RCC_OscConfig+0x62>
 8008de4:	4b90      	ldr	r3, [pc, #576]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008df0:	d10b      	bne.n	8008e0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008df2:	4b8d      	ldr	r3, [pc, #564]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d06c      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x130>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d168      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e26b      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e12:	d106      	bne.n	8008e22 <HAL_RCC_OscConfig+0x7a>
 8008e14:	4b84      	ldr	r3, [pc, #528]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a83      	ldr	r2, [pc, #524]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	e02e      	b.n	8008e80 <HAL_RCC_OscConfig+0xd8>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10c      	bne.n	8008e44 <HAL_RCC_OscConfig+0x9c>
 8008e2a:	4b7f      	ldr	r3, [pc, #508]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a7e      	ldr	r2, [pc, #504]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	4b7c      	ldr	r3, [pc, #496]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a7b      	ldr	r2, [pc, #492]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	e01d      	b.n	8008e80 <HAL_RCC_OscConfig+0xd8>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e4c:	d10c      	bne.n	8008e68 <HAL_RCC_OscConfig+0xc0>
 8008e4e:	4b76      	ldr	r3, [pc, #472]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a75      	ldr	r2, [pc, #468]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	4b73      	ldr	r3, [pc, #460]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a72      	ldr	r2, [pc, #456]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	e00b      	b.n	8008e80 <HAL_RCC_OscConfig+0xd8>
 8008e68:	4b6f      	ldr	r3, [pc, #444]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a6e      	ldr	r2, [pc, #440]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	4b6c      	ldr	r3, [pc, #432]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a6b      	ldr	r2, [pc, #428]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d013      	beq.n	8008eb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e88:	f7ff fbbe 	bl	8008608 <HAL_GetTick>
 8008e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e8e:	e008      	b.n	8008ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e90:	f7ff fbba 	bl	8008608 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	2b64      	cmp	r3, #100	; 0x64
 8008e9c:	d901      	bls.n	8008ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e21f      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ea2:	4b61      	ldr	r3, [pc, #388]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0f0      	beq.n	8008e90 <HAL_RCC_OscConfig+0xe8>
 8008eae:	e014      	b.n	8008eda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eb0:	f7ff fbaa 	bl	8008608 <HAL_GetTick>
 8008eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008eb6:	e008      	b.n	8008eca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008eb8:	f7ff fba6 	bl	8008608 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b64      	cmp	r3, #100	; 0x64
 8008ec4:	d901      	bls.n	8008eca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e20b      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008eca:	4b57      	ldr	r3, [pc, #348]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1f0      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x110>
 8008ed6:	e000      	b.n	8008eda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0302 	and.w	r3, r3, #2
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d069      	beq.n	8008fba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ee6:	4b50      	ldr	r3, [pc, #320]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f003 030c 	and.w	r3, r3, #12
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00b      	beq.n	8008f0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ef2:	4b4d      	ldr	r3, [pc, #308]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f003 030c 	and.w	r3, r3, #12
 8008efa:	2b08      	cmp	r3, #8
 8008efc:	d11c      	bne.n	8008f38 <HAL_RCC_OscConfig+0x190>
 8008efe:	4b4a      	ldr	r3, [pc, #296]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d116      	bne.n	8008f38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f0a:	4b47      	ldr	r3, [pc, #284]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0302 	and.w	r3, r3, #2
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d005      	beq.n	8008f22 <HAL_RCC_OscConfig+0x17a>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d001      	beq.n	8008f22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e1df      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f22:	4b41      	ldr	r3, [pc, #260]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	00db      	lsls	r3, r3, #3
 8008f30:	493d      	ldr	r1, [pc, #244]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008f32:	4313      	orrs	r3, r2
 8008f34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f36:	e040      	b.n	8008fba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d023      	beq.n	8008f88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f40:	4b39      	ldr	r3, [pc, #228]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a38      	ldr	r2, [pc, #224]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008f46:	f043 0301 	orr.w	r3, r3, #1
 8008f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f4c:	f7ff fb5c 	bl	8008608 <HAL_GetTick>
 8008f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f52:	e008      	b.n	8008f66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f54:	f7ff fb58 	bl	8008608 <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d901      	bls.n	8008f66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e1bd      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f66:	4b30      	ldr	r3, [pc, #192]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0302 	and.w	r3, r3, #2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0f0      	beq.n	8008f54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f72:	4b2d      	ldr	r3, [pc, #180]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	00db      	lsls	r3, r3, #3
 8008f80:	4929      	ldr	r1, [pc, #164]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	600b      	str	r3, [r1, #0]
 8008f86:	e018      	b.n	8008fba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f88:	4b27      	ldr	r3, [pc, #156]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a26      	ldr	r2, [pc, #152]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008f8e:	f023 0301 	bic.w	r3, r3, #1
 8008f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f94:	f7ff fb38 	bl	8008608 <HAL_GetTick>
 8008f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f9a:	e008      	b.n	8008fae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f9c:	f7ff fb34 	bl	8008608 <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d901      	bls.n	8008fae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e199      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fae:	4b1e      	ldr	r3, [pc, #120]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0302 	and.w	r3, r3, #2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1f0      	bne.n	8008f9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0308 	and.w	r3, r3, #8
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d038      	beq.n	8009038 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d019      	beq.n	8009002 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fce:	4b16      	ldr	r3, [pc, #88]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fd2:	4a15      	ldr	r2, [pc, #84]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008fd4:	f043 0301 	orr.w	r3, r3, #1
 8008fd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fda:	f7ff fb15 	bl	8008608 <HAL_GetTick>
 8008fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fe0:	e008      	b.n	8008ff4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fe2:	f7ff fb11 	bl	8008608 <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d901      	bls.n	8008ff4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e176      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ff4:	4b0c      	ldr	r3, [pc, #48]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8008ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d0f0      	beq.n	8008fe2 <HAL_RCC_OscConfig+0x23a>
 8009000:	e01a      	b.n	8009038 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009002:	4b09      	ldr	r3, [pc, #36]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8009004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009006:	4a08      	ldr	r2, [pc, #32]	; (8009028 <HAL_RCC_OscConfig+0x280>)
 8009008:	f023 0301 	bic.w	r3, r3, #1
 800900c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800900e:	f7ff fafb 	bl	8008608 <HAL_GetTick>
 8009012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009014:	e00a      	b.n	800902c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009016:	f7ff faf7 	bl	8008608 <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	2b02      	cmp	r3, #2
 8009022:	d903      	bls.n	800902c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009024:	2303      	movs	r3, #3
 8009026:	e15c      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
 8009028:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800902c:	4b91      	ldr	r3, [pc, #580]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 800902e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009030:	f003 0302 	and.w	r3, r3, #2
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1ee      	bne.n	8009016 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 80a4 	beq.w	800918e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009046:	4b8b      	ldr	r3, [pc, #556]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10d      	bne.n	800906e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009052:	4b88      	ldr	r3, [pc, #544]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009056:	4a87      	ldr	r2, [pc, #540]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800905c:	6413      	str	r3, [r2, #64]	; 0x40
 800905e:	4b85      	ldr	r3, [pc, #532]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009066:	60bb      	str	r3, [r7, #8]
 8009068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800906a:	2301      	movs	r3, #1
 800906c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800906e:	4b82      	ldr	r3, [pc, #520]	; (8009278 <HAL_RCC_OscConfig+0x4d0>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009076:	2b00      	cmp	r3, #0
 8009078:	d118      	bne.n	80090ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800907a:	4b7f      	ldr	r3, [pc, #508]	; (8009278 <HAL_RCC_OscConfig+0x4d0>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a7e      	ldr	r2, [pc, #504]	; (8009278 <HAL_RCC_OscConfig+0x4d0>)
 8009080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009086:	f7ff fabf 	bl	8008608 <HAL_GetTick>
 800908a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800908c:	e008      	b.n	80090a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800908e:	f7ff fabb 	bl	8008608 <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	2b64      	cmp	r3, #100	; 0x64
 800909a:	d901      	bls.n	80090a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e120      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090a0:	4b75      	ldr	r3, [pc, #468]	; (8009278 <HAL_RCC_OscConfig+0x4d0>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0f0      	beq.n	800908e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d106      	bne.n	80090c2 <HAL_RCC_OscConfig+0x31a>
 80090b4:	4b6f      	ldr	r3, [pc, #444]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 80090b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b8:	4a6e      	ldr	r2, [pc, #440]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 80090ba:	f043 0301 	orr.w	r3, r3, #1
 80090be:	6713      	str	r3, [r2, #112]	; 0x70
 80090c0:	e02d      	b.n	800911e <HAL_RCC_OscConfig+0x376>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10c      	bne.n	80090e4 <HAL_RCC_OscConfig+0x33c>
 80090ca:	4b6a      	ldr	r3, [pc, #424]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 80090cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ce:	4a69      	ldr	r2, [pc, #420]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 80090d0:	f023 0301 	bic.w	r3, r3, #1
 80090d4:	6713      	str	r3, [r2, #112]	; 0x70
 80090d6:	4b67      	ldr	r3, [pc, #412]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 80090d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090da:	4a66      	ldr	r2, [pc, #408]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 80090dc:	f023 0304 	bic.w	r3, r3, #4
 80090e0:	6713      	str	r3, [r2, #112]	; 0x70
 80090e2:	e01c      	b.n	800911e <HAL_RCC_OscConfig+0x376>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	2b05      	cmp	r3, #5
 80090ea:	d10c      	bne.n	8009106 <HAL_RCC_OscConfig+0x35e>
 80090ec:	4b61      	ldr	r3, [pc, #388]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 80090ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f0:	4a60      	ldr	r2, [pc, #384]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 80090f2:	f043 0304 	orr.w	r3, r3, #4
 80090f6:	6713      	str	r3, [r2, #112]	; 0x70
 80090f8:	4b5e      	ldr	r3, [pc, #376]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 80090fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fc:	4a5d      	ldr	r2, [pc, #372]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 80090fe:	f043 0301 	orr.w	r3, r3, #1
 8009102:	6713      	str	r3, [r2, #112]	; 0x70
 8009104:	e00b      	b.n	800911e <HAL_RCC_OscConfig+0x376>
 8009106:	4b5b      	ldr	r3, [pc, #364]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910a:	4a5a      	ldr	r2, [pc, #360]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 800910c:	f023 0301 	bic.w	r3, r3, #1
 8009110:	6713      	str	r3, [r2, #112]	; 0x70
 8009112:	4b58      	ldr	r3, [pc, #352]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009116:	4a57      	ldr	r2, [pc, #348]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009118:	f023 0304 	bic.w	r3, r3, #4
 800911c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d015      	beq.n	8009152 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009126:	f7ff fa6f 	bl	8008608 <HAL_GetTick>
 800912a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800912c:	e00a      	b.n	8009144 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800912e:	f7ff fa6b 	bl	8008608 <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	f241 3288 	movw	r2, #5000	; 0x1388
 800913c:	4293      	cmp	r3, r2
 800913e:	d901      	bls.n	8009144 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e0ce      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009144:	4b4b      	ldr	r3, [pc, #300]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0ee      	beq.n	800912e <HAL_RCC_OscConfig+0x386>
 8009150:	e014      	b.n	800917c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009152:	f7ff fa59 	bl	8008608 <HAL_GetTick>
 8009156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009158:	e00a      	b.n	8009170 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800915a:	f7ff fa55 	bl	8008608 <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	f241 3288 	movw	r2, #5000	; 0x1388
 8009168:	4293      	cmp	r3, r2
 800916a:	d901      	bls.n	8009170 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e0b8      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009170:	4b40      	ldr	r3, [pc, #256]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009174:	f003 0302 	and.w	r3, r3, #2
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1ee      	bne.n	800915a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800917c:	7dfb      	ldrb	r3, [r7, #23]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d105      	bne.n	800918e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009182:	4b3c      	ldr	r3, [pc, #240]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009186:	4a3b      	ldr	r2, [pc, #236]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800918c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 80a4 	beq.w	80092e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009198:	4b36      	ldr	r3, [pc, #216]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f003 030c 	and.w	r3, r3, #12
 80091a0:	2b08      	cmp	r3, #8
 80091a2:	d06b      	beq.n	800927c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d149      	bne.n	8009240 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091ac:	4b31      	ldr	r3, [pc, #196]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a30      	ldr	r2, [pc, #192]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 80091b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b8:	f7ff fa26 	bl	8008608 <HAL_GetTick>
 80091bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091be:	e008      	b.n	80091d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091c0:	f7ff fa22 	bl	8008608 <HAL_GetTick>
 80091c4:	4602      	mov	r2, r0
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d901      	bls.n	80091d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e087      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091d2:	4b28      	ldr	r3, [pc, #160]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1f0      	bne.n	80091c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	69da      	ldr	r2, [r3, #28]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	431a      	orrs	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	019b      	lsls	r3, r3, #6
 80091ee:	431a      	orrs	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f4:	085b      	lsrs	r3, r3, #1
 80091f6:	3b01      	subs	r3, #1
 80091f8:	041b      	lsls	r3, r3, #16
 80091fa:	431a      	orrs	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009200:	061b      	lsls	r3, r3, #24
 8009202:	4313      	orrs	r3, r2
 8009204:	4a1b      	ldr	r2, [pc, #108]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009206:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800920a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800920c:	4b19      	ldr	r3, [pc, #100]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a18      	ldr	r2, [pc, #96]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009218:	f7ff f9f6 	bl	8008608 <HAL_GetTick>
 800921c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800921e:	e008      	b.n	8009232 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009220:	f7ff f9f2 	bl	8008608 <HAL_GetTick>
 8009224:	4602      	mov	r2, r0
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	2b02      	cmp	r3, #2
 800922c:	d901      	bls.n	8009232 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	e057      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009232:	4b10      	ldr	r3, [pc, #64]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0f0      	beq.n	8009220 <HAL_RCC_OscConfig+0x478>
 800923e:	e04f      	b.n	80092e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009240:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a0b      	ldr	r2, [pc, #44]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800924a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800924c:	f7ff f9dc 	bl	8008608 <HAL_GetTick>
 8009250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009252:	e008      	b.n	8009266 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009254:	f7ff f9d8 	bl	8008608 <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	2b02      	cmp	r3, #2
 8009260:	d901      	bls.n	8009266 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e03d      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009266:	4b03      	ldr	r3, [pc, #12]	; (8009274 <HAL_RCC_OscConfig+0x4cc>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1f0      	bne.n	8009254 <HAL_RCC_OscConfig+0x4ac>
 8009272:	e035      	b.n	80092e0 <HAL_RCC_OscConfig+0x538>
 8009274:	40023800 	.word	0x40023800
 8009278:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800927c:	4b1b      	ldr	r3, [pc, #108]	; (80092ec <HAL_RCC_OscConfig+0x544>)
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d028      	beq.n	80092dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009294:	429a      	cmp	r2, r3
 8009296:	d121      	bne.n	80092dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d11a      	bne.n	80092dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80092ac:	4013      	ands	r3, r2
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80092b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d111      	bne.n	80092dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c2:	085b      	lsrs	r3, r3, #1
 80092c4:	3b01      	subs	r3, #1
 80092c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d107      	bne.n	80092dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80092d8:	429a      	cmp	r2, r3
 80092da:	d001      	beq.n	80092e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e000      	b.n	80092e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	40023800 	.word	0x40023800

080092f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80092fa:	2300      	movs	r3, #0
 80092fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d101      	bne.n	8009308 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e0d0      	b.n	80094aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009308:	4b6a      	ldr	r3, [pc, #424]	; (80094b4 <HAL_RCC_ClockConfig+0x1c4>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 030f 	and.w	r3, r3, #15
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	429a      	cmp	r2, r3
 8009314:	d910      	bls.n	8009338 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009316:	4b67      	ldr	r3, [pc, #412]	; (80094b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f023 020f 	bic.w	r2, r3, #15
 800931e:	4965      	ldr	r1, [pc, #404]	; (80094b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	4313      	orrs	r3, r2
 8009324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009326:	4b63      	ldr	r3, [pc, #396]	; (80094b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 030f 	and.w	r3, r3, #15
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	429a      	cmp	r2, r3
 8009332:	d001      	beq.n	8009338 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e0b8      	b.n	80094aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	2b00      	cmp	r3, #0
 8009342:	d020      	beq.n	8009386 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d005      	beq.n	800935c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009350:	4b59      	ldr	r3, [pc, #356]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	4a58      	ldr	r2, [pc, #352]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800935a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 0308 	and.w	r3, r3, #8
 8009364:	2b00      	cmp	r3, #0
 8009366:	d005      	beq.n	8009374 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009368:	4b53      	ldr	r3, [pc, #332]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	4a52      	ldr	r2, [pc, #328]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 800936e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009372:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009374:	4b50      	ldr	r3, [pc, #320]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	494d      	ldr	r1, [pc, #308]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009382:	4313      	orrs	r3, r2
 8009384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b00      	cmp	r3, #0
 8009390:	d040      	beq.n	8009414 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d107      	bne.n	80093aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800939a:	4b47      	ldr	r3, [pc, #284]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d115      	bne.n	80093d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e07f      	b.n	80094aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d107      	bne.n	80093c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093b2:	4b41      	ldr	r3, [pc, #260]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d109      	bne.n	80093d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e073      	b.n	80094aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093c2:	4b3d      	ldr	r3, [pc, #244]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e06b      	b.n	80094aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80093d2:	4b39      	ldr	r3, [pc, #228]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f023 0203 	bic.w	r2, r3, #3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	4936      	ldr	r1, [pc, #216]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 80093e0:	4313      	orrs	r3, r2
 80093e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093e4:	f7ff f910 	bl	8008608 <HAL_GetTick>
 80093e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ea:	e00a      	b.n	8009402 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093ec:	f7ff f90c 	bl	8008608 <HAL_GetTick>
 80093f0:	4602      	mov	r2, r0
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d901      	bls.n	8009402 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e053      	b.n	80094aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009402:	4b2d      	ldr	r3, [pc, #180]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f003 020c 	and.w	r2, r3, #12
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	429a      	cmp	r2, r3
 8009412:	d1eb      	bne.n	80093ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009414:	4b27      	ldr	r3, [pc, #156]	; (80094b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 030f 	and.w	r3, r3, #15
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	429a      	cmp	r2, r3
 8009420:	d210      	bcs.n	8009444 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009422:	4b24      	ldr	r3, [pc, #144]	; (80094b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f023 020f 	bic.w	r2, r3, #15
 800942a:	4922      	ldr	r1, [pc, #136]	; (80094b4 <HAL_RCC_ClockConfig+0x1c4>)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	4313      	orrs	r3, r2
 8009430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009432:	4b20      	ldr	r3, [pc, #128]	; (80094b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 030f 	and.w	r3, r3, #15
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d001      	beq.n	8009444 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e032      	b.n	80094aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0304 	and.w	r3, r3, #4
 800944c:	2b00      	cmp	r3, #0
 800944e:	d008      	beq.n	8009462 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009450:	4b19      	ldr	r3, [pc, #100]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	4916      	ldr	r1, [pc, #88]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 800945e:	4313      	orrs	r3, r2
 8009460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0308 	and.w	r3, r3, #8
 800946a:	2b00      	cmp	r3, #0
 800946c:	d009      	beq.n	8009482 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800946e:	4b12      	ldr	r3, [pc, #72]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	490e      	ldr	r1, [pc, #56]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 800947e:	4313      	orrs	r3, r2
 8009480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009482:	f000 f821 	bl	80094c8 <HAL_RCC_GetSysClockFreq>
 8009486:	4602      	mov	r2, r0
 8009488:	4b0b      	ldr	r3, [pc, #44]	; (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	091b      	lsrs	r3, r3, #4
 800948e:	f003 030f 	and.w	r3, r3, #15
 8009492:	490a      	ldr	r1, [pc, #40]	; (80094bc <HAL_RCC_ClockConfig+0x1cc>)
 8009494:	5ccb      	ldrb	r3, [r1, r3]
 8009496:	fa22 f303 	lsr.w	r3, r2, r3
 800949a:	4a09      	ldr	r2, [pc, #36]	; (80094c0 <HAL_RCC_ClockConfig+0x1d0>)
 800949c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800949e:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <HAL_RCC_ClockConfig+0x1d4>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7ff f86c 	bl	8008580 <HAL_InitTick>

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	40023c00 	.word	0x40023c00
 80094b8:	40023800 	.word	0x40023800
 80094bc:	0800bdd8 	.word	0x0800bdd8
 80094c0:	20000000 	.word	0x20000000
 80094c4:	20000004 	.word	0x20000004

080094c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094c8:	b5b0      	push	{r4, r5, r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80094ce:	2100      	movs	r1, #0
 80094d0:	6079      	str	r1, [r7, #4]
 80094d2:	2100      	movs	r1, #0
 80094d4:	60f9      	str	r1, [r7, #12]
 80094d6:	2100      	movs	r1, #0
 80094d8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80094da:	2100      	movs	r1, #0
 80094dc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094de:	4952      	ldr	r1, [pc, #328]	; (8009628 <HAL_RCC_GetSysClockFreq+0x160>)
 80094e0:	6889      	ldr	r1, [r1, #8]
 80094e2:	f001 010c 	and.w	r1, r1, #12
 80094e6:	2908      	cmp	r1, #8
 80094e8:	d00d      	beq.n	8009506 <HAL_RCC_GetSysClockFreq+0x3e>
 80094ea:	2908      	cmp	r1, #8
 80094ec:	f200 8094 	bhi.w	8009618 <HAL_RCC_GetSysClockFreq+0x150>
 80094f0:	2900      	cmp	r1, #0
 80094f2:	d002      	beq.n	80094fa <HAL_RCC_GetSysClockFreq+0x32>
 80094f4:	2904      	cmp	r1, #4
 80094f6:	d003      	beq.n	8009500 <HAL_RCC_GetSysClockFreq+0x38>
 80094f8:	e08e      	b.n	8009618 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094fa:	4b4c      	ldr	r3, [pc, #304]	; (800962c <HAL_RCC_GetSysClockFreq+0x164>)
 80094fc:	60bb      	str	r3, [r7, #8]
      break;
 80094fe:	e08e      	b.n	800961e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009500:	4b4b      	ldr	r3, [pc, #300]	; (8009630 <HAL_RCC_GetSysClockFreq+0x168>)
 8009502:	60bb      	str	r3, [r7, #8]
      break;
 8009504:	e08b      	b.n	800961e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009506:	4948      	ldr	r1, [pc, #288]	; (8009628 <HAL_RCC_GetSysClockFreq+0x160>)
 8009508:	6849      	ldr	r1, [r1, #4]
 800950a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800950e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009510:	4945      	ldr	r1, [pc, #276]	; (8009628 <HAL_RCC_GetSysClockFreq+0x160>)
 8009512:	6849      	ldr	r1, [r1, #4]
 8009514:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009518:	2900      	cmp	r1, #0
 800951a:	d024      	beq.n	8009566 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800951c:	4942      	ldr	r1, [pc, #264]	; (8009628 <HAL_RCC_GetSysClockFreq+0x160>)
 800951e:	6849      	ldr	r1, [r1, #4]
 8009520:	0989      	lsrs	r1, r1, #6
 8009522:	4608      	mov	r0, r1
 8009524:	f04f 0100 	mov.w	r1, #0
 8009528:	f240 14ff 	movw	r4, #511	; 0x1ff
 800952c:	f04f 0500 	mov.w	r5, #0
 8009530:	ea00 0204 	and.w	r2, r0, r4
 8009534:	ea01 0305 	and.w	r3, r1, r5
 8009538:	493d      	ldr	r1, [pc, #244]	; (8009630 <HAL_RCC_GetSysClockFreq+0x168>)
 800953a:	fb01 f003 	mul.w	r0, r1, r3
 800953e:	2100      	movs	r1, #0
 8009540:	fb01 f102 	mul.w	r1, r1, r2
 8009544:	1844      	adds	r4, r0, r1
 8009546:	493a      	ldr	r1, [pc, #232]	; (8009630 <HAL_RCC_GetSysClockFreq+0x168>)
 8009548:	fba2 0101 	umull	r0, r1, r2, r1
 800954c:	1863      	adds	r3, r4, r1
 800954e:	4619      	mov	r1, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	461a      	mov	r2, r3
 8009554:	f04f 0300 	mov.w	r3, #0
 8009558:	f7f6 fe5e 	bl	8000218 <__aeabi_uldivmod>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4613      	mov	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	e04a      	b.n	80095fc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009566:	4b30      	ldr	r3, [pc, #192]	; (8009628 <HAL_RCC_GetSysClockFreq+0x160>)
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	099b      	lsrs	r3, r3, #6
 800956c:	461a      	mov	r2, r3
 800956e:	f04f 0300 	mov.w	r3, #0
 8009572:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009576:	f04f 0100 	mov.w	r1, #0
 800957a:	ea02 0400 	and.w	r4, r2, r0
 800957e:	ea03 0501 	and.w	r5, r3, r1
 8009582:	4620      	mov	r0, r4
 8009584:	4629      	mov	r1, r5
 8009586:	f04f 0200 	mov.w	r2, #0
 800958a:	f04f 0300 	mov.w	r3, #0
 800958e:	014b      	lsls	r3, r1, #5
 8009590:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009594:	0142      	lsls	r2, r0, #5
 8009596:	4610      	mov	r0, r2
 8009598:	4619      	mov	r1, r3
 800959a:	1b00      	subs	r0, r0, r4
 800959c:	eb61 0105 	sbc.w	r1, r1, r5
 80095a0:	f04f 0200 	mov.w	r2, #0
 80095a4:	f04f 0300 	mov.w	r3, #0
 80095a8:	018b      	lsls	r3, r1, #6
 80095aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80095ae:	0182      	lsls	r2, r0, #6
 80095b0:	1a12      	subs	r2, r2, r0
 80095b2:	eb63 0301 	sbc.w	r3, r3, r1
 80095b6:	f04f 0000 	mov.w	r0, #0
 80095ba:	f04f 0100 	mov.w	r1, #0
 80095be:	00d9      	lsls	r1, r3, #3
 80095c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80095c4:	00d0      	lsls	r0, r2, #3
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	1912      	adds	r2, r2, r4
 80095cc:	eb45 0303 	adc.w	r3, r5, r3
 80095d0:	f04f 0000 	mov.w	r0, #0
 80095d4:	f04f 0100 	mov.w	r1, #0
 80095d8:	0299      	lsls	r1, r3, #10
 80095da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80095de:	0290      	lsls	r0, r2, #10
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4610      	mov	r0, r2
 80095e6:	4619      	mov	r1, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	461a      	mov	r2, r3
 80095ec:	f04f 0300 	mov.w	r3, #0
 80095f0:	f7f6 fe12 	bl	8000218 <__aeabi_uldivmod>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4613      	mov	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80095fc:	4b0a      	ldr	r3, [pc, #40]	; (8009628 <HAL_RCC_GetSysClockFreq+0x160>)
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	0c1b      	lsrs	r3, r3, #16
 8009602:	f003 0303 	and.w	r3, r3, #3
 8009606:	3301      	adds	r3, #1
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	fbb2 f3f3 	udiv	r3, r2, r3
 8009614:	60bb      	str	r3, [r7, #8]
      break;
 8009616:	e002      	b.n	800961e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009618:	4b04      	ldr	r3, [pc, #16]	; (800962c <HAL_RCC_GetSysClockFreq+0x164>)
 800961a:	60bb      	str	r3, [r7, #8]
      break;
 800961c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800961e:	68bb      	ldr	r3, [r7, #8]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bdb0      	pop	{r4, r5, r7, pc}
 8009628:	40023800 	.word	0x40023800
 800962c:	00f42400 	.word	0x00f42400
 8009630:	017d7840 	.word	0x017d7840

08009634 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009634:	b480      	push	{r7}
 8009636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009638:	4b03      	ldr	r3, [pc, #12]	; (8009648 <HAL_RCC_GetHCLKFreq+0x14>)
 800963a:	681b      	ldr	r3, [r3, #0]
}
 800963c:	4618      	mov	r0, r3
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	20000000 	.word	0x20000000

0800964c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009650:	f7ff fff0 	bl	8009634 <HAL_RCC_GetHCLKFreq>
 8009654:	4602      	mov	r2, r0
 8009656:	4b05      	ldr	r3, [pc, #20]	; (800966c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	0a9b      	lsrs	r3, r3, #10
 800965c:	f003 0307 	and.w	r3, r3, #7
 8009660:	4903      	ldr	r1, [pc, #12]	; (8009670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009662:	5ccb      	ldrb	r3, [r1, r3]
 8009664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009668:	4618      	mov	r0, r3
 800966a:	bd80      	pop	{r7, pc}
 800966c:	40023800 	.word	0x40023800
 8009670:	0800bde8 	.word	0x0800bde8

08009674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009678:	f7ff ffdc 	bl	8009634 <HAL_RCC_GetHCLKFreq>
 800967c:	4602      	mov	r2, r0
 800967e:	4b05      	ldr	r3, [pc, #20]	; (8009694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	0b5b      	lsrs	r3, r3, #13
 8009684:	f003 0307 	and.w	r3, r3, #7
 8009688:	4903      	ldr	r1, [pc, #12]	; (8009698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800968a:	5ccb      	ldrb	r3, [r1, r3]
 800968c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009690:	4618      	mov	r0, r3
 8009692:	bd80      	pop	{r7, pc}
 8009694:	40023800 	.word	0x40023800
 8009698:	0800bde8 	.word	0x0800bde8

0800969c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80096b0:	2300      	movs	r3, #0
 80096b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80096b4:	2300      	movs	r3, #0
 80096b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 0301 	and.w	r3, r3, #1
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d012      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80096c4:	4b69      	ldr	r3, [pc, #420]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	4a68      	ldr	r2, [pc, #416]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80096ce:	6093      	str	r3, [r2, #8]
 80096d0:	4b66      	ldr	r3, [pc, #408]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096d2:	689a      	ldr	r2, [r3, #8]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d8:	4964      	ldr	r1, [pc, #400]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096da:	4313      	orrs	r3, r2
 80096dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80096e6:	2301      	movs	r3, #1
 80096e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d017      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096f6:	4b5d      	ldr	r3, [pc, #372]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009704:	4959      	ldr	r1, [pc, #356]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009706:	4313      	orrs	r3, r2
 8009708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009714:	d101      	bne.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009716:	2301      	movs	r3, #1
 8009718:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009722:	2301      	movs	r3, #1
 8009724:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d017      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009732:	4b4e      	ldr	r3, [pc, #312]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009738:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009740:	494a      	ldr	r1, [pc, #296]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009742:	4313      	orrs	r3, r2
 8009744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009750:	d101      	bne.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009752:	2301      	movs	r3, #1
 8009754:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800975e:	2301      	movs	r3, #1
 8009760:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800976e:	2301      	movs	r3, #1
 8009770:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0320 	and.w	r3, r3, #32
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 808b 	beq.w	8009896 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009780:	4b3a      	ldr	r3, [pc, #232]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009784:	4a39      	ldr	r2, [pc, #228]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800978a:	6413      	str	r3, [r2, #64]	; 0x40
 800978c:	4b37      	ldr	r3, [pc, #220]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800978e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009794:	60bb      	str	r3, [r7, #8]
 8009796:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009798:	4b35      	ldr	r3, [pc, #212]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a34      	ldr	r2, [pc, #208]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800979e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097a4:	f7fe ff30 	bl	8008608 <HAL_GetTick>
 80097a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80097aa:	e008      	b.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097ac:	f7fe ff2c 	bl	8008608 <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	2b64      	cmp	r3, #100	; 0x64
 80097b8:	d901      	bls.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e357      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80097be:	4b2c      	ldr	r3, [pc, #176]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d0f0      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80097ca:	4b28      	ldr	r3, [pc, #160]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d035      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d02e      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097e8:	4b20      	ldr	r3, [pc, #128]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80097f2:	4b1e      	ldr	r3, [pc, #120]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f6:	4a1d      	ldr	r2, [pc, #116]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80097fe:	4b1b      	ldr	r3, [pc, #108]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009802:	4a1a      	ldr	r2, [pc, #104]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009808:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800980a:	4a18      	ldr	r2, [pc, #96]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009810:	4b16      	ldr	r3, [pc, #88]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009814:	f003 0301 	and.w	r3, r3, #1
 8009818:	2b01      	cmp	r3, #1
 800981a:	d114      	bne.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800981c:	f7fe fef4 	bl	8008608 <HAL_GetTick>
 8009820:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009822:	e00a      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009824:	f7fe fef0 	bl	8008608 <HAL_GetTick>
 8009828:	4602      	mov	r2, r0
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009832:	4293      	cmp	r3, r2
 8009834:	d901      	bls.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e319      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800983a:	4b0c      	ldr	r3, [pc, #48]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800983c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983e:	f003 0302 	and.w	r3, r3, #2
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0ee      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800984e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009852:	d111      	bne.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009860:	4b04      	ldr	r3, [pc, #16]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009862:	400b      	ands	r3, r1
 8009864:	4901      	ldr	r1, [pc, #4]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009866:	4313      	orrs	r3, r2
 8009868:	608b      	str	r3, [r1, #8]
 800986a:	e00b      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800986c:	40023800 	.word	0x40023800
 8009870:	40007000 	.word	0x40007000
 8009874:	0ffffcff 	.word	0x0ffffcff
 8009878:	4bb1      	ldr	r3, [pc, #708]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	4ab0      	ldr	r2, [pc, #704]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800987e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009882:	6093      	str	r3, [r2, #8]
 8009884:	4bae      	ldr	r3, [pc, #696]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009886:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009890:	49ab      	ldr	r1, [pc, #684]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009892:	4313      	orrs	r3, r2
 8009894:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 0310 	and.w	r3, r3, #16
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d010      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098a2:	4ba7      	ldr	r3, [pc, #668]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098a8:	4aa5      	ldr	r2, [pc, #660]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80098b2:	4ba3      	ldr	r3, [pc, #652]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098bc:	49a0      	ldr	r1, [pc, #640]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098be:	4313      	orrs	r3, r2
 80098c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00a      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80098d0:	4b9b      	ldr	r3, [pc, #620]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098de:	4998      	ldr	r1, [pc, #608]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098e0:	4313      	orrs	r3, r2
 80098e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00a      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80098f2:	4b93      	ldr	r3, [pc, #588]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009900:	498f      	ldr	r1, [pc, #572]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009902:	4313      	orrs	r3, r2
 8009904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00a      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009914:	4b8a      	ldr	r3, [pc, #552]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800991a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009922:	4987      	ldr	r1, [pc, #540]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009924:	4313      	orrs	r3, r2
 8009926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00a      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009936:	4b82      	ldr	r3, [pc, #520]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800993c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009944:	497e      	ldr	r1, [pc, #504]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009946:	4313      	orrs	r3, r2
 8009948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00a      	beq.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009958:	4b79      	ldr	r3, [pc, #484]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800995a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800995e:	f023 0203 	bic.w	r2, r3, #3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009966:	4976      	ldr	r1, [pc, #472]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009968:	4313      	orrs	r3, r2
 800996a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00a      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800997a:	4b71      	ldr	r3, [pc, #452]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800997c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009980:	f023 020c 	bic.w	r2, r3, #12
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009988:	496d      	ldr	r1, [pc, #436]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800998a:	4313      	orrs	r3, r2
 800998c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00a      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800999c:	4b68      	ldr	r3, [pc, #416]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800999e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099aa:	4965      	ldr	r1, [pc, #404]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80099ac:	4313      	orrs	r3, r2
 80099ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00a      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80099be:	4b60      	ldr	r3, [pc, #384]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80099c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099cc:	495c      	ldr	r1, [pc, #368]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80099ce:	4313      	orrs	r3, r2
 80099d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00a      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80099e0:	4b57      	ldr	r3, [pc, #348]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80099e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ee:	4954      	ldr	r1, [pc, #336]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00a      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009a02:	4b4f      	ldr	r3, [pc, #316]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a10:	494b      	ldr	r1, [pc, #300]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a12:	4313      	orrs	r3, r2
 8009a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00a      	beq.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009a24:	4b46      	ldr	r3, [pc, #280]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a32:	4943      	ldr	r1, [pc, #268]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a34:	4313      	orrs	r3, r2
 8009a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00a      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009a46:	4b3e      	ldr	r3, [pc, #248]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a54:	493a      	ldr	r1, [pc, #232]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00a      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a68:	4b35      	ldr	r3, [pc, #212]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a76:	4932      	ldr	r1, [pc, #200]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d011      	beq.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009a8a:	4b2d      	ldr	r3, [pc, #180]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a90:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a98:	4929      	ldr	r1, [pc, #164]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009aa8:	d101      	bne.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0308 	and.w	r3, r3, #8
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009aba:	2301      	movs	r3, #1
 8009abc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009aca:	4b1d      	ldr	r3, [pc, #116]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ad0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ad8:	4919      	ldr	r1, [pc, #100]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00b      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009aec:	4b14      	ldr	r3, [pc, #80]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009af2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009afc:	4910      	ldr	r1, [pc, #64]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009afe:	4313      	orrs	r3, r2
 8009b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d006      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f000 80d9 	beq.w	8009cca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009b18:	4b09      	ldr	r3, [pc, #36]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a08      	ldr	r2, [pc, #32]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b24:	f7fe fd70 	bl	8008608 <HAL_GetTick>
 8009b28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009b2a:	e00b      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009b2c:	f7fe fd6c 	bl	8008608 <HAL_GetTick>
 8009b30:	4602      	mov	r2, r0
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	2b64      	cmp	r3, #100	; 0x64
 8009b38:	d904      	bls.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	e197      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009b3e:	bf00      	nop
 8009b40:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009b44:	4b6c      	ldr	r3, [pc, #432]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1ed      	bne.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d021      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d11d      	bne.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009b64:	4b64      	ldr	r3, [pc, #400]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b6a:	0c1b      	lsrs	r3, r3, #16
 8009b6c:	f003 0303 	and.w	r3, r3, #3
 8009b70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009b72:	4b61      	ldr	r3, [pc, #388]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b78:	0e1b      	lsrs	r3, r3, #24
 8009b7a:	f003 030f 	and.w	r3, r3, #15
 8009b7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	019a      	lsls	r2, r3, #6
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	041b      	lsls	r3, r3, #16
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	061b      	lsls	r3, r3, #24
 8009b90:	431a      	orrs	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	071b      	lsls	r3, r3, #28
 8009b98:	4957      	ldr	r1, [pc, #348]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d004      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bb4:	d00a      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d02e      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bca:	d129      	bne.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009bcc:	4b4a      	ldr	r3, [pc, #296]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bd2:	0c1b      	lsrs	r3, r3, #16
 8009bd4:	f003 0303 	and.w	r3, r3, #3
 8009bd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009bda:	4b47      	ldr	r3, [pc, #284]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009be0:	0f1b      	lsrs	r3, r3, #28
 8009be2:	f003 0307 	and.w	r3, r3, #7
 8009be6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	019a      	lsls	r2, r3, #6
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	041b      	lsls	r3, r3, #16
 8009bf2:	431a      	orrs	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	061b      	lsls	r3, r3, #24
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	071b      	lsls	r3, r3, #28
 8009c00:	493d      	ldr	r1, [pc, #244]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c02:	4313      	orrs	r3, r2
 8009c04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009c08:	4b3b      	ldr	r3, [pc, #236]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c0e:	f023 021f 	bic.w	r2, r3, #31
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c16:	3b01      	subs	r3, #1
 8009c18:	4937      	ldr	r1, [pc, #220]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d01d      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009c2c:	4b32      	ldr	r3, [pc, #200]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c32:	0e1b      	lsrs	r3, r3, #24
 8009c34:	f003 030f 	and.w	r3, r3, #15
 8009c38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009c3a:	4b2f      	ldr	r3, [pc, #188]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c40:	0f1b      	lsrs	r3, r3, #28
 8009c42:	f003 0307 	and.w	r3, r3, #7
 8009c46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	019a      	lsls	r2, r3, #6
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	041b      	lsls	r3, r3, #16
 8009c54:	431a      	orrs	r2, r3
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	061b      	lsls	r3, r3, #24
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	071b      	lsls	r3, r3, #28
 8009c60:	4925      	ldr	r1, [pc, #148]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d011      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	019a      	lsls	r2, r3, #6
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	041b      	lsls	r3, r3, #16
 8009c80:	431a      	orrs	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	061b      	lsls	r3, r3, #24
 8009c88:	431a      	orrs	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	071b      	lsls	r3, r3, #28
 8009c90:	4919      	ldr	r1, [pc, #100]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009c98:	4b17      	ldr	r3, [pc, #92]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a16      	ldr	r2, [pc, #88]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ca4:	f7fe fcb0 	bl	8008608 <HAL_GetTick>
 8009ca8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009caa:	e008      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009cac:	f7fe fcac 	bl	8008608 <HAL_GetTick>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	2b64      	cmp	r3, #100	; 0x64
 8009cb8:	d901      	bls.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e0d7      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009cbe:	4b0e      	ldr	r3, [pc, #56]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d0f0      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	f040 80cd 	bne.w	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009cd2:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a08      	ldr	r2, [pc, #32]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cde:	f7fe fc93 	bl	8008608 <HAL_GetTick>
 8009ce2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ce4:	e00a      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009ce6:	f7fe fc8f 	bl	8008608 <HAL_GetTick>
 8009cea:	4602      	mov	r2, r0
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	2b64      	cmp	r3, #100	; 0x64
 8009cf2:	d903      	bls.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e0ba      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009cf8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009cfc:	4b5e      	ldr	r3, [pc, #376]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d08:	d0ed      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d003      	beq.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d009      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d02e      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d12a      	bne.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009d32:	4b51      	ldr	r3, [pc, #324]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d38:	0c1b      	lsrs	r3, r3, #16
 8009d3a:	f003 0303 	and.w	r3, r3, #3
 8009d3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009d40:	4b4d      	ldr	r3, [pc, #308]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d46:	0f1b      	lsrs	r3, r3, #28
 8009d48:	f003 0307 	and.w	r3, r3, #7
 8009d4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	695b      	ldr	r3, [r3, #20]
 8009d52:	019a      	lsls	r2, r3, #6
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	041b      	lsls	r3, r3, #16
 8009d58:	431a      	orrs	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	061b      	lsls	r3, r3, #24
 8009d60:	431a      	orrs	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	071b      	lsls	r3, r3, #28
 8009d66:	4944      	ldr	r1, [pc, #272]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009d6e:	4b42      	ldr	r3, [pc, #264]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	021b      	lsls	r3, r3, #8
 8009d80:	493d      	ldr	r1, [pc, #244]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d82:	4313      	orrs	r3, r2
 8009d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d022      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d9c:	d11d      	bne.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009d9e:	4b36      	ldr	r3, [pc, #216]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da4:	0e1b      	lsrs	r3, r3, #24
 8009da6:	f003 030f 	and.w	r3, r3, #15
 8009daa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009dac:	4b32      	ldr	r3, [pc, #200]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db2:	0f1b      	lsrs	r3, r3, #28
 8009db4:	f003 0307 	and.w	r3, r3, #7
 8009db8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	019a      	lsls	r2, r3, #6
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a1b      	ldr	r3, [r3, #32]
 8009dc4:	041b      	lsls	r3, r3, #16
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	061b      	lsls	r3, r3, #24
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	071b      	lsls	r3, r3, #28
 8009dd2:	4929      	ldr	r1, [pc, #164]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0308 	and.w	r3, r3, #8
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d028      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009de6:	4b24      	ldr	r3, [pc, #144]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dec:	0e1b      	lsrs	r3, r3, #24
 8009dee:	f003 030f 	and.w	r3, r3, #15
 8009df2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009df4:	4b20      	ldr	r3, [pc, #128]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dfa:	0c1b      	lsrs	r3, r3, #16
 8009dfc:	f003 0303 	and.w	r3, r3, #3
 8009e00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	019a      	lsls	r2, r3, #6
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	041b      	lsls	r3, r3, #16
 8009e0c:	431a      	orrs	r2, r3
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	061b      	lsls	r3, r3, #24
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	071b      	lsls	r3, r3, #28
 8009e1a:	4917      	ldr	r1, [pc, #92]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009e22:	4b15      	ldr	r3, [pc, #84]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e30:	4911      	ldr	r1, [pc, #68]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009e38:	4b0f      	ldr	r3, [pc, #60]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a0e      	ldr	r2, [pc, #56]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e44:	f7fe fbe0 	bl	8008608 <HAL_GetTick>
 8009e48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009e4a:	e008      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009e4c:	f7fe fbdc 	bl	8008608 <HAL_GetTick>
 8009e50:	4602      	mov	r2, r0
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	2b64      	cmp	r3, #100	; 0x64
 8009e58:	d901      	bls.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e007      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009e5e:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e6a:	d1ef      	bne.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3720      	adds	r7, #32
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	40023800 	.word	0x40023800

08009e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d101      	bne.n	8009e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e040      	b.n	8009f10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d106      	bne.n	8009ea4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7fe fa4e 	bl	8008340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2224      	movs	r2, #36	; 0x24
 8009ea8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f022 0201 	bic.w	r2, r2, #1
 8009eb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 facc 	bl	800a458 <UART_SetConfig>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d101      	bne.n	8009eca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e022      	b.n	8009f10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d002      	beq.n	8009ed8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fd22 	bl	800a91c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	685a      	ldr	r2, [r3, #4]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ee6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689a      	ldr	r2, [r3, #8]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ef6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f042 0201 	orr.w	r2, r2, #1
 8009f06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fda9 	bl	800aa60 <UART_CheckIdleState>
 8009f0e:	4603      	mov	r3, r0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08a      	sub	sp, #40	; 0x28
 8009f1c:	af02      	add	r7, sp, #8
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	603b      	str	r3, [r7, #0]
 8009f24:	4613      	mov	r3, r2
 8009f26:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f2c:	2b20      	cmp	r3, #32
 8009f2e:	f040 8081 	bne.w	800a034 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <HAL_UART_Transmit+0x26>
 8009f38:	88fb      	ldrh	r3, [r7, #6]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e079      	b.n	800a036 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d101      	bne.n	8009f50 <HAL_UART_Transmit+0x38>
 8009f4c:	2302      	movs	r3, #2
 8009f4e:	e072      	b.n	800a036 <HAL_UART_Transmit+0x11e>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2221      	movs	r2, #33	; 0x21
 8009f64:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f66:	f7fe fb4f 	bl	8008608 <HAL_GetTick>
 8009f6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	88fa      	ldrh	r2, [r7, #6]
 8009f70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	88fa      	ldrh	r2, [r7, #6]
 8009f78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f84:	d108      	bne.n	8009f98 <HAL_UART_Transmit+0x80>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d104      	bne.n	8009f98 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	61bb      	str	r3, [r7, #24]
 8009f96:	e003      	b.n	8009fa0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009fa8:	e02c      	b.n	800a004 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	2180      	movs	r1, #128	; 0x80
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 fd86 	bl	800aac6 <UART_WaitOnFlagUntilTimeout>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e038      	b.n	800a036 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10b      	bne.n	8009fe2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	881b      	ldrh	r3, [r3, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	3302      	adds	r3, #2
 8009fde:	61bb      	str	r3, [r7, #24]
 8009fe0:	e007      	b.n	8009ff2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	781a      	ldrb	r2, [r3, #0]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1cc      	bne.n	8009faa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	2200      	movs	r2, #0
 800a018:	2140      	movs	r1, #64	; 0x40
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f000 fd53 	bl	800aac6 <UART_WaitOnFlagUntilTimeout>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e005      	b.n	800a036 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2220      	movs	r2, #32
 800a02e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a030:	2300      	movs	r3, #0
 800a032:	e000      	b.n	800a036 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800a034:	2302      	movs	r3, #2
  }
}
 800a036:	4618      	mov	r0, r3
 800a038:	3720      	adds	r7, #32
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
	...

0800a040 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b088      	sub	sp, #32
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	69db      	ldr	r3, [r3, #28]
 800a04e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a060:	69fa      	ldr	r2, [r7, #28]
 800a062:	f640 030f 	movw	r3, #2063	; 0x80f
 800a066:	4013      	ands	r3, r2
 800a068:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d113      	bne.n	800a098 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	f003 0320 	and.w	r3, r3, #32
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00e      	beq.n	800a098 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	f003 0320 	and.w	r3, r3, #32
 800a080:	2b00      	cmp	r3, #0
 800a082:	d009      	beq.n	800a098 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 81b9 	beq.w	800a400 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	4798      	blx	r3
      }
      return;
 800a096:	e1b3      	b.n	800a400 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f000 80e3 	beq.w	800a266 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	f003 0301 	and.w	r3, r3, #1
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d105      	bne.n	800a0b6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a0aa:	69ba      	ldr	r2, [r7, #24]
 800a0ac:	4ba5      	ldr	r3, [pc, #660]	; (800a344 <HAL_UART_IRQHandler+0x304>)
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 80d8 	beq.w	800a266 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	f003 0301 	and.w	r3, r3, #1
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d010      	beq.n	800a0e2 <HAL_UART_IRQHandler+0xa2>
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00b      	beq.n	800a0e2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0d8:	f043 0201 	orr.w	r2, r3, #1
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	f003 0302 	and.w	r3, r3, #2
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d010      	beq.n	800a10e <HAL_UART_IRQHandler+0xce>
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f003 0301 	and.w	r3, r3, #1
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00b      	beq.n	800a10e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a104:	f043 0204 	orr.w	r2, r3, #4
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b00      	cmp	r3, #0
 800a116:	d010      	beq.n	800a13a <HAL_UART_IRQHandler+0xfa>
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00b      	beq.n	800a13a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2204      	movs	r2, #4
 800a128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a130:	f043 0202 	orr.w	r2, r3, #2
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	f003 0308 	and.w	r3, r3, #8
 800a140:	2b00      	cmp	r3, #0
 800a142:	d015      	beq.n	800a170 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	f003 0320 	and.w	r3, r3, #32
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d104      	bne.n	800a158 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00b      	beq.n	800a170 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2208      	movs	r2, #8
 800a15e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a166:	f043 0208 	orr.w	r2, r3, #8
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a176:	2b00      	cmp	r3, #0
 800a178:	d011      	beq.n	800a19e <HAL_UART_IRQHandler+0x15e>
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00c      	beq.n	800a19e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a18c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a194:	f043 0220 	orr.w	r2, r3, #32
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 812d 	beq.w	800a404 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	f003 0320 	and.w	r3, r3, #32
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00c      	beq.n	800a1ce <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	f003 0320 	and.w	r3, r3, #32
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d007      	beq.n	800a1ce <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1e0:	2b40      	cmp	r3, #64	; 0x40
 800a1e2:	d004      	beq.n	800a1ee <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d031      	beq.n	800a252 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fce5 	bl	800abbe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1fe:	2b40      	cmp	r3, #64	; 0x40
 800a200:	d123      	bne.n	800a24a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a210:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a216:	2b00      	cmp	r3, #0
 800a218:	d013      	beq.n	800a242 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a21e:	4a4a      	ldr	r2, [pc, #296]	; (800a348 <HAL_UART_IRQHandler+0x308>)
 800a220:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a226:	4618      	mov	r0, r3
 800a228:	f7fe fb9f 	bl	800896a <HAL_DMA_Abort_IT>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d017      	beq.n	800a262 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a23c:	4610      	mov	r0, r2
 800a23e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a240:	e00f      	b.n	800a262 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f8f2 	bl	800a42c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a248:	e00b      	b.n	800a262 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f8ee 	bl	800a42c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a250:	e007      	b.n	800a262 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f8ea 	bl	800a42c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a260:	e0d0      	b.n	800a404 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a262:	bf00      	nop
    return;
 800a264:	e0ce      	b.n	800a404 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	f040 80a7 	bne.w	800a3be <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	f003 0310 	and.w	r3, r3, #16
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 80a1 	beq.w	800a3be <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	f003 0310 	and.w	r3, r3, #16
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 809b 	beq.w	800a3be <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2210      	movs	r2, #16
 800a28e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a29a:	2b40      	cmp	r3, #64	; 0x40
 800a29c:	d156      	bne.n	800a34c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800a2a8:	893b      	ldrh	r3, [r7, #8]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f000 80ac 	beq.w	800a408 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a2b6:	893a      	ldrh	r2, [r7, #8]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	f080 80a5 	bcs.w	800a408 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	893a      	ldrh	r2, [r7, #8]
 800a2c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ca:	69db      	ldr	r3, [r3, #28]
 800a2cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2d0:	d02a      	beq.n	800a328 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	689a      	ldr	r2, [r3, #8]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f022 0201 	bic.w	r2, r2, #1
 800a2f0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a300:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2220      	movs	r2, #32
 800a306:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f022 0210 	bic.w	r2, r2, #16
 800a31c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a322:	4618      	mov	r0, r3
 800a324:	f7fe fab1 	bl	800888a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a334:	b29b      	uxth	r3, r3
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	b29b      	uxth	r3, r3
 800a33a:	4619      	mov	r1, r3
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f87f 	bl	800a440 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a342:	e061      	b.n	800a408 <HAL_UART_IRQHandler+0x3c8>
 800a344:	04000120 	.word	0x04000120
 800a348:	0800ac1d 	.word	0x0800ac1d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a358:	b29b      	uxth	r3, r3
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a364:	b29b      	uxth	r3, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d050      	beq.n	800a40c <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800a36a:	897b      	ldrh	r3, [r7, #10]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d04d      	beq.n	800a40c <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a37e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	689a      	ldr	r2, [r3, #8]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f022 0201 	bic.w	r2, r2, #1
 800a38e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2220      	movs	r2, #32
 800a394:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f022 0210 	bic.w	r2, r2, #16
 800a3b0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3b2:	897b      	ldrh	r3, [r7, #10]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f842 	bl	800a440 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3bc:	e026      	b.n	800a40c <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00d      	beq.n	800a3e4 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d008      	beq.n	800a3e4 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d01a      	beq.n	800a410 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	4798      	blx	r3
    }
    return;
 800a3e2:	e015      	b.n	800a410 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d011      	beq.n	800a412 <HAL_UART_IRQHandler+0x3d2>
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00c      	beq.n	800a412 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fc25 	bl	800ac48 <UART_EndTransmit_IT>
    return;
 800a3fe:	e008      	b.n	800a412 <HAL_UART_IRQHandler+0x3d2>
      return;
 800a400:	bf00      	nop
 800a402:	e006      	b.n	800a412 <HAL_UART_IRQHandler+0x3d2>
    return;
 800a404:	bf00      	nop
 800a406:	e004      	b.n	800a412 <HAL_UART_IRQHandler+0x3d2>
      return;
 800a408:	bf00      	nop
 800a40a:	e002      	b.n	800a412 <HAL_UART_IRQHandler+0x3d2>
      return;
 800a40c:	bf00      	nop
 800a40e:	e000      	b.n	800a412 <HAL_UART_IRQHandler+0x3d2>
    return;
 800a410:	bf00      	nop
  }

}
 800a412:	3720      	adds	r7, #32
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	460b      	mov	r3, r1
 800a44a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b088      	sub	sp, #32
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a460:	2300      	movs	r3, #0
 800a462:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	689a      	ldr	r2, [r3, #8]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	431a      	orrs	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	695b      	ldr	r3, [r3, #20]
 800a472:	431a      	orrs	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	69db      	ldr	r3, [r3, #28]
 800a478:	4313      	orrs	r3, r2
 800a47a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	4ba7      	ldr	r3, [pc, #668]	; (800a720 <UART_SetConfig+0x2c8>)
 800a484:	4013      	ands	r3, r2
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6812      	ldr	r2, [r2, #0]
 800a48a:	6979      	ldr	r1, [r7, #20]
 800a48c:	430b      	orrs	r3, r1
 800a48e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68da      	ldr	r2, [r3, #12]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	430a      	orrs	r2, r1
 800a4a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a1b      	ldr	r3, [r3, #32]
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a95      	ldr	r2, [pc, #596]	; (800a724 <UART_SetConfig+0x2cc>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d120      	bne.n	800a516 <UART_SetConfig+0xbe>
 800a4d4:	4b94      	ldr	r3, [pc, #592]	; (800a728 <UART_SetConfig+0x2d0>)
 800a4d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4da:	f003 0303 	and.w	r3, r3, #3
 800a4de:	2b03      	cmp	r3, #3
 800a4e0:	d816      	bhi.n	800a510 <UART_SetConfig+0xb8>
 800a4e2:	a201      	add	r2, pc, #4	; (adr r2, 800a4e8 <UART_SetConfig+0x90>)
 800a4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e8:	0800a4f9 	.word	0x0800a4f9
 800a4ec:	0800a505 	.word	0x0800a505
 800a4f0:	0800a4ff 	.word	0x0800a4ff
 800a4f4:	0800a50b 	.word	0x0800a50b
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	77fb      	strb	r3, [r7, #31]
 800a4fc:	e14f      	b.n	800a79e <UART_SetConfig+0x346>
 800a4fe:	2302      	movs	r3, #2
 800a500:	77fb      	strb	r3, [r7, #31]
 800a502:	e14c      	b.n	800a79e <UART_SetConfig+0x346>
 800a504:	2304      	movs	r3, #4
 800a506:	77fb      	strb	r3, [r7, #31]
 800a508:	e149      	b.n	800a79e <UART_SetConfig+0x346>
 800a50a:	2308      	movs	r3, #8
 800a50c:	77fb      	strb	r3, [r7, #31]
 800a50e:	e146      	b.n	800a79e <UART_SetConfig+0x346>
 800a510:	2310      	movs	r3, #16
 800a512:	77fb      	strb	r3, [r7, #31]
 800a514:	e143      	b.n	800a79e <UART_SetConfig+0x346>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a84      	ldr	r2, [pc, #528]	; (800a72c <UART_SetConfig+0x2d4>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d132      	bne.n	800a586 <UART_SetConfig+0x12e>
 800a520:	4b81      	ldr	r3, [pc, #516]	; (800a728 <UART_SetConfig+0x2d0>)
 800a522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a526:	f003 030c 	and.w	r3, r3, #12
 800a52a:	2b0c      	cmp	r3, #12
 800a52c:	d828      	bhi.n	800a580 <UART_SetConfig+0x128>
 800a52e:	a201      	add	r2, pc, #4	; (adr r2, 800a534 <UART_SetConfig+0xdc>)
 800a530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a534:	0800a569 	.word	0x0800a569
 800a538:	0800a581 	.word	0x0800a581
 800a53c:	0800a581 	.word	0x0800a581
 800a540:	0800a581 	.word	0x0800a581
 800a544:	0800a575 	.word	0x0800a575
 800a548:	0800a581 	.word	0x0800a581
 800a54c:	0800a581 	.word	0x0800a581
 800a550:	0800a581 	.word	0x0800a581
 800a554:	0800a56f 	.word	0x0800a56f
 800a558:	0800a581 	.word	0x0800a581
 800a55c:	0800a581 	.word	0x0800a581
 800a560:	0800a581 	.word	0x0800a581
 800a564:	0800a57b 	.word	0x0800a57b
 800a568:	2300      	movs	r3, #0
 800a56a:	77fb      	strb	r3, [r7, #31]
 800a56c:	e117      	b.n	800a79e <UART_SetConfig+0x346>
 800a56e:	2302      	movs	r3, #2
 800a570:	77fb      	strb	r3, [r7, #31]
 800a572:	e114      	b.n	800a79e <UART_SetConfig+0x346>
 800a574:	2304      	movs	r3, #4
 800a576:	77fb      	strb	r3, [r7, #31]
 800a578:	e111      	b.n	800a79e <UART_SetConfig+0x346>
 800a57a:	2308      	movs	r3, #8
 800a57c:	77fb      	strb	r3, [r7, #31]
 800a57e:	e10e      	b.n	800a79e <UART_SetConfig+0x346>
 800a580:	2310      	movs	r3, #16
 800a582:	77fb      	strb	r3, [r7, #31]
 800a584:	e10b      	b.n	800a79e <UART_SetConfig+0x346>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a69      	ldr	r2, [pc, #420]	; (800a730 <UART_SetConfig+0x2d8>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d120      	bne.n	800a5d2 <UART_SetConfig+0x17a>
 800a590:	4b65      	ldr	r3, [pc, #404]	; (800a728 <UART_SetConfig+0x2d0>)
 800a592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a596:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a59a:	2b30      	cmp	r3, #48	; 0x30
 800a59c:	d013      	beq.n	800a5c6 <UART_SetConfig+0x16e>
 800a59e:	2b30      	cmp	r3, #48	; 0x30
 800a5a0:	d814      	bhi.n	800a5cc <UART_SetConfig+0x174>
 800a5a2:	2b20      	cmp	r3, #32
 800a5a4:	d009      	beq.n	800a5ba <UART_SetConfig+0x162>
 800a5a6:	2b20      	cmp	r3, #32
 800a5a8:	d810      	bhi.n	800a5cc <UART_SetConfig+0x174>
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d002      	beq.n	800a5b4 <UART_SetConfig+0x15c>
 800a5ae:	2b10      	cmp	r3, #16
 800a5b0:	d006      	beq.n	800a5c0 <UART_SetConfig+0x168>
 800a5b2:	e00b      	b.n	800a5cc <UART_SetConfig+0x174>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	77fb      	strb	r3, [r7, #31]
 800a5b8:	e0f1      	b.n	800a79e <UART_SetConfig+0x346>
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	77fb      	strb	r3, [r7, #31]
 800a5be:	e0ee      	b.n	800a79e <UART_SetConfig+0x346>
 800a5c0:	2304      	movs	r3, #4
 800a5c2:	77fb      	strb	r3, [r7, #31]
 800a5c4:	e0eb      	b.n	800a79e <UART_SetConfig+0x346>
 800a5c6:	2308      	movs	r3, #8
 800a5c8:	77fb      	strb	r3, [r7, #31]
 800a5ca:	e0e8      	b.n	800a79e <UART_SetConfig+0x346>
 800a5cc:	2310      	movs	r3, #16
 800a5ce:	77fb      	strb	r3, [r7, #31]
 800a5d0:	e0e5      	b.n	800a79e <UART_SetConfig+0x346>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a57      	ldr	r2, [pc, #348]	; (800a734 <UART_SetConfig+0x2dc>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d120      	bne.n	800a61e <UART_SetConfig+0x1c6>
 800a5dc:	4b52      	ldr	r3, [pc, #328]	; (800a728 <UART_SetConfig+0x2d0>)
 800a5de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5e6:	2bc0      	cmp	r3, #192	; 0xc0
 800a5e8:	d013      	beq.n	800a612 <UART_SetConfig+0x1ba>
 800a5ea:	2bc0      	cmp	r3, #192	; 0xc0
 800a5ec:	d814      	bhi.n	800a618 <UART_SetConfig+0x1c0>
 800a5ee:	2b80      	cmp	r3, #128	; 0x80
 800a5f0:	d009      	beq.n	800a606 <UART_SetConfig+0x1ae>
 800a5f2:	2b80      	cmp	r3, #128	; 0x80
 800a5f4:	d810      	bhi.n	800a618 <UART_SetConfig+0x1c0>
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d002      	beq.n	800a600 <UART_SetConfig+0x1a8>
 800a5fa:	2b40      	cmp	r3, #64	; 0x40
 800a5fc:	d006      	beq.n	800a60c <UART_SetConfig+0x1b4>
 800a5fe:	e00b      	b.n	800a618 <UART_SetConfig+0x1c0>
 800a600:	2300      	movs	r3, #0
 800a602:	77fb      	strb	r3, [r7, #31]
 800a604:	e0cb      	b.n	800a79e <UART_SetConfig+0x346>
 800a606:	2302      	movs	r3, #2
 800a608:	77fb      	strb	r3, [r7, #31]
 800a60a:	e0c8      	b.n	800a79e <UART_SetConfig+0x346>
 800a60c:	2304      	movs	r3, #4
 800a60e:	77fb      	strb	r3, [r7, #31]
 800a610:	e0c5      	b.n	800a79e <UART_SetConfig+0x346>
 800a612:	2308      	movs	r3, #8
 800a614:	77fb      	strb	r3, [r7, #31]
 800a616:	e0c2      	b.n	800a79e <UART_SetConfig+0x346>
 800a618:	2310      	movs	r3, #16
 800a61a:	77fb      	strb	r3, [r7, #31]
 800a61c:	e0bf      	b.n	800a79e <UART_SetConfig+0x346>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a45      	ldr	r2, [pc, #276]	; (800a738 <UART_SetConfig+0x2e0>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d125      	bne.n	800a674 <UART_SetConfig+0x21c>
 800a628:	4b3f      	ldr	r3, [pc, #252]	; (800a728 <UART_SetConfig+0x2d0>)
 800a62a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a62e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a636:	d017      	beq.n	800a668 <UART_SetConfig+0x210>
 800a638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a63c:	d817      	bhi.n	800a66e <UART_SetConfig+0x216>
 800a63e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a642:	d00b      	beq.n	800a65c <UART_SetConfig+0x204>
 800a644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a648:	d811      	bhi.n	800a66e <UART_SetConfig+0x216>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d003      	beq.n	800a656 <UART_SetConfig+0x1fe>
 800a64e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a652:	d006      	beq.n	800a662 <UART_SetConfig+0x20a>
 800a654:	e00b      	b.n	800a66e <UART_SetConfig+0x216>
 800a656:	2300      	movs	r3, #0
 800a658:	77fb      	strb	r3, [r7, #31]
 800a65a:	e0a0      	b.n	800a79e <UART_SetConfig+0x346>
 800a65c:	2302      	movs	r3, #2
 800a65e:	77fb      	strb	r3, [r7, #31]
 800a660:	e09d      	b.n	800a79e <UART_SetConfig+0x346>
 800a662:	2304      	movs	r3, #4
 800a664:	77fb      	strb	r3, [r7, #31]
 800a666:	e09a      	b.n	800a79e <UART_SetConfig+0x346>
 800a668:	2308      	movs	r3, #8
 800a66a:	77fb      	strb	r3, [r7, #31]
 800a66c:	e097      	b.n	800a79e <UART_SetConfig+0x346>
 800a66e:	2310      	movs	r3, #16
 800a670:	77fb      	strb	r3, [r7, #31]
 800a672:	e094      	b.n	800a79e <UART_SetConfig+0x346>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a30      	ldr	r2, [pc, #192]	; (800a73c <UART_SetConfig+0x2e4>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d125      	bne.n	800a6ca <UART_SetConfig+0x272>
 800a67e:	4b2a      	ldr	r3, [pc, #168]	; (800a728 <UART_SetConfig+0x2d0>)
 800a680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a684:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a688:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a68c:	d017      	beq.n	800a6be <UART_SetConfig+0x266>
 800a68e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a692:	d817      	bhi.n	800a6c4 <UART_SetConfig+0x26c>
 800a694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a698:	d00b      	beq.n	800a6b2 <UART_SetConfig+0x25a>
 800a69a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a69e:	d811      	bhi.n	800a6c4 <UART_SetConfig+0x26c>
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d003      	beq.n	800a6ac <UART_SetConfig+0x254>
 800a6a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6a8:	d006      	beq.n	800a6b8 <UART_SetConfig+0x260>
 800a6aa:	e00b      	b.n	800a6c4 <UART_SetConfig+0x26c>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	77fb      	strb	r3, [r7, #31]
 800a6b0:	e075      	b.n	800a79e <UART_SetConfig+0x346>
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	77fb      	strb	r3, [r7, #31]
 800a6b6:	e072      	b.n	800a79e <UART_SetConfig+0x346>
 800a6b8:	2304      	movs	r3, #4
 800a6ba:	77fb      	strb	r3, [r7, #31]
 800a6bc:	e06f      	b.n	800a79e <UART_SetConfig+0x346>
 800a6be:	2308      	movs	r3, #8
 800a6c0:	77fb      	strb	r3, [r7, #31]
 800a6c2:	e06c      	b.n	800a79e <UART_SetConfig+0x346>
 800a6c4:	2310      	movs	r3, #16
 800a6c6:	77fb      	strb	r3, [r7, #31]
 800a6c8:	e069      	b.n	800a79e <UART_SetConfig+0x346>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a1c      	ldr	r2, [pc, #112]	; (800a740 <UART_SetConfig+0x2e8>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d137      	bne.n	800a744 <UART_SetConfig+0x2ec>
 800a6d4:	4b14      	ldr	r3, [pc, #80]	; (800a728 <UART_SetConfig+0x2d0>)
 800a6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a6de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6e2:	d017      	beq.n	800a714 <UART_SetConfig+0x2bc>
 800a6e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6e8:	d817      	bhi.n	800a71a <UART_SetConfig+0x2c2>
 800a6ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ee:	d00b      	beq.n	800a708 <UART_SetConfig+0x2b0>
 800a6f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6f4:	d811      	bhi.n	800a71a <UART_SetConfig+0x2c2>
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d003      	beq.n	800a702 <UART_SetConfig+0x2aa>
 800a6fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6fe:	d006      	beq.n	800a70e <UART_SetConfig+0x2b6>
 800a700:	e00b      	b.n	800a71a <UART_SetConfig+0x2c2>
 800a702:	2300      	movs	r3, #0
 800a704:	77fb      	strb	r3, [r7, #31]
 800a706:	e04a      	b.n	800a79e <UART_SetConfig+0x346>
 800a708:	2302      	movs	r3, #2
 800a70a:	77fb      	strb	r3, [r7, #31]
 800a70c:	e047      	b.n	800a79e <UART_SetConfig+0x346>
 800a70e:	2304      	movs	r3, #4
 800a710:	77fb      	strb	r3, [r7, #31]
 800a712:	e044      	b.n	800a79e <UART_SetConfig+0x346>
 800a714:	2308      	movs	r3, #8
 800a716:	77fb      	strb	r3, [r7, #31]
 800a718:	e041      	b.n	800a79e <UART_SetConfig+0x346>
 800a71a:	2310      	movs	r3, #16
 800a71c:	77fb      	strb	r3, [r7, #31]
 800a71e:	e03e      	b.n	800a79e <UART_SetConfig+0x346>
 800a720:	efff69f3 	.word	0xefff69f3
 800a724:	40011000 	.word	0x40011000
 800a728:	40023800 	.word	0x40023800
 800a72c:	40004400 	.word	0x40004400
 800a730:	40004800 	.word	0x40004800
 800a734:	40004c00 	.word	0x40004c00
 800a738:	40005000 	.word	0x40005000
 800a73c:	40011400 	.word	0x40011400
 800a740:	40007800 	.word	0x40007800
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a71      	ldr	r2, [pc, #452]	; (800a910 <UART_SetConfig+0x4b8>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d125      	bne.n	800a79a <UART_SetConfig+0x342>
 800a74e:	4b71      	ldr	r3, [pc, #452]	; (800a914 <UART_SetConfig+0x4bc>)
 800a750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a758:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a75c:	d017      	beq.n	800a78e <UART_SetConfig+0x336>
 800a75e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a762:	d817      	bhi.n	800a794 <UART_SetConfig+0x33c>
 800a764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a768:	d00b      	beq.n	800a782 <UART_SetConfig+0x32a>
 800a76a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a76e:	d811      	bhi.n	800a794 <UART_SetConfig+0x33c>
 800a770:	2b00      	cmp	r3, #0
 800a772:	d003      	beq.n	800a77c <UART_SetConfig+0x324>
 800a774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a778:	d006      	beq.n	800a788 <UART_SetConfig+0x330>
 800a77a:	e00b      	b.n	800a794 <UART_SetConfig+0x33c>
 800a77c:	2300      	movs	r3, #0
 800a77e:	77fb      	strb	r3, [r7, #31]
 800a780:	e00d      	b.n	800a79e <UART_SetConfig+0x346>
 800a782:	2302      	movs	r3, #2
 800a784:	77fb      	strb	r3, [r7, #31]
 800a786:	e00a      	b.n	800a79e <UART_SetConfig+0x346>
 800a788:	2304      	movs	r3, #4
 800a78a:	77fb      	strb	r3, [r7, #31]
 800a78c:	e007      	b.n	800a79e <UART_SetConfig+0x346>
 800a78e:	2308      	movs	r3, #8
 800a790:	77fb      	strb	r3, [r7, #31]
 800a792:	e004      	b.n	800a79e <UART_SetConfig+0x346>
 800a794:	2310      	movs	r3, #16
 800a796:	77fb      	strb	r3, [r7, #31]
 800a798:	e001      	b.n	800a79e <UART_SetConfig+0x346>
 800a79a:	2310      	movs	r3, #16
 800a79c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	69db      	ldr	r3, [r3, #28]
 800a7a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7a6:	d15b      	bne.n	800a860 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800a7a8:	7ffb      	ldrb	r3, [r7, #31]
 800a7aa:	2b08      	cmp	r3, #8
 800a7ac:	d827      	bhi.n	800a7fe <UART_SetConfig+0x3a6>
 800a7ae:	a201      	add	r2, pc, #4	; (adr r2, 800a7b4 <UART_SetConfig+0x35c>)
 800a7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b4:	0800a7d9 	.word	0x0800a7d9
 800a7b8:	0800a7e1 	.word	0x0800a7e1
 800a7bc:	0800a7e9 	.word	0x0800a7e9
 800a7c0:	0800a7ff 	.word	0x0800a7ff
 800a7c4:	0800a7ef 	.word	0x0800a7ef
 800a7c8:	0800a7ff 	.word	0x0800a7ff
 800a7cc:	0800a7ff 	.word	0x0800a7ff
 800a7d0:	0800a7ff 	.word	0x0800a7ff
 800a7d4:	0800a7f7 	.word	0x0800a7f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7d8:	f7fe ff38 	bl	800964c <HAL_RCC_GetPCLK1Freq>
 800a7dc:	61b8      	str	r0, [r7, #24]
        break;
 800a7de:	e013      	b.n	800a808 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7e0:	f7fe ff48 	bl	8009674 <HAL_RCC_GetPCLK2Freq>
 800a7e4:	61b8      	str	r0, [r7, #24]
        break;
 800a7e6:	e00f      	b.n	800a808 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7e8:	4b4b      	ldr	r3, [pc, #300]	; (800a918 <UART_SetConfig+0x4c0>)
 800a7ea:	61bb      	str	r3, [r7, #24]
        break;
 800a7ec:	e00c      	b.n	800a808 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7ee:	f7fe fe6b 	bl	80094c8 <HAL_RCC_GetSysClockFreq>
 800a7f2:	61b8      	str	r0, [r7, #24]
        break;
 800a7f4:	e008      	b.n	800a808 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7fa:	61bb      	str	r3, [r7, #24]
        break;
 800a7fc:	e004      	b.n	800a808 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a7fe:	2300      	movs	r3, #0
 800a800:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	77bb      	strb	r3, [r7, #30]
        break;
 800a806:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d074      	beq.n	800a8f8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	005a      	lsls	r2, r3, #1
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	085b      	lsrs	r3, r3, #1
 800a818:	441a      	add	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a822:	b29b      	uxth	r3, r3
 800a824:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	2b0f      	cmp	r3, #15
 800a82a:	d916      	bls.n	800a85a <UART_SetConfig+0x402>
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a832:	d212      	bcs.n	800a85a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	b29b      	uxth	r3, r3
 800a838:	f023 030f 	bic.w	r3, r3, #15
 800a83c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	085b      	lsrs	r3, r3, #1
 800a842:	b29b      	uxth	r3, r3
 800a844:	f003 0307 	and.w	r3, r3, #7
 800a848:	b29a      	uxth	r2, r3
 800a84a:	89fb      	ldrh	r3, [r7, #14]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	89fa      	ldrh	r2, [r7, #14]
 800a856:	60da      	str	r2, [r3, #12]
 800a858:	e04e      	b.n	800a8f8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	77bb      	strb	r3, [r7, #30]
 800a85e:	e04b      	b.n	800a8f8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a860:	7ffb      	ldrb	r3, [r7, #31]
 800a862:	2b08      	cmp	r3, #8
 800a864:	d827      	bhi.n	800a8b6 <UART_SetConfig+0x45e>
 800a866:	a201      	add	r2, pc, #4	; (adr r2, 800a86c <UART_SetConfig+0x414>)
 800a868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86c:	0800a891 	.word	0x0800a891
 800a870:	0800a899 	.word	0x0800a899
 800a874:	0800a8a1 	.word	0x0800a8a1
 800a878:	0800a8b7 	.word	0x0800a8b7
 800a87c:	0800a8a7 	.word	0x0800a8a7
 800a880:	0800a8b7 	.word	0x0800a8b7
 800a884:	0800a8b7 	.word	0x0800a8b7
 800a888:	0800a8b7 	.word	0x0800a8b7
 800a88c:	0800a8af 	.word	0x0800a8af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a890:	f7fe fedc 	bl	800964c <HAL_RCC_GetPCLK1Freq>
 800a894:	61b8      	str	r0, [r7, #24]
        break;
 800a896:	e013      	b.n	800a8c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a898:	f7fe feec 	bl	8009674 <HAL_RCC_GetPCLK2Freq>
 800a89c:	61b8      	str	r0, [r7, #24]
        break;
 800a89e:	e00f      	b.n	800a8c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8a0:	4b1d      	ldr	r3, [pc, #116]	; (800a918 <UART_SetConfig+0x4c0>)
 800a8a2:	61bb      	str	r3, [r7, #24]
        break;
 800a8a4:	e00c      	b.n	800a8c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8a6:	f7fe fe0f 	bl	80094c8 <HAL_RCC_GetSysClockFreq>
 800a8aa:	61b8      	str	r0, [r7, #24]
        break;
 800a8ac:	e008      	b.n	800a8c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8b2:	61bb      	str	r3, [r7, #24]
        break;
 800a8b4:	e004      	b.n	800a8c0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	77bb      	strb	r3, [r7, #30]
        break;
 800a8be:	bf00      	nop
    }

    if (pclk != 0U)
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d018      	beq.n	800a8f8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	085a      	lsrs	r2, r3, #1
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	441a      	add	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	2b0f      	cmp	r3, #15
 800a8e0:	d908      	bls.n	800a8f4 <UART_SetConfig+0x49c>
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8e8:	d204      	bcs.n	800a8f4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	693a      	ldr	r2, [r7, #16]
 800a8f0:	60da      	str	r2, [r3, #12]
 800a8f2:	e001      	b.n	800a8f8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a904:	7fbb      	ldrb	r3, [r7, #30]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3720      	adds	r7, #32
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	40007c00 	.word	0x40007c00
 800a914:	40023800 	.word	0x40023800
 800a918:	00f42400 	.word	0x00f42400

0800a91c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a928:	f003 0301 	and.w	r3, r3, #1
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00a      	beq.n	800a946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	430a      	orrs	r2, r1
 800a944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94a:	f003 0302 	and.w	r3, r3, #2
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00a      	beq.n	800a968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	430a      	orrs	r2, r1
 800a966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96c:	f003 0304 	and.w	r3, r3, #4
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00a      	beq.n	800a98a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	430a      	orrs	r2, r1
 800a988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98e:	f003 0308 	and.w	r3, r3, #8
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00a      	beq.n	800a9ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	430a      	orrs	r2, r1
 800a9aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b0:	f003 0310 	and.w	r3, r3, #16
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00a      	beq.n	800a9ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d2:	f003 0320 	and.w	r3, r3, #32
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00a      	beq.n	800a9f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	430a      	orrs	r2, r1
 800a9ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d01a      	beq.n	800aa32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa1a:	d10a      	bne.n	800aa32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00a      	beq.n	800aa54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	430a      	orrs	r2, r1
 800aa52:	605a      	str	r2, [r3, #4]
  }
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af02      	add	r7, sp, #8
 800aa66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa70:	f7fd fdca 	bl	8008608 <HAL_GetTick>
 800aa74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0308 	and.w	r3, r3, #8
 800aa80:	2b08      	cmp	r3, #8
 800aa82:	d10e      	bne.n	800aaa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f817 	bl	800aac6 <UART_WaitOnFlagUntilTimeout>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d001      	beq.n	800aaa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e00d      	b.n	800aabe <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2220      	movs	r2, #32
 800aaac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b084      	sub	sp, #16
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	60f8      	str	r0, [r7, #12]
 800aace:	60b9      	str	r1, [r7, #8]
 800aad0:	603b      	str	r3, [r7, #0]
 800aad2:	4613      	mov	r3, r2
 800aad4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aad6:	e05e      	b.n	800ab96 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aade:	d05a      	beq.n	800ab96 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aae0:	f7fd fd92 	bl	8008608 <HAL_GetTick>
 800aae4:	4602      	mov	r2, r0
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	69ba      	ldr	r2, [r7, #24]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d302      	bcc.n	800aaf6 <UART_WaitOnFlagUntilTimeout+0x30>
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d11b      	bne.n	800ab2e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	689a      	ldr	r2, [r3, #8]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f022 0201 	bic.w	r2, r2, #1
 800ab14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2220      	movs	r2, #32
 800ab20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	e043      	b.n	800abb6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 0304 	and.w	r3, r3, #4
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d02c      	beq.n	800ab96 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	69db      	ldr	r3, [r3, #28]
 800ab42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab4a:	d124      	bne.n	800ab96 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab64:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	689a      	ldr	r2, [r3, #8]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f022 0201 	bic.w	r2, r2, #1
 800ab74:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2220      	movs	r2, #32
 800ab7a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2220      	movs	r2, #32
 800ab80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2220      	movs	r2, #32
 800ab86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e00f      	b.n	800abb6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	69da      	ldr	r2, [r3, #28]
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	4013      	ands	r3, r2
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	bf0c      	ite	eq
 800aba6:	2301      	moveq	r3, #1
 800aba8:	2300      	movne	r3, #0
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	461a      	mov	r2, r3
 800abae:	79fb      	ldrb	r3, [r7, #7]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d091      	beq.n	800aad8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abbe:	b480      	push	{r7}
 800abc0:	b083      	sub	sp, #12
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800abd4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	689a      	ldr	r2, [r3, #8]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f022 0201 	bic.w	r2, r2, #1
 800abe4:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abea:	2b01      	cmp	r3, #1
 800abec:	d107      	bne.n	800abfe <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 0210 	bic.w	r2, r2, #16
 800abfc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2220      	movs	r2, #32
 800ac02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f7ff fbf6 	bl	800a42c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac40:	bf00      	nop
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac5e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2220      	movs	r2, #32
 800ac64:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f7ff fbd3 	bl	800a418 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac72:	bf00      	nop
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <_ZdlPv>:
 800ac7a:	f000 bae1 	b.w	800b240 <free>

0800ac7e <_ZdlPvj>:
 800ac7e:	f7ff bffc 	b.w	800ac7a <_ZdlPv>

0800ac82 <_Znwj>:
 800ac82:	2801      	cmp	r0, #1
 800ac84:	bf38      	it	cc
 800ac86:	2001      	movcc	r0, #1
 800ac88:	b510      	push	{r4, lr}
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f000 facf 	bl	800b230 <malloc>
 800ac92:	b930      	cbnz	r0, 800aca2 <_Znwj+0x20>
 800ac94:	f000 fa78 	bl	800b188 <_ZSt15get_new_handlerv>
 800ac98:	b908      	cbnz	r0, 800ac9e <_Znwj+0x1c>
 800ac9a:	f000 fa7d 	bl	800b198 <abort>
 800ac9e:	4780      	blx	r0
 800aca0:	e7f4      	b.n	800ac8c <_Znwj+0xa>
 800aca2:	bd10      	pop	{r4, pc}

0800aca4 <_ZNSaIcEC1Ev>:
 800aca4:	4770      	bx	lr

0800aca6 <_ZNSaIcED1Ev>:
 800aca6:	4770      	bx	lr

0800aca8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 800aca8:	68c3      	ldr	r3, [r0, #12]
 800acaa:	689a      	ldr	r2, [r3, #8]
 800acac:	60c2      	str	r2, [r0, #12]
 800acae:	b510      	push	{r4, lr}
 800acb0:	b102      	cbz	r2, 800acb4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 800acb2:	6050      	str	r0, [r2, #4]
 800acb4:	6842      	ldr	r2, [r0, #4]
 800acb6:	605a      	str	r2, [r3, #4]
 800acb8:	680c      	ldr	r4, [r1, #0]
 800acba:	4284      	cmp	r4, r0
 800acbc:	d103      	bne.n	800acc6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 800acbe:	600b      	str	r3, [r1, #0]
 800acc0:	6098      	str	r0, [r3, #8]
 800acc2:	6043      	str	r3, [r0, #4]
 800acc4:	bd10      	pop	{r4, pc}
 800acc6:	6891      	ldr	r1, [r2, #8]
 800acc8:	4281      	cmp	r1, r0
 800acca:	bf0c      	ite	eq
 800accc:	6093      	streq	r3, [r2, #8]
 800acce:	60d3      	strne	r3, [r2, #12]
 800acd0:	e7f6      	b.n	800acc0 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0800acd2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 800acd2:	6883      	ldr	r3, [r0, #8]
 800acd4:	68da      	ldr	r2, [r3, #12]
 800acd6:	6082      	str	r2, [r0, #8]
 800acd8:	b510      	push	{r4, lr}
 800acda:	b102      	cbz	r2, 800acde <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 800acdc:	6050      	str	r0, [r2, #4]
 800acde:	6842      	ldr	r2, [r0, #4]
 800ace0:	605a      	str	r2, [r3, #4]
 800ace2:	680c      	ldr	r4, [r1, #0]
 800ace4:	4284      	cmp	r4, r0
 800ace6:	d103      	bne.n	800acf0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 800ace8:	600b      	str	r3, [r1, #0]
 800acea:	60d8      	str	r0, [r3, #12]
 800acec:	6043      	str	r3, [r0, #4]
 800acee:	bd10      	pop	{r4, pc}
 800acf0:	68d1      	ldr	r1, [r2, #12]
 800acf2:	4281      	cmp	r1, r0
 800acf4:	bf0c      	ite	eq
 800acf6:	60d3      	streq	r3, [r2, #12]
 800acf8:	6093      	strne	r3, [r2, #8]
 800acfa:	e7f6      	b.n	800acea <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0800acfc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 800acfc:	7803      	ldrb	r3, [r0, #0]
 800acfe:	b933      	cbnz	r3, 800ad0e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800ad00:	6843      	ldr	r3, [r0, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	4283      	cmp	r3, r0
 800ad06:	d102      	bne.n	800ad0e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	4770      	bx	lr
 800ad0e:	6882      	ldr	r2, [r0, #8]
 800ad10:	b122      	cbz	r2, 800ad1c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 800ad12:	4613      	mov	r3, r2
 800ad14:	68d2      	ldr	r2, [r2, #12]
 800ad16:	2a00      	cmp	r2, #0
 800ad18:	d1fb      	bne.n	800ad12 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 800ad1a:	e7f6      	b.n	800ad0a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 800ad1c:	6843      	ldr	r3, [r0, #4]
 800ad1e:	689a      	ldr	r2, [r3, #8]
 800ad20:	4282      	cmp	r2, r0
 800ad22:	d1f2      	bne.n	800ad0a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 800ad24:	4618      	mov	r0, r3
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	e7f9      	b.n	800ad1e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0800ad2a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 800ad2a:	68c3      	ldr	r3, [r0, #12]
 800ad2c:	b123      	cbz	r3, 800ad38 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 800ad2e:	4618      	mov	r0, r3
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1fb      	bne.n	800ad2e <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 800ad36:	4770      	bx	lr
 800ad38:	6843      	ldr	r3, [r0, #4]
 800ad3a:	68da      	ldr	r2, [r3, #12]
 800ad3c:	4282      	cmp	r2, r0
 800ad3e:	d102      	bne.n	800ad46 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 800ad40:	4618      	mov	r0, r3
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	e7f9      	b.n	800ad3a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 800ad46:	68c2      	ldr	r2, [r0, #12]
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	bf18      	it	ne
 800ad4c:	4618      	movne	r0, r3
 800ad4e:	4770      	bx	lr

0800ad50 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 800ad50:	f7ff bfd4 	b.w	800acfc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0800ad54 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 800ad54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad58:	461e      	mov	r6, r3
 800ad5a:	f103 0804 	add.w	r8, r3, #4
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e9c1 3302 	strd	r3, r3, [r1, #8]
 800ad64:	460c      	mov	r4, r1
 800ad66:	604a      	str	r2, [r1, #4]
 800ad68:	700b      	strb	r3, [r1, #0]
 800ad6a:	b300      	cbz	r0, 800adae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 800ad6c:	4296      	cmp	r6, r2
 800ad6e:	6091      	str	r1, [r2, #8]
 800ad70:	d118      	bne.n	800ada4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 800ad72:	6071      	str	r1, [r6, #4]
 800ad74:	60f4      	str	r4, [r6, #12]
 800ad76:	2701      	movs	r7, #1
 800ad78:	f04f 0900 	mov.w	r9, #0
 800ad7c:	6873      	ldr	r3, [r6, #4]
 800ad7e:	42a3      	cmp	r3, r4
 800ad80:	d03f      	beq.n	800ae02 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 800ad82:	6860      	ldr	r0, [r4, #4]
 800ad84:	7802      	ldrb	r2, [r0, #0]
 800ad86:	2a00      	cmp	r2, #0
 800ad88:	d13c      	bne.n	800ae04 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 800ad8a:	6845      	ldr	r5, [r0, #4]
 800ad8c:	68ab      	ldr	r3, [r5, #8]
 800ad8e:	4298      	cmp	r0, r3
 800ad90:	d123      	bne.n	800adda <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 800ad92:	68eb      	ldr	r3, [r5, #12]
 800ad94:	b183      	cbz	r3, 800adb8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 800ad96:	781a      	ldrb	r2, [r3, #0]
 800ad98:	b972      	cbnz	r2, 800adb8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 800ad9a:	7007      	strb	r7, [r0, #0]
 800ad9c:	701f      	strb	r7, [r3, #0]
 800ad9e:	702a      	strb	r2, [r5, #0]
 800ada0:	462c      	mov	r4, r5
 800ada2:	e7eb      	b.n	800ad7c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 800ada4:	68b3      	ldr	r3, [r6, #8]
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d1e5      	bne.n	800ad76 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800adaa:	60b1      	str	r1, [r6, #8]
 800adac:	e7e3      	b.n	800ad76 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800adae:	60d1      	str	r1, [r2, #12]
 800adb0:	68f3      	ldr	r3, [r6, #12]
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d1df      	bne.n	800ad76 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800adb6:	e7dd      	b.n	800ad74 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 800adb8:	68c3      	ldr	r3, [r0, #12]
 800adba:	42a3      	cmp	r3, r4
 800adbc:	d103      	bne.n	800adc6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 800adbe:	4641      	mov	r1, r8
 800adc0:	f7ff ff72 	bl	800aca8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800adc4:	4604      	mov	r4, r0
 800adc6:	6863      	ldr	r3, [r4, #4]
 800adc8:	4641      	mov	r1, r8
 800adca:	701f      	strb	r7, [r3, #0]
 800adcc:	4628      	mov	r0, r5
 800adce:	f885 9000 	strb.w	r9, [r5]
 800add2:	f7ff ff7e 	bl	800acd2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800add6:	4625      	mov	r5, r4
 800add8:	e7e2      	b.n	800ada0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 800adda:	b113      	cbz	r3, 800ade2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 800addc:	781a      	ldrb	r2, [r3, #0]
 800adde:	2a00      	cmp	r2, #0
 800ade0:	d0db      	beq.n	800ad9a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 800ade2:	6883      	ldr	r3, [r0, #8]
 800ade4:	42a3      	cmp	r3, r4
 800ade6:	d103      	bne.n	800adf0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 800ade8:	4641      	mov	r1, r8
 800adea:	f7ff ff72 	bl	800acd2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800adee:	4604      	mov	r4, r0
 800adf0:	6863      	ldr	r3, [r4, #4]
 800adf2:	4641      	mov	r1, r8
 800adf4:	701f      	strb	r7, [r3, #0]
 800adf6:	4628      	mov	r0, r5
 800adf8:	f885 9000 	strb.w	r9, [r5]
 800adfc:	f7ff ff54 	bl	800aca8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800ae00:	e7e9      	b.n	800add6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 800ae02:	4623      	mov	r3, r4
 800ae04:	2201      	movs	r2, #1
 800ae06:	701a      	strb	r2, [r3, #0]
 800ae08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ae0c <_ZSt17__throw_bad_allocv>:
 800ae0c:	b508      	push	{r3, lr}
 800ae0e:	f000 f9c3 	bl	800b198 <abort>

0800ae12 <_ZSt19__throw_logic_errorPKc>:
 800ae12:	b508      	push	{r3, lr}
 800ae14:	f000 f9c0 	bl	800b198 <abort>

0800ae18 <_ZSt20__throw_length_errorPKc>:
 800ae18:	b508      	push	{r3, lr}
 800ae1a:	f000 f9bd 	bl	800b198 <abort>

0800ae1e <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800ae1e:	b10a      	cbz	r2, 800ae24 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800ae20:	f000 ba16 	b.w	800b250 <memcmp>
 800ae24:	4610      	mov	r0, r2
 800ae26:	4770      	bx	lr

0800ae28 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800ae28:	b10a      	cbz	r2, 800ae2e <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800ae2a:	f000 ba1f 	b.w	800b26c <memcpy>
 800ae2e:	4770      	bx	lr

0800ae30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800ae30:	6001      	str	r1, [r0, #0]
 800ae32:	4770      	bx	lr

0800ae34 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800ae34:	6800      	ldr	r0, [r0, #0]
 800ae36:	4770      	bx	lr

0800ae38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800ae38:	3008      	adds	r0, #8
 800ae3a:	4770      	bx	lr

0800ae3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800ae3c:	6081      	str	r1, [r0, #8]
 800ae3e:	4770      	bx	lr

0800ae40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800ae40:	6803      	ldr	r3, [r0, #0]
 800ae42:	6041      	str	r1, [r0, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	545a      	strb	r2, [r3, r1]
 800ae48:	4770      	bx	lr
	...

0800ae4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800ae4c:	b508      	push	{r3, lr}
 800ae4e:	680b      	ldr	r3, [r1, #0]
 800ae50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae54:	d302      	bcc.n	800ae5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800ae56:	480d      	ldr	r0, [pc, #52]	; (800ae8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800ae58:	f7ff ffde 	bl	800ae18 <_ZSt20__throw_length_errorPKc>
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d90b      	bls.n	800ae78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800ae60:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800ae64:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800ae68:	d206      	bcs.n	800ae78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800ae6a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ae6e:	bf2a      	itet	cs
 800ae70:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800ae74:	6008      	strcc	r0, [r1, #0]
 800ae76:	600b      	strcs	r3, [r1, #0]
 800ae78:	6808      	ldr	r0, [r1, #0]
 800ae7a:	3001      	adds	r0, #1
 800ae7c:	d501      	bpl.n	800ae82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800ae7e:	f7ff ffc5 	bl	800ae0c <_ZSt17__throw_bad_allocv>
 800ae82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ae86:	f7ff befc 	b.w	800ac82 <_Znwj>
 800ae8a:	bf00      	nop
 800ae8c:	0800bdf0 	.word	0x0800bdf0

0800ae90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800ae90:	f850 3b08 	ldr.w	r3, [r0], #8
 800ae94:	4283      	cmp	r3, r0
 800ae96:	d002      	beq.n	800ae9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7ff beee 	b.w	800ac7a <_ZdlPv>
 800ae9e:	4770      	bx	lr

0800aea0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800aea0:	6840      	ldr	r0, [r0, #4]
 800aea2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800aea6:	3901      	subs	r1, #1
 800aea8:	1a09      	subs	r1, r1, r0
 800aeaa:	4291      	cmp	r1, r2
 800aeac:	b508      	push	{r3, lr}
 800aeae:	d202      	bcs.n	800aeb6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7ff ffb1 	bl	800ae18 <_ZSt20__throw_length_errorPKc>
 800aeb6:	bd08      	pop	{r3, pc}

0800aeb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800aeb8:	2a01      	cmp	r2, #1
 800aeba:	b510      	push	{r4, lr}
 800aebc:	d102      	bne.n	800aec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800aebe:	780a      	ldrb	r2, [r1, #0]
 800aec0:	7002      	strb	r2, [r0, #0]
 800aec2:	bd10      	pop	{r4, pc}
 800aec4:	f7ff ffb0 	bl	800ae28 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800aec8:	e7fb      	b.n	800aec2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800aeca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800aeca:	b508      	push	{r3, lr}
 800aecc:	1a52      	subs	r2, r2, r1
 800aece:	f7ff fff3 	bl	800aeb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800aed2:	bd08      	pop	{r3, pc}

0800aed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800aed4:	b508      	push	{r3, lr}
 800aed6:	1a52      	subs	r2, r2, r1
 800aed8:	f7ff ffee 	bl	800aeb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800aedc:	bd08      	pop	{r3, pc}

0800aede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800aede:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800aee2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800aee4:	461f      	mov	r7, r3
 800aee6:	6843      	ldr	r3, [r0, #4]
 800aee8:	eb01 0802 	add.w	r8, r1, r2
 800aeec:	1ab2      	subs	r2, r6, r2
 800aeee:	441a      	add	r2, r3
 800aef0:	eba3 0908 	sub.w	r9, r3, r8
 800aef4:	4603      	mov	r3, r0
 800aef6:	9201      	str	r2, [sp, #4]
 800aef8:	f853 2b08 	ldr.w	r2, [r3], #8
 800aefc:	429a      	cmp	r2, r3
 800aefe:	bf18      	it	ne
 800af00:	6882      	ldrne	r2, [r0, #8]
 800af02:	460d      	mov	r5, r1
 800af04:	bf08      	it	eq
 800af06:	220f      	moveq	r2, #15
 800af08:	a901      	add	r1, sp, #4
 800af0a:	4604      	mov	r4, r0
 800af0c:	f7ff ff9e 	bl	800ae4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800af10:	4682      	mov	sl, r0
 800af12:	b11d      	cbz	r5, 800af1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800af14:	6821      	ldr	r1, [r4, #0]
 800af16:	462a      	mov	r2, r5
 800af18:	f7ff ffce 	bl	800aeb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800af1c:	b137      	cbz	r7, 800af2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800af1e:	b12e      	cbz	r6, 800af2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800af20:	4632      	mov	r2, r6
 800af22:	4639      	mov	r1, r7
 800af24:	eb0a 0005 	add.w	r0, sl, r5
 800af28:	f7ff ffc6 	bl	800aeb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800af2c:	f1b9 0f00 	cmp.w	r9, #0
 800af30:	d007      	beq.n	800af42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800af32:	6821      	ldr	r1, [r4, #0]
 800af34:	4435      	add	r5, r6
 800af36:	464a      	mov	r2, r9
 800af38:	4441      	add	r1, r8
 800af3a:	eb0a 0005 	add.w	r0, sl, r5
 800af3e:	f7ff ffbb 	bl	800aeb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800af42:	4620      	mov	r0, r4
 800af44:	f7ff ffa4 	bl	800ae90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800af48:	9b01      	ldr	r3, [sp, #4]
 800af4a:	f8c4 a000 	str.w	sl, [r4]
 800af4e:	60a3      	str	r3, [r4, #8]
 800af50:	b002      	add	sp, #8
 800af52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800af56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800af56:	f100 0208 	add.w	r2, r0, #8
 800af5a:	6002      	str	r2, [r0, #0]
 800af5c:	2200      	movs	r2, #0
 800af5e:	6042      	str	r2, [r0, #4]
 800af60:	7202      	strb	r2, [r0, #8]
 800af62:	4770      	bx	lr

0800af64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800af64:	b570      	push	{r4, r5, r6, lr}
 800af66:	4604      	mov	r4, r0
 800af68:	460e      	mov	r6, r1
 800af6a:	3008      	adds	r0, #8
 800af6c:	6020      	str	r0, [r4, #0]
 800af6e:	f856 3b08 	ldr.w	r3, [r6], #8
 800af72:	429e      	cmp	r6, r3
 800af74:	460d      	mov	r5, r1
 800af76:	d10b      	bne.n	800af90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800af78:	2210      	movs	r2, #16
 800af7a:	4631      	mov	r1, r6
 800af7c:	f7ff ff54 	bl	800ae28 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800af80:	686b      	ldr	r3, [r5, #4]
 800af82:	6063      	str	r3, [r4, #4]
 800af84:	2300      	movs	r3, #0
 800af86:	602e      	str	r6, [r5, #0]
 800af88:	606b      	str	r3, [r5, #4]
 800af8a:	722b      	strb	r3, [r5, #8]
 800af8c:	4620      	mov	r0, r4
 800af8e:	bd70      	pop	{r4, r5, r6, pc}
 800af90:	6023      	str	r3, [r4, #0]
 800af92:	688b      	ldr	r3, [r1, #8]
 800af94:	60a3      	str	r3, [r4, #8]
 800af96:	e7f3      	b.n	800af80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800af98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800af98:	b510      	push	{r4, lr}
 800af9a:	4604      	mov	r4, r0
 800af9c:	f7ff ff78 	bl	800ae90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800afa0:	4620      	mov	r0, r4
 800afa2:	bd10      	pop	{r4, pc}

0800afa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	460d      	mov	r5, r1
 800afa8:	f851 3b08 	ldr.w	r3, [r1], #8
 800afac:	686a      	ldr	r2, [r5, #4]
 800afae:	4299      	cmp	r1, r3
 800afb0:	4604      	mov	r4, r0
 800afb2:	6800      	ldr	r0, [r0, #0]
 800afb4:	d10d      	bne.n	800afd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 800afb6:	b10a      	cbz	r2, 800afbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 800afb8:	f7ff ff7e 	bl	800aeb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800afbc:	686b      	ldr	r3, [r5, #4]
 800afbe:	6822      	ldr	r2, [r4, #0]
 800afc0:	6063      	str	r3, [r4, #4]
 800afc2:	2100      	movs	r1, #0
 800afc4:	54d1      	strb	r1, [r2, r3]
 800afc6:	682a      	ldr	r2, [r5, #0]
 800afc8:	2300      	movs	r3, #0
 800afca:	606b      	str	r3, [r5, #4]
 800afcc:	7013      	strb	r3, [r2, #0]
 800afce:	4620      	mov	r0, r4
 800afd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afd2:	e9c4 3200 	strd	r3, r2, [r4]
 800afd6:	f104 0708 	add.w	r7, r4, #8
 800afda:	42b8      	cmp	r0, r7
 800afdc:	68ab      	ldr	r3, [r5, #8]
 800afde:	bf18      	it	ne
 800afe0:	68a6      	ldrne	r6, [r4, #8]
 800afe2:	60a3      	str	r3, [r4, #8]
 800afe4:	bf08      	it	eq
 800afe6:	2000      	moveq	r0, #0
 800afe8:	b110      	cbz	r0, 800aff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 800afea:	6028      	str	r0, [r5, #0]
 800afec:	60ae      	str	r6, [r5, #8]
 800afee:	e7ea      	b.n	800afc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 800aff0:	6029      	str	r1, [r5, #0]
 800aff2:	e7e8      	b.n	800afc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

0800aff4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800aff4:	6840      	ldr	r0, [r0, #4]
 800aff6:	4770      	bx	lr

0800aff8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800aff8:	6840      	ldr	r0, [r0, #4]
 800affa:	4770      	bx	lr

0800affc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 800affc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800affe:	4605      	mov	r5, r0
 800b000:	6843      	ldr	r3, [r0, #4]
 800b002:	4299      	cmp	r1, r3
 800b004:	bf2c      	ite	cs
 800b006:	9101      	strcs	r1, [sp, #4]
 800b008:	9301      	strcc	r3, [sp, #4]
 800b00a:	f855 1b08 	ldr.w	r1, [r5], #8
 800b00e:	428d      	cmp	r5, r1
 800b010:	bf18      	it	ne
 800b012:	6882      	ldrne	r2, [r0, #8]
 800b014:	4604      	mov	r4, r0
 800b016:	9801      	ldr	r0, [sp, #4]
 800b018:	bf08      	it	eq
 800b01a:	220f      	moveq	r2, #15
 800b01c:	4290      	cmp	r0, r2
 800b01e:	d012      	beq.n	800b046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
 800b020:	d801      	bhi.n	800b026 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x2a>
 800b022:	280f      	cmp	r0, #15
 800b024:	d911      	bls.n	800b04a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4e>
 800b026:	a901      	add	r1, sp, #4
 800b028:	4620      	mov	r0, r4
 800b02a:	f7ff ff0f 	bl	800ae4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b02e:	6862      	ldr	r2, [r4, #4]
 800b030:	6821      	ldr	r1, [r4, #0]
 800b032:	3201      	adds	r2, #1
 800b034:	4605      	mov	r5, r0
 800b036:	f7ff ff3f 	bl	800aeb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b03a:	4620      	mov	r0, r4
 800b03c:	f7ff ff28 	bl	800ae90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b040:	9b01      	ldr	r3, [sp, #4]
 800b042:	6025      	str	r5, [r4, #0]
 800b044:	60a3      	str	r3, [r4, #8]
 800b046:	b003      	add	sp, #12
 800b048:	bd30      	pop	{r4, r5, pc}
 800b04a:	428d      	cmp	r5, r1
 800b04c:	d0fb      	beq.n	800b046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
 800b04e:	1c5a      	adds	r2, r3, #1
 800b050:	4628      	mov	r0, r5
 800b052:	f7ff ff31 	bl	800aeb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b056:	6820      	ldr	r0, [r4, #0]
 800b058:	f7ff fe0f 	bl	800ac7a <_ZdlPv>
 800b05c:	6025      	str	r5, [r4, #0]
 800b05e:	e7f2      	b.n	800b046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>

0800b060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800b060:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b062:	4604      	mov	r4, r0
 800b064:	4623      	mov	r3, r4
 800b066:	6840      	ldr	r0, [r0, #4]
 800b068:	f853 6b08 	ldr.w	r6, [r3], #8
 800b06c:	429e      	cmp	r6, r3
 800b06e:	bf18      	it	ne
 800b070:	68a3      	ldrne	r3, [r4, #8]
 800b072:	eb00 0502 	add.w	r5, r0, r2
 800b076:	bf08      	it	eq
 800b078:	230f      	moveq	r3, #15
 800b07a:	429d      	cmp	r5, r3
 800b07c:	d80a      	bhi.n	800b094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800b07e:	b112      	cbz	r2, 800b086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800b080:	4430      	add	r0, r6
 800b082:	f7ff ff19 	bl	800aeb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	6065      	str	r5, [r4, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	4620      	mov	r0, r4
 800b08e:	555a      	strb	r2, [r3, r5]
 800b090:	b002      	add	sp, #8
 800b092:	bd70      	pop	{r4, r5, r6, pc}
 800b094:	9200      	str	r2, [sp, #0]
 800b096:	460b      	mov	r3, r1
 800b098:	2200      	movs	r2, #0
 800b09a:	4601      	mov	r1, r0
 800b09c:	4620      	mov	r0, r4
 800b09e:	f7ff ff1e 	bl	800aede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800b0a2:	e7f0      	b.n	800b086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800b0a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800b0a4:	b508      	push	{r3, lr}
 800b0a6:	e9d1 1200 	ldrd	r1, r2, [r1]
 800b0aa:	f7ff ffd9 	bl	800b060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800b0ae:	bd08      	pop	{r3, pc}

0800b0b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	4b06      	ldr	r3, [pc, #24]	; (800b0cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	460d      	mov	r5, r1
 800b0b8:	4616      	mov	r6, r2
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	f7ff fef0 	bl	800aea0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800b0c0:	4632      	mov	r2, r6
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f7ff ffcb 	bl	800b060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800b0ca:	bd70      	pop	{r4, r5, r6, pc}
 800b0cc:	0800be08 	.word	0x0800be08

0800b0d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800b0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	4608      	mov	r0, r1
 800b0d6:	460d      	mov	r5, r1
 800b0d8:	f7f5 f896 	bl	8000208 <strlen>
 800b0dc:	4b06      	ldr	r3, [pc, #24]	; (800b0f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800b0de:	9001      	str	r0, [sp, #4]
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f7ff fedb 	bl	800aea0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800b0ea:	9a01      	ldr	r2, [sp, #4]
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f7ff ffb6 	bl	800b060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800b0f4:	b003      	add	sp, #12
 800b0f6:	bd30      	pop	{r4, r5, pc}
 800b0f8:	0800be08 	.word	0x0800be08

0800b0fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800b0fc:	6800      	ldr	r0, [r0, #0]
 800b0fe:	4770      	bx	lr

0800b100 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	6845      	ldr	r5, [r0, #4]
 800b104:	684c      	ldr	r4, [r1, #4]
 800b106:	6800      	ldr	r0, [r0, #0]
 800b108:	6809      	ldr	r1, [r1, #0]
 800b10a:	42a5      	cmp	r5, r4
 800b10c:	462a      	mov	r2, r5
 800b10e:	bf28      	it	cs
 800b110:	4622      	movcs	r2, r4
 800b112:	f7ff fe84 	bl	800ae1e <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800b116:	b900      	cbnz	r0, 800b11a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 800b118:	1b28      	subs	r0, r5, r4
 800b11a:	bd38      	pop	{r3, r4, r5, pc}

0800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800b11c:	6001      	str	r1, [r0, #0]
 800b11e:	4770      	bx	lr

0800b120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800b120:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b122:	4604      	mov	r4, r0
 800b124:	4616      	mov	r6, r2
 800b126:	460d      	mov	r5, r1
 800b128:	b919      	cbnz	r1, 800b132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800b12a:	b112      	cbz	r2, 800b132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800b12c:	480d      	ldr	r0, [pc, #52]	; (800b164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800b12e:	f7ff fe70 	bl	800ae12 <_ZSt19__throw_logic_errorPKc>
 800b132:	1b73      	subs	r3, r6, r5
 800b134:	2b0f      	cmp	r3, #15
 800b136:	9301      	str	r3, [sp, #4]
 800b138:	d907      	bls.n	800b14a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800b13a:	2200      	movs	r2, #0
 800b13c:	a901      	add	r1, sp, #4
 800b13e:	4620      	mov	r0, r4
 800b140:	f7ff fe84 	bl	800ae4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b144:	9b01      	ldr	r3, [sp, #4]
 800b146:	6020      	str	r0, [r4, #0]
 800b148:	60a3      	str	r3, [r4, #8]
 800b14a:	4632      	mov	r2, r6
 800b14c:	4629      	mov	r1, r5
 800b14e:	6820      	ldr	r0, [r4, #0]
 800b150:	f7ff febb 	bl	800aeca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800b154:	9b01      	ldr	r3, [sp, #4]
 800b156:	6822      	ldr	r2, [r4, #0]
 800b158:	6063      	str	r3, [r4, #4]
 800b15a:	2100      	movs	r1, #0
 800b15c:	54d1      	strb	r1, [r2, r3]
 800b15e:	b002      	add	sp, #8
 800b160:	bd70      	pop	{r4, r5, r6, pc}
 800b162:	bf00      	nop
 800b164:	0800be1d 	.word	0x0800be1d

0800b168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	f100 0308 	add.w	r3, r0, #8
 800b16e:	6003      	str	r3, [r0, #0]
 800b170:	e9d1 5200 	ldrd	r5, r2, [r1]
 800b174:	4604      	mov	r4, r0
 800b176:	f04f 0300 	mov.w	r3, #0
 800b17a:	442a      	add	r2, r5
 800b17c:	4629      	mov	r1, r5
 800b17e:	f7ff ffcf 	bl	800b120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800b182:	4620      	mov	r0, r4
 800b184:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b188 <_ZSt15get_new_handlerv>:
 800b188:	4b02      	ldr	r3, [pc, #8]	; (800b194 <_ZSt15get_new_handlerv+0xc>)
 800b18a:	6818      	ldr	r0, [r3, #0]
 800b18c:	f3bf 8f5b 	dmb	ish
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	2000042c 	.word	0x2000042c

0800b198 <abort>:
 800b198:	b508      	push	{r3, lr}
 800b19a:	2006      	movs	r0, #6
 800b19c:	f000 f978 	bl	800b490 <raise>
 800b1a0:	2001      	movs	r0, #1
 800b1a2:	f7fd f965 	bl	8008470 <_exit>
	...

0800b1a8 <__errno>:
 800b1a8:	4b01      	ldr	r3, [pc, #4]	; (800b1b0 <__errno+0x8>)
 800b1aa:	6818      	ldr	r0, [r3, #0]
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	2000000c 	.word	0x2000000c

0800b1b4 <__libc_init_array>:
 800b1b4:	b570      	push	{r4, r5, r6, lr}
 800b1b6:	4d0d      	ldr	r5, [pc, #52]	; (800b1ec <__libc_init_array+0x38>)
 800b1b8:	4c0d      	ldr	r4, [pc, #52]	; (800b1f0 <__libc_init_array+0x3c>)
 800b1ba:	1b64      	subs	r4, r4, r5
 800b1bc:	10a4      	asrs	r4, r4, #2
 800b1be:	2600      	movs	r6, #0
 800b1c0:	42a6      	cmp	r6, r4
 800b1c2:	d109      	bne.n	800b1d8 <__libc_init_array+0x24>
 800b1c4:	4d0b      	ldr	r5, [pc, #44]	; (800b1f4 <__libc_init_array+0x40>)
 800b1c6:	4c0c      	ldr	r4, [pc, #48]	; (800b1f8 <__libc_init_array+0x44>)
 800b1c8:	f000 f9ce 	bl	800b568 <_init>
 800b1cc:	1b64      	subs	r4, r4, r5
 800b1ce:	10a4      	asrs	r4, r4, #2
 800b1d0:	2600      	movs	r6, #0
 800b1d2:	42a6      	cmp	r6, r4
 800b1d4:	d105      	bne.n	800b1e2 <__libc_init_array+0x2e>
 800b1d6:	bd70      	pop	{r4, r5, r6, pc}
 800b1d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1dc:	4798      	blx	r3
 800b1de:	3601      	adds	r6, #1
 800b1e0:	e7ee      	b.n	800b1c0 <__libc_init_array+0xc>
 800b1e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1e6:	4798      	blx	r3
 800b1e8:	3601      	adds	r6, #1
 800b1ea:	e7f2      	b.n	800b1d2 <__libc_init_array+0x1e>
 800b1ec:	0800bed4 	.word	0x0800bed4
 800b1f0:	0800bed4 	.word	0x0800bed4
 800b1f4:	0800bed4 	.word	0x0800bed4
 800b1f8:	0800bf04 	.word	0x0800bf04

0800b1fc <__itoa>:
 800b1fc:	1e93      	subs	r3, r2, #2
 800b1fe:	2b22      	cmp	r3, #34	; 0x22
 800b200:	b510      	push	{r4, lr}
 800b202:	460c      	mov	r4, r1
 800b204:	d904      	bls.n	800b210 <__itoa+0x14>
 800b206:	2300      	movs	r3, #0
 800b208:	700b      	strb	r3, [r1, #0]
 800b20a:	461c      	mov	r4, r3
 800b20c:	4620      	mov	r0, r4
 800b20e:	bd10      	pop	{r4, pc}
 800b210:	2a0a      	cmp	r2, #10
 800b212:	d109      	bne.n	800b228 <__itoa+0x2c>
 800b214:	2800      	cmp	r0, #0
 800b216:	da07      	bge.n	800b228 <__itoa+0x2c>
 800b218:	232d      	movs	r3, #45	; 0x2d
 800b21a:	700b      	strb	r3, [r1, #0]
 800b21c:	4240      	negs	r0, r0
 800b21e:	2101      	movs	r1, #1
 800b220:	4421      	add	r1, r4
 800b222:	f000 f951 	bl	800b4c8 <__utoa>
 800b226:	e7f1      	b.n	800b20c <__itoa+0x10>
 800b228:	2100      	movs	r1, #0
 800b22a:	e7f9      	b.n	800b220 <__itoa+0x24>

0800b22c <itoa>:
 800b22c:	f7ff bfe6 	b.w	800b1fc <__itoa>

0800b230 <malloc>:
 800b230:	4b02      	ldr	r3, [pc, #8]	; (800b23c <malloc+0xc>)
 800b232:	4601      	mov	r1, r0
 800b234:	6818      	ldr	r0, [r3, #0]
 800b236:	f000 b899 	b.w	800b36c <_malloc_r>
 800b23a:	bf00      	nop
 800b23c:	2000000c 	.word	0x2000000c

0800b240 <free>:
 800b240:	4b02      	ldr	r3, [pc, #8]	; (800b24c <free+0xc>)
 800b242:	4601      	mov	r1, r0
 800b244:	6818      	ldr	r0, [r3, #0]
 800b246:	f000 b841 	b.w	800b2cc <_free_r>
 800b24a:	bf00      	nop
 800b24c:	2000000c 	.word	0x2000000c

0800b250 <memcmp>:
 800b250:	b530      	push	{r4, r5, lr}
 800b252:	3901      	subs	r1, #1
 800b254:	2400      	movs	r4, #0
 800b256:	42a2      	cmp	r2, r4
 800b258:	d101      	bne.n	800b25e <memcmp+0xe>
 800b25a:	2000      	movs	r0, #0
 800b25c:	e005      	b.n	800b26a <memcmp+0x1a>
 800b25e:	5d03      	ldrb	r3, [r0, r4]
 800b260:	3401      	adds	r4, #1
 800b262:	5d0d      	ldrb	r5, [r1, r4]
 800b264:	42ab      	cmp	r3, r5
 800b266:	d0f6      	beq.n	800b256 <memcmp+0x6>
 800b268:	1b58      	subs	r0, r3, r5
 800b26a:	bd30      	pop	{r4, r5, pc}

0800b26c <memcpy>:
 800b26c:	440a      	add	r2, r1
 800b26e:	4291      	cmp	r1, r2
 800b270:	f100 33ff 	add.w	r3, r0, #4294967295
 800b274:	d100      	bne.n	800b278 <memcpy+0xc>
 800b276:	4770      	bx	lr
 800b278:	b510      	push	{r4, lr}
 800b27a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b27e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b282:	4291      	cmp	r1, r2
 800b284:	d1f9      	bne.n	800b27a <memcpy+0xe>
 800b286:	bd10      	pop	{r4, pc}

0800b288 <memmove>:
 800b288:	4288      	cmp	r0, r1
 800b28a:	b510      	push	{r4, lr}
 800b28c:	eb01 0402 	add.w	r4, r1, r2
 800b290:	d902      	bls.n	800b298 <memmove+0x10>
 800b292:	4284      	cmp	r4, r0
 800b294:	4623      	mov	r3, r4
 800b296:	d807      	bhi.n	800b2a8 <memmove+0x20>
 800b298:	1e43      	subs	r3, r0, #1
 800b29a:	42a1      	cmp	r1, r4
 800b29c:	d008      	beq.n	800b2b0 <memmove+0x28>
 800b29e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2a6:	e7f8      	b.n	800b29a <memmove+0x12>
 800b2a8:	4402      	add	r2, r0
 800b2aa:	4601      	mov	r1, r0
 800b2ac:	428a      	cmp	r2, r1
 800b2ae:	d100      	bne.n	800b2b2 <memmove+0x2a>
 800b2b0:	bd10      	pop	{r4, pc}
 800b2b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2ba:	e7f7      	b.n	800b2ac <memmove+0x24>

0800b2bc <memset>:
 800b2bc:	4402      	add	r2, r0
 800b2be:	4603      	mov	r3, r0
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d100      	bne.n	800b2c6 <memset+0xa>
 800b2c4:	4770      	bx	lr
 800b2c6:	f803 1b01 	strb.w	r1, [r3], #1
 800b2ca:	e7f9      	b.n	800b2c0 <memset+0x4>

0800b2cc <_free_r>:
 800b2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2ce:	2900      	cmp	r1, #0
 800b2d0:	d048      	beq.n	800b364 <_free_r+0x98>
 800b2d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2d6:	9001      	str	r0, [sp, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f1a1 0404 	sub.w	r4, r1, #4
 800b2de:	bfb8      	it	lt
 800b2e0:	18e4      	addlt	r4, r4, r3
 800b2e2:	f000 f933 	bl	800b54c <__malloc_lock>
 800b2e6:	4a20      	ldr	r2, [pc, #128]	; (800b368 <_free_r+0x9c>)
 800b2e8:	9801      	ldr	r0, [sp, #4]
 800b2ea:	6813      	ldr	r3, [r2, #0]
 800b2ec:	4615      	mov	r5, r2
 800b2ee:	b933      	cbnz	r3, 800b2fe <_free_r+0x32>
 800b2f0:	6063      	str	r3, [r4, #4]
 800b2f2:	6014      	str	r4, [r2, #0]
 800b2f4:	b003      	add	sp, #12
 800b2f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2fa:	f000 b92d 	b.w	800b558 <__malloc_unlock>
 800b2fe:	42a3      	cmp	r3, r4
 800b300:	d90b      	bls.n	800b31a <_free_r+0x4e>
 800b302:	6821      	ldr	r1, [r4, #0]
 800b304:	1862      	adds	r2, r4, r1
 800b306:	4293      	cmp	r3, r2
 800b308:	bf04      	itt	eq
 800b30a:	681a      	ldreq	r2, [r3, #0]
 800b30c:	685b      	ldreq	r3, [r3, #4]
 800b30e:	6063      	str	r3, [r4, #4]
 800b310:	bf04      	itt	eq
 800b312:	1852      	addeq	r2, r2, r1
 800b314:	6022      	streq	r2, [r4, #0]
 800b316:	602c      	str	r4, [r5, #0]
 800b318:	e7ec      	b.n	800b2f4 <_free_r+0x28>
 800b31a:	461a      	mov	r2, r3
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	b10b      	cbz	r3, 800b324 <_free_r+0x58>
 800b320:	42a3      	cmp	r3, r4
 800b322:	d9fa      	bls.n	800b31a <_free_r+0x4e>
 800b324:	6811      	ldr	r1, [r2, #0]
 800b326:	1855      	adds	r5, r2, r1
 800b328:	42a5      	cmp	r5, r4
 800b32a:	d10b      	bne.n	800b344 <_free_r+0x78>
 800b32c:	6824      	ldr	r4, [r4, #0]
 800b32e:	4421      	add	r1, r4
 800b330:	1854      	adds	r4, r2, r1
 800b332:	42a3      	cmp	r3, r4
 800b334:	6011      	str	r1, [r2, #0]
 800b336:	d1dd      	bne.n	800b2f4 <_free_r+0x28>
 800b338:	681c      	ldr	r4, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	6053      	str	r3, [r2, #4]
 800b33e:	4421      	add	r1, r4
 800b340:	6011      	str	r1, [r2, #0]
 800b342:	e7d7      	b.n	800b2f4 <_free_r+0x28>
 800b344:	d902      	bls.n	800b34c <_free_r+0x80>
 800b346:	230c      	movs	r3, #12
 800b348:	6003      	str	r3, [r0, #0]
 800b34a:	e7d3      	b.n	800b2f4 <_free_r+0x28>
 800b34c:	6825      	ldr	r5, [r4, #0]
 800b34e:	1961      	adds	r1, r4, r5
 800b350:	428b      	cmp	r3, r1
 800b352:	bf04      	itt	eq
 800b354:	6819      	ldreq	r1, [r3, #0]
 800b356:	685b      	ldreq	r3, [r3, #4]
 800b358:	6063      	str	r3, [r4, #4]
 800b35a:	bf04      	itt	eq
 800b35c:	1949      	addeq	r1, r1, r5
 800b35e:	6021      	streq	r1, [r4, #0]
 800b360:	6054      	str	r4, [r2, #4]
 800b362:	e7c7      	b.n	800b2f4 <_free_r+0x28>
 800b364:	b003      	add	sp, #12
 800b366:	bd30      	pop	{r4, r5, pc}
 800b368:	20000430 	.word	0x20000430

0800b36c <_malloc_r>:
 800b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36e:	1ccd      	adds	r5, r1, #3
 800b370:	f025 0503 	bic.w	r5, r5, #3
 800b374:	3508      	adds	r5, #8
 800b376:	2d0c      	cmp	r5, #12
 800b378:	bf38      	it	cc
 800b37a:	250c      	movcc	r5, #12
 800b37c:	2d00      	cmp	r5, #0
 800b37e:	4606      	mov	r6, r0
 800b380:	db01      	blt.n	800b386 <_malloc_r+0x1a>
 800b382:	42a9      	cmp	r1, r5
 800b384:	d903      	bls.n	800b38e <_malloc_r+0x22>
 800b386:	230c      	movs	r3, #12
 800b388:	6033      	str	r3, [r6, #0]
 800b38a:	2000      	movs	r0, #0
 800b38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b38e:	f000 f8dd 	bl	800b54c <__malloc_lock>
 800b392:	4921      	ldr	r1, [pc, #132]	; (800b418 <_malloc_r+0xac>)
 800b394:	680a      	ldr	r2, [r1, #0]
 800b396:	4614      	mov	r4, r2
 800b398:	b99c      	cbnz	r4, 800b3c2 <_malloc_r+0x56>
 800b39a:	4f20      	ldr	r7, [pc, #128]	; (800b41c <_malloc_r+0xb0>)
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	b923      	cbnz	r3, 800b3aa <_malloc_r+0x3e>
 800b3a0:	4621      	mov	r1, r4
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	f000 f83c 	bl	800b420 <_sbrk_r>
 800b3a8:	6038      	str	r0, [r7, #0]
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	4630      	mov	r0, r6
 800b3ae:	f000 f837 	bl	800b420 <_sbrk_r>
 800b3b2:	1c43      	adds	r3, r0, #1
 800b3b4:	d123      	bne.n	800b3fe <_malloc_r+0x92>
 800b3b6:	230c      	movs	r3, #12
 800b3b8:	6033      	str	r3, [r6, #0]
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	f000 f8cc 	bl	800b558 <__malloc_unlock>
 800b3c0:	e7e3      	b.n	800b38a <_malloc_r+0x1e>
 800b3c2:	6823      	ldr	r3, [r4, #0]
 800b3c4:	1b5b      	subs	r3, r3, r5
 800b3c6:	d417      	bmi.n	800b3f8 <_malloc_r+0x8c>
 800b3c8:	2b0b      	cmp	r3, #11
 800b3ca:	d903      	bls.n	800b3d4 <_malloc_r+0x68>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	441c      	add	r4, r3
 800b3d0:	6025      	str	r5, [r4, #0]
 800b3d2:	e004      	b.n	800b3de <_malloc_r+0x72>
 800b3d4:	6863      	ldr	r3, [r4, #4]
 800b3d6:	42a2      	cmp	r2, r4
 800b3d8:	bf0c      	ite	eq
 800b3da:	600b      	streq	r3, [r1, #0]
 800b3dc:	6053      	strne	r3, [r2, #4]
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f000 f8ba 	bl	800b558 <__malloc_unlock>
 800b3e4:	f104 000b 	add.w	r0, r4, #11
 800b3e8:	1d23      	adds	r3, r4, #4
 800b3ea:	f020 0007 	bic.w	r0, r0, #7
 800b3ee:	1ac2      	subs	r2, r0, r3
 800b3f0:	d0cc      	beq.n	800b38c <_malloc_r+0x20>
 800b3f2:	1a1b      	subs	r3, r3, r0
 800b3f4:	50a3      	str	r3, [r4, r2]
 800b3f6:	e7c9      	b.n	800b38c <_malloc_r+0x20>
 800b3f8:	4622      	mov	r2, r4
 800b3fa:	6864      	ldr	r4, [r4, #4]
 800b3fc:	e7cc      	b.n	800b398 <_malloc_r+0x2c>
 800b3fe:	1cc4      	adds	r4, r0, #3
 800b400:	f024 0403 	bic.w	r4, r4, #3
 800b404:	42a0      	cmp	r0, r4
 800b406:	d0e3      	beq.n	800b3d0 <_malloc_r+0x64>
 800b408:	1a21      	subs	r1, r4, r0
 800b40a:	4630      	mov	r0, r6
 800b40c:	f000 f808 	bl	800b420 <_sbrk_r>
 800b410:	3001      	adds	r0, #1
 800b412:	d1dd      	bne.n	800b3d0 <_malloc_r+0x64>
 800b414:	e7cf      	b.n	800b3b6 <_malloc_r+0x4a>
 800b416:	bf00      	nop
 800b418:	20000430 	.word	0x20000430
 800b41c:	20000434 	.word	0x20000434

0800b420 <_sbrk_r>:
 800b420:	b538      	push	{r3, r4, r5, lr}
 800b422:	4d06      	ldr	r5, [pc, #24]	; (800b43c <_sbrk_r+0x1c>)
 800b424:	2300      	movs	r3, #0
 800b426:	4604      	mov	r4, r0
 800b428:	4608      	mov	r0, r1
 800b42a:	602b      	str	r3, [r5, #0]
 800b42c:	f7fd f82a 	bl	8008484 <_sbrk>
 800b430:	1c43      	adds	r3, r0, #1
 800b432:	d102      	bne.n	800b43a <_sbrk_r+0x1a>
 800b434:	682b      	ldr	r3, [r5, #0]
 800b436:	b103      	cbz	r3, 800b43a <_sbrk_r+0x1a>
 800b438:	6023      	str	r3, [r4, #0]
 800b43a:	bd38      	pop	{r3, r4, r5, pc}
 800b43c:	2000043c 	.word	0x2000043c

0800b440 <_raise_r>:
 800b440:	291f      	cmp	r1, #31
 800b442:	b538      	push	{r3, r4, r5, lr}
 800b444:	4604      	mov	r4, r0
 800b446:	460d      	mov	r5, r1
 800b448:	d904      	bls.n	800b454 <_raise_r+0x14>
 800b44a:	2316      	movs	r3, #22
 800b44c:	6003      	str	r3, [r0, #0]
 800b44e:	f04f 30ff 	mov.w	r0, #4294967295
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b456:	b112      	cbz	r2, 800b45e <_raise_r+0x1e>
 800b458:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b45c:	b94b      	cbnz	r3, 800b472 <_raise_r+0x32>
 800b45e:	4620      	mov	r0, r4
 800b460:	f000 f830 	bl	800b4c4 <_getpid_r>
 800b464:	462a      	mov	r2, r5
 800b466:	4601      	mov	r1, r0
 800b468:	4620      	mov	r0, r4
 800b46a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b46e:	f000 b817 	b.w	800b4a0 <_kill_r>
 800b472:	2b01      	cmp	r3, #1
 800b474:	d00a      	beq.n	800b48c <_raise_r+0x4c>
 800b476:	1c59      	adds	r1, r3, #1
 800b478:	d103      	bne.n	800b482 <_raise_r+0x42>
 800b47a:	2316      	movs	r3, #22
 800b47c:	6003      	str	r3, [r0, #0]
 800b47e:	2001      	movs	r0, #1
 800b480:	e7e7      	b.n	800b452 <_raise_r+0x12>
 800b482:	2400      	movs	r4, #0
 800b484:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b488:	4628      	mov	r0, r5
 800b48a:	4798      	blx	r3
 800b48c:	2000      	movs	r0, #0
 800b48e:	e7e0      	b.n	800b452 <_raise_r+0x12>

0800b490 <raise>:
 800b490:	4b02      	ldr	r3, [pc, #8]	; (800b49c <raise+0xc>)
 800b492:	4601      	mov	r1, r0
 800b494:	6818      	ldr	r0, [r3, #0]
 800b496:	f7ff bfd3 	b.w	800b440 <_raise_r>
 800b49a:	bf00      	nop
 800b49c:	2000000c 	.word	0x2000000c

0800b4a0 <_kill_r>:
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	4d07      	ldr	r5, [pc, #28]	; (800b4c0 <_kill_r+0x20>)
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	4608      	mov	r0, r1
 800b4aa:	4611      	mov	r1, r2
 800b4ac:	602b      	str	r3, [r5, #0]
 800b4ae:	f7fc ffcf 	bl	8008450 <_kill>
 800b4b2:	1c43      	adds	r3, r0, #1
 800b4b4:	d102      	bne.n	800b4bc <_kill_r+0x1c>
 800b4b6:	682b      	ldr	r3, [r5, #0]
 800b4b8:	b103      	cbz	r3, 800b4bc <_kill_r+0x1c>
 800b4ba:	6023      	str	r3, [r4, #0]
 800b4bc:	bd38      	pop	{r3, r4, r5, pc}
 800b4be:	bf00      	nop
 800b4c0:	2000043c 	.word	0x2000043c

0800b4c4 <_getpid_r>:
 800b4c4:	f7fc bfbc 	b.w	8008440 <_getpid>

0800b4c8 <__utoa>:
 800b4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ca:	4c1f      	ldr	r4, [pc, #124]	; (800b548 <__utoa+0x80>)
 800b4cc:	b08b      	sub	sp, #44	; 0x2c
 800b4ce:	4605      	mov	r5, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	466e      	mov	r6, sp
 800b4d4:	f104 0c20 	add.w	ip, r4, #32
 800b4d8:	6820      	ldr	r0, [r4, #0]
 800b4da:	6861      	ldr	r1, [r4, #4]
 800b4dc:	4637      	mov	r7, r6
 800b4de:	c703      	stmia	r7!, {r0, r1}
 800b4e0:	3408      	adds	r4, #8
 800b4e2:	4564      	cmp	r4, ip
 800b4e4:	463e      	mov	r6, r7
 800b4e6:	d1f7      	bne.n	800b4d8 <__utoa+0x10>
 800b4e8:	7921      	ldrb	r1, [r4, #4]
 800b4ea:	7139      	strb	r1, [r7, #4]
 800b4ec:	1e91      	subs	r1, r2, #2
 800b4ee:	6820      	ldr	r0, [r4, #0]
 800b4f0:	6038      	str	r0, [r7, #0]
 800b4f2:	2922      	cmp	r1, #34	; 0x22
 800b4f4:	f04f 0100 	mov.w	r1, #0
 800b4f8:	d904      	bls.n	800b504 <__utoa+0x3c>
 800b4fa:	7019      	strb	r1, [r3, #0]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4618      	mov	r0, r3
 800b500:	b00b      	add	sp, #44	; 0x2c
 800b502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b504:	1e58      	subs	r0, r3, #1
 800b506:	4684      	mov	ip, r0
 800b508:	fbb5 f7f2 	udiv	r7, r5, r2
 800b50c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800b510:	fb02 5617 	mls	r6, r2, r7, r5
 800b514:	4476      	add	r6, lr
 800b516:	460c      	mov	r4, r1
 800b518:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b51c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b520:	462e      	mov	r6, r5
 800b522:	42b2      	cmp	r2, r6
 800b524:	f101 0101 	add.w	r1, r1, #1
 800b528:	463d      	mov	r5, r7
 800b52a:	d9ed      	bls.n	800b508 <__utoa+0x40>
 800b52c:	2200      	movs	r2, #0
 800b52e:	545a      	strb	r2, [r3, r1]
 800b530:	1919      	adds	r1, r3, r4
 800b532:	1aa5      	subs	r5, r4, r2
 800b534:	42aa      	cmp	r2, r5
 800b536:	dae2      	bge.n	800b4fe <__utoa+0x36>
 800b538:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b53c:	780e      	ldrb	r6, [r1, #0]
 800b53e:	7006      	strb	r6, [r0, #0]
 800b540:	3201      	adds	r2, #1
 800b542:	f801 5901 	strb.w	r5, [r1], #-1
 800b546:	e7f4      	b.n	800b532 <__utoa+0x6a>
 800b548:	0800be47 	.word	0x0800be47

0800b54c <__malloc_lock>:
 800b54c:	4801      	ldr	r0, [pc, #4]	; (800b554 <__malloc_lock+0x8>)
 800b54e:	f000 b809 	b.w	800b564 <__retarget_lock_acquire_recursive>
 800b552:	bf00      	nop
 800b554:	20000440 	.word	0x20000440

0800b558 <__malloc_unlock>:
 800b558:	4801      	ldr	r0, [pc, #4]	; (800b560 <__malloc_unlock+0x8>)
 800b55a:	f000 b804 	b.w	800b566 <__retarget_lock_release_recursive>
 800b55e:	bf00      	nop
 800b560:	20000440 	.word	0x20000440

0800b564 <__retarget_lock_acquire_recursive>:
 800b564:	4770      	bx	lr

0800b566 <__retarget_lock_release_recursive>:
 800b566:	4770      	bx	lr

0800b568 <_init>:
 800b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56a:	bf00      	nop
 800b56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56e:	bc08      	pop	{r3}
 800b570:	469e      	mov	lr, r3
 800b572:	4770      	bx	lr

0800b574 <_fini>:
 800b574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b576:	bf00      	nop
 800b578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b57a:	bc08      	pop	{r3}
 800b57c:	469e      	mov	lr, r3
 800b57e:	4770      	bx	lr
