
Interpreter746.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ca1c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b4c  0801cbf0  0801cbf0  0002cbf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d73c  0801d73c  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801d73c  0801d73c  0002d73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d744  0801d744  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  0801d744  0801d744  0002d744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000024  0801d768  0801d768  0002d768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801d78c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001e0  0801d96c  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0801d96c  000304e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00198a07  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000af24  00000000  00000000  001c8c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000091f8  00000000  00000000  001d3b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000090b0  00000000  00000000  001dcd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e138  00000000  00000000  001e5de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c398  00000000  00000000  00213f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018ed32  00000000  00000000  002502b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  003defea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0002d99c  00000000  00000000  003df040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801cbd4 	.word	0x0801cbd4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0801cbd4 	.word	0x0801cbd4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9a4 	b.w	8000fd8 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff33 	bl	8000b1c <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fca9 	bl	8000638 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc2a 	bl	8000544 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fca0 	bl	8000638 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fae2 	bl	80002c8 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	468c      	mov	ip, r1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 8083 	bne.w	8000e2a <__udivmoddi4+0x116>
 8000d24:	428a      	cmp	r2, r1
 8000d26:	4617      	mov	r7, r2
 8000d28:	d947      	bls.n	8000dba <__udivmoddi4+0xa6>
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	b142      	cbz	r2, 8000d42 <__udivmoddi4+0x2e>
 8000d30:	f1c2 0020 	rsb	r0, r2, #32
 8000d34:	fa24 f000 	lsr.w	r0, r4, r0
 8000d38:	4091      	lsls	r1, r2
 8000d3a:	4097      	lsls	r7, r2
 8000d3c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d40:	4094      	lsls	r4, r2
 8000d42:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d46:	0c23      	lsrs	r3, r4, #16
 8000d48:	fbbc f6f8 	udiv	r6, ip, r8
 8000d4c:	fa1f fe87 	uxth.w	lr, r7
 8000d50:	fb08 c116 	mls	r1, r8, r6, ip
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f10e 	mul.w	r1, r6, lr
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x60>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d66:	f080 8119 	bcs.w	8000f9c <__udivmoddi4+0x288>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 8116 	bls.w	8000f9c <__udivmoddi4+0x288>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d909      	bls.n	8000da0 <__udivmoddi4+0x8c>
 8000d8c:	193c      	adds	r4, r7, r4
 8000d8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d92:	f080 8105 	bcs.w	8000fa0 <__udivmoddi4+0x28c>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f240 8102 	bls.w	8000fa0 <__udivmoddi4+0x28c>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	443c      	add	r4, r7
 8000da0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da4:	eba4 040e 	sub.w	r4, r4, lr
 8000da8:	2600      	movs	r6, #0
 8000daa:	b11d      	cbz	r5, 8000db4 <__udivmoddi4+0xa0>
 8000dac:	40d4      	lsrs	r4, r2
 8000dae:	2300      	movs	r3, #0
 8000db0:	e9c5 4300 	strd	r4, r3, [r5]
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xaa>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f282 	clz	r2, r2
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d150      	bne.n	8000e68 <__udivmoddi4+0x154>
 8000dc6:	1bcb      	subs	r3, r1, r7
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	fa1f f887 	uxth.w	r8, r7
 8000dd0:	2601      	movs	r6, #1
 8000dd2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dd6:	0c21      	lsrs	r1, r4, #16
 8000dd8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ddc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de0:	fb08 f30c 	mul.w	r3, r8, ip
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0xe4>
 8000de8:	1879      	adds	r1, r7, r1
 8000dea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0xe2>
 8000df0:	428b      	cmp	r3, r1
 8000df2:	f200 80e9 	bhi.w	8000fc8 <__udivmoddi4+0x2b4>
 8000df6:	4684      	mov	ip, r0
 8000df8:	1ac9      	subs	r1, r1, r3
 8000dfa:	b2a3      	uxth	r3, r4
 8000dfc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e00:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e04:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e08:	fb08 f800 	mul.w	r8, r8, r0
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	d907      	bls.n	8000e20 <__udivmoddi4+0x10c>
 8000e10:	193c      	adds	r4, r7, r4
 8000e12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x10a>
 8000e18:	45a0      	cmp	r8, r4
 8000e1a:	f200 80d9 	bhi.w	8000fd0 <__udivmoddi4+0x2bc>
 8000e1e:	4618      	mov	r0, r3
 8000e20:	eba4 0408 	sub.w	r4, r4, r8
 8000e24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e28:	e7bf      	b.n	8000daa <__udivmoddi4+0x96>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d909      	bls.n	8000e42 <__udivmoddi4+0x12e>
 8000e2e:	2d00      	cmp	r5, #0
 8000e30:	f000 80b1 	beq.w	8000f96 <__udivmoddi4+0x282>
 8000e34:	2600      	movs	r6, #0
 8000e36:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	fab3 f683 	clz	r6, r3
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	d14a      	bne.n	8000ee0 <__udivmoddi4+0x1cc>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d302      	bcc.n	8000e54 <__udivmoddi4+0x140>
 8000e4e:	4282      	cmp	r2, r0
 8000e50:	f200 80b8 	bhi.w	8000fc4 <__udivmoddi4+0x2b0>
 8000e54:	1a84      	subs	r4, r0, r2
 8000e56:	eb61 0103 	sbc.w	r1, r1, r3
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	468c      	mov	ip, r1
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	d0a8      	beq.n	8000db4 <__udivmoddi4+0xa0>
 8000e62:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e70:	4097      	lsls	r7, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e7a:	40d9      	lsrs	r1, r3
 8000e7c:	4330      	orrs	r0, r6
 8000e7e:	0c03      	lsrs	r3, r0, #16
 8000e80:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e84:	fa1f f887 	uxth.w	r8, r7
 8000e88:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e90:	fb06 f108 	mul.w	r1, r6, r8
 8000e94:	4299      	cmp	r1, r3
 8000e96:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9a:	d909      	bls.n	8000eb0 <__udivmoddi4+0x19c>
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ea2:	f080 808d 	bcs.w	8000fc0 <__udivmoddi4+0x2ac>
 8000ea6:	4299      	cmp	r1, r3
 8000ea8:	f240 808a 	bls.w	8000fc0 <__udivmoddi4+0x2ac>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	443b      	add	r3, r7
 8000eb0:	1a5b      	subs	r3, r3, r1
 8000eb2:	b281      	uxth	r1, r0
 8000eb4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec0:	fb00 f308 	mul.w	r3, r0, r8
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d907      	bls.n	8000ed8 <__udivmoddi4+0x1c4>
 8000ec8:	1879      	adds	r1, r7, r1
 8000eca:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ece:	d273      	bcs.n	8000fb8 <__udivmoddi4+0x2a4>
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	d971      	bls.n	8000fb8 <__udivmoddi4+0x2a4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4439      	add	r1, r7
 8000ed8:	1acb      	subs	r3, r1, r3
 8000eda:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ede:	e778      	b.n	8000dd2 <__udivmoddi4+0xbe>
 8000ee0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ee4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ee8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eec:	431c      	orrs	r4, r3
 8000eee:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ef2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ef6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000efa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000efe:	431f      	orrs	r7, r3
 8000f00:	0c3b      	lsrs	r3, r7, #16
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fa1f f884 	uxth.w	r8, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f12:	fb09 fa08 	mul.w	sl, r9, r8
 8000f16:	458a      	cmp	sl, r1
 8000f18:	fa02 f206 	lsl.w	r2, r2, r6
 8000f1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x220>
 8000f22:	1861      	adds	r1, r4, r1
 8000f24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f28:	d248      	bcs.n	8000fbc <__udivmoddi4+0x2a8>
 8000f2a:	458a      	cmp	sl, r1
 8000f2c:	d946      	bls.n	8000fbc <__udivmoddi4+0x2a8>
 8000f2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f32:	4421      	add	r1, r4
 8000f34:	eba1 010a 	sub.w	r1, r1, sl
 8000f38:	b2bf      	uxth	r7, r7
 8000f3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f42:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f46:	fb00 f808 	mul.w	r8, r0, r8
 8000f4a:	45b8      	cmp	r8, r7
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x24a>
 8000f4e:	19e7      	adds	r7, r4, r7
 8000f50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f54:	d22e      	bcs.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f56:	45b8      	cmp	r8, r7
 8000f58:	d92c      	bls.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	4427      	add	r7, r4
 8000f5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f62:	eba7 0708 	sub.w	r7, r7, r8
 8000f66:	fba0 8902 	umull	r8, r9, r0, r2
 8000f6a:	454f      	cmp	r7, r9
 8000f6c:	46c6      	mov	lr, r8
 8000f6e:	4649      	mov	r1, r9
 8000f70:	d31a      	bcc.n	8000fa8 <__udivmoddi4+0x294>
 8000f72:	d017      	beq.n	8000fa4 <__udivmoddi4+0x290>
 8000f74:	b15d      	cbz	r5, 8000f8e <__udivmoddi4+0x27a>
 8000f76:	ebb3 020e 	subs.w	r2, r3, lr
 8000f7a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f7e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f82:	40f2      	lsrs	r2, r6
 8000f84:	ea4c 0202 	orr.w	r2, ip, r2
 8000f88:	40f7      	lsrs	r7, r6
 8000f8a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f8e:	2600      	movs	r6, #0
 8000f90:	4631      	mov	r1, r6
 8000f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f96:	462e      	mov	r6, r5
 8000f98:	4628      	mov	r0, r5
 8000f9a:	e70b      	b.n	8000db4 <__udivmoddi4+0xa0>
 8000f9c:	4606      	mov	r6, r0
 8000f9e:	e6e9      	b.n	8000d74 <__udivmoddi4+0x60>
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	e6fd      	b.n	8000da0 <__udivmoddi4+0x8c>
 8000fa4:	4543      	cmp	r3, r8
 8000fa6:	d2e5      	bcs.n	8000f74 <__udivmoddi4+0x260>
 8000fa8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fac:	eb69 0104 	sbc.w	r1, r9, r4
 8000fb0:	3801      	subs	r0, #1
 8000fb2:	e7df      	b.n	8000f74 <__udivmoddi4+0x260>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e7d2      	b.n	8000f5e <__udivmoddi4+0x24a>
 8000fb8:	4660      	mov	r0, ip
 8000fba:	e78d      	b.n	8000ed8 <__udivmoddi4+0x1c4>
 8000fbc:	4681      	mov	r9, r0
 8000fbe:	e7b9      	b.n	8000f34 <__udivmoddi4+0x220>
 8000fc0:	4666      	mov	r6, ip
 8000fc2:	e775      	b.n	8000eb0 <__udivmoddi4+0x19c>
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	e74a      	b.n	8000e5e <__udivmoddi4+0x14a>
 8000fc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fcc:	4439      	add	r1, r7
 8000fce:	e713      	b.n	8000df8 <__udivmoddi4+0xe4>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	443c      	add	r4, r7
 8000fd4:	e724      	b.n	8000e20 <__udivmoddi4+0x10c>
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_ZSt26__throw_bad_variant_accessPKc>:
    friend void __throw_bad_variant_access(const char* __what);
  };

  inline void
  __throw_bad_variant_access(const char* __what)
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	f018 fdba 	bl	8019b74 <abort>

08001000 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	60fb      	str	r3, [r7, #12]
      return __builtin_is_constant_evaluated();
 800100c:	2300      	movs	r3, #0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
 800100e:	2b00      	cmp	r3, #0
 8001010:	d004      	beq.n	800101c <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 fb4b 	bl	80016ae <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8001018:	4603      	mov	r3, r0
 800101a:	e004      	b.n	8001026 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff f947 	bl	80002b0 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	bf00      	nop
      }
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f805 	bl	800104c <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
    }
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>:
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<typename _T1, typename _T2>
    struct pair
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	f018 fc26 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80010b4:	68fc      	ldr	r4, [r7, #12]
 80010b6:	68b8      	ldr	r0, [r7, #8]
 80010b8:	f000 fb61 	bl	800177e <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80010bc:	4605      	mov	r5, r0
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4618      	mov	r0, r3
 80010c4:	f018 fa4a 	bl	801955c <_ZNSaIcEC1Ev>
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	461a      	mov	r2, r3
 80010ce:	4629      	mov	r1, r5
 80010d0:	4620      	mov	r0, r4
 80010d2:	f000 fb5f 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4618      	mov	r0, r3
 80010dc:	f018 fa3f 	bl	801955e <_ZNSaIcED1Ev>
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffc9 	bl	8001078 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 80010e6:	4603      	mov	r3, r0
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	761a      	strb	r2, [r3, #24]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bdb0      	pop	{r4, r5, r7, pc}

080010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001104:	68fc      	ldr	r4, [r7, #12]
 8001106:	68b8      	ldr	r0, [r7, #8]
 8001108:	f000 fb6a 	bl	80017e0 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800110c:	4605      	mov	r5, r0
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4618      	mov	r0, r3
 8001114:	f018 fa22 	bl	801955c <_ZNSaIcEC1Ev>
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	461a      	mov	r2, r3
 800111e:	4629      	mov	r1, r5
 8001120:	4620      	mov	r0, r4
 8001122:	f000 fb37 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4618      	mov	r0, r3
 800112c:	f018 fa17 	bl	801955e <_ZNSaIcED1Ev>
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ffa1 	bl	8001078 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 8001136:	4603      	mov	r3, r0
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	761a      	strb	r2, [r3, #24]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bdb0      	pop	{r4, r5, r7, pc}

08001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001154:	68fc      	ldr	r4, [r7, #12]
 8001156:	68b8      	ldr	r0, [r7, #8]
 8001158:	f000 fb4d 	bl	80017f6 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800115c:	4605      	mov	r5, r0
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4618      	mov	r0, r3
 8001164:	f018 f9fa 	bl	801955c <_ZNSaIcEC1Ev>
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	461a      	mov	r2, r3
 800116e:	4629      	mov	r1, r5
 8001170:	4620      	mov	r0, r4
 8001172:	f000 fb0f 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4618      	mov	r0, r3
 800117c:	f018 f9ef 	bl	801955e <_ZNSaIcED1Ev>
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff79 	bl	8001078 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 8001186:	4603      	mov	r3, r0
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	761a      	strb	r2, [r3, #24]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bdb0      	pop	{r4, r5, r7, pc}

08001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80011a4:	68fc      	ldr	r4, [r7, #12]
 80011a6:	68b8      	ldr	r0, [r7, #8]
 80011a8:	f000 fb30 	bl	800180c <_ZSt7forwardIRA3_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80011ac:	4605      	mov	r5, r0
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4618      	mov	r0, r3
 80011b4:	f018 f9d2 	bl	801955c <_ZNSaIcEC1Ev>
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	461a      	mov	r2, r3
 80011be:	4629      	mov	r1, r5
 80011c0:	4620      	mov	r0, r4
 80011c2:	f000 fae7 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4618      	mov	r0, r3
 80011cc:	f018 f9c7 	bl	801955e <_ZNSaIcED1Ev>
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff51 	bl	8001078 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 80011d6:	4603      	mov	r3, r0
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	761a      	strb	r2, [r3, #24]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bdb0      	pop	{r4, r5, r7, pc}

080011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80011f4:	68fc      	ldr	r4, [r7, #12]
 80011f6:	68b8      	ldr	r0, [r7, #8]
 80011f8:	f000 fb13 	bl	8001822 <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80011fc:	4605      	mov	r5, r0
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4618      	mov	r0, r3
 8001204:	f018 f9aa 	bl	801955c <_ZNSaIcEC1Ev>
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	461a      	mov	r2, r3
 800120e:	4629      	mov	r1, r5
 8001210:	4620      	mov	r0, r4
 8001212:	f000 fabf 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4618      	mov	r0, r3
 800121c:	f018 f99f 	bl	801955e <_ZNSaIcED1Ev>
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff29 	bl	8001078 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 8001226:	4603      	mov	r3, r0
 8001228:	781a      	ldrb	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	761a      	strb	r2, [r3, #24]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bdb0      	pop	{r4, r5, r7, pc}

08001238 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fb88 	bl	8001958 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ffeb 	bl	8001238 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ffeb 	bl	8001252 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Move_assign_base : _Copy_assign_alias<_Types...>
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ffeb 	bl	800126c <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Variant_base : _Move_assign_alias<_Types...>
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ffeb 	bl	8001286 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
      variant() = default;
      variant(const variant& __rhs) = default;
      variant(variant&&) = default;
      variant& operator=(const variant&) = default;
      variant& operator=(variant&&) = default;
      ~variant() = default;
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ffeb 	bl	80012a0 <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_ZN17Primal_expressionD1Ev>:
#include <Expression.h>

Primal_expression::~Primal_expression()
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
{
	if(std::holds_alternative<Variable*>(content))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3304      	adds	r3, #4
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fb58 	bl	8001996 <_ZSt17holds_alternativeIP8VariableJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_P13Function_callEEbRKSt7variantIJDpT0_EE>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d010      	beq.n	800130e <_ZN17Primal_expressionD1Ev+0x3a>
	{
		delete std::get<Variable*>(content);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3304      	adds	r3, #4
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fb61 	bl	80019b8 <_ZSt3getIP8VariableJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_P13Function_callEERT_RSt7variantIJDpT0_EE>
 80012f6:	4603      	mov	r3, r0
 80012f8:	681c      	ldr	r4, [r3, #0]
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d01f      	beq.n	800133e <_ZN17Primal_expressionD1Ev+0x6a>
 80012fe:	4620      	mov	r0, r4
 8001300:	f010 fa2d 	bl	801175e <_ZN8VariableD1Ev>
 8001304:	2120      	movs	r1, #32
 8001306:	4620      	mov	r0, r4
 8001308:	f018 f915 	bl	8019536 <_ZdlPvj>
 800130c:	e017      	b.n	800133e <_ZN17Primal_expressionD1Ev+0x6a>
	}
	else if(std::holds_alternative<Function_call*>(content))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3304      	adds	r3, #4
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fb5c 	bl	80019d0 <_ZSt17holds_alternativeIP13Function_callJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableS1_EEbRKSt7variantIJDpT0_EE>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00f      	beq.n	800133e <_ZN17Primal_expressionD1Ev+0x6a>
	{
		delete std::get<Function_call*>(content);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3304      	adds	r3, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f000 fb65 	bl	80019f2 <_ZSt3getIP13Function_callJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableS1_EERT_RSt7variantIJDpT0_EE>
 8001328:	4603      	mov	r3, r0
 800132a:	681c      	ldr	r4, [r3, #0]
 800132c:	2c00      	cmp	r4, #0
 800132e:	d006      	beq.n	800133e <_ZN17Primal_expressionD1Ev+0x6a>
 8001330:	4620      	mov	r0, r4
 8001332:	f010 f9d2 	bl	80116da <_ZN13Function_callD1Ev>
 8001336:	2124      	movs	r1, #36	; 0x24
 8001338:	4620      	mov	r0, r4
 800133a:	f018 f8fc 	bl	8019536 <_ZdlPvj>
Primal_expression::~Primal_expression()
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3304      	adds	r3, #4
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ffb9 	bl	80012ba <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
	}
}
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}

08001352 <_ZN19Priority_expressionD1Ev>:

Priority_expression::~Priority_expression()
 8001352:	b590      	push	{r4, r7, lr}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
{
	if(std::holds_alternative<Expression*>(exp))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fb67 	bl	8001a30 <_ZSt17holds_alternativeIP10ExpressionJP17Primal_expressionS1_EEbRKSt7variantIJDpT0_EE>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00f      	beq.n	8001388 <_ZN19Priority_expressionD1Ev+0x36>
	{
		delete std::get<Expression*>(exp);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fb71 	bl	8001a52 <_ZSt3getIP10ExpressionJP17Primal_expressionS1_EERT_RSt7variantIJDpT0_EE>
 8001370:	4603      	mov	r3, r0
 8001372:	681c      	ldr	r4, [r3, #0]
 8001374:	2c00      	cmp	r4, #0
 8001376:	d016      	beq.n	80013a6 <_ZN19Priority_expressionD1Ev+0x54>
 8001378:	4620      	mov	r0, r4
 800137a:	f000 f948 	bl	800160e <_ZN10ExpressionD1Ev>
 800137e:	210c      	movs	r1, #12
 8001380:	4620      	mov	r0, r4
 8001382:	f018 f8d8 	bl	8019536 <_ZdlPvj>
 8001386:	e00e      	b.n	80013a6 <_ZN19Priority_expressionD1Ev+0x54>
	}
	else
	{
		delete std::get<Primal_expression*>(exp);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fb6d 	bl	8001a6a <_ZSt3getIP17Primal_expressionJS1_P10ExpressionEERT_RSt7variantIJDpT0_EE>
 8001390:	4603      	mov	r3, r0
 8001392:	681c      	ldr	r4, [r3, #0]
 8001394:	2c00      	cmp	r4, #0
 8001396:	d006      	beq.n	80013a6 <_ZN19Priority_expressionD1Ev+0x54>
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff ff9b 	bl	80012d4 <_ZN17Primal_expressionD1Ev>
 800139e:	2120      	movs	r1, #32
 80013a0:	4620      	mov	r0, r4
 80013a2:	f018 f8c8 	bl	8019536 <_ZdlPvj>
	}
}
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <_ZN16Unary_expressionD1Ev>:

Unary_expression::~Unary_expression()
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
{
	delete prior_exp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681c      	ldr	r4, [r3, #0]
 80013bc:	2c00      	cmp	r4, #0
 80013be:	d006      	beq.n	80013ce <_ZN16Unary_expressionD1Ev+0x1e>
 80013c0:	4620      	mov	r0, r4
 80013c2:	f7ff ffc6 	bl	8001352 <_ZN19Priority_expressionD1Ev>
 80013c6:	2108      	movs	r1, #8
 80013c8:	4620      	mov	r0, r4
 80013ca:	f018 f8b4 	bl	8019536 <_ZdlPvj>
}
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd90      	pop	{r4, r7, pc}

080013d8 <_ZN16Power_expressionD1Ev>:

Power_expression::~Power_expression()
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
{
	delete left_un_exp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681c      	ldr	r4, [r3, #0]
 80013e4:	2c00      	cmp	r4, #0
 80013e6:	d006      	beq.n	80013f6 <_ZN16Power_expressionD1Ev+0x1e>
 80013e8:	4620      	mov	r0, r4
 80013ea:	f7ff ffe1 	bl	80013b0 <_ZN16Unary_expressionD1Ev>
 80013ee:	2108      	movs	r1, #8
 80013f0:	4620      	mov	r0, r4
 80013f2:	f018 f8a0 	bl	8019536 <_ZdlPvj>
	delete right_un_exp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685c      	ldr	r4, [r3, #4]
 80013fa:	2c00      	cmp	r4, #0
 80013fc:	d006      	beq.n	800140c <_ZN16Power_expressionD1Ev+0x34>
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff ffd6 	bl	80013b0 <_ZN16Unary_expressionD1Ev>
 8001404:	2108      	movs	r1, #8
 8001406:	4620      	mov	r0, r4
 8001408:	f018 f895 	bl	8019536 <_ZdlPvj>
}
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}

08001416 <_ZN19Multiply_expressionD1Ev>:

Multiply_expression::~Multiply_expression()
 8001416:	b590      	push	{r4, r7, lr}
 8001418:	b087      	sub	sp, #28
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
{
	for(Power_expression* exp : pow_exps)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f000 fb63 	bl	8001aee <_ZNSt6vectorIP16Power_expressionSaIS1_EE5beginEv>
 8001428:	4603      	mov	r3, r0
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	6978      	ldr	r0, [r7, #20]
 800142e:	f000 fb6e 	bl	8001b0e <_ZNSt6vectorIP16Power_expressionSaIS1_EE3endEv>
 8001432:	4603      	mov	r3, r0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	f107 0208 	add.w	r2, r7, #8
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fb75 	bl	8001b30 <_ZN9__gnu_cxxneIPP16Power_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d017      	beq.n	800147c <_ZN19Multiply_expressionD1Ev+0x66>
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fb95 	bl	8001b80 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 8001456:	4603      	mov	r3, r0
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	613b      	str	r3, [r7, #16]
	{
		delete exp;
 800145c:	693c      	ldr	r4, [r7, #16]
 800145e:	2c00      	cmp	r4, #0
 8001460:	d006      	beq.n	8001470 <_ZN19Multiply_expressionD1Ev+0x5a>
 8001462:	4620      	mov	r0, r4
 8001464:	f7ff ffb8 	bl	80013d8 <_ZN16Power_expressionD1Ev>
 8001468:	2108      	movs	r1, #8
 800146a:	4620      	mov	r0, r4
 800146c:	f018 f863 	bl	8019536 <_ZdlPvj>
	for(Power_expression* exp : pow_exps)
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fb73 	bl	8001b60 <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEppEv>
 800147a:	e7dc      	b.n	8001436 <_ZN19Multiply_expressionD1Ev+0x20>
Multiply_expression::~Multiply_expression()
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	330c      	adds	r3, #12
 8001480:	4618      	mov	r0, r3
 8001482:	f000 fb19 	bl	8001ab8 <_ZNSt6vectorI13mult_operatorSaIS0_EED1Ev>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fafa 	bl	8001a82 <_ZNSt6vectorIP16Power_expressionSaIS1_EED1Ev>
	}
}
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4618      	mov	r0, r3
 8001492:	371c      	adds	r7, #28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd90      	pop	{r4, r7, pc}

08001498 <_ZN14Sum_expressionD1Ev>:

Sum_expression::~Sum_expression()
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
{
	for(Multiply_expression* exp : mult_exps)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	6978      	ldr	r0, [r7, #20]
 80014a6:	f000 fbad 	bl	8001c04 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE5beginEv>
 80014aa:	4603      	mov	r3, r0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f000 fbb8 	bl	8001c24 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE3endEv>
 80014b4:	4603      	mov	r3, r0
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	f107 0208 	add.w	r2, r7, #8
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 fbbf 	bl	8001c46 <_ZN9__gnu_cxxneIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d017      	beq.n	80014fe <_ZN14Sum_expressionD1Ev+0x66>
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fbdf 	bl	8001c96 <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 80014d8:	4603      	mov	r3, r0
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	613b      	str	r3, [r7, #16]
	{
		delete exp;
 80014de:	693c      	ldr	r4, [r7, #16]
 80014e0:	2c00      	cmp	r4, #0
 80014e2:	d006      	beq.n	80014f2 <_ZN14Sum_expressionD1Ev+0x5a>
 80014e4:	4620      	mov	r0, r4
 80014e6:	f7ff ff96 	bl	8001416 <_ZN19Multiply_expressionD1Ev>
 80014ea:	2118      	movs	r1, #24
 80014ec:	4620      	mov	r0, r4
 80014ee:	f018 f822 	bl	8019536 <_ZdlPvj>
	for(Multiply_expression* exp : mult_exps)
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fbbd 	bl	8001c76 <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEppEv>
 80014fc:	e7dc      	b.n	80014b8 <_ZN14Sum_expressionD1Ev+0x20>
Sum_expression::~Sum_expression()
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	330c      	adds	r3, #12
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fb63 	bl	8001bce <_ZNSt6vectorI12sum_operatorSaIS0_EED1Ev>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fb44 	bl	8001b98 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EED1Ev>
	}
}
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4618      	mov	r0, r3
 8001514:	371c      	adds	r7, #28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}

0800151a <_ZN19Relation_expressionD1Ev>:

Relation_expression::~Relation_expression()
 800151a:	b590      	push	{r4, r7, lr}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
{
	delete left_sum_exp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681c      	ldr	r4, [r3, #0]
 8001526:	2c00      	cmp	r4, #0
 8001528:	d006      	beq.n	8001538 <_ZN19Relation_expressionD1Ev+0x1e>
 800152a:	4620      	mov	r0, r4
 800152c:	f7ff ffb4 	bl	8001498 <_ZN14Sum_expressionD1Ev>
 8001530:	2118      	movs	r1, #24
 8001532:	4620      	mov	r0, r4
 8001534:	f017 ffff 	bl	8019536 <_ZdlPvj>
	delete right_sum_exp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685c      	ldr	r4, [r3, #4]
 800153c:	2c00      	cmp	r4, #0
 800153e:	d006      	beq.n	800154e <_ZN19Relation_expressionD1Ev+0x34>
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff ffa9 	bl	8001498 <_ZN14Sum_expressionD1Ev>
 8001546:	2118      	movs	r1, #24
 8001548:	4620      	mov	r0, r4
 800154a:	f017 fff4 	bl	8019536 <_ZdlPvj>
}
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bd90      	pop	{r4, r7, pc}

08001558 <_ZN18Compare_expressionD1Ev>:

Compare_expression::~Compare_expression()
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
{
	delete left_rel_exp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681c      	ldr	r4, [r3, #0]
 8001564:	2c00      	cmp	r4, #0
 8001566:	d006      	beq.n	8001576 <_ZN18Compare_expressionD1Ev+0x1e>
 8001568:	4620      	mov	r0, r4
 800156a:	f7ff ffd6 	bl	800151a <_ZN19Relation_expressionD1Ev>
 800156e:	210c      	movs	r1, #12
 8001570:	4620      	mov	r0, r4
 8001572:	f017 ffe0 	bl	8019536 <_ZdlPvj>
	delete right_rel_exp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685c      	ldr	r4, [r3, #4]
 800157a:	2c00      	cmp	r4, #0
 800157c:	d006      	beq.n	800158c <_ZN18Compare_expressionD1Ev+0x34>
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff ffcb 	bl	800151a <_ZN19Relation_expressionD1Ev>
 8001584:	210c      	movs	r1, #12
 8001586:	4620      	mov	r0, r4
 8001588:	f017 ffd5 	bl	8019536 <_ZdlPvj>
}
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}

08001596 <_ZN14And_expressionD1Ev>:

And_expression::~And_expression()
 8001596:	b590      	push	{r4, r7, lr}
 8001598:	b087      	sub	sp, #28
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
{
	for(Compare_expression* exp : comp_exps)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f000 fb9e 	bl	8001ce4 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE5beginEv>
 80015a8:	4603      	mov	r3, r0
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	6978      	ldr	r0, [r7, #20]
 80015ae:	f000 fba9 	bl	8001d04 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE3endEv>
 80015b2:	4603      	mov	r3, r0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	f107 0208 	add.w	r2, r7, #8
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fbb0 	bl	8001d26 <_ZN9__gnu_cxxneIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d017      	beq.n	80015fc <_ZN14And_expressionD1Ev+0x66>
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fbd0 	bl	8001d76 <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 80015d6:	4603      	mov	r3, r0
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	613b      	str	r3, [r7, #16]
	{
		delete exp;
 80015dc:	693c      	ldr	r4, [r7, #16]
 80015de:	2c00      	cmp	r4, #0
 80015e0:	d006      	beq.n	80015f0 <_ZN14And_expressionD1Ev+0x5a>
 80015e2:	4620      	mov	r0, r4
 80015e4:	f7ff ffb8 	bl	8001558 <_ZN18Compare_expressionD1Ev>
 80015e8:	210c      	movs	r1, #12
 80015ea:	4620      	mov	r0, r4
 80015ec:	f017 ffa3 	bl	8019536 <_ZdlPvj>
	for(Compare_expression* exp : comp_exps)
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fbae 	bl	8001d56 <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEppEv>
 80015fa:	e7dc      	b.n	80015b6 <_ZN14And_expressionD1Ev+0x20>
And_expression::~And_expression()
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fb55 	bl	8001cae <_ZNSt6vectorIP18Compare_expressionSaIS1_EED1Ev>
	}
}
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}

0800160e <_ZN10ExpressionD1Ev>:

Expression::~Expression()
 800160e:	b590      	push	{r4, r7, lr}
 8001610:	b087      	sub	sp, #28
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
{
	for(And_expression* exp : and_exps)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f000 fbd2 	bl	8001dc4 <_ZNSt6vectorIP14And_expressionSaIS1_EE5beginEv>
 8001620:	4603      	mov	r3, r0
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	6978      	ldr	r0, [r7, #20]
 8001626:	f000 fbdd 	bl	8001de4 <_ZNSt6vectorIP14And_expressionSaIS1_EE3endEv>
 800162a:	4603      	mov	r3, r0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	f107 0208 	add.w	r2, r7, #8
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fbe4 	bl	8001e06 <_ZN9__gnu_cxxneIPP14And_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d017      	beq.n	8001674 <_ZN10ExpressionD1Ev+0x66>
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fc04 	bl	8001e56 <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 800164e:	4603      	mov	r3, r0
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	613b      	str	r3, [r7, #16]
	{
		delete exp;
 8001654:	693c      	ldr	r4, [r7, #16]
 8001656:	2c00      	cmp	r4, #0
 8001658:	d006      	beq.n	8001668 <_ZN10ExpressionD1Ev+0x5a>
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff ff9b 	bl	8001596 <_ZN14And_expressionD1Ev>
 8001660:	210c      	movs	r1, #12
 8001662:	4620      	mov	r0, r4
 8001664:	f017 ff67 	bl	8019536 <_ZdlPvj>
	for(And_expression* exp : and_exps)
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fbe2 	bl	8001e36 <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEppEv>
 8001672:	e7dc      	b.n	800162e <_ZN10ExpressionD1Ev+0x20>
Expression::~Expression()
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fb89 	bl	8001d8e <_ZNSt6vectorIP14And_expressionSaIS1_EED1Ev>
	}
}
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd90      	pop	{r4, r7, pc}

08001686 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781a      	ldrb	r2, [r3, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	2200      	movs	r2, #0
 80016c2:	72fa      	strb	r2, [r7, #11]
 80016c4:	f107 020b 	add.w	r2, r7, #11
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ffdb 	bl	8001686 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f083 0301 	eor.w	r3, r3, #1
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x36>
        ++__i;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3301      	adds	r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80016e2:	e7ea      	b.n	80016ba <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xc>
      return __i;
 80016e4:	68fb      	ldr	r3, [r7, #12]
    }
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fbc8 	bl	8001e8c <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1Ev>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fbc7 	bl	8001ea2 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEED1Ev>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
       *  Create a %map consisting of copies of the elements in the
       *  initializer_list @a __l.
       *  This is linear in N if the range is already sorted, and NlogN
       *  otherwise (where N is @a __l.size()).
       */
      map(initializer_list<value_type> __l,
 800171e:	b5b0      	push	{r4, r5, r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	1d38      	adds	r0, r7, #4
 8001728:	e880 0006 	stmia.w	r0, {r1, r2}
 800172c:	603b      	str	r3, [r7, #0]
	  const _Compare& __comp = _Compare(),
	  const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
 800172e:	68fc      	ldr	r4, [r7, #12]
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fbbe 	bl	8001eb8 <_ZNSaISt4pairIKc10token_typeEEC1ERKS3_>
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	461a      	mov	r2, r3
 8001742:	6839      	ldr	r1, [r7, #0]
 8001744:	4620      	mov	r0, r4
 8001746:	f000 fbd1 	bl	8001eec <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ffd9 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8001754:	68fc      	ldr	r4, [r7, #12]
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4618      	mov	r0, r3
 800175a:	f000 fbfa 	bl	8001f52 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>
 800175e:	4605      	mov	r5, r0
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fc01 	bl	8001f6a <_ZNKSt16initializer_listISt4pairIKc10token_typeEE3endEv>
 8001768:	4603      	mov	r3, r0
 800176a:	461a      	mov	r2, r3
 800176c:	4629      	mov	r1, r5
 800176e:	4620      	mov	r0, r4
 8001770:	f000 fc0d 	bl	8001f8e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bdb0      	pop	{r4, r5, r7, pc}

0800177e <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 80017a0:	68fc      	ldr	r4, [r7, #12]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f017 ffaa 	bl	80196fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80017a8:	4603      	mov	r3, r0
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4619      	mov	r1, r3
 80017ae:	4620      	mov	r0, r4
 80017b0:	f018 f9a2 	bl	8019af8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x34>
 80017ba:	68b8      	ldr	r0, [r7, #8]
 80017bc:	f7ff fc20 	bl	8001000 <_ZNSt11char_traitsIcE6lengthEPKc>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4413      	add	r3, r2
 80017c6:	e001      	b.n	80017cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x38>
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	461a      	mov	r2, r3
 80017ce:	68b9      	ldr	r1, [r7, #8]
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 fb4c 	bl	8001e6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}

080017e0 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_ZSt7forwardIRA3_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 fbd0 	bl	8001fe6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 fbcf 	bl	8001ffc <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>:
      map(initializer_list<value_type> __l,
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	1d38      	adds	r0, r7, #4
 8001872:	e880 0006 	stmia.w	r0, {r1, r2}
 8001876:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8001878:	68fc      	ldr	r4, [r7, #12]
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001880:	4618      	mov	r0, r3
 8001882:	f000 fbc6 	bl	8002012 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKS9_>
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	461a      	mov	r2, r3
 800188c:	6839      	ldr	r1, [r7, #0]
 800188e:	4620      	mov	r0, r4
 8001890:	f000 fbd9 	bl	8002046 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1ERKSD_RKSE_>
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ffd9 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800189e:	68fc      	ldr	r4, [r7, #12]
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fc02 	bl	80020ac <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>
 80018a8:	4605      	mov	r5, r0
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 fc09 	bl	80020c4 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE3endEv>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	4629      	mov	r1, r5
 80018b8:	4620      	mov	r0, r4
 80018ba:	f000 fc18 	bl	80020ee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bdb0      	pop	{r4, r5, r7, pc}

080018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 fc38 	bl	8002146 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1Ev>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 fc37 	bl	800215c <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEED1Ev>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
      map(initializer_list<value_type> __l,
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	1d38      	adds	r0, r7, #4
 8001902:	e880 0006 	stmia.w	r0, {r1, r2}
 8001906:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8001908:	68fc      	ldr	r4, [r7, #12]
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fc2e 	bl	8002172 <_ZNSaISt4pairIKc12double_tokenEEC1ERKS3_>
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	461a      	mov	r2, r3
 800191c:	6839      	ldr	r1, [r7, #0]
 800191e:	4620      	mov	r0, r4
 8001920:	f000 fc41 	bl	80021a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ffd9 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800192e:	68fc      	ldr	r4, [r7, #12]
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fc6a 	bl	800220c <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>
 8001938:	4605      	mov	r5, r0
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fc71 	bl	8002224 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE3endEv>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	4629      	mov	r1, r5
 8001948:	4620      	mov	r0, r4
 800194a:	f000 fc7f 	bl	800224c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bdb0      	pop	{r4, r5, r7, pc}

08001958 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
      ~_Variant_storage()
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
      { _M_reset(); }
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fc9f 	bl	80022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>:
	}

      constexpr bool valueless_by_exception() const noexcept
      { return !this->_M_valid(); }

      constexpr size_t index() const noexcept
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
      {
	if (this->_M_index ==
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7e1b      	ldrb	r3, [r3, #24]
 800197c:	2bff      	cmp	r3, #255	; 0xff
 800197e:	d102      	bne.n	8001986 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv+0x16>
	    typename _Base::__index_type(variant_npos))
	  return variant_npos;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	e001      	b.n	800198a <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv+0x1a>
	return this->_M_index;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7e1b      	ldrb	r3, [r3, #24]
      }
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_ZSt17holds_alternativeIP8VariableJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_P13Function_callEEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
      return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffe6 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf0c      	ite	eq
 80019aa:	2301      	moveq	r3, #1
 80019ac:	2300      	movne	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
    }
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_ZSt3getIP8VariableJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_P13Function_callEERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 fce7 	bl	8002394 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 80019c6:	4603      	mov	r3, r0
    }
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_ZSt17holds_alternativeIP13Function_callJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableS1_EEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
      return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ffc9 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
    }
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_ZSt3getIP13Function_callJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableS1_EERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fd62 	bl	80024c4 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8001a00:	4603      	mov	r3, r0
    }
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>:
      constexpr size_t index() const noexcept
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	if (this->_M_index ==
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	791b      	ldrb	r3, [r3, #4]
 8001a16:	2bff      	cmp	r3, #255	; 0xff
 8001a18:	d102      	bne.n	8001a20 <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv+0x16>
	  return variant_npos;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	e001      	b.n	8001a24 <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv+0x1a>
	return this->_M_index;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	791b      	ldrb	r3, [r3, #4]
      }
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_ZSt17holds_alternativeIP10ExpressionJP17Primal_expressionS1_EEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
      return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ffe6 	bl	8001a0a <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
    }
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <_ZSt3getIP10ExpressionJP17Primal_expressionS1_EERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 fd82 	bl	8002564 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 8001a60:	4603      	mov	r3, r0
    }
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_ZSt3getIP17Primal_expressionJS1_P10ExpressionEERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fdb4 	bl	80025e0 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 8001a78:	4603      	mov	r3, r0
    }
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_ZNSt6vectorIP16Power_expressionSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001a82:	b5b0      	push	{r4, r5, r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681c      	ldr	r4, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 fde4 	bl	8002662 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8001a9a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f000 fde9 	bl	8002678 <_ZSt8_DestroyIPP16Power_expressionS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fdc1 	bl	8002630 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EED1Ev>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bdb0      	pop	{r4, r5, r7, pc}

08001ab8 <_ZNSt6vectorI13mult_operatorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681c      	ldr	r4, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fe06 	bl	80026dc <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 8001ad0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f000 fe0b 	bl	80026f2 <_ZSt8_DestroyIP13mult_operatorS0_EvT_S2_RSaIT0_E>
      }
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fde4 	bl	80026ac <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EED1Ev>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bdb0      	pop	{r4, r5, r7, pc}

08001aee <_ZNSt6vectorIP16Power_expressionSaIS1_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fe05 	bl	800270e <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <_ZNSt6vectorIP16Power_expressionSaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	1d1a      	adds	r2, r3, #4
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 fdf4 	bl	800270e <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_ZN9__gnu_cxxneIPP16Power_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fdf7 	bl	800272e <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001b40:	4603      	mov	r3, r0
 8001b42:	681c      	ldr	r4, [r3, #0]
 8001b44:	6838      	ldr	r0, [r7, #0]
 8001b46:	f000 fdf2 	bl	800272e <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	429c      	cmp	r4, r3
 8001b50:	bf14      	ite	ne
 8001b52:	2301      	movne	r3, #1
 8001b54:	2300      	moveq	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}

08001b60 <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	1d1a      	adds	r2, r3, #4
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	601a      	str	r2, [r3, #0]
	return *this;
 8001b72:	687b      	ldr	r3, [r7, #4]
      }
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001b98:	b5b0      	push	{r4, r5, r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681c      	ldr	r4, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fdef 	bl	800278e <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8001bb0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f000 fdf4 	bl	80027a4 <_ZSt8_DestroyIPP19Multiply_expressionS1_EvT_S3_RSaIT0_E>
      }
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 fdcc 	bl	800275c <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EED1Ev>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bdb0      	pop	{r4, r5, r7, pc}

08001bce <_ZNSt6vectorI12sum_operatorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001bce:	b5b0      	push	{r4, r5, r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681c      	ldr	r4, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 fe11 	bl	8002808 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 8001be6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001be8:	461a      	mov	r2, r3
 8001bea:	4629      	mov	r1, r5
 8001bec:	4620      	mov	r0, r4
 8001bee:	f000 fe16 	bl	800281e <_ZSt8_DestroyIP12sum_operatorS0_EvT_S2_RSaIT0_E>
      }
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fdef 	bl	80027d8 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EED1Ev>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bdb0      	pop	{r4, r5, r7, pc}

08001c04 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fe10 	bl	800283a <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	1d1a      	adds	r2, r3, #4
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 fdff 	bl	800283a <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_ZN9__gnu_cxxneIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001c46:	b590      	push	{r4, r7, lr}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fe02 	bl	800285a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001c56:	4603      	mov	r3, r0
 8001c58:	681c      	ldr	r4, [r3, #0]
 8001c5a:	6838      	ldr	r0, [r7, #0]
 8001c5c:	f000 fdfd 	bl	800285a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001c60:	4603      	mov	r3, r0
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	429c      	cmp	r4, r3
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd90      	pop	{r4, r7, pc}

08001c76 <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	1d1a      	adds	r2, r3, #4
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	601a      	str	r2, [r3, #0]
	return *this;
 8001c88:	687b      	ldr	r3, [r7, #4]
      }
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <_ZNSt6vectorIP18Compare_expressionSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001cae:	b5b0      	push	{r4, r5, r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681c      	ldr	r4, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fdfa 	bl	80028ba <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8001cc6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4629      	mov	r1, r5
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f000 fdff 	bl	80028d0 <_ZSt8_DestroyIPP18Compare_expressionS1_EvT_S3_RSaIT0_E>
      }
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 fdd7 	bl	8002888 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EED1Ev>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bdb0      	pop	{r4, r5, r7, pc}

08001ce4 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fdf9 	bl	80028ec <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	1d1a      	adds	r2, r3, #4
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fde8 	bl	80028ec <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZN9__gnu_cxxneIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001d26:	b590      	push	{r4, r7, lr}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fdeb 	bl	800290c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001d36:	4603      	mov	r3, r0
 8001d38:	681c      	ldr	r4, [r3, #0]
 8001d3a:	6838      	ldr	r0, [r7, #0]
 8001d3c:	f000 fde6 	bl	800290c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001d40:	4603      	mov	r3, r0
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	429c      	cmp	r4, r3
 8001d46:	bf14      	ite	ne
 8001d48:	2301      	movne	r3, #1
 8001d4a:	2300      	moveq	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}

08001d56 <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	1d1a      	adds	r2, r3, #4
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	601a      	str	r2, [r3, #0]
	return *this;
 8001d68:	687b      	ldr	r3, [r7, #4]
      }
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_ZNSt6vectorIP14And_expressionSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001d8e:	b5b0      	push	{r4, r5, r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681c      	ldr	r4, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fde3 	bl	800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8001da6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001da8:	461a      	mov	r2, r3
 8001daa:	4629      	mov	r1, r5
 8001dac:	4620      	mov	r0, r4
 8001dae:	f000 fde8 	bl	8002982 <_ZSt8_DestroyIPP14And_expressionS1_EvT_S3_RSaIT0_E>
      }
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fdc0 	bl	800293a <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EED1Ev>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bdb0      	pop	{r4, r5, r7, pc}

08001dc4 <_ZNSt6vectorIP14And_expressionSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fde2 	bl	800299e <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_ZNSt6vectorIP14And_expressionSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	1d1a      	adds	r2, r3, #4
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fdd1 	bl	800299e <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_ZN9__gnu_cxxneIPP14And_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001e06:	b590      	push	{r4, r7, lr}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fdd4 	bl	80029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001e16:	4603      	mov	r3, r0
 8001e18:	681c      	ldr	r4, [r3, #0]
 8001e1a:	6838      	ldr	r0, [r7, #0]
 8001e1c:	f000 fdcf 	bl	80029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001e20:	4603      	mov	r3, r0
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	429c      	cmp	r4, r3
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd90      	pop	{r4, r7, pc}

08001e36 <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	1d1a      	adds	r2, r3, #4
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	601a      	str	r2, [r3, #0]
	return *this;
 8001e48:	687b      	ldr	r3, [r7, #4]
      }
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 fda8 	bl	80029d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>
        }
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_ZNSaISt4pairIKc10token_typeEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001ec2:	6839      	ldr	r1, [r7, #0]
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fd96 	bl	80029f6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1ERKS5_>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fda3 	bl	8002a28 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree() { }
#else
      _Rb_tree() = default;
#endif

      _Rb_tree(const _Compare& __comp,
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
	       const allocator_type& __a = allocator_type())
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8001ef8:	68fc      	ldr	r4, [r7, #12]
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fd84 	bl	8002a0e <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1IS3_EERKSaIT_E>
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f000 fd96 	bl	8002a40 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fd85 	bl	8002a28 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4618      	mov	r0, r3
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd90      	pop	{r4, r7, pc}

08001f28 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fdc1 	bl	8002ab8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fd9d 	bl	8002a7a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ffc6 	bl	8001ed4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <_ZNKSt16initializer_listISt4pairIKc10token_typeEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8001f6a:	b590      	push	{r4, r7, lr}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffed 	bl	8001f52 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>
 8001f78:	4604      	mov	r4, r0
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fda8 	bl	8002ad0 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE4sizeEv>
 8001f80:	4603      	mov	r3, r0
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4423      	add	r3, r4
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd90      	pop	{r4, r7, pc}

08001f8e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	using __same_value_type
	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;

      template<typename _InputIterator>
	__enable_if_t<__same_value_type<_InputIterator>::value>
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b088      	sub	sp, #32
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
	{
	  _Alloc_node __an(*this);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	68f9      	ldr	r1, [r7, #12]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fda1 	bl	8002ae8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d017      	beq.n	8001fde <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 fda9 	bl	8002b06 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	f107 021c 	add.w	r2, r7, #28
 8001fbc:	f107 0318 	add.w	r3, r7, #24
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fdb0 	bl	8002b28 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	69b9      	ldr	r1, [r7, #24]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 fdb9 	bl	8002b48 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	e7e3      	b.n	8001fa6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 8001fde:	bf00      	nop
 8001fe0:	3720      	adds	r7, #32
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKS9_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fdc5 	bl	8002bae <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSB_>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fdd2 	bl	8002be0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1ERKSD_RKSE_>:
      _Rb_tree(const _Compare& __comp,
 8002046:	b590      	push	{r4, r7, lr}
 8002048:	b087      	sub	sp, #28
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8002052:	68fc      	ldr	r4, [r7, #12]
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fdb3 	bl	8002bc6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1IS9_EERKSaIT_E>
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	461a      	mov	r2, r3
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	4620      	mov	r0, r4
 800206a:	f000 fdc5 	bl	8002bf8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fdb4 	bl	8002be0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4618      	mov	r0, r3
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd90      	pop	{r4, r7, pc}

08002082 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fdf0 	bl	8002c70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8002090:	4603      	mov	r3, r0
 8002092:	4619      	mov	r1, r3
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fdcc 	bl	8002c32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ffc6 	bl	800202e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>:
      begin() const noexcept { return _M_array; }
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE3endEv>:
      end() const noexcept { return begin() + size(); }
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ffed 	bl	80020ac <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>
 80020d2:	4604      	mov	r4, r0
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fdd7 	bl	8002c88 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE4sizeEv>
 80020da:	4602      	mov	r2, r0
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4423      	add	r3, r4
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}

080020ee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b088      	sub	sp, #32
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	68f9      	ldr	r1, [r7, #12]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fdcd 	bl	8002ca0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>
	  for (; __first != __last; ++__first)
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d017      	beq.n	800213e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fdd5 	bl	8002cbe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8002114:	4603      	mov	r3, r0
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	f107 021c 	add.w	r2, r7, #28
 800211c:	f107 0318 	add.w	r3, r7, #24
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fddc 	bl	8002ce0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSt17_Rb_tree_iteratorIS9_E>
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	69b9      	ldr	r1, [r7, #24]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 fde5 	bl	8002d00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	331c      	adds	r3, #28
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	e7e3      	b.n	8002106 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x18>
	}
 800213e:	bf00      	nop
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <_ZNSaISt4pairIKc12double_tokenEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800217c:	6839      	ldr	r1, [r7, #0]
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fdf1 	bl	8002d66 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1ERKS5_>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fdfe 	bl	8002d98 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree(const _Compare& __comp,
 80021a6:	b590      	push	{r4, r7, lr}
 80021a8:	b087      	sub	sp, #28
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 80021b2:	68fc      	ldr	r4, [r7, #12]
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fddf 	bl	8002d7e <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1IS3_EERKSaIT_E>
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	461a      	mov	r2, r3
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	4620      	mov	r0, r4
 80021ca:	f000 fdf1 	bl	8002db0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fde0 	bl	8002d98 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4618      	mov	r0, r3
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd90      	pop	{r4, r7, pc}

080021e2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fe1c 	bl	8002e28 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4619      	mov	r1, r3
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fdf8 	bl	8002dea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ffc6 	bl	800218e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ffed 	bl	800220c <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>
 8002232:	4604      	mov	r4, r0
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fe03 	bl	8002e40 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE4sizeEv>
 800223a:	4602      	mov	r2, r0
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	4423      	add	r3, r4
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bd90      	pop	{r4, r7, pc}

0800224c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	68f9      	ldr	r1, [r7, #12]
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fdfa 	bl	8002e58 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d017      	beq.n	800229c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 fe02 	bl	8002e76 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8002272:	4603      	mov	r3, r0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	f107 021c 	add.w	r2, r7, #28
 800227a:	f107 0318 	add.w	r3, r7, #24
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fe09 	bl	8002e98 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	69b9      	ldr	r1, [r7, #24]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fe12 	bl	8002eb8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	3303      	adds	r3, #3
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	e7e3      	b.n	8002264 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 800229c:	bf00      	nop
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>:
      void _M_reset()
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	_M_reset_impl();
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f001 f971 	bl	8003594 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEv>
	_M_index = variant_npos;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	22ff      	movs	r2, #255	; 0xff
 80022b6:	761a      	strb	r2, [r3, #24]
      }
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	7138      	strb	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80022ca:	6838      	ldr	r0, [r7, #0]
 80022cc:	f001 f9ab 	bl	8003626 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP8VariableP13Function_callEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f001 f9b2 	bl	800363c <_ZNRSt8__detail9__variant14_UninitializedIP8VariableLb1EE6_M_getEv>
 80022d8:	4603      	mov	r3, r0
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80022e2:	b590      	push	{r4, r7, lr}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	7138      	strb	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80022ec:	6838      	ldr	r0, [r7, #0]
 80022ee:	f001 f98f 	bl	8003610 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 80022f2:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80022f4:	4619      	mov	r1, r3
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7ff ffe2 	bl	80022c0 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 80022fc:	4603      	mov	r3, r0
    }
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bd90      	pop	{r4, r7, pc}

08002306 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8002306:	b590      	push	{r4, r7, lr}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	7138      	strb	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8002310:	6838      	ldr	r0, [r7, #0]
 8002312:	f001 f972 	bl	80035fa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8002316:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8002318:	4619      	mov	r1, r3
 800231a:	4620      	mov	r0, r4
 800231c:	f7ff ffe1 	bl	80022e2 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8002320:	4603      	mov	r3, r0
    }
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bd90      	pop	{r4, r7, pc}

0800232a <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800232a:	b590      	push	{r4, r7, lr}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	7138      	strb	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8002334:	6838      	ldr	r0, [r7, #0]
 8002336:	f001 f955 	bl	80035e4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800233a:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800233c:	4619      	mov	r1, r3
 800233e:	4620      	mov	r0, r4
 8002340:	f7ff ffe1 	bl	8002306 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8002344:	4603      	mov	r3, r0
    }
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bd90      	pop	{r4, r7, pc}

0800234e <_ZNSt8__detail9__variant5__getILj4ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800234e:	b590      	push	{r4, r7, lr}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	7138      	strb	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8002358:	6838      	ldr	r0, [r7, #0]
 800235a:	f001 f938 	bl	80035ce <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800235e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8002360:	4619      	mov	r1, r3
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff ffe1 	bl	800232a <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8002368:	4603      	mov	r3, r0
    }
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}

08002372 <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8002372:	b590      	push	{r4, r7, lr}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f001 f91c 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8002380:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8002382:	4619      	mov	r1, r3
 8002384:	4620      	mov	r0, r4
 8002386:	f7ff ffe2 	bl	800234e <_ZNSt8__detail9__variant5__getILj4ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800238a:	4603      	mov	r3, r0
    }
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}

08002394 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
#undef _VARIANT_RELATION_FUNCTION_TEMPLATE
    };

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>>&
    get(variant<_Types...>& __v)
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
    {
      static_assert(_Np < sizeof...(_Types),
		    "The index should be in [0, number of alternatives)");
      if (__v.index() != _Np)
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff fae7 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	bf14      	ite	ne
 80023a8:	2301      	movne	r3, #1
 80023aa:	2300      	moveq	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 80023b4:	f7fe fe1e 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ffda 	bl	8002372 <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80023be:	4603      	mov	r3, r0
    }
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	0801cbf0 	.word	0x0801cbf0

080023cc <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	7138      	strb	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80023d6:	6838      	ldr	r0, [r7, #0]
 80023d8:	f001 f93b 	bl	8003652 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80023dc:	4603      	mov	r3, r0
 80023de:	4618      	mov	r0, r3
 80023e0:	f001 f942 	bl	8003668 <_ZNRSt8__detail9__variant14_UninitializedIP13Function_callLb1EE6_M_getEv>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80023ee:	b590      	push	{r4, r7, lr}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	7138      	strb	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80023f8:	6838      	ldr	r0, [r7, #0]
 80023fa:	f001 f914 	bl	8003626 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP8VariableP13Function_callEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80023fe:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8002400:	4619      	mov	r1, r3
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff ffe2 	bl	80023cc <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 8002408:	4603      	mov	r3, r0
    }
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bd90      	pop	{r4, r7, pc}

08002412 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8002412:	b590      	push	{r4, r7, lr}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	7138      	strb	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800241c:	6838      	ldr	r0, [r7, #0]
 800241e:	f001 f8f7 	bl	8003610 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8002422:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8002424:	4619      	mov	r1, r3
 8002426:	4620      	mov	r0, r4
 8002428:	f7ff ffe1 	bl	80023ee <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800242c:	4603      	mov	r3, r0
    }
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bd90      	pop	{r4, r7, pc}

08002436 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8002436:	b590      	push	{r4, r7, lr}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	7138      	strb	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8002440:	6838      	ldr	r0, [r7, #0]
 8002442:	f001 f8da 	bl	80035fa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8002446:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8002448:	4619      	mov	r1, r3
 800244a:	4620      	mov	r0, r4
 800244c:	f7ff ffe1 	bl	8002412 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8002450:	4603      	mov	r3, r0
    }
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}

0800245a <_ZNSt8__detail9__variant5__getILj4ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800245a:	b590      	push	{r4, r7, lr}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	7138      	strb	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8002464:	6838      	ldr	r0, [r7, #0]
 8002466:	f001 f8bd 	bl	80035e4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800246a:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800246c:	4619      	mov	r1, r3
 800246e:	4620      	mov	r0, r4
 8002470:	f7ff ffe1 	bl	8002436 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8002474:	4603      	mov	r3, r0
    }
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bd90      	pop	{r4, r7, pc}

0800247e <_ZNSt8__detail9__variant5__getILj5ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800247e:	b590      	push	{r4, r7, lr}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	7138      	strb	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8002488:	6838      	ldr	r0, [r7, #0]
 800248a:	f001 f8a0 	bl	80035ce <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800248e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8002490:	4619      	mov	r1, r3
 8002492:	4620      	mov	r0, r4
 8002494:	f7ff ffe1 	bl	800245a <_ZNSt8__detail9__variant5__getILj4ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8002498:	4603      	mov	r3, r0
    }
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd90      	pop	{r4, r7, pc}

080024a2 <_ZNSt8__detail9__variant5__getILj5ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80024a2:	b590      	push	{r4, r7, lr}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f001 f884 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80024b0:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 80024b2:	4619      	mov	r1, r3
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7ff ffe2 	bl	800247e <_ZNSt8__detail9__variant5__getILj5ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80024ba:	4603      	mov	r3, r0
    }
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd90      	pop	{r4, r7, pc}

080024c4 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff fa4f 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	bf14      	ite	ne
 80024d8:	2301      	movne	r3, #1
 80024da:	2300      	moveq	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 80024e4:	f7fe fd86 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ffda 	bl	80024a2 <_ZNSt8__detail9__variant5__getILj5ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80024ee:	4603      	mov	r3, r0
    }
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	0801cbf0 	.word	0x0801cbf0

080024fc <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10ExpressionEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	7138      	strb	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8002506:	6838      	ldr	r0, [r7, #0]
 8002508:	f001 f8cf 	bl	80036aa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10ExpressionEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800250c:	4603      	mov	r3, r0
 800250e:	4618      	mov	r0, r3
 8002510:	f001 f8d6 	bl	80036c0 <_ZNRSt8__detail9__variant14_UninitializedIP10ExpressionLb1EE6_M_getEv>
 8002514:	4603      	mov	r3, r0
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800251e:	b590      	push	{r4, r7, lr}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	7138      	strb	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8002528:	6838      	ldr	r0, [r7, #0]
 800252a:	f001 f8b3 	bl	8003694 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800252e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8002530:	4619      	mov	r1, r3
 8002532:	4620      	mov	r0, r4
 8002534:	f7ff ffe2 	bl	80024fc <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10ExpressionEEEEEDcSt16in_place_index_tILj0EEOT_>
 8002538:	4603      	mov	r3, r0
    }
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}

08002542 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8002542:	b590      	push	{r4, r7, lr}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f001 f897 	bl	800367e <_ZSt7forwardIRSt7variantIJP17Primal_expressionP10ExpressionEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8002550:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8002552:	4619      	mov	r1, r3
 8002554:	4620      	mov	r0, r4
 8002556:	f7ff ffe2 	bl	800251e <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800255a:	4603      	mov	r3, r0
    }
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bd90      	pop	{r4, r7, pc}

08002564 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>:
    get(variant<_Types...>& __v)
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fa4c 	bl	8001a0a <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8002582:	4805      	ldr	r0, [pc, #20]	; (8002598 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x34>)
 8002584:	f7fe fd36 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ffda 	bl	8002542 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>
 800258e:	4603      	mov	r3, r0
    }
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	0801cbf0 	.word	0x0801cbf0

0800259c <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	7138      	strb	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80025a6:	6838      	ldr	r0, [r7, #0]
 80025a8:	f001 f874 	bl	8003694 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f001 f891 	bl	80036d6 <_ZNRSt8__detail9__variant14_UninitializedIP17Primal_expressionLb1EE6_M_getEv>
 80025b4:	4603      	mov	r3, r0
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80025be:	b590      	push	{r4, r7, lr}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f001 f859 	bl	800367e <_ZSt7forwardIRSt7variantIJP17Primal_expressionP10ExpressionEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80025cc:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 80025ce:	4619      	mov	r1, r3
 80025d0:	4620      	mov	r0, r4
 80025d2:	f7ff ffe3 	bl	800259c <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEEDcSt16in_place_index_tILj0EEOT_>
 80025d6:	4603      	mov	r3, r0
    }
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd90      	pop	{r4, r7, pc}

080025e0 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>:
    get(variant<_Types...>& __v)
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fa0e 	bl	8001a0a <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x24>
	__throw_bad_variant_access("Unexpected index");
 80025fe:	4805      	ldr	r0, [pc, #20]	; (8002614 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x34>)
 8002600:	f7fe fcf8 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ffda 	bl	80025be <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>
 800260a:	4603      	mov	r3, r0
    }
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	0801cbf0 	.word	0x0801cbf0

08002618 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f001 f863 	bl	80036ec <_ZNSaIP16Power_expressionED1Ev>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002648:	461a      	mov	r2, r3
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f001 f85a 	bl	8003704 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ffe0 	bl	8002618 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE12_Vector_implD1Ev>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_ZSt8_DestroyIPP16Power_expressionS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f001 f84f 	bl	800372a <_ZSt8_DestroyIPP16Power_expressionEvT_S3_>
    }
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f001 f851 	bl	8003744 <_ZNSaI13mult_operatorED1Ev>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80026c2:	461a      	mov	r2, r3
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f001 f849 	bl	800375c <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE13_M_deallocateEPS0_j>
      }
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ffe1 	bl	8002694 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE12_Vector_implD1Ev>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_ZSt8_DestroyIP13mult_operatorS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f001 f83e 	bl	8003782 <_ZSt8_DestroyIP13mult_operatorEvT_S2_>
    }
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f001 f825 	bl	800379c <_ZNSaIP19Multiply_expressionED1Ev>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002774:	461a      	mov	r2, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f001 f81c 	bl	80037b4 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ffe0 	bl	8002744 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE12_Vector_implD1Ev>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <_ZSt8_DestroyIPP19Multiply_expressionS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f001 f811 	bl	80037da <_ZSt8_DestroyIPP19Multiply_expressionEvT_S3_>
    }
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f001 f813 	bl	80037f4 <_ZNSaI12sum_operatorED1Ev>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80027ee:	461a      	mov	r2, r3
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f001 f80b 	bl	800380c <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE13_M_deallocateEPS0_j>
      }
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ffe1 	bl	80027c0 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE12_Vector_implD1Ev>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <_ZSt8_DestroyIP12sum_operatorS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f001 f800 	bl	8003832 <_ZSt8_DestroyIP12sum_operatorEvT_S2_>
    }
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 ffe7 	bl	800384c <_ZNSaIP18Compare_expressionED1Ev>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80028a0:	461a      	mov	r2, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 ffde 	bl	8003864 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ffe0 	bl	8002870 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE12_Vector_implD1Ev>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <_ZSt8_DestroyIPP18Compare_expressionS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 ffd3 	bl	800388a <_ZSt8_DestroyIPP18Compare_expressionEvT_S3_>
    }
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 ffba 	bl	80038a4 <_ZNSaIP14And_expressionED1Ev>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002952:	461a      	mov	r2, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 ffb1 	bl	80038bc <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ffe0 	bl	8002922 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE12_Vector_implD1Ev>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <_ZSt8_DestroyIPP14And_expressionS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 ffa6 	bl	80038e2 <_ZSt8_DestroyIPP14And_expressionEvT_S3_>
    }
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80029e2:	4623      	mov	r3, r4
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 ff9b 	bl	8003924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
	}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd90      	pop	{r4, r7, pc}

080029f6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 ffcb 	bl	80039b4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1Ev>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 ffca 	bl	80039ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 ffc7 	bl	80039e0 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEEONSt16remove_referenceIT_E4typeEOS9_>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4619      	mov	r1, r3
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 ffcd 	bl	80039f6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS5_>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 ffd6 	bl	8003a12 <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fadf 	bl	800102e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d012      	beq.n	8002ab0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8002a8a:	6838      	ldr	r0, [r7, #0]
 8002a8c:	f000 ffcd 	bl	8003a2a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4619      	mov	r1, r3
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff fff0 	bl	8002a7a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 8002a9a:	6838      	ldr	r0, [r7, #0]
 8002a9c:	f000 ffd1 	bl	8003a42 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002aa0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 ffd8 	bl	8003a5a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002aae:	e7e9      	b.n	8002a84 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
	}
    }
 8002ab0:	bf00      	nop
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	1d1a      	adds	r2, r3, #4
 8002b12:	f107 030c 	add.w	r3, r7, #12
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 ffaf 	bl	8003a7c <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
    template<typename _Arg, typename _NodeGen>
#else
    template<typename _NodeGen>
#endif
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002b48:	b5b0      	push	{r4, r5, r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
			const _Val& __v,
#endif
			_NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8002b56:	f107 0318 	add.w	r3, r7, #24
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 f8bf 	bl	8003ce0 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 8002b62:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 8002b64:	f107 0010 	add.w	r0, r7, #16
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	68f9      	ldr	r1, [r7, #12]
 8002b6c:	f000 ff95 	bl	8003a9a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>

      if (__res.second)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00f      	beq.n	8002b96 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
			  _GLIBCXX_FORWARD(_Arg, __v),
			  __node_gen);
 8002b76:	693c      	ldr	r4, [r7, #16]
 8002b78:	697d      	ldr	r5, [r7, #20]
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f001 f8bc 	bl	8003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002b80:	4602      	mov	r2, r0
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	462a      	mov	r2, r5
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f001 f8be 	bl	8003d0e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 8002b92:	4603      	mov	r3, r0
 8002b94:	e007      	b.n	8002ba6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	f107 031c 	add.w	r3, r7, #28
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 ff6c 	bl	8003a7c <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002ba4:	69fb      	ldr	r3, [r7, #28]
    }
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bdb0      	pop	{r4, r5, r7, pc}

08002bae <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSB_>:
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1IS9_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f001 f8e5 	bl	8003da0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1Ev>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f001 f8e4 	bl	8003db6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f001 f8e1 	bl	8003dcc <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEEONSt16remove_referenceIT_E4typeEOSF_>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f001 f8e7 	bl	8003de2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSB_>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 f8f0 	bl	8003dfe <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3304      	adds	r3, #4
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe fa03 	bl	800102e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d012      	beq.n	8002c68 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x36>
	  _M_erase(_S_right(__x));
 8002c42:	6838      	ldr	r0, [r7, #0]
 8002c44:	f001 f8e7 	bl	8003e16 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fff0 	bl	8002c32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
	  _Link_type __y = _S_left(__x);
 8002c52:	6838      	ldr	r0, [r7, #0]
 8002c54:	f001 f8eb 	bl	8003e2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002c58:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8002c5a:	6839      	ldr	r1, [r7, #0]
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f001 f8f2 	bl	8003e46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>
	  __x = __y;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002c66:	e7e9      	b.n	8002c3c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0xa>
    }
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE4sizeEv>:
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>:
	_Alloc_node(_Rb_tree& __t)
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	1d1a      	adds	r2, r3, #4
 8002cca:	f107 030c 	add.w	r3, r7, #12
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 f8c9 	bl	8003e68 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSt17_Rb_tree_iteratorIS9_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002d00:	b5b0      	push	{r4, r5, r7, lr}
 8002d02:	b08a      	sub	sp, #40	; 0x28
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8002d0e:	f107 0318 	add.w	r3, r7, #24
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f001 f9d9 	bl	80040cc <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 8002d1a:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 8002d1c:	f107 0010 	add.w	r0, r7, #16
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	68f9      	ldr	r1, [r7, #12]
 8002d24:	f001 f8af 	bl	8003e86 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_>
      if (__res.second)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00f      	beq.n	8002d4e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x4e>
			  __node_gen);
 8002d2e:	693c      	ldr	r4, [r7, #16]
 8002d30:	697d      	ldr	r5, [r7, #20]
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f001 f9d6 	bl	80040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	462a      	mov	r2, r5
 8002d42:	4621      	mov	r1, r4
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f001 f9d8 	bl	80040fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	e007      	b.n	8002d5e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	f107 031c 	add.w	r3, r7, #28
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f001 f886 	bl	8003e68 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002d5c:	69fb      	ldr	r3, [r7, #28]
    }
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bdb0      	pop	{r4, r5, r7, pc}

08002d66 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1ERKS5_>:
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f001 f9ff 	bl	800418c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1Ev>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f001 f9fe 	bl	80041a2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f001 f9fb 	bl	80041b8 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEEONSt16remove_referenceIT_E4typeEOS9_>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f001 fa01 	bl	80041ce <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS5_>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fe1e 	bl	8003a12 <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe f927 	bl	800102e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d012      	beq.n	8002e20 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 8002dfa:	6838      	ldr	r0, [r7, #0]
 8002dfc:	f001 f9f5 	bl	80041ea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff fff0 	bl	8002dea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 8002e0a:	6838      	ldr	r0, [r7, #0]
 8002e0c:	f001 f9f9 	bl	8004202 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002e10:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8002e12:	6839      	ldr	r1, [r7, #0]
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f001 fa00 	bl	800421a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002e1e:	e7e9      	b.n	8002df4 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE4sizeEv>:
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	1d1a      	adds	r2, r3, #4
 8002e82:	f107 030c 	add.w	r3, r7, #12
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f001 f9d7 	bl	800423c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002eb8:	b5b0      	push	{r4, r5, r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8002ec6:	f107 0318 	add.w	r3, r7, #24
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 fae7 	bl	80044a0 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 8002ed2:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 8002ed4:	f107 0010 	add.w	r0, r7, #16
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	68f9      	ldr	r1, [r7, #12]
 8002edc:	f001 f9bd 	bl	800425a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>
      if (__res.second)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00f      	beq.n	8002f06 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
			  __node_gen);
 8002ee6:	693c      	ldr	r4, [r7, #16]
 8002ee8:	697d      	ldr	r5, [r7, #20]
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f001 fae4 	bl	80044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	462a      	mov	r2, r5
 8002efa:	4621      	mov	r1, r4
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f001 fae6 	bl	80044ce <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 8002f02:	4603      	mov	r3, r0
 8002f04:	e007      	b.n	8002f16 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	f107 031c 	add.w	r3, r7, #28
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 f994 	bl	800423c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8002f14:	69fb      	ldr	r3, [r7, #28]
    }
 8002f16:	4618      	mov	r0, r3
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bdb0      	pop	{r4, r5, r7, pc}

08002f1e <_ZSt14__variant_castIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callERNSt8__detail9__variant16_Variant_storageILb0EJbifS5_S7_S9_EEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
	    return static_cast<variant<_Types...>&>(__rhs);
 8002f26:	687b      	ldr	r3, [r7, #4]
    }
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	7138      	strb	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8002f3e:	6838      	ldr	r0, [r7, #0]
 8002f40:	f000 fb45 	bl	80035ce <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 fb15 	bl	8004576 <_ZNRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8002f56:	b590      	push	{r4, r7, lr}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fb2a 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8002f64:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8002f66:	4619      	mov	r1, r3
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f7ff ffe3 	bl	8002f34 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 8002f6e:	4603      	mov	r3, r0
    }
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd90      	pop	{r4, r7, pc}

08002f78 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fb19 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ffe4 	bl	8002f56 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8002f8e:	4603      	mov	r3, r0
	}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8002f98:	b5b0      	push	{r4, r5, r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f001 fadc 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8002fa8:	4604      	mov	r4, r0
 8002faa:	6838      	ldr	r0, [r7, #0]
 8002fac:	f000 fb04 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff ffe0 	bl	8002f78 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESM_EEDcOT0_>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f001 fae5 	bl	800458c <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRbEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 8002fc2:	462b      	mov	r3, r5
      }
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bdb0      	pop	{r4, r5, r7, pc}

08002fcc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8002fcc:	b5b0      	push	{r4, r5, r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f001 fac2 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8002fdc:	4604      	mov	r4, r0
 8002fde:	6838      	ldr	r0, [r7, #0]
 8002fe0:	f000 faea 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f7ff ffd5 	bl	8002f98 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 8002fee:	462b      	mov	r3, r5
      }
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bdb0      	pop	{r4, r5, r7, pc}

08002ff8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f001 faac 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003008:	4604      	mov	r4, r0
 800300a:	6838      	ldr	r0, [r7, #0]
 800300c:	f000 fad4 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003010:	4603      	mov	r3, r0
 8003012:	4619      	mov	r1, r3
 8003014:	4620      	mov	r0, r4
 8003016:	f7ff ffd9 	bl	8002fcc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 800301a:	462b      	mov	r3, r5
      }
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bdb0      	pop	{r4, r5, r7, pc}

08003024 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	7138      	strb	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800302e:	6838      	ldr	r0, [r7, #0]
 8003030:	f000 fad8 	bl	80035e4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8003034:	4603      	mov	r3, r0
 8003036:	4618      	mov	r0, r3
 8003038:	f001 fabf 	bl	80045ba <_ZNRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>
 800303c:	4603      	mov	r3, r0
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8003046:	b590      	push	{r4, r7, lr}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	7138      	strb	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8003050:	6838      	ldr	r0, [r7, #0]
 8003052:	f000 fabc 	bl	80035ce <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8003056:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8003058:	4619      	mov	r1, r3
 800305a:	4620      	mov	r0, r4
 800305c:	f7ff ffe2 	bl	8003024 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 8003060:	4603      	mov	r3, r0
    }
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}

0800306a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800306a:	b590      	push	{r4, r7, lr}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 faa0 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003078:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800307a:	4619      	mov	r1, r3
 800307c:	4620      	mov	r0, r4
 800307e:	f7ff ffe2 	bl	8003046 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8003082:	4603      	mov	r3, r0
    }
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bd90      	pop	{r4, r7, pc}

0800308c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fa8f 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800309a:	4603      	mov	r3, r0
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ffe4 	bl	800306a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80030a2:	4603      	mov	r3, r0
	}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 80030ac:	b5b0      	push	{r4, r5, r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f001 fa52 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80030bc:	4604      	mov	r4, r0
 80030be:	6838      	ldr	r0, [r7, #0]
 80030c0:	f000 fa7a 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80030c4:	4603      	mov	r3, r0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ffe0 	bl	800308c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESM_EEDcOT0_>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4619      	mov	r1, r3
 80030d0:	4620      	mov	r0, r4
 80030d2:	f001 fa7d 	bl	80045d0 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRiEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 80030d6:	462b      	mov	r3, r5
      }
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bdb0      	pop	{r4, r5, r7, pc}

080030e0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80030e0:	b5b0      	push	{r4, r5, r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f001 fa38 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80030f0:	4604      	mov	r4, r0
 80030f2:	6838      	ldr	r0, [r7, #0]
 80030f4:	f000 fa60 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80030f8:	4603      	mov	r3, r0
 80030fa:	4619      	mov	r1, r3
 80030fc:	4620      	mov	r0, r4
 80030fe:	f7ff ffd5 	bl	80030ac <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 8003102:	462b      	mov	r3, r5
      }
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bdb0      	pop	{r4, r5, r7, pc}

0800310c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800310c:	b5b0      	push	{r4, r5, r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f001 fa22 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800311c:	4604      	mov	r4, r0
 800311e:	6838      	ldr	r0, [r7, #0]
 8003120:	f000 fa4a 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003124:	4603      	mov	r3, r0
 8003126:	4619      	mov	r1, r3
 8003128:	4620      	mov	r0, r4
 800312a:	f7ff ffd9 	bl	80030e0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 800312e:	462b      	mov	r3, r5
      }
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bdb0      	pop	{r4, r5, r7, pc}

08003138 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	7138      	strb	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8003142:	6838      	ldr	r0, [r7, #0]
 8003144:	f000 fa59 	bl	80035fa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8003148:	4603      	mov	r3, r0
 800314a:	4618      	mov	r0, r3
 800314c:	f001 fa57 	bl	80045fe <_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>
 8003150:	4603      	mov	r3, r0
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800315a:	b590      	push	{r4, r7, lr}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	7138      	strb	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8003164:	6838      	ldr	r0, [r7, #0]
 8003166:	f000 fa3d 	bl	80035e4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800316a:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800316c:	4619      	mov	r1, r3
 800316e:	4620      	mov	r0, r4
 8003170:	f7ff ffe2 	bl	8003138 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 8003174:	4603      	mov	r3, r0
    }
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bd90      	pop	{r4, r7, pc}

0800317e <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800317e:	b590      	push	{r4, r7, lr}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	7138      	strb	r0, [r7, #4]
 8003186:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8003188:	6838      	ldr	r0, [r7, #0]
 800318a:	f000 fa20 	bl	80035ce <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800318e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8003190:	4619      	mov	r1, r3
 8003192:	4620      	mov	r0, r4
 8003194:	f7ff ffe1 	bl	800315a <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8003198:	4603      	mov	r3, r0
    }
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd90      	pop	{r4, r7, pc}

080031a2 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80031a2:	b590      	push	{r4, r7, lr}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fa04 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80031b0:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 80031b2:	4619      	mov	r1, r3
 80031b4:	4620      	mov	r0, r4
 80031b6:	f7ff ffe2 	bl	800317e <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80031ba:	4603      	mov	r3, r0
    }
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd90      	pop	{r4, r7, pc}

080031c4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f9f3 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80031d2:	4603      	mov	r3, r0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ffe4 	bl	80031a2 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80031da:	4603      	mov	r3, r0
	}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 80031e4:	b5b0      	push	{r4, r5, r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f001 f9b6 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80031f4:	4604      	mov	r4, r0
 80031f6:	6838      	ldr	r0, [r7, #0]
 80031f8:	f000 f9de 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80031fc:	4603      	mov	r3, r0
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ffe0 	bl	80031c4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESM_EEDcOT0_>
 8003204:	4603      	mov	r3, r0
 8003206:	4619      	mov	r1, r3
 8003208:	4620      	mov	r0, r4
 800320a:	f001 fa03 	bl	8004614 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRfEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 800320e:	462b      	mov	r3, r5
      }
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bdb0      	pop	{r4, r5, r7, pc}

08003218 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8003218:	b5b0      	push	{r4, r5, r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f001 f99c 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003228:	4604      	mov	r4, r0
 800322a:	6838      	ldr	r0, [r7, #0]
 800322c:	f000 f9c4 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003230:	4603      	mov	r3, r0
 8003232:	4619      	mov	r1, r3
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff ffd5 	bl	80031e4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 800323a:	462b      	mov	r3, r5
      }
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bdb0      	pop	{r4, r5, r7, pc}

08003244 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8003244:	b5b0      	push	{r4, r5, r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f001 f986 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003254:	4604      	mov	r4, r0
 8003256:	6838      	ldr	r0, [r7, #0]
 8003258:	f000 f9ae 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800325c:	4603      	mov	r3, r0
 800325e:	4619      	mov	r1, r3
 8003260:	4620      	mov	r0, r4
 8003262:	f7ff ffd9 	bl	8003218 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 8003266:	462b      	mov	r3, r5
      }
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bdb0      	pop	{r4, r5, r7, pc}

08003270 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	7138      	strb	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800327a:	6838      	ldr	r0, [r7, #0]
 800327c:	f000 f9c8 	bl	8003610 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8003280:	4603      	mov	r3, r0
 8003282:	4618      	mov	r0, r3
 8003284:	f001 f9dd 	bl	8004642 <_ZNRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>
 8003288:	4603      	mov	r3, r0
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8003292:	b590      	push	{r4, r7, lr}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	7138      	strb	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800329c:	6838      	ldr	r0, [r7, #0]
 800329e:	f000 f9ac 	bl	80035fa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 80032a2:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80032a4:	4619      	mov	r1, r3
 80032a6:	4620      	mov	r0, r4
 80032a8:	f7ff ffe2 	bl	8003270 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 80032ac:	4603      	mov	r3, r0
    }
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd90      	pop	{r4, r7, pc}

080032b6 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80032b6:	b590      	push	{r4, r7, lr}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	7138      	strb	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80032c0:	6838      	ldr	r0, [r7, #0]
 80032c2:	f000 f98f 	bl	80035e4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 80032c6:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80032c8:	4619      	mov	r1, r3
 80032ca:	4620      	mov	r0, r4
 80032cc:	f7ff ffe1 	bl	8003292 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80032d0:	4603      	mov	r3, r0
    }
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd90      	pop	{r4, r7, pc}

080032da <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80032da:	b590      	push	{r4, r7, lr}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	7138      	strb	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80032e4:	6838      	ldr	r0, [r7, #0]
 80032e6:	f000 f972 	bl	80035ce <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 80032ea:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80032ec:	4619      	mov	r1, r3
 80032ee:	4620      	mov	r0, r4
 80032f0:	f7ff ffe1 	bl	80032b6 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80032f4:	4603      	mov	r3, r0
    }
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd90      	pop	{r4, r7, pc}

080032fe <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80032fe:	b590      	push	{r4, r7, lr}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f956 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800330c:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800330e:	4619      	mov	r1, r3
 8003310:	4620      	mov	r0, r4
 8003312:	f7ff ffe2 	bl	80032da <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8003316:	4603      	mov	r3, r0
    }
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bd90      	pop	{r4, r7, pc}

08003320 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f945 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800332e:	4603      	mov	r3, r0
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ffe4 	bl	80032fe <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8003336:	4603      	mov	r3, r0
	}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8003340:	b5b0      	push	{r4, r5, r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f001 f908 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003350:	4604      	mov	r4, r0
 8003352:	6838      	ldr	r0, [r7, #0]
 8003354:	f000 f930 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003358:	4603      	mov	r3, r0
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ffe0 	bl	8003320 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESM_EEDcOT0_>
 8003360:	4603      	mov	r3, r0
 8003362:	4619      	mov	r1, r3
 8003364:	4620      	mov	r0, r4
 8003366:	f001 f979 	bl	800465c <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRS8_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 800336a:	462b      	mov	r3, r5
      }
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bdb0      	pop	{r4, r5, r7, pc}

08003374 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8003374:	b5b0      	push	{r4, r5, r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f001 f8ee 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003384:	4604      	mov	r4, r0
 8003386:	6838      	ldr	r0, [r7, #0]
 8003388:	f000 f916 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800338c:	4603      	mov	r3, r0
 800338e:	4619      	mov	r1, r3
 8003390:	4620      	mov	r0, r4
 8003392:	f7ff ffd5 	bl	8003340 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 8003396:	462b      	mov	r3, r5
      }
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bdb0      	pop	{r4, r5, r7, pc}

080033a0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80033a0:	b5b0      	push	{r4, r5, r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f001 f8d8 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80033b0:	4604      	mov	r4, r0
 80033b2:	6838      	ldr	r0, [r7, #0]
 80033b4:	f000 f900 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4619      	mov	r1, r3
 80033bc:	4620      	mov	r0, r4
 80033be:	f7ff ffd9 	bl	8003374 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 80033c2:	462b      	mov	r3, r5
      }
 80033c4:	4618      	mov	r0, r3
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bdb0      	pop	{r4, r5, r7, pc}

080033cc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE28__element_by_index_or_cookieILj4ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f8ef 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80033da:	4603      	mov	r3, r0
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe ffc8 	bl	8002372 <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80033e2:	4603      	mov	r3, r0
	}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 80033ec:	b5b0      	push	{r4, r5, r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f001 f8b2 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80033fc:	4604      	mov	r4, r0
 80033fe:	6838      	ldr	r0, [r7, #0]
 8003400:	f000 f8da 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003404:	4603      	mov	r3, r0
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ffe0 	bl	80033cc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE28__element_by_index_or_cookieILj4ESM_EEDcOT0_>
 800340c:	4603      	mov	r3, r0
 800340e:	4619      	mov	r1, r3
 8003410:	4620      	mov	r0, r4
 8003412:	f001 f93a 	bl	800468a <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSA_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 8003416:	462b      	mov	r3, r5
      }
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bdb0      	pop	{r4, r5, r7, pc}

08003420 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8003420:	b5b0      	push	{r4, r5, r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f001 f898 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003430:	4604      	mov	r4, r0
 8003432:	6838      	ldr	r0, [r7, #0]
 8003434:	f000 f8c0 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003438:	4603      	mov	r3, r0
 800343a:	4619      	mov	r1, r3
 800343c:	4620      	mov	r0, r4
 800343e:	f7ff ffd5 	bl	80033ec <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 8003442:	462b      	mov	r3, r5
      }
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bdb0      	pop	{r4, r5, r7, pc}

0800344c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800344c:	b5b0      	push	{r4, r5, r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f001 f882 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800345c:	4604      	mov	r4, r0
 800345e:	6838      	ldr	r0, [r7, #0]
 8003460:	f000 f8aa 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003464:	4603      	mov	r3, r0
 8003466:	4619      	mov	r1, r3
 8003468:	4620      	mov	r0, r4
 800346a:	f7ff ffd9 	bl	8003420 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 800346e:	462b      	mov	r3, r5
      }
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bdb0      	pop	{r4, r5, r7, pc}

08003478 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE28__element_by_index_or_cookieILj5ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f899 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003486:	4603      	mov	r3, r0
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff f80a 	bl	80024a2 <_ZNSt8__detail9__variant5__getILj5ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 800348e:	4603      	mov	r3, r0
	}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8003498:	b5b0      	push	{r4, r5, r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f001 f85c 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80034a8:	4604      	mov	r4, r0
 80034aa:	6838      	ldr	r0, [r7, #0]
 80034ac:	f000 f884 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff ffe0 	bl	8003478 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE28__element_by_index_or_cookieILj5ESM_EEDcOT0_>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4619      	mov	r1, r3
 80034bc:	4620      	mov	r0, r4
 80034be:	f001 f8fb 	bl	80046b8 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSC_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 80034c2:	462b      	mov	r3, r5
      }
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bdb0      	pop	{r4, r5, r7, pc}

080034cc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80034cc:	b5b0      	push	{r4, r5, r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f001 f842 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80034dc:	4604      	mov	r4, r0
 80034de:	6838      	ldr	r0, [r7, #0]
 80034e0:	f000 f86a 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4619      	mov	r1, r3
 80034e8:	4620      	mov	r0, r4
 80034ea:	f7ff ffd5 	bl	8003498 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 80034ee:	462b      	mov	r3, r5
      }
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bdb0      	pop	{r4, r5, r7, pc}

080034f8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80034f8:	b5b0      	push	{r4, r5, r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f001 f82c 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003508:	4604      	mov	r4, r0
 800350a:	6838      	ldr	r0, [r7, #0]
 800350c:	f000 f854 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003510:	4603      	mov	r3, r0
 8003512:	4619      	mov	r1, r3
 8003514:	4620      	mov	r0, r4
 8003516:	f7ff ffd9 	bl	80034cc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 800351a:	462b      	mov	r3, r5
      }
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bdb0      	pop	{r4, r5, r7, pc}

08003524 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifS9_SB_SD_EEEJLj6EEE9_M_accessIJEEERKSN_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f8d5 	bl	80046e6 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifS9_SB_SD_EEEJEE9_M_accessEv>
 800353c:	4603      	mov	r3, r0
	}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSt7variantIJbifS8_SA_SC_EEEEDcOT1_DpOT2_>:

  template<bool __use_index,
	   bool __same_return_types,
	   typename _Visitor, typename... _Variants>
    constexpr decltype(auto)
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 8003548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]

      using _Result_type = typename std::conditional_t<__use_index,
	__detail::__variant::__variant_idx_cookie,
	_Deduced_type>::type;

      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSt7variantIJbifS8_SA_SC_EEEEDcOT1_DpOT2_+0x48>)
 8003554:	60fb      	str	r3, [r7, #12]
	__same_return_types,
	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;

      auto __func_ptr = __vtable._M_access(__variants.index()...);
 8003556:	6838      	ldr	r0, [r7, #0]
 8003558:	f7fe fa0a 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 800355c:	4603      	mov	r3, r0
 800355e:	4619      	mov	r1, r3
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff ffdf 	bl	8003524 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifS9_SB_SD_EEEJLj6EEE9_M_accessIJEEERKSN_jDpT_>
 8003566:	4603      	mov	r3, r0
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 800356c:	68bc      	ldr	r4, [r7, #8]
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f001 f8c4 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003574:	4605      	mov	r5, r0
 8003576:	6838      	ldr	r0, [r7, #0]
 8003578:	f000 f81e 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800357c:	4603      	mov	r3, r0
 800357e:	4619      	mov	r1, r3
 8003580:	4628      	mov	r0, r5
 8003582:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 8003584:	4633      	mov	r3, r6
    }
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800358e:	bf00      	nop
 8003590:	0801d1e4 	.word	0x0801d1e4

08003594 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEv>:
      constexpr void _M_reset_impl()
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	__do_visit([](auto&& __this_mem) mutable
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff fcbe 	bl	8002f1e <_ZSt14__variant_castIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callERNSt8__detail9__variant16_Variant_storageILb0EJbifS5_S7_S9_EEEEDcOT0_>
 80035a2:	4602      	mov	r2, r0
 80035a4:	f107 030c 	add.w	r3, r7, #12
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ffcc 	bl	8003548 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSt7variantIJbifS8_SA_SC_EEEEDcOT1_DpOT2_>
      }
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP8VariableP13Function_callEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_ZNRSt8__detail9__variant14_UninitializedIP8VariableLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <_ZNRSt8__detail9__variant14_UninitializedIP13Function_callLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <_ZSt7forwardIRSt7variantIJP17Primal_expressionP10ExpressionEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10ExpressionEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_ZNRSt8__detail9__variant14_UninitializedIP10ExpressionLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <_ZNRSt8__detail9__variant14_UninitializedIP17Primal_expressionLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <_ZNSaIP16Power_expressionED1Ev>:
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f001 f80c 	bl	8004712 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionED1Ev>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
	if (__p)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	4618      	mov	r0, r3
 800371e:	f001 f803 	bl	8004728 <_ZNSt16allocator_traitsISaIP16Power_expressionEE10deallocateERS2_PS1_j>
      }
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <_ZSt8_DestroyIPP16Power_expressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003734:	6839      	ldr	r1, [r7, #0]
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f001 f805 	bl	8004746 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP16Power_expressionEEvT_S5_>
    }
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <_ZNSaI13mult_operatorED1Ev>:
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f001 f805 	bl	800475c <_ZN9__gnu_cxx13new_allocatorI13mult_operatorED1Ev>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
	if (__p)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fffc 	bl	8004772 <_ZNSt16allocator_traitsISaI13mult_operatorEE10deallocateERS1_PS0_j>
      }
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <_ZSt8_DestroyIP13mult_operatorEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fffe 	bl	8004790 <_ZNSt12_Destroy_auxILb1EE9__destroyIP13mult_operatorEEvT_S4_>
    }
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <_ZNSaIP19Multiply_expressionED1Ev>:
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fffe 	bl	80047a6 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionED1Ev>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
	if (__p)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fff5 	bl	80047bc <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE10deallocateERS2_PS1_j>
      }
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <_ZSt8_DestroyIPP19Multiply_expressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80037e4:	6839      	ldr	r1, [r7, #0]
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fff7 	bl	80047da <_ZNSt12_Destroy_auxILb1EE9__destroyIPP19Multiply_expressionEEvT_S5_>
    }
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <_ZNSaI12sum_operatorED1Ev>:
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fff7 	bl	80047f0 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorED1Ev>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
	if (__p)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	4618      	mov	r0, r3
 8003826:	f000 ffee 	bl	8004806 <_ZNSt16allocator_traitsISaI12sum_operatorEE10deallocateERS1_PS0_j>
      }
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <_ZSt8_DestroyIP12sum_operatorEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800383c:	6839      	ldr	r1, [r7, #0]
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fff0 	bl	8004824 <_ZNSt12_Destroy_auxILb1EE9__destroyIP12sum_operatorEEvT_S4_>
    }
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <_ZNSaIP18Compare_expressionED1Ev>:
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fff0 	bl	800483a <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionED1Ev>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
	if (__p)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 ffe7 	bl	8004850 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE10deallocateERS2_PS1_j>
      }
 8003882:	bf00      	nop
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <_ZSt8_DestroyIPP18Compare_expressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003894:	6839      	ldr	r1, [r7, #0]
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 ffe9 	bl	800486e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18Compare_expressionEEvT_S5_>
    }
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <_ZNSaIP14And_expressionED1Ev>:
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 ffe9 	bl	8004884 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionED1Ev>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
	if (__p)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 ffe0 	bl	800489a <_ZNSt16allocator_traitsISaIP14And_expressionEE10deallocateERS2_PS1_j>
      }
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <_ZSt8_DestroyIPP14And_expressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80038ec:	6839      	ldr	r1, [r7, #0]
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 ffe2 	bl	80048b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14And_expressionEEvT_S5_>
    }
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80038fc:	b5b0      	push	{r4, r5, r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8003906:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8003908:	1d3b      	adds	r3, r7, #4
 800390a:	4618      	mov	r0, r3
 800390c:	f000 ffef 	bl	80048ee <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8003910:	462a      	mov	r2, r5
 8003912:	6839      	ldr	r1, [r7, #0]
 8003914:	4620      	mov	r0, r4
 8003916:	f000 fff4 	bl	8004902 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800391a:	4603      	mov	r3, r0
    }
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bdb0      	pop	{r4, r5, r7, pc}

08003924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8003932:	68b8      	ldr	r0, [r7, #8]
 8003934:	f000 ffcb 	bl	80048ce <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	429a      	cmp	r2, r3
 8003944:	d001      	beq.n	800394a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x28>
 800394a:	2300      	movs	r3, #0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8003950:	4817      	ldr	r0, [pc, #92]	; (80039b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8c>)
 8003952:	f015 feba 	bl	80196ca <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	68b8      	ldr	r0, [r7, #8]
 800395a:	f7ff ffcf 	bl	80038fc <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800395e:	4603      	mov	r3, r0
 8003960:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b0f      	cmp	r3, #15
 8003966:	d910      	bls.n	800398a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	2200      	movs	r2, #0
 800396e:	4619      	mov	r1, r3
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f015 fecd 	bl	8019710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003976:	4603      	mov	r3, r0
 8003978:	4619      	mov	r1, r3
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f015 feba 	bl	80196f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	4619      	mov	r1, r3
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f015 febb 	bl	8019700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f015 feb4 	bl	80196f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8003990:	4603      	mov	r3, r0
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	4618      	mov	r0, r3
 8003998:	f015 ff0a 	bl	80197b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	4619      	mov	r1, r3
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f015 feaf 	bl	8019704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	0801cc04 	.word	0x0801cc04

080039b4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003a00:	6839      	ldr	r1, [r7, #0]
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 ff8c 	bl	8004920 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS7_>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
      { }
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8003a64:	6839      	ldr	r1, [r7, #0]
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 ff66 	bl	8004938 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 8003a6c:	6839      	ldr	r1, [r7, #0]
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 ff77 	bl	8004962 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003a9a:	b590      	push	{r4, r7, lr}
 8003a9c:	b08d      	sub	sp, #52	; 0x34
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 ff6b 	bl	8004986 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEE13_M_const_castEv>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8003ab4:	69bc      	ldr	r4, [r7, #24]
 8003ab6:	68b8      	ldr	r0, [r7, #8]
 8003ab8:	f000 ff76 	bl	80049a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8003abc:	4603      	mov	r3, r0
 8003abe:	429c      	cmp	r4, r3
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d030      	beq.n	8003b2e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 8003acc:	68b8      	ldr	r0, [r7, #8]
 8003ace:	f000 ff77 	bl	80049c0 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>
 8003ad2:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d013      	beq.n	8003b00 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8003ad8:	68bc      	ldr	r4, [r7, #8]
 8003ada:	68b8      	ldr	r0, [r7, #8]
 8003adc:	f000 ff7c 	bl	80049d8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 ff83 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003aea:	4603      	mov	r3, r0
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	4619      	mov	r1, r3
 8003af0:	4620      	mov	r0, r4
 8003af2:	f000 ff89 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 8003b00:	2300      	movs	r3, #0
	  if (size() > 0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00c      	beq.n	8003b20 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	68b8      	ldr	r0, [r7, #8]
 8003b0c:	f000 ff64 	bl	80049d8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8003b10:	4602      	mov	r2, r0
 8003b12:	f107 031c 	add.w	r3, r7, #28
 8003b16:	4619      	mov	r1, r3
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 ff8a 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003b1e:	e0db      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 ff99 	bl	8004a5e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8003b2c:	e0d4      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8003b2e:	68bc      	ldr	r4, [r7, #8]
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 ff5c 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6839      	ldr	r1, [r7, #0]
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f000 ff62 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d057      	beq.n	8003bfa <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8003b4e:	69bc      	ldr	r4, [r7, #24]
 8003b50:	68b8      	ldr	r0, [r7, #8]
 8003b52:	f001 f809 	bl	8004b68 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8003b56:	4603      	mov	r3, r0
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429c      	cmp	r4, r3
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00d      	beq.n	8003b84 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8003b68:	68b8      	ldr	r0, [r7, #8]
 8003b6a:	f000 fffd 	bl	8004b68 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8003b6e:	4604      	mov	r4, r0
 8003b70:	68b8      	ldr	r0, [r7, #8]
 8003b72:	f000 fff9 	bl	8004b68 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8003b76:	4603      	mov	r3, r0
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 ffff 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003b82:	e0a9      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8003b84:	68bc      	ldr	r4, [r7, #8]
 8003b86:	f107 0314 	add.w	r3, r7, #20
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 f811 	bl	8004bb2 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>
 8003b90:	4603      	mov	r3, r0
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 ff2b 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f000 ff31 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01f      	beq.n	8003bec <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff ff3b 	bl	8003a2a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	623b      	str	r3, [r7, #32]
 8003bc8:	f107 0214 	add.w	r2, r7, #20
 8003bcc:	f107 0320 	add.w	r3, r7, #32
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 ff2d 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003bd8:	e07e      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8003bda:	f107 0218 	add.w	r2, r7, #24
 8003bde:	f107 0318 	add.w	r3, r7, #24
 8003be2:	4619      	mov	r1, r3
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 ffcb 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003bea:	e075      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 ff33 	bl	8004a5e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8003bf8:	e06e      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8003bfa:	68bc      	ldr	r4, [r7, #8]
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fef6 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c04:	4603      	mov	r3, r0
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f000 fefc 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d056      	beq.n	8003cc4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8003c1a:	69bc      	ldr	r4, [r7, #24]
 8003c1c:	68b8      	ldr	r0, [r7, #8]
 8003c1e:	f000 fedb 	bl	80049d8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8003c22:	4603      	mov	r3, r0
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	429c      	cmp	r4, r3
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00c      	beq.n	8003c4e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8003c34:	2300      	movs	r3, #0
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
 8003c38:	68b8      	ldr	r0, [r7, #8]
 8003c3a:	f000 fecd 	bl	80049d8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c44:	4619      	mov	r1, r3
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fef3 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003c4c:	e044      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8003c4e:	68bc      	ldr	r4, [r7, #8]
 8003c50:	f107 0310 	add.w	r3, r7, #16
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 ffbd 	bl	8004bd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEppEv>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fec6 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c64:	4603      	mov	r3, r0
 8003c66:	461a      	mov	r2, r3
 8003c68:	6839      	ldr	r1, [r7, #0]
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f000 fecc 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01f      	beq.n	8003cb6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fed6 	bl	8003a2a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c92:	f107 0218 	add.w	r2, r7, #24
 8003c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fec8 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003ca2:	e019      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8003ca4:	f107 0210 	add.w	r2, r7, #16
 8003ca8:	f107 0310 	add.w	r3, r7, #16
 8003cac:	4619      	mov	r1, r3
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 ff66 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003cb4:	e010      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fece 	bl	8004a5e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8003cc2:	e009      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003ccc:	f107 0318 	add.w	r3, r7, #24
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 ff8f 	bl	8004bf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	3734      	adds	r7, #52	; 0x34
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd90      	pop	{r4, r7, pc}

08003ce0 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4618      	mov	r0, r3
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003d0e:	b5b0      	push	{r4, r5, r7, lr}
 8003d10:	b088      	sub	sp, #32
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d11a      	bne.n	8003d58 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fe40 	bl	80049a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d013      	beq.n	8003d58 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8003d30:	68fc      	ldr	r4, [r7, #12]
 8003d32:	f107 0310 	add.w	r3, r7, #16
 8003d36:	6839      	ldr	r1, [r7, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ffd1 	bl	8003ce0 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 8003d3e:	4605      	mov	r5, r0
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fe55 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f000 fe5b 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 8003d5c:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8003d5e:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8003d60:	6838      	ldr	r0, [r7, #0]
 8003d62:	f7ff ffc9 	bl	8003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003d66:	4603      	mov	r3, r0
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d6c:	f000 ff59 	bl	8004c22 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 8003d70:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8003d76:	7ff8      	ldrb	r0, [r7, #31]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	69b9      	ldr	r1, [r7, #24]
 8003d7c:	f015 fc46 	bl	801960c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8003d8a:	f107 0314 	add.w	r3, r7, #20
 8003d8e:	69b9      	ldr	r1, [r7, #24]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fe73 	bl	8003a7c <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8003d96:	697b      	ldr	r3, [r7, #20]
      }
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3720      	adds	r7, #32
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bdb0      	pop	{r4, r5, r7, pc}

08003da0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSB_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 ff2b 	bl	8004c4a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSD_>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
      { }
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8003e50:	6839      	ldr	r1, [r7, #0]
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 ff05 	bl	8004c62 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>
	_M_put_node(__p);
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 ff16 	bl	8004c8c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>
      }
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003e86:	b590      	push	{r4, r7, lr}
 8003e88:	b08d      	sub	sp, #52	; 0x34
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 ff0a 	bl	8004cb0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE13_M_const_castEv>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8003ea0:	69bc      	ldr	r4, [r7, #24]
 8003ea2:	68b8      	ldr	r0, [r7, #8]
 8003ea4:	f000 ff15 	bl	8004cd2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	429c      	cmp	r4, r3
 8003eac:	bf0c      	ite	eq
 8003eae:	2301      	moveq	r3, #1
 8003eb0:	2300      	movne	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d030      	beq.n	8003f1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x94>
	  if (size() > 0
 8003eb8:	68b8      	ldr	r0, [r7, #8]
 8003eba:	f000 ff16 	bl	8004cea <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>
 8003ebe:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d013      	beq.n	8003eec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x66>
 8003ec4:	68bc      	ldr	r4, [r7, #8]
 8003ec6:	68b8      	ldr	r0, [r7, #8]
 8003ec8:	f000 ff1b 	bl	8004d02 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 ff22 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	4619      	mov	r1, r3
 8003edc:	4620      	mov	r0, r4
 8003ede:	f000 ff28 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x66>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x68>
 8003eec:	2300      	movs	r3, #0
	  if (size() > 0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00c      	beq.n	8003f0c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x86>
	    return _Res(0, _M_rightmost());
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	68b8      	ldr	r0, [r7, #8]
 8003ef8:	f000 ff03 	bl	8004d02 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 8003efc:	4602      	mov	r2, r0
 8003efe:	f107 031c 	add.w	r3, r7, #28
 8003f02:	4619      	mov	r1, r3
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fd94 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003f0a:	e0db      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 ff1c 	bl	8004d50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 8003f18:	e0d4      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8003f1a:	68bc      	ldr	r4, [r7, #8]
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fefb 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	6839      	ldr	r1, [r7, #0]
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f000 ff01 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d057      	beq.n	8003fe6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x160>
	  iterator __before = __pos;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8003f3a:	69bc      	ldr	r4, [r7, #24]
 8003f3c:	68b8      	ldr	r0, [r7, #8]
 8003f3e:	f000 ff8c 	bl	8004e5a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 8003f42:	4603      	mov	r3, r0
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	429c      	cmp	r4, r3
 8003f48:	bf0c      	ite	eq
 8003f4a:	2301      	moveq	r3, #1
 8003f4c:	2300      	movne	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8003f54:	68b8      	ldr	r0, [r7, #8]
 8003f56:	f000 ff80 	bl	8004e5a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	68b8      	ldr	r0, [r7, #8]
 8003f5e:	f000 ff7c 	bl	8004e5a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 8003f62:	4603      	mov	r3, r0
 8003f64:	461a      	mov	r2, r3
 8003f66:	4621      	mov	r1, r4
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fe09 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003f6e:	e0a9      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8003f70:	68bc      	ldr	r4, [r7, #8]
 8003f72:	f107 0314 	add.w	r3, r7, #20
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 ff7b 	bl	8004e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 feca 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003f86:	4603      	mov	r3, r0
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f000 fed0 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01f      	beq.n	8003fd8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff ff3b 	bl	8003e16 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	bf0c      	ite	eq
 8003fa6:	2301      	moveq	r3, #1
 8003fa8:	2300      	movne	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x140>
		return _Res(0, __before._M_node);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	623b      	str	r3, [r7, #32]
 8003fb4:	f107 0214 	add.w	r2, r7, #20
 8003fb8:	f107 0320 	add.w	r3, r7, #32
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fd37 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003fc4:	e07e      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8003fc6:	f107 0218 	add.w	r2, r7, #24
 8003fca:	f107 0318 	add.w	r3, r7, #24
 8003fce:	4619      	mov	r1, r3
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fdd5 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003fd6:	e075      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 feb6 	bl	8004d50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 8003fe4:	e06e      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8003fe6:	68bc      	ldr	r4, [r7, #8]
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fe95 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f000 fe9b 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d056      	beq.n	80040b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x22a>
	  iterator __after = __pos;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8004006:	69bc      	ldr	r4, [r7, #24]
 8004008:	68b8      	ldr	r0, [r7, #8]
 800400a:	f000 fe7a 	bl	8004d02 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 800400e:	4603      	mov	r3, r0
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	429c      	cmp	r4, r3
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00c      	beq.n	800403a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x1b4>
	    return _Res(0, _M_rightmost());
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
 8004024:	68b8      	ldr	r0, [r7, #8]
 8004026:	f000 fe6c 	bl	8004d02 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 800402a:	4602      	mov	r2, r0
 800402c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004030:	4619      	mov	r1, r3
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fcfd 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8004038:	e044      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800403a:	68bc      	ldr	r4, [r7, #8]
 800403c:	f107 0310 	add.w	r3, r7, #16
 8004040:	4618      	mov	r0, r3
 8004042:	f000 ff27 	bl	8004e94 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEppEv>
 8004046:	4603      	mov	r3, r0
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fe65 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004050:	4603      	mov	r3, r0
 8004052:	461a      	mov	r2, r3
 8004054:	6839      	ldr	r1, [r7, #0]
 8004056:	4620      	mov	r0, r4
 8004058:	f000 fe6b 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01f      	beq.n	80040a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fed6 	bl	8003e16 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x20a>
		return _Res(0, __pos._M_node);
 800407a:	2300      	movs	r3, #0
 800407c:	62bb      	str	r3, [r7, #40]	; 0x28
 800407e:	f107 0218 	add.w	r2, r7, #24
 8004082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004086:	4619      	mov	r1, r3
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 fcd2 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800408e:	e019      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8004090:	f107 0210 	add.w	r2, r7, #16
 8004094:	f107 0310 	add.w	r3, r7, #16
 8004098:	4619      	mov	r1, r3
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fd70 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80040a0:	e010      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fe51 	bl	8004d50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 80040ae:	e009      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	return _Res(__pos._M_node, 0);
 80040b0:	2300      	movs	r3, #0
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040b4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80040b8:	f107 0318 	add.w	r3, r7, #24
 80040bc:	4619      	mov	r1, r3
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 fd99 	bl	8004bf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	3734      	adds	r7, #52	; 0x34
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd90      	pop	{r4, r7, pc}

080040cc <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>:
      operator()(const _Pair& __x) const
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4618      	mov	r0, r3
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80040fa:	b5b0      	push	{r4, r5, r7, lr}
 80040fc:	b088      	sub	sp, #32
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d11a      	bne.n	8004144 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fddf 	bl	8004cd2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8004114:	4602      	mov	r2, r0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4293      	cmp	r3, r2
 800411a:	d013      	beq.n	8004144 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800411c:	68fc      	ldr	r4, [r7, #12]
 800411e:	f107 0310 	add.w	r3, r7, #16
 8004122:	6839      	ldr	r1, [r7, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff ffd1 	bl	80040cc <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 800412a:	4605      	mov	r5, r0
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fdf4 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	4629      	mov	r1, r5
 8004138:	4620      	mov	r0, r4
 800413a:	f000 fdfa 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4e>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x50>
 8004148:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800414a:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800414c:	6838      	ldr	r0, [r7, #0]
 800414e:	f7ff ffc9 	bl	80040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8004152:	4603      	mov	r3, r0
 8004154:	4619      	mov	r1, r3
 8004156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004158:	f000 fead 	bl	8004eb6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>
 800415c:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8004162:	7ff8      	ldrb	r0, [r7, #31]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	69b9      	ldr	r1, [r7, #24]
 8004168:	f015 fa50 	bl	801960c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8004176:	f107 0314 	add.w	r3, r7, #20
 800417a:	69b9      	ldr	r1, [r7, #24]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fe73 	bl	8003e68 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8004182:	697b      	ldr	r3, [r7, #20]
      }
 8004184:	4618      	mov	r0, r3
 8004186:	3720      	adds	r7, #32
 8004188:	46bd      	mov	sp, r7
 800418a:	bdb0      	pop	{r4, r5, r7, pc}

0800418c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4618      	mov	r0, r3
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80041d8:	6839      	ldr	r1, [r7, #0]
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fe7f 	bl	8004ede <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS7_>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fe65 	bl	8004ef6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 800422c:	6839      	ldr	r1, [r7, #0]
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fe76 	bl	8004f20 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800425a:	b590      	push	{r4, r7, lr}
 800425c:	b08d      	sub	sp, #52	; 0x34
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8004268:	1d3b      	adds	r3, r7, #4
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fe6a 	bl	8004f44 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEE13_M_const_castEv>
 8004270:	4603      	mov	r3, r0
 8004272:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8004274:	69bc      	ldr	r4, [r7, #24]
 8004276:	68b8      	ldr	r0, [r7, #8]
 8004278:	f000 fe75 	bl	8004f66 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 800427c:	4603      	mov	r3, r0
 800427e:	429c      	cmp	r4, r3
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d030      	beq.n	80042ee <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 800428c:	68b8      	ldr	r0, [r7, #8]
 800428e:	f000 fe76 	bl	8004f7e <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>
 8004292:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8004294:	2b00      	cmp	r3, #0
 8004296:	d013      	beq.n	80042c0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8004298:	68bc      	ldr	r4, [r7, #8]
 800429a:	68b8      	ldr	r0, [r7, #8]
 800429c:	f000 fe7b 	bl	8004f96 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80042a0:	4603      	mov	r3, r0
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fe82 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80042aa:	4603      	mov	r3, r0
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	4619      	mov	r1, r3
 80042b0:	4620      	mov	r0, r4
 80042b2:	f000 fba9 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 80042c0:	2300      	movs	r3, #0
	  if (size() > 0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00c      	beq.n	80042e0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
 80042ca:	68b8      	ldr	r0, [r7, #8]
 80042cc:	f000 fe63 	bl	8004f96 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80042d0:	4602      	mov	r2, r0
 80042d2:	f107 031c 	add.w	r3, r7, #28
 80042d6:	4619      	mov	r1, r3
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fbaa 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80042de:	e0db      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fe6d 	bl	8004fc6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 80042ec:	e0d4      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80042ee:	68bc      	ldr	r4, [r7, #8]
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fe5b 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	6839      	ldr	r1, [r7, #0]
 80042fe:	4620      	mov	r0, r4
 8004300:	f000 fb82 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d057      	beq.n	80043ba <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800430e:	69bc      	ldr	r4, [r7, #24]
 8004310:	68b8      	ldr	r0, [r7, #8]
 8004312:	f000 fedd 	bl	80050d0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8004316:	4603      	mov	r3, r0
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	429c      	cmp	r4, r3
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00d      	beq.n	8004344 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8004328:	68b8      	ldr	r0, [r7, #8]
 800432a:	f000 fed1 	bl	80050d0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 800432e:	4604      	mov	r4, r0
 8004330:	68b8      	ldr	r0, [r7, #8]
 8004332:	f000 fecd 	bl	80050d0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8004336:	4603      	mov	r3, r0
 8004338:	461a      	mov	r2, r3
 800433a:	4621      	mov	r1, r4
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fc1f 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8004342:	e0a9      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8004344:	68bc      	ldr	r4, [r7, #8]
 8004346:	f107 0314 	add.w	r3, r7, #20
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fecc 	bl	80050e8 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>
 8004350:	4603      	mov	r3, r0
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fe2a 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800435a:	4603      	mov	r3, r0
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	4619      	mov	r1, r3
 8004360:	4620      	mov	r0, r4
 8004362:	f000 fb51 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01f      	beq.n	80043ac <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ff3b 	bl	80041ea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8004384:	2300      	movs	r3, #0
 8004386:	623b      	str	r3, [r7, #32]
 8004388:	f107 0214 	add.w	r2, r7, #20
 800438c:	f107 0320 	add.w	r3, r7, #32
 8004390:	4619      	mov	r1, r3
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fb4d 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8004398:	e07e      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800439a:	f107 0218 	add.w	r2, r7, #24
 800439e:	f107 0318 	add.w	r3, r7, #24
 80043a2:	4619      	mov	r1, r3
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fbeb 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80043aa:	e075      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fe07 	bl	8004fc6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 80043b8:	e06e      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80043ba:	68bc      	ldr	r4, [r7, #8]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fdf5 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80043c4:	4603      	mov	r3, r0
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	4619      	mov	r1, r3
 80043ca:	4620      	mov	r0, r4
 80043cc:	f000 fb1c 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d056      	beq.n	8004484 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80043da:	69bc      	ldr	r4, [r7, #24]
 80043dc:	68b8      	ldr	r0, [r7, #8]
 80043de:	f000 fdda 	bl	8004f96 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80043e2:	4603      	mov	r3, r0
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	429c      	cmp	r4, r3
 80043e8:	bf0c      	ite	eq
 80043ea:	2301      	moveq	r3, #1
 80043ec:	2300      	movne	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00c      	beq.n	800440e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 80043f4:	2300      	movs	r3, #0
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
 80043f8:	68b8      	ldr	r0, [r7, #8]
 80043fa:	f000 fdcc 	bl	8004f96 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80043fe:	4602      	mov	r2, r0
 8004400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004404:	4619      	mov	r1, r3
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fb13 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800440c:	e044      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800440e:	68bc      	ldr	r4, [r7, #8]
 8004410:	f107 0310 	add.w	r3, r7, #16
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fe78 	bl	800510a <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEppEv>
 800441a:	4603      	mov	r3, r0
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fdc5 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004424:	4603      	mov	r3, r0
 8004426:	461a      	mov	r2, r3
 8004428:	6839      	ldr	r1, [r7, #0]
 800442a:	4620      	mov	r0, r4
 800442c:	f000 faec 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01f      	beq.n	8004476 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fed6 	bl	80041ea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 800444e:	2300      	movs	r3, #0
 8004450:	62bb      	str	r3, [r7, #40]	; 0x28
 8004452:	f107 0218 	add.w	r2, r7, #24
 8004456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800445a:	4619      	mov	r1, r3
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fae8 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8004462:	e019      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8004464:	f107 0210 	add.w	r2, r7, #16
 8004468:	f107 0310 	add.w	r3, r7, #16
 800446c:	4619      	mov	r1, r3
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fb86 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8004474:	e010      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fda2 	bl	8004fc6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8004482:	e009      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8004484:	2300      	movs	r3, #0
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004488:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800448c:	f107 0318 	add.w	r3, r7, #24
 8004490:	4619      	mov	r1, r3
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fbaf 	bl	8004bf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	3734      	adds	r7, #52	; 0x34
 800449c:	46bd      	mov	sp, r7
 800449e:	bd90      	pop	{r4, r7, pc}

080044a0 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>:
      operator()(const _Pair& __x) const
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80044ce:	b5b0      	push	{r4, r5, r7, lr}
 80044d0:	b088      	sub	sp, #32
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
 80044da:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d11a      	bne.n	8004518 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fd3f 	bl	8004f66 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 80044e8:	4602      	mov	r2, r0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d013      	beq.n	8004518 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80044f0:	68fc      	ldr	r4, [r7, #12]
 80044f2:	f107 0310 	add.w	r3, r7, #16
 80044f6:	6839      	ldr	r1, [r7, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff ffd1 	bl	80044a0 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 80044fe:	4605      	mov	r5, r0
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fd54 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004506:	4603      	mov	r3, r0
 8004508:	461a      	mov	r2, r3
 800450a:	4629      	mov	r1, r5
 800450c:	4620      	mov	r0, r4
 800450e:	f000 fa7b 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 800451c:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800451e:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8004520:	6838      	ldr	r0, [r7, #0]
 8004522:	f7ff ffc9 	bl	80044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004526:	4603      	mov	r3, r0
 8004528:	4619      	mov	r1, r3
 800452a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800452c:	f000 fdfe 	bl	800512c <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 8004530:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8004536:	7ff8      	ldrb	r0, [r7, #31]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	69b9      	ldr	r1, [r7, #24]
 800453c:	f015 f866 	bl	801960c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800454a:	f107 0314 	add.w	r3, r7, #20
 800454e:	69b9      	ldr	r1, [r7, #24]
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fe73 	bl	800423c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8004556:	697b      	ldr	r3, [r7, #20]
      }
 8004558:	4618      	mov	r0, r3
 800455a:	3720      	adds	r7, #32
 800455c:	46bd      	mov	sp, r7
 800455e:	bdb0      	pop	{r4, r5, r7, pc}

08004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <_ZNRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRbEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 800458c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f8b0 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800459c:	4604      	mov	r4, r0
 800459e:	6838      	ldr	r0, [r7, #0]
 80045a0:	f000 fdd8 	bl	8005154 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80045a4:	4603      	mov	r3, r0
 80045a6:	461a      	mov	r2, r3
 80045a8:	4621      	mov	r1, r4
 80045aa:	4628      	mov	r0, r5
 80045ac:	f000 fddd 	bl	800516a <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRbEESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 80045b0:	4633      	mov	r3, r6
    }
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045ba <_ZNRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRiEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 80045d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f88e 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80045e0:	4604      	mov	r4, r0
 80045e2:	6838      	ldr	r0, [r7, #0]
 80045e4:	f000 fdd8 	bl	8005198 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80045e8:	4603      	mov	r3, r0
 80045ea:	461a      	mov	r2, r3
 80045ec:	4621      	mov	r1, r4
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 fddd 	bl	80051ae <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRiEESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 80045f4:	4633      	mov	r3, r6
    }
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045fe <_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRfEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8004614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f86c 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8004624:	4604      	mov	r4, r0
 8004626:	6838      	ldr	r0, [r7, #0]
 8004628:	f000 fdd8 	bl	80051dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	4621      	mov	r1, r4
 8004632:	4628      	mov	r0, r5
 8004634:	f000 fddd 	bl	80051f2 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRfEESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8004638:	4633      	mov	r3, r6
    }
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004642 <_ZNRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>:
      _Type& _M_get() & noexcept
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
      { return *_M_storage._M_ptr(); }
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fde7 	bl	8005220 <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>
 8004652:	4603      	mov	r3, r0
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRS8_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800465c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f848 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800466c:	4604      	mov	r4, r0
 800466e:	6838      	ldr	r0, [r7, #0]
 8004670:	f000 fde2 	bl	8005238 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8004674:	4603      	mov	r3, r0
 8004676:	461a      	mov	r2, r3
 8004678:	4621      	mov	r1, r4
 800467a:	4628      	mov	r0, r5
 800467c:	f000 fde7 	bl	800524e <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRS9_EESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8004680:	4633      	mov	r3, r6
    }
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800468a <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSA_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800468a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f831 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800469a:	4604      	mov	r4, r0
 800469c:	6838      	ldr	r0, [r7, #0]
 800469e:	f000 fded 	bl	800527c <_ZSt7forwardIRP8VariableEOT_RNSt16remove_referenceIS3_E4typeE>
 80046a2:	4603      	mov	r3, r0
 80046a4:	461a      	mov	r2, r3
 80046a6:	4621      	mov	r1, r4
 80046a8:	4628      	mov	r0, r5
 80046aa:	f000 fdf2 	bl	8005292 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSB_EESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 80046ae:	4633      	mov	r3, r6
    }
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046b8 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSC_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 80046b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f81a 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80046c8:	4604      	mov	r4, r0
 80046ca:	6838      	ldr	r0, [r7, #0]
 80046cc:	f000 fdf8 	bl	80052c0 <_ZSt7forwardIRP13Function_callEOT_RNSt16remove_referenceIS3_E4typeE>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	4621      	mov	r1, r4
 80046d6:	4628      	mov	r0, r5
 80046d8:	f000 fdfd 	bl	80052d6 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSD_EESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 80046dc:	4633      	mov	r3, r6
    }
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046e6 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifS9_SB_SD_EEEJEE9_M_accessEv>:
      _M_access() const
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionED1Ev>:
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <_ZNSt16allocator_traitsISaIP16Power_expressionEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 fde3 	bl	8005304 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE10deallocateEPS2_j>
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP16Power_expressionEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <_ZN9__gnu_cxx13new_allocatorI13mult_operatorED1Ev>:
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <_ZNSt16allocator_traitsISaI13mult_operatorEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fdca 	bl	800531c <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE10deallocateEPS1_j>
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <_ZNSt12_Destroy_auxILb1EE9__destroyIP13mult_operatorEEvT_S4_>:
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionED1Ev>:
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fdb1 	bl	8005334 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE10deallocateEPS2_j>
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <_ZNSt12_Destroy_auxILb1EE9__destroyIPP19Multiply_expressionEEvT_S5_>:
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorED1Ev>:
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <_ZNSt16allocator_traitsISaI12sum_operatorEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fd98 	bl	800534c <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE10deallocateEPS1_j>
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <_ZNSt12_Destroy_auxILb1EE9__destroyIP12sum_operatorEEvT_S4_>:
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionED1Ev>:
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fd7f 	bl	8005364 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE10deallocateEPS2_j>
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18Compare_expressionEEvT_S5_>:
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionED1Ev>:
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <_ZNSt16allocator_traitsISaIP14And_expressionEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fd66 	bl	800537c <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE10deallocateEPS2_j>
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14And_expressionEEvT_S5_>:
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1ad3      	subs	r3, r2, r3
    }
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004938:	b590      	push	{r4, r7, lr}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fd26 	bl	8005394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8004948:	4604      	mov	r4, r0
 800494a:	6838      	ldr	r0, [r7, #0]
 800494c:	f000 fd2d 	bl	80053aa <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 8004950:	4603      	mov	r3, r0
 8004952:	4619      	mov	r1, r3
 8004954:	4620      	mov	r0, r4
 8004956:	f000 fd36 	bl	80053c6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE7destroyIS4_EEvRS6_PT_>
      }
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	bd90      	pop	{r4, r7, pc}

08004962 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fd11 	bl	8005394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8004972:	4603      	mov	r3, r0
 8004974:	2201      	movs	r2, #1
 8004976:	6839      	ldr	r1, [r7, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fd31 	bl	80053e0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE10deallocateERS6_PS5_j>
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	f107 030c 	add.w	r3, r7, #12
 8004996:	4611      	mov	r1, r2
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff f86f 	bl	8003a7c <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3310      	adds	r3, #16
 80049e4:	4618      	mov	r0, r3
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fd00 	bl	80053fe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80049fe:	4603      	mov	r3, r0
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <_ZNKSt4lessIcEclERKcS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	781a      	ldrb	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	bf34      	ite	cc
 8004a20:	2301      	movcc	r3, #1
 8004a22:	2300      	movcs	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fcec 	bl	8005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	605a      	str	r2, [r3, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004a5e:	b590      	push	{r4, r7, lr}
 8004a60:	b08b      	sub	sp, #44	; 0x2c
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8004a6a:	68b8      	ldr	r0, [r7, #8]
 8004a6c:	f7fe f824 	bl	8002ab8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8004a70:	4603      	mov	r3, r0
 8004a72:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8004a74:	68b8      	ldr	r0, [r7, #8]
 8004a76:	f7ff ff97 	bl	80049a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d020      	beq.n	8004acc <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004a8e:	68bc      	ldr	r4, [r7, #8]
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fcb3 	bl	80053fe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7ff ffb2 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fe ffc4 	bl	8003a42 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004aba:	4603      	mov	r3, r0
 8004abc:	e004      	b.n	8004ac8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fe ffb2 	bl	8003a2a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004aca:	e7db      	b.n	8004a84 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	f107 0310 	add.w	r3, r7, #16
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fe ffd1 	bl	8003a7c <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01d      	beq.n	8004b1e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8004ae2:	68b8      	ldr	r0, [r7, #8]
 8004ae4:	f000 fca9 	bl	800543a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	f107 021c 	add.w	r2, r7, #28
 8004af0:	f107 0310 	add.w	r3, r7, #16
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fcb0 	bl	800545c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc10token_typeEES6_>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8004b02:	f107 0214 	add.w	r2, r7, #20
 8004b06:	f107 0318 	add.w	r3, r7, #24
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fcb9 	bl	8005484 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>
 8004b12:	e025      	b.n	8004b60 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8004b14:	f107 0310 	add.w	r3, r7, #16
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f84a 	bl	8004bb2 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8004b1e:	68bc      	ldr	r4, [r7, #8]
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff ff64 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f7ff ff6a 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8004b3a:	f107 0214 	add.w	r2, r7, #20
 8004b3e:	f107 0318 	add.w	r3, r7, #24
 8004b42:	4619      	mov	r1, r3
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fc9d 	bl	8005484 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>
 8004b4a:	e009      	b.n	8004b60 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	623b      	str	r3, [r7, #32]
 8004b50:	f107 0220 	add.w	r2, r7, #32
 8004b54:	f107 0310 	add.w	r3, r7, #16
 8004b58:	4619      	mov	r1, r3
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f84b 	bl	8004bf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	372c      	adds	r7, #44	; 0x2c
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd90      	pop	{r4, r7, pc}

08004b68 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	330c      	adds	r3, #12
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004b8c:	68b8      	ldr	r0, [r7, #8]
 8004b8e:	f000 fc49 	bl	8005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004b92:	4603      	mov	r3, r0
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fc42 	bl	8005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	605a      	str	r2, [r3, #4]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f014 fd22 	bl	8019608 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	601a      	str	r2, [r3, #0]
	return *this;
 8004bca:	687b      	ldr	r3, [r7, #4]
      }
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f014 fcfe 	bl	80195e2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8004be6:	4602      	mov	r2, r0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	601a      	str	r2, [r3, #0]
	return *this;
 8004bec:	687b      	ldr	r3, [r7, #4]
      }
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8004c02:	68b8      	ldr	r0, [r7, #8]
 8004c04:	f000 fc0e 	bl	8005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	605a      	str	r2, [r3, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 8004c22:	b590      	push	{r4, r7, lr}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681c      	ldr	r4, [r3, #0]
 8004c30:	6838      	ldr	r0, [r7, #0]
 8004c32:	f7ff f861 	bl	8003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004c36:	4603      	mov	r3, r0
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f000 fc3b 	bl	80054b6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd90      	pop	{r4, r7, pc}

08004c4a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSD_>:
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004c62:	b590      	push	{r4, r7, lr}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fc39 	bl	80054e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8004c72:	4604      	mov	r4, r0
 8004c74:	6838      	ldr	r0, [r7, #0]
 8004c76:	f000 fc40 	bl	80054fa <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f000 fc49 	bl	8005516 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE7destroyISA_EEvRSC_PT_>
      }
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd90      	pop	{r4, r7, pc}

08004c8c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fc24 	bl	80054e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	6839      	ldr	r1, [r7, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fc44 	bl	8005530 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE10deallocateERSC_PSB_j>
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	f107 030c 	add.w	r3, r7, #12
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff f8d0 	bl	8003e68 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3310      	adds	r3, #16
 8004d0e:	4618      	mov	r0, r3
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fc13 	bl	800554e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	68b8      	ldr	r0, [r7, #8]
 8004d42:	f000 fc17 	bl	8005574 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 8004d46:	4603      	mov	r3, r0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b08b      	sub	sp, #44	; 0x2c
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8004d5c:	68b8      	ldr	r0, [r7, #8]
 8004d5e:	f7fd ff87 	bl	8002c70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8004d62:	4603      	mov	r3, r0
 8004d64:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8004d66:	68b8      	ldr	r0, [r7, #8]
 8004d68:	f7ff ffb3 	bl	8004cd2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d020      	beq.n	8004dbe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6e>
	  __y = __x;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004d80:	68bc      	ldr	r4, [r7, #8]
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fbe2 	bl	800554e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4620      	mov	r0, r4
 8004d92:	f7ff ffce 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004d96:	4603      	mov	r3, r0
 8004d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x60>
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff f841 	bl	8003e2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004dac:	4603      	mov	r3, r0
 8004dae:	e004      	b.n	8004dba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6a>
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff f82f 	bl	8003e16 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004db8:	4603      	mov	r3, r0
 8004dba:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004dbc:	e7db      	b.n	8004d76 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x26>
      iterator __j = iterator(__y);
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	f107 0310 	add.w	r3, r7, #16
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff f84e 	bl	8003e68 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01d      	beq.n	8004e10 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 8004dd4:	68b8      	ldr	r0, [r7, #8]
 8004dd6:	f000 fbdd 	bl	8005594 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	f107 021c 	add.w	r2, r7, #28
 8004de2:	f107 0310 	add.w	r3, r7, #16
 8004de6:	4611      	mov	r1, r2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fbe4 	bl	80055b6 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 8004df4:	f107 0214 	add.w	r2, r7, #20
 8004df8:	f107 0318 	add.w	r3, r7, #24
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fbed 	bl	80055de <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>
 8004e04:	e025      	b.n	8004e52 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 8004e06:	f107 0310 	add.w	r3, r7, #16
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 f831 	bl	8004e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8004e10:	68bc      	ldr	r4, [r7, #8]
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff ff80 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4620      	mov	r0, r4
 8004e22:	f7ff ff86 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 8004e2c:	f107 0214 	add.w	r2, r7, #20
 8004e30:	f107 0318 	add.w	r3, r7, #24
 8004e34:	4619      	mov	r1, r3
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fbd1 	bl	80055de <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>
 8004e3c:	e009      	b.n	8004e52 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	623b      	str	r3, [r7, #32]
 8004e42:	f107 0220 	add.w	r2, r7, #32
 8004e46:	f107 0310 	add.w	r3, r7, #16
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff fed2 	bl	8004bf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	372c      	adds	r7, #44	; 0x2c
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd90      	pop	{r4, r7, pc}

08004e5a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	330c      	adds	r3, #12
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f014 fbc2 	bl	8019608 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8004e84:	4602      	mov	r2, r0
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	601a      	str	r2, [r3, #0]
	return *this;
 8004e8a:	687b      	ldr	r3, [r7, #4]
      }
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f014 fb9e 	bl	80195e2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	601a      	str	r2, [r3, #0]
	return *this;
 8004eac:	687b      	ldr	r3, [r7, #4]
      }
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>:
	  operator()(_Arg&& __arg) const
 8004eb6:	b590      	push	{r4, r7, lr}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681c      	ldr	r4, [r3, #0]
 8004ec4:	6838      	ldr	r0, [r7, #0]
 8004ec6:	f7ff f90d 	bl	80040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f000 fb9e 	bl	8005610 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd90      	pop	{r4, r7, pc}

08004ede <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS7_>:
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004ef6:	b590      	push	{r4, r7, lr}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fb9c 	bl	800563e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8004f06:	4604      	mov	r4, r0
 8004f08:	6838      	ldr	r0, [r7, #0]
 8004f0a:	f000 fba3 	bl	8005654 <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4619      	mov	r1, r3
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 fbac 	bl	8005670 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE7destroyIS4_EEvRS6_PT_>
      }
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd90      	pop	{r4, r7, pc}

08004f20 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fb87 	bl	800563e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2201      	movs	r2, #1
 8004f34:	6839      	ldr	r1, [r7, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fba7 	bl	800568a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE10deallocateERS6_PS5_j>
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	f107 030c 	add.w	r3, r7, #12
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff f970 	bl	800423c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3310      	adds	r3, #16
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fb76 	bl	80056a8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004fc6:	b590      	push	{r4, r7, lr}
 8004fc8:	b08b      	sub	sp, #44	; 0x2c
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8004fd2:	68b8      	ldr	r0, [r7, #8]
 8004fd4:	f7fd ff28 	bl	8002e28 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8004fdc:	68b8      	ldr	r0, [r7, #8]
 8004fde:	f7ff ffc2 	bl	8004f66 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d020      	beq.n	8005034 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004ff6:	68bc      	ldr	r4, [r7, #8]
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fb54 	bl	80056a8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8005000:	4603      	mov	r3, r0
 8005002:	461a      	mov	r2, r3
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4620      	mov	r0, r4
 8005008:	f7ff fcfe 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8005012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005016:	2b00      	cmp	r3, #0
 8005018:	d005      	beq.n	8005026 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff f8f0 	bl	8004202 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8005022:	4603      	mov	r3, r0
 8005024:	e004      	b.n	8005030 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff f8de 	bl	80041ea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800502e:	4603      	mov	r3, r0
 8005030:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8005032:	e7db      	b.n	8004fec <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	f107 0310 	add.w	r3, r7, #16
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff f8fd 	bl	800423c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8005042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01d      	beq.n	8005086 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 800504a:	68b8      	ldr	r0, [r7, #8]
 800504c:	f000 fb3f 	bl	80056ce <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>
 8005050:	4603      	mov	r3, r0
 8005052:	61fb      	str	r3, [r7, #28]
 8005054:	f107 021c 	add.w	r2, r7, #28
 8005058:	f107 0310 	add.w	r3, r7, #16
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fb46 	bl	80056f0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEES6_>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d008      	beq.n	800507c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 800506a:	f107 0214 	add.w	r2, r7, #20
 800506e:	f107 0318 	add.w	r3, r7, #24
 8005072:	4619      	mov	r1, r3
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fb4f 	bl	8005718 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>
 800507a:	e025      	b.n	80050c8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 800507c:	f107 0310 	add.w	r3, r7, #16
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f831 	bl	80050e8 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8005086:	68bc      	ldr	r4, [r7, #8]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff ff8f 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005090:	4603      	mov	r3, r0
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4619      	mov	r1, r3
 8005096:	4620      	mov	r0, r4
 8005098:	f7ff fcb6 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d008      	beq.n	80050b4 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 80050a2:	f107 0214 	add.w	r2, r7, #20
 80050a6:	f107 0318 	add.w	r3, r7, #24
 80050aa:	4619      	mov	r1, r3
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 fb33 	bl	8005718 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>
 80050b2:	e009      	b.n	80050c8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 80050b4:	2300      	movs	r3, #0
 80050b6:	623b      	str	r3, [r7, #32]
 80050b8:	f107 0220 	add.w	r2, r7, #32
 80050bc:	f107 0310 	add.w	r3, r7, #16
 80050c0:	4619      	mov	r1, r3
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f7ff fd97 	bl	8004bf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	372c      	adds	r7, #44	; 0x2c
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd90      	pop	{r4, r7, pc}

080050d0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	330c      	adds	r3, #12
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f014 fa87 	bl	8019608 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80050fa:	4602      	mov	r2, r0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	601a      	str	r2, [r3, #0]
	return *this;
 8005100:	687b      	ldr	r3, [r7, #4]
      }
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f014 fa63 	bl	80195e2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800511c:	4602      	mov	r2, r0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	601a      	str	r2, [r3, #0]
	return *this;
 8005122:	687b      	ldr	r3, [r7, #4]
      }
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 800512c:	b590      	push	{r4, r7, lr}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681c      	ldr	r4, [r3, #0]
 800513a:	6838      	ldr	r0, [r7, #0]
 800513c:	f7ff f9bc 	bl	80044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005140:	4603      	mov	r3, r0
 8005142:	4619      	mov	r1, r3
 8005144:	4620      	mov	r0, r4
 8005146:	f000 fb00 	bl	800574a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 800514a:	4603      	mov	r3, r0
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	bd90      	pop	{r4, r7, pc}

08005154 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4618      	mov	r0, r3
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRbEESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800516a:	b5b0      	push	{r4, r5, r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	7338      	strb	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8005176:	68b8      	ldr	r0, [r7, #8]
 8005178:	f7ff fac0 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800517c:	4604      	mov	r4, r0
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff ffe8 	bl	8005154 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8005184:	4603      	mov	r3, r0
 8005186:	4619      	mov	r1, r3
 8005188:	4620      	mov	r0, r4
 800518a:	f000 faf5 	bl	8005778 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRbEENS0_16__variant_cookieESE_>
 800518e:	462b      	mov	r3, r5
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bdb0      	pop	{r4, r5, r7, pc}

08005198 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRiEESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80051ae:	b5b0      	push	{r4, r5, r7, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	7338      	strb	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80051ba:	68b8      	ldr	r0, [r7, #8]
 80051bc:	f7ff fa9e 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80051c0:	4604      	mov	r4, r0
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff ffe8 	bl	8005198 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80051c8:	4603      	mov	r3, r0
 80051ca:	4619      	mov	r1, r3
 80051cc:	4620      	mov	r0, r4
 80051ce:	f000 fae4 	bl	800579a <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRiEENS0_16__variant_cookieESE_>
 80051d2:	462b      	mov	r3, r5
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bdb0      	pop	{r4, r5, r7, pc}

080051dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRfEESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80051f2:	b5b0      	push	{r4, r5, r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	7338      	strb	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80051fe:	68b8      	ldr	r0, [r7, #8]
 8005200:	f7ff fa7c 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005204:	4604      	mov	r4, r0
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff ffe8 	bl	80051dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 800520c:	4603      	mov	r3, r0
 800520e:	4619      	mov	r1, r3
 8005210:	4620      	mov	r0, r4
 8005212:	f000 fad3 	bl	80057bc <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRfEENS0_16__variant_cookieESE_>
 8005216:	462b      	mov	r3, r5
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bdb0      	pop	{r4, r5, r7, pc}

08005220 <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fad8 	bl	80057de <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv>
 800522e:	4603      	mov	r3, r0
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRS9_EESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800524e:	b5b0      	push	{r4, r5, r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	7338      	strb	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800525a:	68b8      	ldr	r0, [r7, #8]
 800525c:	f7ff fa4e 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005260:	4604      	mov	r4, r0
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff ffe8 	bl	8005238 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8005268:	4603      	mov	r3, r0
 800526a:	4619      	mov	r1, r3
 800526c:	4620      	mov	r0, r4
 800526e:	f000 fac1 	bl	80057f4 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRS7_EENS0_16__variant_cookieESE_>
 8005272:	462b      	mov	r3, r5
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bdb0      	pop	{r4, r5, r7, pc}

0800527c <_ZSt7forwardIRP8VariableEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSB_EESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8005292:	b5b0      	push	{r4, r5, r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	7338      	strb	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800529e:	68b8      	ldr	r0, [r7, #8]
 80052a0:	f7ff fa2c 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80052a4:	4604      	mov	r4, r0
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff ffe8 	bl	800527c <_ZSt7forwardIRP8VariableEOT_RNSt16remove_referenceIS3_E4typeE>
 80052ac:	4603      	mov	r3, r0
 80052ae:	4619      	mov	r1, r3
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 fab0 	bl	8005816 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRS9_EENS0_16__variant_cookieESE_>
 80052b6:	462b      	mov	r3, r5
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bdb0      	pop	{r4, r5, r7, pc}

080052c0 <_ZSt7forwardIRP13Function_callEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSD_EESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80052d6:	b5b0      	push	{r4, r5, r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	7338      	strb	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80052e2:	68b8      	ldr	r0, [r7, #8]
 80052e4:	f7ff fa0a 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80052e8:	4604      	mov	r4, r0
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff ffe8 	bl	80052c0 <_ZSt7forwardIRP13Function_callEOT_RNSt16remove_referenceIS3_E4typeE>
 80052f0:	4603      	mov	r3, r0
 80052f2:	4619      	mov	r1, r3
 80052f4:	4620      	mov	r0, r4
 80052f6:	f000 fa9f 	bl	8005838 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRSB_EENS0_16__variant_cookieESE_>
 80052fa:	462b      	mov	r3, r5
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bdb0      	pop	{r4, r5, r7, pc}

08005304 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8005310:	68b8      	ldr	r0, [r7, #8]
 8005312:	f014 f90e 	bl	8019532 <_ZdlPv>
      }
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005328:	68b8      	ldr	r0, [r7, #8]
 800532a:	f014 f902 	bl	8019532 <_ZdlPv>
      }
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005340:	68b8      	ldr	r0, [r7, #8]
 8005342:	f014 f8f6 	bl	8019532 <_ZdlPv>
      }
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005358:	68b8      	ldr	r0, [r7, #8]
 800535a:	f014 f8ea 	bl	8019532 <_ZdlPv>
      }
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005370:	68b8      	ldr	r0, [r7, #8]
 8005372:	f014 f8de 	bl	8019532 <_ZdlPv>
      }
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005388:	68b8      	ldr	r0, [r7, #8]
 800538a:	f014 f8d2 	bl	8019532 <_ZdlPv>
      }
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>:
      _M_valptr()
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3310      	adds	r3, #16
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fa4f 	bl	800585a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>
 80053bc:	4603      	mov	r3, r0
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE7destroyIS4_EEvRS6_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa4d 	bl	8005872 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE7destroyIS5_EEvPT_>
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fa49 	bl	8005888 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE10deallocateEPS6_j>
 80053f6:	bf00      	nop
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fa4a 	bl	80058a0 <_ZNKSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 800540c:	4602      	mov	r2, r0
 800540e:	f107 030c 	add.w	r3, r7, #12
 8005412:	4611      	mov	r1, r2
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe fc63 	bl	8003ce0 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 800541a:	4603      	mov	r3, r0
      }
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	f107 030c 	add.w	r3, r7, #12
 800544a:	4611      	mov	r1, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f7fe fb15 	bl	8003a7c <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc10token_typeEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	bf0c      	ite	eq
 8005472:	2301      	moveq	r3, #1
 8005474:	2300      	movne	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005490:	68b8      	ldr	r0, [r7, #8]
 8005492:	f000 fa13 	bl	80058bc <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc10token_typeEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8005496:	4603      	mov	r3, r0
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff ffc0 	bl	8005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80054a4:	4603      	mov	r3, r0
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fa06 	bl	80058d2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>
 80054c6:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80054c8:	6838      	ldr	r0, [r7, #0]
 80054ca:	f7fe fc15 	bl	8003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 80054ce:	4603      	mov	r3, r0
 80054d0:	461a      	mov	r2, r3
 80054d2:	68f9      	ldr	r1, [r7, #12]
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa0d 	bl	80058f4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 80054da:	68fb      	ldr	r3, [r7, #12]
	}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>:
      _M_valptr()
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3310      	adds	r3, #16
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fa14 	bl	8005934 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>
 800550c:	4603      	mov	r3, r0
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE7destroyISA_EEvRSC_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8005516:	b580      	push	{r7, lr}
 8005518:	b082      	sub	sp, #8
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fa12 	bl	800594c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE7destroyISB_EEvPT_>
 8005528:	bf00      	nop
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 fa0f 	bl	8005964 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE10deallocateEPSC_j>
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>:
      _S_key(_Const_Link_type __x)
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fa10 	bl	800597c <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 800555c:	4602      	mov	r2, r0
 800555e:	f107 030c 	add.w	r3, r7, #12
 8005562:	4611      	mov	r1, r2
 8005564:	4618      	mov	r0, r3
 8005566:	f7fe fdb1 	bl	80040cc <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 800556a:	4603      	mov	r3, r0
      }
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f014 fa97 	bl	8019ab4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8005586:	4603      	mov	r3, r0
 8005588:	0fdb      	lsrs	r3, r3, #31
 800558a:	b2db      	uxtb	r3, r3
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	f107 030c 	add.w	r3, r7, #12
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe fc5e 	bl	8003e68 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	bf0c      	ite	eq
 80055cc:	2301      	moveq	r3, #1
 80055ce:	2300      	movne	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	4618      	mov	r0, r3
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80055ea:	68b8      	ldr	r0, [r7, #8]
 80055ec:	f000 f9d4 	bl	8005998 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEOT_RNSt16remove_referenceISE_E4typeE>
 80055f0:	4603      	mov	r3, r0
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff ff13 	bl	8005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80055fe:	4603      	mov	r3, r0
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f9c7 	bl	80059ae <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>
 8005620:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8005622:	6838      	ldr	r0, [r7, #0]
 8005624:	f7fe fd5e 	bl	80040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	68f9      	ldr	r1, [r7, #12]
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f9ce 	bl	80059d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>
	  return __tmp;
 8005634:	68fb      	ldr	r3, [r7, #12]
	}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>:
      _M_valptr()
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3310      	adds	r3, #16
 8005660:	4618      	mov	r0, r3
 8005662:	f000 f9d5 	bl	8005a10 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>
 8005666:	4603      	mov	r3, r0
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f9d3 	bl	8005a28 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE7destroyIS5_EEvPT_>
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	68b9      	ldr	r1, [r7, #8]
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 f9cf 	bl	8005a3e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE10deallocateEPS6_j>
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f9d0 	bl	8005a56 <_ZNKSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 80056b6:	4602      	mov	r2, r0
 80056b8:	f107 030c 	add.w	r3, r7, #12
 80056bc:	4611      	mov	r1, r2
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe feee 	bl	80044a0 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 80056c4:	4603      	mov	r3, r0
      }
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	f107 030c 	add.w	r3, r7, #12
 80056de:	4611      	mov	r1, r2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fe fdab 	bl	800423c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	bf0c      	ite	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	2300      	movne	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005724:	68b8      	ldr	r0, [r7, #8]
 8005726:	f000 f9a4 	bl	8005a72 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800572a:	4603      	mov	r3, r0
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff fe76 	bl	8005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8005738:	4603      	mov	r3, r0
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	605a      	str	r2, [r3, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f997 	bl	8005a88 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>
 800575a:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800575c:	6838      	ldr	r0, [r7, #0]
 800575e:	f7fe feab 	bl	80044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005762:	4603      	mov	r3, r0
 8005764:	461a      	mov	r2, r3
 8005766:	68f9      	ldr	r1, [r7, #12]
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f99e 	bl	8005aaa <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 800576e:	68fb      	ldr	r3, [r7, #12]
	}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRbEENS0_16__variant_cookieESE_>:
	__do_visit([](auto&& __this_mem) mutable
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 8005782:	6838      	ldr	r0, [r7, #0]
 8005784:	f000 f9b1 	bl	8005aea <_ZSt11__addressofIbEPT_RS0_>
 8005788:	4603      	mov	r3, r0
 800578a:	4618      	mov	r0, r3
 800578c:	f000 f9b8 	bl	8005b00 <_ZSt8_DestroyIbEvPT_>
	    return {};
 8005790:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 8005792:	4618      	mov	r0, r3
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	bd90      	pop	{r4, r7, pc}

0800579a <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRiEENS0_16__variant_cookieESE_>:
 800579a:	b590      	push	{r4, r7, lr}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80057a4:	6838      	ldr	r0, [r7, #0]
 80057a6:	f000 f9b5 	bl	8005b14 <_ZSt11__addressofIiEPT_RS0_>
 80057aa:	4603      	mov	r3, r0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 f9bc 	bl	8005b2a <_ZSt8_DestroyIiEvPT_>
	    return {};
 80057b2:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd90      	pop	{r4, r7, pc}

080057bc <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRfEENS0_16__variant_cookieESE_>:
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80057c6:	6838      	ldr	r0, [r7, #0]
 80057c8:	f000 f9b9 	bl	8005b3e <_ZSt11__addressofIfEPT_RS0_>
 80057cc:	4603      	mov	r3, r0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 f9c0 	bl	8005b54 <_ZSt8_DestroyIfEvPT_>
	    return {};
 80057d4:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd90      	pop	{r4, r7, pc}

080057de <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv>:
      _M_addr() noexcept
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRS7_EENS0_16__variant_cookieESE_>:
 80057f4:	b590      	push	{r4, r7, lr}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80057fe:	6838      	ldr	r0, [r7, #0]
 8005800:	f000 f9b2 	bl	8005b68 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8005804:	4603      	mov	r3, r0
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f9b9 	bl	8005b7e <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	    return {};
 800580c:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 800580e:	4618      	mov	r0, r3
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	bd90      	pop	{r4, r7, pc}

08005816 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRS9_EENS0_16__variant_cookieESE_>:
 8005816:	b590      	push	{r4, r7, lr}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 8005820:	6838      	ldr	r0, [r7, #0]
 8005822:	f000 f9b7 	bl	8005b94 <_ZSt11__addressofIP8VariableEPT_RS2_>
 8005826:	4603      	mov	r3, r0
 8005828:	4618      	mov	r0, r3
 800582a:	f000 f9be 	bl	8005baa <_ZSt8_DestroyIP8VariableEvPT_>
	    return {};
 800582e:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	bd90      	pop	{r4, r7, pc}

08005838 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRSB_EENS0_16__variant_cookieESE_>:
 8005838:	b590      	push	{r4, r7, lr}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 8005842:	6838      	ldr	r0, [r7, #0]
 8005844:	f000 f9bb 	bl	8005bbe <_ZSt11__addressofIP13Function_callEPT_RS2_>
 8005848:	4603      	mov	r3, r0
 800584a:	4618      	mov	r0, r3
 800584c:	f000 f9c2 	bl	8005bd4 <_ZSt8_DestroyIP13Function_callEvPT_>
	    return {};
 8005850:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	bd90      	pop	{r4, r7, pc}

0800585a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>:
      _M_ptr() noexcept
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f9c0 	bl	8005be8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>
 8005868:	4603      	mov	r3, r0
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE7destroyIS5_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005894:	68b8      	ldr	r0, [r7, #8]
 8005896:	f013 fe4c 	bl	8019532 <_ZdlPv>
      }
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <_ZNKSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>:
      _M_valptr() const
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3310      	adds	r3, #16
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 f9a6 	bl	8005bfe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>
 80058b2:	4603      	mov	r3, r0
 80058b4:	4618      	mov	r0, r3
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc10token_typeEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff fd5a 	bl	8005394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2101      	movs	r1, #1
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 f996 	bl	8005c16 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE8allocateERS6_j>
 80058ea:	4603      	mov	r3, r0
 80058ec:	4618      	mov	r0, r3
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80058f4:	b5b0      	push	{r4, r5, r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4619      	mov	r1, r3
 8005904:	2014      	movs	r0, #20
 8005906:	f7fb fb69 	bl	8000fdc <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7ff fd42 	bl	8005394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8005910:	4604      	mov	r4, r0
 8005912:	68b8      	ldr	r0, [r7, #8]
 8005914:	f7ff fd49 	bl	80053aa <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 8005918:	4605      	mov	r5, r0
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fe f9ec 	bl	8003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	4629      	mov	r1, r5
 8005926:	4620      	mov	r0, r4
 8005928:	f000 f984 	bl	8005c34 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bdb0      	pop	{r4, r5, r7, pc}

08005934 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>:
      _M_ptr() noexcept
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f98c 	bl	8005c5a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>
 8005942:	4603      	mov	r3, r0
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE7destroyISB_EEvPT_>:
	destroy(_Up* __p)
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005956:	6838      	ldr	r0, [r7, #0]
 8005958:	f7fb fb99 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE10deallocateEPSC_j>:
      deallocate(pointer __p, size_type)
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005970:	68b8      	ldr	r0, [r7, #8]
 8005972:	f013 fdde 	bl	8019532 <_ZdlPv>
      }
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>:
      _M_valptr() const
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3310      	adds	r3, #16
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f971 	bl	8005c70 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>
 800598e:	4603      	mov	r3, r0
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>:
      _M_get_node()
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff fd94 	bl	80054e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 80059bc:	4603      	mov	r3, r0
 80059be:	2101      	movs	r1, #1
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 f961 	bl	8005c88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE8allocateERSC_j>
 80059c6:	4603      	mov	r3, r0
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80059d0:	b5b0      	push	{r4, r5, r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4619      	mov	r1, r3
 80059e0:	202c      	movs	r0, #44	; 0x2c
 80059e2:	f7fb fafb 	bl	8000fdc <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff fd7c 	bl	80054e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 80059ec:	4604      	mov	r4, r0
 80059ee:	68b8      	ldr	r0, [r7, #8]
 80059f0:	f7ff fd83 	bl	80054fa <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 80059f4:	4605      	mov	r5, r0
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fe fb74 	bl	80040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	4629      	mov	r1, r5
 8005a02:	4620      	mov	r0, r4
 8005a04:	f000 f94f 	bl	8005ca6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>
	}
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bdb0      	pop	{r4, r5, r7, pc}

08005a10 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>:
      _M_ptr() noexcept
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f957 	bl	8005ccc <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE7destroyIS5_EEvPT_>:
	destroy(_Up* __p)
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005a4a:	68b8      	ldr	r0, [r7, #8]
 8005a4c:	f013 fd71 	bl	8019532 <_ZdlPv>
      }
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <_ZNKSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>:
      _M_valptr() const
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3310      	adds	r3, #16
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 f93d 	bl	8005ce2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff fdd4 	bl	800563e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2101      	movs	r1, #1
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f92d 	bl	8005cfa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE8allocateERS6_j>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8005aaa:	b5b0      	push	{r4, r5, r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	2014      	movs	r0, #20
 8005abc:	f7fb fa8e 	bl	8000fdc <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff fdbc 	bl	800563e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	68b8      	ldr	r0, [r7, #8]
 8005aca:	f7ff fdc3 	bl	8005654 <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 8005ace:	4605      	mov	r5, r0
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7fe fcf1 	bl	80044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4629      	mov	r1, r5
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 f91b 	bl	8005d18 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 8005ae2:	bf00      	nop
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bdb0      	pop	{r4, r5, r7, pc}

08005aea <_ZSt11__addressofIbEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <_ZSt8_DestroyIbEvPT_>:
    _Destroy(_Tp* __pointer)
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <_ZSt11__addressofIiEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <_ZSt8_DestroyIiEvPT_>:
    _Destroy(_Tp* __pointer)
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f013 feaf 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005b8c:	bf00      	nop
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <_ZSt11__addressofIP8VariableEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <_ZSt8_DestroyIP8VariableEvPT_>:
    _Destroy(_Tp* __pointer)
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <_ZSt11__addressofIP13Function_callEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <_ZSt8_DestroyIP13Function_callEvPT_>:
    _Destroy(_Tp* __pointer)
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>:
      _M_addr() noexcept
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f899 	bl	8005d3e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005c20:	2200      	movs	r2, #0
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f895 	bl	8005d54 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7fe f859 	bl	8003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005c46:	4603      	mov	r3, r0
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f8a3 	bl	8005d98 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>:
      _M_addr() noexcept
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4618      	mov	r0, r3
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f8a5 	bl	8005dc8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005c92:	2200      	movs	r2, #0
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f8a1 	bl	8005dde <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fe fa16 	bl	80040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f8c2 	bl	8005e48 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE9constructISB_JRKSB_EEEvPT_DpOT0_>
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>:
      _M_addr() noexcept
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f8c4 	bl	8005e78 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b082      	sub	sp, #8
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005d04:	2200      	movs	r2, #0
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f8c0 	bl	8005e8e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7fe fbc7 	bl	80044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	68b9      	ldr	r1, [r7, #8]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f8ce 	bl	8005ed2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>
 8005d36:	bf00      	nop
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>:
      _M_addr() const noexcept
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f8cf 	bl	8005f04 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv>
 8005d66:	4602      	mov	r2, r0
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	bf8c      	ite	hi
 8005d6e:	2301      	movhi	r3, #1
 8005d70:	2300      	movls	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005d78:	f013 fca4 	bl	80196c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f013 fbd7 	bl	801953a <_Znwj>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	bf00      	nop
      }
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005d98:	b590      	push	{r4, r7, lr}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7fd ffa7 	bl	8003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005daa:	4604      	mov	r4, r0
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4619      	mov	r1, r3
 8005db0:	2002      	movs	r0, #2
 8005db2:	f7fb f913 	bl	8000fdc <_ZnwjPv>
 8005db6:	4603      	mov	r3, r0
 8005db8:	461a      	mov	r2, r3
 8005dba:	4623      	mov	r3, r4
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	8013      	strh	r3, [r2, #0]
 8005dc0:	bf00      	nop
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd90      	pop	{r4, r7, pc}

08005dc8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>:
      _M_addr() const noexcept
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 f898 	bl	8005f20 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv>
 8005df0:	4602      	mov	r2, r0
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4293      	cmp	r3, r2
 8005df6:	bf8c      	ite	hi
 8005df8:	2301      	movhi	r3, #1
 8005dfa:	2300      	movls	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005e02:	f013 fc5f 	bl	80196c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	222c      	movs	r2, #44	; 0x2c
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f013 fb93 	bl	801953a <_Znwj>
 8005e14:	4603      	mov	r3, r0
 8005e16:	bf00      	nop
      }
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1ERKS8_>:
      constexpr pair(const pair&) = default;
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	4611      	mov	r1, r2
 8005e30:	4618      	mov	r0, r3
 8005e32:	f013 fe87 	bl	8019b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	7e1a      	ldrb	r2, [r3, #24]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	761a      	strb	r2, [r3, #24]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE9constructISB_JRKSB_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005e48:	b590      	push	{r4, r7, lr}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7fe f945 	bl	80040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	201c      	movs	r0, #28
 8005e62:	f7fb f8bb 	bl	8000fdc <_ZnwjPv>
 8005e66:	4603      	mov	r3, r0
 8005e68:	4621      	mov	r1, r4
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff ffd8 	bl	8005e20 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1ERKS8_>
 8005e70:	bf00      	nop
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd90      	pop	{r4, r7, pc}

08005e78 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>:
      _M_addr() const noexcept
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 f84e 	bl	8005f3c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	bf8c      	ite	hi
 8005ea8:	2301      	movhi	r3, #1
 8005eaa:	2300      	movls	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005eb2:	f013 fc07 	bl	80196c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f013 fb3a 	bl	801953a <_Znwj>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	bf00      	nop
      }
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005ed2:	b590      	push	{r4, r7, lr}
 8005ed4:	b085      	sub	sp, #20
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7fe faea 	bl	80044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	2003      	movs	r0, #3
 8005eec:	f7fb f876 	bl	8000fdc <_ZnwjPv>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	8811      	ldrh	r1, [r2, #0]
 8005ef6:	7892      	ldrb	r2, [r2, #2]
 8005ef8:	8019      	strh	r1, [r3, #0]
 8005efa:	709a      	strb	r2, [r3, #2]
 8005efc:	bf00      	nop
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd90      	pop	{r4, r7, pc}

08005f04 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005f0c:	4b03      	ldr	r3, [pc, #12]	; (8005f1c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv+0x18>)
      }
 8005f0e:	4618      	mov	r0, r3
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	06666666 	.word	0x06666666

08005f20 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005f28:	4b03      	ldr	r3, [pc, #12]	; (8005f38 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv+0x18>)
      }
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	02e8ba2e 	.word	0x02e8ba2e

08005f3c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005f44:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv+0x18>)
      }
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	06666666 	.word	0x06666666

08005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fc f93d 	bl	80021e2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>:
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b082      	sub	sp, #8
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fc f880 	bl	8002082 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>:
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fb ffc6 	bl	8001f28 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <_Z41__static_initialization_and_destruction_0ii>:
 8005fa8:	b590      	push	{r4, r7, lr}
 8005faa:	b0e7      	sub	sp, #412	; 0x19c
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	1d3b      	adds	r3, r7, #4
 8005fb0:	6018      	str	r0, [r3, #0]
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	6019      	str	r1, [r3, #0]
 8005fb6:	1d3b      	adds	r3, r7, #4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	f040 819d 	bne.w	80062fa <_Z41__static_initialization_and_destruction_0ii+0x352>
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	f040 8196 	bne.w	80062fa <_Z41__static_initialization_and_destruction_0ii+0x352>
	{'^', TOKEN_POWER},
	{'%', TOKEN_MODULO},
	{'(', TOKEN_LEFT_BRACKET},
	{')', TOKEN_RIGHT_BRACKET},
	{'\0', TOKEN_END_OF_FILE},
};
 8005fce:	f107 0314 	add.w	r3, r7, #20
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	2322      	movs	r3, #34	; 0x22
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	2100      	movs	r1, #0
 8005fda:	f013 fe75 	bl	8019cc8 <memset>
 8005fde:	f107 0314 	add.w	r3, r7, #20
 8005fe2:	223a      	movs	r2, #58	; 0x3a
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	f107 0314 	add.w	r3, r7, #20
 8005fea:	2201      	movs	r2, #1
 8005fec:	705a      	strb	r2, [r3, #1]
 8005fee:	f107 0314 	add.w	r3, r7, #20
 8005ff2:	220a      	movs	r2, #10
 8005ff4:	709a      	strb	r2, [r3, #2]
 8005ff6:	f107 0314 	add.w	r3, r7, #20
 8005ffa:	220a      	movs	r2, #10
 8005ffc:	70da      	strb	r2, [r3, #3]
 8005ffe:	f107 0314 	add.w	r3, r7, #20
 8006002:	222c      	movs	r2, #44	; 0x2c
 8006004:	711a      	strb	r2, [r3, #4]
 8006006:	f107 0314 	add.w	r3, r7, #20
 800600a:	220c      	movs	r2, #12
 800600c:	715a      	strb	r2, [r3, #5]
 800600e:	f107 0314 	add.w	r3, r7, #20
 8006012:	222e      	movs	r2, #46	; 0x2e
 8006014:	719a      	strb	r2, [r3, #6]
 8006016:	f107 0314 	add.w	r3, r7, #20
 800601a:	220b      	movs	r2, #11
 800601c:	71da      	strb	r2, [r3, #7]
 800601e:	f107 0314 	add.w	r3, r7, #20
 8006022:	225b      	movs	r2, #91	; 0x5b
 8006024:	721a      	strb	r2, [r3, #8]
 8006026:	f107 0314 	add.w	r3, r7, #20
 800602a:	220d      	movs	r2, #13
 800602c:	725a      	strb	r2, [r3, #9]
 800602e:	f107 0314 	add.w	r3, r7, #20
 8006032:	225d      	movs	r2, #93	; 0x5d
 8006034:	729a      	strb	r2, [r3, #10]
 8006036:	f107 0314 	add.w	r3, r7, #20
 800603a:	220e      	movs	r2, #14
 800603c:	72da      	strb	r2, [r3, #11]
 800603e:	f107 0314 	add.w	r3, r7, #20
 8006042:	227c      	movs	r2, #124	; 0x7c
 8006044:	731a      	strb	r2, [r3, #12]
 8006046:	f107 0314 	add.w	r3, r7, #20
 800604a:	2215      	movs	r2, #21
 800604c:	735a      	strb	r2, [r3, #13]
 800604e:	f107 0314 	add.w	r3, r7, #20
 8006052:	2226      	movs	r2, #38	; 0x26
 8006054:	739a      	strb	r2, [r3, #14]
 8006056:	f107 0314 	add.w	r3, r7, #20
 800605a:	2216      	movs	r2, #22
 800605c:	73da      	strb	r2, [r3, #15]
 800605e:	f107 0314 	add.w	r3, r7, #20
 8006062:	222b      	movs	r2, #43	; 0x2b
 8006064:	741a      	strb	r2, [r3, #16]
 8006066:	f107 0314 	add.w	r3, r7, #20
 800606a:	221f      	movs	r2, #31
 800606c:	745a      	strb	r2, [r3, #17]
 800606e:	f107 0314 	add.w	r3, r7, #20
 8006072:	222d      	movs	r2, #45	; 0x2d
 8006074:	749a      	strb	r2, [r3, #18]
 8006076:	f107 0314 	add.w	r3, r7, #20
 800607a:	2220      	movs	r2, #32
 800607c:	74da      	strb	r2, [r3, #19]
 800607e:	f107 0314 	add.w	r3, r7, #20
 8006082:	222a      	movs	r2, #42	; 0x2a
 8006084:	751a      	strb	r2, [r3, #20]
 8006086:	f107 0314 	add.w	r3, r7, #20
 800608a:	2221      	movs	r2, #33	; 0x21
 800608c:	755a      	strb	r2, [r3, #21]
 800608e:	f107 0314 	add.w	r3, r7, #20
 8006092:	222f      	movs	r2, #47	; 0x2f
 8006094:	759a      	strb	r2, [r3, #22]
 8006096:	f107 0314 	add.w	r3, r7, #20
 800609a:	2222      	movs	r2, #34	; 0x22
 800609c:	75da      	strb	r2, [r3, #23]
 800609e:	f107 0314 	add.w	r3, r7, #20
 80060a2:	225e      	movs	r2, #94	; 0x5e
 80060a4:	761a      	strb	r2, [r3, #24]
 80060a6:	f107 0314 	add.w	r3, r7, #20
 80060aa:	2223      	movs	r2, #35	; 0x23
 80060ac:	765a      	strb	r2, [r3, #25]
 80060ae:	f107 0314 	add.w	r3, r7, #20
 80060b2:	2225      	movs	r2, #37	; 0x25
 80060b4:	769a      	strb	r2, [r3, #26]
 80060b6:	f107 0314 	add.w	r3, r7, #20
 80060ba:	2224      	movs	r2, #36	; 0x24
 80060bc:	76da      	strb	r2, [r3, #27]
 80060be:	f107 0314 	add.w	r3, r7, #20
 80060c2:	2228      	movs	r2, #40	; 0x28
 80060c4:	771a      	strb	r2, [r3, #28]
 80060c6:	f107 0314 	add.w	r3, r7, #20
 80060ca:	2226      	movs	r2, #38	; 0x26
 80060cc:	775a      	strb	r2, [r3, #29]
 80060ce:	f107 0314 	add.w	r3, r7, #20
 80060d2:	2229      	movs	r2, #41	; 0x29
 80060d4:	779a      	strb	r2, [r3, #30]
 80060d6:	f107 0314 	add.w	r3, r7, #20
 80060da:	2227      	movs	r2, #39	; 0x27
 80060dc:	77da      	strb	r2, [r3, #31]
 80060de:	f107 0314 	add.w	r3, r7, #20
 80060e2:	2225      	movs	r2, #37	; 0x25
 80060e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80060e8:	f107 030c 	add.w	r3, r7, #12
 80060ec:	f107 0214 	add.w	r2, r7, #20
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	f107 030c 	add.w	r3, r7, #12
 80060f6:	2211      	movs	r2, #17
 80060f8:	605a      	str	r2, [r3, #4]
 80060fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fb faf5 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8006104:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006108:	f107 020c 	add.w	r2, r7, #12
 800610c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	460b      	mov	r3, r1
 8006114:	ca06      	ldmia	r2, {r1, r2}
 8006116:	4885      	ldr	r0, [pc, #532]	; (800632c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006118:	f7fb fb01 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800611c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006120:	4618      	mov	r0, r3
 8006122:	f7fb faf0 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>

static const std::map<std::string, token_type> token_strings
{
	{"true", TOKEN_TRUE},
 8006126:	2305      	movs	r3, #5
 8006128:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
	{"if", TOKEN_IF},
	{"elseif", TOKEN_ELSEIF},
	{"else", TOKEN_ELSE},
	{"while", TOKEN_WHILE},
	{"end", TOKEN_END},
};
 800612c:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8006130:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006134:	497e      	ldr	r1, [pc, #504]	; (8006330 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8006136:	4618      	mov	r0, r3
 8006138:	f7fa ffb6 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 800613c:	2306      	movs	r3, #6
 800613e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8006142:	f207 1263 	addw	r2, r7, #355	; 0x163
 8006146:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800614a:	331c      	adds	r3, #28
 800614c:	4979      	ldr	r1, [pc, #484]	; (8006334 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800614e:	4618      	mov	r0, r3
 8006150:	f7fa ffd2 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8006154:	2307      	movs	r3, #7
 8006156:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 800615a:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800615e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006162:	3338      	adds	r3, #56	; 0x38
 8006164:	4974      	ldr	r1, [pc, #464]	; (8006338 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8006166:	4618      	mov	r0, r3
 8006168:	f7fa ffc6 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 800616c:	2308      	movs	r3, #8
 800616e:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8006172:	f207 1265 	addw	r2, r7, #357	; 0x165
 8006176:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800617a:	3354      	adds	r3, #84	; 0x54
 800617c:	496f      	ldr	r1, [pc, #444]	; (800633c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800617e:	4618      	mov	r0, r3
 8006180:	f7fa ff92 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8006184:	2309      	movs	r3, #9
 8006186:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800618a:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 800618e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006192:	3370      	adds	r3, #112	; 0x70
 8006194:	496a      	ldr	r1, [pc, #424]	; (8006340 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8006196:	4618      	mov	r0, r3
 8006198:	f7fa ffd6 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 800619c:	2310      	movs	r3, #16
 800619e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 80061a2:	f207 1267 	addw	r2, r7, #359	; 0x167
 80061a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061aa:	338c      	adds	r3, #140	; 0x8c
 80061ac:	4965      	ldr	r1, [pc, #404]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fa fff2 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 80061b4:	2311      	movs	r3, #17
 80061b6:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 80061ba:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80061be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061c2:	33a8      	adds	r3, #168	; 0xa8
 80061c4:	4960      	ldr	r1, [pc, #384]	; (8006348 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fa ffbe 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 80061cc:	2312      	movs	r3, #18
 80061ce:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 80061d2:	f207 1269 	addw	r2, r7, #361	; 0x169
 80061d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061da:	33c4      	adds	r3, #196	; 0xc4
 80061dc:	495b      	ldr	r1, [pc, #364]	; (800634c <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fa ff62 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 80061e4:	2313      	movs	r3, #19
 80061e6:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 80061ea:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 80061ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061f2:	33e0      	adds	r3, #224	; 0xe0
 80061f4:	4956      	ldr	r1, [pc, #344]	; (8006350 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fa ff7e 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 80061fc:	2314      	movs	r3, #20
 80061fe:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8006202:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8006206:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800620a:	33fc      	adds	r3, #252	; 0xfc
 800620c:	4951      	ldr	r1, [pc, #324]	; (8006354 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800620e:	4618      	mov	r0, r3
 8006210:	f7fa ffea 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8006214:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006218:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006222:	220a      	movs	r2, #10
 8006224:	605a      	str	r2, [r3, #4]
 8006226:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800622a:	4618      	mov	r0, r3
 800622c:	f7fb fb04 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8006230:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8006234:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006238:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	460b      	mov	r3, r1
 8006240:	ca06      	ldmia	r2, {r1, r2}
 8006242:	4845      	ldr	r0, [pc, #276]	; (8006358 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8006244:	f7fb fb10 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8006248:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800624c:	4618      	mov	r0, r3
 800624e:	f7fb faff 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8006252:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8006256:	f504 748c 	add.w	r4, r4, #280	; 0x118
 800625a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800625e:	429c      	cmp	r4, r3
 8006260:	d004      	beq.n	800626c <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8006262:	3c1c      	subs	r4, #28
 8006264:	4620      	mov	r0, r4
 8006266:	f7fa ff12 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 800626a:	e7f6      	b.n	800625a <_Z41__static_initialization_and_destruction_0ii+0x2b2>
{
	{'<', {TOKEN_SMALLER_THAN, TOKEN_SMALLER_OR_EQUAL}},
	{'>', {TOKEN_GREATER_THAN, TOKEN_GREATER_OR_EQUAL}},
	{'=', {TOKEN_ASSIGN, TOKEN_EQUALS}},
	{'!', {TOKEN_EXCLAMATION, TOKEN_NOT_EQUAL}},
};
 800626c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	605a      	str	r2, [r3, #4]
 8006276:	609a      	str	r2, [r3, #8]
 8006278:	233c      	movs	r3, #60	; 0x3c
 800627a:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 800627e:	231b      	movs	r3, #27
 8006280:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8006284:	231c      	movs	r3, #28
 8006286:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800628a:	233e      	movs	r3, #62	; 0x3e
 800628c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8006290:	2319      	movs	r3, #25
 8006292:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8006296:	231a      	movs	r3, #26
 8006298:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 800629c:	233d      	movs	r3, #61	; 0x3d
 800629e:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 80062a2:	2318      	movs	r3, #24
 80062a4:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 80062a8:	231d      	movs	r3, #29
 80062aa:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80062ae:	2321      	movs	r3, #33	; 0x21
 80062b0:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80062b4:	2317      	movs	r3, #23
 80062b6:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80062ba:	231e      	movs	r3, #30
 80062bc:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80062c0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80062c4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80062c8:	2304      	movs	r3, #4
 80062ca:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80062ce:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fb faf8 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 80062d8:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80062dc:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	4613      	mov	r3, r2
 80062e4:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 80062e8:	ca06      	ldmia	r2, {r1, r2}
 80062ea:	481c      	ldr	r0, [pc, #112]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80062ec:	f7fb fb04 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80062f0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fb faf3 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 80062fa:	1d3b      	adds	r3, r7, #4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10e      	bne.n	8006320 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8006302:	463b      	mov	r3, r7
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800630a:	4293      	cmp	r3, r2
 800630c:	d108      	bne.n	8006320 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800630e:	4813      	ldr	r0, [pc, #76]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8006310:	f7ff fe22 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8006314:	4810      	ldr	r0, [pc, #64]	; (8006358 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8006316:	f7ff fe2c 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800631a:	4804      	ldr	r0, [pc, #16]	; (800632c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800631c:	f7ff fe36 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8006320:	bf00      	nop
 8006322:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006326:	46bd      	mov	sp, r7
 8006328:	bd90      	pop	{r4, r7, pc}
 800632a:	bf00      	nop
 800632c:	200001fc 	.word	0x200001fc
 8006330:	0801cc30 	.word	0x0801cc30
 8006334:	0801cc38 	.word	0x0801cc38
 8006338:	0801cc40 	.word	0x0801cc40
 800633c:	0801cc48 	.word	0x0801cc48
 8006340:	0801cc50 	.word	0x0801cc50
 8006344:	0801cc58 	.word	0x0801cc58
 8006348:	0801cc5c 	.word	0x0801cc5c
 800634c:	0801cc64 	.word	0x0801cc64
 8006350:	0801cc6c 	.word	0x0801cc6c
 8006354:	0801cc74 	.word	0x0801cc74
 8006358:	20000214 	.word	0x20000214
 800635c:	2000022c 	.word	0x2000022c

08006360 <_GLOBAL__sub_I__ZN17Primal_expressionD2Ev>:
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
 8006364:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006368:	2001      	movs	r0, #1
 800636a:	f7ff fe1d 	bl	8005fa8 <_Z41__static_initialization_and_destruction_0ii>
 800636e:	bd80      	pop	{r7, pc}

08006370 <_GLOBAL__sub_D__ZN17Primal_expressionD2Ev>:
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
 8006374:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006378:	2000      	movs	r0, #0
 800637a:	f7ff fe15 	bl	8005fa8 <_Z41__static_initialization_and_destruction_0ii>
 800637e:	bd80      	pop	{r7, pc}

08006380 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af02      	add	r7, sp, #8
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f013 fb8f 	bl	8019ab0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8006392:	4602      	mov	r2, r0
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4904      	ldr	r1, [pc, #16]	; (80063ac <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 800639c:	4804      	ldr	r0, [pc, #16]	; (80063b0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 800639e:	f000 fdb7 	bl	8006f10 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 80063a2:	4603      	mov	r3, r0
					__idx, __base); }
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	0801cc78 	.word	0x0801cc78
 80063b0:	0801ace1 	.word	0x0801ace1

080063b4 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>:
			     __idx, __base); }

  // NB: strtof vs strtod.
  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f013 fb76 	bl	8019ab0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80063c4:	4602      	mov	r2, r0
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	4905      	ldr	r1, [pc, #20]	; (80063e0 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x2c>)
 80063ca:	4806      	ldr	r0, [pc, #24]	; (80063e4 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x30>)
 80063cc:	f000 fe20 	bl	8007010 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 80063d0:	eef0 7a40 	vmov.f32	s15, s0
 80063d4:	eeb0 0a67 	vmov.f32	s0, s15
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	0801cc80 	.word	0x0801cc80
 80063e4:	0801ab25 	.word	0x0801ab25

080063e8 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fead 	bl	8007152 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff ffeb 	bl	80063e8 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff ffeb 	bl	8006402 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Move_assign_base : _Copy_assign_alias<_Types...>
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4618      	mov	r0, r3
 8006442:	f7ff ffeb 	bl	800641c <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Variant_base : _Move_assign_alias<_Types...>
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff ffeb 	bl	8006436 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>:
      variant() = default;
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fe5f 	bl	8007138 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
      ~variant() = default;
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff ffde 	bl	8006450 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <_ZN5TokenC1Ev>:
#include <string>
#include "token_types.h"

typedef std::variant<std::string, int, float, bool> token_value;

class Token
 800649e:	b580      	push	{r7, lr}
 80064a0:	b082      	sub	sp, #8
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3304      	adds	r3, #4
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff ffdd 	bl	800646a <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <_ZN5LexerC1EP6Source>:
#include <Lexer.h>

Lexer::Lexer(Source* Code)
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff ffe8 	bl	800649e <_ZN5TokenC1Ev>
{
	this->Code = Code;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	62da      	str	r2, [r3, #44]	; 0x2c
	char_buffer = ' ';
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	701a      	strb	r2, [r3, #0]
}
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <_ZN5Lexer17match_single_charEv>:

bool Lexer::match_single_char()
{
 80064e4:	b590      	push	{r4, r7, lr}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
	auto result = token_chars.find(char_buffer);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4619      	mov	r1, r3
 80064f0:	4818      	ldr	r0, [pc, #96]	; (8006554 <_ZN5Lexer17match_single_charEv+0x70>)
 80064f2:	f000 fe3a 	bl	800716a <_ZNKSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEE4findERS4_>
 80064f6:	4603      	mov	r3, r0
 80064f8:	60bb      	str	r3, [r7, #8]
	if (result != token_chars.end())
 80064fa:	4816      	ldr	r0, [pc, #88]	; (8006554 <_ZN5Lexer17match_single_charEv+0x70>)
 80064fc:	f000 fe44 	bl	8007188 <_ZNKSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEE3endEv>
 8006500:	4603      	mov	r3, r0
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	f107 020c 	add.w	r2, r7, #12
 8006508:	f107 0308 	add.w	r3, r7, #8
 800650c:	4611      	mov	r1, r2
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fe47 	bl	80071a2 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEES6_>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d017      	beq.n	800654a <_ZN5Lexer17match_single_charEv+0x66>
	{
		Product.set_type(result->second);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	1d1c      	adds	r4, r3, #4
 800651e:	f107 0308 	add.w	r3, r7, #8
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fe51 	bl	80071ca <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEptEv>
 8006528:	4603      	mov	r3, r0
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	4619      	mov	r1, r3
 800652e:	4620      	mov	r0, r4
 8006530:	f00b fcb2 	bl	8011e98 <_ZN5Token8set_typeE10token_type>
		char_buffer = Code->receive_code_char();
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	4618      	mov	r0, r3
 800653a:	f00a ff9f 	bl	801147c <_ZN6Source17receive_code_charEv>
 800653e:	4603      	mov	r3, r0
 8006540:	461a      	mov	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	701a      	strb	r2, [r3, #0]
		return true;
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <_ZN5Lexer17match_single_charEv+0x68>
	}
	return false;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	bd90      	pop	{r4, r7, pc}
 8006554:	20000244 	.word	0x20000244

08006558 <_ZN5Lexer17match_double_charEv>:

bool Lexer::match_double_char()
{
 8006558:	b590      	push	{r4, r7, lr}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
	auto result = token_double_chars.find(char_buffer);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4619      	mov	r1, r3
 8006564:	4826      	ldr	r0, [pc, #152]	; (8006600 <_ZN5Lexer17match_double_charEv+0xa8>)
 8006566:	f000 fe3e 	bl	80071e6 <_ZNKSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEE4findERS4_>
 800656a:	4603      	mov	r3, r0
 800656c:	60bb      	str	r3, [r7, #8]
	if (result != token_double_chars.end())
 800656e:	4824      	ldr	r0, [pc, #144]	; (8006600 <_ZN5Lexer17match_double_charEv+0xa8>)
 8006570:	f000 fe48 	bl	8007204 <_ZNKSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEE3endEv>
 8006574:	4603      	mov	r3, r0
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	f107 020c 	add.w	r2, r7, #12
 800657c:	f107 0308 	add.w	r3, r7, #8
 8006580:	4611      	mov	r1, r2
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fe4b 	bl	800721e <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEES6_>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d032      	beq.n	80065f4 <_ZN5Lexer17match_double_charEv+0x9c>
	{
		char_buffer = Code->receive_code_char();
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	4618      	mov	r0, r3
 8006594:	f00a ff72 	bl	801147c <_ZN6Source17receive_code_charEv>
 8006598:	4603      	mov	r3, r0
 800659a:	461a      	mov	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	701a      	strb	r2, [r3, #0]
		if (char_buffer == '=')
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b3d      	cmp	r3, #61	; 0x3d
 80065a6:	d116      	bne.n	80065d6 <_ZN5Lexer17match_double_charEv+0x7e>
		{
			Product.set_type(result->second.double_char);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	1d1c      	adds	r4, r3, #4
 80065ac:	f107 0308 	add.w	r3, r7, #8
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fe48 	bl	8007246 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEptEv>
 80065b6:	4603      	mov	r3, r0
 80065b8:	789b      	ldrb	r3, [r3, #2]
 80065ba:	4619      	mov	r1, r3
 80065bc:	4620      	mov	r0, r4
 80065be:	f00b fc6b 	bl	8011e98 <_ZN5Token8set_typeE10token_type>
			char_buffer = Code->receive_code_char();
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	4618      	mov	r0, r3
 80065c8:	f00a ff58 	bl	801147c <_ZN6Source17receive_code_charEv>
 80065cc:	4603      	mov	r3, r0
 80065ce:	461a      	mov	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	701a      	strb	r2, [r3, #0]
 80065d4:	e00c      	b.n	80065f0 <_ZN5Lexer17match_double_charEv+0x98>
		}
		else
		{
			Product.set_type(result->second.single_char);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	1d1c      	adds	r4, r3, #4
 80065da:	f107 0308 	add.w	r3, r7, #8
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fe31 	bl	8007246 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEptEv>
 80065e4:	4603      	mov	r3, r0
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	4619      	mov	r1, r3
 80065ea:	4620      	mov	r0, r4
 80065ec:	f00b fc54 	bl	8011e98 <_ZN5Token8set_typeE10token_type>
		}
		return true;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <_ZN5Lexer17match_double_charEv+0x9e>
	}
	return false;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd90      	pop	{r4, r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000274 	.word	0x20000274

08006604 <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::build_word(std::string &word)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
	do
	{
		word.push_back(char_buffer);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	4619      	mov	r1, r3
 8006614:	6838      	ldr	r0, [r7, #0]
 8006616:	f013 f9d7 	bl	80199c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
		char_buffer = Code->receive_code_char();
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	4618      	mov	r0, r3
 8006620:	f00a ff2c 	bl	801147c <_ZN6Source17receive_code_charEv>
 8006624:	4603      	mov	r3, r0
 8006626:	461a      	mov	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	701a      	strb	r2, [r3, #0]
	}
	while (isalnum(char_buffer) || char_buffer == '_');
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	4618      	mov	r0, r3
 8006632:	f013 fad1 	bl	8019bd8 <isalnum>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e8      	bne.n	800660e <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b5f      	cmp	r3, #95	; 0x5f
 8006642:	d100      	bne.n	8006646 <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
	do
 8006644:	e7e3      	b.n	800660e <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa>
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::match_keyword_or_id(std::string& word)
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b093      	sub	sp, #76	; 0x4c
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
	auto result = token_strings.find(word);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	4826      	ldr	r0, [pc, #152]	; (80066f8 <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 800665e:	f000 fe00 	bl	8007262 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>
 8006662:	4603      	mov	r3, r0
 8006664:	60fb      	str	r3, [r7, #12]
	if (result != token_strings.end())
 8006666:	4824      	ldr	r0, [pc, #144]	; (80066f8 <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 8006668:	f000 fe0a 	bl	8007280 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEE3endEv>
 800666c:	4603      	mov	r3, r0
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	f107 0210 	add.w	r2, r7, #16
 8006674:	f107 030c 	add.w	r3, r7, #12
 8006678:	4611      	mov	r1, r2
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fe0d 	bl	800729a <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00d      	beq.n	80066a2 <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x52>
	{
		Product.set_type(result->second);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	1d1c      	adds	r4, r3, #4
 800668a:	f107 030c 	add.w	r3, r7, #12
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fe17 	bl	80072c2 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEptEv>
 8006694:	4603      	mov	r3, r0
 8006696:	7e1b      	ldrb	r3, [r3, #24]
 8006698:	4619      	mov	r1, r3
 800669a:	4620      	mov	r0, r4
 800669c:	f00b fbfc 	bl	8011e98 <_ZN5Token8set_typeE10token_type>
	else
	{
		Product.set_type(TOKEN_IDENTIFIER);
		Product.set_value(std::string(word));
	}
}
 80066a0:	e025      	b.n	80066ee <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e>
		Product.set_type(TOKEN_IDENTIFIER);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3304      	adds	r3, #4
 80066a6:	2102      	movs	r1, #2
 80066a8:	4618      	mov	r0, r3
 80066aa:	f00b fbf5 	bl	8011e98 <_ZN5Token8set_typeE10token_type>
		Product.set_value(std::string(word));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	1d1c      	adds	r4, r3, #4
 80066b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f013 fa43 	bl	8019b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80066be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80066c2:	f107 0314 	add.w	r3, r7, #20
 80066c6:	4611      	mov	r1, r2
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fe2c 	bl	8007326 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IS5_vvS5_vEEOT_>
 80066ce:	f107 0314 	add.w	r3, r7, #20
 80066d2:	4619      	mov	r1, r3
 80066d4:	4620      	mov	r0, r4
 80066d6:	f00b fbc0 	bl	8011e5a <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 80066da:	f107 0314 	add.w	r3, r7, #20
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff fed0 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 80066e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066e8:	4618      	mov	r0, r3
 80066ea:	f013 f8fe 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80066ee:	bf00      	nop
 80066f0:	374c      	adds	r7, #76	; 0x4c
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd90      	pop	{r4, r7, pc}
 80066f6:	bf00      	nop
 80066f8:	2000025c 	.word	0x2000025c

080066fc <_ZN5Lexer19build_keyword_or_idEv>:

bool Lexer::build_keyword_or_id()
{
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b089      	sub	sp, #36	; 0x24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
	if (isalpha(char_buffer))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f013 fa6d 	bl	8019be8 <isalpha>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d017      	beq.n	8006744 <_ZN5Lexer19build_keyword_or_idEv+0x48>
	{
		std::string word;
 8006714:	f107 0308 	add.w	r3, r7, #8
 8006718:	4618      	mov	r0, r3
 800671a:	f013 f8c5 	bl	80198a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		build_word(word);
 800671e:	f107 0308 	add.w	r3, r7, #8
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff ff6d 	bl	8006604 <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		match_keyword_or_id(word);
 800672a:	f107 0308 	add.w	r3, r7, #8
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff ff8d 	bl	8006650 <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		return true;
 8006736:	2401      	movs	r4, #1
		std::string word;
 8006738:	f107 0308 	add.w	r3, r7, #8
 800673c:	4618      	mov	r0, r3
 800673e:	f013 f8d4 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006742:	e000      	b.n	8006746 <_ZN5Lexer19build_keyword_or_idEv+0x4a>
	}
	return false;
 8006744:	2400      	movs	r4, #0
 8006746:	4623      	mov	r3, r4
}
 8006748:	4618      	mov	r0, r3
 800674a:	3724      	adds	r7, #36	; 0x24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd90      	pop	{r4, r7, pc}

08006750 <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::build_int(std::string &word)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
	do
	{
		word.push_back(char_buffer);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	4619      	mov	r1, r3
 8006760:	6838      	ldr	r0, [r7, #0]
 8006762:	f013 f931 	bl	80199c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
		char_buffer = Code->receive_code_char();
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	4618      	mov	r0, r3
 800676c:	f00a fe86 	bl	801147c <_ZN6Source17receive_code_charEv>
 8006770:	4603      	mov	r3, r0
 8006772:	461a      	mov	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	701a      	strb	r2, [r3, #0]
	}
	while (isdigit(char_buffer));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	3b30      	subs	r3, #48	; 0x30
 800677e:	2b09      	cmp	r3, #9
 8006780:	bf94      	ite	ls
 8006782:	2301      	movls	r3, #1
 8006784:	2300      	movhi	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d000      	beq.n	800678e <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3e>
	do
 800678c:	e7e5      	b.n	800675a <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa>
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <_ZN5Lexer18match_int_or_floatERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::match_int_or_float(std::string& word)
{
 8006796:	b590      	push	{r4, r7, lr}
 8006798:	b093      	sub	sp, #76	; 0x4c
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
	if (char_buffer != '.')
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b2e      	cmp	r3, #46	; 0x2e
 80067a6:	d022      	beq.n	80067ee <_ZN5Lexer18match_int_or_floatERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>
	{
		Product.set_type(TOKEN_INT);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3304      	adds	r3, #4
 80067ac:	2103      	movs	r1, #3
 80067ae:	4618      	mov	r0, r3
 80067b0:	f00b fb72 	bl	8011e98 <_ZN5Token8set_typeE10token_type>
		Product.set_value(std::stoi(word));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	1d1c      	adds	r4, r3, #4
 80067b8:	220a      	movs	r2, #10
 80067ba:	2100      	movs	r1, #0
 80067bc:	6838      	ldr	r0, [r7, #0]
 80067be:	f7ff fddf 	bl	8006380 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 80067c2:	4603      	mov	r3, r0
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
 80067c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80067ca:	f107 0308 	add.w	r3, r7, #8
 80067ce:	4611      	mov	r1, r2
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fddf 	bl	8007394 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IivvivEEOT_>
 80067d6:	f107 0308 	add.w	r3, r7, #8
 80067da:	4619      	mov	r1, r3
 80067dc:	4620      	mov	r0, r4
 80067de:	f00b fb3c 	bl	8011e5a <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 80067e2:	f107 0308 	add.w	r3, r7, #8
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff fe4c 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	{
		build_int(word);
		Product.set_type(TOKEN_FLOAT);
		Product.set_value(std::stof(word));
	}
}
 80067ec:	e026      	b.n	800683c <_ZN5Lexer18match_int_or_floatERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa6>
		build_int(word);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ffad 	bl	8006750 <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		Product.set_type(TOKEN_FLOAT);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3304      	adds	r3, #4
 80067fa:	2104      	movs	r1, #4
 80067fc:	4618      	mov	r0, r3
 80067fe:	f00b fb4b 	bl	8011e98 <_ZN5Token8set_typeE10token_type>
		Product.set_value(std::stof(word));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	1d1c      	adds	r4, r3, #4
 8006806:	2100      	movs	r1, #0
 8006808:	6838      	ldr	r0, [r7, #0]
 800680a:	f7ff fdd3 	bl	80063b4 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 800680e:	eef0 7a40 	vmov.f32	s15, s0
 8006812:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8006816:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800681a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800681e:	4611      	mov	r1, r2
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fdee 	bl	8007402 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IfvvfvEEOT_>
 8006826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800682a:	4619      	mov	r1, r3
 800682c:	4620      	mov	r0, r4
 800682e:	f00b fb14 	bl	8011e5a <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 8006832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006836:	4618      	mov	r0, r3
 8006838:	f7ff fe24 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
}
 800683c:	bf00      	nop
 800683e:	374c      	adds	r7, #76	; 0x4c
 8006840:	46bd      	mov	sp, r7
 8006842:	bd90      	pop	{r4, r7, pc}

08006844 <_ZN5Lexer18build_int_or_floatEv>:

bool Lexer::build_int_or_float()
{
 8006844:	b590      	push	{r4, r7, lr}
 8006846:	b089      	sub	sp, #36	; 0x24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	if(isdigit(char_buffer) && char_buffer != '0')
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	3b30      	subs	r3, #48	; 0x30
 8006852:	2b09      	cmp	r3, #9
 8006854:	bf94      	ite	ls
 8006856:	2301      	movls	r3, #1
 8006858:	2300      	movhi	r3, #0
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d01b      	beq.n	8006898 <_ZN5Lexer18build_int_or_floatEv+0x54>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b30      	cmp	r3, #48	; 0x30
 8006866:	d017      	beq.n	8006898 <_ZN5Lexer18build_int_or_floatEv+0x54>
	{
		std::string word;
 8006868:	f107 0308 	add.w	r3, r7, #8
 800686c:	4618      	mov	r0, r3
 800686e:	f013 f81b 	bl	80198a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		build_int(word);
 8006872:	f107 0308 	add.w	r3, r7, #8
 8006876:	4619      	mov	r1, r3
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7ff ff69 	bl	8006750 <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		match_int_or_float(word);
 800687e:	f107 0308 	add.w	r3, r7, #8
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff ff86 	bl	8006796 <_ZN5Lexer18match_int_or_floatERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		return true;
 800688a:	2401      	movs	r4, #1
		std::string word;
 800688c:	f107 0308 	add.w	r3, r7, #8
 8006890:	4618      	mov	r0, r3
 8006892:	f013 f82a 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006896:	e000      	b.n	800689a <_ZN5Lexer18build_int_or_floatEv+0x56>
	}
	return false;
 8006898:	2400      	movs	r4, #0
 800689a:	4623      	mov	r3, r4
}
 800689c:	4618      	mov	r0, r3
 800689e:	3724      	adds	r7, #36	; 0x24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd90      	pop	{r4, r7, pc}

080068a4 <_ZN5Lexer20build_0_int_or_floatEv>:

bool Lexer::build_0_int_or_float()
{
 80068a4:	b590      	push	{r4, r7, lr}
 80068a6:	b099      	sub	sp, #100	; 0x64
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
	if(char_buffer == '0')
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b30      	cmp	r3, #48	; 0x30
 80068b2:	d161      	bne.n	8006978 <_ZN5Lexer20build_0_int_or_floatEv+0xd4>
	{
		char_buffer = Code->receive_code_char();
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	4618      	mov	r0, r3
 80068ba:	f00a fddf 	bl	801147c <_ZN6Source17receive_code_charEv>
 80068be:	4603      	mov	r3, r0
 80068c0:	461a      	mov	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	701a      	strb	r2, [r3, #0]
		if(char_buffer == '.')
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b2e      	cmp	r3, #46	; 0x2e
 80068cc:	d135      	bne.n	800693a <_ZN5Lexer20build_0_int_or_floatEv+0x96>
		{
			std::string word;
 80068ce:	f107 0308 	add.w	r3, r7, #8
 80068d2:	4618      	mov	r0, r3
 80068d4:	f012 ffe8 	bl	80198a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
			build_int(word);
 80068d8:	f107 0308 	add.w	r3, r7, #8
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff ff36 	bl	8006750 <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
			Product.set_type(TOKEN_FLOAT);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3304      	adds	r3, #4
 80068e8:	2104      	movs	r1, #4
 80068ea:	4618      	mov	r0, r3
 80068ec:	f00b fad4 	bl	8011e98 <_ZN5Token8set_typeE10token_type>
			Product.set_value(std::stof(word));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	1d1c      	adds	r4, r3, #4
 80068f4:	f107 0308 	add.w	r3, r7, #8
 80068f8:	2100      	movs	r1, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff fd5a 	bl	80063b4 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8006900:	eef0 7a40 	vmov.f32	s15, s0
 8006904:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8006908:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800690c:	f107 0320 	add.w	r3, r7, #32
 8006910:	4611      	mov	r1, r2
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fd75 	bl	8007402 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IfvvfvEEOT_>
 8006918:	f107 0320 	add.w	r3, r7, #32
 800691c:	4619      	mov	r1, r3
 800691e:	4620      	mov	r0, r4
 8006920:	f00b fa9b 	bl	8011e5a <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 8006924:	f107 0320 	add.w	r3, r7, #32
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fdab 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
			std::string word;
 800692e:	f107 0308 	add.w	r3, r7, #8
 8006932:	4618      	mov	r0, r3
 8006934:	f012 ffd9 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006938:	e01c      	b.n	8006974 <_ZN5Lexer20build_0_int_or_floatEv+0xd0>
		}
		else
		{
			Product.set_type(TOKEN_INT);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3304      	adds	r3, #4
 800693e:	2103      	movs	r1, #3
 8006940:	4618      	mov	r0, r3
 8006942:	f00b faa9 	bl	8011e98 <_ZN5Token8set_typeE10token_type>
			Product.set_value(0);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	1d1c      	adds	r4, r3, #4
 800694a:	2300      	movs	r3, #0
 800694c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800694e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006956:	4611      	mov	r1, r2
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fd1b 	bl	8007394 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IivvivEEOT_>
 800695e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006962:	4619      	mov	r1, r3
 8006964:	4620      	mov	r0, r4
 8006966:	f00b fa78 	bl	8011e5a <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 800696a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff fd88 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
		}
		return true;
 8006974:	2301      	movs	r3, #1
 8006976:	e000      	b.n	800697a <_ZN5Lexer20build_0_int_or_floatEv+0xd6>
	}
	return false;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3764      	adds	r7, #100	; 0x64
 800697e:	46bd      	mov	sp, r7
 8006980:	bd90      	pop	{r4, r7, pc}
	...

08006984 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::match_escape_char(std::string &word)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
	char true_char = '\0';
 800698e:	2300      	movs	r3, #0
 8006990:	73fb      	strb	r3, [r7, #15]
	switch (char_buffer)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b76      	cmp	r3, #118	; 0x76
 8006998:	dc5d      	bgt.n	8006a56 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd2>
 800699a:	2b5c      	cmp	r3, #92	; 0x5c
 800699c:	da04      	bge.n	80069a8 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24>
 800699e:	2b22      	cmp	r3, #34	; 0x22
 80069a0:	d047      	beq.n	8006a32 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
 80069a2:	2b27      	cmp	r3, #39	; 0x27
 80069a4:	d03f      	beq.n	8006a26 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa2>
	case 'v':
		true_char = '\v';
		break;
	default:
		// xxx błąd
		break;
 80069a6:	e056      	b.n	8006a56 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd2>
 80069a8:	3b5c      	subs	r3, #92	; 0x5c
 80069aa:	2b1a      	cmp	r3, #26
 80069ac:	d853      	bhi.n	8006a56 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd2>
 80069ae:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>)
 80069b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b4:	08006a2d 	.word	0x08006a2d
 80069b8:	08006a57 	.word	0x08006a57
 80069bc:	08006a57 	.word	0x08006a57
 80069c0:	08006a57 	.word	0x08006a57
 80069c4:	08006a57 	.word	0x08006a57
 80069c8:	08006a57 	.word	0x08006a57
 80069cc:	08006a45 	.word	0x08006a45
 80069d0:	08006a57 	.word	0x08006a57
 80069d4:	08006a57 	.word	0x08006a57
 80069d8:	08006a57 	.word	0x08006a57
 80069dc:	08006a4b 	.word	0x08006a4b
 80069e0:	08006a57 	.word	0x08006a57
 80069e4:	08006a57 	.word	0x08006a57
 80069e8:	08006a57 	.word	0x08006a57
 80069ec:	08006a57 	.word	0x08006a57
 80069f0:	08006a57 	.word	0x08006a57
 80069f4:	08006a57 	.word	0x08006a57
 80069f8:	08006a57 	.word	0x08006a57
 80069fc:	08006a21 	.word	0x08006a21
 8006a00:	08006a57 	.word	0x08006a57
 8006a04:	08006a57 	.word	0x08006a57
 8006a08:	08006a57 	.word	0x08006a57
 8006a0c:	08006a39 	.word	0x08006a39
 8006a10:	08006a57 	.word	0x08006a57
 8006a14:	08006a3f 	.word	0x08006a3f
 8006a18:	08006a57 	.word	0x08006a57
 8006a1c:	08006a51 	.word	0x08006a51
		true_char = '\n';
 8006a20:	230a      	movs	r3, #10
 8006a22:	73fb      	strb	r3, [r7, #15]
		break;
 8006a24:	e018      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\'';
 8006a26:	2327      	movs	r3, #39	; 0x27
 8006a28:	73fb      	strb	r3, [r7, #15]
		break;
 8006a2a:	e015      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\\';
 8006a2c:	235c      	movs	r3, #92	; 0x5c
 8006a2e:	73fb      	strb	r3, [r7, #15]
		break;
 8006a30:	e012      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\"';
 8006a32:	2322      	movs	r3, #34	; 0x22
 8006a34:	73fb      	strb	r3, [r7, #15]
		break;
 8006a36:	e00f      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\r';
 8006a38:	230d      	movs	r3, #13
 8006a3a:	73fb      	strb	r3, [r7, #15]
		break;
 8006a3c:	e00c      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\t';
 8006a3e:	2309      	movs	r3, #9
 8006a40:	73fb      	strb	r3, [r7, #15]
		break;
 8006a42:	e009      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\b';
 8006a44:	2308      	movs	r3, #8
 8006a46:	73fb      	strb	r3, [r7, #15]
		break;
 8006a48:	e006      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\f';
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	73fb      	strb	r3, [r7, #15]
		break;
 8006a4e:	e003      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\v';
 8006a50:	230b      	movs	r3, #11
 8006a52:	73fb      	strb	r3, [r7, #15]
		break;
 8006a54:	e000      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		break;
 8006a56:	bf00      	nop
	}
	word.pop_back();
 8006a58:	6838      	ldr	r0, [r7, #0]
 8006a5a:	f012 ffd4 	bl	8019a06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>
	word.push_back(true_char);
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	4619      	mov	r1, r3
 8006a62:	6838      	ldr	r0, [r7, #0]
 8006a64:	f012 ffb0 	bl	80199c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
}
 8006a68:	bf00      	nop
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <_ZN5Lexer15add_string_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::add_string_char(std::string &word)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
	if (word.back() == '\\')
 8006a7a:	6838      	ldr	r0, [r7, #0]
 8006a7c:	f012 ff9f 	bl	80199be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8006a80:	4603      	mov	r3, r0
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b5c      	cmp	r3, #92	; 0x5c
 8006a86:	bf0c      	ite	eq
 8006a88:	2301      	moveq	r3, #1
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d004      	beq.n	8006a9c <_ZN5Lexer15add_string_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>
	{
		match_escape_char(word);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff ff75 	bl	8006984 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006a9a:	e005      	b.n	8006aa8 <_ZN5Lexer15add_string_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
	}
	else
	{
		word.push_back(char_buffer);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6838      	ldr	r0, [r7, #0]
 8006aa4:	f012 ff90 	bl	80199c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	}
	char_buffer = Code->receive_code_char();
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	4618      	mov	r0, r3
 8006aae:	f00a fce5 	bl	801147c <_ZN6Source17receive_code_charEv>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	701a      	strb	r2, [r3, #0]
}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::build_string_content(std::string &word)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b082      	sub	sp, #8
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
	char_buffer = Code->receive_code_char();
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f00a fcd3 	bl	801147c <_ZN6Source17receive_code_charEv>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	461a      	mov	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	701a      	strb	r2, [r3, #0]
	while (!(char_buffer == '\"' && word.back() != '\\'))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b22      	cmp	r3, #34	; 0x22
 8006ae4:	d106      	bne.n	8006af4 <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32>
 8006ae6:	6838      	ldr	r0, [r7, #0]
 8006ae8:	f012 ff69 	bl	80199be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8006aec:	4603      	mov	r3, r0
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b5c      	cmp	r3, #92	; 0x5c
 8006af2:	d101      	bne.n	8006af8 <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
 8006af8:	2300      	movs	r3, #0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d004      	beq.n	8006b08 <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x46>
	{
		add_string_char(word);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff ffb5 	bl	8006a70 <_ZN5Lexer15add_string_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
	while (!(char_buffer == '\"' && word.back() != '\\'))
 8006b06:	e7ea      	b.n	8006ade <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c>
	}
	char_buffer = Code->receive_code_char();
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f00a fcb5 	bl	801147c <_ZN6Source17receive_code_charEv>
 8006b12:	4603      	mov	r3, r0
 8006b14:	461a      	mov	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	701a      	strb	r2, [r3, #0]
}
 8006b1a:	bf00      	nop
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <_ZN5Lexer12build_stringEv>:

bool Lexer::build_string()
{
 8006b22:	b590      	push	{r4, r7, lr}
 8006b24:	b097      	sub	sp, #92	; 0x5c
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
	if(char_buffer == '\"')
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	2b22      	cmp	r3, #34	; 0x22
 8006b30:	d139      	bne.n	8006ba6 <_ZN5Lexer12build_stringEv+0x84>
	{
		std::string word;
 8006b32:	f107 030c 	add.w	r3, r7, #12
 8006b36:	4618      	mov	r0, r3
 8006b38:	f012 feb6 	bl	80198a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		build_string_content(word);
 8006b3c:	f107 030c 	add.w	r3, r7, #12
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff ffbd 	bl	8006ac2 <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		Product.set_type(TOKEN_STRING);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	210f      	movs	r1, #15
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f00b f9a2 	bl	8011e98 <_ZN5Token8set_typeE10token_type>
		Product.set_value(std::string(word));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	1d1c      	adds	r4, r3, #4
 8006b58:	f107 020c 	add.w	r2, r7, #12
 8006b5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b60:	4611      	mov	r1, r2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f012 ffee 	bl	8019b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006b68:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b70:	4611      	mov	r1, r2
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fbd7 	bl	8007326 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IS5_vvS5_vEEOT_>
 8006b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f00b f96b 	bl	8011e5a <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 8006b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff fc7b 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006b8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b92:	4618      	mov	r0, r3
 8006b94:	f012 fea9 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		return true;
 8006b98:	2401      	movs	r4, #1
		std::string word;
 8006b9a:	f107 030c 	add.w	r3, r7, #12
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f012 fea3 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ba4:	e000      	b.n	8006ba8 <_ZN5Lexer12build_stringEv+0x86>
	}
	return false;
 8006ba6:	2400      	movs	r4, #0
 8006ba8:	4623      	mov	r3, r4
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	375c      	adds	r7, #92	; 0x5c
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd90      	pop	{r4, r7, pc}

08006bb2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Move_ctor_base(const _Move_ctor_base&) = default;
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fc30 	bl	8007428 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Copy_assign_base(const _Copy_assign_base&) = default;
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	4611      	mov	r1, r2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff ffe5 	bl	8006bb2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Move_assign_base(const _Move_assign_base&) = default;
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	4611      	mov	r1, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff ffe5 	bl	8006bd2 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Variant_base(const _Variant_base&) = default;
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	4611      	mov	r1, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff ffe5 	bl	8006bf2 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS6_>:
      variant(const variant& __rhs) = default;
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	6039      	str	r1, [r7, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	4611      	mov	r1, r2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7ff ffe5 	bl	8006c12 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <_ZN5TokenC1ERKS_>:
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b082      	sub	sp, #8
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	6039      	str	r1, [r7, #0]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781a      	ldrb	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	701a      	strb	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	1d1a      	adds	r2, r3, #4
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f7ff ffdf 	bl	8006c32 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS6_>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	6a1a      	ldr	r2, [r3, #32]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	621a      	str	r2, [r3, #32]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <_ZN5Lexer11build_tokenEv>:

Token Lexer::build_token()
{
 8006c90:	b590      	push	{r4, r7, lr}
 8006c92:	b08b      	sub	sp, #44	; 0x2c
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
	get_working_char();
 8006c9a:	6838      	ldr	r0, [r7, #0]
 8006c9c:	f000 f8e9 	bl	8006e72 <_ZN5Lexer16get_working_charEv>
	Product.set_line(Code->get_line());
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	1d1c      	adds	r4, r3, #4
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f00a fbb1 	bl	8011410 <_ZN6Source8get_lineEv>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f00b f90b 	bl	8011ece <_ZN5Token8set_lineEi>
	Product.set_position(Code->get_position());
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	1d1c      	adds	r4, r3, #4
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f00a fbb1 	bl	8011428 <_ZN6Source12get_positionEv>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f00b f919 	bl	8011f02 <_ZN5Token12set_positionEi>

	// todo refactor
	if(match_single_char())
 8006cd0:	6838      	ldr	r0, [r7, #0]
 8006cd2:	f7ff fc07 	bl	80064e4 <_ZN5Lexer17match_single_charEv>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d006      	beq.n	8006cea <_ZN5Lexer11build_tokenEv+0x5a>
	{
		return Product;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff ffb5 	bl	8006c52 <_ZN5TokenC1ERKS_>
 8006ce8:	e05f      	b.n	8006daa <_ZN5Lexer11build_tokenEv+0x11a>
	}

	if(match_double_char())
 8006cea:	6838      	ldr	r0, [r7, #0]
 8006cec:	f7ff fc34 	bl	8006558 <_ZN5Lexer17match_double_charEv>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d006      	beq.n	8006d04 <_ZN5Lexer11build_tokenEv+0x74>
	{
		return Product;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff ffa8 	bl	8006c52 <_ZN5TokenC1ERKS_>
 8006d02:	e052      	b.n	8006daa <_ZN5Lexer11build_tokenEv+0x11a>
	}

	if(build_keyword_or_id())
 8006d04:	6838      	ldr	r0, [r7, #0]
 8006d06:	f7ff fcf9 	bl	80066fc <_ZN5Lexer19build_keyword_or_idEv>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d006      	beq.n	8006d1e <_ZN5Lexer11build_tokenEv+0x8e>
	{
		return Product;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff ff9b 	bl	8006c52 <_ZN5TokenC1ERKS_>
 8006d1c:	e045      	b.n	8006daa <_ZN5Lexer11build_tokenEv+0x11a>
	}

	if(build_int_or_float())
 8006d1e:	6838      	ldr	r0, [r7, #0]
 8006d20:	f7ff fd90 	bl	8006844 <_ZN5Lexer18build_int_or_floatEv>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d006      	beq.n	8006d38 <_ZN5Lexer11build_tokenEv+0xa8>
	{
		return Product;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff ff8e 	bl	8006c52 <_ZN5TokenC1ERKS_>
 8006d36:	e038      	b.n	8006daa <_ZN5Lexer11build_tokenEv+0x11a>
	}

	if(build_0_int_or_float())
 8006d38:	6838      	ldr	r0, [r7, #0]
 8006d3a:	f7ff fdb3 	bl	80068a4 <_ZN5Lexer20build_0_int_or_floatEv>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d006      	beq.n	8006d52 <_ZN5Lexer11build_tokenEv+0xc2>
	{
		return Product;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	3304      	adds	r3, #4
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7ff ff81 	bl	8006c52 <_ZN5TokenC1ERKS_>
 8006d50:	e02b      	b.n	8006daa <_ZN5Lexer11build_tokenEv+0x11a>
	}

	if(build_string())
 8006d52:	6838      	ldr	r0, [r7, #0]
 8006d54:	f7ff fee5 	bl	8006b22 <_ZN5Lexer12build_stringEv>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d006      	beq.n	8006d6c <_ZN5Lexer11build_tokenEv+0xdc>
	{
		return Product;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	3304      	adds	r3, #4
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff ff74 	bl	8006c52 <_ZN5TokenC1ERKS_>
 8006d6a:	e01e      	b.n	8006daa <_ZN5Lexer11build_tokenEv+0x11a>
	}

	Product.set_type(TOKEN_ERROR);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	2128      	movs	r1, #40	; 0x28
 8006d72:	4618      	mov	r0, r3
 8006d74:	f00b f890 	bl	8011e98 <_ZN5Token8set_typeE10token_type>
	Product.set_value("unrecognized token");
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	1d1c      	adds	r4, r3, #4
 8006d7c:	f107 030c 	add.w	r3, r7, #12
 8006d80:	490c      	ldr	r1, [pc, #48]	; (8006db4 <_ZN5Lexer11build_tokenEv+0x124>)
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fb86 	bl	8007494 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IRA19_KcvvbvEEOT_>
 8006d88:	f107 030c 	add.w	r3, r7, #12
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f00b f863 	bl	8011e5a <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 8006d94:	f107 030c 	add.w	r3, r7, #12
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fb73 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>

	return Product;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	3304      	adds	r3, #4
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff ff54 	bl	8006c52 <_ZN5TokenC1ERKS_>
}
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	372c      	adds	r7, #44	; 0x2c
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd90      	pop	{r4, r7, pc}
 8006db2:	bf00      	nop
 8006db4:	0801cc88 	.word	0x0801cc88

08006db8 <_ZN5Lexer12skip_commentEv>:

void Lexer::skip_comment()
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
	while (char_buffer == '#')
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b23      	cmp	r3, #35	; 0x23
 8006dc6:	d117      	bne.n	8006df8 <_ZN5Lexer12skip_commentEv+0x40>
	{
		while (char_buffer != '\n')
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b0a      	cmp	r3, #10
 8006dce:	d009      	beq.n	8006de4 <_ZN5Lexer12skip_commentEv+0x2c>
		{
			char_buffer = Code->receive_code_char();
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f00a fb51 	bl	801147c <_ZN6Source17receive_code_charEv>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	461a      	mov	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	701a      	strb	r2, [r3, #0]
		while (char_buffer != '\n')
 8006de2:	e7f1      	b.n	8006dc8 <_ZN5Lexer12skip_commentEv+0x10>
		}
		char_buffer = Code->receive_code_char();
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	4618      	mov	r0, r3
 8006dea:	f00a fb47 	bl	801147c <_ZN6Source17receive_code_charEv>
 8006dee:	4603      	mov	r3, r0
 8006df0:	461a      	mov	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	701a      	strb	r2, [r3, #0]
	while (char_buffer == '#')
 8006df6:	e7e3      	b.n	8006dc0 <_ZN5Lexer12skip_commentEv+0x8>
	}
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <_ZN5Lexer15skip_whitespaceEv>:

void Lexer::skip_whitespace()
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	while (isspace(char_buffer) && char_buffer != '\n')
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f012 fef3 	bl	8019bf8 <isspace>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00d      	beq.n	8006e34 <_ZN5Lexer15skip_whitespaceEv+0x34>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b0a      	cmp	r3, #10
 8006e1e:	d009      	beq.n	8006e34 <_ZN5Lexer15skip_whitespaceEv+0x34>
	{
		char_buffer = Code->receive_code_char();
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	4618      	mov	r0, r3
 8006e26:	f00a fb29 	bl	801147c <_ZN6Source17receive_code_charEv>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	701a      	strb	r2, [r3, #0]
	while (isspace(char_buffer) && char_buffer != '\n')
 8006e32:	e7e9      	b.n	8006e08 <_ZN5Lexer15skip_whitespaceEv+0x8>
	}
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <_ZN5Lexer15is_invalid_charEv>:

bool Lexer::is_invalid_char()
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
	return (isspace(char_buffer) && char_buffer != '\n') || char_buffer == '#';
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f012 fed5 	bl	8019bf8 <isspace>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <_ZN5Lexer15is_invalid_charEv+0x20>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b0a      	cmp	r3, #10
 8006e5a:	d103      	bne.n	8006e64 <_ZN5Lexer15is_invalid_charEv+0x28>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b23      	cmp	r3, #35	; 0x23
 8006e62:	d101      	bne.n	8006e68 <_ZN5Lexer15is_invalid_charEv+0x2c>
 8006e64:	2301      	movs	r3, #1
 8006e66:	e000      	b.n	8006e6a <_ZN5Lexer15is_invalid_charEv+0x2e>
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <_ZN5Lexer16get_working_charEv>:

void Lexer::get_working_char()
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
	while (is_invalid_char())
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff ffde 	bl	8006e3c <_ZN5Lexer15is_invalid_charEv>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d006      	beq.n	8006e94 <_ZN5Lexer16get_working_charEv+0x22>
    {
		skip_comment();
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff ff96 	bl	8006db8 <_ZN5Lexer12skip_commentEv>
		skip_whitespace();
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff ffb7 	bl	8006e00 <_ZN5Lexer15skip_whitespaceEv>
	while (is_invalid_char())
 8006e92:	e7f2      	b.n	8006e7a <_ZN5Lexer16get_working_charEv+0x8>
    }
}
 8006e94:	bf00      	nop
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	f012 fe6e 	bl	8019b84 <__errno>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	f012 fe68 	bl	8019b84 <__errno>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8006ec4:	b590      	push	{r4, r7, lr}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	f012 fe5a 	bl	8019b84 <__errno>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bf0c      	ite	eq
 8006ed8:	2301      	moveq	r3, #1
 8006eda:	2300      	movne	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d005      	beq.n	8006eee <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681c      	ldr	r4, [r3, #0]
 8006ee6:	f012 fe4d 	bl	8019b84 <__errno>
 8006eea:	4603      	mov	r3, r0
 8006eec:	601c      	str	r4, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd90      	pop	{r4, r7, pc}

08006ef8 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8006f02:	2300      	movs	r3, #0
	  }
 8006f04:	4618      	mov	r0, r3
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8006f10:	b590      	push	{r4, r7, lr}
 8006f12:	b08b      	sub	sp, #44	; 0x2c
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8006f1e:	f107 0314 	add.w	r3, r7, #20
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff ffba 	bl	8006e9c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f107 0118 	add.w	r1, r7, #24
 8006f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	4798      	blx	r3
 8006f34:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d102      	bne.n	8006f44 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8006f3e:	68b8      	ldr	r0, [r7, #8]
 8006f40:	f012 fbc6 	bl	80196d0 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8006f44:	f012 fe1e 	bl	8019b84 <__errno>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8006f4c:	2b22      	cmp	r3, #34	; 0x22
 8006f4e:	d006      	beq.n	8006f5e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8006f50:	4621      	mov	r1, r4
 8006f52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f54:	f7ff ffd0 	bl	8006ef8 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8006f62:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8006f68:	68b8      	ldr	r0, [r7, #8]
 8006f6a:	f012 fbb7 	bl	80196dc <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	623b      	str	r3, [r7, #32]

      if (__idx)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d005      	beq.n	8006f84 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	461a      	mov	r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	601a      	str	r2, [r3, #0]

      return __ret;
 8006f84:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8006f86:	f107 0314 	add.w	r3, r7, #20
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff ff9a 	bl	8006ec4 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8006f90:	4623      	mov	r3, r4
    }
 8006f92:	4618      	mov	r0, r3
 8006f94:	372c      	adds	r7, #44	; 0x2c
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd90      	pop	{r4, r7, pc}

08006f9a <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	f012 fdef 	bl	8019b84 <__errno>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	f012 fde9 	bl	8019b84 <__errno>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8006fc2:	b590      	push	{r4, r7, lr}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	f012 fddb 	bl	8019b84 <__errno>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bf0c      	ite	eq
 8006fd6:	2301      	moveq	r3, #1
 8006fd8:	2300      	movne	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681c      	ldr	r4, [r3, #0]
 8006fe4:	f012 fdce 	bl	8019b84 <__errno>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	601c      	str	r4, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd90      	pop	{r4, r7, pc}

08006ff6 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE>:
	  _S_chk(_TRet, std::false_type) { return false; }
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	ed87 0a01 	vstr	s0, [r7, #4]
 8007000:	7038      	strb	r0, [r7, #0]
 8007002:	2300      	movs	r3, #0
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8007010:	b590      	push	{r4, r7, lr}
 8007012:	b08b      	sub	sp, #44	; 0x2c
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 800701e:	f107 0314 	add.w	r3, r7, #20
 8007022:	4618      	mov	r0, r3
 8007024:	f7ff ffb9 	bl	8006f9a <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f107 0218 	add.w	r2, r7, #24
 800702e:	4611      	mov	r1, r2
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	4798      	blx	r3
 8007034:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
      if (__endptr == __str)
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d102      	bne.n	8007046 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x36>
	std::__throw_invalid_argument(__name);
 8007040:	68b8      	ldr	r0, [r7, #8]
 8007042:	f012 fb45 	bl	80196d0 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8007046:	f012 fd9d 	bl	8019b84 <__errno>
 800704a:	4603      	mov	r3, r0
 800704c:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800704e:	2b22      	cmp	r3, #34	; 0x22
 8007050:	d007      	beq.n	8007062 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8007052:	4620      	mov	r0, r4
 8007054:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8007058:	f7ff ffcd 	bl	8006ff6 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x56>
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x58>
 8007066:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x62>
	std::__throw_out_of_range(__name);
 800706c:	68b8      	ldr	r0, [r7, #8]
 800706e:	f012 fb35 	bl	80196dc <_ZSt20__throw_out_of_rangePKc>
	__ret = __tmp;
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	623b      	str	r3, [r7, #32]
      if (__idx)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x78>
	*__idx = __endptr - __str;
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	461a      	mov	r2, r3
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	601a      	str	r2, [r3, #0]
      return __ret;
 8007088:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 800708a:	f107 0314 	add.w	r3, r7, #20
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff ff97 	bl	8006fc2 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8007094:	ee07 4a90 	vmov	s15, r4
    }
 8007098:	eeb0 0a67 	vmov.f32	s0, s15
 800709c:	372c      	adds	r7, #44	; 0x2c
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd90      	pop	{r4, r7, pc}

080070a2 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	7039      	strb	r1, [r7, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4611      	mov	r1, r2
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 fa28 	bl	8007506 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	7039      	strb	r1, [r7, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4611      	mov	r1, r2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7ff ffe7 	bl	80070a2 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80070de:	b580      	push	{r7, lr}
 80070e0:	b082      	sub	sp, #8
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	7039      	strb	r1, [r7, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4611      	mov	r1, r2
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff ffe7 	bl	80070c0 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	7039      	strb	r1, [r7, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff ffe7 	bl	80070de <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	7039      	strb	r1, [r7, #0]
	: _Base(__i, std::forward<_Args>(__args)...)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4611      	mov	r1, r2
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff ffe7 	bl	80070fc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>:
      _Variant_base()
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
      : _Variant_base(in_place_index<0>) { }
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff ffe9 	bl	800711a <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
      ~_Variant_storage()
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
      { _M_reset(); }
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f9e5 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <_ZNKSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEE4findERS4_>:
       *  iterator pointing to the sought after %pair. If unsuccessful it
       *  returns the past-the-end ( @c end() ) iterator.
       */

      const_iterator
      find(const key_type& __x) const
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f000 f9e4 	bl	8007546 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_>
 800717e:	4603      	mov	r3, r0
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <_ZNKSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4618      	mov	r0, r3
 8007194:	f000 fa13 	bl	80075be <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8007198:	4603      	mov	r3, r0
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEES6_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	bf14      	ite	ne
 80071b8:	2301      	movne	r3, #1
 80071ba:	2300      	moveq	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fb62 	bl	80058a0 <_ZNKSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 80071dc:	4603      	mov	r3, r0
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <_ZNKSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEE4findERS4_>:
      find(const key_type& __x) const
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 f9f3 	bl	80075e0 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_>
 80071fa:	4603      	mov	r3, r0
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <_ZNKSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4618      	mov	r0, r3
 8007210:	f000 fa22 	bl	8007658 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8007214:	4603      	mov	r3, r0
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEES6_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	429a      	cmp	r2, r3
 8007232:	bf14      	ite	ne
 8007234:	2301      	movne	r3, #1
 8007236:	2300      	moveq	r3, #0
 8007238:	b2db      	uxtb	r3, r3
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe fbff 	bl	8005a56 <_ZNKSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 8007258:	4603      	mov	r3, r0
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>:
      find(const key_type& __x) const
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fa02 	bl	800767a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>
 8007276:	4603      	mov	r3, r0
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fa31 	bl	80076f2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8007290:	4603      	mov	r3, r0
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	bf14      	ite	ne
 80072b0:	2301      	movne	r3, #1
 80072b2:	2300      	moveq	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	4618      	mov	r0, r3
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b082      	sub	sp, #8
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fe fb54 	bl	800597c <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 80072d4:	4603      	mov	r3, r0
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS5_ES5_vEESt16in_place_index_tIXT_EEDpOT0_>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
 80072de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072e0:	b085      	sub	sp, #20
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	60f8      	str	r0, [r7, #12]
 80072e6:	7239      	strb	r1, [r7, #8]
 80072e8:	607a      	str	r2, [r7, #4]
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
 80072ea:	68fc      	ldr	r4, [r7, #12]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f80f 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80072f2:	4603      	mov	r3, r0
 80072f4:	461a      	mov	r2, r3
 80072f6:	4631      	mov	r1, r6
 80072f8:	4620      	mov	r0, r4
 80072fa:	f000 fa4f 	bl	800779c <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 80072fe:	4629      	mov	r1, r5
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fa60 	bl	80077c6 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>
	{ }
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4618      	mov	r0, r3
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IS5_vvS5_vEEOT_>:
	variant(_Tp&& __t)
 8007326:	b590      	push	{r4, r7, lr}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
		  std::forward<_Tp>(__t))
 8007330:	6838      	ldr	r0, [r7, #0]
 8007332:	f7ff ffed 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007336:	4603      	mov	r3, r0
 8007338:	461a      	mov	r2, r3
 800733a:	4621      	mov	r1, r4
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff ffce 	bl	80072de <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS5_ES5_vEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	bd90      	pop	{r4, r7, pc}

0800734c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEivEESt16in_place_index_tIXT_EEDpOT0_>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
 800734c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	7239      	strb	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
 8007358:	68fc      	ldr	r4, [r7, #12]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f80f 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8007360:	4603      	mov	r3, r0
 8007362:	461a      	mov	r2, r3
 8007364:	4631      	mov	r1, r6
 8007366:	4620      	mov	r0, r4
 8007368:	f000 fa7d 	bl	8007866 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 800736c:	4629      	mov	r1, r5
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 fa29 	bl	80077c6 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>
	{ }
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IivvivEEOT_>:
	variant(_Tp&& __t)
 8007394:	b590      	push	{r4, r7, lr}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
		  std::forward<_Tp>(__t))
 800739e:	6838      	ldr	r0, [r7, #0]
 80073a0:	f7ff ffed 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80073a4:	4603      	mov	r3, r0
 80073a6:	461a      	mov	r2, r3
 80073a8:	4621      	mov	r1, r4
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff ffce 	bl	800734c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEivEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4618      	mov	r0, r3
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd90      	pop	{r4, r7, pc}

080073ba <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEfvEESt16in_place_index_tIXT_EEDpOT0_>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
 80073ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	7239      	strb	r1, [r7, #8]
 80073c4:	607a      	str	r2, [r7, #4]
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
 80073c6:	68fc      	ldr	r4, [r7, #12]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f80f 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80073ce:	4603      	mov	r3, r0
 80073d0:	461a      	mov	r2, r3
 80073d2:	4631      	mov	r1, r6
 80073d4:	4620      	mov	r0, r4
 80073d6:	f000 fa9f 	bl	8007918 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 80073da:	4629      	mov	r1, r5
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 f9f2 	bl	80077c6 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>
	{ }
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IfvvfvEEOT_>:
	variant(_Tp&& __t)
 8007402:	b590      	push	{r4, r7, lr}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
		  std::forward<_Tp>(__t))
 800740c:	6838      	ldr	r0, [r7, #0]
 800740e:	f7ff ffed 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8007412:	4603      	mov	r3, r0
 8007414:	461a      	mov	r2, r3
 8007416:	4621      	mov	r1, r4
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff ffce 	bl	80073ba <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEfvEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4618      	mov	r0, r3
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	bd90      	pop	{r4, r7, pc}

08007428 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Copy_ctor_base(const _Copy_ctor_base& __rhs)
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
      {
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4618      	mov	r0, r3
 8007436:	f000 fa91 	bl	800795c <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>
	__variant_construct<_Types...>(*this, __rhs);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fd3f 	bl	8007ec0 <_ZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_>
      }
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4618      	mov	r0, r3
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEbvEESt16in_place_index_tIXT_EEDpOT0_>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
 800744c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	7239      	strb	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
 8007458:	68fc      	ldr	r4, [r7, #12]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f80f 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	4631      	mov	r1, r6
 8007466:	4620      	mov	r0, r4
 8007468:	f000 fd8b 	bl	8007f82 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
 800746c:	4629      	mov	r1, r5
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 f9a9 	bl	80077c6 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>
	{ }
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IRA19_KcvvbvEEOT_>:
	variant(_Tp&& __t)
 8007494:	b590      	push	{r4, r7, lr}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
		  std::forward<_Tp>(__t))
 800749e:	6838      	ldr	r0, [r7, #0]
 80074a0:	f7ff ffed 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80074a4:	4603      	mov	r3, r0
 80074a6:	461a      	mov	r2, r3
 80074a8:	4621      	mov	r1, r4
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff ffce 	bl	800744c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEbvEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4618      	mov	r0, r3
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd90      	pop	{r4, r7, pc}

080074ba <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	7039      	strb	r1, [r7, #0]
	  ::new ((void*)std::addressof(_M_storage))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fd70 	bl	8007fac <_ZSt9addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 80074cc:	4603      	mov	r3, r0
 80074ce:	4619      	mov	r1, r3
 80074d0:	2018      	movs	r0, #24
 80074d2:	f7f9 fd83 	bl	8000fdc <_ZnwjPv>
 80074d6:	4603      	mov	r3, r0
 80074d8:	4618      	mov	r0, r3
 80074da:	f012 f9e5 	bl	80198a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	}
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	7039      	strb	r1, [r7, #0]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4611      	mov	r1, r2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff ffdf 	bl	80074ba <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	7039      	strb	r1, [r7, #0]
	_M_index(_Np)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4611      	mov	r1, r2
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff ffe7 	bl	80074e8 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJEEESt16in_place_index_tILj0EEDpOT_>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	761a      	strb	r2, [r3, #24]
	{ }
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4618      	mov	r0, r3
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>:
      void _M_reset()
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
	_M_reset_impl();
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 ffd4 	bl	80084e0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEv>
	_M_index = variant_npos;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	22ff      	movs	r2, #255	; 0xff
 800753c:	761a      	strb	r2, [r3, #24]
      }
 800753e:	bf00      	nop
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007546:	b590      	push	{r4, r7, lr}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 ffd7 	bl	8008504 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8007556:	4604      	mov	r4, r0
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 ffdf 	bl	800851c <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 800755e:	4602      	mov	r2, r0
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	4621      	mov	r1, r4
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 ffe5 	bl	8008534 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>
 800756a:	4603      	mov	r3, r0
 800756c:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f825 	bl	80075be <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8007574:	4603      	mov	r3, r0
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	f107 020c 	add.w	r2, r7, #12
 800757c:	f107 0308 	add.w	r3, r7, #8
 8007580:	4611      	mov	r1, r2
 8007582:	4618      	mov	r0, r3
 8007584:	f001 f807 	bl	8008596 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEES6_>
 8007588:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10d      	bne.n	80075aa <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 800758e:	687c      	ldr	r4, [r7, #4]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4618      	mov	r0, r3
 8007594:	f7fd fa2c 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8007598:	4603      	mov	r3, r0
 800759a:	461a      	mov	r2, r3
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	4620      	mov	r0, r4
 80075a0:	f7fd fa32 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d004      	beq.n	80075b4 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f807 	bl	80075be <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 80075b0:	4603      	mov	r3, r0
 80075b2:	e000      	b.n	80075b6 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x70>
 80075b4:	68bb      	ldr	r3, [r7, #8]
    }
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd90      	pop	{r4, r7, pc}

080075be <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	1d1a      	adds	r2, r3, #4
 80075ca:	f107 030c 	add.w	r3, r7, #12
 80075ce:	4611      	mov	r1, r2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fff4 	bl	80085be <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1EPKSt18_Rb_tree_node_base>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80075e0:	b590      	push	{r4, r7, lr}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fff6 	bl	80085dc <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 80075f0:	4604      	mov	r4, r0
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fffe 	bl	80085f4 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 80075f8:	4602      	mov	r2, r0
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	4621      	mov	r1, r4
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 f804 	bl	800860c <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>
 8007604:	4603      	mov	r3, r0
 8007606:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f825 	bl	8007658 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 800760e:	4603      	mov	r3, r0
 8007610:	60fb      	str	r3, [r7, #12]
 8007612:	f107 020c 	add.w	r2, r7, #12
 8007616:	f107 0308 	add.w	r3, r7, #8
 800761a:	4611      	mov	r1, r2
 800761c:	4618      	mov	r0, r3
 800761e:	f001 f826 	bl	800866e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEES6_>
 8007622:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10d      	bne.n	8007644 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 8007628:	687c      	ldr	r4, [r7, #4]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	4618      	mov	r0, r3
 800762e:	f7fd fcbe 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8007632:	4603      	mov	r3, r0
 8007634:	461a      	mov	r2, r3
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	4620      	mov	r0, r4
 800763a:	f7fd f9e5 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f807 	bl	8007658 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 800764a:	4603      	mov	r3, r0
 800764c:	e000      	b.n	8007650 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x70>
 800764e:	68bb      	ldr	r3, [r7, #8]
    }
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	bd90      	pop	{r4, r7, pc}

08007658 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	1d1a      	adds	r2, r3, #4
 8007664:	f107 030c 	add.w	r3, r7, #12
 8007668:	4611      	mov	r1, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f001 f813 	bl	8008696 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1EPKSt18_Rb_tree_node_base>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800767a:	b590      	push	{r4, r7, lr}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 f815 	bl	80086b4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 800768a:	4604      	mov	r4, r0
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 f81d 	bl	80086cc <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8007692:	4602      	mov	r2, r0
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	4621      	mov	r1, r4
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 f823 	bl	80086e4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_>
 800769e:	4603      	mov	r3, r0
 80076a0:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f825 	bl	80076f2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 80076a8:	4603      	mov	r3, r0
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	f107 020c 	add.w	r2, r7, #12
 80076b0:	f107 0308 	add.w	r3, r7, #8
 80076b4:	4611      	mov	r1, r2
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 f845 	bl	8008746 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>
 80076bc:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10d      	bne.n	80076de <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 80076c2:	687c      	ldr	r4, [r7, #4]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fd fb27 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80076cc:	4603      	mov	r3, r0
 80076ce:	461a      	mov	r2, r3
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	4620      	mov	r0, r4
 80076d4:	f7fd fb2d 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f807 	bl	80076f2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 80076e4:	4603      	mov	r3, r0
 80076e6:	e000      	b.n	80076ea <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x70>
 80076e8:	68bb      	ldr	r3, [r7, #8]
    }
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd90      	pop	{r4, r7, pc}

080076f2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	1d1a      	adds	r2, r3, #4
 80076fe:	f107 030c 	add.w	r3, r7, #12
 8007702:	4611      	mov	r1, r2
 8007704:	4618      	mov	r0, r3
 8007706:	f001 f832 	bl	800876e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPKSt18_Rb_tree_node_base>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007714:	b590      	push	{r4, r7, lr}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	7239      	strb	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	4621      	mov	r1, r4
 8007726:	4618      	mov	r0, r3
 8007728:	f001 f862 	bl	80087f0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4618      	mov	r0, r3
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	bd90      	pop	{r4, r7, pc}

08007736 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007736:	b590      	push	{r4, r7, lr}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	7239      	strb	r1, [r7, #8]
 8007740:	607a      	str	r2, [r7, #4]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	4621      	mov	r1, r4
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff ffe3 	bl	8007714 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	bd90      	pop	{r4, r7, pc}

08007758 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007758:	b590      	push	{r4, r7, lr}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	7239      	strb	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	4621      	mov	r1, r4
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff ffe3 	bl	8007736 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	bd90      	pop	{r4, r7, pc}

0800777a <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800777a:	b590      	push	{r4, r7, lr}
 800777c:	b085      	sub	sp, #20
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	7239      	strb	r1, [r7, #8]
 8007784:	607a      	str	r2, [r7, #4]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	4621      	mov	r1, r4
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff ffe3 	bl	8007758 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	bd90      	pop	{r4, r7, pc}

0800779c <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 800779c:	b5b0      	push	{r4, r5, r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	7239      	strb	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
	: _Base(__i, std::forward<_Args>(__args)...)
 80077a8:	68fc      	ldr	r4, [r7, #12]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff fdb0 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80077b0:	4603      	mov	r3, r0
 80077b2:	461a      	mov	r2, r3
 80077b4:	4629      	mov	r1, r5
 80077b6:	4620      	mov	r0, r4
 80077b8:	f7ff ffdf 	bl	800777a <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bdb0      	pop	{r4, r5, r7, pc}

080077c6 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>:
    _Enable_default_constructor&
    operator=(_Enable_default_constructor&&) noexcept = default;

    // Can be used in other ctors.
    constexpr explicit
    _Enable_default_constructor(_Enable_default_constructor_tag) { }
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	7039      	strb	r1, [r7, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80077de:	b590      	push	{r4, r7, lr}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	7239      	strb	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	4621      	mov	r1, r4
 80077f0:	4618      	mov	r0, r3
 80077f2:	f001 f851 	bl	8008898 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd90      	pop	{r4, r7, pc}

08007800 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007800:	b590      	push	{r4, r7, lr}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	7239      	strb	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4621      	mov	r1, r4
 8007812:	4618      	mov	r0, r3
 8007814:	f7ff ffe3 	bl	80077de <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	bd90      	pop	{r4, r7, pc}

08007822 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007822:	b590      	push	{r4, r7, lr}
 8007824:	b085      	sub	sp, #20
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	7239      	strb	r1, [r7, #8]
 800782c:	607a      	str	r2, [r7, #4]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	4621      	mov	r1, r4
 8007834:	4618      	mov	r0, r3
 8007836:	f7ff ffe3 	bl	8007800 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	bd90      	pop	{r4, r7, pc}

08007844 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007844:	b590      	push	{r4, r7, lr}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	7239      	strb	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	4621      	mov	r1, r4
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff ffe3 	bl	8007822 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	bd90      	pop	{r4, r7, pc}

08007866 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8007866:	b5b0      	push	{r4, r5, r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	7239      	strb	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
	: _Base(__i, std::forward<_Args>(__args)...)
 8007872:	68fc      	ldr	r4, [r7, #12]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff fd82 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800787a:	4603      	mov	r3, r0
 800787c:	461a      	mov	r2, r3
 800787e:	4629      	mov	r1, r5
 8007880:	4620      	mov	r0, r4
 8007882:	f7ff ffdf 	bl	8007844 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bdb0      	pop	{r4, r5, r7, pc}

08007890 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007890:	b590      	push	{r4, r7, lr}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	7239      	strb	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	4621      	mov	r1, r4
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 f861 	bl	800896a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd90      	pop	{r4, r7, pc}

080078b2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80078b2:	b590      	push	{r4, r7, lr}
 80078b4:	b085      	sub	sp, #20
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	7239      	strb	r1, [r7, #8]
 80078bc:	607a      	str	r2, [r7, #4]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	4621      	mov	r1, r4
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff ffe3 	bl	8007890 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd90      	pop	{r4, r7, pc}

080078d4 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80078d4:	b590      	push	{r4, r7, lr}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	7239      	strb	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	4621      	mov	r1, r4
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff ffe3 	bl	80078b2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd90      	pop	{r4, r7, pc}

080078f6 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80078f6:	b590      	push	{r4, r7, lr}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	7239      	strb	r1, [r7, #8]
 8007900:	607a      	str	r2, [r7, #4]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	4621      	mov	r1, r4
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff ffe3 	bl	80078d4 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	bd90      	pop	{r4, r7, pc}

08007918 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8007918:	b5b0      	push	{r4, r5, r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	7239      	strb	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
	: _Base(__i, std::forward<_Args>(__args)...)
 8007924:	68fc      	ldr	r4, [r7, #12]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff fd60 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800792c:	4603      	mov	r3, r0
 800792e:	461a      	mov	r2, r3
 8007930:	4629      	mov	r1, r5
 8007932:	4620      	mov	r0, r4
 8007934:	f7ff ffdf 	bl	80078f6 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bdb0      	pop	{r4, r5, r7, pc}

08007942 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>:
      constexpr _Variadic_union() : _M_rest() { }
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4618      	mov	r0, r3
 800794e:	f001 f824 	bl	800899a <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1Ev>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4618      	mov	r0, r3
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>:
      constexpr _Variant_storage() : _M_index(variant_npos) { }
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4618      	mov	r0, r3
 8007968:	f7ff ffeb 	bl	8007942 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	22ff      	movs	r2, #255	; 0xff
 8007970:	761a      	strb	r2, [r3, #24]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERKNSt8__detail9__variant15_Copy_ctor_baseILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
	    return static_cast<const variant<_Types...>&>(__rhs);
 8007984:	687b      	ldr	r3, [r7, #4]
    }
 8007986:	4618      	mov	r0, r3
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	7138      	strb	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800799c:	6838      	ldr	r0, [r7, #0]
 800799e:	f001 f82a 	bl	80089f6 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 80079a2:	4603      	mov	r3, r0
 80079a4:	4618      	mov	r0, r3
 80079a6:	f001 f831 	bl	8008a0c <_ZNKRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>
 80079aa:	4603      	mov	r3, r0
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <_ZNSt8__detail9__variant5__getILj0ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80079b4:	b590      	push	{r4, r7, lr}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 f80f 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 80079c2:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 80079c4:	4619      	mov	r1, r3
 80079c6:	4620      	mov	r0, r4
 80079c8:	f7ff ffe3 	bl	8007992 <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 80079cc:	4603      	mov	r3, r0
    }
 80079ce:	4618      	mov	r0, r3
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd90      	pop	{r4, r7, pc}

080079d6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESR_EEDcSH_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fffe 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 80079e4:	4603      	mov	r3, r0
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff ffe4 	bl	80079b4 <_ZNSt8__detail9__variant5__getILj0ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 80079ec:	4603      	mov	r3, r0
	}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESN_SR_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 80079f6:	b5b0      	push	{r4, r5, r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 ffe2 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007a06:	4604      	mov	r4, r0
 8007a08:	6838      	ldr	r0, [r7, #0]
 8007a0a:	f000 ffe9 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff ffe0 	bl	80079d6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESR_EEDcSH_>
 8007a16:	4603      	mov	r3, r0
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f001 f803 	bl	8008a26 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKS8_EENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>
		std::forward<_Variants>(__vars))...);
 8007a20:	462b      	mov	r3, r5
      }
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bdb0      	pop	{r4, r5, r7, pc}

08007a2a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESN_SR_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007a2a:	b5b0      	push	{r4, r5, r7, lr}
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 ffc8 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	6838      	ldr	r0, [r7, #0]
 8007a3e:	f000 ffcf 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007a42:	4603      	mov	r3, r0
 8007a44:	4619      	mov	r1, r3
 8007a46:	4620      	mov	r0, r4
 8007a48:	f7ff ffd5 	bl	80079f6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007a4c:	462b      	mov	r3, r5
      }
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bdb0      	pop	{r4, r5, r7, pc}

08007a56 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESN_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007a56:	b5b0      	push	{r4, r5, r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 ffb2 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007a66:	4604      	mov	r4, r0
 8007a68:	6838      	ldr	r0, [r7, #0]
 8007a6a:	f000 ffb9 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	4619      	mov	r1, r3
 8007a72:	4620      	mov	r0, r4
 8007a74:	f7ff ffd9 	bl	8007a2a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007a78:	462b      	mov	r3, r5
      }
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bdb0      	pop	{r4, r5, r7, pc}

08007a82 <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	7138      	strb	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8007a8c:	6838      	ldr	r0, [r7, #0]
 8007a8e:	f000 ffe1 	bl	8008a54 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007a92:	4603      	mov	r3, r0
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 ffe8 	bl	8008a6a <_ZNKRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007aa4:	b590      	push	{r4, r7, lr}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	7138      	strb	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007aae:	6838      	ldr	r0, [r7, #0]
 8007ab0:	f000 ffa1 	bl	80089f6 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8007ab4:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f7ff ffe2 	bl	8007a82 <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8007abe:	4603      	mov	r3, r0
    }
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd90      	pop	{r4, r7, pc}

08007ac8 <_ZNSt8__detail9__variant5__getILj1ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8007ac8:	b590      	push	{r4, r7, lr}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 ff85 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007ad6:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4620      	mov	r0, r4
 8007adc:	f7ff ffe2 	bl	8007aa4 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007ae0:	4603      	mov	r3, r0
    }
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd90      	pop	{r4, r7, pc}

08007aea <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESR_EEDcSH_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 ff74 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007af8:	4603      	mov	r3, r0
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff ffe4 	bl	8007ac8 <_ZNSt8__detail9__variant5__getILj1ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8007b00:	4603      	mov	r3, r0
	}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESN_SR_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8007b0a:	b5b0      	push	{r4, r5, r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 ff58 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	6838      	ldr	r0, [r7, #0]
 8007b1e:	f000 ff5f 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007b22:	4603      	mov	r3, r0
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7ff ffe0 	bl	8007aea <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESR_EEDcSH_>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f000 ffa6 	bl	8008a80 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKiEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>
		std::forward<_Variants>(__vars))...);
 8007b34:	462b      	mov	r3, r5
      }
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bdb0      	pop	{r4, r5, r7, pc}

08007b3e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESN_SR_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007b3e:	b5b0      	push	{r4, r5, r7, lr}
 8007b40:	b082      	sub	sp, #8
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 ff3e 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007b4e:	4604      	mov	r4, r0
 8007b50:	6838      	ldr	r0, [r7, #0]
 8007b52:	f000 ff45 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007b56:	4603      	mov	r3, r0
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f7ff ffd5 	bl	8007b0a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007b60:	462b      	mov	r3, r5
      }
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bdb0      	pop	{r4, r5, r7, pc}

08007b6a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESN_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007b6a:	b5b0      	push	{r4, r5, r7, lr}
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 ff28 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	6838      	ldr	r0, [r7, #0]
 8007b7e:	f000 ff2f 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007b82:	4603      	mov	r3, r0
 8007b84:	4619      	mov	r1, r3
 8007b86:	4620      	mov	r0, r4
 8007b88:	f7ff ffd9 	bl	8007b3e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007b8c:	462b      	mov	r3, r5
      }
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bdb0      	pop	{r4, r5, r7, pc}

08007b96 <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	7138      	strb	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8007ba0:	6838      	ldr	r0, [r7, #0]
 8007ba2:	f000 ff84 	bl	8008aae <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 ff8b 	bl	8008ac4 <_ZNKRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007bb8:	b590      	push	{r4, r7, lr}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	7138      	strb	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007bc2:	6838      	ldr	r0, [r7, #0]
 8007bc4:	f000 ff46 	bl	8008a54 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007bc8:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f7ff ffe2 	bl	8007b96 <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8007bd2:	4603      	mov	r3, r0
    }
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd90      	pop	{r4, r7, pc}

08007bdc <_ZNSt8__detail9__variant5__getILj2ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007bdc:	b590      	push	{r4, r7, lr}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	7138      	strb	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007be6:	6838      	ldr	r0, [r7, #0]
 8007be8:	f000 ff05 	bl	80089f6 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8007bec:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007bee:	4619      	mov	r1, r3
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f7ff ffe1 	bl	8007bb8 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007bf6:	4603      	mov	r3, r0
    }
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd90      	pop	{r4, r7, pc}

08007c00 <_ZNSt8__detail9__variant5__getILj2ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8007c00:	b590      	push	{r4, r7, lr}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fee9 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007c0e:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8007c10:	4619      	mov	r1, r3
 8007c12:	4620      	mov	r0, r4
 8007c14:	f7ff ffe2 	bl	8007bdc <_ZNSt8__detail9__variant5__getILj2ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007c18:	4603      	mov	r3, r0
    }
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd90      	pop	{r4, r7, pc}

08007c22 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESR_EEDcSH_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fed8 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007c30:	4603      	mov	r3, r0
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff ffe4 	bl	8007c00 <_ZNSt8__detail9__variant5__getILj2ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8007c38:	4603      	mov	r3, r0
	}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESN_SR_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8007c42:	b5b0      	push	{r4, r5, r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 febc 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007c52:	4604      	mov	r4, r0
 8007c54:	6838      	ldr	r0, [r7, #0]
 8007c56:	f000 fec3 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff ffe0 	bl	8007c22 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESR_EEDcSH_>
 8007c62:	4603      	mov	r3, r0
 8007c64:	4619      	mov	r1, r3
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 ff37 	bl	8008ada <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKfEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>
		std::forward<_Variants>(__vars))...);
 8007c6c:	462b      	mov	r3, r5
      }
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bdb0      	pop	{r4, r5, r7, pc}

08007c76 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESN_SR_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007c76:	b5b0      	push	{r4, r5, r7, lr}
 8007c78:	b082      	sub	sp, #8
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fea2 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007c86:	4604      	mov	r4, r0
 8007c88:	6838      	ldr	r0, [r7, #0]
 8007c8a:	f000 fea9 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4619      	mov	r1, r3
 8007c92:	4620      	mov	r0, r4
 8007c94:	f7ff ffd5 	bl	8007c42 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007c98:	462b      	mov	r3, r5
      }
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bdb0      	pop	{r4, r5, r7, pc}

08007ca2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESN_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007ca2:	b5b0      	push	{r4, r5, r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fe8c 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	6838      	ldr	r0, [r7, #0]
 8007cb6:	f000 fe93 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f7ff ffd9 	bl	8007c76 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007cc4:	462b      	mov	r3, r5
      }
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bdb0      	pop	{r4, r5, r7, pc}

08007cce <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	7138      	strb	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8007cd8:	6838      	ldr	r0, [r7, #0]
 8007cda:	f000 ff15 	bl	8008b08 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 ff1c 	bl	8008b1e <_ZNKRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007cf0:	b590      	push	{r4, r7, lr}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	7138      	strb	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007cfa:	6838      	ldr	r0, [r7, #0]
 8007cfc:	f000 fed7 	bl	8008aae <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007d00:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007d02:	4619      	mov	r1, r3
 8007d04:	4620      	mov	r0, r4
 8007d06:	f7ff ffe2 	bl	8007cce <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8007d0a:	4603      	mov	r3, r0
    }
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd90      	pop	{r4, r7, pc}

08007d14 <_ZNSt8__detail9__variant5__getILj2ERKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007d14:	b590      	push	{r4, r7, lr}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	7138      	strb	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007d1e:	6838      	ldr	r0, [r7, #0]
 8007d20:	f000 fe98 	bl	8008a54 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007d24:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007d26:	4619      	mov	r1, r3
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f7ff ffe1 	bl	8007cf0 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007d2e:	4603      	mov	r3, r0
    }
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd90      	pop	{r4, r7, pc}

08007d38 <_ZNSt8__detail9__variant5__getILj3ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007d38:	b590      	push	{r4, r7, lr}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	7138      	strb	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007d42:	6838      	ldr	r0, [r7, #0]
 8007d44:	f000 fe57 	bl	80089f6 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8007d48:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f7ff ffe1 	bl	8007d14 <_ZNSt8__detail9__variant5__getILj2ERKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007d52:	4603      	mov	r3, r0
    }
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd90      	pop	{r4, r7, pc}

08007d5c <_ZNSt8__detail9__variant5__getILj3ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8007d5c:	b590      	push	{r4, r7, lr}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fe3b 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007d6a:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f7ff ffe2 	bl	8007d38 <_ZNSt8__detail9__variant5__getILj3ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007d74:	4603      	mov	r3, r0
    }
 8007d76:	4618      	mov	r0, r3
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd90      	pop	{r4, r7, pc}

08007d7e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESR_EEDcSH_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fe2a 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff ffe4 	bl	8007d5c <_ZNSt8__detail9__variant5__getILj3ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8007d94:	4603      	mov	r3, r0
	}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESN_SR_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8007d9e:	b5b0      	push	{r4, r5, r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fe0e 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007dae:	4604      	mov	r4, r0
 8007db0:	6838      	ldr	r0, [r7, #0]
 8007db2:	f000 fe15 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007db6:	4603      	mov	r3, r0
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7ff ffe0 	bl	8007d7e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESR_EEDcSH_>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f000 feb6 	bl	8008b34 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKbEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>
		std::forward<_Variants>(__vars))...);
 8007dc8:	462b      	mov	r3, r5
      }
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bdb0      	pop	{r4, r5, r7, pc}

08007dd2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESN_SR_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007dd2:	b5b0      	push	{r4, r5, r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fdf4 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007de2:	4604      	mov	r4, r0
 8007de4:	6838      	ldr	r0, [r7, #0]
 8007de6:	f000 fdfb 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007dea:	4603      	mov	r3, r0
 8007dec:	4619      	mov	r1, r3
 8007dee:	4620      	mov	r0, r4
 8007df0:	f7ff ffd5 	bl	8007d9e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007df4:	462b      	mov	r3, r5
      }
 8007df6:	4618      	mov	r0, r3
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bdb0      	pop	{r4, r5, r7, pc}

08007dfe <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESN_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007dfe:	b5b0      	push	{r4, r5, r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fdde 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007e0e:	4604      	mov	r4, r0
 8007e10:	6838      	ldr	r0, [r7, #0]
 8007e12:	f000 fde5 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007e16:	4603      	mov	r3, r0
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f7ff ffd9 	bl	8007dd2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007e20:	462b      	mov	r3, r5
      }
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bdb0      	pop	{r4, r5, r7, pc}

08007e2a <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSS_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 fe90 	bl	8008b62 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS9_ifbEEEJEE9_M_accessEv>
 8007e42:	4603      	mov	r3, r0
	}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>:
      constexpr size_t index() const noexcept
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
	if (this->_M_index ==
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	7e1b      	ldrb	r3, [r3, #24]
 8007e58:	2bff      	cmp	r3, #255	; 0xff
 8007e5a:	d102      	bne.n	8007e62 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv+0x16>
	  return variant_npos;
 8007e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e60:	e001      	b.n	8007e66 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv+0x1a>
	return this->_M_index;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	7e1b      	ldrb	r3, [r3, #24]
      }
 8007e66:	4618      	mov	r0, r3
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
	...

08007e74 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS8_ifbEEEEDcSH_DpOT2_>:
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 8007e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 8007e7e:	4b0f      	ldr	r3, [pc, #60]	; (8007ebc <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS8_ifbEEEEDcSH_DpOT2_+0x48>)
 8007e80:	60fb      	str	r3, [r7, #12]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 8007e82:	6838      	ldr	r0, [r7, #0]
 8007e84:	f7ff ffe2 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f7ff ffcc 	bl	8007e2a <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSS_jDpT_>
 8007e92:	4603      	mov	r3, r0
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 8007e98:	68bc      	ldr	r4, [r7, #8]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fe6c 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	6838      	ldr	r0, [r7, #0]
 8007ea4:	f000 fd9c 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4628      	mov	r0, r5
 8007eae:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 8007eb0:	4633      	mov	r3, r6
    }
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	0801d1fc 	.word	0x0801d1fc

08007ec0 <_ZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_>:
    void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
      __lhs._M_index = __rhs._M_index;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	7e1a      	ldrb	r2, [r3, #24]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	761a      	strb	r2, [r3, #24]
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	6838      	ldr	r0, [r7, #0]
 8007ed8:	f000 fd6c 	bl	80089b4 <_ZSt7forwardIRKNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8007edc:	4603      	mov	r3, r0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7ff fd4c 	bl	800797c <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERKNSt8__detail9__variant15_Copy_ctor_baseILb0EJS5_ifbEEEEDcOT0_>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	f107 030c 	add.w	r3, r7, #12
 8007eea:	4611      	mov	r1, r2
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff ffc1 	bl	8007e74 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS8_ifbEEEEDcSH_DpOT2_>
    }
 8007ef2:	bf00      	nop
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007efa:	b590      	push	{r4, r7, lr}
 8007efc:	b085      	sub	sp, #20
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	7239      	strb	r1, [r7, #8]
 8007f04:	607a      	str	r2, [r7, #4]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 fea8 	bl	8008c62 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd90      	pop	{r4, r7, pc}

08007f1c <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007f1c:	b590      	push	{r4, r7, lr}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	7239      	strb	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff ffe3 	bl	8007efa <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd90      	pop	{r4, r7, pc}

08007f3e <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007f3e:	b590      	push	{r4, r7, lr}
 8007f40:	b085      	sub	sp, #20
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	7239      	strb	r1, [r7, #8]
 8007f48:	607a      	str	r2, [r7, #4]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff ffe3 	bl	8007f1c <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd90      	pop	{r4, r7, pc}

08007f60 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007f60:	b590      	push	{r4, r7, lr}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	7239      	strb	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	4621      	mov	r1, r4
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7ff ffe3 	bl	8007f3e <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd90      	pop	{r4, r7, pc}

08007f82 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8007f82:	b5b0      	push	{r4, r5, r7, lr}
 8007f84:	b084      	sub	sp, #16
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	7239      	strb	r1, [r7, #8]
 8007f8c:	607a      	str	r2, [r7, #4]
	: _Base(__i, std::forward<_Args>(__args)...)
 8007f8e:	68fc      	ldr	r4, [r7, #12]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff fa74 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8007f96:	4603      	mov	r3, r0
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f7ff ffdf 	bl	8007f60 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bdb0      	pop	{r4, r5, r7, pc}

08007fac <_ZSt9addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>:
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */
  template<typename _Tp>
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fe6c 	bl	8008c92 <_ZSt11__addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant16_Variant_storageILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
	    return static_cast<variant<_Types...>&>(__rhs);
 8007fcc:	687b      	ldr	r3, [r7, #4]
    }
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b082      	sub	sp, #8
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	7138      	strb	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8007fe4:	6838      	ldr	r0, [r7, #0]
 8007fe6:	f000 fe75 	bl	8008cd4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8007fea:	4603      	mov	r3, r0
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fc fb28 	bl	8004642 <_ZNRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8007ffc:	b590      	push	{r4, r7, lr}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fe5a 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800800a:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800800c:	4619      	mov	r1, r3
 800800e:	4620      	mov	r0, r4
 8008010:	f7ff ffe3 	bl	8007fda <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8008014:	4603      	mov	r3, r0
    }
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	bd90      	pop	{r4, r7, pc}

0800801e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESI_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fe49 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800802c:	4603      	mov	r3, r0
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff ffe4 	bl	8007ffc <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8008034:	4603      	mov	r3, r0
	}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESF_SI_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800803e:	b5b0      	push	{r4, r5, r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fe2d 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 800804e:	4604      	mov	r4, r0
 8008050:	6838      	ldr	r0, [r7, #0]
 8008052:	f000 fe34 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008056:	4603      	mov	r3, r0
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff ffe0 	bl	800801e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESI_EEDcOT0_>
 800805e:	4603      	mov	r3, r0
 8008060:	4619      	mov	r1, r3
 8008062:	4620      	mov	r0, r4
 8008064:	f000 fe41 	bl	8008cea <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRS8_EENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>
		std::forward<_Variants>(__vars))...);
 8008068:	462b      	mov	r3, r5
      }
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bdb0      	pop	{r4, r5, r7, pc}

08008072 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESF_SI_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8008072:	b5b0      	push	{r4, r5, r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fe13 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008082:	4604      	mov	r4, r0
 8008084:	6838      	ldr	r0, [r7, #0]
 8008086:	f000 fe1a 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800808a:	4603      	mov	r3, r0
 800808c:	4619      	mov	r1, r3
 800808e:	4620      	mov	r0, r4
 8008090:	f7ff ffd5 	bl	800803e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESF_SI_>
				   std::forward<_Variants>(__vars)...);
 8008094:	462b      	mov	r3, r5
      }
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bdb0      	pop	{r4, r5, r7, pc}

0800809e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESF_SI_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800809e:	b5b0      	push	{r4, r5, r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fdfd 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80080ae:	4604      	mov	r4, r0
 80080b0:	6838      	ldr	r0, [r7, #0]
 80080b2:	f000 fe04 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80080b6:	4603      	mov	r3, r0
 80080b8:	4619      	mov	r1, r3
 80080ba:	4620      	mov	r0, r4
 80080bc:	f7ff ffd9 	bl	8008072 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESF_SI_>
				   std::forward<_Variants>(__vars)...);
 80080c0:	462b      	mov	r3, r5
      }
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bdb0      	pop	{r4, r5, r7, pc}

080080ca <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	7138      	strb	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80080d4:	6838      	ldr	r0, [r7, #0]
 80080d6:	f000 fe1f 	bl	8008d18 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80080da:	4603      	mov	r3, r0
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fc fa6c 	bl	80045ba <_ZNRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>
 80080e2:	4603      	mov	r3, r0
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80080ec:	b590      	push	{r4, r7, lr}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	7138      	strb	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80080f6:	6838      	ldr	r0, [r7, #0]
 80080f8:	f000 fdec 	bl	8008cd4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 80080fc:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80080fe:	4619      	mov	r1, r3
 8008100:	4620      	mov	r0, r4
 8008102:	f7ff ffe2 	bl	80080ca <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8008106:	4603      	mov	r3, r0
    }
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	bd90      	pop	{r4, r7, pc}

08008110 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8008110:	b590      	push	{r4, r7, lr}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fdd0 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800811e:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8008120:	4619      	mov	r1, r3
 8008122:	4620      	mov	r0, r4
 8008124:	f7ff ffe2 	bl	80080ec <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8008128:	4603      	mov	r3, r0
    }
 800812a:	4618      	mov	r0, r3
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	bd90      	pop	{r4, r7, pc}

08008132 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESI_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fdbf 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008140:	4603      	mov	r3, r0
 8008142:	4618      	mov	r0, r3
 8008144:	f7ff ffe4 	bl	8008110 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8008148:	4603      	mov	r3, r0
	}
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESF_SI_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8008152:	b5b0      	push	{r4, r5, r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fda3 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008162:	4604      	mov	r4, r0
 8008164:	6838      	ldr	r0, [r7, #0]
 8008166:	f000 fdaa 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800816a:	4603      	mov	r3, r0
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff ffe0 	bl	8008132 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESI_EEDcOT0_>
 8008172:	4603      	mov	r3, r0
 8008174:	4619      	mov	r1, r3
 8008176:	4620      	mov	r0, r4
 8008178:	f000 fdd9 	bl	8008d2e <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRiEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>
		std::forward<_Variants>(__vars))...);
 800817c:	462b      	mov	r3, r5
      }
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bdb0      	pop	{r4, r5, r7, pc}

08008186 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESF_SI_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8008186:	b5b0      	push	{r4, r5, r7, lr}
 8008188:	b082      	sub	sp, #8
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fd89 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008196:	4604      	mov	r4, r0
 8008198:	6838      	ldr	r0, [r7, #0]
 800819a:	f000 fd90 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800819e:	4603      	mov	r3, r0
 80081a0:	4619      	mov	r1, r3
 80081a2:	4620      	mov	r0, r4
 80081a4:	f7ff ffd5 	bl	8008152 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESF_SI_>
				   std::forward<_Variants>(__vars)...);
 80081a8:	462b      	mov	r3, r5
      }
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bdb0      	pop	{r4, r5, r7, pc}

080081b2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESF_SI_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80081b2:	b5b0      	push	{r4, r5, r7, lr}
 80081b4:	b082      	sub	sp, #8
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fd73 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80081c2:	4604      	mov	r4, r0
 80081c4:	6838      	ldr	r0, [r7, #0]
 80081c6:	f000 fd7a 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80081ca:	4603      	mov	r3, r0
 80081cc:	4619      	mov	r1, r3
 80081ce:	4620      	mov	r0, r4
 80081d0:	f7ff ffd9 	bl	8008186 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESF_SI_>
				   std::forward<_Variants>(__vars)...);
 80081d4:	462b      	mov	r3, r5
      }
 80081d6:	4618      	mov	r0, r3
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bdb0      	pop	{r4, r5, r7, pc}

080081de <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	7138      	strb	r0, [r7, #4]
 80081e6:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80081e8:	6838      	ldr	r0, [r7, #0]
 80081ea:	f000 fdb7 	bl	8008d5c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80081ee:	4603      	mov	r3, r0
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fc fa04 	bl	80045fe <_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>
 80081f6:	4603      	mov	r3, r0
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8008200:	b590      	push	{r4, r7, lr}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	7138      	strb	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800820a:	6838      	ldr	r0, [r7, #0]
 800820c:	f000 fd84 	bl	8008d18 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008210:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8008212:	4619      	mov	r1, r3
 8008214:	4620      	mov	r0, r4
 8008216:	f7ff ffe2 	bl	80081de <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>
 800821a:	4603      	mov	r3, r0
    }
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	bd90      	pop	{r4, r7, pc}

08008224 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8008224:	b590      	push	{r4, r7, lr}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	7138      	strb	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800822e:	6838      	ldr	r0, [r7, #0]
 8008230:	f000 fd50 	bl	8008cd4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8008234:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8008236:	4619      	mov	r1, r3
 8008238:	4620      	mov	r0, r4
 800823a:	f7ff ffe1 	bl	8008200 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800823e:	4603      	mov	r3, r0
    }
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	bd90      	pop	{r4, r7, pc}

08008248 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8008248:	b590      	push	{r4, r7, lr}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fd34 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008256:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8008258:	4619      	mov	r1, r3
 800825a:	4620      	mov	r0, r4
 800825c:	f7ff ffe2 	bl	8008224 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8008260:	4603      	mov	r3, r0
    }
 8008262:	4618      	mov	r0, r3
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	bd90      	pop	{r4, r7, pc}

0800826a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESI_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fd23 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008278:	4603      	mov	r3, r0
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff ffe4 	bl	8008248 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8008280:	4603      	mov	r3, r0
	}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESF_SI_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800828a:	b5b0      	push	{r4, r5, r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fd07 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 800829a:	4604      	mov	r4, r0
 800829c:	6838      	ldr	r0, [r7, #0]
 800829e:	f000 fd0e 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80082a2:	4603      	mov	r3, r0
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff ffe0 	bl	800826a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESI_EEDcOT0_>
 80082aa:	4603      	mov	r3, r0
 80082ac:	4619      	mov	r1, r3
 80082ae:	4620      	mov	r0, r4
 80082b0:	f000 fd5f 	bl	8008d72 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRfEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>
		std::forward<_Variants>(__vars))...);
 80082b4:	462b      	mov	r3, r5
      }
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bdb0      	pop	{r4, r5, r7, pc}

080082be <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESF_SI_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80082be:	b5b0      	push	{r4, r5, r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fced 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80082ce:	4604      	mov	r4, r0
 80082d0:	6838      	ldr	r0, [r7, #0]
 80082d2:	f000 fcf4 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80082d6:	4603      	mov	r3, r0
 80082d8:	4619      	mov	r1, r3
 80082da:	4620      	mov	r0, r4
 80082dc:	f7ff ffd5 	bl	800828a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESF_SI_>
				   std::forward<_Variants>(__vars)...);
 80082e0:	462b      	mov	r3, r5
      }
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bdb0      	pop	{r4, r5, r7, pc}

080082ea <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESF_SI_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80082ea:	b5b0      	push	{r4, r5, r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fcd7 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80082fa:	4604      	mov	r4, r0
 80082fc:	6838      	ldr	r0, [r7, #0]
 80082fe:	f000 fcde 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008302:	4603      	mov	r3, r0
 8008304:	4619      	mov	r1, r3
 8008306:	4620      	mov	r0, r4
 8008308:	f7ff ffd9 	bl	80082be <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESF_SI_>
				   std::forward<_Variants>(__vars)...);
 800830c:	462b      	mov	r3, r5
      }
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bdb0      	pop	{r4, r5, r7, pc}

08008316 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	7138      	strb	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8008320:	6838      	ldr	r0, [r7, #0]
 8008322:	f000 fd3d 	bl	8008da0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008326:	4603      	mov	r3, r0
 8008328:	4618      	mov	r0, r3
 800832a:	f7fc f924 	bl	8004576 <_ZNRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>
 800832e:	4603      	mov	r3, r0
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8008338:	b590      	push	{r4, r7, lr}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	7138      	strb	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8008342:	6838      	ldr	r0, [r7, #0]
 8008344:	f000 fd0a 	bl	8008d5c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008348:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800834a:	4619      	mov	r1, r3
 800834c:	4620      	mov	r0, r4
 800834e:	f7ff ffe2 	bl	8008316 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8008352:	4603      	mov	r3, r0
    }
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	bd90      	pop	{r4, r7, pc}

0800835c <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800835c:	b590      	push	{r4, r7, lr}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	7138      	strb	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8008366:	6838      	ldr	r0, [r7, #0]
 8008368:	f000 fcd6 	bl	8008d18 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800836c:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800836e:	4619      	mov	r1, r3
 8008370:	4620      	mov	r0, r4
 8008372:	f7ff ffe1 	bl	8008338 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8008376:	4603      	mov	r3, r0
    }
 8008378:	4618      	mov	r0, r3
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	bd90      	pop	{r4, r7, pc}

08008380 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8008380:	b590      	push	{r4, r7, lr}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	7138      	strb	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800838a:	6838      	ldr	r0, [r7, #0]
 800838c:	f000 fca2 	bl	8008cd4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8008390:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8008392:	4619      	mov	r1, r3
 8008394:	4620      	mov	r0, r4
 8008396:	f7ff ffe1 	bl	800835c <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800839a:	4603      	mov	r3, r0
    }
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd90      	pop	{r4, r7, pc}

080083a4 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80083a4:	b590      	push	{r4, r7, lr}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fc86 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80083b2:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 80083b4:	4619      	mov	r1, r3
 80083b6:	4620      	mov	r0, r4
 80083b8:	f7ff ffe2 	bl	8008380 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80083bc:	4603      	mov	r3, r0
    }
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd90      	pop	{r4, r7, pc}

080083c6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESI_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fc75 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80083d4:	4603      	mov	r3, r0
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7ff ffe4 	bl	80083a4 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 80083dc:	4603      	mov	r3, r0
	}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESF_SI_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 80083e6:	b5b0      	push	{r4, r5, r7, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fc59 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80083f6:	4604      	mov	r4, r0
 80083f8:	6838      	ldr	r0, [r7, #0]
 80083fa:	f000 fc60 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80083fe:	4603      	mov	r3, r0
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff ffe0 	bl	80083c6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESI_EEDcOT0_>
 8008406:	4603      	mov	r3, r0
 8008408:	4619      	mov	r1, r3
 800840a:	4620      	mov	r0, r4
 800840c:	f000 fcd3 	bl	8008db6 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRbEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>
		std::forward<_Variants>(__vars))...);
 8008410:	462b      	mov	r3, r5
      }
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bdb0      	pop	{r4, r5, r7, pc}

0800841a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESF_SI_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800841a:	b5b0      	push	{r4, r5, r7, lr}
 800841c:	b082      	sub	sp, #8
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fc3f 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 800842a:	4604      	mov	r4, r0
 800842c:	6838      	ldr	r0, [r7, #0]
 800842e:	f000 fc46 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008432:	4603      	mov	r3, r0
 8008434:	4619      	mov	r1, r3
 8008436:	4620      	mov	r0, r4
 8008438:	f7ff ffd5 	bl	80083e6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESF_SI_>
				   std::forward<_Variants>(__vars)...);
 800843c:	462b      	mov	r3, r5
      }
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bdb0      	pop	{r4, r5, r7, pc}

08008446 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESF_SI_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8008446:	b5b0      	push	{r4, r5, r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fc29 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008456:	4604      	mov	r4, r0
 8008458:	6838      	ldr	r0, [r7, #0]
 800845a:	f000 fc30 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800845e:	4603      	mov	r3, r0
 8008460:	4619      	mov	r1, r3
 8008462:	4620      	mov	r0, r4
 8008464:	f7ff ffd9 	bl	800841a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESF_SI_>
				   std::forward<_Variants>(__vars)...);
 8008468:	462b      	mov	r3, r5
      }
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bdb0      	pop	{r4, r5, r7, pc}

08008472 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSJ_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	4413      	add	r3, r2
 8008484:	4618      	mov	r0, r3
 8008486:	f000 fcad 	bl	8008de4 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJS9_ifbEEEJEE9_M_accessEv>
 800848a:	4603      	mov	r3, r0
	}
 800848c:	4618      	mov	r0, r3
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>:
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 8008494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 800849e:	4b0f      	ldr	r3, [pc, #60]	; (80084dc <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_+0x48>)
 80084a0:	60fb      	str	r3, [r7, #12]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 80084a2:	6838      	ldr	r0, [r7, #0]
 80084a4:	f7ff fcd2 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 80084a8:	4603      	mov	r3, r0
 80084aa:	4619      	mov	r1, r3
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f7ff ffe0 	bl	8008472 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSJ_jDpT_>
 80084b2:	4603      	mov	r3, r0
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 80084b8:	68bc      	ldr	r4, [r7, #8]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fc9d 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80084c0:	4605      	mov	r5, r0
 80084c2:	6838      	ldr	r0, [r7, #0]
 80084c4:	f000 fbfb 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80084c8:	4603      	mov	r3, r0
 80084ca:	4619      	mov	r1, r3
 80084cc:	4628      	mov	r0, r5
 80084ce:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 80084d0:	4633      	mov	r3, r6
    }
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084da:	bf00      	nop
 80084dc:	0801d20c 	.word	0x0801d20c

080084e0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEv>:
      constexpr void _M_reset_impl()
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
	__do_visit([](auto&& __this_mem) mutable
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7ff fd6b 	bl	8007fc4 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant16_Variant_storageILb0EJS5_ifbEEEEDcOT0_>
 80084ee:	4602      	mov	r2, r0
 80084f0:	f107 030c 	add.w	r3, r7, #12
 80084f4:	4611      	mov	r1, r2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff ffcc 	bl	8008494 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>
      }
 80084fc:	bf00      	nop
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	689b      	ldr	r3, [r3, #8]
      }
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3304      	adds	r3, #4
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008534:	b590      	push	{r4, r7, lr}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
 8008540:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d01b      	beq.n	8008580 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8008548:	68fc      	ldr	r4, [r7, #12]
 800854a:	68b8      	ldr	r0, [r7, #8]
 800854c:	f7fc ff57 	bl	80053fe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8008550:	4603      	mov	r3, r0
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	4619      	mov	r1, r3
 8008556:	4620      	mov	r0, r4
 8008558:	f7fc fa56 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 800855c:	4603      	mov	r3, r0
 800855e:	f083 0301 	eor.w	r3, r3, #1
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b00      	cmp	r3, #0
 8008566:	d006      	beq.n	8008576 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	607b      	str	r3, [r7, #4]
 800856c:	68b8      	ldr	r0, [r7, #8]
 800856e:	f000 fc4f 	bl	8008e10 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8008572:	60b8      	str	r0, [r7, #8]
 8008574:	e7e5      	b.n	8008542 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8008576:	68b8      	ldr	r0, [r7, #8]
 8008578:	f000 fc56 	bl	8008e28 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>
 800857c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800857e:	e7e0      	b.n	8008542 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 8008580:	f107 0314 	add.w	r3, r7, #20
 8008584:	6879      	ldr	r1, [r7, #4]
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f819 	bl	80085be <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1EPKSt18_Rb_tree_node_base>
 800858c:	697b      	ldr	r3, [r7, #20]
    }
 800858e:	4618      	mov	r0, r3
 8008590:	371c      	adds	r7, #28
 8008592:	46bd      	mov	sp, r7
 8008594:	bd90      	pop	{r4, r7, pc}

08008596 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8008596:	b480      	push	{r7}
 8008598:	b083      	sub	sp, #12
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	bf0c      	ite	eq
 80085ac:	2301      	moveq	r3, #1
 80085ae:	2300      	movne	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	4618      	mov	r0, r3
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	689b      	ldr	r3, [r3, #8]
      }
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3304      	adds	r3, #4
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800860c:	b590      	push	{r4, r7, lr}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01b      	beq.n	8008658 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8008620:	68fc      	ldr	r4, [r7, #12]
 8008622:	68b8      	ldr	r0, [r7, #8]
 8008624:	f7fd f840 	bl	80056a8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8008628:	4603      	mov	r3, r0
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	4619      	mov	r1, r3
 800862e:	4620      	mov	r0, r4
 8008630:	f7fc f9ea 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8008634:	4603      	mov	r3, r0
 8008636:	f083 0301 	eor.w	r3, r3, #1
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d006      	beq.n	800864e <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	607b      	str	r3, [r7, #4]
 8008644:	68b8      	ldr	r0, [r7, #8]
 8008646:	f000 fbfb 	bl	8008e40 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>
 800864a:	60b8      	str	r0, [r7, #8]
 800864c:	e7e5      	b.n	800861a <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 800864e:	68b8      	ldr	r0, [r7, #8]
 8008650:	f000 fc02 	bl	8008e58 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8008654:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8008656:	e7e0      	b.n	800861a <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 8008658:	f107 0314 	add.w	r3, r7, #20
 800865c:	6879      	ldr	r1, [r7, #4]
 800865e:	4618      	mov	r0, r3
 8008660:	f000 f819 	bl	8008696 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1EPKSt18_Rb_tree_node_base>
 8008664:	697b      	ldr	r3, [r7, #20]
    }
 8008666:	4618      	mov	r0, r3
 8008668:	371c      	adds	r7, #28
 800866a:	46bd      	mov	sp, r7
 800866c:	bd90      	pop	{r4, r7, pc}

0800866e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	429a      	cmp	r2, r3
 8008682:	bf0c      	ite	eq
 8008684:	2301      	moveq	r3, #1
 8008686:	2300      	movne	r3, #0
 8008688:	b2db      	uxtb	r3, r3
 800868a:	4618      	mov	r0, r3
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
      }
 80086c0:	4618      	mov	r0, r3
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80086e4:	b590      	push	{r4, r7, lr}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d01b      	beq.n	8008730 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80086f8:	68fc      	ldr	r4, [r7, #12]
 80086fa:	68b8      	ldr	r0, [r7, #8]
 80086fc:	f7fc ff27 	bl	800554e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8008700:	4603      	mov	r3, r0
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	4619      	mov	r1, r3
 8008706:	4620      	mov	r0, r4
 8008708:	f7fc fb13 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800870c:	4603      	mov	r3, r0
 800870e:	f083 0301 	eor.w	r3, r3, #1
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	d006      	beq.n	8008726 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	607b      	str	r3, [r7, #4]
 800871c:	68b8      	ldr	r0, [r7, #8]
 800871e:	f000 fba7 	bl	8008e70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8008722:	60b8      	str	r0, [r7, #8]
 8008724:	e7e5      	b.n	80086f2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 8008726:	68b8      	ldr	r0, [r7, #8]
 8008728:	f000 fbae 	bl	8008e88 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPKSt18_Rb_tree_node_base>
 800872c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800872e:	e7e0      	b.n	80086f2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0xe>
      return const_iterator(__y);
 8008730:	f107 0314 	add.w	r3, r7, #20
 8008734:	6879      	ldr	r1, [r7, #4]
 8008736:	4618      	mov	r0, r3
 8008738:	f000 f819 	bl	800876e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPKSt18_Rb_tree_node_base>
 800873c:	697b      	ldr	r3, [r7, #20]
    }
 800873e:	4618      	mov	r0, r3
 8008740:	371c      	adds	r7, #28
 8008742:	46bd      	mov	sp, r7
 8008744:	bd90      	pop	{r4, r7, pc}

08008746 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8008746:	b480      	push	{r7}
 8008748:	b083      	sub	sp, #12
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	bf0c      	ite	eq
 800875c:	2301      	moveq	r3, #1
 800875e:	2300      	movne	r3, #0
 8008760:	b2db      	uxtb	r3, r3
 8008762:	4618      	mov	r0, r3
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJS7_EEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 800878c:	b590      	push	{r4, r7, lr}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	7239      	strb	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
	    _Type(std::forward<_Args>(__args)...);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7fe fdb9 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800879e:	4604      	mov	r4, r0
	  ::new ((void*)std::addressof(_M_storage))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff fc02 	bl	8007fac <_ZSt9addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 80087a8:	4603      	mov	r3, r0
 80087aa:	4619      	mov	r1, r3
 80087ac:	2018      	movs	r0, #24
 80087ae:	f7f8 fc15 	bl	8000fdc <_ZnwjPv>
 80087b2:	4603      	mov	r3, r0
 80087b4:	4621      	mov	r1, r4
 80087b6:	4618      	mov	r0, r3
 80087b8:	f011 f87d 	bl	80198b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	}
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd90      	pop	{r4, r7, pc}

080087c6 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJS7_EEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 80087c6:	b5b0      	push	{r4, r5, r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	7239      	strb	r1, [r7, #8]
 80087d0:	607a      	str	r2, [r7, #4]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 80087d2:	68fc      	ldr	r4, [r7, #12]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7fe fd9b 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80087da:	4603      	mov	r3, r0
 80087dc:	461a      	mov	r2, r3
 80087de:	4629      	mov	r1, r5
 80087e0:	4620      	mov	r0, r4
 80087e2:	f7ff ffd3 	bl	800878c <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJS7_EEESt16in_place_index_tILj0EEDpOT_>
	{ }
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bdb0      	pop	{r4, r5, r7, pc}

080087f0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 80087f0:	b5b0      	push	{r4, r5, r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	7239      	strb	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
	_M_index(_Np)
 80087fc:	68fc      	ldr	r4, [r7, #12]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7fe fd86 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008804:	4603      	mov	r3, r0
 8008806:	461a      	mov	r2, r3
 8008808:	4629      	mov	r1, r5
 800880a:	4620      	mov	r0, r4
 800880c:	f7ff ffdb 	bl	80087c6 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJS7_EEESt16in_place_index_tILj0EEDpOT_>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	761a      	strb	r2, [r3, #24]
	{ }
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bdb0      	pop	{r4, r5, r7, pc}

08008820 <_ZNSt8__detail9__variant14_UninitializedIiLb1EEC1IJiEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	7239      	strb	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
	: _M_storage(std::forward<_Args>(__args)...)
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7fe fda6 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8008832:	4603      	mov	r3, r0
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	601a      	str	r2, [r3, #0]
	{ }
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1IJiEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 8008844:	b5b0      	push	{r4, r5, r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	7239      	strb	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 8008850:	68fc      	ldr	r4, [r7, #12]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7fe fd93 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8008858:	4603      	mov	r3, r0
 800885a:	461a      	mov	r2, r3
 800885c:	4629      	mov	r1, r5
 800885e:	4620      	mov	r0, r4
 8008860:	f7ff ffde 	bl	8008820 <_ZNSt8__detail9__variant14_UninitializedIiLb1EEC1IJiEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bdb0      	pop	{r4, r5, r7, pc}

0800886e <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 800886e:	b5b0      	push	{r4, r5, r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	60f8      	str	r0, [r7, #12]
 8008876:	7239      	strb	r1, [r7, #8]
 8008878:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 800887a:	68fc      	ldr	r4, [r7, #12]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7fe fd7e 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8008882:	4603      	mov	r3, r0
 8008884:	461a      	mov	r2, r3
 8008886:	4629      	mov	r1, r5
 8008888:	4620      	mov	r0, r4
 800888a:	f7ff ffdb 	bl	8008844 <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1IJiEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bdb0      	pop	{r4, r5, r7, pc}

08008898 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 8008898:	b5b0      	push	{r4, r5, r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	7239      	strb	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
	_M_index(_Np)
 80088a4:	68fc      	ldr	r4, [r7, #12]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7fe fd69 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80088ac:	4603      	mov	r3, r0
 80088ae:	461a      	mov	r2, r3
 80088b0:	4629      	mov	r1, r5
 80088b2:	4620      	mov	r0, r4
 80088b4:	f7ff ffdb 	bl	800886e <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2201      	movs	r2, #1
 80088bc:	761a      	strb	r2, [r3, #24]
	{ }
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bdb0      	pop	{r4, r5, r7, pc}

080088c8 <_ZNSt8__detail9__variant14_UninitializedIfLb1EEC1IJfEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	7239      	strb	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
	: _M_storage(std::forward<_Args>(__args)...)
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7fe fd89 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80088da:	4603      	mov	r3, r0
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	601a      	str	r2, [r3, #0]
	{ }
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1IJfEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 80088ec:	b5b0      	push	{r4, r5, r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	7239      	strb	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 80088f8:	68fc      	ldr	r4, [r7, #12]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7fe fd76 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8008900:	4603      	mov	r3, r0
 8008902:	461a      	mov	r2, r3
 8008904:	4629      	mov	r1, r5
 8008906:	4620      	mov	r0, r4
 8008908:	f7ff ffde 	bl	80088c8 <_ZNSt8__detail9__variant14_UninitializedIfLb1EEC1IJfEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bdb0      	pop	{r4, r5, r7, pc}

08008916 <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1ILj1EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 8008916:	b5b0      	push	{r4, r5, r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	7239      	strb	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 8008922:	68fc      	ldr	r4, [r7, #12]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7fe fd61 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800892a:	4603      	mov	r3, r0
 800892c:	461a      	mov	r2, r3
 800892e:	4629      	mov	r1, r5
 8008930:	4620      	mov	r0, r4
 8008932:	f7ff ffdb 	bl	80088ec <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1IJfEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bdb0      	pop	{r4, r5, r7, pc}

08008940 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 8008940:	b5b0      	push	{r4, r5, r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	7239      	strb	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 800894c:	68fc      	ldr	r4, [r7, #12]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7fe fd4c 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8008954:	4603      	mov	r3, r0
 8008956:	461a      	mov	r2, r3
 8008958:	4629      	mov	r1, r5
 800895a:	4620      	mov	r0, r4
 800895c:	f7ff ffdb 	bl	8008916 <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1ILj1EJfEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bdb0      	pop	{r4, r5, r7, pc}

0800896a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 800896a:	b5b0      	push	{r4, r5, r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	7239      	strb	r1, [r7, #8]
 8008974:	607a      	str	r2, [r7, #4]
	_M_index(_Np)
 8008976:	68fc      	ldr	r4, [r7, #12]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7fe fd37 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800897e:	4603      	mov	r3, r0
 8008980:	461a      	mov	r2, r3
 8008982:	4629      	mov	r1, r5
 8008984:	4620      	mov	r0, r4
 8008986:	f7ff ffdb 	bl	8008940 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2202      	movs	r2, #2
 800898e:	761a      	strb	r2, [r3, #24]
	{ }
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bdb0      	pop	{r4, r5, r7, pc}

0800899a <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1Ev>:
      constexpr _Variadic_union() : _M_rest() { }
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 fa7b 	bl	8008ea0 <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1Ev>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <_ZSt7forwardIRKNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4618      	mov	r0, r3
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4618      	mov	r0, r3
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80089f6:	b480      	push	{r7}
 80089f8:	b083      	sub	sp, #12
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <_ZNKRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>:
      const _Type& _M_get() const & noexcept
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
      { return *_M_storage._M_ptr(); }
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fa4f 	bl	8008eba <_ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKS8_EENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f8a1 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008a36:	4604      	mov	r4, r0
 8008a38:	6838      	ldr	r0, [r7, #0]
 8008a3a:	f000 fa4a 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	461a      	mov	r2, r3
 8008a42:	4621      	mov	r1, r4
 8008a44:	4628      	mov	r0, r5
 8008a46:	f000 fa4f 	bl	8008ee8 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKS9_EESJ_St14__invoke_otherSG_DpOT1_>
					std::forward<_Args>(__args)...);
 8008a4a:	4633      	mov	r3, r6
    }
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a54 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <_ZNKRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>:
      constexpr const _Type& _M_get() const & noexcept
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4618      	mov	r0, r3
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKiEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f874 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008a90:	4604      	mov	r4, r0
 8008a92:	6838      	ldr	r0, [r7, #0]
 8008a94:	f000 fa3f 	bl	8008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f000 fa44 	bl	8008f2c <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKiEESJ_St14__invoke_otherSG_DpOT1_>
					std::forward<_Args>(__args)...);
 8008aa4:	4633      	mov	r3, r6
    }
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008aae <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <_ZNKRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>:
      constexpr const _Type& _M_get() const & noexcept
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKfEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008ada:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008adc:	b083      	sub	sp, #12
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f847 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008aea:	4604      	mov	r4, r0
 8008aec:	6838      	ldr	r0, [r7, #0]
 8008aee:	f000 fa34 	bl	8008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8008af2:	4603      	mov	r3, r0
 8008af4:	461a      	mov	r2, r3
 8008af6:	4621      	mov	r1, r4
 8008af8:	4628      	mov	r0, r5
 8008afa:	f000 fa39 	bl	8008f70 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKfEESJ_St14__invoke_otherSG_DpOT1_>
					std::forward<_Args>(__args)...);
 8008afe:	4633      	mov	r3, r6
    }
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b08 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJbEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <_ZNKRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>:
      constexpr const _Type& _M_get() const & noexcept
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKbEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f81a 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008b44:	4604      	mov	r4, r0
 8008b46:	6838      	ldr	r0, [r7, #0]
 8008b48:	f000 fa29 	bl	8008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4621      	mov	r1, r4
 8008b52:	4628      	mov	r0, r5
 8008b54:	f000 fa2e 	bl	8008fb4 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKbEESJ_St14__invoke_otherSG_DpOT1_>
					std::forward<_Args>(__args)...);
 8008b58:	4633      	mov	r3, r6
    }
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b62 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS9_ifbEEEJEE9_M_accessEv>:
      _M_access() const
 8008b62:	b480      	push	{r7}
 8008b64:	b083      	sub	sp, #12
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4618      	mov	r0, r3
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <_ZNSt8__detail9__variant14_UninitializedIbLb1EEC1IJRA19_KcEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	60f8      	str	r0, [r7, #12]
 8008b96:	7239      	strb	r1, [r7, #8]
 8008b98:	607a      	str	r2, [r7, #4]
	: _M_storage(std::forward<_Args>(__args)...)
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7fe fc6f 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	bf14      	ite	ne
 8008ba6:	2301      	movne	r3, #1
 8008ba8:	2300      	moveq	r3, #0
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	701a      	strb	r2, [r3, #0]
	{ }
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <_ZNSt8__detail9__variant15_Variadic_unionIJbEEC1IJRA19_KcEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 8008bba:	b5b0      	push	{r4, r5, r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	60f8      	str	r0, [r7, #12]
 8008bc2:	7239      	strb	r1, [r7, #8]
 8008bc4:	607a      	str	r2, [r7, #4]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 8008bc6:	68fc      	ldr	r4, [r7, #12]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7fe fc58 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f7ff ffda 	bl	8008b8e <_ZNSt8__detail9__variant14_UninitializedIbLb1EEC1IJRA19_KcEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bdb0      	pop	{r4, r5, r7, pc}

08008be4 <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1ILj1EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 8008be4:	b5b0      	push	{r4, r5, r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	7239      	strb	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 8008bf0:	68fc      	ldr	r4, [r7, #12]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7fe fc43 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f7ff ffdb 	bl	8008bba <_ZNSt8__detail9__variant15_Variadic_unionIJbEEC1IJRA19_KcEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bdb0      	pop	{r4, r5, r7, pc}

08008c0e <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1ILj2EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 8008c0e:	b5b0      	push	{r4, r5, r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	7239      	strb	r1, [r7, #8]
 8008c18:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 8008c1a:	68fc      	ldr	r4, [r7, #12]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7fe fc2e 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8008c22:	4603      	mov	r3, r0
 8008c24:	461a      	mov	r2, r3
 8008c26:	4629      	mov	r1, r5
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f7ff ffdb 	bl	8008be4 <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1ILj1EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bdb0      	pop	{r4, r5, r7, pc}

08008c38 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 8008c38:	b5b0      	push	{r4, r5, r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	7239      	strb	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 8008c44:	68fc      	ldr	r4, [r7, #12]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7fe fc19 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	461a      	mov	r2, r3
 8008c50:	4629      	mov	r1, r5
 8008c52:	4620      	mov	r0, r4
 8008c54:	f7ff ffdb 	bl	8008c0e <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1ILj2EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bdb0      	pop	{r4, r5, r7, pc}

08008c62 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 8008c62:	b5b0      	push	{r4, r5, r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	7239      	strb	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
	_M_index(_Np)
 8008c6e:	68fc      	ldr	r4, [r7, #12]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7fe fc04 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8008c76:	4603      	mov	r3, r0
 8008c78:	461a      	mov	r2, r3
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f7ff ffdb 	bl	8008c38 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2203      	movs	r2, #3
 8008c86:	761a      	strb	r2, [r3, #24]
	{ }
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bdb0      	pop	{r4, r5, r7, pc}

08008c92 <_ZSt11__addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008cbe:	b480      	push	{r7}
 8008cc0:	b083      	sub	sp, #12
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRS8_EENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008cea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f880 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	6838      	ldr	r0, [r7, #0]
 8008cfe:	f7fc fa9b 	bl	8005238 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8008d02:	4603      	mov	r3, r0
 8008d04:	461a      	mov	r2, r3
 8008d06:	4621      	mov	r1, r4
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f000 f96a 	bl	8008fe2 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRS9_EESB_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8008d0e:	4633      	mov	r3, r6
    }
 8008d10:	4618      	mov	r0, r3
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d18 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4618      	mov	r0, r3
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRiEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f85e 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008d3e:	4604      	mov	r4, r0
 8008d40:	6838      	ldr	r0, [r7, #0]
 8008d42:	f7fc fa29 	bl	8005198 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8008d46:	4603      	mov	r3, r0
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f000 f95f 	bl	8009010 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRiEESB_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8008d52:	4633      	mov	r3, r6
    }
 8008d54:	4618      	mov	r0, r3
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d5c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4618      	mov	r0, r3
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRfEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008d72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f83c 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008d82:	4604      	mov	r4, r0
 8008d84:	6838      	ldr	r0, [r7, #0]
 8008d86:	f7fc fa29 	bl	80051dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4628      	mov	r0, r5
 8008d92:	f000 f954 	bl	800903e <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRfEESB_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8008d96:	4633      	mov	r3, r6
    }
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008da0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRbEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f81a 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	6838      	ldr	r0, [r7, #0]
 8008dca:	f7fc f9c3 	bl	8005154 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f000 f949 	bl	800906c <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRbEESB_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8008dda:	4633      	mov	r3, r6
    }
 8008ddc:	4618      	mov	r0, r3
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008de4 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJS9_ifbEEEJEE9_M_accessEv>:
      _M_access() const
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4618      	mov	r0, r3
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4618      	mov	r0, r3
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	4618      	mov	r0, r3
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1Ev>:
      constexpr _Variadic_union() : _M_rest() { }
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f8f5 	bl	800909a <_ZNSt8__detail9__variant15_Variadic_unionIJbEEC1Ev>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <_ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f8f4 	bl	80090b0 <_ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKS9_EESJ_St14__invoke_otherSG_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008ee8:	b5b0      	push	{r4, r5, r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	7338      	strb	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008ef4:	68b8      	ldr	r0, [r7, #8]
 8008ef6:	f7ff fe3f 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008efa:	4604      	mov	r4, r0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff ffe8 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8008f02:	4603      	mov	r3, r0
 8008f04:	4619      	mov	r1, r3
 8008f06:	4620      	mov	r0, r4
 8008f08:	f000 f8dd 	bl	80090c6 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKS7_EENS0_16__variant_cookieESI_>
 8008f0c:	462b      	mov	r3, r5
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bdb0      	pop	{r4, r5, r7, pc}

08008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008f16:	b480      	push	{r7}
 8008f18:	b083      	sub	sp, #12
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKiEESJ_St14__invoke_otherSG_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008f2c:	b5b0      	push	{r4, r5, r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	7338      	strb	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008f38:	68b8      	ldr	r0, [r7, #8]
 8008f3a:	f7ff fe1d 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008f3e:	4604      	mov	r4, r0
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff ffe8 	bl	8008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f46:	4603      	mov	r3, r0
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 f8d3 	bl	80090f6 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKiEENS0_16__variant_cookieESI_>
 8008f50:	462b      	mov	r3, r5
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bdb0      	pop	{r4, r5, r7, pc}

08008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008f5a:	b480      	push	{r7}
 8008f5c:	b083      	sub	sp, #12
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4618      	mov	r0, r3
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKfEESJ_St14__invoke_otherSG_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008f70:	b5b0      	push	{r4, r5, r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	7338      	strb	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008f7c:	68b8      	ldr	r0, [r7, #8]
 8008f7e:	f7ff fdfb 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008f82:	4604      	mov	r4, r0
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff ffe8 	bl	8008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f000 f8c9 	bl	8009126 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKfEENS0_16__variant_cookieESI_>
 8008f94:	462b      	mov	r3, r5
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bdb0      	pop	{r4, r5, r7, pc}

08008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKbEESJ_St14__invoke_otherSG_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008fb4:	b5b0      	push	{r4, r5, r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	7338      	strb	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008fc0:	68b8      	ldr	r0, [r7, #8]
 8008fc2:	f7ff fdd9 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff ffe8 	bl	8008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f000 f8bf 	bl	8009156 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKbEENS0_16__variant_cookieESI_>
 8008fd8:	462b      	mov	r3, r5
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bdb0      	pop	{r4, r5, r7, pc}

08008fe2 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRS9_EESB_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008fe2:	b5b0      	push	{r4, r5, r7, lr}
 8008fe4:	b084      	sub	sp, #16
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	7338      	strb	r0, [r7, #12]
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008fee:	68b8      	ldr	r0, [r7, #8]
 8008ff0:	f7ff ff03 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7fc f91e 	bl	8005238 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	4619      	mov	r1, r3
 8009000:	4620      	mov	r0, r4
 8009002:	f000 f8c0 	bl	8009186 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRS7_EENS0_16__variant_cookieESA_>
 8009006:	462b      	mov	r3, r5
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bdb0      	pop	{r4, r5, r7, pc}

08009010 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRiEESB_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8009010:	b5b0      	push	{r4, r5, r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	7338      	strb	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800901c:	68b8      	ldr	r0, [r7, #8]
 800901e:	f7ff feec 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8009022:	4604      	mov	r4, r0
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7fc f8b7 	bl	8005198 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800902a:	4603      	mov	r3, r0
 800902c:	4619      	mov	r1, r3
 800902e:	4620      	mov	r0, r4
 8009030:	f000 f8ba 	bl	80091a8 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRiEENS0_16__variant_cookieESA_>
 8009034:	462b      	mov	r3, r5
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bdb0      	pop	{r4, r5, r7, pc}

0800903e <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRfEESB_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800903e:	b5b0      	push	{r4, r5, r7, lr}
 8009040:	b084      	sub	sp, #16
 8009042:	af00      	add	r7, sp, #0
 8009044:	7338      	strb	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800904a:	68b8      	ldr	r0, [r7, #8]
 800904c:	f7ff fed5 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8009050:	4604      	mov	r4, r0
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7fc f8c2 	bl	80051dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8009058:	4603      	mov	r3, r0
 800905a:	4619      	mov	r1, r3
 800905c:	4620      	mov	r0, r4
 800905e:	f000 f8b4 	bl	80091ca <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRfEENS0_16__variant_cookieESA_>
 8009062:	462b      	mov	r3, r5
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bdb0      	pop	{r4, r5, r7, pc}

0800906c <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRbEESB_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800906c:	b5b0      	push	{r4, r5, r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	7338      	strb	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8009078:	68b8      	ldr	r0, [r7, #8]
 800907a:	f7ff febe 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 800907e:	4604      	mov	r4, r0
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7fc f867 	bl	8005154 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8009086:	4603      	mov	r3, r0
 8009088:	4619      	mov	r1, r3
 800908a:	4620      	mov	r0, r4
 800908c:	f000 f8ae 	bl	80091ec <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRbEENS0_16__variant_cookieESA_>
 8009090:	462b      	mov	r3, r5
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bdb0      	pop	{r4, r5, r7, pc}

0800909a <_ZNSt8__detail9__variant15_Variadic_unionIJbEEC1Ev>:
 800909a:	b480      	push	{r7}
 800909c:	b083      	sub	sp, #12
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <_ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv>:
      _M_addr() const noexcept
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKS7_EENS0_16__variant_cookieESI_>:
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 80090c6:	b5b0      	push	{r4, r5, r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
	  __variant_construct_single(std::forward<_Tp>(__lhs),
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f89a 	bl	800920e <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 80090da:	4604      	mov	r4, r0
 80090dc:	6838      	ldr	r0, [r7, #0]
 80090de:	f7ff fef8 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80090e2:	4603      	mov	r3, r0
 80090e4:	4619      	mov	r1, r3
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 f8b3 	bl	8009252 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKS8_EEvOT_OT0_>
	  return {};
 80090ec:	462b      	mov	r3, r5
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bdb0      	pop	{r4, r5, r7, pc}

080090f6 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKiEENS0_16__variant_cookieESI_>:
 80090f6:	b5b0      	push	{r4, r5, r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
	  __variant_construct_single(std::forward<_Tp>(__lhs),
 8009104:	4618      	mov	r0, r3
 8009106:	f000 f882 	bl	800920e <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800910a:	4604      	mov	r4, r0
 800910c:	6838      	ldr	r0, [r7, #0]
 800910e:	f7ff ff02 	bl	8008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8009112:	4603      	mov	r3, r0
 8009114:	4619      	mov	r1, r3
 8009116:	4620      	mov	r0, r4
 8009118:	f000 f8b7 	bl	800928a <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKiEEvOT_OT0_>
	  return {};
 800911c:	462b      	mov	r3, r5
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bdb0      	pop	{r4, r5, r7, pc}

08009126 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKfEENS0_16__variant_cookieESI_>:
 8009126:	b5b0      	push	{r4, r5, r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	6039      	str	r1, [r7, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
	  __variant_construct_single(std::forward<_Tp>(__lhs),
 8009134:	4618      	mov	r0, r3
 8009136:	f000 f86a 	bl	800920e <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800913a:	4604      	mov	r4, r0
 800913c:	6838      	ldr	r0, [r7, #0]
 800913e:	f7ff ff0c 	bl	8008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8009142:	4603      	mov	r3, r0
 8009144:	4619      	mov	r1, r3
 8009146:	4620      	mov	r0, r4
 8009148:	f000 f8b9 	bl	80092be <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKfEEvOT_OT0_>
	  return {};
 800914c:	462b      	mov	r3, r5
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bdb0      	pop	{r4, r5, r7, pc}

08009156 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKbEENS0_16__variant_cookieESI_>:
 8009156:	b5b0      	push	{r4, r5, r7, lr}
 8009158:	b082      	sub	sp, #8
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
	  __variant_construct_single(std::forward<_Tp>(__lhs),
 8009164:	4618      	mov	r0, r3
 8009166:	f000 f852 	bl	800920e <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800916a:	4604      	mov	r4, r0
 800916c:	6838      	ldr	r0, [r7, #0]
 800916e:	f7ff ff16 	bl	8008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 8009172:	4603      	mov	r3, r0
 8009174:	4619      	mov	r1, r3
 8009176:	4620      	mov	r0, r4
 8009178:	f000 f8bb 	bl	80092f2 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKbEEvOT_OT0_>
	  return {};
 800917c:	462b      	mov	r3, r5
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bdb0      	pop	{r4, r5, r7, pc}

08009186 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRS7_EENS0_16__variant_cookieESA_>:
	__do_visit([](auto&& __this_mem) mutable
 8009186:	b590      	push	{r4, r7, lr}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 8009190:	6838      	ldr	r0, [r7, #0]
 8009192:	f7fc fce9 	bl	8005b68 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8009196:	4603      	mov	r3, r0
 8009198:	4618      	mov	r0, r3
 800919a:	f7fc fcf0 	bl	8005b7e <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	    return {};
 800919e:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80091a0:	4618      	mov	r0, r3
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd90      	pop	{r4, r7, pc}

080091a8 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRiEENS0_16__variant_cookieESA_>:
 80091a8:	b590      	push	{r4, r7, lr}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80091b2:	6838      	ldr	r0, [r7, #0]
 80091b4:	f7fc fcae 	bl	8005b14 <_ZSt11__addressofIiEPT_RS0_>
 80091b8:	4603      	mov	r3, r0
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fc fcb5 	bl	8005b2a <_ZSt8_DestroyIiEvPT_>
	    return {};
 80091c0:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80091c2:	4618      	mov	r0, r3
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd90      	pop	{r4, r7, pc}

080091ca <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRfEENS0_16__variant_cookieESA_>:
 80091ca:	b590      	push	{r4, r7, lr}
 80091cc:	b083      	sub	sp, #12
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80091d4:	6838      	ldr	r0, [r7, #0]
 80091d6:	f7fc fcb2 	bl	8005b3e <_ZSt11__addressofIfEPT_RS0_>
 80091da:	4603      	mov	r3, r0
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fc fcb9 	bl	8005b54 <_ZSt8_DestroyIfEvPT_>
	    return {};
 80091e2:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80091e4:	4618      	mov	r0, r3
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd90      	pop	{r4, r7, pc}

080091ec <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRbEENS0_16__variant_cookieESA_>:
 80091ec:	b590      	push	{r4, r7, lr}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80091f6:	6838      	ldr	r0, [r7, #0]
 80091f8:	f7fc fc77 	bl	8005aea <_ZSt11__addressofIbEPT_RS0_>
 80091fc:	4603      	mov	r3, r0
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fc fc7e 	bl	8005b00 <_ZSt8_DestroyIbEvPT_>
	    return {};
 8009204:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 8009206:	4618      	mov	r0, r3
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	bd90      	pop	{r4, r7, pc}

0800920e <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>:
    addressof(_Tp& __r) noexcept
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f805 	bl	800923c <_ZSt11__addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 8009232:	4603      	mov	r3, r0
 8009234:	4618      	mov	r0, r3
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <_ZSt11__addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4618      	mov	r0, r3
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKS8_EEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 8009252:	b590      	push	{r4, r7, lr}
 8009254:	b085      	sub	sp, #20
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff ffe0 	bl	8009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 8009264:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 8009266:	6838      	ldr	r0, [r7, #0]
 8009268:	f7ff fe33 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800926c:	4604      	mov	r4, r0
        ::new (__storage)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	4619      	mov	r1, r3
 8009272:	2018      	movs	r0, #24
 8009274:	f7f7 feb2 	bl	8000fdc <_ZnwjPv>
 8009278:	4603      	mov	r3, r0
 800927a:	4621      	mov	r1, r4
 800927c:	4618      	mov	r0, r3
 800927e:	f010 fc61 	bl	8019b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    }
 8009282:	bf00      	nop
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	bd90      	pop	{r4, r7, pc}

0800928a <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKiEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 800928a:	b590      	push	{r4, r7, lr}
 800928c:	b085      	sub	sp, #20
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4618      	mov	r0, r3
 8009298:	f7ff ffc4 	bl	8009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 800929c:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 800929e:	6838      	ldr	r0, [r7, #0]
 80092a0:	f7ff fe39 	bl	8008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 80092a4:	4603      	mov	r3, r0
        ::new (__storage)
 80092a6:	681c      	ldr	r4, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4619      	mov	r1, r3
 80092ac:	2004      	movs	r0, #4
 80092ae:	f7f7 fe95 	bl	8000fdc <_ZnwjPv>
 80092b2:	4603      	mov	r3, r0
 80092b4:	601c      	str	r4, [r3, #0]
    }
 80092b6:	bf00      	nop
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd90      	pop	{r4, r7, pc}

080092be <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKfEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 80092be:	b590      	push	{r4, r7, lr}
 80092c0:	b085      	sub	sp, #20
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7ff ffaa 	bl	8009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 80092d0:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 80092d2:	6838      	ldr	r0, [r7, #0]
 80092d4:	f7ff fe41 	bl	8008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80092d8:	4603      	mov	r3, r0
        ::new (__storage)
 80092da:	681c      	ldr	r4, [r3, #0]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4619      	mov	r1, r3
 80092e0:	2004      	movs	r0, #4
 80092e2:	f7f7 fe7b 	bl	8000fdc <_ZnwjPv>
 80092e6:	4603      	mov	r3, r0
 80092e8:	601c      	str	r4, [r3, #0]
    }
 80092ea:	bf00      	nop
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd90      	pop	{r4, r7, pc}

080092f2 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKbEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 80092f2:	b590      	push	{r4, r7, lr}
 80092f4:	b085      	sub	sp, #20
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff ff90 	bl	8009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 8009304:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 8009306:	6838      	ldr	r0, [r7, #0]
 8009308:	f7ff fe49 	bl	8008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 800930c:	4603      	mov	r3, r0
        ::new (__storage)
 800930e:	781c      	ldrb	r4, [r3, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4619      	mov	r1, r3
 8009314:	2001      	movs	r0, #1
 8009316:	f7f7 fe61 	bl	8000fdc <_ZnwjPv>
 800931a:	4603      	mov	r3, r0
 800931c:	4622      	mov	r2, r4
 800931e:	701a      	strb	r2, [r3, #0]
    }
 8009320:	bf00      	nop
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	bd90      	pop	{r4, r7, pc}

08009328 <_Z41__static_initialization_and_destruction_0ii>:
 8009328:	b590      	push	{r4, r7, lr}
 800932a:	b0e7      	sub	sp, #412	; 0x19c
 800932c:	af02      	add	r7, sp, #8
 800932e:	1d3b      	adds	r3, r7, #4
 8009330:	6018      	str	r0, [r3, #0]
 8009332:	463b      	mov	r3, r7
 8009334:	6019      	str	r1, [r3, #0]
 8009336:	1d3b      	adds	r3, r7, #4
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b01      	cmp	r3, #1
 800933c:	f040 819d 	bne.w	800967a <_Z41__static_initialization_and_destruction_0ii+0x352>
 8009340:	463b      	mov	r3, r7
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009348:	4293      	cmp	r3, r2
 800934a:	f040 8196 	bne.w	800967a <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 800934e:	f107 0314 	add.w	r3, r7, #20
 8009352:	4618      	mov	r0, r3
 8009354:	2322      	movs	r3, #34	; 0x22
 8009356:	461a      	mov	r2, r3
 8009358:	2100      	movs	r1, #0
 800935a:	f010 fcb5 	bl	8019cc8 <memset>
 800935e:	f107 0314 	add.w	r3, r7, #20
 8009362:	223a      	movs	r2, #58	; 0x3a
 8009364:	701a      	strb	r2, [r3, #0]
 8009366:	f107 0314 	add.w	r3, r7, #20
 800936a:	2201      	movs	r2, #1
 800936c:	705a      	strb	r2, [r3, #1]
 800936e:	f107 0314 	add.w	r3, r7, #20
 8009372:	220a      	movs	r2, #10
 8009374:	709a      	strb	r2, [r3, #2]
 8009376:	f107 0314 	add.w	r3, r7, #20
 800937a:	220a      	movs	r2, #10
 800937c:	70da      	strb	r2, [r3, #3]
 800937e:	f107 0314 	add.w	r3, r7, #20
 8009382:	222c      	movs	r2, #44	; 0x2c
 8009384:	711a      	strb	r2, [r3, #4]
 8009386:	f107 0314 	add.w	r3, r7, #20
 800938a:	220c      	movs	r2, #12
 800938c:	715a      	strb	r2, [r3, #5]
 800938e:	f107 0314 	add.w	r3, r7, #20
 8009392:	222e      	movs	r2, #46	; 0x2e
 8009394:	719a      	strb	r2, [r3, #6]
 8009396:	f107 0314 	add.w	r3, r7, #20
 800939a:	220b      	movs	r2, #11
 800939c:	71da      	strb	r2, [r3, #7]
 800939e:	f107 0314 	add.w	r3, r7, #20
 80093a2:	225b      	movs	r2, #91	; 0x5b
 80093a4:	721a      	strb	r2, [r3, #8]
 80093a6:	f107 0314 	add.w	r3, r7, #20
 80093aa:	220d      	movs	r2, #13
 80093ac:	725a      	strb	r2, [r3, #9]
 80093ae:	f107 0314 	add.w	r3, r7, #20
 80093b2:	225d      	movs	r2, #93	; 0x5d
 80093b4:	729a      	strb	r2, [r3, #10]
 80093b6:	f107 0314 	add.w	r3, r7, #20
 80093ba:	220e      	movs	r2, #14
 80093bc:	72da      	strb	r2, [r3, #11]
 80093be:	f107 0314 	add.w	r3, r7, #20
 80093c2:	227c      	movs	r2, #124	; 0x7c
 80093c4:	731a      	strb	r2, [r3, #12]
 80093c6:	f107 0314 	add.w	r3, r7, #20
 80093ca:	2215      	movs	r2, #21
 80093cc:	735a      	strb	r2, [r3, #13]
 80093ce:	f107 0314 	add.w	r3, r7, #20
 80093d2:	2226      	movs	r2, #38	; 0x26
 80093d4:	739a      	strb	r2, [r3, #14]
 80093d6:	f107 0314 	add.w	r3, r7, #20
 80093da:	2216      	movs	r2, #22
 80093dc:	73da      	strb	r2, [r3, #15]
 80093de:	f107 0314 	add.w	r3, r7, #20
 80093e2:	222b      	movs	r2, #43	; 0x2b
 80093e4:	741a      	strb	r2, [r3, #16]
 80093e6:	f107 0314 	add.w	r3, r7, #20
 80093ea:	221f      	movs	r2, #31
 80093ec:	745a      	strb	r2, [r3, #17]
 80093ee:	f107 0314 	add.w	r3, r7, #20
 80093f2:	222d      	movs	r2, #45	; 0x2d
 80093f4:	749a      	strb	r2, [r3, #18]
 80093f6:	f107 0314 	add.w	r3, r7, #20
 80093fa:	2220      	movs	r2, #32
 80093fc:	74da      	strb	r2, [r3, #19]
 80093fe:	f107 0314 	add.w	r3, r7, #20
 8009402:	222a      	movs	r2, #42	; 0x2a
 8009404:	751a      	strb	r2, [r3, #20]
 8009406:	f107 0314 	add.w	r3, r7, #20
 800940a:	2221      	movs	r2, #33	; 0x21
 800940c:	755a      	strb	r2, [r3, #21]
 800940e:	f107 0314 	add.w	r3, r7, #20
 8009412:	222f      	movs	r2, #47	; 0x2f
 8009414:	759a      	strb	r2, [r3, #22]
 8009416:	f107 0314 	add.w	r3, r7, #20
 800941a:	2222      	movs	r2, #34	; 0x22
 800941c:	75da      	strb	r2, [r3, #23]
 800941e:	f107 0314 	add.w	r3, r7, #20
 8009422:	225e      	movs	r2, #94	; 0x5e
 8009424:	761a      	strb	r2, [r3, #24]
 8009426:	f107 0314 	add.w	r3, r7, #20
 800942a:	2223      	movs	r2, #35	; 0x23
 800942c:	765a      	strb	r2, [r3, #25]
 800942e:	f107 0314 	add.w	r3, r7, #20
 8009432:	2225      	movs	r2, #37	; 0x25
 8009434:	769a      	strb	r2, [r3, #26]
 8009436:	f107 0314 	add.w	r3, r7, #20
 800943a:	2224      	movs	r2, #36	; 0x24
 800943c:	76da      	strb	r2, [r3, #27]
 800943e:	f107 0314 	add.w	r3, r7, #20
 8009442:	2228      	movs	r2, #40	; 0x28
 8009444:	771a      	strb	r2, [r3, #28]
 8009446:	f107 0314 	add.w	r3, r7, #20
 800944a:	2226      	movs	r2, #38	; 0x26
 800944c:	775a      	strb	r2, [r3, #29]
 800944e:	f107 0314 	add.w	r3, r7, #20
 8009452:	2229      	movs	r2, #41	; 0x29
 8009454:	779a      	strb	r2, [r3, #30]
 8009456:	f107 0314 	add.w	r3, r7, #20
 800945a:	2227      	movs	r2, #39	; 0x27
 800945c:	77da      	strb	r2, [r3, #31]
 800945e:	f107 0314 	add.w	r3, r7, #20
 8009462:	2225      	movs	r2, #37	; 0x25
 8009464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8009468:	f107 030c 	add.w	r3, r7, #12
 800946c:	f107 0214 	add.w	r2, r7, #20
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	f107 030c 	add.w	r3, r7, #12
 8009476:	2211      	movs	r2, #17
 8009478:	605a      	str	r2, [r3, #4]
 800947a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800947e:	4618      	mov	r0, r3
 8009480:	f7f8 f935 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8009484:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009488:	f107 020c 	add.w	r2, r7, #12
 800948c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	460b      	mov	r3, r1
 8009494:	ca06      	ldmia	r2, {r1, r2}
 8009496:	4885      	ldr	r0, [pc, #532]	; (80096ac <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8009498:	f7f8 f941 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800949c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7f8 f930 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 80094a6:	2305      	movs	r3, #5
 80094a8:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80094ac:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80094b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80094b4:	497e      	ldr	r1, [pc, #504]	; (80096b0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7f7 fdf6 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80094bc:	2306      	movs	r3, #6
 80094be:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80094c2:	f207 1263 	addw	r2, r7, #355	; 0x163
 80094c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80094ca:	331c      	adds	r3, #28
 80094cc:	4979      	ldr	r1, [pc, #484]	; (80096b4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7f7 fe12 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80094d4:	2307      	movs	r3, #7
 80094d6:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80094da:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80094de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80094e2:	3338      	adds	r3, #56	; 0x38
 80094e4:	4974      	ldr	r1, [pc, #464]	; (80096b8 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7f7 fe06 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80094ec:	2308      	movs	r3, #8
 80094ee:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80094f2:	f207 1265 	addw	r2, r7, #357	; 0x165
 80094f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80094fa:	3354      	adds	r3, #84	; 0x54
 80094fc:	496f      	ldr	r1, [pc, #444]	; (80096bc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80094fe:	4618      	mov	r0, r3
 8009500:	f7f7 fdd2 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8009504:	2309      	movs	r3, #9
 8009506:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800950a:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 800950e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009512:	3370      	adds	r3, #112	; 0x70
 8009514:	496a      	ldr	r1, [pc, #424]	; (80096c0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8009516:	4618      	mov	r0, r3
 8009518:	f7f7 fe16 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 800951c:	2310      	movs	r3, #16
 800951e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8009522:	f207 1267 	addw	r2, r7, #359	; 0x167
 8009526:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800952a:	338c      	adds	r3, #140	; 0x8c
 800952c:	4965      	ldr	r1, [pc, #404]	; (80096c4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800952e:	4618      	mov	r0, r3
 8009530:	f7f7 fe32 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8009534:	2311      	movs	r3, #17
 8009536:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800953a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800953e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009542:	33a8      	adds	r3, #168	; 0xa8
 8009544:	4960      	ldr	r1, [pc, #384]	; (80096c8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8009546:	4618      	mov	r0, r3
 8009548:	f7f7 fdfe 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 800954c:	2312      	movs	r3, #18
 800954e:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8009552:	f207 1269 	addw	r2, r7, #361	; 0x169
 8009556:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800955a:	33c4      	adds	r3, #196	; 0xc4
 800955c:	495b      	ldr	r1, [pc, #364]	; (80096cc <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800955e:	4618      	mov	r0, r3
 8009560:	f7f7 fda2 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8009564:	2313      	movs	r3, #19
 8009566:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800956a:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800956e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009572:	33e0      	adds	r3, #224	; 0xe0
 8009574:	4956      	ldr	r1, [pc, #344]	; (80096d0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8009576:	4618      	mov	r0, r3
 8009578:	f7f7 fdbe 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 800957c:	2314      	movs	r3, #20
 800957e:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8009582:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8009586:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800958a:	33fc      	adds	r3, #252	; 0xfc
 800958c:	4951      	ldr	r1, [pc, #324]	; (80096d4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800958e:	4618      	mov	r0, r3
 8009590:	f7f7 fe2a 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8009594:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009598:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80095a2:	220a      	movs	r2, #10
 80095a4:	605a      	str	r2, [r3, #4]
 80095a6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7f8 f944 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80095b0:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80095b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80095b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	460b      	mov	r3, r1
 80095c0:	ca06      	ldmia	r2, {r1, r2}
 80095c2:	4845      	ldr	r0, [pc, #276]	; (80096d8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80095c4:	f7f8 f950 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80095c8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7f8 f93f 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80095d2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80095d6:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80095da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80095de:	429c      	cmp	r4, r3
 80095e0:	d004      	beq.n	80095ec <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 80095e2:	3c1c      	subs	r4, #28
 80095e4:	4620      	mov	r0, r4
 80095e6:	f7f7 fd52 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80095ea:	e7f6      	b.n	80095da <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80095ec:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80095f0:	2200      	movs	r2, #0
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	605a      	str	r2, [r3, #4]
 80095f6:	609a      	str	r2, [r3, #8]
 80095f8:	233c      	movs	r3, #60	; 0x3c
 80095fa:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80095fe:	231b      	movs	r3, #27
 8009600:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8009604:	231c      	movs	r3, #28
 8009606:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800960a:	233e      	movs	r3, #62	; 0x3e
 800960c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8009610:	2319      	movs	r3, #25
 8009612:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8009616:	231a      	movs	r3, #26
 8009618:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 800961c:	233d      	movs	r3, #61	; 0x3d
 800961e:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8009622:	2318      	movs	r3, #24
 8009624:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8009628:	231d      	movs	r3, #29
 800962a:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800962e:	2321      	movs	r3, #33	; 0x21
 8009630:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8009634:	2317      	movs	r3, #23
 8009636:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800963a:	231e      	movs	r3, #30
 800963c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8009640:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8009644:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8009648:	2304      	movs	r3, #4
 800964a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800964e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8009652:	4618      	mov	r0, r3
 8009654:	f7f8 f938 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8009658:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800965c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	4613      	mov	r3, r2
 8009664:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8009668:	ca06      	ldmia	r2, {r1, r2}
 800966a:	481c      	ldr	r0, [pc, #112]	; (80096dc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800966c:	f7f8 f944 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8009670:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8009674:	4618      	mov	r0, r3
 8009676:	f7f8 f933 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 800967a:	1d3b      	adds	r3, r7, #4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10e      	bne.n	80096a0 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8009682:	463b      	mov	r3, r7
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800968a:	4293      	cmp	r3, r2
 800968c:	d108      	bne.n	80096a0 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800968e:	4813      	ldr	r0, [pc, #76]	; (80096dc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8009690:	f7fc fc62 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8009694:	4810      	ldr	r0, [pc, #64]	; (80096d8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8009696:	f7fc fc6c 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800969a:	4804      	ldr	r0, [pc, #16]	; (80096ac <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800969c:	f7fc fc76 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80096a0:	bf00      	nop
 80096a2:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd90      	pop	{r4, r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20000244 	.word	0x20000244
 80096b0:	0801ccc8 	.word	0x0801ccc8
 80096b4:	0801ccd0 	.word	0x0801ccd0
 80096b8:	0801ccd8 	.word	0x0801ccd8
 80096bc:	0801cce0 	.word	0x0801cce0
 80096c0:	0801cce8 	.word	0x0801cce8
 80096c4:	0801ccf0 	.word	0x0801ccf0
 80096c8:	0801ccf4 	.word	0x0801ccf4
 80096cc:	0801ccfc 	.word	0x0801ccfc
 80096d0:	0801cd04 	.word	0x0801cd04
 80096d4:	0801cd0c 	.word	0x0801cd0c
 80096d8:	2000025c 	.word	0x2000025c
 80096dc:	20000274 	.word	0x20000274

080096e0 <_GLOBAL__sub_I__ZN5LexerC2EP6Source>:
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80096e8:	2001      	movs	r0, #1
 80096ea:	f7ff fe1d 	bl	8009328 <_Z41__static_initialization_and_destruction_0ii>
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <_GLOBAL__sub_D__ZN5LexerC2EP6Source>:
 80096f0:	b580      	push	{r7, lr}
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80096f8:	2000      	movs	r0, #0
 80096fa:	f7ff fe15 	bl	8009328 <_Z41__static_initialization_and_destruction_0ii>
 80096fe:	bd80      	pop	{r7, pc}

08009700 <_ZN6ParserC1EP5LexerP11Transmitter>:
#include "Parser.h"

Parser::Parser(Lexer *Lex, Transmitter *Trans)
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3308      	adds	r3, #8
 8009710:	4618      	mov	r0, r3
 8009712:	f7fc fec4 	bl	800649e <_ZN5TokenC1Ev>
{
	this->Lex = Lex;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	601a      	str	r2, [r3, #0]
	this->Trans = Trans;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	605a      	str	r2, [r3, #4]
}
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4618      	mov	r0, r3
 8009738:	f001 fa1c 	bl	800ab74 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE12_Vector_implC1Ev>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <_ZNSt6vectorIP14And_expressionSaIS1_EEC1Ev>:
      vector() = default;
 8009746:	b580      	push	{r7, lr}
 8009748:	b082      	sub	sp, #8
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4618      	mov	r0, r3
 8009752:	f7ff ffeb 	bl	800972c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EEC1Ev>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4618      	mov	r0, r3
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <_ZN10ExpressionC1Ev>:
public:
	~And_expression();
	std::vector<Compare_expression*> comp_exps;
};

class Expression
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4618      	mov	r0, r3
 800976c:	f7ff ffeb 	bl	8009746 <_ZNSt6vectorIP14And_expressionSaIS1_EEC1Ev>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4618      	mov	r0, r3
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <_ZNSt12_Vector_baseIP9StatementSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800977a:	b580      	push	{r7, lr}
 800977c:	b082      	sub	sp, #8
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4618      	mov	r0, r3
 8009786:	f001 fa05 	bl	800ab94 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE12_Vector_implC1Ev>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4618      	mov	r0, r3
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <_ZNSt6vectorIP9StatementSaIS1_EEC1Ev>:
      vector() = default;
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4618      	mov	r0, r3
 80097a0:	f7ff ffeb 	bl	800977a <_ZNSt12_Vector_baseIP9StatementSaIS1_EEC1Ev>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4618      	mov	r0, r3
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <_ZN4BodyC1Ev>:

#include "Expression.h"

class Statement;

class Body
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff ffeb 	bl	8009794 <_ZNSt6vectorIP9StatementSaIS1_EEC1Ev>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4618      	mov	r0, r3
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <_ZN15While_statementC1Ev>:
	~If_statement();
	std::vector<Expression*> conditions;
	std::vector<Body*> if_bodies;
};

class While_statement
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7ff ffc4 	bl	8009760 <_ZN10ExpressionC1Ev>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	330c      	adds	r3, #12
 80097dc:	4618      	mov	r0, r3
 80097de:	f7ff ffe6 	bl	80097ae <_ZN4BodyC1Ev>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <_ZN15While_statementD1Ev>:
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	330c      	adds	r3, #12
 80097f8:	4618      	mov	r0, r3
 80097fa:	f007 fec1 	bl	8011580 <_ZN4BodyD1Ev>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4618      	mov	r0, r3
 8009802:	f7f7 ff04 	bl	800160e <_ZN10ExpressionD1Ev>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4618      	mov	r0, r3
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <_ZN10ExpressionaSERKS_>:
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f001 f9e3 	bl	800abec <_ZNSt6vectorIP14And_expressionSaIS1_EEaSERKS3_>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <_ZN4BodyaSERKS_>:
class Body
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4611      	mov	r1, r2
 8009840:	4618      	mov	r0, r3
 8009842:	f001 fad8 	bl	800adf6 <_ZNSt6vectorIP9StatementSaIS1_EEaSERKS3_>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4618      	mov	r0, r3
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <_ZN10ExpressionC1ERKS_>:
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	4611      	mov	r1, r2
 8009860:	4618      	mov	r0, r3
 8009862:	f001 fbbd 	bl	800afe0 <_ZNSt6vectorIP14And_expressionSaIS1_EEC1ERKS3_>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4618      	mov	r0, r3
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <_ZN4BodyC1ERKS_>:
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	683a      	ldr	r2, [r7, #0]
 800987e:	4611      	mov	r1, r2
 8009880:	4618      	mov	r0, r3
 8009882:	f001 fbea 	bl	800b05a <_ZNSt6vectorIP9StatementSaIS1_EEC1ERKS3_>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4618      	mov	r0, r3
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <_ZN15While_statementC1EOS_>:
class While_statement
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	683a      	ldr	r2, [r7, #0]
 800989e:	4611      	mov	r1, r2
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7ff ffd5 	bl	8009850 <_ZN10ExpressionC1ERKS_>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f103 020c 	add.w	r2, r3, #12
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	330c      	adds	r3, #12
 80098b0:	4619      	mov	r1, r3
 80098b2:	4610      	mov	r0, r2
 80098b4:	f7ff ffdc 	bl	8009870 <_ZN4BodyC1ERKS_>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
	...

080098c4 <_ZN6Parser11parse_whileEv>:

While_statement Parser::parse_while()
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b096      	sub	sp, #88	; 0x58
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
	While_statement st;
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7ff ff7a 	bl	80097c8 <_ZN15While_statementC1Ev>
	st.condition = parse_expression();
 80098d4:	f107 0308 	add.w	r3, r7, #8
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	4618      	mov	r0, r3
 80098dc:	f009 fa97 	bl	8012e0e <_ZN6Parser16parse_expressionEv>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f107 0208 	add.w	r2, r7, #8
 80098e6:	4611      	mov	r1, r2
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7ff ff91 	bl	8009810 <_ZN10ExpressionaSERKS_>
 80098ee:	f107 0308 	add.w	r3, r7, #8
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7f7 fe8b 	bl	800160e <_ZN10ExpressionD1Ev>
	assert_token(TOKEN_COLON, "colon after condition expression");
 80098f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098fc:	4618      	mov	r0, r3
 80098fe:	f00f fe2d 	bl	801955c <_ZNSaIcEC1Ev>
 8009902:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009906:	f107 0314 	add.w	r3, r7, #20
 800990a:	4928      	ldr	r1, [pc, #160]	; (80099ac <_ZN6Parser11parse_whileEv+0xe8>)
 800990c:	4618      	mov	r0, r3
 800990e:	f7f7 ff41 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009912:	f107 0314 	add.w	r3, r7, #20
 8009916:	461a      	mov	r2, r3
 8009918:	2101      	movs	r1, #1
 800991a:	6838      	ldr	r0, [r7, #0]
 800991c:	f000 fbfe 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009920:	f107 0314 	add.w	r3, r7, #20
 8009924:	4618      	mov	r0, r3
 8009926:	f00f ffe0 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800992a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800992e:	4618      	mov	r0, r3
 8009930:	f00f fe15 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 8009934:	6838      	ldr	r0, [r7, #0]
 8009936:	f000 ff67 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	st.while_body = parse_body();
 800993a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	4618      	mov	r0, r3
 8009942:	f000 feeb 	bl	800a71c <_ZN6Parser10parse_bodyEv>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	330c      	adds	r3, #12
 800994a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800994e:	4611      	mov	r1, r2
 8009950:	4618      	mov	r0, r3
 8009952:	f7ff ff6d 	bl	8009830 <_ZN4BodyaSERKS_>
 8009956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800995a:	4618      	mov	r0, r3
 800995c:	f007 fe10 	bl	8011580 <_ZN4BodyD1Ev>
	assert_token(TOKEN_END, "\"end\" after if body");
 8009960:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009964:	4618      	mov	r0, r3
 8009966:	f00f fdf9 	bl	801955c <_ZNSaIcEC1Ev>
 800996a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800996e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009972:	490f      	ldr	r1, [pc, #60]	; (80099b0 <_ZN6Parser11parse_whileEv+0xec>)
 8009974:	4618      	mov	r0, r3
 8009976:	f7f7 ff0d 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800997a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800997e:	461a      	mov	r2, r3
 8009980:	2114      	movs	r1, #20
 8009982:	6838      	ldr	r0, [r7, #0]
 8009984:	f000 fbca 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009988:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800998c:	4618      	mov	r0, r3
 800998e:	f00f ffac 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009992:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009996:	4618      	mov	r0, r3
 8009998:	f00f fde1 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 800999c:	6838      	ldr	r0, [r7, #0]
 800999e:	f000 ff33 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	return st;
 80099a2:	bf00      	nop
}
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	3758      	adds	r7, #88	; 0x58
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	0801cd10 	.word	0x0801cd10
 80099b0:	0801cd34 	.word	0x0801cd34

080099b4 <_ZN6Parser20parse_elseif_contentER12If_statement>:

void Parser::parse_elseif_content(If_statement &st)
{
 80099b4:	b590      	push	{r4, r7, lr}
 80099b6:	b08d      	sub	sp, #52	; 0x34
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
	get_next_token();
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 ff22 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	Expression *condition = new Expression(parse_expression());
 80099c4:	200c      	movs	r0, #12
 80099c6:	f00f fdb8 	bl	801953a <_Znwj>
 80099ca:	4603      	mov	r3, r0
 80099cc:	461c      	mov	r4, r3
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	4620      	mov	r0, r4
 80099d2:	f009 fa1c 	bl	8012e0e <_ZN6Parser16parse_expressionEv>
 80099d6:	613c      	str	r4, [r7, #16]
	assert_token(TOKEN_COLON, "colon after condition expression");
 80099d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099dc:	4618      	mov	r0, r3
 80099de:	f00f fdbd 	bl	801955c <_ZNSaIcEC1Ev>
 80099e2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80099e6:	f107 0314 	add.w	r3, r7, #20
 80099ea:	491a      	ldr	r1, [pc, #104]	; (8009a54 <_ZN6Parser20parse_elseif_contentER12If_statement+0xa0>)
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7f7 fed1 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80099f2:	f107 0314 	add.w	r3, r7, #20
 80099f6:	461a      	mov	r2, r3
 80099f8:	2101      	movs	r1, #1
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fb8e 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009a00:	f107 0314 	add.w	r3, r7, #20
 8009a04:	4618      	mov	r0, r3
 8009a06:	f00f ff70 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f00f fda5 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fef7 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	Body *if_body = new Body(parse_body());
 8009a1a:	200c      	movs	r0, #12
 8009a1c:	f00f fd8d 	bl	801953a <_Znwj>
 8009a20:	4603      	mov	r3, r0
 8009a22:	461c      	mov	r4, r3
 8009a24:	6879      	ldr	r1, [r7, #4]
 8009a26:	4620      	mov	r0, r4
 8009a28:	f000 fe78 	bl	800a71c <_ZN6Parser10parse_bodyEv>
 8009a2c:	60fc      	str	r4, [r7, #12]
	st.conditions.push_back(condition);
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	f107 0210 	add.w	r2, r7, #16
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f001 fb4c 	bl	800b0d4 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backERKS1_>
	st.if_bodies.push_back(if_body);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	330c      	adds	r3, #12
 8009a40:	f107 020c 	add.w	r2, r7, #12
 8009a44:	4611      	mov	r1, r2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f001 fb69 	bl	800b11e <_ZNSt6vectorIP4BodySaIS1_EE9push_backERKS1_>
}
 8009a4c:	bf00      	nop
 8009a4e:	3734      	adds	r7, #52	; 0x34
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd90      	pop	{r4, r7, pc}
 8009a54:	0801cd10 	.word	0x0801cd10

08009a58 <_ZN6Parser18parse_else_contentER12If_statement>:

void Parser::parse_else_content(If_statement &st)
{
 8009a58:	b590      	push	{r4, r7, lr}
 8009a5a:	b08b      	sub	sp, #44	; 0x2c
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
	get_next_token();
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fed0 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_COLON, "colon after \"else\"");
 8009a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f00f fd75 	bl	801955c <_ZNSaIcEC1Ev>
 8009a72:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009a76:	f107 030c 	add.w	r3, r7, #12
 8009a7a:	4917      	ldr	r1, [pc, #92]	; (8009ad8 <_ZN6Parser18parse_else_contentER12If_statement+0x80>)
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7f7 fe89 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009a82:	f107 030c 	add.w	r3, r7, #12
 8009a86:	461a      	mov	r2, r3
 8009a88:	2101      	movs	r1, #1
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fb46 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009a90:	f107 030c 	add.w	r3, r7, #12
 8009a94:	4618      	mov	r0, r3
 8009a96:	f00f ff28 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f00f fd5d 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 feaf 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	Body *if_body = new Body(parse_body());
 8009aaa:	200c      	movs	r0, #12
 8009aac:	f00f fd45 	bl	801953a <_Znwj>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	461c      	mov	r4, r3
 8009ab4:	6879      	ldr	r1, [r7, #4]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f000 fe30 	bl	800a71c <_ZN6Parser10parse_bodyEv>
 8009abc:	60bc      	str	r4, [r7, #8]
	st.if_bodies.push_back(if_body);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	330c      	adds	r3, #12
 8009ac2:	f107 0208 	add.w	r2, r7, #8
 8009ac6:	4611      	mov	r1, r2
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f001 fb28 	bl	800b11e <_ZNSt6vectorIP4BodySaIS1_EE9push_backERKS1_>
}
 8009ace:	bf00      	nop
 8009ad0:	372c      	adds	r7, #44	; 0x2c
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd90      	pop	{r4, r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	0801cd48 	.word	0x0801cd48

08009adc <_ZN6Parser16parse_if_contentER12If_statement>:

void Parser::parse_if_content(If_statement &st)
{
 8009adc:	b590      	push	{r4, r7, lr}
 8009ade:	b08d      	sub	sp, #52	; 0x34
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
	Expression *condition = new Expression(parse_expression());
 8009ae6:	200c      	movs	r0, #12
 8009ae8:	f00f fd27 	bl	801953a <_Znwj>
 8009aec:	4603      	mov	r3, r0
 8009aee:	461c      	mov	r4, r3
 8009af0:	6879      	ldr	r1, [r7, #4]
 8009af2:	4620      	mov	r0, r4
 8009af4:	f009 f98b 	bl	8012e0e <_ZN6Parser16parse_expressionEv>
 8009af8:	613c      	str	r4, [r7, #16]
	assert_token(TOKEN_COLON, "colon after condition expression");
 8009afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009afe:	4618      	mov	r0, r3
 8009b00:	f00f fd2c 	bl	801955c <_ZNSaIcEC1Ev>
 8009b04:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009b08:	f107 0314 	add.w	r3, r7, #20
 8009b0c:	491a      	ldr	r1, [pc, #104]	; (8009b78 <_ZN6Parser16parse_if_contentER12If_statement+0x9c>)
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7f7 fe40 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009b14:	f107 0314 	add.w	r3, r7, #20
 8009b18:	461a      	mov	r2, r3
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fafd 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009b22:	f107 0314 	add.w	r3, r7, #20
 8009b26:	4618      	mov	r0, r3
 8009b28:	f00f fedf 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b30:	4618      	mov	r0, r3
 8009b32:	f00f fd14 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fe66 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	Body *if_body = new Body(parse_body());
 8009b3c:	200c      	movs	r0, #12
 8009b3e:	f00f fcfc 	bl	801953a <_Znwj>
 8009b42:	4603      	mov	r3, r0
 8009b44:	461c      	mov	r4, r3
 8009b46:	6879      	ldr	r1, [r7, #4]
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f000 fde7 	bl	800a71c <_ZN6Parser10parse_bodyEv>
 8009b4e:	60fc      	str	r4, [r7, #12]
	st.conditions.push_back(condition);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	f107 0210 	add.w	r2, r7, #16
 8009b56:	4611      	mov	r1, r2
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f001 fabb 	bl	800b0d4 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backERKS1_>
	st.if_bodies.push_back(if_body);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	330c      	adds	r3, #12
 8009b62:	f107 020c 	add.w	r2, r7, #12
 8009b66:	4611      	mov	r1, r2
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f001 fad8 	bl	800b11e <_ZNSt6vectorIP4BodySaIS1_EE9push_backERKS1_>
}
 8009b6e:	bf00      	nop
 8009b70:	3734      	adds	r7, #52	; 0x34
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd90      	pop	{r4, r7, pc}
 8009b76:	bf00      	nop
 8009b78:	0801cd10 	.word	0x0801cd10

08009b7c <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f001 faee 	bl	800b168 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implC1Ev>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <_ZNSt6vectorIP10ExpressionSaIS1_EEC1Ev>:
      vector() = default;
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b082      	sub	sp, #8
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7ff ffeb 	bl	8009b7c <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EEC1Ev>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <_ZNSt12_Vector_baseIP4BodySaIS1_EEC1Ev>:
      _Vector_base() = default;
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f001 faf0 	bl	800b1a0 <_ZNSt12_Vector_baseIP4BodySaIS1_EE12_Vector_implC1Ev>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <_ZNSt6vectorIP4BodySaIS1_EEC1Ev>:
      vector() = default;
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b082      	sub	sp, #8
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7ff ffeb 	bl	8009bb0 <_ZNSt12_Vector_baseIP4BodySaIS1_EEC1Ev>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <_ZN12If_statementC1Ev>:
class If_statement
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7ff ffd1 	bl	8009b96 <_ZNSt6vectorIP10ExpressionSaIS1_EEC1Ev>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	330c      	adds	r3, #12
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff ffe6 	bl	8009bca <_ZNSt6vectorIP4BodySaIS1_EEC1Ev>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4618      	mov	r0, r3
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <_ZN12If_statementC1ERKS_>:
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	4611      	mov	r1, r2
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f001 fadd 	bl	800b1d8 <_ZNSt6vectorIP10ExpressionSaIS1_EEC1ERKS3_>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f103 020c 	add.w	r2, r3, #12
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	330c      	adds	r3, #12
 8009c28:	4619      	mov	r1, r3
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	f001 fb11 	bl	800b252 <_ZNSt6vectorIP4BodySaIS1_EEC1ERKS3_>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4618      	mov	r0, r3
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <_ZN6Parser8parse_ifEv>:

If_statement Parser::parse_if()
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08a      	sub	sp, #40	; 0x28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
	If_statement st;
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff ffcc 	bl	8009be4 <_ZN12If_statementC1Ev>

	parse_if_content(st);
 8009c4c:	6879      	ldr	r1, [r7, #4]
 8009c4e:	6838      	ldr	r0, [r7, #0]
 8009c50:	f7ff ff44 	bl	8009adc <_ZN6Parser16parse_if_contentER12If_statement>
	while (token_buffer.get_type() == TOKEN_ELSEIF)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	3308      	adds	r3, #8
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f008 f911 	bl	8011e80 <_ZN5Token8get_typeEv>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b11      	cmp	r3, #17
 8009c62:	bf0c      	ite	eq
 8009c64:	2301      	moveq	r3, #1
 8009c66:	2300      	movne	r3, #0
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d004      	beq.n	8009c78 <_ZN6Parser8parse_ifEv+0x3c>
	{
		parse_elseif_content(st);
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	6838      	ldr	r0, [r7, #0]
 8009c72:	f7ff fe9f 	bl	80099b4 <_ZN6Parser20parse_elseif_contentER12If_statement>
	while (token_buffer.get_type() == TOKEN_ELSEIF)
 8009c76:	e7ed      	b.n	8009c54 <_ZN6Parser8parse_ifEv+0x18>
	}
	if (token_buffer.get_type() == TOKEN_ELSE)
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	3308      	adds	r3, #8
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f008 f8ff 	bl	8011e80 <_ZN5Token8get_typeEv>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b12      	cmp	r3, #18
 8009c86:	bf0c      	ite	eq
 8009c88:	2301      	moveq	r3, #1
 8009c8a:	2300      	movne	r3, #0
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d003      	beq.n	8009c9a <_ZN6Parser8parse_ifEv+0x5e>
	{
		parse_else_content(st);
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	6838      	ldr	r0, [r7, #0]
 8009c96:	f7ff fedf 	bl	8009a58 <_ZN6Parser18parse_else_contentER12If_statement>
	}
	assert_token(TOKEN_END, "\"end\" after if body");
 8009c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f00f fc5c 	bl	801955c <_ZNSaIcEC1Ev>
 8009ca4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009ca8:	f107 030c 	add.w	r3, r7, #12
 8009cac:	490e      	ldr	r1, [pc, #56]	; (8009ce8 <_ZN6Parser8parse_ifEv+0xac>)
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7f7 fd70 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009cb4:	f107 030c 	add.w	r3, r7, #12
 8009cb8:	461a      	mov	r2, r3
 8009cba:	2114      	movs	r1, #20
 8009cbc:	6838      	ldr	r0, [r7, #0]
 8009cbe:	f000 fa2d 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009cc2:	f107 030c 	add.w	r3, r7, #12
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f00f fe0f 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f00f fc44 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 8009cd6:	6838      	ldr	r0, [r7, #0]
 8009cd8:	f000 fd96 	bl	800a808 <_ZN6Parser14get_next_tokenEv>

	return st;
 8009cdc:	bf00      	nop
}
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	3728      	adds	r7, #40	; 0x28
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	0801cd34 	.word	0x0801cd34

08009cec <_ZN6Parser20parse_variable_indexER8Variable>:

void Parser::parse_variable_index(Variable &var)
{
 8009cec:	b590      	push	{r4, r7, lr}
 8009cee:	b08b      	sub	sp, #44	; 0x2c
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
	if (token_buffer.get_type() == TOKEN_LEFT_SQUARE)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	3308      	adds	r3, #8
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f008 f8c0 	bl	8011e80 <_ZN5Token8get_typeEv>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b0d      	cmp	r3, #13
 8009d04:	bf0c      	ite	eq
 8009d06:	2301      	moveq	r3, #1
 8009d08:	2300      	movne	r3, #0
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d02f      	beq.n	8009d70 <_ZN6Parser20parse_variable_indexER8Variable+0x84>
	{
		get_next_token();
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fd79 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
		var.index = new Expression(parse_expression());
 8009d16:	200c      	movs	r0, #12
 8009d18:	f00f fc0f 	bl	801953a <_Znwj>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	461c      	mov	r4, r3
 8009d20:	6879      	ldr	r1, [r7, #4]
 8009d22:	4620      	mov	r0, r4
 8009d24:	f009 f873 	bl	8012e0e <_ZN6Parser16parse_expressionEv>
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	61dc      	str	r4, [r3, #28]
		assert_token(TOKEN_RIGHT_SQUARE, "closing square bracket");
 8009d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d30:	4618      	mov	r0, r3
 8009d32:	f00f fc13 	bl	801955c <_ZNSaIcEC1Ev>
 8009d36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009d3a:	f107 030c 	add.w	r3, r7, #12
 8009d3e:	4910      	ldr	r1, [pc, #64]	; (8009d80 <_ZN6Parser20parse_variable_indexER8Variable+0x94>)
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7f7 fd27 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009d46:	f107 030c 	add.w	r3, r7, #12
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	210e      	movs	r1, #14
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f9e4 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009d54:	f107 030c 	add.w	r3, r7, #12
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f00f fdc6 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d62:	4618      	mov	r0, r3
 8009d64:	f00f fbfb 	bl	801955e <_ZNSaIcED1Ev>
		get_next_token();
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fd4d 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	}
	else
	{
		var.index = nullptr;
	}
}
 8009d6e:	e002      	b.n	8009d76 <_ZN6Parser20parse_variable_indexER8Variable+0x8a>
		var.index = nullptr;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	2200      	movs	r2, #0
 8009d74:	61da      	str	r2, [r3, #28]
}
 8009d76:	bf00      	nop
 8009d78:	372c      	adds	r7, #44	; 0x2c
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd90      	pop	{r4, r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	0801cd5c 	.word	0x0801cd5c

08009d84 <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Parser::parse_member_selection_id(std::string &id)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b09e      	sub	sp, #120	; 0x78
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
	assert_token(TOKEN_DOT, "dot operator \".\"");
 8009d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d92:	4618      	mov	r0, r3
 8009d94:	f00f fbe2 	bl	801955c <_ZNSaIcEC1Ev>
 8009d98:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009d9c:	f107 030c 	add.w	r3, r7, #12
 8009da0:	4930      	ldr	r1, [pc, #192]	; (8009e64 <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0>)
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7f7 fcf6 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009da8:	f107 030c 	add.w	r3, r7, #12
 8009dac:	461a      	mov	r2, r3
 8009dae:	210b      	movs	r1, #11
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f9b3 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009db6:	f107 030c 	add.w	r3, r7, #12
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f00f fd95 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f00f fbca 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fd1c 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_IDENTIFIER, "identifier");
 8009dd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f00f fbc1 	bl	801955c <_ZNSaIcEC1Ev>
 8009dda:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009de2:	4921      	ldr	r1, [pc, #132]	; (8009e68 <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe4>)
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7f7 fcd5 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009dee:	461a      	mov	r2, r3
 8009df0:	2102      	movs	r1, #2
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f992 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009df8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f00f fd74 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009e02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e06:	4618      	mov	r0, r3
 8009e08:	f00f fba9 	bl	801955e <_ZNSaIcED1Ev>
	id = std::string(std::get<std::string>(token_buffer.get_value()));
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f103 0208 	add.w	r2, r3, #8
 8009e12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009e16:	4611      	mov	r1, r2
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f008 f80f 	bl	8011e3c <_ZN5Token9get_valueB5cxx11Ev>
 8009e1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009e22:	4618      	mov	r0, r3
 8009e24:	f001 fa52 	bl	800b2cc <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009e2e:	4611      	mov	r1, r2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f00f fd40 	bl	80198b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8009e36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6838      	ldr	r0, [r7, #0]
 8009e3e:	f00f fd60 	bl	8019902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009e42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009e46:	4618      	mov	r0, r3
 8009e48:	f00f fd4f 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009e4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fc fb17 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	get_next_token();
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fcd6 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
}
 8009e5c:	bf00      	nop
 8009e5e:	3778      	adds	r7, #120	; 0x78
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	0801cd74 	.word	0x0801cd74
 8009e68:	0801cd88 	.word	0x0801cd88

08009e6c <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEER8Variable>:

void Parser::parse_variable_id(std::string& id, Variable &var)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b08a      	sub	sp, #40	; 0x28
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
	if (id == "Arg")
 8009e78:	491b      	ldr	r1, [pc, #108]	; (8009ee8 <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEER8Variable+0x7c>)
 8009e7a:	68b8      	ldr	r0, [r7, #8]
 8009e7c:	f001 fa36 	bl	800b2ec <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d007      	beq.n	8009e96 <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEER8Variable+0x2a>
	{
		var.type = ASSIGNMENT_ARG;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	701a      	strb	r2, [r3, #0]
		parse_member_selection_id(id);
 8009e8c:	68b9      	ldr	r1, [r7, #8]
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f7ff ff78 	bl	8009d84 <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009e94:	e011      	b.n	8009eba <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEER8Variable+0x4e>
	}
	else if (id == "Par")
 8009e96:	4915      	ldr	r1, [pc, #84]	; (8009eec <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEER8Variable+0x80>)
 8009e98:	68b8      	ldr	r0, [r7, #8]
 8009e9a:	f001 fa27 	bl	800b2ec <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d007      	beq.n	8009eb4 <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEER8Variable+0x48>
	{
		var.type = ASSIGNMENT_PAR;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	701a      	strb	r2, [r3, #0]
		parse_member_selection_id(id);
 8009eaa:	68b9      	ldr	r1, [r7, #8]
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f7ff ff69 	bl	8009d84 <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009eb2:	e002      	b.n	8009eba <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEER8Variable+0x4e>
	}
	else
	{
		var.type = ASSIGNMENT_LOCAL;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	701a      	strb	r2, [r3, #0]
	}

	var.id = std::string(id);
 8009eba:	f107 0310 	add.w	r3, r7, #16
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f00f fe3f 	bl	8019b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	3304      	adds	r3, #4
 8009eca:	f107 0210 	add.w	r2, r7, #16
 8009ece:	4611      	mov	r1, r2
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f00f fd16 	bl	8019902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009ed6:	f107 0310 	add.w	r3, r7, #16
 8009eda:	4618      	mov	r0, r3
 8009edc:	f00f fd05 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8009ee0:	bf00      	nop
 8009ee2:	3728      	adds	r7, #40	; 0x28
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	0801cd94 	.word	0x0801cd94
 8009eec:	0801cd98 	.word	0x0801cd98

08009ef0 <_ZN8VariableC1Ev>:
	ASSIGNMENT_LOCAL,
	ASSIGNMENT_ARG,
	ASSIGNMENT_PAR,
}variable_type;

class Variable
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	3304      	adds	r3, #4
 8009efc:	4618      	mov	r0, r3
 8009efe:	f00f fcd3 	bl	80198a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4618      	mov	r0, r3
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <_ZN8VariableC1ERKS_>:
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781a      	ldrb	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	701a      	strb	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	1d1a      	adds	r2, r3, #4
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f00f fe0b 	bl	8019b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	69da      	ldr	r2, [r3, #28]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	61da      	str	r2, [r3, #28]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <_ZN6Parser14parse_variableERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

Variable Parser::parse_variable(std::string& id)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
	Variable var;
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff ffcf 	bl	8009ef0 <_ZN8VariableC1Ev>
	parse_variable_id(id, var);
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	6879      	ldr	r1, [r7, #4]
 8009f56:	68b8      	ldr	r0, [r7, #8]
 8009f58:	f7ff ff88 	bl	8009e6c <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEER8Variable>
	parse_variable_index(var);
 8009f5c:	68f9      	ldr	r1, [r7, #12]
 8009f5e:	68b8      	ldr	r0, [r7, #8]
 8009f60:	f7ff fec4 	bl	8009cec <_ZN6Parser20parse_variable_indexER8Variable>
	return var;
 8009f64:	bf00      	nop
}
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <_ZN10AssignmentC1Ev>:
public:
	Expression condition;
	Body while_body;
};

class Assignment
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b082      	sub	sp, #8
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7ff ffb9 	bl	8009ef0 <_ZN8VariableC1Ev>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	3320      	adds	r3, #32
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7ff fbec 	bl	8009760 <_ZN10ExpressionC1Ev>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <_ZN10AssignmentD1Ev>:
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b082      	sub	sp, #8
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3320      	adds	r3, #32
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7f7 fb35 	bl	800160e <_ZN10ExpressionD1Ev>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f007 fbd9 	bl	801175e <_ZN8VariableD1Ev>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <_ZN8VariableaSERKS_>:
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b082      	sub	sp, #8
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	6039      	str	r1, [r7, #0]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781a      	ldrb	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	701a      	strb	r2, [r3, #0]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	1d1a      	adds	r2, r3, #4
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	3304      	adds	r3, #4
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f00f fc8f 	bl	80198f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	69da      	ldr	r2, [r3, #28]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	61da      	str	r2, [r3, #28]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <_ZN10AssignmentC1EOS_>:
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b082      	sub	sp, #8
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	6039      	str	r1, [r7, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7ff ff86 	bl	8009f0c <_ZN8VariableC1ERKS_>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f103 0220 	add.w	r2, r3, #32
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	3320      	adds	r3, #32
 800a00a:	4619      	mov	r1, r3
 800a00c:	4610      	mov	r0, r2
 800a00e:	f7ff fc1f 	bl	8009850 <_ZN10ExpressionC1ERKS_>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4618      	mov	r0, r3
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <_ZN6Parser16parse_assignmentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

Assignment Parser::parse_assignment(std::string& id)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b096      	sub	sp, #88	; 0x58
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
	Assignment st;
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f7ff ffa0 	bl	8009f6e <_ZN10AssignmentC1Ev>
	st.var = parse_variable(id);
 800a02e:	f107 0310 	add.w	r3, r7, #16
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	68b9      	ldr	r1, [r7, #8]
 800a036:	4618      	mov	r0, r3
 800a038:	f7ff ff82 	bl	8009f40 <_ZN6Parser14parse_variableERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f107 0210 	add.w	r2, r7, #16
 800a042:	4611      	mov	r1, r2
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff ffb6 	bl	8009fb6 <_ZN8VariableaSERKS_>
 800a04a:	f107 0310 	add.w	r3, r7, #16
 800a04e:	4618      	mov	r0, r3
 800a050:	f007 fb85 	bl	801175e <_ZN8VariableD1Ev>
	assert_token(TOKEN_EQUALS, "assignment operator \"=\"");
 800a054:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a058:	4618      	mov	r0, r3
 800a05a:	f00f fa7f 	bl	801955c <_ZNSaIcEC1Ev>
 800a05e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a066:	4918      	ldr	r1, [pc, #96]	; (800a0c8 <_ZN6Parser16parse_assignmentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xac>)
 800a068:	4618      	mov	r0, r3
 800a06a:	f7f7 fb93 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a06e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a072:	461a      	mov	r2, r3
 800a074:	211d      	movs	r1, #29
 800a076:	68b8      	ldr	r0, [r7, #8]
 800a078:	f000 f850 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a07c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a080:	4618      	mov	r0, r3
 800a082:	f00f fc32 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a086:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a08a:	4618      	mov	r0, r3
 800a08c:	f00f fa67 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 800a090:	68b8      	ldr	r0, [r7, #8]
 800a092:	f000 fbb9 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	st.value = parse_expression();
 800a096:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a09a:	68b9      	ldr	r1, [r7, #8]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f008 feb6 	bl	8012e0e <_ZN6Parser16parse_expressionEv>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	3320      	adds	r3, #32
 800a0a6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7ff fbaf 	bl	8009810 <_ZN10ExpressionaSERKS_>
 800a0b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7f7 faa9 	bl	800160e <_ZN10ExpressionD1Ev>
	return st;
 800a0bc:	bf00      	nop
}
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	3758      	adds	r7, #88	; 0x58
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	0801cd9c 	.word	0x0801cd9c

0800a0cc <_ZN6Parser12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Parser::report_error(const std::string message)
{
 800a0cc:	b5b0      	push	{r4, r5, r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
	Trans->report_error(message, token_buffer.get_line(),
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685c      	ldr	r4, [r3, #4]
 800a0da:	f107 0308 	add.w	r3, r7, #8
 800a0de:	6839      	ldr	r1, [r7, #0]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f00f fd2f 	bl	8019b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	3308      	adds	r3, #8
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f007 fee3 	bl	8011eb6 <_ZN5Token8get_lineEv>
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	3308      	adds	r3, #8
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f007 fef7 	bl	8011eea <_ZN5Token12get_positionEv>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	f107 0108 	add.w	r1, r7, #8
 800a102:	462a      	mov	r2, r5
 800a104:	4620      	mov	r0, r4
 800a106:	f008 f92b 	bl	8012360 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
			token_buffer.get_position());
 800a10a:	f107 0308 	add.w	r3, r7, #8
 800a10e:	4618      	mov	r0, r3
 800a110:	f00f fbeb 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800a114:	bf00      	nop
 800a116:	3720      	adds	r7, #32
 800a118:	46bd      	mov	sp, r7
 800a11a:	bdb0      	pop	{r4, r5, r7, pc}

0800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Parser::assert_token(token_type type, const std::string message)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b096      	sub	sp, #88	; 0x58
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	460b      	mov	r3, r1
 800a126:	607a      	str	r2, [r7, #4]
 800a128:	72fb      	strb	r3, [r7, #11]
	if (token_buffer.get_type() != type)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3308      	adds	r3, #8
 800a12e:	4618      	mov	r0, r3
 800a130:	f007 fea6 	bl	8011e80 <_ZN5Token8get_typeEv>
 800a134:	4603      	mov	r3, r0
 800a136:	461a      	mov	r2, r3
 800a138:	7afb      	ldrb	r3, [r7, #11]
 800a13a:	4293      	cmp	r3, r2
 800a13c:	bf14      	ite	ne
 800a13e:	2301      	movne	r3, #1
 800a140:	2300      	moveq	r3, #0
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b00      	cmp	r3, #0
 800a146:	d02b      	beq.n	800a1a0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>
	{
		std::string msg = "expected " + message + "\n";
 800a148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	4916      	ldr	r1, [pc, #88]	; (800a1a8 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>)
 800a150:	4618      	mov	r0, r3
 800a152:	f001 f8de 	bl	800b312 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800a156:	f107 0310 	add.w	r3, r7, #16
 800a15a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a15e:	4a13      	ldr	r2, [pc, #76]	; (800a1ac <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x90>)
 800a160:	4618      	mov	r0, r3
 800a162:	f001 f8fb 	bl	800b35c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a166:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a16a:	4618      	mov	r0, r3
 800a16c:	f00f fbbd 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		report_error(msg);
 800a170:	f107 0210 	add.w	r2, r7, #16
 800a174:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a178:	4611      	mov	r1, r2
 800a17a:	4618      	mov	r0, r3
 800a17c:	f00f fce2 	bl	8019b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a180:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a184:	4619      	mov	r1, r3
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f7ff ffa0 	bl	800a0cc <_ZN6Parser12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a18c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a190:	4618      	mov	r0, r3
 800a192:	f00f fbaa 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		std::string msg = "expected " + message + "\n";
 800a196:	f107 0310 	add.w	r3, r7, #16
 800a19a:	4618      	mov	r0, r3
 800a19c:	f00f fba5 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800a1a0:	bf00      	nop
 800a1a2:	3758      	adds	r7, #88	; 0x58
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	0801cdb4 	.word	0x0801cdb4
 800a1ac:	0801cdc0 	.word	0x0801cdc0

0800a1b0 <_ZN6Parser24parse_function_argumentsER13Function_call>:

void Parser::parse_function_arguments(Function_call &f)
{
 800a1b0:	b5b0      	push	{r4, r5, r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
	if (token_buffer.get_type() != TOKEN_RIGHT_BRACKET)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	3308      	adds	r3, #8
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f007 fe5e 	bl	8011e80 <_ZN5Token8get_typeEv>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b27      	cmp	r3, #39	; 0x27
 800a1c8:	bf14      	ite	ne
 800a1ca:	2301      	movne	r3, #1
 800a1cc:	2300      	moveq	r3, #0
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d036      	beq.n	800a242 <_ZN6Parser24parse_function_argumentsER13Function_call+0x92>
	{
		f.arguments.push_back(new Expression(parse_expression()));
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	f103 0518 	add.w	r5, r3, #24
 800a1da:	200c      	movs	r0, #12
 800a1dc:	f00f f9ad 	bl	801953a <_Znwj>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	461c      	mov	r4, r3
 800a1e4:	6879      	ldr	r1, [r7, #4]
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f008 fe11 	bl	8012e0e <_ZN6Parser16parse_expressionEv>
 800a1ec:	60bc      	str	r4, [r7, #8]
 800a1ee:	f107 0308 	add.w	r3, r7, #8
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	f001 f8c8 	bl	800b38a <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backEOS1_>
		while (token_buffer.get_type() == TOKEN_COMA)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	3308      	adds	r3, #8
 800a1fe:	4618      	mov	r0, r3
 800a200:	f007 fe3e 	bl	8011e80 <_ZN5Token8get_typeEv>
 800a204:	4603      	mov	r3, r0
 800a206:	2b0c      	cmp	r3, #12
 800a208:	bf0c      	ite	eq
 800a20a:	2301      	moveq	r3, #1
 800a20c:	2300      	movne	r3, #0
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b00      	cmp	r3, #0
 800a212:	d016      	beq.n	800a242 <_ZN6Parser24parse_function_argumentsER13Function_call+0x92>
		{
			get_next_token();
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 faf7 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
			f.arguments.push_back(new Expression(parse_expression()));
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	f103 0518 	add.w	r5, r3, #24
 800a220:	200c      	movs	r0, #12
 800a222:	f00f f98a 	bl	801953a <_Znwj>
 800a226:	4603      	mov	r3, r0
 800a228:	461c      	mov	r4, r3
 800a22a:	6879      	ldr	r1, [r7, #4]
 800a22c:	4620      	mov	r0, r4
 800a22e:	f008 fdee 	bl	8012e0e <_ZN6Parser16parse_expressionEv>
 800a232:	60fc      	str	r4, [r7, #12]
 800a234:	f107 030c 	add.w	r3, r7, #12
 800a238:	4619      	mov	r1, r3
 800a23a:	4628      	mov	r0, r5
 800a23c:	f001 f8a5 	bl	800b38a <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backEOS1_>
		while (token_buffer.get_type() == TOKEN_COMA)
 800a240:	e7db      	b.n	800a1fa <_ZN6Parser24parse_function_argumentsER13Function_call+0x4a>
		}
	}
}
 800a242:	bf00      	nop
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bdb0      	pop	{r4, r5, r7, pc}

0800a24a <_ZN13Function_callC1Ev>:
	variable_type type;
	std::string id;
	Expression* index;
};

class Function_call
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b082      	sub	sp, #8
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4618      	mov	r0, r3
 800a256:	f00f fb27 	bl	80198a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3318      	adds	r3, #24
 800a25e:	4618      	mov	r0, r3
 800a260:	f7ff fc99 	bl	8009b96 <_ZNSt6vectorIP10ExpressionSaIS1_EEC1Ev>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4618      	mov	r0, r3
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <_ZN13Function_callC1ERKS_>:
 800a26e:	b580      	push	{r7, lr}
 800a270:	b082      	sub	sp, #8
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	6039      	str	r1, [r7, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4611      	mov	r1, r2
 800a27e:	4618      	mov	r0, r3
 800a280:	f00f fc60 	bl	8019b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f103 0218 	add.w	r2, r3, #24
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	3318      	adds	r3, #24
 800a28e:	4619      	mov	r1, r3
 800a290:	4610      	mov	r0, r2
 800a292:	f000 ffa1 	bl	800b1d8 <_ZNSt6vectorIP10ExpressionSaIS1_EEC1ERKS3_>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4618      	mov	r0, r3
 800a29a:	3708      	adds	r7, #8
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <_ZN6Parser19parse_function_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

Function_call Parser::parse_function_call(std::string& id)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b098      	sub	sp, #96	; 0x60
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
	Function_call f;
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f7ff ffcc 	bl	800a24a <_ZN13Function_callC1Ev>
	f.id = std::string(id);
 800a2b2:	f107 0310 	add.w	r3, r7, #16
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f00f fc43 	bl	8019b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f107 0210 	add.w	r2, r7, #16
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f00f fb1b 	bl	8019902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a2cc:	f107 0310 	add.w	r3, r7, #16
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f00f fb0a 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	get_next_token();
 800a2d6:	68b8      	ldr	r0, [r7, #8]
 800a2d8:	f000 fa96 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	parse_function_arguments(f);
 800a2dc:	68f9      	ldr	r1, [r7, #12]
 800a2de:	68b8      	ldr	r0, [r7, #8]
 800a2e0:	f7ff ff66 	bl	800a1b0 <_ZN6Parser24parse_function_argumentsER13Function_call>
	assert_token(TOKEN_RIGHT_BRACKET, "closing bracket");
 800a2e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f00f f937 	bl	801955c <_ZNSaIcEC1Ev>
 800a2ee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a2f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2f6:	491f      	ldr	r1, [pc, #124]	; (800a374 <_ZN6Parser19parse_function_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>)
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7f7 fa4b 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a2fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a302:	461a      	mov	r2, r3
 800a304:	2127      	movs	r1, #39	; 0x27
 800a306:	68b8      	ldr	r0, [r7, #8]
 800a308:	f7ff ff08 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a30c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a310:	4618      	mov	r0, r3
 800a312:	f00f faea 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a316:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a31a:	4618      	mov	r0, r3
 800a31c:	f00f f91f 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 800a320:	68b8      	ldr	r0, [r7, #8]
 800a322:	f000 fa71 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_NEWLINE, "new line");
 800a326:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a32a:	4618      	mov	r0, r3
 800a32c:	f00f f916 	bl	801955c <_ZNSaIcEC1Ev>
 800a330:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800a334:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a338:	490f      	ldr	r1, [pc, #60]	; (800a378 <_ZN6Parser19parse_function_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd8>)
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7f7 fa2a 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a340:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a344:	461a      	mov	r2, r3
 800a346:	210a      	movs	r1, #10
 800a348:	68b8      	ldr	r0, [r7, #8]
 800a34a:	f7ff fee7 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a34e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a352:	4618      	mov	r0, r3
 800a354:	f00f fac9 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a358:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a35c:	4618      	mov	r0, r3
 800a35e:	f00f f8fe 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 800a362:	68b8      	ldr	r0, [r7, #8]
 800a364:	f000 fa50 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	return f;
 800a368:	bf00      	nop
}
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	3760      	adds	r7, #96	; 0x60
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	0801cdc4 	.word	0x0801cdc4
 800a378:	0801cdd4 	.word	0x0801cdd4

0800a37c <_ZN6Parser33parse_assignment_or_function_callER9Statement>:

void Parser::parse_assignment_or_function_call(Statement &s)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b0a4      	sub	sp, #144	; 0x90
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
	std::string id = std::get<std::string>(token_buffer.get_value());
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f103 0208 	add.w	r2, r3, #8
 800a38c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a390:	4611      	mov	r1, r2
 800a392:	4618      	mov	r0, r3
 800a394:	f007 fd52 	bl	8011e3c <_ZN5Token9get_valueB5cxx11Ev>
 800a398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a39c:	4618      	mov	r0, r3
 800a39e:	f000 ff95 	bl	800b2cc <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	f107 030c 	add.w	r3, r7, #12
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f00f fa83 	bl	80198b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a3b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7fc f865 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	get_next_token();
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fa24 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	if (token_buffer.get_type() == TOKEN_LEFT_BRACKET)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	3308      	adds	r3, #8
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f007 fd5b 	bl	8011e80 <_ZN5Token8get_typeEv>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b26      	cmp	r3, #38	; 0x26
 800a3ce:	bf0c      	ite	eq
 800a3d0:	2301      	moveq	r3, #1
 800a3d2:	2300      	movne	r3, #0
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d018      	beq.n	800a40c <_ZN6Parser33parse_assignment_or_function_callER9Statement+0x90>
	{
		s.type = STATEMENT_FUNCTION_CALL;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	701a      	strb	r2, [r3, #0]
		s.content = parse_function_call(id);
 800a3e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a3e4:	f107 020c 	add.w	r2, r7, #12
 800a3e8:	6879      	ldr	r1, [r7, #4]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7ff ff58 	bl	800a2a0 <_ZN6Parser19parse_function_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f001 f804 	bl	800b408 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>
 800a400:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a404:	4618      	mov	r0, r3
 800a406:	f007 f968 	bl	80116da <_ZN13Function_callD1Ev>
 800a40a:	e017      	b.n	800a43c <_ZN6Parser33parse_assignment_or_function_callER9Statement+0xc0>
	}
	else
	{
		s.type = STATEMENT_ASSIGNMENT;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	2200      	movs	r2, #0
 800a410:	701a      	strb	r2, [r3, #0]
		s.content = parse_assignment(id);
 800a412:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a416:	f107 020c 	add.w	r2, r7, #12
 800a41a:	6879      	ldr	r1, [r7, #4]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff fdfd 	bl	800a01c <_ZN6Parser16parse_assignmentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	3304      	adds	r3, #4
 800a426:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800a42a:	4611      	mov	r1, r2
 800a42c:	4618      	mov	r0, r3
 800a42e:	f001 f830 	bl	800b492 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS0_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>
 800a432:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a436:	4618      	mov	r0, r3
 800a438:	f7ff fdab 	bl	8009f92 <_ZN10AssignmentD1Ev>
	std::string id = std::get<std::string>(token_buffer.get_value());
 800a43c:	f107 030c 	add.w	r3, r7, #12
 800a440:	4618      	mov	r0, r3
 800a442:	f00f fa52 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800a446:	bf00      	nop
 800a448:	3790      	adds	r7, #144	; 0x90
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEC1Ev>:
      variant() = default;
 800a44e:	b580      	push	{r7, lr}
 800a450:	b082      	sub	sp, #8
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4618      	mov	r0, r3
 800a45a:	f000 f850 	bl	800a4fe <_ZNSt8__detail9__variant13_Variant_baseIJ10Assignment13Function_call15While_statement12If_statementEEC2Ev>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4618      	mov	r0, r3
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEECI1NS0_16_Variant_storageILb0EJS2_S3_S4_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	7039      	strb	r1, [r7, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4611      	mov	r1, r2
 800a476:	4618      	mov	r0, r3
 800a478:	f000 f87a 	bl	800a570 <_ZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEEC2ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4618      	mov	r0, r3
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEECI1NS0_16_Variant_storageILb0EJS2_S3_S4_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800a486:	b580      	push	{r7, lr}
 800a488:	b082      	sub	sp, #8
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	7039      	strb	r1, [r7, #0]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4611      	mov	r1, r2
 800a494:	4618      	mov	r0, r3
 800a496:	f7ff ffe7 	bl	800a468 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEECI1NS0_16_Variant_storageILb0EJS2_S3_S4_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4618      	mov	r0, r3
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEECI1NS0_16_Variant_storageILb0EJS2_S3_S4_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	7039      	strb	r1, [r7, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7ff ffe7 	bl	800a486 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEECI1NS0_16_Variant_storageILb0EJS2_S3_S4_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEECI1NS0_16_Variant_storageILb0EJS2_S3_S4_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b082      	sub	sp, #8
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	7039      	strb	r1, [r7, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff ffe7 	bl	800a4a4 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEECI1NS0_16_Variant_storageILb0EJS2_S3_S4_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <_ZNSt8__detail9__variant13_Variant_baseIJ10Assignment13Function_call15While_statement12If_statementEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	7039      	strb	r1, [r7, #0]
	: _Base(__i, std::forward<_Args>(__args)...)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff ffe7 	bl	800a4c2 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEECI1NS0_16_Variant_storageILb0EJS2_S3_S4_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <_ZNSt8__detail9__variant13_Variant_baseIJ10Assignment13Function_call15While_statement12If_statementEEC2Ev>:
      _Variant_base()
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b082      	sub	sp, #8
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
      : _Variant_base(in_place_index<0>) { }
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f7ff ffe9 	bl	800a4e0 <_ZNSt8__detail9__variant13_Variant_baseIJ10Assignment13Function_call15While_statement12If_statementEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4618      	mov	r0, r3
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <_ZNSt8__detail9__variant14_UninitializedI10AssignmentLb0EEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 800a518:	b590      	push	{r4, r7, lr}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	7039      	strb	r1, [r7, #0]
	  ::new ((void*)std::addressof(_M_storage))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4618      	mov	r0, r3
 800a526:	f000 ffe0 	bl	800b4ea <_ZSt9addressofIN9__gnu_cxx16__aligned_membufI10AssignmentEEEPT_RS4_>
 800a52a:	4603      	mov	r3, r0
 800a52c:	4619      	mov	r1, r3
 800a52e:	202c      	movs	r0, #44	; 0x2c
 800a530:	f7f6 fd54 	bl	8000fdc <_ZnwjPv>
 800a534:	4604      	mov	r4, r0
 800a536:	4620      	mov	r0, r4
 800a538:	232c      	movs	r3, #44	; 0x2c
 800a53a:	461a      	mov	r2, r3
 800a53c:	2100      	movs	r1, #0
 800a53e:	f00f fbc3 	bl	8019cc8 <memset>
 800a542:	4620      	mov	r0, r4
 800a544:	f7ff fd13 	bl	8009f6e <_ZN10AssignmentC1Ev>
	}
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4618      	mov	r0, r3
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd90      	pop	{r4, r7, pc}

0800a552 <_ZNSt8__detail9__variant15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	7039      	strb	r1, [r7, #0]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4611      	mov	r1, r2
 800a560:	4618      	mov	r0, r3
 800a562:	f7ff ffd9 	bl	800a518 <_ZNSt8__detail9__variant14_UninitializedI10AssignmentLb0EEC1IJEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <_ZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEEC2ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	7039      	strb	r1, [r7, #0]
	_M_index(_Np)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4611      	mov	r1, r2
 800a57e:	4618      	mov	r0, r3
 800a580:	f7ff ffe7 	bl	800a552 <_ZNSt8__detail9__variant15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEC1IJEEESt16in_place_index_tILj0EEDpOT_>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	{ }
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
	...

0800a598 <_ZN6Parser15parse_statementEv>:

Statement Parser::parse_statement() //todo refactor
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b096      	sub	sp, #88	; 0x58
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
	Statement s{};
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	2334      	movs	r3, #52	; 0x34
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	f00f fb8c 	bl	8019cc8 <memset>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	2230      	movs	r2, #48	; 0x30
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f00f fb85 	bl	8019cc8 <memset>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7ff ff43 	bl	800a44e <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEC1Ev>
	switch (token_buffer.get_type())
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f007 fc57 	bl	8011e80 <_ZN5Token8get_typeEv>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b13      	cmp	r3, #19
 800a5d6:	d00b      	beq.n	800a5f0 <_ZN6Parser15parse_statementEv+0x58>
 800a5d8:	2b13      	cmp	r3, #19
 800a5da:	dc3d      	bgt.n	800a658 <_ZN6Parser15parse_statementEv+0xc0>
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	d002      	beq.n	800a5e6 <_ZN6Parser15parse_statementEv+0x4e>
 800a5e0:	2b10      	cmp	r3, #16
 800a5e2:	d01f      	beq.n	800a624 <_ZN6Parser15parse_statementEv+0x8c>
 800a5e4:	e038      	b.n	800a658 <_ZN6Parser15parse_statementEv+0xc0>
	{
	case TOKEN_IDENTIFIER:
		parse_assignment_or_function_call(s);
 800a5e6:	6879      	ldr	r1, [r7, #4]
 800a5e8:	6838      	ldr	r0, [r7, #0]
 800a5ea:	f7ff fec7 	bl	800a37c <_ZN6Parser33parse_assignment_or_function_callER9Statement>
		break;
 800a5ee:	e051      	b.n	800a694 <_ZN6Parser15parse_statementEv+0xfc>
	case TOKEN_WHILE:
		s.type = STATEMENT_WHILE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	701a      	strb	r2, [r3, #0]
		get_next_token();
 800a5f6:	6838      	ldr	r0, [r7, #0]
 800a5f8:	f000 f906 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
		s.content = parse_while();
 800a5fc:	f107 030c 	add.w	r3, r7, #12
 800a600:	6839      	ldr	r1, [r7, #0]
 800a602:	4618      	mov	r0, r3
 800a604:	f7ff f95e 	bl	80098c4 <_ZN6Parser11parse_whileEv>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	3304      	adds	r3, #4
 800a60c:	f107 020c 	add.w	r2, r7, #12
 800a610:	4611      	mov	r1, r2
 800a612:	4618      	mov	r0, r3
 800a614:	f000 ff8e 	bl	800b534 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS2_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>
 800a618:	f107 030c 	add.w	r3, r7, #12
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7ff f8e5 	bl	80097ec <_ZN15While_statementD1Ev>
		break;
 800a622:	e037      	b.n	800a694 <_ZN6Parser15parse_statementEv+0xfc>
	case TOKEN_IF:
		s.type = STATEMENT_IF;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2203      	movs	r2, #3
 800a628:	701a      	strb	r2, [r3, #0]
		get_next_token();
 800a62a:	6838      	ldr	r0, [r7, #0]
 800a62c:	f000 f8ec 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
		s.content = parse_if();
 800a630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a634:	6839      	ldr	r1, [r7, #0]
 800a636:	4618      	mov	r0, r3
 800a638:	f7ff fb00 	bl	8009c3c <_ZN6Parser8parse_ifEv>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	3304      	adds	r3, #4
 800a640:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a644:	4611      	mov	r1, r2
 800a646:	4618      	mov	r0, r3
 800a648:	f000 ffb9 	bl	800b5be <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>
 800a64c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a650:	4618      	mov	r0, r3
 800a652:	f006 ffd1 	bl	80115f8 <_ZN12If_statementD1Ev>
		break;
 800a656:	e01d      	b.n	800a694 <_ZN6Parser15parse_statementEv+0xfc>
	default:
		report_error("expected statement:\nidentifier, if, while\n");
 800a658:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a65c:	4618      	mov	r0, r3
 800a65e:	f00e ff7d 	bl	801955c <_ZNSaIcEC1Ev>
 800a662:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800a666:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a66a:	490d      	ldr	r1, [pc, #52]	; (800a6a0 <_ZN6Parser15parse_statementEv+0x108>)
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7f7 f891 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a672:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a676:	4619      	mov	r1, r3
 800a678:	6838      	ldr	r0, [r7, #0]
 800a67a:	f7ff fd27 	bl	800a0cc <_ZN6Parser12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a67e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a682:	4618      	mov	r0, r3
 800a684:	f00f f931 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a688:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a68c:	4618      	mov	r0, r3
 800a68e:	f00e ff66 	bl	801955e <_ZNSaIcED1Ev>
		break;
 800a692:	bf00      	nop
	}
	return s;
 800a694:	bf00      	nop
}
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	3758      	adds	r7, #88	; 0x58
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	0801cde0 	.word	0x0801cde0

0800a6a4 <_ZN6Parser24is_token_statement_firstEv>:

bool Parser::is_token_statement_first()
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
	return token_buffer.get_type() == TOKEN_IDENTIFIER
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	3308      	adds	r3, #8
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f007 fbe5 	bl	8011e80 <_ZN5Token8get_typeEv>
 800a6b6:	4603      	mov	r3, r0
			|| token_buffer.get_type() == TOKEN_WHILE
			|| token_buffer.get_type() == TOKEN_IF;
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	d00f      	beq.n	800a6dc <_ZN6Parser24is_token_statement_firstEv+0x38>
			|| token_buffer.get_type() == TOKEN_WHILE
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	3308      	adds	r3, #8
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f007 fbdd 	bl	8011e80 <_ZN5Token8get_typeEv>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b13      	cmp	r3, #19
 800a6ca:	d007      	beq.n	800a6dc <_ZN6Parser24is_token_statement_firstEv+0x38>
			|| token_buffer.get_type() == TOKEN_IF;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	3308      	adds	r3, #8
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f007 fbd5 	bl	8011e80 <_ZN5Token8get_typeEv>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b10      	cmp	r3, #16
 800a6da:	d101      	bne.n	800a6e0 <_ZN6Parser24is_token_statement_firstEv+0x3c>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e000      	b.n	800a6e2 <_ZN6Parser24is_token_statement_firstEv+0x3e>
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <_ZN6Parser13skip_newlinesEv>:

void Parser::skip_newlines()
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b082      	sub	sp, #8
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
	while (token_buffer.get_type() == TOKEN_NEWLINE)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	3308      	adds	r3, #8
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f007 fbc2 	bl	8011e80 <_ZN5Token8get_typeEv>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b0a      	cmp	r3, #10
 800a700:	bf0c      	ite	eq
 800a702:	2301      	moveq	r3, #1
 800a704:	2300      	movne	r3, #0
 800a706:	b2db      	uxtb	r3, r3
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d003      	beq.n	800a714 <_ZN6Parser13skip_newlinesEv+0x2a>
	{
		get_next_token();
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f87b 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	while (token_buffer.get_type() == TOKEN_NEWLINE)
 800a712:	e7ee      	b.n	800a6f2 <_ZN6Parser13skip_newlinesEv+0x8>
	}
}
 800a714:	bf00      	nop
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <_ZN6Parser10parse_bodyEv>:

Body Parser::parse_body()
{
 800a71c:	b590      	push	{r4, r7, lr}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
	Body bod;
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7ff f841 	bl	80097ae <_ZN4BodyC1Ev>
	while (is_token_statement_first())
 800a72c:	6838      	ldr	r0, [r7, #0]
 800a72e:	f7ff ffb9 	bl	800a6a4 <_ZN6Parser24is_token_statement_firstEv>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d014      	beq.n	800a762 <_ZN6Parser10parse_bodyEv+0x46>
	{
		Statement *st = new Statement(parse_statement());
 800a738:	2034      	movs	r0, #52	; 0x34
 800a73a:	f00e fefe 	bl	801953a <_Znwj>
 800a73e:	4603      	mov	r3, r0
 800a740:	461c      	mov	r4, r3
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	4620      	mov	r0, r4
 800a746:	f7ff ff27 	bl	800a598 <_ZN6Parser15parse_statementEv>
 800a74a:	60fc      	str	r4, [r7, #12]
		bod.statements.push_back(st);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f107 020c 	add.w	r2, r7, #12
 800a752:	4611      	mov	r1, r2
 800a754:	4618      	mov	r0, r3
 800a756:	f000 ff5e 	bl	800b616 <_ZNSt6vectorIP9StatementSaIS1_EE9push_backERKS1_>
		skip_newlines();
 800a75a:	6838      	ldr	r0, [r7, #0]
 800a75c:	f7ff ffc5 	bl	800a6ea <_ZN6Parser13skip_newlinesEv>
	while (is_token_statement_first())
 800a760:	e7e4      	b.n	800a72c <_ZN6Parser10parse_bodyEv+0x10>
	}
	return bod;
 800a762:	bf00      	nop
}
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd90      	pop	{r4, r7, pc}

0800a76c <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>:
    struct _Move_assign_base : _Copy_assign_alias<_Types...>
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	4611      	mov	r1, r2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f001 f911 	bl	800b9a4 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4618      	mov	r0, r3
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>:
    struct _Variant_base : _Move_assign_alias<_Types...>
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	4611      	mov	r1, r2
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7ff ffe5 	bl	800a76c <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS6_>:
    class variant
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	683a      	ldr	r2, [r7, #0]
 800a7ba:	4611      	mov	r1, r2
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7ff ffe5 	bl	800a78c <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <_ZN5TokenaSERKS_>:
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	781a      	ldrb	r2, [r3, #0]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	701a      	strb	r2, [r3, #0]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	1d1a      	adds	r2, r3, #4
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7ff ffdf 	bl	800a7ac <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS6_>
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	6a1a      	ldr	r2, [r3, #32]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	621a      	str	r2, [r3, #32]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	625a      	str	r2, [r3, #36]	; 0x24
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4618      	mov	r0, r3
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <_ZN6Parser14get_next_tokenEv>:

void Parser::get_next_token()
{
 800a808:	b5b0      	push	{r4, r5, r7, lr}
 800a80a:	b09a      	sub	sp, #104	; 0x68
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
	token_buffer = Lex->build_token();
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	f107 030c 	add.w	r3, r7, #12
 800a818:	4611      	mov	r1, r2
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fc fa38 	bl	8006c90 <_ZN5Lexer11build_tokenEv>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	3308      	adds	r3, #8
 800a824:	f107 020c 	add.w	r2, r7, #12
 800a828:	4611      	mov	r1, r2
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7ff ffce 	bl	800a7cc <_ZN5TokenaSERKS_>
 800a830:	f107 030c 	add.w	r3, r7, #12
 800a834:	4618      	mov	r0, r3
 800a836:	f007 faf3 	bl	8011e20 <_ZN5TokenD1Ev>
	if (token_buffer.get_type() == TOKEN_ERROR)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	3308      	adds	r3, #8
 800a83e:	4618      	mov	r0, r3
 800a840:	f007 fb1e 	bl	8011e80 <_ZN5Token8get_typeEv>
 800a844:	4603      	mov	r3, r0
 800a846:	2b28      	cmp	r3, #40	; 0x28
 800a848:	bf0c      	ite	eq
 800a84a:	2301      	moveq	r3, #1
 800a84c:	2300      	movne	r3, #0
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	d032      	beq.n	800a8ba <_ZN6Parser14get_next_tokenEv+0xb2>
	{
		Trans->report_error(std::get<std::string>(token_buffer.get_value()),
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685c      	ldr	r4, [r3, #4]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f103 0208 	add.w	r2, r3, #8
 800a85e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a862:	4611      	mov	r1, r2
 800a864:	4618      	mov	r0, r3
 800a866:	f007 fae9 	bl	8011e3c <_ZN5Token9get_valueB5cxx11Ev>
 800a86a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 fd2c 	bl	800b2cc <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 800a874:	4602      	mov	r2, r0
 800a876:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a87a:	4611      	mov	r1, r2
 800a87c:	4618      	mov	r0, r3
 800a87e:	f00f f81a 	bl	80198b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	3308      	adds	r3, #8
 800a886:	4618      	mov	r0, r3
 800a888:	f007 fb15 	bl	8011eb6 <_ZN5Token8get_lineEv>
 800a88c:	4605      	mov	r5, r0
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	3308      	adds	r3, #8
 800a892:	4618      	mov	r0, r3
 800a894:	f007 fb29 	bl	8011eea <_ZN5Token12get_positionEv>
 800a898:	4603      	mov	r3, r0
 800a89a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a89e:	462a      	mov	r2, r5
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f007 fd5d 	bl	8012360 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
				token_buffer.get_line(), token_buffer.get_position());
 800a8a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f00f f81d 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Trans->report_error(std::get<std::string>(token_buffer.get_value()),
 800a8b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fb fde5 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	}
}
 800a8ba:	bf00      	nop
 800a8bc:	3768      	adds	r7, #104	; 0x68
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a8c4 <_ZN6Parser11parse_setupER7Program>:

void Parser::parse_setup(Program& Prog)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b094      	sub	sp, #80	; 0x50
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
	get_next_token();
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f7ff ff9a 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_SETUP, "\"setup\" keyword");
 800a8d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f00e fe3f 	bl	801955c <_ZNSaIcEC1Ev>
 800a8de:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a8e2:	f107 030c 	add.w	r3, r7, #12
 800a8e6:	4927      	ldr	r1, [pc, #156]	; (800a984 <_ZN6Parser11parse_setupER7Program+0xc0>)
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7f6 ff53 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a8ee:	f107 030c 	add.w	r3, r7, #12
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	2107      	movs	r1, #7
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7ff fc10 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a8fc:	f107 030c 	add.w	r3, r7, #12
 800a900:	4618      	mov	r0, r3
 800a902:	f00e fff2 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a90a:	4618      	mov	r0, r3
 800a90c:	f00e fe27 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff ff79 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_COLON, "colon after setup");
 800a916:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a91a:	4618      	mov	r0, r3
 800a91c:	f00e fe1e 	bl	801955c <_ZNSaIcEC1Ev>
 800a920:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a928:	4917      	ldr	r1, [pc, #92]	; (800a988 <_ZN6Parser11parse_setupER7Program+0xc4>)
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7f6 ff32 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a934:	461a      	mov	r2, r3
 800a936:	2101      	movs	r1, #1
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f7ff fbef 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a93e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a942:	4618      	mov	r0, r3
 800a944:	f00e ffd1 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a948:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a94c:	4618      	mov	r0, r3
 800a94e:	f00e fe06 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7ff ff58 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	Prog.setup = parse_body();
 800a958:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a95c:	6879      	ldr	r1, [r7, #4]
 800a95e:	4618      	mov	r0, r3
 800a960:	f7ff fedc 	bl	800a71c <_ZN6Parser10parse_bodyEv>
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a96a:	4611      	mov	r1, r2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fe ff5f 	bl	8009830 <_ZN4BodyaSERKS_>
 800a972:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a976:	4618      	mov	r0, r3
 800a978:	f006 fe02 	bl	8011580 <_ZN4BodyD1Ev>
}
 800a97c:	bf00      	nop
 800a97e:	3750      	adds	r7, #80	; 0x50
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	0801ce0c 	.word	0x0801ce0c
 800a988:	0801ce1c 	.word	0x0801ce1c

0800a98c <_ZN6Parser10parse_loopER7Program>:

void Parser::parse_loop(Program& Prog)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b094      	sub	sp, #80	; 0x50
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
	assert_token(TOKEN_LOOP, "\"loop\" keyword");
 800a996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a99a:	4618      	mov	r0, r3
 800a99c:	f00e fdde 	bl	801955c <_ZNSaIcEC1Ev>
 800a9a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a9a4:	f107 030c 	add.w	r3, r7, #12
 800a9a8:	4927      	ldr	r1, [pc, #156]	; (800aa48 <_ZN6Parser10parse_loopER7Program+0xbc>)
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7f6 fef2 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a9b0:	f107 030c 	add.w	r3, r7, #12
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	2108      	movs	r1, #8
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f7ff fbaf 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a9be:	f107 030c 	add.w	r3, r7, #12
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f00e ff91 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a9c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f00e fdc6 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7ff ff18 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_COLON, "colon after loop");
 800a9d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f00e fdbd 	bl	801955c <_ZNSaIcEC1Ev>
 800a9e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a9e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a9ea:	4918      	ldr	r1, [pc, #96]	; (800aa4c <_ZN6Parser10parse_loopER7Program+0xc0>)
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7f6 fed1 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a9f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7ff fb8e 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800aa00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa04:	4618      	mov	r0, r3
 800aa06:	f00e ff70 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aa0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f00e fda5 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7ff fef7 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	Prog.loop = parse_body();
 800aa1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800aa1e:	6879      	ldr	r1, [r7, #4]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7ff fe7b 	bl	800a71c <_ZN6Parser10parse_bodyEv>
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	330c      	adds	r3, #12
 800aa2a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800aa2e:	4611      	mov	r1, r2
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fe fefd 	bl	8009830 <_ZN4BodyaSERKS_>
 800aa36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f006 fda0 	bl	8011580 <_ZN4BodyD1Ev>
}
 800aa40:	bf00      	nop
 800aa42:	3750      	adds	r7, #80	; 0x50
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	0801ce30 	.word	0x0801ce30
 800aa4c:	0801ce40 	.word	0x0801ce40

0800aa50 <_ZN6Parser12parse_finishER7Program>:

void Parser::parse_finish(Program& Prog)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b094      	sub	sp, #80	; 0x50
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
	assert_token(TOKEN_FINISH, "\"finish\" keyword");
 800aa5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f00e fd7c 	bl	801955c <_ZNSaIcEC1Ev>
 800aa64:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800aa68:	f107 030c 	add.w	r3, r7, #12
 800aa6c:	4927      	ldr	r1, [pc, #156]	; (800ab0c <_ZN6Parser12parse_finishER7Program+0xbc>)
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7f6 fe90 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800aa74:	f107 030c 	add.w	r3, r7, #12
 800aa78:	461a      	mov	r2, r3
 800aa7a:	2109      	movs	r1, #9
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7ff fb4d 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800aa82:	f107 030c 	add.w	r3, r7, #12
 800aa86:	4618      	mov	r0, r3
 800aa88:	f00e ff2f 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aa8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa90:	4618      	mov	r0, r3
 800aa92:	f00e fd64 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f7ff feb6 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_COLON, "colon after finish");
 800aa9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f00e fd5b 	bl	801955c <_ZNSaIcEC1Ev>
 800aaa6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800aaaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aaae:	4918      	ldr	r1, [pc, #96]	; (800ab10 <_ZN6Parser12parse_finishER7Program+0xc0>)
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7f6 fe6f 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800aab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aaba:	461a      	mov	r2, r3
 800aabc:	2101      	movs	r1, #1
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7ff fb2c 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800aac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aac8:	4618      	mov	r0, r3
 800aaca:	f00e ff0e 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aad2:	4618      	mov	r0, r3
 800aad4:	f00e fd43 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7ff fe95 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	Prog.finish = parse_body();
 800aade:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800aae2:	6879      	ldr	r1, [r7, #4]
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7ff fe19 	bl	800a71c <_ZN6Parser10parse_bodyEv>
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	3318      	adds	r3, #24
 800aaee:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fe fe9b 	bl	8009830 <_ZN4BodyaSERKS_>
 800aafa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800aafe:	4618      	mov	r0, r3
 800ab00:	f006 fd3e 	bl	8011580 <_ZN4BodyD1Ev>
}
 800ab04:	bf00      	nop
 800ab06:	3750      	adds	r7, #80	; 0x50
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	0801ce54 	.word	0x0801ce54
 800ab10:	0801ce68 	.word	0x0801ce68

0800ab14 <_ZN7ProgramC1Ev>:
#include "Expression.h"
#include "Statement.h"
#include "Lexer.h"
#include "Transmitter.h"

class Program
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fe45 	bl	80097ae <_ZN4BodyC1Ev>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	330c      	adds	r3, #12
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fe fe40 	bl	80097ae <_ZN4BodyC1Ev>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	3318      	adds	r3, #24
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fe fe3b 	bl	80097ae <_ZN4BodyC1Ev>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <_ZN6Parser13parse_programEv>:

Program Parser::parse_program()
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	6039      	str	r1, [r7, #0]
	Program Prog;
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f7ff ffe1 	bl	800ab14 <_ZN7ProgramC1Ev>
	parse_setup(Prog);
 800ab52:	6879      	ldr	r1, [r7, #4]
 800ab54:	6838      	ldr	r0, [r7, #0]
 800ab56:	f7ff feb5 	bl	800a8c4 <_ZN6Parser11parse_setupER7Program>
	parse_loop(Prog);
 800ab5a:	6879      	ldr	r1, [r7, #4]
 800ab5c:	6838      	ldr	r0, [r7, #0]
 800ab5e:	f7ff ff15 	bl	800a98c <_ZN6Parser10parse_loopER7Program>
	parse_finish(Prog);
 800ab62:	6879      	ldr	r1, [r7, #4]
 800ab64:	6838      	ldr	r0, [r7, #0]
 800ab66:	f7ff ff73 	bl	800aa50 <_ZN6Parser12parse_finishER7Program>
	return Prog;
 800ab6a:	bf00      	nop
}
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 ff27 	bl	800b9d0 <_ZNSaIP14And_expressionEC1Ev>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f000 ff2f 	bl	800b9e8 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 ff37 	bl	800ba10 <_ZNSaIP9StatementEC1Ev>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f000 ff3f 	bl	800ba28 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <_ZNSaIP9StatementED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 ff47 	bl	800ba50 <_ZN9__gnu_cxx13new_allocatorIP9StatementED1Ev>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4618      	mov	r0, r3
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <_ZN9__gnu_cxx14__alloc_traitsISaIP14And_expressionES2_E27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800abcc:	b480      	push	{r7}
 800abce:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800abd0:	2300      	movs	r3, #0
 800abd2:	4618      	mov	r0, r3
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <_ZN9__gnu_cxx14__alloc_traitsISaIP14And_expressionES2_E15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800abdc:	b480      	push	{r7}
 800abde:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800abe0:	2301      	movs	r3, #1
 800abe2:	4618      	mov	r0, r3
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <_ZNSt6vectorIP14And_expressionSaIS1_EEaSERKS3_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 800abec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	f000 80e6 	beq.w	800adcc <_ZNSt6vectorIP14And_expressionSaIS1_EEaSERKS3_+0x1e0>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800ac00:	f7ff ffe4 	bl	800abcc <_ZN9__gnu_cxx14__alloc_traitsISaIP14And_expressionES2_E27_S_propagate_on_copy_assignEv>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d043      	beq.n	800ac92 <_ZNSt6vectorIP14And_expressionSaIS1_EEaSERKS3_+0xa6>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 800ac0a:	f7ff ffe7 	bl	800abdc <_ZN9__gnu_cxx14__alloc_traitsISaIP14And_expressionES2_E15_S_always_equalEv>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	f083 0301 	eor.w	r3, r3, #1
 800ac14:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d012      	beq.n	800ac40 <_ZNSt6vectorIP14And_expressionSaIS1_EEaSERKS3_+0x54>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7f7 fea5 	bl	800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800ac22:	4604      	mov	r4, r0
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 ff49 	bl	800babe <_ZNKSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	4619      	mov	r1, r3
 800ac30:	4620      	mov	r0, r4
 800ac32:	f000 ff4f 	bl	800bad4 <_ZStneRKSaIP14And_expressionES3_>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d001      	beq.n	800ac40 <_ZNSt6vectorIP14And_expressionSaIS1_EEaSERKS3_+0x54>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e000      	b.n	800ac42 <_ZNSt6vectorIP14And_expressionSaIS1_EEaSERKS3_+0x56>
 800ac40:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d017      	beq.n	800ac76 <_ZNSt6vectorIP14And_expressionSaIS1_EEaSERKS3_+0x8a>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 ff50 	bl	800baec <_ZNSt6vectorIP14And_expressionSaIS1_EE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800ac5e:	461a      	mov	r2, r3
 800ac60:	f7f8 fe2c 	bl	80038bc <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE13_M_deallocateEPS1_j>
		  this->_M_impl._M_start = nullptr;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7f7 fe77 	bl	800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800ac7e:	4604      	mov	r4, r0
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 ff1b 	bl	800babe <_ZNKSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f000 ff3b 	bl	800bb08 <_ZSt15__alloc_on_copyISaIP14And_expressionEEvRT_RKS3_>
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
 800ac92:	6838      	ldr	r0, [r7, #0]
 800ac94:	f000 ff46 	bl	800bb24 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 800ac98:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 ff52 	bl	800bb44 <_ZNKSt6vectorIP14And_expressionSaIS1_EE8capacityEv>
 800aca0:	4602      	mov	r2, r0
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	4293      	cmp	r3, r2
 800aca6:	bf8c      	ite	hi
 800aca8:	2301      	movhi	r3, #1
 800acaa:	2300      	movls	r3, #0
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d032      	beq.n	800ad18 <_ZNSt6vectorIP14And_expressionSaIS1_EEaSERKS3_+0x12c>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800acb2:	6838      	ldr	r0, [r7, #0]
 800acb4:	f000 ff56 	bl	800bb64 <_ZNKSt6vectorIP14And_expressionSaIS1_EE5beginEv>
 800acb8:	4604      	mov	r4, r0
 800acba:	6838      	ldr	r0, [r7, #0]
 800acbc:	f000 ff66 	bl	800bb8c <_ZNKSt6vectorIP14And_expressionSaIS1_EE3endEv>
 800acc0:	4603      	mov	r3, r0
 800acc2:	4622      	mov	r2, r4
 800acc4:	68f9      	ldr	r1, [r7, #12]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 ff74 	bl	800bbb4 <_ZNSt6vectorIP14And_expressionSaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>
 800accc:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681c      	ldr	r4, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4618      	mov	r0, r3
 800acda:	f7f7 fe47 	bl	800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800acde:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ace0:	461a      	mov	r2, r3
 800ace2:	4629      	mov	r1, r5
 800ace4:	4620      	mov	r0, r4
 800ace6:	f7f7 fe4c 	bl	8002982 <_ZSt8_DestroyIPP14And_expressionS1_EvT_S3_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800acfc:	461a      	mov	r2, r3
 800acfe:	f7f8 fddd 	bl	80038bc <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE13_M_deallocateEPS1_j>
	      this->_M_impl._M_start = __tmp;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68ba      	ldr	r2, [r7, #8]
 800ad06:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	441a      	add	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	609a      	str	r2, [r3, #8]
 800ad16:	e052      	b.n	800adbe <_ZNSt6vectorIP14And_expressionSaIS1_EEaSERKS3_+0x1d2>
	    }
	  else if (size() >= __xlen)
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 ff03 	bl	800bb24 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	4293      	cmp	r3, r2
 800ad24:	bf94      	ite	ls
 800ad26:	2301      	movls	r3, #1
 800ad28:	2300      	movhi	r3, #0
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d020      	beq.n	800ad72 <_ZNSt6vectorIP14And_expressionSaIS1_EEaSERKS3_+0x186>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800ad30:	6838      	ldr	r0, [r7, #0]
 800ad32:	f000 ff17 	bl	800bb64 <_ZNKSt6vectorIP14And_expressionSaIS1_EE5beginEv>
 800ad36:	4604      	mov	r4, r0
 800ad38:	6838      	ldr	r0, [r7, #0]
 800ad3a:	f000 ff27 	bl	800bb8c <_ZNKSt6vectorIP14And_expressionSaIS1_EE3endEv>
 800ad3e:	4605      	mov	r5, r0
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7f7 f83f 	bl	8001dc4 <_ZNSt6vectorIP14And_expressionSaIS1_EE5beginEv>
 800ad46:	4603      	mov	r3, r0
 800ad48:	461a      	mov	r2, r3
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f000 ff4d 	bl	800bbec <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_>
 800ad52:	4604      	mov	r4, r0
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7f7 f845 	bl	8001de4 <_ZNSt6vectorIP14And_expressionSaIS1_EE3endEv>
 800ad5a:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7f7 fe04 	bl	800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800ad64:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800ad66:	461a      	mov	r2, r3
 800ad68:	4629      	mov	r1, r5
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f000 ff56 	bl	800bc1c <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E>
 800ad70:	e025      	b.n	800adbe <_ZNSt6vectorIP14And_expressionSaIS1_EEaSERKS3_+0x1d2>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	681d      	ldr	r5, [r3, #0]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	681c      	ldr	r4, [r3, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fed2 	bl	800bb24 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 800ad80:	4603      	mov	r3, r0
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	18e1      	adds	r1, r4, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f000 ff53 	bl	800bc38 <_ZSt4copyIPP14And_expressionS2_ET0_T_S4_S3_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	681c      	ldr	r4, [r3, #0]
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 fec4 	bl	800bb24 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4618      	mov	r0, r3
 800adae:	f7f7 fddd 	bl	800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800adb2:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800adb4:	4632      	mov	r2, r6
 800adb6:	4629      	mov	r1, r5
 800adb8:	4620      	mov	r0, r4
 800adba:	f000 ff55 	bl	800bc68 <_ZSt22__uninitialized_copy_aIPP14And_expressionS2_S1_ET0_T_S4_S3_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	441a      	add	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	605a      	str	r2, [r3, #4]
	}
      return *this;
 800adcc:	687b      	ldr	r3, [r7, #4]
    }
 800adce:	4618      	mov	r0, r3
 800add0:	3714      	adds	r7, #20
 800add2:	46bd      	mov	sp, r7
 800add4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800add6 <_ZN9__gnu_cxx14__alloc_traitsISaIP9StatementES2_E27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 800add6:	b480      	push	{r7}
 800add8:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800adda:	2300      	movs	r3, #0
 800addc:	4618      	mov	r0, r3
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <_ZN9__gnu_cxx14__alloc_traitsISaIP9StatementES2_E15_S_always_equalEv>:
    static constexpr bool _S_always_equal()
 800ade6:	b480      	push	{r7}
 800ade8:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800adea:	2301      	movs	r3, #1
 800adec:	4618      	mov	r0, r3
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <_ZNSt6vectorIP9StatementSaIS1_EEaSERKS3_>:
    vector<_Tp, _Alloc>::
 800adf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adf8:	b085      	sub	sp, #20
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	f000 80e6 	beq.w	800afd6 <_ZNSt6vectorIP9StatementSaIS1_EEaSERKS3_+0x1e0>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800ae0a:	f7ff ffe4 	bl	800add6 <_ZN9__gnu_cxx14__alloc_traitsISaIP9StatementES2_E27_S_propagate_on_copy_assignEv>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d043      	beq.n	800ae9c <_ZNSt6vectorIP9StatementSaIS1_EEaSERKS3_+0xa6>
	      if (!_Alloc_traits::_S_always_equal()
 800ae14:	f7ff ffe7 	bl	800ade6 <_ZN9__gnu_cxx14__alloc_traitsISaIP9StatementES2_E15_S_always_equalEv>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	f083 0301 	eor.w	r3, r3, #1
 800ae1e:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d012      	beq.n	800ae4a <_ZNSt6vectorIP9StatementSaIS1_EEaSERKS3_+0x54>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f000 fe30 	bl	800ba8c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 ff2a 	bl	800bc8a <_ZNKSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800ae36:	4603      	mov	r3, r0
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f000 ff30 	bl	800bca0 <_ZStneRKSaIP9StatementES3_>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <_ZNSt6vectorIP9StatementSaIS1_EEaSERKS3_+0x54>
 800ae46:	2301      	movs	r3, #1
 800ae48:	e000      	b.n	800ae4c <_ZNSt6vectorIP9StatementSaIS1_EEaSERKS3_+0x56>
 800ae4a:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d017      	beq.n	800ae80 <_ZNSt6vectorIP9StatementSaIS1_EEaSERKS3_+0x8a>
		  this->clear();
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 ff31 	bl	800bcb8 <_ZNSt6vectorIP9StatementSaIS1_EE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800ae68:	461a      	mov	r2, r3
 800ae6a:	f000 fdfc 	bl	800ba66 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE13_M_deallocateEPS1_j>
		  this->_M_impl._M_start = nullptr;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 fe02 	bl	800ba8c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800ae88:	4604      	mov	r4, r0
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 fefc 	bl	800bc8a <_ZNKSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800ae92:	4603      	mov	r3, r0
 800ae94:	4619      	mov	r1, r3
 800ae96:	4620      	mov	r0, r4
 800ae98:	f000 ff1c 	bl	800bcd4 <_ZSt15__alloc_on_copyISaIP9StatementEEvRT_RKS3_>
	  const size_type __xlen = __x.size();
 800ae9c:	6838      	ldr	r0, [r7, #0]
 800ae9e:	f000 ff27 	bl	800bcf0 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800aea2:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 ff33 	bl	800bd10 <_ZNKSt6vectorIP9StatementSaIS1_EE8capacityEv>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	bf8c      	ite	hi
 800aeb2:	2301      	movhi	r3, #1
 800aeb4:	2300      	movls	r3, #0
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d032      	beq.n	800af22 <_ZNSt6vectorIP9StatementSaIS1_EEaSERKS3_+0x12c>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800aebc:	6838      	ldr	r0, [r7, #0]
 800aebe:	f000 ff37 	bl	800bd30 <_ZNKSt6vectorIP9StatementSaIS1_EE5beginEv>
 800aec2:	4604      	mov	r4, r0
 800aec4:	6838      	ldr	r0, [r7, #0]
 800aec6:	f000 ff47 	bl	800bd58 <_ZNKSt6vectorIP9StatementSaIS1_EE3endEv>
 800aeca:	4603      	mov	r3, r0
 800aecc:	4622      	mov	r2, r4
 800aece:	68f9      	ldr	r1, [r7, #12]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 ff55 	bl	800bd80 <_ZNSt6vectorIP9StatementSaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>
 800aed6:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681c      	ldr	r4, [r3, #0]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 fdd2 	bl	800ba8c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800aee8:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800aeea:	461a      	mov	r2, r3
 800aeec:	4629      	mov	r1, r5
 800aeee:	4620      	mov	r0, r4
 800aef0:	f000 fdd7 	bl	800baa2 <_ZSt8_DestroyIPP9StatementS1_EvT_S3_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800af06:	461a      	mov	r2, r3
 800af08:	f000 fdad 	bl	800ba66 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE13_M_deallocateEPS1_j>
	      this->_M_impl._M_start = __tmp;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	68ba      	ldr	r2, [r7, #8]
 800af10:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	441a      	add	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	609a      	str	r2, [r3, #8]
 800af20:	e052      	b.n	800afc8 <_ZNSt6vectorIP9StatementSaIS1_EEaSERKS3_+0x1d2>
	  else if (size() >= __xlen)
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fee4 	bl	800bcf0 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800af28:	4602      	mov	r2, r0
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	4293      	cmp	r3, r2
 800af2e:	bf94      	ite	ls
 800af30:	2301      	movls	r3, #1
 800af32:	2300      	movhi	r3, #0
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b00      	cmp	r3, #0
 800af38:	d020      	beq.n	800af7c <_ZNSt6vectorIP9StatementSaIS1_EEaSERKS3_+0x186>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800af3a:	6838      	ldr	r0, [r7, #0]
 800af3c:	f000 fef8 	bl	800bd30 <_ZNKSt6vectorIP9StatementSaIS1_EE5beginEv>
 800af40:	4604      	mov	r4, r0
 800af42:	6838      	ldr	r0, [r7, #0]
 800af44:	f000 ff08 	bl	800bd58 <_ZNKSt6vectorIP9StatementSaIS1_EE3endEv>
 800af48:	4605      	mov	r5, r0
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 ff34 	bl	800bdb8 <_ZNSt6vectorIP9StatementSaIS1_EE5beginEv>
 800af50:	4603      	mov	r3, r0
 800af52:	461a      	mov	r2, r3
 800af54:	4629      	mov	r1, r5
 800af56:	4620      	mov	r0, r4
 800af58:	f000 ff3e 	bl	800bdd8 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_>
 800af5c:	4604      	mov	r4, r0
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 ff52 	bl	800be08 <_ZNSt6vectorIP9StatementSaIS1_EE3endEv>
 800af64:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fd8f 	bl	800ba8c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800af6e:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800af70:	461a      	mov	r2, r3
 800af72:	4629      	mov	r1, r5
 800af74:	4620      	mov	r0, r4
 800af76:	f000 ff58 	bl	800be2a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E>
 800af7a:	e025      	b.n	800afc8 <_ZNSt6vectorIP9StatementSaIS1_EEaSERKS3_+0x1d2>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	681d      	ldr	r5, [r3, #0]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681c      	ldr	r4, [r3, #0]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 feb3 	bl	800bcf0 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800af8a:	4603      	mov	r3, r0
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	18e1      	adds	r1, r4, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	461a      	mov	r2, r3
 800af96:	4628      	mov	r0, r5
 800af98:	f000 ff55 	bl	800be46 <_ZSt4copyIPP9StatementS2_ET0_T_S4_S3_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	681c      	ldr	r4, [r3, #0]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fea5 	bl	800bcf0 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800afa6:	4603      	mov	r3, r0
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fd68 	bl	800ba8c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800afbc:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800afbe:	4632      	mov	r2, r6
 800afc0:	4629      	mov	r1, r5
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 ff57 	bl	800be76 <_ZSt22__uninitialized_copy_aIPP9StatementS2_S1_ET0_T_S4_S3_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	441a      	add	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	605a      	str	r2, [r3, #4]
      return *this;
 800afd6:	687b      	ldr	r3, [r7, #4]
    }
 800afd8:	4618      	mov	r0, r3
 800afda:	3714      	adds	r7, #20
 800afdc:	46bd      	mov	sp, r7
 800afde:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800afe0 <_ZNSt6vectorIP14And_expressionSaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 800afe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800afea:	687c      	ldr	r4, [r7, #4]
 800afec:	6838      	ldr	r0, [r7, #0]
 800afee:	f000 fd99 	bl	800bb24 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 800aff2:	4605      	mov	r5, r0
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fd61 	bl	800babe <_ZNKSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800affc:	4602      	mov	r2, r0
 800affe:	f107 030c 	add.w	r3, r7, #12
 800b002:	4611      	mov	r1, r2
 800b004:	4618      	mov	r0, r3
 800b006:	f000 ff47 	bl	800be98 <_ZN9__gnu_cxx14__alloc_traitsISaIP14And_expressionES2_E17_S_select_on_copyERKS3_>
 800b00a:	f107 030c 	add.w	r3, r7, #12
 800b00e:	461a      	mov	r2, r3
 800b010:	4629      	mov	r1, r5
 800b012:	4620      	mov	r0, r4
 800b014:	f000 ff4e 	bl	800beb4 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EEC1EjRKS2_>
 800b018:	f107 030c 	add.w	r3, r7, #12
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7f8 fc41 	bl	80038a4 <_ZNSaIP14And_expressionED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800b022:	6838      	ldr	r0, [r7, #0]
 800b024:	f000 fd9e 	bl	800bb64 <_ZNKSt6vectorIP14And_expressionSaIS1_EE5beginEv>
 800b028:	4605      	mov	r5, r0
 800b02a:	6838      	ldr	r0, [r7, #0]
 800b02c:	f000 fdae 	bl	800bb8c <_ZNKSt6vectorIP14And_expressionSaIS1_EE3endEv>
 800b030:	4606      	mov	r6, r0
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4618      	mov	r0, r3
 800b03a:	f7f7 fc97 	bl	800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800b03e:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800b040:	4622      	mov	r2, r4
 800b042:	4631      	mov	r1, r6
 800b044:	4628      	mov	r0, r5
 800b046:	f000 ff49 	bl	800bedc <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 800b04a:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	605a      	str	r2, [r3, #4]
      }
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4618      	mov	r0, r3
 800b054:	3714      	adds	r7, #20
 800b056:	46bd      	mov	sp, r7
 800b058:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b05a <_ZNSt6vectorIP9StatementSaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 800b05a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b05c:	b085      	sub	sp, #20
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
 800b062:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800b064:	687c      	ldr	r4, [r7, #4]
 800b066:	6838      	ldr	r0, [r7, #0]
 800b068:	f000 fe42 	bl	800bcf0 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800b06c:	4605      	mov	r5, r0
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	4618      	mov	r0, r3
 800b072:	f000 fe0a 	bl	800bc8a <_ZNKSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800b076:	4602      	mov	r2, r0
 800b078:	f107 030c 	add.w	r3, r7, #12
 800b07c:	4611      	mov	r1, r2
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 ff3d 	bl	800befe <_ZN9__gnu_cxx14__alloc_traitsISaIP9StatementES2_E17_S_select_on_copyERKS3_>
 800b084:	f107 030c 	add.w	r3, r7, #12
 800b088:	461a      	mov	r2, r3
 800b08a:	4629      	mov	r1, r5
 800b08c:	4620      	mov	r0, r4
 800b08e:	f000 ff44 	bl	800bf1a <_ZNSt12_Vector_baseIP9StatementSaIS1_EEC1EjRKS2_>
 800b092:	f107 030c 	add.w	r3, r7, #12
 800b096:	4618      	mov	r0, r3
 800b098:	f7ff fd8c 	bl	800abb4 <_ZNSaIP9StatementED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800b09c:	6838      	ldr	r0, [r7, #0]
 800b09e:	f000 fe47 	bl	800bd30 <_ZNKSt6vectorIP9StatementSaIS1_EE5beginEv>
 800b0a2:	4605      	mov	r5, r0
 800b0a4:	6838      	ldr	r0, [r7, #0]
 800b0a6:	f000 fe57 	bl	800bd58 <_ZNKSt6vectorIP9StatementSaIS1_EE3endEv>
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f000 fcea 	bl	800ba8c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800b0b8:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800b0ba:	4622      	mov	r2, r4
 800b0bc:	4631      	mov	r1, r6
 800b0be:	4628      	mov	r0, r5
 800b0c0:	f000 ff3f 	bl	800bf42 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 800b0c4:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	605a      	str	r2, [r3, #4]
      }
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3714      	adds	r7, #20
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b0d4 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	685a      	ldr	r2, [r3, #4]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d00c      	beq.n	800b104 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backERKS1_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	f000 ff36 	bl	800bf64 <_ZNSt16allocator_traitsISaIP10ExpressionEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	1d1a      	adds	r2, r3, #4
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800b102:	e008      	b.n	800b116 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 ff40 	bl	800bf8a <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800b10a:	4603      	mov	r3, r0
 800b10c:	683a      	ldr	r2, [r7, #0]
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 ff4b 	bl	800bfac <_ZNSt6vectorIP10ExpressionSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800b116:	bf00      	nop
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <_ZNSt6vectorIP4BodySaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 800b11e:	b580      	push	{r7, lr}
 800b120:	b082      	sub	sp, #8
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	429a      	cmp	r2, r3
 800b132:	d00c      	beq.n	800b14e <_ZNSt6vectorIP4BodySaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	4619      	mov	r1, r3
 800b13e:	f000 ffb1 	bl	800c0a4 <_ZNSt16allocator_traitsISaIP4BodyEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	1d1a      	adds	r2, r3, #4
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	605a      	str	r2, [r3, #4]
      }
 800b14c:	e008      	b.n	800b160 <_ZNSt6vectorIP4BodySaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 ffbb 	bl	800c0ca <_ZNSt6vectorIP4BodySaIS1_EE3endEv>
 800b154:	4603      	mov	r3, r0
 800b156:	683a      	ldr	r2, [r7, #0]
 800b158:	4619      	mov	r1, r3
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 ffc6 	bl	800c0ec <_ZNSt6vectorIP4BodySaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800b160:	bf00      	nop
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f001 f837 	bl	800c1e4 <_ZNSaIP10ExpressionEC1Ev>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4618      	mov	r0, r3
 800b17a:	f001 f83f 	bl	800c1fc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4618      	mov	r0, r3
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <_ZNSaIP10ExpressionED1Ev>:
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f001 f847 	bl	800c224 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionED1Ev>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4618      	mov	r0, r3
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <_ZNSt12_Vector_baseIP4BodySaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f001 f872 	bl	800c292 <_ZNSaIP4BodyEC1Ev>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f001 f87a 	bl	800c2aa <_ZNSt12_Vector_baseIP4BodySaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3708      	adds	r7, #8
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <_ZNSaIP4BodyED1Ev>:
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f001 f882 	bl	800c2d2 <_ZN9__gnu_cxx13new_allocatorIP4BodyED1Ev>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <_ZNSt6vectorIP10ExpressionSaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 800b1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800b1e2:	687c      	ldr	r4, [r7, #4]
 800b1e4:	6838      	ldr	r0, [r7, #0]
 800b1e6:	f001 f8ab 	bl	800c340 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800b1ea:	4605      	mov	r5, r0
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f001 f8c4 	bl	800c37c <_ZNKSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	f107 030c 	add.w	r3, r7, #12
 800b1fa:	4611      	mov	r1, r2
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f001 f8af 	bl	800c360 <_ZN9__gnu_cxx14__alloc_traitsISaIP10ExpressionES2_E17_S_select_on_copyERKS3_>
 800b202:	f107 030c 	add.w	r3, r7, #12
 800b206:	461a      	mov	r2, r3
 800b208:	4629      	mov	r1, r5
 800b20a:	4620      	mov	r0, r4
 800b20c:	f001 f8c1 	bl	800c392 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EEC1EjRKS2_>
 800b210:	f107 030c 	add.w	r3, r7, #12
 800b214:	4618      	mov	r0, r3
 800b216:	f7ff ffb7 	bl	800b188 <_ZNSaIP10ExpressionED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800b21a:	6838      	ldr	r0, [r7, #0]
 800b21c:	f001 f8cd 	bl	800c3ba <_ZNKSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 800b220:	4605      	mov	r5, r0
 800b222:	6838      	ldr	r0, [r7, #0]
 800b224:	f001 f8dd 	bl	800c3e2 <_ZNKSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800b228:	4606      	mov	r6, r0
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4618      	mov	r0, r3
 800b232:	f001 f815 	bl	800c260 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800b236:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800b238:	4622      	mov	r2, r4
 800b23a:	4631      	mov	r1, r6
 800b23c:	4628      	mov	r0, r5
 800b23e:	f001 f8e4 	bl	800c40a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 800b242:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	605a      	str	r2, [r3, #4]
      }
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4618      	mov	r0, r3
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b252 <_ZNSt6vectorIP4BodySaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 800b252:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b254:	b085      	sub	sp, #20
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800b25c:	687c      	ldr	r4, [r7, #4]
 800b25e:	6838      	ldr	r0, [r7, #0]
 800b260:	f001 f8e4 	bl	800c42c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800b264:	4605      	mov	r5, r0
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	4618      	mov	r0, r3
 800b26a:	f001 f8fd 	bl	800c468 <_ZNKSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800b26e:	4602      	mov	r2, r0
 800b270:	f107 030c 	add.w	r3, r7, #12
 800b274:	4611      	mov	r1, r2
 800b276:	4618      	mov	r0, r3
 800b278:	f001 f8e8 	bl	800c44c <_ZN9__gnu_cxx14__alloc_traitsISaIP4BodyES2_E17_S_select_on_copyERKS3_>
 800b27c:	f107 030c 	add.w	r3, r7, #12
 800b280:	461a      	mov	r2, r3
 800b282:	4629      	mov	r1, r5
 800b284:	4620      	mov	r0, r4
 800b286:	f001 f8fa 	bl	800c47e <_ZNSt12_Vector_baseIP4BodySaIS1_EEC1EjRKS2_>
 800b28a:	f107 030c 	add.w	r3, r7, #12
 800b28e:	4618      	mov	r0, r3
 800b290:	f7ff ff96 	bl	800b1c0 <_ZNSaIP4BodyED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800b294:	6838      	ldr	r0, [r7, #0]
 800b296:	f001 f906 	bl	800c4a6 <_ZNKSt6vectorIP4BodySaIS1_EE5beginEv>
 800b29a:	4605      	mov	r5, r0
 800b29c:	6838      	ldr	r0, [r7, #0]
 800b29e:	f001 f916 	bl	800c4ce <_ZNKSt6vectorIP4BodySaIS1_EE3endEv>
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f001 f82f 	bl	800c30e <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800b2b0:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800b2b2:	4622      	mov	r2, r4
 800b2b4:	4631      	mov	r1, r6
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	f001 f91d 	bl	800c4f6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 800b2bc:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	605a      	str	r2, [r3, #4]
      }
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3714      	adds	r7, #20
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b2cc <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>:
    constexpr _Tp&& get(variant<_Types...>&& __v)
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
	std::move(__v));
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f001 f91f 	bl	800c518 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 800b2da:	4603      	mov	r3, r0
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f001 f949 	bl	800c574 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>
 800b2e2:	4603      	mov	r3, r0
    }
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 800b2f6:	6839      	ldr	r1, [r7, #0]
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f00e fbe9 	bl	8019ad0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	bf0c      	ite	eq
 800b304:	2301      	moveq	r3, #1
 800b306:	2300      	movne	r3, #0
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	4618      	mov	r0, r3
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 800b312:	b580      	push	{r7, lr}
 800b314:	b086      	sub	sp, #24
 800b316:	af00      	add	r7, sp, #0
 800b318:	60f8      	str	r0, [r7, #12]
 800b31a:	60b9      	str	r1, [r7, #8]
 800b31c:	607a      	str	r2, [r7, #4]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
 800b31e:	68b8      	ldr	r0, [r7, #8]
 800b320:	f7f5 fe6e 	bl	8001000 <_ZNSt11char_traitsIcE6lengthEPKc>
 800b324:	6178      	str	r0, [r7, #20]
      __string_type __str;
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f00e fabe 	bl	80198a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
      __str.reserve(__len + __rhs.size());
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f00e fb10 	bl	8019952 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800b332:	4602      	mov	r2, r0
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	4413      	add	r3, r2
 800b338:	4619      	mov	r1, r3
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f00e fb0d 	bl	801995a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 800b340:	697a      	ldr	r2, [r7, #20]
 800b342:	68b9      	ldr	r1, [r7, #8]
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f00e fb8d 	bl	8019a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 800b34a:	6879      	ldr	r1, [r7, #4]
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f00e fb83 	bl	8019a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 800b352:	bf00      	nop
    }
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	3718      	adds	r7, #24
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800b368:	6879      	ldr	r1, [r7, #4]
 800b36a:	68b8      	ldr	r0, [r7, #8]
 800b36c:	f00e fb8a 	bl	8019a84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 800b370:	4603      	mov	r3, r0
 800b372:	4618      	mov	r0, r3
 800b374:	f001 f91e 	bl	800c5b4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800b378:	4603      	mov	r3, r0
 800b37a:	4619      	mov	r1, r3
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f00e fa9a 	bl	80198b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backEOS1_>:

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b082      	sub	sp, #8
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800b394:	6838      	ldr	r0, [r7, #0]
 800b396:	f001 f918 	bl	800c5ca <_ZSt4moveIRP10ExpressionEONSt16remove_referenceIT_E4typeEOS4_>
 800b39a:	4603      	mov	r3, r0
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f001 f91e 	bl	800c5e0 <_ZNSt6vectorIP10ExpressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800b3a4:	bf00      	nop
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <_ZNKSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE5indexEv>:
      constexpr size_t index() const noexcept
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
	if (this->_M_index ==
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b3ba:	2bff      	cmp	r3, #255	; 0xff
 800b3bc:	d102      	bne.n	800b3c4 <_ZNKSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE5indexEv+0x18>
	  return variant_npos;
 800b3be:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c2:	e002      	b.n	800b3ca <_ZNKSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE5indexEv+0x1e>
	return this->_M_index;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
      }
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <_ZN13Function_callaSERKS_>:
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b082      	sub	sp, #8
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	6039      	str	r1, [r7, #0]
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f00e fa85 	bl	80198f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	f103 0218 	add.w	r2, r3, #24
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	3318      	adds	r3, #24
 800b3f6:	4611      	mov	r1, r2
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f001 f98e 	bl	800c71a <_ZNSt6vectorIP10ExpressionSaIS1_EEaSERKS3_>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4618      	mov	r0, r3
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>:
	operator=(_Tp&& __rhs)
 800b408:	b590      	push	{r4, r7, lr}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800b412:	2301      	movs	r3, #1
 800b414:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7ff ffc8 	bl	800b3ac <_ZNKSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE5indexEv>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b01      	cmp	r3, #1
 800b420:	bf0c      	ite	eq
 800b422:	2301      	moveq	r3, #1
 800b424:	2300      	movne	r3, #0
 800b426:	b2db      	uxtb	r3, r3
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00c      	beq.n	800b446 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x3e>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800b42c:	6838      	ldr	r0, [r7, #0]
 800b42e:	f001 f959 	bl	800c6e4 <_ZSt7forwardI13Function_callEOT_RNSt16remove_referenceIS1_E4typeE>
 800b432:	4604      	mov	r4, r0
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f001 f939 	bl	800c6ac <_ZSt3getILj1EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 800b43a:	4603      	mov	r3, r0
 800b43c:	4621      	mov	r1, r4
 800b43e:	4618      	mov	r0, r3
 800b440:	f7ff ffc9 	bl	800b3d6 <_ZN13Function_callaSERKS_>
 800b444:	e007      	b.n	800b456 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x4e>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800b446:	6838      	ldr	r0, [r7, #0]
 800b448:	f001 f94c 	bl	800c6e4 <_ZSt7forwardI13Function_callEOT_RNSt16remove_referenceIS1_E4typeE>
 800b44c:	4603      	mov	r3, r0
 800b44e:	4619      	mov	r1, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f001 fa57 	bl	800c904 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE7emplaceILj1EJS1_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>
	  return *this;
 800b456:	687b      	ldr	r3, [r7, #4]
	}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd90      	pop	{r4, r7, pc}

0800b460 <_ZN10AssignmentaSEOS_>:
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4611      	mov	r1, r2
 800b470:	4618      	mov	r0, r3
 800b472:	f7fe fda0 	bl	8009fb6 <_ZN8VariableaSERKS_>
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	f103 0220 	add.w	r2, r3, #32
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	3320      	adds	r3, #32
 800b480:	4611      	mov	r1, r2
 800b482:	4618      	mov	r0, r3
 800b484:	f7fe f9c4 	bl	8009810 <_ZN10ExpressionaSERKS_>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4618      	mov	r0, r3
 800b48c:	3708      	adds	r7, #8
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS0_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>:
	operator=(_Tp&& __rhs)
 800b492:	b590      	push	{r4, r7, lr}
 800b494:	b085      	sub	sp, #20
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
 800b49a:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800b49c:	2300      	movs	r3, #0
 800b49e:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7ff ff83 	bl	800b3ac <_ZNKSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE5indexEv>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	bf0c      	ite	eq
 800b4ac:	2301      	moveq	r3, #1
 800b4ae:	2300      	movne	r3, #0
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d00c      	beq.n	800b4d0 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS0_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x3e>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800b4b6:	6838      	ldr	r0, [r7, #0]
 800b4b8:	f001 fa7c 	bl	800c9b4 <_ZSt7forwardI10AssignmentEOT_RNSt16remove_referenceIS1_E4typeE>
 800b4bc:	4604      	mov	r4, r0
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f001 fa5c 	bl	800c97c <_ZSt3getILj0EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7ff ffc9 	bl	800b460 <_ZN10AssignmentaSEOS_>
 800b4ce:	e007      	b.n	800b4e0 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS0_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x4e>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800b4d0:	6838      	ldr	r0, [r7, #0]
 800b4d2:	f001 fa6f 	bl	800c9b4 <_ZSt7forwardI10AssignmentEOT_RNSt16remove_referenceIS1_E4typeE>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f001 fa75 	bl	800c9ca <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE7emplaceILj0EJS0_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>
	  return *this;
 800b4e0:	687b      	ldr	r3, [r7, #4]
	}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd90      	pop	{r4, r7, pc}

0800b4ea <_ZSt9addressofIN9__gnu_cxx16__aligned_membufI10AssignmentEEEPT_RS4_>:
    addressof(_Tp& __r) noexcept
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b082      	sub	sp, #8
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f001 fa91 	bl	800ca1a <_ZSt11__addressofIN9__gnu_cxx16__aligned_membufI10AssignmentEEEPT_RS4_>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <_ZN15While_statementaSEOS_>:
class While_statement
 800b502:	b580      	push	{r7, lr}
 800b504:	b082      	sub	sp, #8
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	6039      	str	r1, [r7, #0]
 800b50c:	683a      	ldr	r2, [r7, #0]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4611      	mov	r1, r2
 800b512:	4618      	mov	r0, r3
 800b514:	f7fe f97c 	bl	8009810 <_ZN10ExpressionaSERKS_>
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	f103 020c 	add.w	r2, r3, #12
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	330c      	adds	r3, #12
 800b522:	4611      	mov	r1, r2
 800b524:	4618      	mov	r0, r3
 800b526:	f7fe f983 	bl	8009830 <_ZN4BodyaSERKS_>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4618      	mov	r0, r3
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS2_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>:
	operator=(_Tp&& __rhs)
 800b534:	b590      	push	{r4, r7, lr}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800b53e:	2302      	movs	r3, #2
 800b540:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7ff ff32 	bl	800b3ac <_ZNKSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE5indexEv>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	bf0c      	ite	eq
 800b54e:	2301      	moveq	r3, #1
 800b550:	2300      	movne	r3, #0
 800b552:	b2db      	uxtb	r3, r3
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00c      	beq.n	800b572 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS2_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x3e>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800b558:	6838      	ldr	r0, [r7, #0]
 800b55a:	f001 facb 	bl	800caf4 <_ZSt7forwardI15While_statementEOT_RNSt16remove_referenceIS1_E4typeE>
 800b55e:	4604      	mov	r4, r0
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f001 faab 	bl	800cabc <_ZSt3getILj2EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 800b566:	4603      	mov	r3, r0
 800b568:	4621      	mov	r1, r4
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7ff ffc9 	bl	800b502 <_ZN15While_statementaSEOS_>
 800b570:	e007      	b.n	800b582 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS2_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x4e>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800b572:	6838      	ldr	r0, [r7, #0]
 800b574:	f001 fabe 	bl	800caf4 <_ZSt7forwardI15While_statementEOT_RNSt16remove_referenceIS1_E4typeE>
 800b578:	4603      	mov	r3, r0
 800b57a:	4619      	mov	r1, r3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f001 fac4 	bl	800cb0a <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE7emplaceILj2EJS2_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>
	  return *this;
 800b582:	687b      	ldr	r3, [r7, #4]
	}
 800b584:	4618      	mov	r0, r3
 800b586:	3714      	adds	r7, #20
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd90      	pop	{r4, r7, pc}

0800b58c <_ZN12If_statementaSERKS_>:
class If_statement
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
 800b596:	683a      	ldr	r2, [r7, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4611      	mov	r1, r2
 800b59c:	4618      	mov	r0, r3
 800b59e:	f001 f8bc 	bl	800c71a <_ZNSt6vectorIP10ExpressionSaIS1_EEaSERKS3_>
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	f103 020c 	add.w	r2, r3, #12
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	330c      	adds	r3, #12
 800b5ac:	4611      	mov	r1, r2
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f001 fb53 	bl	800cc5a <_ZNSt6vectorIP4BodySaIS1_EEaSERKS3_>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>:
	operator=(_Tp&& __rhs)
 800b5be:	b590      	push	{r4, r7, lr}
 800b5c0:	b085      	sub	sp, #20
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f7ff feed 	bl	800b3ac <_ZNKSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE5indexEv>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b03      	cmp	r3, #3
 800b5d6:	bf0c      	ite	eq
 800b5d8:	2301      	moveq	r3, #1
 800b5da:	2300      	movne	r3, #0
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00c      	beq.n	800b5fc <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x3e>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800b5e2:	6838      	ldr	r0, [r7, #0]
 800b5e4:	f001 fb1e 	bl	800cc24 <_ZSt7forwardI12If_statementEOT_RNSt16remove_referenceIS1_E4typeE>
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f001 fafe 	bl	800cbec <_ZSt3getILj3EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7ff ffc9 	bl	800b58c <_ZN12If_statementaSERKS_>
 800b5fa:	e007      	b.n	800b60c <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x4e>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800b5fc:	6838      	ldr	r0, [r7, #0]
 800b5fe:	f001 fb11 	bl	800cc24 <_ZSt7forwardI12If_statementEOT_RNSt16remove_referenceIS1_E4typeE>
 800b602:	4603      	mov	r3, r0
 800b604:	4619      	mov	r1, r3
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f001 fc1c 	bl	800ce44 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE7emplaceILj3EJS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>
	  return *this;
 800b60c:	687b      	ldr	r3, [r7, #4]
	}
 800b60e:	4618      	mov	r0, r3
 800b610:	3714      	adds	r7, #20
 800b612:	46bd      	mov	sp, r7
 800b614:	bd90      	pop	{r4, r7, pc}

0800b616 <_ZNSt6vectorIP9StatementSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 800b616:	b580      	push	{r7, lr}
 800b618:	b082      	sub	sp, #8
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685a      	ldr	r2, [r3, #4]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d00c      	beq.n	800b646 <_ZNSt6vectorIP9StatementSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	4619      	mov	r1, r3
 800b636:	f001 fc1e 	bl	800ce76 <_ZNSt16allocator_traitsISaIP9StatementEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	1d1a      	adds	r2, r3, #4
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	605a      	str	r2, [r3, #4]
      }
 800b644:	e008      	b.n	800b658 <_ZNSt6vectorIP9StatementSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fbde 	bl	800be08 <_ZNSt6vectorIP9StatementSaIS1_EE3endEv>
 800b64c:	4603      	mov	r3, r0
 800b64e:	683a      	ldr	r2, [r7, #0]
 800b650:	4619      	mov	r1, r3
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f001 fc22 	bl	800ce9c <_ZNSt6vectorIP9StatementSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800b658:	bf00      	nop
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERKNSt8__detail9__variant17_Copy_assign_baseILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
	    return static_cast<const variant<_Types...>&>(__rhs);
 800b668:	687b      	ldr	r3, [r7, #4]
    }
 800b66a:	4618      	mov	r0, r3
 800b66c:	370c      	adds	r7, #12
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESM_EEDcOSG_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800b676:	b580      	push	{r7, lr}
 800b678:	b082      	sub	sp, #8
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7fd f9ae 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b684:	4603      	mov	r3, r0
 800b686:	4618      	mov	r0, r3
 800b688:	f7fc f994 	bl	80079b4 <_ZNSt8__detail9__variant5__getILj0ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800b68c:	4603      	mov	r3, r0
	}
 800b68e:	4618      	mov	r0, r3
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESI_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800b696:	b5b0      	push	{r4, r5, r7, lr}
 800b698:	b084      	sub	sp, #16
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
 800b69e:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f001 fc77 	bl	800cf94 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	6838      	ldr	r0, [r7, #0]
 800b6aa:	f7fd f999 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7ff ffe0 	bl	800b676 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESM_EEDcOSG_>
 800b6b6:	4601      	mov	r1, r0
 800b6b8:	f107 030c 	add.w	r3, r7, #12
 800b6bc:	461a      	mov	r2, r3
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f001 fc73 	bl	800cfaa <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKS8_St17integral_constantIjLj0EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>
	      integral_constant<size_t, __indices>()...);
 800b6c4:	462b      	mov	r3, r5
      }
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bdb0      	pop	{r4, r5, r7, pc}

0800b6ce <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESI_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800b6ce:	b5b0      	push	{r4, r5, r7, lr}
 800b6d0:	b082      	sub	sp, #8
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
 800b6d6:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f001 fc5b 	bl	800cf94 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b6de:	4604      	mov	r4, r0
 800b6e0:	6838      	ldr	r0, [r7, #0]
 800b6e2:	f7fd f97d 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f7ff ffd3 	bl	800b696 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800b6f0:	462b      	mov	r3, r5
      }
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bdb0      	pop	{r4, r5, r7, pc}

0800b6fa <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESI_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800b6fa:	b5b0      	push	{r4, r5, r7, lr}
 800b6fc:	b082      	sub	sp, #8
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f001 fc45 	bl	800cf94 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b70a:	4604      	mov	r4, r0
 800b70c:	6838      	ldr	r0, [r7, #0]
 800b70e:	f7fd f967 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b712:	4603      	mov	r3, r0
 800b714:	4619      	mov	r1, r3
 800b716:	4620      	mov	r0, r4
 800b718:	f7ff ffd9 	bl	800b6ce <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800b71c:	462b      	mov	r3, r5
      }
 800b71e:	4618      	mov	r0, r3
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bdb0      	pop	{r4, r5, r7, pc}

0800b726 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESM_EEDcOSG_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800b726:	b580      	push	{r7, lr}
 800b728:	b082      	sub	sp, #8
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7fd f956 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b734:	4603      	mov	r3, r0
 800b736:	4618      	mov	r0, r3
 800b738:	f7fc f9c6 	bl	8007ac8 <_ZNSt8__detail9__variant5__getILj1ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800b73c:	4603      	mov	r3, r0
	}
 800b73e:	4618      	mov	r0, r3
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESI_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800b746:	b5b0      	push	{r4, r5, r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f001 fc1f 	bl	800cf94 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b756:	4604      	mov	r4, r0
 800b758:	6838      	ldr	r0, [r7, #0]
 800b75a:	f7fd f941 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b75e:	4603      	mov	r3, r0
 800b760:	4618      	mov	r0, r3
 800b762:	f7ff ffe0 	bl	800b726 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESM_EEDcOSG_>
 800b766:	4601      	mov	r1, r0
 800b768:	f107 030c 	add.w	r3, r7, #12
 800b76c:	461a      	mov	r2, r3
 800b76e:	4620      	mov	r0, r4
 800b770:	f001 fc39 	bl	800cfe6 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKiSt17integral_constantIjLj1EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>
	      integral_constant<size_t, __indices>()...);
 800b774:	462b      	mov	r3, r5
      }
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bdb0      	pop	{r4, r5, r7, pc}

0800b77e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESI_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800b77e:	b5b0      	push	{r4, r5, r7, lr}
 800b780:	b082      	sub	sp, #8
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f001 fc03 	bl	800cf94 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b78e:	4604      	mov	r4, r0
 800b790:	6838      	ldr	r0, [r7, #0]
 800b792:	f7fd f925 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b796:	4603      	mov	r3, r0
 800b798:	4619      	mov	r1, r3
 800b79a:	4620      	mov	r0, r4
 800b79c:	f7ff ffd3 	bl	800b746 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800b7a0:	462b      	mov	r3, r5
      }
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bdb0      	pop	{r4, r5, r7, pc}

0800b7aa <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESI_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800b7aa:	b5b0      	push	{r4, r5, r7, lr}
 800b7ac:	b082      	sub	sp, #8
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f001 fbed 	bl	800cf94 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	6838      	ldr	r0, [r7, #0]
 800b7be:	f7fd f90f 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f7ff ffd9 	bl	800b77e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800b7cc:	462b      	mov	r3, r5
      }
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bdb0      	pop	{r4, r5, r7, pc}

0800b7d6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESM_EEDcOSG_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b082      	sub	sp, #8
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f7fd f8fe 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fc fa0a 	bl	8007c00 <_ZNSt8__detail9__variant5__getILj2ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800b7ec:	4603      	mov	r3, r0
	}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESI_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800b7f6:	b5b0      	push	{r4, r5, r7, lr}
 800b7f8:	b084      	sub	sp, #16
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
 800b7fe:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f001 fbc7 	bl	800cf94 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b806:	4604      	mov	r4, r0
 800b808:	6838      	ldr	r0, [r7, #0]
 800b80a:	f7fd f8e9 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b80e:	4603      	mov	r3, r0
 800b810:	4618      	mov	r0, r3
 800b812:	f7ff ffe0 	bl	800b7d6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESM_EEDcOSG_>
 800b816:	4601      	mov	r1, r0
 800b818:	f107 030c 	add.w	r3, r7, #12
 800b81c:	461a      	mov	r2, r3
 800b81e:	4620      	mov	r0, r4
 800b820:	f001 fbff 	bl	800d022 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKfSt17integral_constantIjLj2EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>
	      integral_constant<size_t, __indices>()...);
 800b824:	462b      	mov	r3, r5
      }
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bdb0      	pop	{r4, r5, r7, pc}

0800b82e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESI_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800b82e:	b5b0      	push	{r4, r5, r7, lr}
 800b830:	b082      	sub	sp, #8
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f001 fbab 	bl	800cf94 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b83e:	4604      	mov	r4, r0
 800b840:	6838      	ldr	r0, [r7, #0]
 800b842:	f7fd f8cd 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b846:	4603      	mov	r3, r0
 800b848:	4619      	mov	r1, r3
 800b84a:	4620      	mov	r0, r4
 800b84c:	f7ff ffd3 	bl	800b7f6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800b850:	462b      	mov	r3, r5
      }
 800b852:	4618      	mov	r0, r3
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bdb0      	pop	{r4, r5, r7, pc}

0800b85a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESI_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800b85a:	b5b0      	push	{r4, r5, r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f001 fb95 	bl	800cf94 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b86a:	4604      	mov	r4, r0
 800b86c:	6838      	ldr	r0, [r7, #0]
 800b86e:	f7fd f8b7 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b872:	4603      	mov	r3, r0
 800b874:	4619      	mov	r1, r3
 800b876:	4620      	mov	r0, r4
 800b878:	f7ff ffd9 	bl	800b82e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800b87c:	462b      	mov	r3, r5
      }
 800b87e:	4618      	mov	r0, r3
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bdb0      	pop	{r4, r5, r7, pc}

0800b886 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESM_EEDcOSG_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800b886:	b580      	push	{r7, lr}
 800b888:	b082      	sub	sp, #8
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f7fd f8a6 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b894:	4603      	mov	r3, r0
 800b896:	4618      	mov	r0, r3
 800b898:	f7fc fa60 	bl	8007d5c <_ZNSt8__detail9__variant5__getILj3ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800b89c:	4603      	mov	r3, r0
	}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESI_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800b8a6:	b5b0      	push	{r4, r5, r7, lr}
 800b8a8:	b084      	sub	sp, #16
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f001 fb6f 	bl	800cf94 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	6838      	ldr	r0, [r7, #0]
 800b8ba:	f7fd f891 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7ff ffe0 	bl	800b886 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESM_EEDcOSG_>
 800b8c6:	4601      	mov	r1, r0
 800b8c8:	f107 030c 	add.w	r3, r7, #12
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f001 fbc5 	bl	800d05e <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKbSt17integral_constantIjLj3EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>
	      integral_constant<size_t, __indices>()...);
 800b8d4:	462b      	mov	r3, r5
      }
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bdb0      	pop	{r4, r5, r7, pc}

0800b8de <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESI_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800b8de:	b5b0      	push	{r4, r5, r7, lr}
 800b8e0:	b082      	sub	sp, #8
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
 800b8e6:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f001 fb53 	bl	800cf94 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	6838      	ldr	r0, [r7, #0]
 800b8f2:	f7fd f875 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f7ff ffd3 	bl	800b8a6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800b900:	462b      	mov	r3, r5
      }
 800b902:	4618      	mov	r0, r3
 800b904:	3708      	adds	r7, #8
 800b906:	46bd      	mov	sp, r7
 800b908:	bdb0      	pop	{r4, r5, r7, pc}

0800b90a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESI_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800b90a:	b5b0      	push	{r4, r5, r7, lr}
 800b90c:	b082      	sub	sp, #8
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f001 fb3d 	bl	800cf94 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b91a:	4604      	mov	r4, r0
 800b91c:	6838      	ldr	r0, [r7, #0]
 800b91e:	f7fd f85f 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b922:	4603      	mov	r3, r0
 800b924:	4619      	mov	r1, r3
 800b926:	4620      	mov	r0, r4
 800b928:	f7ff ffd9 	bl	800b8de <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800b92c:	462b      	mov	r3, r5
      }
 800b92e:	4618      	mov	r0, r3
 800b930:	3708      	adds	r7, #8
 800b932:	46bd      	mov	sp, r7
 800b934:	bdb0      	pop	{r4, r5, r7, pc}

0800b936 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_RKSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSN_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 800b936:	b580      	push	{r7, lr}
 800b938:	b082      	sub	sp, #8
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
 800b93e:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	4413      	add	r3, r2
 800b948:	4618      	mov	r0, r3
 800b94a:	f001 fba6 	bl	800d09a <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_RKSt7variantIJS9_ifbEEEJEE9_M_accessEv>
 800b94e:	4603      	mov	r3, r0
	}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>:
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 800b958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 800b962:	4b0f      	ldr	r3, [pc, #60]	; (800b9a0 <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKSt7variantIJS8_ifbEEEEDcOT1_DpOT2_+0x48>)
 800b964:	60fb      	str	r3, [r7, #12]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 800b966:	6838      	ldr	r0, [r7, #0]
 800b968:	f7fc fa70 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800b96c:	4603      	mov	r3, r0
 800b96e:	4619      	mov	r1, r3
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f7ff ffe0 	bl	800b936 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_RKSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSN_jDpT_>
 800b976:	4603      	mov	r3, r0
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 800b97c:	68bc      	ldr	r4, [r7, #8]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f001 fb96 	bl	800d0b0 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b984:	4605      	mov	r5, r0
 800b986:	6838      	ldr	r0, [r7, #0]
 800b988:	f7fd f82a 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b98c:	4603      	mov	r3, r0
 800b98e:	4619      	mov	r1, r3
 800b990:	4628      	mov	r0, r5
 800b992:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 800b994:	4633      	mov	r3, r6
    }
 800b996:	4618      	mov	r0, r3
 800b998:	3714      	adds	r7, #20
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	0801d21c 	.word	0x0801d21c

0800b9a4 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>:
      operator=(const _Copy_assign_base& __rhs)
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	60fb      	str	r3, [r7, #12]
 800b9b2:	6838      	ldr	r0, [r7, #0]
 800b9b4:	f7ff fe54 	bl	800b660 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERKNSt8__detail9__variant17_Copy_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	f107 030c 	add.w	r3, r7, #12
 800b9be:	4611      	mov	r1, r2
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7ff ffc9 	bl	800b958 <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>
	return *this;
 800b9c6:	687b      	ldr	r3, [r7, #4]
      }
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <_ZNSaIP14And_expressionEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f001 fb74 	bl	800d0c6 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionEC1Ev>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	605a      	str	r2, [r3, #4]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	609a      	str	r2, [r3, #8]
	{ }
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4618      	mov	r0, r3
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <_ZNSaIP9StatementEC1Ev>:
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f001 fb5f 	bl	800d0dc <_ZN9__gnu_cxx13new_allocatorIP9StatementEC1Ev>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4618      	mov	r0, r3
 800ba22:	3708      	adds	r7, #8
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	601a      	str	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	605a      	str	r2, [r3, #4]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	609a      	str	r2, [r3, #8]
	{ }
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4618      	mov	r0, r3
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <_ZN9__gnu_cxx13new_allocatorIP9StatementED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	370c      	adds	r7, #12
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr

0800ba66 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b084      	sub	sp, #16
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	60f8      	str	r0, [r7, #12]
 800ba6e:	60b9      	str	r1, [r7, #8]
 800ba70:	607a      	str	r2, [r7, #4]
	if (__p)
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d005      	beq.n	800ba84 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	68b9      	ldr	r1, [r7, #8]
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f001 fb37 	bl	800d0f2 <_ZNSt16allocator_traitsISaIP9StatementEE10deallocateERS2_PS1_j>
      }
 800ba84:	bf00      	nop
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4618      	mov	r0, r3
 800ba98:	370c      	adds	r7, #12
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <_ZSt8_DestroyIPP9StatementS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b084      	sub	sp, #16
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	60f8      	str	r0, [r7, #12]
 800baaa:	60b9      	str	r1, [r7, #8]
 800baac:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800baae:	68b9      	ldr	r1, [r7, #8]
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f001 fb2d 	bl	800d110 <_ZSt8_DestroyIPP9StatementEvT_S3_>
    }
 800bab6:	bf00      	nop
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <_ZNKSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <_ZStneRKSaIP14And_expressionES3_>:
      friend bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

      friend bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
      { return false; }
 800bade:	2300      	movs	r3, #0
 800bae0:	4618      	mov	r0, r3
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <_ZNSt6vectorIP14And_expressionSaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4619      	mov	r1, r3
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f001 fb15 	bl	800d12a <_ZNSt6vectorIP14And_expressionSaIS1_EE15_M_erase_at_endEPS1_>
 800bb00:	bf00      	nop
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <_ZSt15__alloc_on_copyISaIP14And_expressionEEvRT_RKS3_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 800bb12:	461a      	mov	r2, r3
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f001 fb28 	bl	800d16c <_ZSt18__do_alloc_on_copyISaIP14And_expressionEEvRT_RKS3_St17integral_constantIbLb0EE>
    }
 800bb1c:	bf00      	nop
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	685a      	ldr	r2, [r3, #4]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	109b      	asrs	r3, r3, #2
 800bb38:	4618      	mov	r0, r3
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <_ZNKSt6vectorIP14And_expressionSaIS1_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	109b      	asrs	r3, r3, #2
 800bb58:	4618      	mov	r0, r3
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <_ZNKSt6vectorIP14And_expressionSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	60fb      	str	r3, [r7, #12]
 800bb72:	f107 020c 	add.w	r2, r7, #12
 800bb76:	f107 0308 	add.w	r3, r7, #8
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f001 fb01 	bl	800d184 <_ZN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <_ZNKSt6vectorIP14And_expressionSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	60fb      	str	r3, [r7, #12]
 800bb9a:	f107 020c 	add.w	r2, r7, #12
 800bb9e:	f107 0308 	add.w	r3, r7, #8
 800bba2:	4611      	mov	r1, r2
 800bba4:	4618      	mov	r0, r3
 800bba6:	f001 faed 	bl	800d184 <_ZN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	4618      	mov	r0, r3
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <_ZNSt6vectorIP14And_expressionSaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	607a      	str	r2, [r7, #4]
 800bbc0:	603b      	str	r3, [r7, #0]
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	68b9      	ldr	r1, [r7, #8]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f001 faec 	bl	800d1a4 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE11_M_allocateEj>
 800bbcc:	6178      	str	r0, [r7, #20]
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7f6 fecb 	bl	800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800bbd6:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800bbd8:	697a      	ldr	r2, [r7, #20]
 800bbda:	6839      	ldr	r1, [r7, #0]
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 f97d 	bl	800bedc <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
	      return __result;
 800bbe2:	697b      	ldr	r3, [r7, #20]
	  __catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
	    }
	}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3718      	adds	r7, #24
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800bbec:	b590      	push	{r4, r7, lr}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f001 fae7 	bl	800d1cc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEEET_SA_>
 800bbfe:	4604      	mov	r4, r0
 800bc00:	68b8      	ldr	r0, [r7, #8]
 800bc02:	f001 fae3 	bl	800d1cc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEEET_SA_>
 800bc06:	4603      	mov	r3, r0
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f001 fae8 	bl	800d1e2 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_>
 800bc12:	4603      	mov	r3, r0
    }
 800bc14:	4618      	mov	r0, r3
 800bc16:	3714      	adds	r7, #20
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd90      	pop	{r4, r7, pc}

0800bc1c <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800bc28:	68b9      	ldr	r1, [r7, #8]
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f001 fafa 	bl	800d224 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS3_SaIS3_EEEEEvT_S9_>
    }
 800bc30:	bf00      	nop
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <_ZSt4copyIPP14And_expressionS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800bc38:	b590      	push	{r4, r7, lr}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f001 fafa 	bl	800d23e <_ZSt12__miter_baseIPP14And_expressionET_S3_>
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	68b8      	ldr	r0, [r7, #8]
 800bc4e:	f001 faf6 	bl	800d23e <_ZSt12__miter_baseIPP14And_expressionET_S3_>
 800bc52:	4603      	mov	r3, r0
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	4619      	mov	r1, r3
 800bc58:	4620      	mov	r0, r4
 800bc5a:	f001 fafb 	bl	800d254 <_ZSt14__copy_move_a2ILb0EPP14And_expressionS2_ET1_T0_S4_S3_>
 800bc5e:	4603      	mov	r3, r0
    }
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd90      	pop	{r4, r7, pc}

0800bc68 <_ZSt22__uninitialized_copy_aIPP14And_expressionS2_S1_ET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	68b9      	ldr	r1, [r7, #8]
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f001 fb0d 	bl	800d29a <_ZSt18uninitialized_copyIPP14And_expressionS2_ET0_T_S4_S3_>
 800bc80:	4603      	mov	r3, r0
 800bc82:	4618      	mov	r0, r3
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <_ZNKSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800bc8a:	b480      	push	{r7}
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4618      	mov	r0, r3
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <_ZStneRKSaIP9StatementES3_>:
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
      { return false; }
 800bcaa:	2300      	movs	r3, #0
 800bcac:	4618      	mov	r0, r3
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <_ZNSt6vectorIP9StatementSaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f001 faf9 	bl	800d2be <_ZNSt6vectorIP9StatementSaIS1_EE15_M_erase_at_endEPS1_>
 800bccc:	bf00      	nop
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <_ZSt15__alloc_on_copyISaIP9StatementEEvRT_RKS3_>:
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 800bcde:	461a      	mov	r2, r3
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f001 fb0c 	bl	800d300 <_ZSt18__do_alloc_on_copyISaIP9StatementEEvRT_RKS3_St17integral_constantIbLb0EE>
    }
 800bce8:	bf00      	nop
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	109b      	asrs	r3, r3, #2
 800bd04:	4618      	mov	r0, r3
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <_ZNKSt6vectorIP9StatementSaIS1_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	109b      	asrs	r3, r3, #2
 800bd24:	4618      	mov	r0, r3
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <_ZNKSt6vectorIP9StatementSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	60fb      	str	r3, [r7, #12]
 800bd3e:	f107 020c 	add.w	r2, r7, #12
 800bd42:	f107 0308 	add.w	r3, r7, #8
 800bd46:	4611      	mov	r1, r2
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f001 fae5 	bl	800d318 <_ZN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	4618      	mov	r0, r3
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <_ZNKSt6vectorIP9StatementSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	60fb      	str	r3, [r7, #12]
 800bd66:	f107 020c 	add.w	r2, r7, #12
 800bd6a:	f107 0308 	add.w	r3, r7, #8
 800bd6e:	4611      	mov	r1, r2
 800bd70:	4618      	mov	r0, r3
 800bd72:	f001 fad1 	bl	800d318 <_ZN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <_ZNSt6vectorIP9StatementSaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>:
	_M_allocate_and_copy(size_type __n,
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
 800bd8c:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	68b9      	ldr	r1, [r7, #8]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f001 fad0 	bl	800d338 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE11_M_allocateEj>
 800bd98:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7ff fe75 	bl	800ba8c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800bda2:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800bda4:	697a      	ldr	r2, [r7, #20]
 800bda6:	6839      	ldr	r1, [r7, #0]
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 f8ca 	bl	800bf42 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
	      return __result;
 800bdae:	697b      	ldr	r3, [r7, #20]
	}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3718      	adds	r7, #24
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <_ZNSt6vectorIP9StatementSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	f107 030c 	add.w	r3, r7, #12
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f001 fac9 	bl	800d360 <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3710      	adds	r7, #16
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_>:
    copy(_II __first, _II __last, _OI __result)
 800bdd8:	b590      	push	{r4, r7, lr}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f001 facb 	bl	800d380 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEEET_SA_>
 800bdea:	4604      	mov	r4, r0
 800bdec:	68b8      	ldr	r0, [r7, #8]
 800bdee:	f001 fac7 	bl	800d380 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEEET_SA_>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f001 facc 	bl	800d396 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_>
 800bdfe:	4603      	mov	r3, r0
    }
 800be00:	4618      	mov	r0, r3
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	bd90      	pop	{r4, r7, pc}

0800be08 <_ZNSt6vectorIP9StatementSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	1d1a      	adds	r2, r3, #4
 800be14:	f107 030c 	add.w	r3, r7, #12
 800be18:	4611      	mov	r1, r2
 800be1a:	4618      	mov	r0, r3
 800be1c:	f001 faa0 	bl	800d360 <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	60f8      	str	r0, [r7, #12]
 800be32:	60b9      	str	r1, [r7, #8]
 800be34:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800be36:	68b9      	ldr	r1, [r7, #8]
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f001 facd 	bl	800d3d8 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS3_SaIS3_EEEEEvT_S9_>
    }
 800be3e:	bf00      	nop
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <_ZSt4copyIPP9StatementS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800be46:	b590      	push	{r4, r7, lr}
 800be48:	b085      	sub	sp, #20
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	60f8      	str	r0, [r7, #12]
 800be4e:	60b9      	str	r1, [r7, #8]
 800be50:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f001 facd 	bl	800d3f2 <_ZSt12__miter_baseIPP9StatementET_S3_>
 800be58:	4604      	mov	r4, r0
 800be5a:	68b8      	ldr	r0, [r7, #8]
 800be5c:	f001 fac9 	bl	800d3f2 <_ZSt12__miter_baseIPP9StatementET_S3_>
 800be60:	4603      	mov	r3, r0
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	4619      	mov	r1, r3
 800be66:	4620      	mov	r0, r4
 800be68:	f001 face 	bl	800d408 <_ZSt14__copy_move_a2ILb0EPP9StatementS2_ET1_T0_S4_S3_>
 800be6c:	4603      	mov	r3, r0
    }
 800be6e:	4618      	mov	r0, r3
 800be70:	3714      	adds	r7, #20
 800be72:	46bd      	mov	sp, r7
 800be74:	bd90      	pop	{r4, r7, pc}

0800be76 <_ZSt22__uninitialized_copy_aIPP9StatementS2_S1_ET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800be76:	b580      	push	{r7, lr}
 800be78:	b084      	sub	sp, #16
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	60f8      	str	r0, [r7, #12]
 800be7e:	60b9      	str	r1, [r7, #8]
 800be80:	607a      	str	r2, [r7, #4]
 800be82:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	68b9      	ldr	r1, [r7, #8]
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f001 fae0 	bl	800d44e <_ZSt18uninitialized_copyIPP9StatementS2_ET0_T_S4_S3_>
 800be8e:	4603      	mov	r3, r0
 800be90:	4618      	mov	r0, r3
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <_ZN9__gnu_cxx14__alloc_traitsISaIP14And_expressionES2_E17_S_select_on_copyERKS3_>:
    static _Alloc _S_select_on_copy(const _Alloc& __a)
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f001 fae3 	bl	800d472 <_ZNSt16allocator_traitsISaIP14And_expressionEE37select_on_container_copy_constructionERKS2_>
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	3708      	adds	r7, #8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6879      	ldr	r1, [r7, #4]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f001 fae1 	bl	800d48c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800beca:	68b9      	ldr	r1, [r7, #8]
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f001 faef 	bl	800d4b0 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE17_M_create_storageEj>
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	4618      	mov	r0, r3
 800bed6:	3710      	adds	r7, #16
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
 800bee8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	68b9      	ldr	r1, [r7, #8]
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f001 faf9 	bl	800d4e6 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800bef4:	4603      	mov	r3, r0
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <_ZN9__gnu_cxx14__alloc_traitsISaIP9StatementES2_E17_S_select_on_copyERKS3_>:
    static _Alloc _S_select_on_copy(const _Alloc& __a)
 800befe:	b580      	push	{r7, lr}
 800bf00:	b082      	sub	sp, #8
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
 800bf06:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f001 fafc 	bl	800d50a <_ZNSt16allocator_traitsISaIP9StatementEE37select_on_container_copy_constructionERKS2_>
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	3708      	adds	r7, #8
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <_ZNSt12_Vector_baseIP9StatementSaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b084      	sub	sp, #16
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	60b9      	str	r1, [r7, #8]
 800bf24:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	6879      	ldr	r1, [r7, #4]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f001 fafa 	bl	800d524 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800bf30:	68b9      	ldr	r1, [r7, #8]
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f001 fb08 	bl	800d548 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE17_M_create_storageEj>
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b084      	sub	sp, #16
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	60f8      	str	r0, [r7, #12]
 800bf4a:	60b9      	str	r1, [r7, #8]
 800bf4c:	607a      	str	r2, [r7, #4]
 800bf4e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	68b9      	ldr	r1, [r7, #8]
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f001 fb12 	bl	800d57e <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3710      	adds	r7, #16
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <_ZNSt16allocator_traitsISaIP10ExpressionEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f001 fb16 	bl	800d5a2 <_ZSt7forwardIRKP10ExpressionEOT_RNSt16remove_referenceIS4_E4typeE>
 800bf76:	4603      	mov	r3, r0
 800bf78:	461a      	mov	r2, r3
 800bf7a:	68b9      	ldr	r1, [r7, #8]
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f001 fb1b 	bl	800d5b8 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 800bf82:	bf00      	nop
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b084      	sub	sp, #16
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	1d1a      	adds	r2, r3, #4
 800bf96:	f107 030c 	add.w	r3, r7, #12
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f001 fb21 	bl	800d5e4 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <_ZNSt6vectorIP10ExpressionSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800bfac:	b5b0      	push	{r4, r5, r7, lr}
 800bfae:	b08c      	sub	sp, #48	; 0x30
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800bfb8:	4a39      	ldr	r2, [pc, #228]	; (800c0a0 <_ZNSt6vectorIP10ExpressionSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800bfba:	2101      	movs	r1, #1
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f001 fb21 	bl	800d604 <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc>
 800bfc2:	62f8      	str	r0, [r7, #44]	; 0x2c
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f001 fb5e 	bl	800d692 <_ZNSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	617b      	str	r3, [r7, #20]
 800bfda:	f107 0214 	add.w	r2, r7, #20
 800bfde:	f107 0308 	add.w	r3, r7, #8
 800bfe2:	4611      	mov	r1, r2
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f001 fb64 	bl	800d6b2 <_ZN9__gnu_cxxmiIPP10ExpressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800bfea:	4603      	mov	r3, r0
 800bfec:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bff2:	4618      	mov	r0, r3
 800bff4:	f001 fb72 	bl	800d6dc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj>
 800bff8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800bffe:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c000:	6a3b      	ldr	r3, [r7, #32]
 800c002:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800c004:	69fa      	ldr	r2, [r7, #28]
 800c006:	18d5      	adds	r5, r2, r3
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f001 faca 	bl	800d5a2 <_ZSt7forwardIRKP10ExpressionEOT_RNSt16remove_referenceIS4_E4typeE>
 800c00e:	4603      	mov	r3, r0
 800c010:	461a      	mov	r2, r3
 800c012:	4629      	mov	r1, r5
 800c014:	4620      	mov	r0, r4
 800c016:	f7ff ffa5 	bl	800bf64 <_ZNSt16allocator_traitsISaIP10ExpressionEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800c01a:	2300      	movs	r3, #0
 800c01c:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c01e:	f107 0308 	add.w	r3, r7, #8
 800c022:	4618      	mov	r0, r3
 800c024:	f001 fb82 	bl	800d72c <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800c028:	4603      	mov	r3, r0
 800c02a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 f916 	bl	800c260 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800c034:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c036:	69fa      	ldr	r2, [r7, #28]
 800c038:	4621      	mov	r1, r4
 800c03a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c03c:	f001 fb62 	bl	800d704 <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800c040:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	3304      	adds	r3, #4
 800c046:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c048:	f107 0308 	add.w	r3, r7, #8
 800c04c:	4618      	mov	r0, r3
 800c04e:	f001 fb6d 	bl	800d72c <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800c052:	4603      	mov	r3, r0
 800c054:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	4618      	mov	r0, r3
 800c05a:	f000 f901 	bl	800c260 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800c05e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c060:	69ba      	ldr	r2, [r7, #24]
 800c062:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c064:	4620      	mov	r0, r4
 800c066:	f001 fb4d 	bl	800d704 <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800c06a:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800c06c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	689a      	ldr	r2, [r3, #8]
 800c072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c074:	1ad3      	subs	r3, r2, r3
 800c076:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800c078:	461a      	mov	r2, r3
 800c07a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c07c:	f000 f8dd 	bl	800c23a <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	69fa      	ldr	r2, [r7, #28]
 800c084:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	69ba      	ldr	r2, [r7, #24]
 800c08a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	69fa      	ldr	r2, [r7, #28]
 800c092:	441a      	add	r2, r3
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	609a      	str	r2, [r3, #8]
    }
 800c098:	bf00      	nop
 800c09a:	3730      	adds	r7, #48	; 0x30
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bdb0      	pop	{r4, r5, r7, pc}
 800c0a0:	0801ce7c 	.word	0x0801ce7c

0800c0a4 <_ZNSt16allocator_traitsISaIP4BodyEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f001 fb46 	bl	800d742 <_ZSt7forwardIRKP4BodyEOT_RNSt16remove_referenceIS4_E4typeE>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	68b9      	ldr	r1, [r7, #8]
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f001 fb4b 	bl	800d758 <_ZN9__gnu_cxx13new_allocatorIP4BodyE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 800c0c2:	bf00      	nop
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <_ZNSt6vectorIP4BodySaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b084      	sub	sp, #16
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	1d1a      	adds	r2, r3, #4
 800c0d6:	f107 030c 	add.w	r3, r7, #12
 800c0da:	4611      	mov	r1, r2
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f001 fb51 	bl	800d784 <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <_ZNSt6vectorIP4BodySaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800c0ec:	b5b0      	push	{r4, r5, r7, lr}
 800c0ee:	b08c      	sub	sp, #48	; 0x30
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800c0f8:	4a39      	ldr	r2, [pc, #228]	; (800c1e0 <_ZNSt6vectorIP4BodySaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800c0fa:	2101      	movs	r1, #1
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f001 fb51 	bl	800d7a4 <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc>
 800c102:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800c110:	68f8      	ldr	r0, [r7, #12]
 800c112:	f001 fb8e 	bl	800d832 <_ZNSt6vectorIP4BodySaIS1_EE5beginEv>
 800c116:	4603      	mov	r3, r0
 800c118:	617b      	str	r3, [r7, #20]
 800c11a:	f107 0214 	add.w	r2, r7, #20
 800c11e:	f107 0308 	add.w	r3, r7, #8
 800c122:	4611      	mov	r1, r2
 800c124:	4618      	mov	r0, r3
 800c126:	f001 fb94 	bl	800d852 <_ZN9__gnu_cxxmiIPP4BodySt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c12a:	4603      	mov	r3, r0
 800c12c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c132:	4618      	mov	r0, r3
 800c134:	f001 fba2 	bl	800d87c <_ZNSt12_Vector_baseIP4BodySaIS1_EE11_M_allocateEj>
 800c138:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800c13e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c140:	6a3b      	ldr	r3, [r7, #32]
 800c142:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800c144:	69fa      	ldr	r2, [r7, #28]
 800c146:	18d5      	adds	r5, r2, r3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f001 fafa 	bl	800d742 <_ZSt7forwardIRKP4BodyEOT_RNSt16remove_referenceIS4_E4typeE>
 800c14e:	4603      	mov	r3, r0
 800c150:	461a      	mov	r2, r3
 800c152:	4629      	mov	r1, r5
 800c154:	4620      	mov	r0, r4
 800c156:	f7ff ffa5 	bl	800c0a4 <_ZNSt16allocator_traitsISaIP4BodyEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800c15a:	2300      	movs	r3, #0
 800c15c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c15e:	f107 0308 	add.w	r3, r7, #8
 800c162:	4618      	mov	r0, r3
 800c164:	f001 fbb2 	bl	800d8cc <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800c168:	4603      	mov	r3, r0
 800c16a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	4618      	mov	r0, r3
 800c170:	f000 f8cd 	bl	800c30e <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800c174:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c176:	69fa      	ldr	r2, [r7, #28]
 800c178:	4621      	mov	r1, r4
 800c17a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c17c:	f001 fb92 	bl	800d8a4 <_ZNSt6vectorIP4BodySaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800c180:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	3304      	adds	r3, #4
 800c186:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c188:	f107 0308 	add.w	r3, r7, #8
 800c18c:	4618      	mov	r0, r3
 800c18e:	f001 fb9d 	bl	800d8cc <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800c192:	4603      	mov	r3, r0
 800c194:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	4618      	mov	r0, r3
 800c19a:	f000 f8b8 	bl	800c30e <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800c19e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c1a0:	69ba      	ldr	r2, [r7, #24]
 800c1a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f001 fb7d 	bl	800d8a4 <_ZNSt6vectorIP4BodySaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800c1aa:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800c1ac:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	689a      	ldr	r2, [r3, #8]
 800c1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b4:	1ad3      	subs	r3, r2, r3
 800c1b6:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1bc:	f000 f894 	bl	800c2e8 <_ZNSt12_Vector_baseIP4BodySaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	69fa      	ldr	r2, [r7, #28]
 800c1c4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	69ba      	ldr	r2, [r7, #24]
 800c1ca:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	69fa      	ldr	r2, [r7, #28]
 800c1d2:	441a      	add	r2, r3
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	609a      	str	r2, [r3, #8]
    }
 800c1d8:	bf00      	nop
 800c1da:	3730      	adds	r7, #48	; 0x30
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bdb0      	pop	{r4, r5, r7, pc}
 800c1e0:	0801ce7c 	.word	0x0801ce7c

0800c1e4 <_ZNSaIP10ExpressionEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f001 fb78 	bl	800d8e2 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionEC1Ev>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	601a      	str	r2, [r3, #0]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	605a      	str	r2, [r3, #4]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	609a      	str	r2, [r3, #8]
	{ }
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4618      	mov	r0, r3
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionED1Ev>:
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4618      	mov	r0, r3
 800c230:	370c      	adds	r7, #12
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b084      	sub	sp, #16
 800c23e:	af00      	add	r7, sp, #0
 800c240:	60f8      	str	r0, [r7, #12]
 800c242:	60b9      	str	r1, [r7, #8]
 800c244:	607a      	str	r2, [r7, #4]
	if (__p)
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d005      	beq.n	800c258 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	68b9      	ldr	r1, [r7, #8]
 800c252:	4618      	mov	r0, r3
 800c254:	f001 fb50 	bl	800d8f8 <_ZNSt16allocator_traitsISaIP10ExpressionEE10deallocateERS2_PS1_j>
      }
 800c258:	bf00      	nop
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4618      	mov	r0, r3
 800c26c:	370c      	adds	r7, #12
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr

0800c276 <_ZSt8_DestroyIPP10ExpressionS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c276:	b580      	push	{r7, lr}
 800c278:	b084      	sub	sp, #16
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	60f8      	str	r0, [r7, #12]
 800c27e:	60b9      	str	r1, [r7, #8]
 800c280:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c282:	68b9      	ldr	r1, [r7, #8]
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f001 fb46 	bl	800d916 <_ZSt8_DestroyIPP10ExpressionEvT_S3_>
    }
 800c28a:	bf00      	nop
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <_ZNSaIP4BodyEC1Ev>:
 800c292:	b580      	push	{r7, lr}
 800c294:	b082      	sub	sp, #8
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f001 fb48 	bl	800d930 <_ZN9__gnu_cxx13new_allocatorIP4BodyEC1Ev>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <_ZNSt12_Vector_baseIP4BodySaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c2aa:	b480      	push	{r7}
 800c2ac:	b083      	sub	sp, #12
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	601a      	str	r2, [r3, #0]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	605a      	str	r2, [r3, #4]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	609a      	str	r2, [r3, #8]
	{ }
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	370c      	adds	r7, #12
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <_ZN9__gnu_cxx13new_allocatorIP4BodyED1Ev>:
 800c2d2:	b480      	push	{r7}
 800c2d4:	b083      	sub	sp, #12
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <_ZNSt12_Vector_baseIP4BodySaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
	if (__p)
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d005      	beq.n	800c306 <_ZNSt12_Vector_baseIP4BodySaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	68b9      	ldr	r1, [r7, #8]
 800c300:	4618      	mov	r0, r3
 800c302:	f001 fb20 	bl	800d946 <_ZNSt16allocator_traitsISaIP4BodyEE10deallocateERS2_PS1_j>
      }
 800c306:	bf00      	nop
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c30e:	b480      	push	{r7}
 800c310:	b083      	sub	sp, #12
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4618      	mov	r0, r3
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <_ZSt8_DestroyIPP4BodyS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c330:	68b9      	ldr	r1, [r7, #8]
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	f001 fb16 	bl	800d964 <_ZSt8_DestroyIPP4BodyEvT_S3_>
    }
 800c338:	bf00      	nop
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	685a      	ldr	r2, [r3, #4]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	109b      	asrs	r3, r3, #2
 800c354:	4618      	mov	r0, r3
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <_ZN9__gnu_cxx14__alloc_traitsISaIP10ExpressionES2_E17_S_select_on_copyERKS3_>:
    static _Alloc _S_select_on_copy(const _Alloc& __a)
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6839      	ldr	r1, [r7, #0]
 800c36e:	4618      	mov	r0, r3
 800c370:	f001 fb05 	bl	800d97e <_ZNSt16allocator_traitsISaIP10ExpressionEE37select_on_container_copy_constructionERKS2_>
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	3708      	adds	r7, #8
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <_ZNKSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	4618      	mov	r0, r3
 800c388:	370c      	adds	r7, #12
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800c392:	b580      	push	{r7, lr}
 800c394:	b084      	sub	sp, #16
 800c396:	af00      	add	r7, sp, #0
 800c398:	60f8      	str	r0, [r7, #12]
 800c39a:	60b9      	str	r1, [r7, #8]
 800c39c:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6879      	ldr	r1, [r7, #4]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f001 faf8 	bl	800d998 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800c3a8:	68b9      	ldr	r1, [r7, #8]
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	f001 fb06 	bl	800d9bc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE17_M_create_storageEj>
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <_ZNKSt6vectorIP10ExpressionSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b084      	sub	sp, #16
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	60fb      	str	r3, [r7, #12]
 800c3c8:	f107 020c 	add.w	r2, r7, #12
 800c3cc:	f107 0308 	add.w	r3, r7, #8
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f001 fb0d 	bl	800d9f2 <_ZN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <_ZNKSt6vectorIP10ExpressionSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b084      	sub	sp, #16
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	60fb      	str	r3, [r7, #12]
 800c3f0:	f107 020c 	add.w	r2, r7, #12
 800c3f4:	f107 0308 	add.w	r3, r7, #8
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f001 faf9 	bl	800d9f2 <_ZN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b084      	sub	sp, #16
 800c40e:	af00      	add	r7, sp, #0
 800c410:	60f8      	str	r0, [r7, #12]
 800c412:	60b9      	str	r1, [r7, #8]
 800c414:	607a      	str	r2, [r7, #4]
 800c416:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	68b9      	ldr	r1, [r7, #8]
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f001 faf8 	bl	800da12 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800c422:	4603      	mov	r3, r0
 800c424:	4618      	mov	r0, r3
 800c426:	3710      	adds	r7, #16
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	685a      	ldr	r2, [r3, #4]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	1ad3      	subs	r3, r2, r3
 800c43e:	109b      	asrs	r3, r3, #2
 800c440:	4618      	mov	r0, r3
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <_ZN9__gnu_cxx14__alloc_traitsISaIP4BodyES2_E17_S_select_on_copyERKS3_>:
    static _Alloc _S_select_on_copy(const _Alloc& __a)
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f001 faeb 	bl	800da36 <_ZNSt16allocator_traitsISaIP4BodyEE37select_on_container_copy_constructionERKS2_>
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	3708      	adds	r7, #8
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <_ZNKSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	4618      	mov	r0, r3
 800c474:	370c      	adds	r7, #12
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr

0800c47e <_ZNSt12_Vector_baseIP4BodySaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800c47e:	b580      	push	{r7, lr}
 800c480:	b084      	sub	sp, #16
 800c482:	af00      	add	r7, sp, #0
 800c484:	60f8      	str	r0, [r7, #12]
 800c486:	60b9      	str	r1, [r7, #8]
 800c488:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6879      	ldr	r1, [r7, #4]
 800c48e:	4618      	mov	r0, r3
 800c490:	f001 fade 	bl	800da50 <_ZNSt12_Vector_baseIP4BodySaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800c494:	68b9      	ldr	r1, [r7, #8]
 800c496:	68f8      	ldr	r0, [r7, #12]
 800c498:	f001 faec 	bl	800da74 <_ZNSt12_Vector_baseIP4BodySaIS1_EE17_M_create_storageEj>
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <_ZNKSt6vectorIP4BodySaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b084      	sub	sp, #16
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	60fb      	str	r3, [r7, #12]
 800c4b4:	f107 020c 	add.w	r2, r7, #12
 800c4b8:	f107 0308 	add.w	r3, r7, #8
 800c4bc:	4611      	mov	r1, r2
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f001 faf3 	bl	800daaa <_ZN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <_ZNKSt6vectorIP4BodySaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b084      	sub	sp, #16
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	60fb      	str	r3, [r7, #12]
 800c4dc:	f107 020c 	add.w	r2, r7, #12
 800c4e0:	f107 0308 	add.w	r3, r7, #8
 800c4e4:	4611      	mov	r1, r2
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f001 fadf 	bl	800daaa <_ZN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b084      	sub	sp, #16
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	60f8      	str	r0, [r7, #12]
 800c4fe:	60b9      	str	r1, [r7, #8]
 800c500:	607a      	str	r2, [r7, #4]
 800c502:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	68b9      	ldr	r1, [r7, #8]
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f001 fade 	bl	800daca <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800c50e:	4603      	mov	r3, r0
 800c510:	4618      	mov	r0, r3
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4618      	mov	r0, r3
 800c524:	370c      	adds	r7, #12
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800c52e:	b580      	push	{r7, lr}
 800c530:	b082      	sub	sp, #8
 800c532:	af00      	add	r7, sp, #0
 800c534:	7138      	strb	r0, [r7, #4]
 800c536:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800c538:	6838      	ldr	r0, [r7, #0]
 800c53a:	f001 fae3 	bl	800db04 <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISA_E4typeE>
 800c53e:	4603      	mov	r3, r0
 800c540:	4618      	mov	r0, r3
 800c542:	f001 faea 	bl	800db1a <_ZNOSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>
 800c546:	4603      	mov	r3, r0
 800c548:	4618      	mov	r0, r3
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <_ZNSt8__detail9__variant5__getILj0ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800c550:	b590      	push	{r4, r7, lr}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f001 fac8 	bl	800daee <_ZSt7forwardISt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800c55e:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800c560:	4619      	mov	r1, r3
 800c562:	4620      	mov	r0, r4
 800c564:	f7ff ffe3 	bl	800c52e <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 800c568:	4603      	mov	r3, r0
    }
 800c56a:	4618      	mov	r0, r3
 800c56c:	370c      	adds	r7, #12
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd90      	pop	{r4, r7, pc}
	...

0800c574 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>:
    get(variant<_Types...>&& __v)
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7fb fc65 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	bf14      	ite	ne
 800c588:	2301      	movne	r3, #1
 800c58a:	2300      	moveq	r3, #0
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d002      	beq.n	800c598 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800c592:	4807      	ldr	r0, [pc, #28]	; (800c5b0 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x3c>)
 800c594:	f7f4 fd2e 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(std::move(__v));
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f7ff ffbd 	bl	800c518 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7ff ffd5 	bl	800c550 <_ZNSt8__detail9__variant5__getILj0ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800c5a6:	4603      	mov	r3, r0
    }
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	0801ce98 	.word	0x0801ce98

0800c5b4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <_ZSt4moveIRP10ExpressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c5ca:	b480      	push	{r7}
 800c5cc:	b083      	sub	sp, #12
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <_ZNSt6vectorIP10ExpressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800c5e0:	b5b0      	push	{r4, r5, r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	685a      	ldr	r2, [r3, #4]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d011      	beq.n	800c61a <_ZNSt6vectorIP10ExpressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c5f6:	687c      	ldr	r4, [r7, #4]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685d      	ldr	r5, [r3, #4]
 800c5fc:	6838      	ldr	r0, [r7, #0]
 800c5fe:	f001 fa9d 	bl	800db3c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800c602:	4603      	mov	r3, r0
 800c604:	461a      	mov	r2, r3
 800c606:	4629      	mov	r1, r5
 800c608:	4620      	mov	r0, r4
 800c60a:	f001 faa2 	bl	800db52 <_ZNSt16allocator_traitsISaIP10ExpressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	1d1a      	adds	r2, r3, #4
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	605a      	str	r2, [r3, #4]
 800c618:	e00c      	b.n	800c634 <_ZNSt6vectorIP10ExpressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f7ff fcb5 	bl	800bf8a <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800c620:	4604      	mov	r4, r0
 800c622:	6838      	ldr	r0, [r7, #0]
 800c624:	f001 fa8a 	bl	800db3c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800c628:	4603      	mov	r3, r0
 800c62a:	461a      	mov	r2, r3
 800c62c:	4621      	mov	r1, r4
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f001 faa2 	bl	800db78 <_ZNSt6vectorIP10ExpressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f001 fb1b 	bl	800dc70 <_ZNSt6vectorIP10ExpressionSaIS1_EE4backEv>
 800c63a:	4603      	mov	r3, r0
      }
 800c63c:	4618      	mov	r0, r3
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bdb0      	pop	{r4, r5, r7, pc}

0800c644 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJ13Function_call15While_statement12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	7138      	strb	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800c64e:	6838      	ldr	r0, [r7, #0]
 800c650:	f001 fb3f 	bl	800dcd2 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ13Function_call15While_statement12If_statementEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800c654:	4603      	mov	r3, r0
 800c656:	4618      	mov	r0, r3
 800c658:	f001 fb46 	bl	800dce8 <_ZNRSt8__detail9__variant14_UninitializedI13Function_callLb0EE6_M_getEv>
 800c65c:	4603      	mov	r3, r0
 800c65e:	4618      	mov	r0, r3
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800c666:	b590      	push	{r4, r7, lr}
 800c668:	b083      	sub	sp, #12
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	7138      	strb	r0, [r7, #4]
 800c66e:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800c670:	6838      	ldr	r0, [r7, #0]
 800c672:	f001 fb23 	bl	800dcbc <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800c676:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800c678:	4619      	mov	r1, r3
 800c67a:	4620      	mov	r0, r4
 800c67c:	f7ff ffe2 	bl	800c644 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJ13Function_call15While_statement12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>
 800c680:	4603      	mov	r3, r0
    }
 800c682:	4618      	mov	r0, r3
 800c684:	370c      	adds	r7, #12
 800c686:	46bd      	mov	sp, r7
 800c688:	bd90      	pop	{r4, r7, pc}

0800c68a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800c68a:	b590      	push	{r4, r7, lr}
 800c68c:	b083      	sub	sp, #12
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f001 fb07 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800c698:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800c69a:	4619      	mov	r1, r3
 800c69c:	4620      	mov	r0, r4
 800c69e:	f7ff ffe2 	bl	800c666 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800c6a2:	4603      	mov	r3, r0
    }
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd90      	pop	{r4, r7, pc}

0800c6ac <_ZSt3getILj1EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>:
    get(variant<_Types...>& __v)
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f7fe fe79 	bl	800b3ac <_ZNKSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE5indexEv>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	bf14      	ite	ne
 800c6c0:	2301      	movne	r3, #1
 800c6c2:	2300      	moveq	r3, #0
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d002      	beq.n	800c6d0 <_ZSt3getILj1EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800c6ca:	4805      	ldr	r0, [pc, #20]	; (800c6e0 <_ZSt3getILj1EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x34>)
 800c6cc:	f7f4 fc92 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f7ff ffda 	bl	800c68a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>
 800c6d6:	4603      	mov	r3, r0
    }
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	0801ce98 	.word	0x0801ce98

0800c6e4 <_ZSt7forwardI13Function_callEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	370c      	adds	r7, #12
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr

0800c6fa <_ZN9__gnu_cxx14__alloc_traitsISaIP10ExpressionES2_E27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 800c6fa:	b480      	push	{r7}
 800c6fc:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800c6fe:	2300      	movs	r3, #0
 800c700:	4618      	mov	r0, r3
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <_ZN9__gnu_cxx14__alloc_traitsISaIP10ExpressionES2_E15_S_always_equalEv>:
    static constexpr bool _S_always_equal()
 800c70a:	b480      	push	{r7}
 800c70c:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800c70e:	2301      	movs	r3, #1
 800c710:	4618      	mov	r0, r3
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <_ZNSt6vectorIP10ExpressionSaIS1_EEaSERKS3_>:
    vector<_Tp, _Alloc>::
 800c71a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c71c:	b085      	sub	sp, #20
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 800c724:	683a      	ldr	r2, [r7, #0]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	429a      	cmp	r2, r3
 800c72a:	f000 80e6 	beq.w	800c8fa <_ZNSt6vectorIP10ExpressionSaIS1_EEaSERKS3_+0x1e0>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800c72e:	f7ff ffe4 	bl	800c6fa <_ZN9__gnu_cxx14__alloc_traitsISaIP10ExpressionES2_E27_S_propagate_on_copy_assignEv>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d043      	beq.n	800c7c0 <_ZNSt6vectorIP10ExpressionSaIS1_EEaSERKS3_+0xa6>
	      if (!_Alloc_traits::_S_always_equal()
 800c738:	f7ff ffe7 	bl	800c70a <_ZN9__gnu_cxx14__alloc_traitsISaIP10ExpressionES2_E15_S_always_equalEv>
 800c73c:	4603      	mov	r3, r0
 800c73e:	f083 0301 	eor.w	r3, r3, #1
 800c742:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 800c744:	2b00      	cmp	r3, #0
 800c746:	d012      	beq.n	800c76e <_ZNSt6vectorIP10ExpressionSaIS1_EEaSERKS3_+0x54>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7ff fd88 	bl	800c260 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800c750:	4604      	mov	r4, r0
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	4618      	mov	r0, r3
 800c756:	f7ff fe11 	bl	800c37c <_ZNKSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800c75a:	4603      	mov	r3, r0
 800c75c:	4619      	mov	r1, r3
 800c75e:	4620      	mov	r0, r4
 800c760:	f001 facf 	bl	800dd02 <_ZStneRKSaIP10ExpressionES3_>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d001      	beq.n	800c76e <_ZNSt6vectorIP10ExpressionSaIS1_EEaSERKS3_+0x54>
 800c76a:	2301      	movs	r3, #1
 800c76c:	e000      	b.n	800c770 <_ZNSt6vectorIP10ExpressionSaIS1_EEaSERKS3_+0x56>
 800c76e:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800c770:	2b00      	cmp	r3, #0
 800c772:	d017      	beq.n	800c7a4 <_ZNSt6vectorIP10ExpressionSaIS1_EEaSERKS3_+0x8a>
		  this->clear();
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f001 fad0 	bl	800dd1a <_ZNSt6vectorIP10ExpressionSaIS1_EE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	1ad3      	subs	r3, r2, r3
 800c78a:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800c78c:	461a      	mov	r2, r3
 800c78e:	f7ff fd54 	bl	800c23a <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>
		  this->_M_impl._M_start = nullptr;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7ff fd5a 	bl	800c260 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7ff fde3 	bl	800c37c <_ZNKSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	f001 fabb 	bl	800dd36 <_ZSt15__alloc_on_copyISaIP10ExpressionEEvRT_RKS3_>
	  const size_type __xlen = __x.size();
 800c7c0:	6838      	ldr	r0, [r7, #0]
 800c7c2:	f7ff fdbd 	bl	800c340 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800c7c6:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f001 fac2 	bl	800dd52 <_ZNKSt6vectorIP10ExpressionSaIS1_EE8capacityEv>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	bf8c      	ite	hi
 800c7d6:	2301      	movhi	r3, #1
 800c7d8:	2300      	movls	r3, #0
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d032      	beq.n	800c846 <_ZNSt6vectorIP10ExpressionSaIS1_EEaSERKS3_+0x12c>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800c7e0:	6838      	ldr	r0, [r7, #0]
 800c7e2:	f7ff fdea 	bl	800c3ba <_ZNKSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	6838      	ldr	r0, [r7, #0]
 800c7ea:	f7ff fdfa 	bl	800c3e2 <_ZNKSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	4622      	mov	r2, r4
 800c7f2:	68f9      	ldr	r1, [r7, #12]
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f001 fabc 	bl	800dd72 <_ZNSt6vectorIP10ExpressionSaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>
 800c7fa:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681c      	ldr	r4, [r3, #0]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4618      	mov	r0, r3
 800c808:	f7ff fd2a 	bl	800c260 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800c80c:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c80e:	461a      	mov	r2, r3
 800c810:	4629      	mov	r1, r5
 800c812:	4620      	mov	r0, r4
 800c814:	f7ff fd2f 	bl	800c276 <_ZSt8_DestroyIPP10ExpressionS1_EvT_S3_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800c82a:	461a      	mov	r2, r3
 800c82c:	f7ff fd05 	bl	800c23a <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>
	      this->_M_impl._M_start = __tmp;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	441a      	add	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	609a      	str	r2, [r3, #8]
 800c844:	e052      	b.n	800c8ec <_ZNSt6vectorIP10ExpressionSaIS1_EEaSERKS3_+0x1d2>
	  else if (size() >= __xlen)
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7ff fd7a 	bl	800c340 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800c84c:	4602      	mov	r2, r0
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	4293      	cmp	r3, r2
 800c852:	bf94      	ite	ls
 800c854:	2301      	movls	r3, #1
 800c856:	2300      	movhi	r3, #0
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d020      	beq.n	800c8a0 <_ZNSt6vectorIP10ExpressionSaIS1_EEaSERKS3_+0x186>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800c85e:	6838      	ldr	r0, [r7, #0]
 800c860:	f7ff fdab 	bl	800c3ba <_ZNKSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 800c864:	4604      	mov	r4, r0
 800c866:	6838      	ldr	r0, [r7, #0]
 800c868:	f7ff fdbb 	bl	800c3e2 <_ZNKSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800c86c:	4605      	mov	r5, r0
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 ff0f 	bl	800d692 <_ZNSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 800c874:	4603      	mov	r3, r0
 800c876:	461a      	mov	r2, r3
 800c878:	4629      	mov	r1, r5
 800c87a:	4620      	mov	r0, r4
 800c87c:	f001 fa95 	bl	800ddaa <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_>
 800c880:	4604      	mov	r4, r0
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f7ff fb81 	bl	800bf8a <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800c888:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7ff fce7 	bl	800c260 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800c892:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800c894:	461a      	mov	r2, r3
 800c896:	4629      	mov	r1, r5
 800c898:	4620      	mov	r0, r4
 800c89a:	f001 fa9e 	bl	800ddda <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E>
 800c89e:	e025      	b.n	800c8ec <_ZNSt6vectorIP10ExpressionSaIS1_EEaSERKS3_+0x1d2>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	681d      	ldr	r5, [r3, #0]
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	681c      	ldr	r4, [r3, #0]
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f7ff fd49 	bl	800c340 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	18e1      	adds	r1, r4, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	f001 fa9b 	bl	800ddf6 <_ZSt4copyIPP10ExpressionS2_ET0_T_S4_S3_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	681c      	ldr	r4, [r3, #0]
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f7ff fd3b 	bl	800c340 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7ff fcc0 	bl	800c260 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800c8e0:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800c8e2:	4632      	mov	r2, r6
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	f001 fa9d 	bl	800de26 <_ZSt22__uninitialized_copy_aIPP10ExpressionS2_S1_ET0_T_S4_S3_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	441a      	add	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	605a      	str	r2, [r3, #4]
      return *this;
 800c8fa:	687b      	ldr	r3, [r7, #4]
    }
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3714      	adds	r7, #20
 800c900:	46bd      	mov	sp, r7
 800c902:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c904 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE7emplaceILj1EJS1_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>:
	emplace(_Args&&... __args)
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4618      	mov	r0, r3
 800c912:	f000 f873 	bl	800c9fc <_ZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE8_M_resetEv>
		  __variant_construct_by_index<_Np>(*this,
 800c916:	6838      	ldr	r0, [r7, #0]
 800c918:	f7ff fee4 	bl	800c6e4 <_ZSt7forwardI13Function_callEOT_RNSt16remove_referenceIS1_E4typeE>
 800c91c:	4603      	mov	r3, r0
 800c91e:	4619      	mov	r1, r3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f001 fa91 	bl	800de48 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJ10Assignment13Function_call15While_statement12If_statementEEJS2_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7ff fec0 	bl	800c6ac <_ZSt3getILj1EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 800c92c:	4603      	mov	r3, r0
	}
 800c92e:	4618      	mov	r0, r3
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800c936:	b580      	push	{r7, lr}
 800c938:	b082      	sub	sp, #8
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	7138      	strb	r0, [r7, #4]
 800c93e:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800c940:	6838      	ldr	r0, [r7, #0]
 800c942:	f001 f9bb 	bl	800dcbc <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800c946:	4603      	mov	r3, r0
 800c948:	4618      	mov	r0, r3
 800c94a:	f001 fa9f 	bl	800de8c <_ZNRSt8__detail9__variant14_UninitializedI10AssignmentLb0EE6_M_getEv>
 800c94e:	4603      	mov	r3, r0
 800c950:	4618      	mov	r0, r3
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800c958:	b590      	push	{r4, r7, lr}
 800c95a:	b083      	sub	sp, #12
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f001 f9a0 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800c966:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800c968:	4619      	mov	r1, r3
 800c96a:	4620      	mov	r0, r4
 800c96c:	f7ff ffe3 	bl	800c936 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>
 800c970:	4603      	mov	r3, r0
    }
 800c972:	4618      	mov	r0, r3
 800c974:	370c      	adds	r7, #12
 800c976:	46bd      	mov	sp, r7
 800c978:	bd90      	pop	{r4, r7, pc}
	...

0800c97c <_ZSt3getILj0EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>:
    get(variant<_Types...>& __v)
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f7fe fd11 	bl	800b3ac <_ZNKSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE5indexEv>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	bf14      	ite	ne
 800c990:	2301      	movne	r3, #1
 800c992:	2300      	moveq	r3, #0
 800c994:	b2db      	uxtb	r3, r3
 800c996:	2b00      	cmp	r3, #0
 800c998:	d002      	beq.n	800c9a0 <_ZSt3getILj0EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800c99a:	4805      	ldr	r0, [pc, #20]	; (800c9b0 <_ZSt3getILj0EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x34>)
 800c99c:	f7f4 fb2a 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f7ff ffd9 	bl	800c958 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>
 800c9a6:	4603      	mov	r3, r0
    }
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	0801ce98 	.word	0x0801ce98

0800c9b4 <_ZSt7forwardI10AssignmentEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4618      	mov	r0, r3
 800c9c0:	370c      	adds	r7, #12
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE7emplaceILj0EJS0_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>:
	emplace(_Args&&... __args)
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b082      	sub	sp, #8
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
 800c9d2:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f000 f810 	bl	800c9fc <_ZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE8_M_resetEv>
		  __variant_construct_by_index<_Np>(*this,
 800c9dc:	6838      	ldr	r0, [r7, #0]
 800c9de:	f7ff ffe9 	bl	800c9b4 <_ZSt7forwardI10AssignmentEOT_RNSt16remove_referenceIS1_E4typeE>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f001 fa5d 	bl	800dea6 <_ZSt28__variant_construct_by_indexILj0ESt7variantIJ10Assignment13Function_call15While_statement12If_statementEEJS1_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f7ff ffc5 	bl	800c97c <_ZSt3getILj0EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 800c9f2:	4603      	mov	r3, r0
	}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <_ZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE8_M_resetEv>:
      void _M_reset()
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
	_M_reset_impl();
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f001 fc5d 	bl	800e2c4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEv>
	_M_index = variant_npos;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	22ff      	movs	r2, #255	; 0xff
 800ca0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
 800ca12:	bf00      	nop
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <_ZSt11__addressofIN9__gnu_cxx16__aligned_membufI10AssignmentEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ca1a:	b480      	push	{r7}
 800ca1c:	b083      	sub	sp, #12
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	4618      	mov	r0, r3
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJ15While_statement12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	7138      	strb	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800ca3a:	6838      	ldr	r0, [r7, #0]
 800ca3c:	f001 fc54 	bl	800e2e8 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ15While_statement12If_statementEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800ca40:	4603      	mov	r3, r0
 800ca42:	4618      	mov	r0, r3
 800ca44:	f001 fc5b 	bl	800e2fe <_ZNRSt8__detail9__variant14_UninitializedI15While_statementLb0EE6_M_getEv>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJ13Function_call15While_statement12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800ca52:	b590      	push	{r4, r7, lr}
 800ca54:	b083      	sub	sp, #12
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	7138      	strb	r0, [r7, #4]
 800ca5a:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800ca5c:	6838      	ldr	r0, [r7, #0]
 800ca5e:	f001 f938 	bl	800dcd2 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ13Function_call15While_statement12If_statementEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800ca62:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800ca64:	4619      	mov	r1, r3
 800ca66:	4620      	mov	r0, r4
 800ca68:	f7ff ffe2 	bl	800ca30 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJ15While_statement12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>
 800ca6c:	4603      	mov	r3, r0
    }
 800ca6e:	4618      	mov	r0, r3
 800ca70:	370c      	adds	r7, #12
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd90      	pop	{r4, r7, pc}

0800ca76 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800ca76:	b590      	push	{r4, r7, lr}
 800ca78:	b083      	sub	sp, #12
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	7138      	strb	r0, [r7, #4]
 800ca7e:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800ca80:	6838      	ldr	r0, [r7, #0]
 800ca82:	f001 f91b 	bl	800dcbc <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800ca86:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800ca88:	4619      	mov	r1, r3
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	f7ff ffe1 	bl	800ca52 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJ13Function_call15While_statement12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800ca90:	4603      	mov	r3, r0
    }
 800ca92:	4618      	mov	r0, r3
 800ca94:	370c      	adds	r7, #12
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd90      	pop	{r4, r7, pc}

0800ca9a <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800ca9a:	b590      	push	{r4, r7, lr}
 800ca9c:	b083      	sub	sp, #12
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f001 f8ff 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800caa8:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800caaa:	4619      	mov	r1, r3
 800caac:	4620      	mov	r0, r4
 800caae:	f7ff ffe2 	bl	800ca76 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800cab2:	4603      	mov	r3, r0
    }
 800cab4:	4618      	mov	r0, r3
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd90      	pop	{r4, r7, pc}

0800cabc <_ZSt3getILj2EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>:
    get(variant<_Types...>& __v)
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f7fe fc71 	bl	800b3ac <_ZNKSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE5indexEv>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b02      	cmp	r3, #2
 800cace:	bf14      	ite	ne
 800cad0:	2301      	movne	r3, #1
 800cad2:	2300      	moveq	r3, #0
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d002      	beq.n	800cae0 <_ZSt3getILj2EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800cada:	4805      	ldr	r0, [pc, #20]	; (800caf0 <_ZSt3getILj2EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x34>)
 800cadc:	f7f4 fa8a 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f7ff ffda 	bl	800ca9a <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>
 800cae6:	4603      	mov	r3, r0
    }
 800cae8:	4618      	mov	r0, r3
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	0801ce98 	.word	0x0801ce98

0800caf4 <_ZSt7forwardI15While_statementEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4618      	mov	r0, r3
 800cb00:	370c      	adds	r7, #12
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr

0800cb0a <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE7emplaceILj2EJS2_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>:
	emplace(_Args&&... __args)
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b082      	sub	sp, #8
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
 800cb12:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7ff ff70 	bl	800c9fc <_ZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE8_M_resetEv>
		  __variant_construct_by_index<_Np>(*this,
 800cb1c:	6838      	ldr	r0, [r7, #0]
 800cb1e:	f7ff ffe9 	bl	800caf4 <_ZSt7forwardI15While_statementEOT_RNSt16remove_referenceIS1_E4typeE>
 800cb22:	4603      	mov	r3, r0
 800cb24:	4619      	mov	r1, r3
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f001 fbf6 	bl	800e318 <_ZSt28__variant_construct_by_indexILj2ESt7variantIJ10Assignment13Function_call15While_statement12If_statementEEJS3_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f7ff ffc5 	bl	800cabc <_ZSt3getILj2EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 800cb32:	4603      	mov	r3, r0
	}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJ12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	7138      	strb	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800cb46:	6838      	ldr	r0, [r7, #0]
 800cb48:	f001 fc08 	bl	800e35c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ12If_statementEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f001 fc0f 	bl	800e372 <_ZNRSt8__detail9__variant14_UninitializedI12If_statementLb0EE6_M_getEv>
 800cb54:	4603      	mov	r3, r0
 800cb56:	4618      	mov	r0, r3
 800cb58:	3708      	adds	r7, #8
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJ15While_statement12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800cb5e:	b590      	push	{r4, r7, lr}
 800cb60:	b083      	sub	sp, #12
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	7138      	strb	r0, [r7, #4]
 800cb66:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800cb68:	6838      	ldr	r0, [r7, #0]
 800cb6a:	f001 fbbd 	bl	800e2e8 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ15While_statement12If_statementEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800cb6e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800cb70:	4619      	mov	r1, r3
 800cb72:	4620      	mov	r0, r4
 800cb74:	f7ff ffe2 	bl	800cb3c <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJ12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>
 800cb78:	4603      	mov	r3, r0
    }
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	370c      	adds	r7, #12
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd90      	pop	{r4, r7, pc}

0800cb82 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJ13Function_call15While_statement12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800cb82:	b590      	push	{r4, r7, lr}
 800cb84:	b083      	sub	sp, #12
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	7138      	strb	r0, [r7, #4]
 800cb8a:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800cb8c:	6838      	ldr	r0, [r7, #0]
 800cb8e:	f001 f8a0 	bl	800dcd2 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ13Function_call15While_statement12If_statementEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800cb92:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800cb94:	4619      	mov	r1, r3
 800cb96:	4620      	mov	r0, r4
 800cb98:	f7ff ffe1 	bl	800cb5e <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJ15While_statement12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800cb9c:	4603      	mov	r3, r0
    }
 800cb9e:	4618      	mov	r0, r3
 800cba0:	370c      	adds	r7, #12
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd90      	pop	{r4, r7, pc}

0800cba6 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800cba6:	b590      	push	{r4, r7, lr}
 800cba8:	b083      	sub	sp, #12
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	7138      	strb	r0, [r7, #4]
 800cbae:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800cbb0:	6838      	ldr	r0, [r7, #0]
 800cbb2:	f001 f883 	bl	800dcbc <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cbb6:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800cbb8:	4619      	mov	r1, r3
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f7ff ffe1 	bl	800cb82 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJ13Function_call15While_statement12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800cbc0:	4603      	mov	r3, r0
    }
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	370c      	adds	r7, #12
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd90      	pop	{r4, r7, pc}

0800cbca <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800cbca:	b590      	push	{r4, r7, lr}
 800cbcc:	b083      	sub	sp, #12
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f001 f867 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800cbd8:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800cbda:	4619      	mov	r1, r3
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f7ff ffe2 	bl	800cba6 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800cbe2:	4603      	mov	r3, r0
    }
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd90      	pop	{r4, r7, pc}

0800cbec <_ZSt3getILj3EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>:
    get(variant<_Types...>& __v)
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7fe fbd9 	bl	800b3ac <_ZNKSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE5indexEv>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b03      	cmp	r3, #3
 800cbfe:	bf14      	ite	ne
 800cc00:	2301      	movne	r3, #1
 800cc02:	2300      	moveq	r3, #0
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d002      	beq.n	800cc10 <_ZSt3getILj3EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800cc0a:	4805      	ldr	r0, [pc, #20]	; (800cc20 <_ZSt3getILj3EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x34>)
 800cc0c:	f7f4 f9f2 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f7ff ffda 	bl	800cbca <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>
 800cc16:	4603      	mov	r3, r0
    }
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3708      	adds	r7, #8
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	0801ce98 	.word	0x0801ce98

0800cc24 <_ZSt7forwardI12If_statementEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	4618      	mov	r0, r3
 800cc30:	370c      	adds	r7, #12
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr

0800cc3a <_ZN9__gnu_cxx14__alloc_traitsISaIP4BodyES2_E27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 800cc3a:	b480      	push	{r7}
 800cc3c:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800cc3e:	2300      	movs	r3, #0
 800cc40:	4618      	mov	r0, r3
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr

0800cc4a <_ZN9__gnu_cxx14__alloc_traitsISaIP4BodyES2_E15_S_always_equalEv>:
    static constexpr bool _S_always_equal()
 800cc4a:	b480      	push	{r7}
 800cc4c:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800cc4e:	2301      	movs	r3, #1
 800cc50:	4618      	mov	r0, r3
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <_ZNSt6vectorIP4BodySaIS1_EEaSERKS3_>:
    vector<_Tp, _Alloc>::
 800cc5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc5c:	b085      	sub	sp, #20
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
 800cc62:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	f000 80e6 	beq.w	800ce3a <_ZNSt6vectorIP4BodySaIS1_EEaSERKS3_+0x1e0>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800cc6e:	f7ff ffe4 	bl	800cc3a <_ZN9__gnu_cxx14__alloc_traitsISaIP4BodyES2_E27_S_propagate_on_copy_assignEv>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d043      	beq.n	800cd00 <_ZNSt6vectorIP4BodySaIS1_EEaSERKS3_+0xa6>
	      if (!_Alloc_traits::_S_always_equal()
 800cc78:	f7ff ffe7 	bl	800cc4a <_ZN9__gnu_cxx14__alloc_traitsISaIP4BodyES2_E15_S_always_equalEv>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	f083 0301 	eor.w	r3, r3, #1
 800cc82:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d012      	beq.n	800ccae <_ZNSt6vectorIP4BodySaIS1_EEaSERKS3_+0x54>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7ff fb3f 	bl	800c30e <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800cc90:	4604      	mov	r4, r0
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff fbe7 	bl	800c468 <_ZNKSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f001 fb74 	bl	800e38c <_ZStneRKSaIP4BodyES3_>
 800cca4:	4603      	mov	r3, r0
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d001      	beq.n	800ccae <_ZNSt6vectorIP4BodySaIS1_EEaSERKS3_+0x54>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e000      	b.n	800ccb0 <_ZNSt6vectorIP4BodySaIS1_EEaSERKS3_+0x56>
 800ccae:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d017      	beq.n	800cce4 <_ZNSt6vectorIP4BodySaIS1_EEaSERKS3_+0x8a>
		  this->clear();
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f001 fb75 	bl	800e3a4 <_ZNSt6vectorIP4BodySaIS1_EE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800cccc:	461a      	mov	r2, r3
 800ccce:	f7ff fb0b 	bl	800c2e8 <_ZNSt12_Vector_baseIP4BodySaIS1_EE13_M_deallocateEPS1_j>
		  this->_M_impl._M_start = nullptr;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7ff fb11 	bl	800c30e <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800ccec:	4604      	mov	r4, r0
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7ff fbb9 	bl	800c468 <_ZNKSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f001 fb60 	bl	800e3c0 <_ZSt15__alloc_on_copyISaIP4BodyEEvRT_RKS3_>
	  const size_type __xlen = __x.size();
 800cd00:	6838      	ldr	r0, [r7, #0]
 800cd02:	f7ff fb93 	bl	800c42c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800cd06:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f001 fb67 	bl	800e3dc <_ZNKSt6vectorIP4BodySaIS1_EE8capacityEv>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	4293      	cmp	r3, r2
 800cd14:	bf8c      	ite	hi
 800cd16:	2301      	movhi	r3, #1
 800cd18:	2300      	movls	r3, #0
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d032      	beq.n	800cd86 <_ZNSt6vectorIP4BodySaIS1_EEaSERKS3_+0x12c>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800cd20:	6838      	ldr	r0, [r7, #0]
 800cd22:	f7ff fbc0 	bl	800c4a6 <_ZNKSt6vectorIP4BodySaIS1_EE5beginEv>
 800cd26:	4604      	mov	r4, r0
 800cd28:	6838      	ldr	r0, [r7, #0]
 800cd2a:	f7ff fbd0 	bl	800c4ce <_ZNKSt6vectorIP4BodySaIS1_EE3endEv>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	4622      	mov	r2, r4
 800cd32:	68f9      	ldr	r1, [r7, #12]
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f001 fb61 	bl	800e3fc <_ZNSt6vectorIP4BodySaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>
 800cd3a:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681c      	ldr	r4, [r3, #0]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7ff fae1 	bl	800c30e <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800cd4c:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800cd4e:	461a      	mov	r2, r3
 800cd50:	4629      	mov	r1, r5
 800cd52:	4620      	mov	r0, r4
 800cd54:	f7ff fae6 	bl	800c324 <_ZSt8_DestroyIPP4BodyS1_EvT_S3_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	f7ff fabc 	bl	800c2e8 <_ZNSt12_Vector_baseIP4BodySaIS1_EE13_M_deallocateEPS1_j>
	      this->_M_impl._M_start = __tmp;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	441a      	add	r2, r3
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	609a      	str	r2, [r3, #8]
 800cd84:	e052      	b.n	800ce2c <_ZNSt6vectorIP4BodySaIS1_EEaSERKS3_+0x1d2>
	  else if (size() >= __xlen)
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff fb50 	bl	800c42c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	4293      	cmp	r3, r2
 800cd92:	bf94      	ite	ls
 800cd94:	2301      	movls	r3, #1
 800cd96:	2300      	movhi	r3, #0
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d020      	beq.n	800cde0 <_ZNSt6vectorIP4BodySaIS1_EEaSERKS3_+0x186>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800cd9e:	6838      	ldr	r0, [r7, #0]
 800cda0:	f7ff fb81 	bl	800c4a6 <_ZNKSt6vectorIP4BodySaIS1_EE5beginEv>
 800cda4:	4604      	mov	r4, r0
 800cda6:	6838      	ldr	r0, [r7, #0]
 800cda8:	f7ff fb91 	bl	800c4ce <_ZNKSt6vectorIP4BodySaIS1_EE3endEv>
 800cdac:	4605      	mov	r5, r0
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 fd3f 	bl	800d832 <_ZNSt6vectorIP4BodySaIS1_EE5beginEv>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	4629      	mov	r1, r5
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f001 fb3a 	bl	800e434 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_>
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7ff f981 	bl	800c0ca <_ZNSt6vectorIP4BodySaIS1_EE3endEv>
 800cdc8:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7ff fa9e 	bl	800c30e <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800cdd2:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f001 fb43 	bl	800e464 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E>
 800cdde:	e025      	b.n	800ce2c <_ZNSt6vectorIP4BodySaIS1_EEaSERKS3_+0x1d2>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	681d      	ldr	r5, [r3, #0]
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	681c      	ldr	r4, [r3, #0]
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f7ff fb1f 	bl	800c42c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	18e1      	adds	r1, r4, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	f001 fb40 	bl	800e480 <_ZSt4copyIPP4BodyS2_ET0_T_S4_S3_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	681c      	ldr	r4, [r3, #0]
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f7ff fb11 	bl	800c42c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff fa77 	bl	800c30e <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800ce20:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800ce22:	4632      	mov	r2, r6
 800ce24:	4629      	mov	r1, r5
 800ce26:	4620      	mov	r0, r4
 800ce28:	f001 fb42 	bl	800e4b0 <_ZSt22__uninitialized_copy_aIPP4BodyS2_S1_ET0_T_S4_S3_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	441a      	add	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	605a      	str	r2, [r3, #4]
      return *this;
 800ce3a:	687b      	ldr	r3, [r7, #4]
    }
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3714      	adds	r7, #20
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce44 <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE7emplaceILj3EJS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>:
	emplace(_Args&&... __args)
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7ff fdd3 	bl	800c9fc <_ZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE8_M_resetEv>
		  __variant_construct_by_index<_Np>(*this,
 800ce56:	6838      	ldr	r0, [r7, #0]
 800ce58:	f7ff fee4 	bl	800cc24 <_ZSt7forwardI12If_statementEOT_RNSt16remove_referenceIS1_E4typeE>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	4619      	mov	r1, r3
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f001 fb36 	bl	800e4d2 <_ZSt28__variant_construct_by_indexILj3ESt7variantIJ10Assignment13Function_call15While_statement12If_statementEEJS4_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7ff fec0 	bl	800cbec <_ZSt3getILj3EJ10Assignment13Function_call15While_statement12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 800ce6c:	4603      	mov	r3, r0
	}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <_ZNSt16allocator_traitsISaIP9StatementEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b084      	sub	sp, #16
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	60f8      	str	r0, [r7, #12]
 800ce7e:	60b9      	str	r1, [r7, #8]
 800ce80:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f001 fb47 	bl	800e516 <_ZSt7forwardIRKP9StatementEOT_RNSt16remove_referenceIS4_E4typeE>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	68b9      	ldr	r1, [r7, #8]
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f001 fb4c 	bl	800e52c <_ZN9__gnu_cxx13new_allocatorIP9StatementE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 800ce94:	bf00      	nop
 800ce96:	3710      	adds	r7, #16
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <_ZNSt6vectorIP9StatementSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800ce9c:	b5b0      	push	{r4, r5, r7, lr}
 800ce9e:	b08c      	sub	sp, #48	; 0x30
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800cea8:	4a39      	ldr	r2, [pc, #228]	; (800cf90 <_ZNSt6vectorIP9StatementSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800ceaa:	2101      	movs	r1, #1
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f001 fb53 	bl	800e558 <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc>
 800ceb2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800cec0:	68f8      	ldr	r0, [r7, #12]
 800cec2:	f7fe ff79 	bl	800bdb8 <_ZNSt6vectorIP9StatementSaIS1_EE5beginEv>
 800cec6:	4603      	mov	r3, r0
 800cec8:	617b      	str	r3, [r7, #20]
 800ceca:	f107 0214 	add.w	r2, r7, #20
 800cece:	f107 0308 	add.w	r3, r7, #8
 800ced2:	4611      	mov	r1, r2
 800ced4:	4618      	mov	r0, r3
 800ced6:	f001 fb86 	bl	800e5e6 <_ZN9__gnu_cxxmiIPP9StatementSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800ceda:	4603      	mov	r3, r0
 800cedc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cee2:	4618      	mov	r0, r3
 800cee4:	f000 fa28 	bl	800d338 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE11_M_allocateEj>
 800cee8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800ceee:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800cef0:	6a3b      	ldr	r3, [r7, #32]
 800cef2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800cef4:	69fa      	ldr	r2, [r7, #28]
 800cef6:	18d5      	adds	r5, r2, r3
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f001 fb0c 	bl	800e516 <_ZSt7forwardIRKP9StatementEOT_RNSt16remove_referenceIS4_E4typeE>
 800cefe:	4603      	mov	r3, r0
 800cf00:	461a      	mov	r2, r3
 800cf02:	4629      	mov	r1, r5
 800cf04:	4620      	mov	r0, r4
 800cf06:	f7ff ffb6 	bl	800ce76 <_ZNSt16allocator_traitsISaIP9StatementEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800cf0e:	f107 0308 	add.w	r3, r7, #8
 800cf12:	4618      	mov	r0, r3
 800cf14:	f001 fb90 	bl	800e638 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fe fdb4 	bl	800ba8c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800cf24:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800cf26:	69fa      	ldr	r2, [r7, #28]
 800cf28:	4621      	mov	r1, r4
 800cf2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf2c:	f001 fb70 	bl	800e610 <_ZNSt6vectorIP9StatementSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800cf30:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	3304      	adds	r3, #4
 800cf36:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800cf38:	f107 0308 	add.w	r3, r7, #8
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f001 fb7b 	bl	800e638 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800cf42:	4603      	mov	r3, r0
 800cf44:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7fe fd9f 	bl	800ba8c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800cf4e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800cf50:	69ba      	ldr	r2, [r7, #24]
 800cf52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf54:	4620      	mov	r0, r4
 800cf56:	f001 fb5b 	bl	800e610 <_ZNSt6vectorIP9StatementSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800cf5a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800cf5c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	689a      	ldr	r2, [r3, #8]
 800cf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf64:	1ad3      	subs	r3, r2, r3
 800cf66:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800cf68:	461a      	mov	r2, r3
 800cf6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf6c:	f7fe fd7b 	bl	800ba66 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	69fa      	ldr	r2, [r7, #28]
 800cf74:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	69ba      	ldr	r2, [r7, #24]
 800cf7a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800cf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	69fa      	ldr	r2, [r7, #28]
 800cf82:	441a      	add	r2, r3
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	609a      	str	r2, [r3, #8]
    }
 800cf88:	bf00      	nop
 800cf8a:	3730      	adds	r7, #48	; 0x30
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bdb0      	pop	{r4, r5, r7, pc}
 800cf90:	0801ce7c 	.word	0x0801ce7c

0800cf94 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	370c      	adds	r7, #12
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr

0800cfaa <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKS8_St17integral_constantIjLj0EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800cfaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f000 f879 	bl	800d0b0 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	68b8      	ldr	r0, [r7, #8]
 800cfc2:	f7fb ff86 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f001 fb40 	bl	800e64e <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	462a      	mov	r2, r5
 800cfd2:	4621      	mov	r1, r4
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	f001 fb45 	bl	800e664 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKS9_St17integral_constantIjLj0EEEESD_St14__invoke_otherOSF_DpOT1_>
					std::forward<_Args>(__args)...);
 800cfda:	4643      	mov	r3, r8
    }
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cfe6 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKiSt17integral_constantIjLj1EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800cfe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f000 f85b 	bl	800d0b0 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800cffa:	4604      	mov	r4, r0
 800cffc:	68b8      	ldr	r0, [r7, #8]
 800cffe:	f7fb ff8a 	bl	8008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800d002:	4605      	mov	r5, r0
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f001 fb4b 	bl	800e6a0 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d00a:	4603      	mov	r3, r0
 800d00c:	462a      	mov	r2, r5
 800d00e:	4621      	mov	r1, r4
 800d010:	4630      	mov	r0, r6
 800d012:	f001 fb50 	bl	800e6b6 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKiSt17integral_constantIjLj1EEEESD_St14__invoke_otherOSF_DpOT1_>
					std::forward<_Args>(__args)...);
 800d016:	4643      	mov	r3, r8
    }
 800d018:	4618      	mov	r0, r3
 800d01a:	3710      	adds	r7, #16
 800d01c:	46bd      	mov	sp, r7
 800d01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d022 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKfSt17integral_constantIjLj2EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800d022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f000 f83d 	bl	800d0b0 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800d036:	4604      	mov	r4, r0
 800d038:	68b8      	ldr	r0, [r7, #8]
 800d03a:	f7fb ff8e 	bl	8008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800d03e:	4605      	mov	r5, r0
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f001 fb56 	bl	800e6f2 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d046:	4603      	mov	r3, r0
 800d048:	462a      	mov	r2, r5
 800d04a:	4621      	mov	r1, r4
 800d04c:	4630      	mov	r0, r6
 800d04e:	f001 fb5b 	bl	800e708 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKfSt17integral_constantIjLj2EEEESD_St14__invoke_otherOSF_DpOT1_>
					std::forward<_Args>(__args)...);
 800d052:	4643      	mov	r3, r8
    }
 800d054:	4618      	mov	r0, r3
 800d056:	3710      	adds	r7, #16
 800d058:	46bd      	mov	sp, r7
 800d05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d05e <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKbSt17integral_constantIjLj3EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800d05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f000 f81f 	bl	800d0b0 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800d072:	4604      	mov	r4, r0
 800d074:	68b8      	ldr	r0, [r7, #8]
 800d076:	f7fb ff92 	bl	8008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 800d07a:	4605      	mov	r5, r0
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f001 fb61 	bl	800e744 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d082:	4603      	mov	r3, r0
 800d084:	462a      	mov	r2, r5
 800d086:	4621      	mov	r1, r4
 800d088:	4630      	mov	r0, r6
 800d08a:	f001 fb66 	bl	800e75a <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKbSt17integral_constantIjLj3EEEESD_St14__invoke_otherOSF_DpOT1_>
					std::forward<_Args>(__args)...);
 800d08e:	4643      	mov	r3, r8
    }
 800d090:	4618      	mov	r0, r3
 800d092:	3710      	adds	r7, #16
 800d094:	46bd      	mov	sp, r7
 800d096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d09a <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_RKSt7variantIJS9_ifbEEEJEE9_M_accessEv>:
      _M_access() const
 800d09a:	b480      	push	{r7}
 800d09c:	b083      	sub	sp, #12
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	370c      	adds	r7, #12
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr

0800d0b0 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	370c      	adds	r7, #12
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr

0800d0c6 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d0c6:	b480      	push	{r7}
 800d0c8:	b083      	sub	sp, #12
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <_ZN9__gnu_cxx13new_allocatorIP9StatementEC1Ev>:
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	370c      	adds	r7, #12
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr

0800d0f2 <_ZNSt16allocator_traitsISaIP9StatementEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b084      	sub	sp, #16
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	60f8      	str	r0, [r7, #12]
 800d0fa:	60b9      	str	r1, [r7, #8]
 800d0fc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	68b9      	ldr	r1, [r7, #8]
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f001 fb47 	bl	800e796 <_ZN9__gnu_cxx13new_allocatorIP9StatementE10deallocateEPS2_j>
 800d108:	bf00      	nop
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <_ZSt8_DestroyIPP9StatementEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800d11a:	6839      	ldr	r1, [r7, #0]
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f001 fb46 	bl	800e7ae <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9StatementEEvT_S5_>
    }
 800d122:	bf00      	nop
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <_ZNSt6vectorIP14And_expressionSaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800d12a:	b590      	push	{r4, r7, lr}
 800d12c:	b085      	sub	sp, #20
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	685a      	ldr	r2, [r3, #4]
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	109b      	asrs	r3, r3, #2
 800d13e:	60fb      	str	r3, [r7, #12]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00e      	beq.n	800d164 <_ZNSt6vectorIP14And_expressionSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7f5 fc0d 	bl	800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800d152:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800d154:	461a      	mov	r2, r3
 800d156:	4621      	mov	r1, r4
 800d158:	6838      	ldr	r0, [r7, #0]
 800d15a:	f7f5 fc12 	bl	8002982 <_ZSt8_DestroyIPP14And_expressionS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	683a      	ldr	r2, [r7, #0]
 800d162:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800d164:	bf00      	nop
 800d166:	3714      	adds	r7, #20
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd90      	pop	{r4, r7, pc}

0800d16c <_ZSt18__do_alloc_on_copyISaIP14And_expressionEEvRT_RKS3_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 800d16c:	b480      	push	{r7}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	713a      	strb	r2, [r7, #4]
    { }
 800d178:	bf00      	nop
 800d17a:	3714      	adds	r7, #20
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <_ZN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	681a      	ldr	r2, [r3, #0]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	601a      	str	r2, [r3, #0]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4618      	mov	r0, r3
 800d19a:	370c      	adds	r7, #12
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr

0800d1a4 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d006      	beq.n	800d1c2 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE11_M_allocateEj+0x1e>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6839      	ldr	r1, [r7, #0]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f001 fb03 	bl	800e7c4 <_ZNSt16allocator_traitsISaIP14And_expressionEE8allocateERS2_j>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	e000      	b.n	800d1c4 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE11_M_allocateEj+0x20>
 800d1c2:	2300      	movs	r3, #0
      }
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3708      	adds	r7, #8
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEEET_SA_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	370c      	adds	r7, #12
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800d1e2:	b5b0      	push	{r4, r5, r7, lr}
 800d1e4:	b084      	sub	sp, #16
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	60f8      	str	r0, [r7, #12]
 800d1ea:	60b9      	str	r1, [r7, #8]
 800d1ec:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f001 faf7 	bl	800e7e2 <_ZSt12__niter_baseIPKP14And_expressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 800d1f4:	4604      	mov	r4, r0
 800d1f6:	68b8      	ldr	r0, [r7, #8]
 800d1f8:	f001 faf3 	bl	800e7e2 <_ZSt12__niter_baseIPKP14And_expressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 800d1fc:	4605      	mov	r5, r0
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f001 fafd 	bl	800e7fe <_ZSt12__niter_baseIPP14And_expressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800d204:	4603      	mov	r3, r0
 800d206:	461a      	mov	r2, r3
 800d208:	4629      	mov	r1, r5
 800d20a:	4620      	mov	r0, r4
 800d20c:	f001 fb05 	bl	800e81a <_ZSt13__copy_move_aILb0EPKP14And_expressionPS1_ET1_T0_S6_S5_>
 800d210:	4603      	mov	r3, r0
 800d212:	4619      	mov	r1, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f001 fb12 	bl	800e83e <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 800d21a:	4603      	mov	r3, r0
    }
 800d21c:	4618      	mov	r0, r3
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bdb0      	pop	{r4, r5, r7, pc}

0800d224 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS3_SaIS3_EEEEEvT_S9_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800d22e:	6839      	ldr	r1, [r7, #0]
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f001 fb1b 	bl	800e86c <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS5_SaIS5_EEEEEEvT_SB_>
    }
 800d236:	bf00      	nop
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <_ZSt12__miter_baseIPP14And_expressionET_S3_>:
    __miter_base(_Iterator __it)
 800d23e:	b480      	push	{r7}
 800d240:	b083      	sub	sp, #12
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4618      	mov	r0, r3
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <_ZSt14__copy_move_a2ILb0EPP14And_expressionS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800d254:	b5b0      	push	{r4, r5, r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f001 fb0e 	bl	800e882 <_ZSt12__niter_baseIPP14And_expressionET_S3_>
 800d266:	4604      	mov	r4, r0
 800d268:	68b8      	ldr	r0, [r7, #8]
 800d26a:	f001 fb0a 	bl	800e882 <_ZSt12__niter_baseIPP14And_expressionET_S3_>
 800d26e:	4605      	mov	r5, r0
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	4618      	mov	r0, r3
 800d274:	f001 fb05 	bl	800e882 <_ZSt12__niter_baseIPP14And_expressionET_S3_>
 800d278:	4603      	mov	r3, r0
 800d27a:	461a      	mov	r2, r3
 800d27c:	4629      	mov	r1, r5
 800d27e:	4620      	mov	r0, r4
 800d280:	f001 fb0a 	bl	800e898 <_ZSt13__copy_move_aILb0EPP14And_expressionS2_ET1_T0_S4_S3_>
 800d284:	4602      	mov	r2, r0
 800d286:	1d3b      	adds	r3, r7, #4
 800d288:	4611      	mov	r1, r2
 800d28a:	4618      	mov	r0, r3
 800d28c:	f001 fb16 	bl	800e8bc <_ZSt12__niter_wrapIPP14And_expressionET_RKS3_S3_>
 800d290:	4603      	mov	r3, r0
    }
 800d292:	4618      	mov	r0, r3
 800d294:	3710      	adds	r7, #16
 800d296:	46bd      	mov	sp, r7
 800d298:	bdb0      	pop	{r4, r5, r7, pc}

0800d29a <_ZSt18uninitialized_copyIPP14And_expressionS2_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b086      	sub	sp, #24
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	60f8      	str	r0, [r7, #12]
 800d2a2:	60b9      	str	r1, [r7, #8]
 800d2a4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	68b9      	ldr	r1, [r7, #8]
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f001 fb10 	bl	800e8d4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP14And_expressionS4_EET0_T_S6_S5_>
 800d2b4:	4603      	mov	r3, r0
    }
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3718      	adds	r7, #24
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <_ZNSt6vectorIP9StatementSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800d2be:	b590      	push	{r4, r7, lr}
 800d2c0:	b085      	sub	sp, #20
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
 800d2c6:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	685a      	ldr	r2, [r3, #4]
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	1ad3      	subs	r3, r2, r3
 800d2d0:	109b      	asrs	r3, r3, #2
 800d2d2:	60fb      	str	r3, [r7, #12]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00e      	beq.n	800d2f8 <_ZNSt6vectorIP9StatementSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7fe fbd3 	bl	800ba8c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800d2e6:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	6838      	ldr	r0, [r7, #0]
 800d2ee:	f7fe fbd8 	bl	800baa2 <_ZSt8_DestroyIPP9StatementS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	683a      	ldr	r2, [r7, #0]
 800d2f6:	605a      	str	r2, [r3, #4]
      }
 800d2f8:	bf00      	nop
 800d2fa:	3714      	adds	r7, #20
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd90      	pop	{r4, r7, pc}

0800d300 <_ZSt18__do_alloc_on_copyISaIP9StatementEEvRT_RKS3_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 800d300:	b480      	push	{r7}
 800d302:	b085      	sub	sp, #20
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	713a      	strb	r2, [r7, #4]
    { }
 800d30c:	bf00      	nop
 800d30e:	3714      	adds	r7, #20
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr

0800d318 <_ZN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	601a      	str	r2, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4618      	mov	r0, r3
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr

0800d338 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d006      	beq.n	800d356 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE11_M_allocateEj+0x1e>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6839      	ldr	r1, [r7, #0]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f001 fad1 	bl	800e8f4 <_ZNSt16allocator_traitsISaIP9StatementEE8allocateERS2_j>
 800d352:	4603      	mov	r3, r0
 800d354:	e000      	b.n	800d358 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE11_M_allocateEj+0x20>
 800d356:	2300      	movs	r3, #0
      }
 800d358:	4618      	mov	r0, r3
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d360:	b480      	push	{r7}
 800d362:	b083      	sub	sp, #12
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	601a      	str	r2, [r3, #0]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	4618      	mov	r0, r3
 800d376:	370c      	adds	r7, #12
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEEET_SA_>:
    __miter_base(_Iterator __it)
 800d380:	b480      	push	{r7}
 800d382:	b083      	sub	sp, #12
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4618      	mov	r0, r3
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr

0800d396 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800d396:	b5b0      	push	{r4, r5, r7, lr}
 800d398:	b084      	sub	sp, #16
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	60f8      	str	r0, [r7, #12]
 800d39e:	60b9      	str	r1, [r7, #8]
 800d3a0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f001 fab5 	bl	800e912 <_ZSt12__niter_baseIPKP9StatementSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 800d3a8:	4604      	mov	r4, r0
 800d3aa:	68b8      	ldr	r0, [r7, #8]
 800d3ac:	f001 fab1 	bl	800e912 <_ZSt12__niter_baseIPKP9StatementSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 800d3b0:	4605      	mov	r5, r0
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f001 fabb 	bl	800e92e <_ZSt12__niter_baseIPP9StatementSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	4629      	mov	r1, r5
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f001 fac3 	bl	800e94a <_ZSt13__copy_move_aILb0EPKP9StatementPS1_ET1_T0_S6_S5_>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f001 fad0 	bl	800e96e <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 800d3ce:	4603      	mov	r3, r0
    }
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bdb0      	pop	{r4, r5, r7, pc}

0800d3d8 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS3_SaIS3_EEEEEvT_S9_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800d3e2:	6839      	ldr	r1, [r7, #0]
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f001 fad9 	bl	800e99c <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS5_SaIS5_EEEEEEvT_SB_>
    }
 800d3ea:	bf00      	nop
 800d3ec:	3708      	adds	r7, #8
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <_ZSt12__miter_baseIPP9StatementET_S3_>:
    __miter_base(_Iterator __it)
 800d3f2:	b480      	push	{r7}
 800d3f4:	b083      	sub	sp, #12
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	370c      	adds	r7, #12
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr

0800d408 <_ZSt14__copy_move_a2ILb0EPP9StatementS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800d408:	b5b0      	push	{r4, r5, r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f001 facc 	bl	800e9b2 <_ZSt12__niter_baseIPP9StatementET_S3_>
 800d41a:	4604      	mov	r4, r0
 800d41c:	68b8      	ldr	r0, [r7, #8]
 800d41e:	f001 fac8 	bl	800e9b2 <_ZSt12__niter_baseIPP9StatementET_S3_>
 800d422:	4605      	mov	r5, r0
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	4618      	mov	r0, r3
 800d428:	f001 fac3 	bl	800e9b2 <_ZSt12__niter_baseIPP9StatementET_S3_>
 800d42c:	4603      	mov	r3, r0
 800d42e:	461a      	mov	r2, r3
 800d430:	4629      	mov	r1, r5
 800d432:	4620      	mov	r0, r4
 800d434:	f001 fac8 	bl	800e9c8 <_ZSt13__copy_move_aILb0EPP9StatementS2_ET1_T0_S4_S3_>
 800d438:	4602      	mov	r2, r0
 800d43a:	1d3b      	adds	r3, r7, #4
 800d43c:	4611      	mov	r1, r2
 800d43e:	4618      	mov	r0, r3
 800d440:	f001 fad4 	bl	800e9ec <_ZSt12__niter_wrapIPP9StatementET_RKS3_S3_>
 800d444:	4603      	mov	r3, r0
    }
 800d446:	4618      	mov	r0, r3
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bdb0      	pop	{r4, r5, r7, pc}

0800d44e <_ZSt18uninitialized_copyIPP9StatementS2_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800d44e:	b580      	push	{r7, lr}
 800d450:	b086      	sub	sp, #24
 800d452:	af00      	add	r7, sp, #0
 800d454:	60f8      	str	r0, [r7, #12]
 800d456:	60b9      	str	r1, [r7, #8]
 800d458:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800d45a:	2301      	movs	r3, #1
 800d45c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	68b9      	ldr	r1, [r7, #8]
 800d462:	68f8      	ldr	r0, [r7, #12]
 800d464:	f001 face 	bl	800ea04 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP9StatementS4_EET0_T_S6_S5_>
 800d468:	4603      	mov	r3, r0
    }
 800d46a:	4618      	mov	r0, r3
 800d46c:	3718      	adds	r7, #24
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <_ZNSt16allocator_traitsISaIP14And_expressionEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800d472:	b580      	push	{r7, lr}
 800d474:	b082      	sub	sp, #8
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
 800d47a:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800d47c:	6839      	ldr	r1, [r7, #0]
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f001 fad0 	bl	800ea24 <_ZNSaIP14And_expressionEC1ERKS1_>
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	3708      	adds	r7, #8
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800d496:	6839      	ldr	r1, [r7, #0]
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f001 fac3 	bl	800ea24 <_ZNSaIP14And_expressionEC1ERKS1_>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fe faa1 	bl	800b9e8 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800d4ba:	6839      	ldr	r1, [r7, #0]
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f7ff fe71 	bl	800d1a4 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE11_M_allocateEj>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	441a      	add	r2, r3
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	609a      	str	r2, [r3, #8]
      }
 800d4de:	bf00      	nop
 800d4e0:	3708      	adds	r7, #8
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}

0800d4e6 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b086      	sub	sp, #24
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	60f8      	str	r0, [r7, #12]
 800d4ee:	60b9      	str	r1, [r7, #8]
 800d4f0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	68b9      	ldr	r1, [r7, #8]
 800d4fa:	68f8      	ldr	r0, [r7, #12]
 800d4fc:	f001 faa0 	bl	800ea40 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 800d500:	4603      	mov	r3, r0
    }
 800d502:	4618      	mov	r0, r3
 800d504:	3718      	adds	r7, #24
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <_ZNSt16allocator_traitsISaIP9StatementEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b082      	sub	sp, #8
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800d514:	6839      	ldr	r1, [r7, #0]
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f001 faa2 	bl	800ea60 <_ZNSaIP9StatementEC1ERKS1_>
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800d52e:	6839      	ldr	r1, [r7, #0]
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f001 fa95 	bl	800ea60 <_ZNSaIP9StatementEC1ERKS1_>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4618      	mov	r0, r3
 800d53a:	f7fe fa75 	bl	800ba28 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4618      	mov	r0, r3
 800d542:	3708      	adds	r7, #8
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800d552:	6839      	ldr	r1, [r7, #0]
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f7ff feef 	bl	800d338 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE11_M_allocateEj>
 800d55a:	4602      	mov	r2, r0
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	441a      	add	r2, r3
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	609a      	str	r2, [r3, #8]
      }
 800d576:	bf00      	nop
 800d578:	3708      	adds	r7, #8
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800d57e:	b580      	push	{r7, lr}
 800d580:	b086      	sub	sp, #24
 800d582:	af00      	add	r7, sp, #0
 800d584:	60f8      	str	r0, [r7, #12]
 800d586:	60b9      	str	r1, [r7, #8]
 800d588:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800d58a:	2301      	movs	r3, #1
 800d58c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	68b9      	ldr	r1, [r7, #8]
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f001 fa72 	bl	800ea7c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 800d598:	4603      	mov	r3, r0
    }
 800d59a:	4618      	mov	r0, r3
 800d59c:	3718      	adds	r7, #24
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <_ZSt7forwardIRKP10ExpressionEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d5a2:	b480      	push	{r7}
 800d5a4:	b083      	sub	sp, #12
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800d5b8:	b590      	push	{r4, r7, lr}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7ff ffec 	bl	800d5a2 <_ZSt7forwardIRKP10ExpressionEOT_RNSt16remove_referenceIS4_E4typeE>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	681c      	ldr	r4, [r3, #0]
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	2004      	movs	r0, #4
 800d5d4:	f7f3 fd02 	bl	8000fdc <_ZnwjPv>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	601c      	str	r4, [r3, #0]
 800d5dc:	bf00      	nop
 800d5de:	3714      	adds	r7, #20
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd90      	pop	{r4, r7, pc}

0800d5e4 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	601a      	str	r2, [r3, #0]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	370c      	adds	r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800d604:	b590      	push	{r4, r7, lr}
 800d606:	b087      	sub	sp, #28
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f001 fa43 	bl	800ea9c <_ZNKSt6vectorIP10ExpressionSaIS1_EE8max_sizeEv>
 800d616:	4604      	mov	r4, r0
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f7fe fe91 	bl	800c340 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800d61e:	4603      	mov	r3, r0
 800d620:	1ae2      	subs	r2, r4, r3
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	429a      	cmp	r2, r3
 800d626:	bf34      	ite	cc
 800d628:	2301      	movcc	r3, #1
 800d62a:	2300      	movcs	r3, #0
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d002      	beq.n	800d638 <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f00c f84f 	bl	80196d6 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f7fe fe81 	bl	800c340 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800d63e:	4604      	mov	r4, r0
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f7fe fe7d 	bl	800c340 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800d646:	4603      	mov	r3, r0
 800d648:	613b      	str	r3, [r7, #16]
 800d64a:	f107 0208 	add.w	r2, r7, #8
 800d64e:	f107 0310 	add.w	r3, r7, #16
 800d652:	4611      	mov	r1, r2
 800d654:	4618      	mov	r0, r3
 800d656:	f001 fa32 	bl	800eabe <_ZSt3maxIjERKT_S2_S2_>
 800d65a:	4603      	mov	r3, r0
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4423      	add	r3, r4
 800d660:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800d662:	68f8      	ldr	r0, [r7, #12]
 800d664:	f7fe fe6c 	bl	800c340 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800d668:	4602      	mov	r2, r0
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d306      	bcc.n	800d67e <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f001 fa13 	bl	800ea9c <_ZNKSt6vectorIP10ExpressionSaIS1_EE8max_sizeEv>
 800d676:	4602      	mov	r2, r0
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d904      	bls.n	800d688 <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f001 fa0c 	bl	800ea9c <_ZNKSt6vectorIP10ExpressionSaIS1_EE8max_sizeEv>
 800d684:	4603      	mov	r3, r0
 800d686:	e000      	b.n	800d68a <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 800d688:	697b      	ldr	r3, [r7, #20]
      }
 800d68a:	4618      	mov	r0, r3
 800d68c:	371c      	adds	r7, #28
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd90      	pop	{r4, r7, pc}

0800d692 <_ZNSt6vectorIP10ExpressionSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800d692:	b580      	push	{r7, lr}
 800d694:	b084      	sub	sp, #16
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	f107 030c 	add.w	r3, r7, #12
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7ff ff9e 	bl	800d5e4 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}

0800d6b2 <_ZN9__gnu_cxxmiIPP10ExpressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800d6b2:	b590      	push	{r4, r7, lr}
 800d6b4:	b083      	sub	sp, #12
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
 800d6ba:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 f835 	bl	800d72c <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	681c      	ldr	r4, [r3, #0]
 800d6c6:	6838      	ldr	r0, [r7, #0]
 800d6c8:	f000 f830 	bl	800d72c <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	1ae3      	subs	r3, r4, r3
 800d6d2:	109b      	asrs	r3, r3, #2
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	370c      	adds	r7, #12
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd90      	pop	{r4, r7, pc}

0800d6dc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d006      	beq.n	800d6fa <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj+0x1e>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6839      	ldr	r1, [r7, #0]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f001 f9f8 	bl	800eae6 <_ZNSt16allocator_traitsISaIP10ExpressionEE8allocateERS2_j>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	e000      	b.n	800d6fc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj+0x20>
 800d6fa:	2300      	movs	r3, #0
      }
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3708      	adds	r7, #8
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800d704:	b590      	push	{r4, r7, lr}
 800d706:	b089      	sub	sp, #36	; 0x24
 800d708:	af02      	add	r7, sp, #8
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
 800d710:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800d712:	f88d 4000 	strb.w	r4, [sp]
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	68b9      	ldr	r1, [r7, #8]
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f001 f9f1 	bl	800eb04 <_ZNSt6vectorIP10ExpressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800d722:	4603      	mov	r3, r0
      }
 800d724:	4618      	mov	r0, r3
 800d726:	371c      	adds	r7, #28
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd90      	pop	{r4, r7, pc}

0800d72c <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	4618      	mov	r0, r3
 800d738:	370c      	adds	r7, #12
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <_ZSt7forwardIRKP4BodyEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d742:	b480      	push	{r7}
 800d744:	b083      	sub	sp, #12
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4618      	mov	r0, r3
 800d74e:	370c      	adds	r7, #12
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr

0800d758 <_ZN9__gnu_cxx13new_allocatorIP4BodyE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800d758:	b590      	push	{r4, r7, lr}
 800d75a:	b085      	sub	sp, #20
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f7ff ffec 	bl	800d742 <_ZSt7forwardIRKP4BodyEOT_RNSt16remove_referenceIS4_E4typeE>
 800d76a:	4603      	mov	r3, r0
 800d76c:	681c      	ldr	r4, [r3, #0]
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	4619      	mov	r1, r3
 800d772:	2004      	movs	r0, #4
 800d774:	f7f3 fc32 	bl	8000fdc <_ZnwjPv>
 800d778:	4603      	mov	r3, r0
 800d77a:	601c      	str	r4, [r3, #0]
 800d77c:	bf00      	nop
 800d77e:	3714      	adds	r7, #20
 800d780:	46bd      	mov	sp, r7
 800d782:	bd90      	pop	{r4, r7, pc}

0800d784 <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	601a      	str	r2, [r3, #0]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4618      	mov	r0, r3
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800d7a4:	b590      	push	{r4, r7, lr}
 800d7a6:	b087      	sub	sp, #28
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800d7b0:	68f8      	ldr	r0, [r7, #12]
 800d7b2:	f001 f9b9 	bl	800eb28 <_ZNKSt6vectorIP4BodySaIS1_EE8max_sizeEv>
 800d7b6:	4604      	mov	r4, r0
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f7fe fe37 	bl	800c42c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	1ae2      	subs	r2, r4, r3
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	bf34      	ite	cc
 800d7c8:	2301      	movcc	r3, #1
 800d7ca:	2300      	movcs	r3, #0
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d002      	beq.n	800d7d8 <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f00b ff7f 	bl	80196d6 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f7fe fe27 	bl	800c42c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800d7de:	4604      	mov	r4, r0
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f7fe fe23 	bl	800c42c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	613b      	str	r3, [r7, #16]
 800d7ea:	f107 0208 	add.w	r2, r7, #8
 800d7ee:	f107 0310 	add.w	r3, r7, #16
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f001 f962 	bl	800eabe <_ZSt3maxIjERKT_S2_S2_>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	4423      	add	r3, r4
 800d800:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	f7fe fe12 	bl	800c42c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800d808:	4602      	mov	r2, r0
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d306      	bcc.n	800d81e <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc+0x7a>
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f001 f989 	bl	800eb28 <_ZNKSt6vectorIP4BodySaIS1_EE8max_sizeEv>
 800d816:	4602      	mov	r2, r0
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d904      	bls.n	800d828 <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc+0x84>
 800d81e:	68f8      	ldr	r0, [r7, #12]
 800d820:	f001 f982 	bl	800eb28 <_ZNKSt6vectorIP4BodySaIS1_EE8max_sizeEv>
 800d824:	4603      	mov	r3, r0
 800d826:	e000      	b.n	800d82a <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc+0x86>
 800d828:	697b      	ldr	r3, [r7, #20]
      }
 800d82a:	4618      	mov	r0, r3
 800d82c:	371c      	adds	r7, #28
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd90      	pop	{r4, r7, pc}

0800d832 <_ZNSt6vectorIP4BodySaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800d832:	b580      	push	{r7, lr}
 800d834:	b084      	sub	sp, #16
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	f107 030c 	add.w	r3, r7, #12
 800d840:	4611      	mov	r1, r2
 800d842:	4618      	mov	r0, r3
 800d844:	f7ff ff9e 	bl	800d784 <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	4618      	mov	r0, r3
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}

0800d852 <_ZN9__gnu_cxxmiIPP4BodySt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800d852:	b590      	push	{r4, r7, lr}
 800d854:	b083      	sub	sp, #12
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
 800d85a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 f835 	bl	800d8cc <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800d862:	4603      	mov	r3, r0
 800d864:	681c      	ldr	r4, [r3, #0]
 800d866:	6838      	ldr	r0, [r7, #0]
 800d868:	f000 f830 	bl	800d8cc <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800d86c:	4603      	mov	r3, r0
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	1ae3      	subs	r3, r4, r3
 800d872:	109b      	asrs	r3, r3, #2
 800d874:	4618      	mov	r0, r3
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd90      	pop	{r4, r7, pc}

0800d87c <_ZNSt12_Vector_baseIP4BodySaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d006      	beq.n	800d89a <_ZNSt12_Vector_baseIP4BodySaIS1_EE11_M_allocateEj+0x1e>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6839      	ldr	r1, [r7, #0]
 800d890:	4618      	mov	r0, r3
 800d892:	f001 f95a 	bl	800eb4a <_ZNSt16allocator_traitsISaIP4BodyEE8allocateERS2_j>
 800d896:	4603      	mov	r3, r0
 800d898:	e000      	b.n	800d89c <_ZNSt12_Vector_baseIP4BodySaIS1_EE11_M_allocateEj+0x20>
 800d89a:	2300      	movs	r3, #0
      }
 800d89c:	4618      	mov	r0, r3
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <_ZNSt6vectorIP4BodySaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800d8a4:	b590      	push	{r4, r7, lr}
 800d8a6:	b089      	sub	sp, #36	; 0x24
 800d8a8:	af02      	add	r7, sp, #8
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	607a      	str	r2, [r7, #4]
 800d8b0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800d8b2:	f88d 4000 	strb.w	r4, [sp]
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	687a      	ldr	r2, [r7, #4]
 800d8ba:	68b9      	ldr	r1, [r7, #8]
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f001 f953 	bl	800eb68 <_ZNSt6vectorIP4BodySaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800d8c2:	4603      	mov	r3, r0
      }
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	371c      	adds	r7, #28
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd90      	pop	{r4, r7, pc}

0800d8cc <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	370c      	adds	r7, #12
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr

0800d8e2 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d8e2:	b480      	push	{r7}
 800d8e4:	b083      	sub	sp, #12
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	370c      	adds	r7, #12
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr

0800d8f8 <_ZNSt16allocator_traitsISaIP10ExpressionEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	68b9      	ldr	r1, [r7, #8]
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	f001 f93f 	bl	800eb8c <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE10deallocateEPS2_j>
 800d90e:	bf00      	nop
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <_ZSt8_DestroyIPP10ExpressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d916:	b580      	push	{r7, lr}
 800d918:	b082      	sub	sp, #8
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
 800d91e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800d920:	6839      	ldr	r1, [r7, #0]
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f001 f93e 	bl	800eba4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10ExpressionEEvT_S5_>
    }
 800d928:	bf00      	nop
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <_ZN9__gnu_cxx13new_allocatorIP4BodyEC1Ev>:
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4618      	mov	r0, r3
 800d93c:	370c      	adds	r7, #12
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr

0800d946 <_ZNSt16allocator_traitsISaIP4BodyEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d946:	b580      	push	{r7, lr}
 800d948:	b084      	sub	sp, #16
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	60f8      	str	r0, [r7, #12]
 800d94e:	60b9      	str	r1, [r7, #8]
 800d950:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	68b9      	ldr	r1, [r7, #8]
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	f001 f92f 	bl	800ebba <_ZN9__gnu_cxx13new_allocatorIP4BodyE10deallocateEPS2_j>
 800d95c:	bf00      	nop
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <_ZSt8_DestroyIPP4BodyEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800d96e:	6839      	ldr	r1, [r7, #0]
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f001 f92e 	bl	800ebd2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP4BodyEEvT_S5_>
    }
 800d976:	bf00      	nop
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}

0800d97e <_ZNSt16allocator_traitsISaIP10ExpressionEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800d97e:	b580      	push	{r7, lr}
 800d980:	b082      	sub	sp, #8
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
 800d986:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800d988:	6839      	ldr	r1, [r7, #0]
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f001 f92c 	bl	800ebe8 <_ZNSaIP10ExpressionEC1ERKS1_>
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	3708      	adds	r7, #8
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800d9a2:	6839      	ldr	r1, [r7, #0]
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f001 f91f 	bl	800ebe8 <_ZNSaIP10ExpressionEC1ERKS1_>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7fe fc25 	bl	800c1fc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800d9c6:	6839      	ldr	r1, [r7, #0]
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f7ff fe87 	bl	800d6dc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	441a      	add	r2, r3
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	609a      	str	r2, [r3, #8]
      }
 800d9ea:	bf00      	nop
 800d9ec:	3708      	adds	r7, #8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <_ZN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d9f2:	b480      	push	{r7}
 800d9f4:	b083      	sub	sp, #12
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
 800d9fa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	601a      	str	r2, [r3, #0]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	4618      	mov	r0, r3
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr

0800da12 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800da12:	b580      	push	{r7, lr}
 800da14:	b086      	sub	sp, #24
 800da16:	af00      	add	r7, sp, #0
 800da18:	60f8      	str	r0, [r7, #12]
 800da1a:	60b9      	str	r1, [r7, #8]
 800da1c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800da1e:	2301      	movs	r3, #1
 800da20:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	68b9      	ldr	r1, [r7, #8]
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f001 f8ec 	bl	800ec04 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 800da2c:	4603      	mov	r3, r0
    }
 800da2e:	4618      	mov	r0, r3
 800da30:	3718      	adds	r7, #24
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <_ZNSt16allocator_traitsISaIP4BodyEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800da36:	b580      	push	{r7, lr}
 800da38:	b082      	sub	sp, #8
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
 800da3e:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800da40:	6839      	ldr	r1, [r7, #0]
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f001 f8ee 	bl	800ec24 <_ZNSaIP4BodyEC1ERKS1_>
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	3708      	adds	r7, #8
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <_ZNSt12_Vector_baseIP4BodySaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800da5a:	6839      	ldr	r1, [r7, #0]
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f001 f8e1 	bl	800ec24 <_ZNSaIP4BodyEC1ERKS1_>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	4618      	mov	r0, r3
 800da66:	f7fe fc20 	bl	800c2aa <_ZNSt12_Vector_baseIP4BodySaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4618      	mov	r0, r3
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <_ZNSt12_Vector_baseIP4BodySaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800da7e:	6839      	ldr	r1, [r7, #0]
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7ff fefb 	bl	800d87c <_ZNSt12_Vector_baseIP4BodySaIS1_EE11_M_allocateEj>
 800da86:	4602      	mov	r2, r0
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	441a      	add	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	609a      	str	r2, [r3, #8]
      }
 800daa2:	bf00      	nop
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <_ZN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800daaa:	b480      	push	{r7}
 800daac:	b083      	sub	sp, #12
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
 800dab2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	681a      	ldr	r2, [r3, #0]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	601a      	str	r2, [r3, #0]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	4618      	mov	r0, r3
 800dac0:	370c      	adds	r7, #12
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr

0800daca <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800daca:	b580      	push	{r7, lr}
 800dacc:	b086      	sub	sp, #24
 800dace:	af00      	add	r7, sp, #0
 800dad0:	60f8      	str	r0, [r7, #12]
 800dad2:	60b9      	str	r1, [r7, #8]
 800dad4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800dad6:	2301      	movs	r3, #1
 800dad8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	68b9      	ldr	r1, [r7, #8]
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f001 f8ae 	bl	800ec40 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 800dae4:	4603      	mov	r3, r0
    }
 800dae6:	4618      	mov	r0, r3
 800dae8:	3718      	adds	r7, #24
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <_ZSt7forwardISt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800daee:	b480      	push	{r7}
 800daf0:	b083      	sub	sp, #12
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4618      	mov	r0, r3
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	4618      	mov	r0, r3
 800db10:	370c      	adds	r7, #12
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr

0800db1a <_ZNOSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>:
      _Type&& _M_get() && noexcept
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b082      	sub	sp, #8
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
      { return std::move(*_M_storage._M_ptr()); }
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	4618      	mov	r0, r3
 800db26:	f7f7 fb7b 	bl	8005220 <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>
 800db2a:	4603      	mov	r3, r0
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7fe fd41 	bl	800c5b4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800db32:	4603      	mov	r3, r0
 800db34:	4618      	mov	r0, r3
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4618      	mov	r0, r3
 800db48:	370c      	adds	r7, #12
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr

0800db52 <_ZNSt16allocator_traitsISaIP10ExpressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800db52:	b580      	push	{r7, lr}
 800db54:	b084      	sub	sp, #16
 800db56:	af00      	add	r7, sp, #0
 800db58:	60f8      	str	r0, [r7, #12]
 800db5a:	60b9      	str	r1, [r7, #8]
 800db5c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7ff ffec 	bl	800db3c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800db64:	4603      	mov	r3, r0
 800db66:	461a      	mov	r2, r3
 800db68:	68b9      	ldr	r1, [r7, #8]
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	f001 f878 	bl	800ec60 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 800db70:	bf00      	nop
 800db72:	3710      	adds	r7, #16
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <_ZNSt6vectorIP10ExpressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800db78:	b5b0      	push	{r4, r5, r7, lr}
 800db7a:	b08c      	sub	sp, #48	; 0x30
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800db84:	4a39      	ldr	r2, [pc, #228]	; (800dc6c <_ZNSt6vectorIP10ExpressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800db86:	2101      	movs	r1, #1
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f7ff fd3b 	bl	800d604 <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc>
 800db8e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800db9c:	68f8      	ldr	r0, [r7, #12]
 800db9e:	f7ff fd78 	bl	800d692 <_ZNSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 800dba2:	4603      	mov	r3, r0
 800dba4:	617b      	str	r3, [r7, #20]
 800dba6:	f107 0214 	add.w	r2, r7, #20
 800dbaa:	f107 0308 	add.w	r3, r7, #8
 800dbae:	4611      	mov	r1, r2
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7ff fd7e 	bl	800d6b2 <_ZN9__gnu_cxxmiIPP10ExpressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7ff fd8c 	bl	800d6dc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj>
 800dbc4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800dbca:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800dbcc:	6a3b      	ldr	r3, [r7, #32]
 800dbce:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800dbd0:	69fa      	ldr	r2, [r7, #28]
 800dbd2:	18d5      	adds	r5, r2, r3
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7ff ffb1 	bl	800db3c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	461a      	mov	r2, r3
 800dbde:	4629      	mov	r1, r5
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	f7ff ffb6 	bl	800db52 <_ZNSt16allocator_traitsISaIP10ExpressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800dbea:	f107 0308 	add.w	r3, r7, #8
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7ff fd9c 	bl	800d72c <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7fe fb30 	bl	800c260 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800dc00:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800dc02:	69fa      	ldr	r2, [r7, #28]
 800dc04:	4621      	mov	r1, r4
 800dc06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc08:	f7ff fd7c 	bl	800d704 <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800dc0c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	3304      	adds	r3, #4
 800dc12:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800dc14:	f107 0308 	add.w	r3, r7, #8
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7ff fd87 	bl	800d72c <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7fe fb1b 	bl	800c260 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800dc2a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800dc2c:	69ba      	ldr	r2, [r7, #24]
 800dc2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc30:	4620      	mov	r0, r4
 800dc32:	f7ff fd67 	bl	800d704 <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800dc36:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800dc38:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	689a      	ldr	r2, [r3, #8]
 800dc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800dc44:	461a      	mov	r2, r3
 800dc46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc48:	f7fe faf7 	bl	800c23a <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	69fa      	ldr	r2, [r7, #28]
 800dc50:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	69ba      	ldr	r2, [r7, #24]
 800dc56:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800dc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	69fa      	ldr	r2, [r7, #28]
 800dc5e:	441a      	add	r2, r3
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	609a      	str	r2, [r3, #8]
    }
 800dc64:	bf00      	nop
 800dc66:	3730      	adds	r7, #48	; 0x30
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bdb0      	pop	{r4, r5, r7, pc}
 800dc6c:	0801ce7c 	.word	0x0801ce7c

0800dc70 <_ZNSt6vectorIP10ExpressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f7fe f986 	bl	800bf8a <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	60fb      	str	r3, [r7, #12]
 800dc82:	f107 030c 	add.w	r3, r7, #12
 800dc86:	2101      	movs	r1, #1
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f000 ffff 	bl	800ec8c <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEmiEi>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	60bb      	str	r3, [r7, #8]
 800dc92:	f107 0308 	add.w	r3, r7, #8
 800dc96:	4618      	mov	r0, r3
 800dc98:	f001 f811 	bl	800ecbe <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEdeEv>
 800dc9c:	4603      	mov	r3, r0
      }
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dca6:	b480      	push	{r7}
 800dca8:	b083      	sub	sp, #12
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ10Assignment13Function_call15While_statement12If_statementEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	370c      	adds	r7, #12
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr

0800dcd2 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ13Function_call15While_statement12If_statementEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dcd2:	b480      	push	{r7}
 800dcd4:	b083      	sub	sp, #12
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	370c      	adds	r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <_ZNRSt8__detail9__variant14_UninitializedI13Function_callLb0EE6_M_getEv>:
      _Type& _M_get() & noexcept
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
      { return *_M_storage._M_ptr(); }
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f000 ffef 	bl	800ecd6 <_ZN9__gnu_cxx16__aligned_membufI13Function_callE6_M_ptrEv>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3708      	adds	r7, #8
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <_ZStneRKSaIP10ExpressionES3_>:
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800dd02:	b480      	push	{r7}
 800dd04:	b083      	sub	sp, #12
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	6039      	str	r1, [r7, #0]
      { return false; }
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	4618      	mov	r0, r3
 800dd10:	370c      	adds	r7, #12
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr

0800dd1a <_ZNSt6vectorIP10ExpressionSaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b082      	sub	sp, #8
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4619      	mov	r1, r3
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f000 ffe0 	bl	800ecee <_ZNSt6vectorIP10ExpressionSaIS1_EE15_M_erase_at_endEPS1_>
 800dd2e:	bf00      	nop
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <_ZSt15__alloc_on_copyISaIP10ExpressionEEvRT_RKS3_>:
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b084      	sub	sp, #16
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 800dd40:	461a      	mov	r2, r3
 800dd42:	6839      	ldr	r1, [r7, #0]
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f000 fff3 	bl	800ed30 <_ZSt18__do_alloc_on_copyISaIP10ExpressionEEvRT_RKS3_St17integral_constantIbLb0EE>
    }
 800dd4a:	bf00      	nop
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <_ZNKSt6vectorIP10ExpressionSaIS1_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800dd52:	b480      	push	{r7}
 800dd54:	b083      	sub	sp, #12
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	1ad3      	subs	r3, r2, r3
 800dd64:	109b      	asrs	r3, r3, #2
 800dd66:	4618      	mov	r0, r3
 800dd68:	370c      	adds	r7, #12
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr

0800dd72 <_ZNSt6vectorIP10ExpressionSaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>:
	_M_allocate_and_copy(size_type __n,
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b086      	sub	sp, #24
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	60f8      	str	r0, [r7, #12]
 800dd7a:	60b9      	str	r1, [r7, #8]
 800dd7c:	607a      	str	r2, [r7, #4]
 800dd7e:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	68b9      	ldr	r1, [r7, #8]
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7ff fca9 	bl	800d6dc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj>
 800dd8a:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fe fa66 	bl	800c260 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800dd94:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800dd96:	697a      	ldr	r2, [r7, #20]
 800dd98:	6839      	ldr	r1, [r7, #0]
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7fe fb35 	bl	800c40a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
	      return __result;
 800dda0:	697b      	ldr	r3, [r7, #20]
	}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3718      	adds	r7, #24
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}

0800ddaa <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_>:
    copy(_II __first, _II __last, _OI __result)
 800ddaa:	b590      	push	{r4, r7, lr}
 800ddac:	b085      	sub	sp, #20
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	60f8      	str	r0, [r7, #12]
 800ddb2:	60b9      	str	r1, [r7, #8]
 800ddb4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f000 ffc6 	bl	800ed48 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEET_SA_>
 800ddbc:	4604      	mov	r4, r0
 800ddbe:	68b8      	ldr	r0, [r7, #8]
 800ddc0:	f000 ffc2 	bl	800ed48 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEET_SA_>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	4619      	mov	r1, r3
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f000 ffc7 	bl	800ed5e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_>
 800ddd0:	4603      	mov	r3, r0
    }
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3714      	adds	r7, #20
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd90      	pop	{r4, r7, pc}

0800ddda <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b084      	sub	sp, #16
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	60f8      	str	r0, [r7, #12]
 800dde2:	60b9      	str	r1, [r7, #8]
 800dde4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800dde6:	68b9      	ldr	r1, [r7, #8]
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f000 ffd9 	bl	800eda0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS3_SaIS3_EEEEEvT_S9_>
    }
 800ddee:	bf00      	nop
 800ddf0:	3710      	adds	r7, #16
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <_ZSt4copyIPP10ExpressionS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800ddf6:	b590      	push	{r4, r7, lr}
 800ddf8:	b085      	sub	sp, #20
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	60f8      	str	r0, [r7, #12]
 800ddfe:	60b9      	str	r1, [r7, #8]
 800de00:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800de02:	68f8      	ldr	r0, [r7, #12]
 800de04:	f000 ffd9 	bl	800edba <_ZSt12__miter_baseIPP10ExpressionET_S3_>
 800de08:	4604      	mov	r4, r0
 800de0a:	68b8      	ldr	r0, [r7, #8]
 800de0c:	f000 ffd5 	bl	800edba <_ZSt12__miter_baseIPP10ExpressionET_S3_>
 800de10:	4603      	mov	r3, r0
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	4619      	mov	r1, r3
 800de16:	4620      	mov	r0, r4
 800de18:	f000 ffda 	bl	800edd0 <_ZSt14__copy_move_a2ILb0EPP10ExpressionS2_ET1_T0_S4_S3_>
 800de1c:	4603      	mov	r3, r0
    }
 800de1e:	4618      	mov	r0, r3
 800de20:	3714      	adds	r7, #20
 800de22:	46bd      	mov	sp, r7
 800de24:	bd90      	pop	{r4, r7, pc}

0800de26 <_ZSt22__uninitialized_copy_aIPP10ExpressionS2_S1_ET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800de26:	b580      	push	{r7, lr}
 800de28:	b084      	sub	sp, #16
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	60f8      	str	r0, [r7, #12]
 800de2e:	60b9      	str	r1, [r7, #8]
 800de30:	607a      	str	r2, [r7, #4]
 800de32:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	68b9      	ldr	r1, [r7, #8]
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f000 ffec 	bl	800ee16 <_ZSt18uninitialized_copyIPP10ExpressionS2_ET0_T_S4_S3_>
 800de3e:	4603      	mov	r3, r0
 800de40:	4618      	mov	r0, r3
 800de42:	3710      	adds	r7, #16
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJ10Assignment13Function_call15While_statement12If_statementEEJS2_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800de48:	b590      	push	{r4, r7, lr}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2201      	movs	r2, #1
 800de56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7fe fc15 	bl	800c68a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>
 800de60:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800de62:	6838      	ldr	r0, [r7, #0]
 800de64:	f7fe fc3e 	bl	800c6e4 <_ZSt7forwardI13Function_callEOT_RNSt16remove_referenceIS1_E4typeE>
 800de68:	4604      	mov	r4, r0
      ::new ((void*)std::addressof(__storage))
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f000 ffe5 	bl	800ee3a <_ZSt9addressofI13Function_callEPT_RS1_>
 800de70:	4603      	mov	r3, r0
 800de72:	4619      	mov	r1, r3
 800de74:	2024      	movs	r0, #36	; 0x24
 800de76:	f7f3 f8b1 	bl	8000fdc <_ZnwjPv>
 800de7a:	4603      	mov	r3, r0
 800de7c:	4621      	mov	r1, r4
 800de7e:	4618      	mov	r0, r3
 800de80:	f7fc f9f5 	bl	800a26e <_ZN13Function_callC1ERKS_>
    }
 800de84:	bf00      	nop
 800de86:	3714      	adds	r7, #20
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd90      	pop	{r4, r7, pc}

0800de8c <_ZNRSt8__detail9__variant14_UninitializedI10AssignmentLb0EE6_M_getEv>:
      _Type& _M_get() & noexcept
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
      { return *_M_storage._M_ptr(); }
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	4618      	mov	r0, r3
 800de98:	f000 ffdb 	bl	800ee52 <_ZN9__gnu_cxx16__aligned_membufI10AssignmentE6_M_ptrEv>
 800de9c:	4603      	mov	r3, r0
 800de9e:	4618      	mov	r0, r3
 800dea0:	3708      	adds	r7, #8
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <_ZSt28__variant_construct_by_indexILj0ESt7variantIJ10Assignment13Function_call15While_statement12If_statementEEJS1_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800dea6:	b590      	push	{r4, r7, lr}
 800dea8:	b085      	sub	sp, #20
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
 800deae:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f7fe fd4d 	bl	800c958 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>
 800debe:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800dec0:	6838      	ldr	r0, [r7, #0]
 800dec2:	f7fe fd77 	bl	800c9b4 <_ZSt7forwardI10AssignmentEOT_RNSt16remove_referenceIS1_E4typeE>
 800dec6:	4604      	mov	r4, r0
      ::new ((void*)std::addressof(__storage))
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	f000 ffce 	bl	800ee6a <_ZSt9addressofI10AssignmentEPT_RS1_>
 800dece:	4603      	mov	r3, r0
 800ded0:	4619      	mov	r1, r3
 800ded2:	202c      	movs	r0, #44	; 0x2c
 800ded4:	f7f3 f882 	bl	8000fdc <_ZnwjPv>
 800ded8:	4603      	mov	r3, r0
 800deda:	4621      	mov	r1, r4
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fc f884 	bl	8009fea <_ZN10AssignmentC1EOS_>
    }
 800dee2:	bf00      	nop
 800dee4:	3714      	adds	r7, #20
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd90      	pop	{r4, r7, pc}

0800deea <_ZSt14__variant_castIJ10Assignment13Function_call15While_statement12If_statementERNSt8__detail9__variant16_Variant_storageILb0EJS0_S1_S2_S3_EEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 800deea:	b480      	push	{r7}
 800deec:	b083      	sub	sp, #12
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
	    return static_cast<variant<_Types...>&>(__rhs);
 800def2:	687b      	ldr	r3, [r7, #4]
    }
 800def4:	4618      	mov	r0, r3
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESG_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f7ff fecc 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800df0e:	4603      	mov	r3, r0
 800df10:	4618      	mov	r0, r3
 800df12:	f7fe fd21 	bl	800c958 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>
 800df16:	4603      	mov	r3, r0
	}
 800df18:	4618      	mov	r0, r3
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESD_SG_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800df20:	b5b0      	push	{r4, r5, r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 ffa9 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800df30:	4604      	mov	r4, r0
 800df32:	6838      	ldr	r0, [r7, #0]
 800df34:	f7ff feb7 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800df38:	4603      	mov	r3, r0
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7ff ffe0 	bl	800df00 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESG_EEDcOT0_>
 800df40:	4603      	mov	r3, r0
 800df42:	4619      	mov	r1, r3
 800df44:	4620      	mov	r0, r4
 800df46:	f000 ffa7 	bl	800ee98 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS3_EENSt15__invoke_resultIS8_JDpT0_EE4typeES9_DpOSD_>
		std::forward<_Variants>(__vars))...);
 800df4a:	462b      	mov	r3, r5
      }
 800df4c:	4618      	mov	r0, r3
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bdb0      	pop	{r4, r5, r7, pc}

0800df54 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESD_SG_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800df54:	b5b0      	push	{r4, r5, r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 ff8f 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800df64:	4604      	mov	r4, r0
 800df66:	6838      	ldr	r0, [r7, #0]
 800df68:	f7ff fe9d 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800df6c:	4603      	mov	r3, r0
 800df6e:	4619      	mov	r1, r3
 800df70:	4620      	mov	r0, r4
 800df72:	f7ff ffd5 	bl	800df20 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESD_SG_>
				   std::forward<_Variants>(__vars)...);
 800df76:	462b      	mov	r3, r5
      }
 800df78:	4618      	mov	r0, r3
 800df7a:	3708      	adds	r7, #8
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bdb0      	pop	{r4, r5, r7, pc}

0800df80 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESD_SG_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800df80:	b5b0      	push	{r4, r5, r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 ff79 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800df90:	4604      	mov	r4, r0
 800df92:	6838      	ldr	r0, [r7, #0]
 800df94:	f7ff fe87 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800df98:	4603      	mov	r3, r0
 800df9a:	4619      	mov	r1, r3
 800df9c:	4620      	mov	r0, r4
 800df9e:	f7ff ffd9 	bl	800df54 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESD_SG_>
				   std::forward<_Variants>(__vars)...);
 800dfa2:	462b      	mov	r3, r5
      }
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bdb0      	pop	{r4, r5, r7, pc}

0800dfac <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj4294967295EEEE28__element_by_index_or_cookieILj4294967295ESG_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
	}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	370c      	adds	r7, #12
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr

0800dfc0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj4294967295EEEE19__visit_invoke_implESD_SG_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800dfc0:	b5b0      	push	{r4, r5, r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 ff59 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800dfd0:	4604      	mov	r4, r0
	      __element_by_index_or_cookie<__indices>(
 800dfd2:	6838      	ldr	r0, [r7, #0]
 800dfd4:	f7ff fe67 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7ff ffe6 	bl	800dfac <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj4294967295EEEE28__element_by_index_or_cookieILj4294967295ESG_EEDcOT0_>
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800dfe0:	f107 030c 	add.w	r3, r7, #12
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	f000 ff6d 	bl	800eec6 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JNS1_16__variant_cookieEEENSt15__invoke_resultIS8_JDpT0_EE4typeES9_DpOSD_>
		std::forward<_Variants>(__vars))...);
 800dfec:	462b      	mov	r3, r5
      }
 800dfee:	4618      	mov	r0, r3
 800dff0:	3710      	adds	r7, #16
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bdb0      	pop	{r4, r5, r7, pc}

0800dff6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj4294967295EEEE17__do_visit_invokeESD_SG_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800dff6:	b5b0      	push	{r4, r5, r7, lr}
 800dff8:	b082      	sub	sp, #8
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
 800dffe:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f000 ff3e 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800e006:	4604      	mov	r4, r0
 800e008:	6838      	ldr	r0, [r7, #0]
 800e00a:	f7ff fe4c 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e00e:	4603      	mov	r3, r0
 800e010:	4619      	mov	r1, r3
 800e012:	4620      	mov	r0, r4
 800e014:	f7ff ffd4 	bl	800dfc0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj4294967295EEEE19__visit_invoke_implESD_SG_>
				   std::forward<_Variants>(__vars)...);
 800e018:	462b      	mov	r3, r5
      }
 800e01a:	4618      	mov	r0, r3
 800e01c:	3708      	adds	r7, #8
 800e01e:	46bd      	mov	sp, r7
 800e020:	bdb0      	pop	{r4, r5, r7, pc}

0800e022 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj4294967295EEEE14__visit_invokeESD_SG_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800e022:	b5b0      	push	{r4, r5, r7, lr}
 800e024:	b082      	sub	sp, #8
 800e026:	af00      	add	r7, sp, #0
 800e028:	6078      	str	r0, [r7, #4]
 800e02a:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 ff28 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800e032:	4604      	mov	r4, r0
 800e034:	6838      	ldr	r0, [r7, #0]
 800e036:	f7ff fe36 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e03a:	4603      	mov	r3, r0
 800e03c:	4619      	mov	r1, r3
 800e03e:	4620      	mov	r0, r4
 800e040:	f7ff ffd9 	bl	800dff6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj4294967295EEEE17__do_visit_invokeESD_SG_>
				   std::forward<_Variants>(__vars)...);
 800e044:	462b      	mov	r3, r5
      }
 800e046:	4618      	mov	r0, r3
 800e048:	3708      	adds	r7, #8
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bdb0      	pop	{r4, r5, r7, pc}

0800e04e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESG_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800e04e:	b580      	push	{r7, lr}
 800e050:	b082      	sub	sp, #8
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff fe25 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e05c:	4603      	mov	r3, r0
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fe fb13 	bl	800c68a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>
 800e064:	4603      	mov	r3, r0
	}
 800e066:	4618      	mov	r0, r3
 800e068:	3708      	adds	r7, #8
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}

0800e06e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESD_SG_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800e06e:	b5b0      	push	{r4, r5, r7, lr}
 800e070:	b082      	sub	sp, #8
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
 800e076:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 ff02 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800e07e:	4604      	mov	r4, r0
 800e080:	6838      	ldr	r0, [r7, #0]
 800e082:	f7ff fe10 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e086:	4603      	mov	r3, r0
 800e088:	4618      	mov	r0, r3
 800e08a:	f7ff ffe0 	bl	800e04e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESG_EEDcOT0_>
 800e08e:	4603      	mov	r3, r0
 800e090:	4619      	mov	r1, r3
 800e092:	4620      	mov	r0, r4
 800e094:	f000 ff2e 	bl	800eef4 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS4_EENSt15__invoke_resultIS8_JDpT0_EE4typeES9_DpOSD_>
		std::forward<_Variants>(__vars))...);
 800e098:	462b      	mov	r3, r5
      }
 800e09a:	4618      	mov	r0, r3
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bdb0      	pop	{r4, r5, r7, pc}

0800e0a2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESD_SG_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800e0a2:	b5b0      	push	{r4, r5, r7, lr}
 800e0a4:	b082      	sub	sp, #8
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f000 fee8 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	6838      	ldr	r0, [r7, #0]
 800e0b6:	f7ff fdf6 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	4619      	mov	r1, r3
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f7ff ffd5 	bl	800e06e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESD_SG_>
				   std::forward<_Variants>(__vars)...);
 800e0c4:	462b      	mov	r3, r5
      }
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3708      	adds	r7, #8
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bdb0      	pop	{r4, r5, r7, pc}

0800e0ce <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESD_SG_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800e0ce:	b5b0      	push	{r4, r5, r7, lr}
 800e0d0:	b082      	sub	sp, #8
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 fed2 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800e0de:	4604      	mov	r4, r0
 800e0e0:	6838      	ldr	r0, [r7, #0]
 800e0e2:	f7ff fde0 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f7ff ffd9 	bl	800e0a2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESD_SG_>
				   std::forward<_Variants>(__vars)...);
 800e0f0:	462b      	mov	r3, r5
      }
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3708      	adds	r7, #8
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bdb0      	pop	{r4, r5, r7, pc}

0800e0fa <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESG_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b082      	sub	sp, #8
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f7ff fdcf 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e108:	4603      	mov	r3, r0
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fe fcc5 	bl	800ca9a <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>
 800e110:	4603      	mov	r3, r0
	}
 800e112:	4618      	mov	r0, r3
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}

0800e11a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESD_SG_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800e11a:	b5b0      	push	{r4, r5, r7, lr}
 800e11c:	b082      	sub	sp, #8
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
 800e122:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 feac 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800e12a:	4604      	mov	r4, r0
 800e12c:	6838      	ldr	r0, [r7, #0]
 800e12e:	f7ff fdba 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e132:	4603      	mov	r3, r0
 800e134:	4618      	mov	r0, r3
 800e136:	f7ff ffe0 	bl	800e0fa <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESG_EEDcOT0_>
 800e13a:	4603      	mov	r3, r0
 800e13c:	4619      	mov	r1, r3
 800e13e:	4620      	mov	r0, r4
 800e140:	f000 feef 	bl	800ef22 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS5_EENSt15__invoke_resultIS8_JDpT0_EE4typeES9_DpOSD_>
		std::forward<_Variants>(__vars))...);
 800e144:	462b      	mov	r3, r5
      }
 800e146:	4618      	mov	r0, r3
 800e148:	3708      	adds	r7, #8
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bdb0      	pop	{r4, r5, r7, pc}

0800e14e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESD_SG_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800e14e:	b5b0      	push	{r4, r5, r7, lr}
 800e150:	b082      	sub	sp, #8
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
 800e156:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f000 fe92 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800e15e:	4604      	mov	r4, r0
 800e160:	6838      	ldr	r0, [r7, #0]
 800e162:	f7ff fda0 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e166:	4603      	mov	r3, r0
 800e168:	4619      	mov	r1, r3
 800e16a:	4620      	mov	r0, r4
 800e16c:	f7ff ffd5 	bl	800e11a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESD_SG_>
				   std::forward<_Variants>(__vars)...);
 800e170:	462b      	mov	r3, r5
      }
 800e172:	4618      	mov	r0, r3
 800e174:	3708      	adds	r7, #8
 800e176:	46bd      	mov	sp, r7
 800e178:	bdb0      	pop	{r4, r5, r7, pc}

0800e17a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESD_SG_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800e17a:	b5b0      	push	{r4, r5, r7, lr}
 800e17c:	b082      	sub	sp, #8
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
 800e182:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 fe7c 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800e18a:	4604      	mov	r4, r0
 800e18c:	6838      	ldr	r0, [r7, #0]
 800e18e:	f7ff fd8a 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e192:	4603      	mov	r3, r0
 800e194:	4619      	mov	r1, r3
 800e196:	4620      	mov	r0, r4
 800e198:	f7ff ffd9 	bl	800e14e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESD_SG_>
				   std::forward<_Variants>(__vars)...);
 800e19c:	462b      	mov	r3, r5
      }
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3708      	adds	r7, #8
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bdb0      	pop	{r4, r5, r7, pc}

0800e1a6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESG_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b082      	sub	sp, #8
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7ff fd79 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fe fd07 	bl	800cbca <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>
 800e1bc:	4603      	mov	r3, r0
	}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3708      	adds	r7, #8
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESD_SG_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800e1c6:	b5b0      	push	{r4, r5, r7, lr}
 800e1c8:	b082      	sub	sp, #8
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
 800e1ce:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f000 fe56 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	6838      	ldr	r0, [r7, #0]
 800e1da:	f7ff fd64 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7ff ffe0 	bl	800e1a6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESG_EEDcOT0_>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	f000 feb0 	bl	800ef50 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS6_EENSt15__invoke_resultIS8_JDpT0_EE4typeES9_DpOSD_>
		std::forward<_Variants>(__vars))...);
 800e1f0:	462b      	mov	r3, r5
      }
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3708      	adds	r7, #8
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bdb0      	pop	{r4, r5, r7, pc}

0800e1fa <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESD_SG_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800e1fa:	b5b0      	push	{r4, r5, r7, lr}
 800e1fc:	b082      	sub	sp, #8
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
 800e202:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f000 fe3c 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800e20a:	4604      	mov	r4, r0
 800e20c:	6838      	ldr	r0, [r7, #0]
 800e20e:	f7ff fd4a 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e212:	4603      	mov	r3, r0
 800e214:	4619      	mov	r1, r3
 800e216:	4620      	mov	r0, r4
 800e218:	f7ff ffd5 	bl	800e1c6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESD_SG_>
				   std::forward<_Variants>(__vars)...);
 800e21c:	462b      	mov	r3, r5
      }
 800e21e:	4618      	mov	r0, r3
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bdb0      	pop	{r4, r5, r7, pc}

0800e226 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESD_SG_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800e226:	b5b0      	push	{r4, r5, r7, lr}
 800e228:	b082      	sub	sp, #8
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
 800e22e:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 fe26 	bl	800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800e236:	4604      	mov	r4, r0
 800e238:	6838      	ldr	r0, [r7, #0]
 800e23a:	f7ff fd34 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e23e:	4603      	mov	r3, r0
 800e240:	4619      	mov	r1, r3
 800e242:	4620      	mov	r0, r4
 800e244:	f7ff ffd9 	bl	800e1fa <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS5_S6_S7_S8_EEEJEEESt5tupleIJSG_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESD_SG_>
				   std::forward<_Variants>(__vars)...);
 800e248:	462b      	mov	r3, r5
      }
 800e24a:	4618      	mov	r0, r3
 800e24c:	3708      	adds	r7, #8
 800e24e:	46bd      	mov	sp, r7
 800e250:	bdb0      	pop	{r4, r5, r7, pc}

0800e252 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS4_S5_S6_S7_EEEJLj4EEE9_M_accessIJEEERKSH_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 800e252:	b580      	push	{r7, lr}
 800e254:	b082      	sub	sp, #8
 800e256:	af00      	add	r7, sp, #0
 800e258:	6078      	str	r0, [r7, #4]
 800e25a:	6039      	str	r1, [r7, #0]
	  return _M_arr[__first_index + __do_cookie]
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	3301      	adds	r3, #1
	    ._M_access(__rest_indices...);
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	4413      	add	r3, r2
 800e266:	4618      	mov	r0, r3
 800e268:	f000 fe89 	bl	800ef7e <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS4_S5_S6_S7_EEEJEE9_M_accessEv>
 800e26c:	4603      	mov	r3, r0
	}
 800e26e:	4618      	mov	r0, r3
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
	...

0800e278 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRSt7variantIJS3_S4_S5_S6_EEEEDcOT1_DpOT2_>:
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 800e278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e27a:	b085      	sub	sp, #20
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 800e282:	4b0f      	ldr	r3, [pc, #60]	; (800e2c0 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRSt7variantIJS3_S4_S5_S6_EEEEDcOT1_DpOT2_+0x48>)
 800e284:	60fb      	str	r3, [r7, #12]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 800e286:	6838      	ldr	r0, [r7, #0]
 800e288:	f7fd f890 	bl	800b3ac <_ZNKSt7variantIJ10Assignment13Function_call15While_statement12If_statementEE5indexEv>
 800e28c:	4603      	mov	r3, r0
 800e28e:	4619      	mov	r1, r3
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f7ff ffde 	bl	800e252 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS4_S5_S6_S7_EEEJLj4EEE9_M_accessIJEEERKSH_jDpT_>
 800e296:	4603      	mov	r3, r0
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 800e29c:	68bc      	ldr	r4, [r7, #8]
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 fe78 	bl	800ef94 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800e2a4:	4605      	mov	r5, r0
 800e2a6:	6838      	ldr	r0, [r7, #0]
 800e2a8:	f7ff fcfd 	bl	800dca6 <_ZSt7forwardIRSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 800e2b4:	4633      	mov	r3, r6
    }
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3714      	adds	r7, #20
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	0801d22c 	.word	0x0801d22c

0800e2c4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEv>:
      constexpr void _M_reset_impl()
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
	__do_visit([](auto&& __this_mem) mutable
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7ff fe0c 	bl	800deea <_ZSt14__variant_castIJ10Assignment13Function_call15While_statement12If_statementERNSt8__detail9__variant16_Variant_storageILb0EJS0_S1_S2_S3_EEEEDcOT0_>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	f107 030c 	add.w	r3, r7, #12
 800e2d8:	4611      	mov	r1, r2
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7ff ffcc 	bl	800e278 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRSt7variantIJS3_S4_S5_S6_EEEEDcOT1_DpOT2_>
      }
 800e2e0:	bf00      	nop
 800e2e2:	3710      	adds	r7, #16
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ15While_statement12If_statementEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	370c      	adds	r7, #12
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr

0800e2fe <_ZNRSt8__detail9__variant14_UninitializedI15While_statementLb0EE6_M_getEv>:
      _Type& _M_get() & noexcept
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b082      	sub	sp, #8
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
      { return *_M_storage._M_ptr(); }
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	4618      	mov	r0, r3
 800e30a:	f000 fe4e 	bl	800efaa <_ZN9__gnu_cxx16__aligned_membufI15While_statementE6_M_ptrEv>
 800e30e:	4603      	mov	r3, r0
 800e310:	4618      	mov	r0, r3
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <_ZSt28__variant_construct_by_indexILj2ESt7variantIJ10Assignment13Function_call15While_statement12If_statementEEJS3_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800e318:	b590      	push	{r4, r7, lr}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2202      	movs	r2, #2
 800e326:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7fe fbb5 	bl	800ca9a <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>
 800e330:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800e332:	6838      	ldr	r0, [r7, #0]
 800e334:	f7fe fbde 	bl	800caf4 <_ZSt7forwardI15While_statementEOT_RNSt16remove_referenceIS1_E4typeE>
 800e338:	4604      	mov	r4, r0
      ::new ((void*)std::addressof(__storage))
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f000 fe41 	bl	800efc2 <_ZSt9addressofI15While_statementEPT_RS1_>
 800e340:	4603      	mov	r3, r0
 800e342:	4619      	mov	r1, r3
 800e344:	2018      	movs	r0, #24
 800e346:	f7f2 fe49 	bl	8000fdc <_ZnwjPv>
 800e34a:	4603      	mov	r3, r0
 800e34c:	4621      	mov	r1, r4
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fb fa9e 	bl	8009890 <_ZN15While_statementC1EOS_>
    }
 800e354:	bf00      	nop
 800e356:	3714      	adds	r7, #20
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd90      	pop	{r4, r7, pc}

0800e35c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ12If_statementEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	4618      	mov	r0, r3
 800e368:	370c      	adds	r7, #12
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr

0800e372 <_ZNRSt8__detail9__variant14_UninitializedI12If_statementLb0EE6_M_getEv>:
      _Type& _M_get() & noexcept
 800e372:	b580      	push	{r7, lr}
 800e374:	b082      	sub	sp, #8
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
      { return *_M_storage._M_ptr(); }
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	4618      	mov	r0, r3
 800e37e:	f000 fe2c 	bl	800efda <_ZN9__gnu_cxx16__aligned_membufI12If_statementE6_M_ptrEv>
 800e382:	4603      	mov	r3, r0
 800e384:	4618      	mov	r0, r3
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <_ZStneRKSaIP4BodyES3_>:
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800e38c:	b480      	push	{r7}
 800e38e:	b083      	sub	sp, #12
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
      { return false; }
 800e396:	2300      	movs	r3, #0
 800e398:	4618      	mov	r0, r3
 800e39a:	370c      	adds	r7, #12
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <_ZNSt6vectorIP4BodySaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 fe1d 	bl	800eff2 <_ZNSt6vectorIP4BodySaIS1_EE15_M_erase_at_endEPS1_>
 800e3b8:	bf00      	nop
 800e3ba:	3708      	adds	r7, #8
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <_ZSt15__alloc_on_copyISaIP4BodyEEvRT_RKS3_>:
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	6839      	ldr	r1, [r7, #0]
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f000 fe30 	bl	800f034 <_ZSt18__do_alloc_on_copyISaIP4BodyEEvRT_RKS3_St17integral_constantIbLb0EE>
    }
 800e3d4:	bf00      	nop
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <_ZNKSt6vectorIP4BodySaIS1_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	1ad3      	subs	r3, r2, r3
 800e3ee:	109b      	asrs	r3, r3, #2
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	370c      	adds	r7, #12
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr

0800e3fc <_ZNSt6vectorIP4BodySaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>:
	_M_allocate_and_copy(size_type __n,
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b086      	sub	sp, #24
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
 800e408:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	68b9      	ldr	r1, [r7, #8]
 800e40e:	4618      	mov	r0, r3
 800e410:	f7ff fa34 	bl	800d87c <_ZNSt12_Vector_baseIP4BodySaIS1_EE11_M_allocateEj>
 800e414:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	4618      	mov	r0, r3
 800e41a:	f7fd ff78 	bl	800c30e <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800e41e:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800e420:	697a      	ldr	r2, [r7, #20]
 800e422:	6839      	ldr	r1, [r7, #0]
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f7fe f866 	bl	800c4f6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
	      return __result;
 800e42a:	697b      	ldr	r3, [r7, #20]
	}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3718      	adds	r7, #24
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_>:
    copy(_II __first, _II __last, _OI __result)
 800e434:	b590      	push	{r4, r7, lr}
 800e436:	b085      	sub	sp, #20
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800e440:	68f8      	ldr	r0, [r7, #12]
 800e442:	f000 fe03 	bl	800f04c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEEET_SA_>
 800e446:	4604      	mov	r4, r0
 800e448:	68b8      	ldr	r0, [r7, #8]
 800e44a:	f000 fdff 	bl	800f04c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEEET_SA_>
 800e44e:	4603      	mov	r3, r0
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	4619      	mov	r1, r3
 800e454:	4620      	mov	r0, r4
 800e456:	f000 fe04 	bl	800f062 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_>
 800e45a:	4603      	mov	r3, r0
    }
 800e45c:	4618      	mov	r0, r3
 800e45e:	3714      	adds	r7, #20
 800e460:	46bd      	mov	sp, r7
 800e462:	bd90      	pop	{r4, r7, pc}

0800e464 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800e470:	68b9      	ldr	r1, [r7, #8]
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	f000 fe16 	bl	800f0a4 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS3_SaIS3_EEEEEvT_S9_>
    }
 800e478:	bf00      	nop
 800e47a:	3710      	adds	r7, #16
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <_ZSt4copyIPP4BodyS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800e480:	b590      	push	{r4, r7, lr}
 800e482:	b085      	sub	sp, #20
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	f000 fe16 	bl	800f0be <_ZSt12__miter_baseIPP4BodyET_S3_>
 800e492:	4604      	mov	r4, r0
 800e494:	68b8      	ldr	r0, [r7, #8]
 800e496:	f000 fe12 	bl	800f0be <_ZSt12__miter_baseIPP4BodyET_S3_>
 800e49a:	4603      	mov	r3, r0
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	4619      	mov	r1, r3
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f000 fe17 	bl	800f0d4 <_ZSt14__copy_move_a2ILb0EPP4BodyS2_ET1_T0_S4_S3_>
 800e4a6:	4603      	mov	r3, r0
    }
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3714      	adds	r7, #20
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd90      	pop	{r4, r7, pc}

0800e4b0 <_ZSt22__uninitialized_copy_aIPP4BodyS2_S1_ET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	60b9      	str	r1, [r7, #8]
 800e4ba:	607a      	str	r2, [r7, #4]
 800e4bc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	68b9      	ldr	r1, [r7, #8]
 800e4c2:	68f8      	ldr	r0, [r7, #12]
 800e4c4:	f000 fe29 	bl	800f11a <_ZSt18uninitialized_copyIPP4BodyS2_ET0_T_S4_S3_>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <_ZSt28__variant_construct_by_indexILj3ESt7variantIJ10Assignment13Function_call15While_statement12If_statementEEJS4_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800e4d2:	b590      	push	{r4, r7, lr}
 800e4d4:	b085      	sub	sp, #20
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
 800e4da:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2203      	movs	r2, #3
 800e4e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7fe fb70 	bl	800cbca <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJ10Assignment13Function_call15While_statement12If_statementEEEEDcOT0_>
 800e4ea:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800e4ec:	6838      	ldr	r0, [r7, #0]
 800e4ee:	f7fe fb99 	bl	800cc24 <_ZSt7forwardI12If_statementEOT_RNSt16remove_referenceIS1_E4typeE>
 800e4f2:	4604      	mov	r4, r0
      ::new ((void*)std::addressof(__storage))
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f000 fe22 	bl	800f13e <_ZSt9addressofI12If_statementEPT_RS1_>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	2018      	movs	r0, #24
 800e500:	f7f2 fd6c 	bl	8000fdc <_ZnwjPv>
 800e504:	4603      	mov	r3, r0
 800e506:	4621      	mov	r1, r4
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fb fb7d 	bl	8009c08 <_ZN12If_statementC1ERKS_>
    }
 800e50e:	bf00      	nop
 800e510:	3714      	adds	r7, #20
 800e512:	46bd      	mov	sp, r7
 800e514:	bd90      	pop	{r4, r7, pc}

0800e516 <_ZSt7forwardIRKP9StatementEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e516:	b480      	push	{r7}
 800e518:	b083      	sub	sp, #12
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	4618      	mov	r0, r3
 800e522:	370c      	adds	r7, #12
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr

0800e52c <_ZN9__gnu_cxx13new_allocatorIP9StatementE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800e52c:	b590      	push	{r4, r7, lr}
 800e52e:	b085      	sub	sp, #20
 800e530:	af00      	add	r7, sp, #0
 800e532:	60f8      	str	r0, [r7, #12]
 800e534:	60b9      	str	r1, [r7, #8]
 800e536:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f7ff ffec 	bl	800e516 <_ZSt7forwardIRKP9StatementEOT_RNSt16remove_referenceIS4_E4typeE>
 800e53e:	4603      	mov	r3, r0
 800e540:	681c      	ldr	r4, [r3, #0]
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	4619      	mov	r1, r3
 800e546:	2004      	movs	r0, #4
 800e548:	f7f2 fd48 	bl	8000fdc <_ZnwjPv>
 800e54c:	4603      	mov	r3, r0
 800e54e:	601c      	str	r4, [r3, #0]
 800e550:	bf00      	nop
 800e552:	3714      	adds	r7, #20
 800e554:	46bd      	mov	sp, r7
 800e556:	bd90      	pop	{r4, r7, pc}

0800e558 <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800e558:	b590      	push	{r4, r7, lr}
 800e55a:	b087      	sub	sp, #28
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800e564:	68f8      	ldr	r0, [r7, #12]
 800e566:	f000 fe01 	bl	800f16c <_ZNKSt6vectorIP9StatementSaIS1_EE8max_sizeEv>
 800e56a:	4604      	mov	r4, r0
 800e56c:	68f8      	ldr	r0, [r7, #12]
 800e56e:	f7fd fbbf 	bl	800bcf0 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800e572:	4603      	mov	r3, r0
 800e574:	1ae2      	subs	r2, r4, r3
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	429a      	cmp	r2, r3
 800e57a:	bf34      	ite	cc
 800e57c:	2301      	movcc	r3, #1
 800e57e:	2300      	movcs	r3, #0
 800e580:	b2db      	uxtb	r3, r3
 800e582:	2b00      	cmp	r3, #0
 800e584:	d002      	beq.n	800e58c <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f00b f8a5 	bl	80196d6 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f7fd fbaf 	bl	800bcf0 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800e592:	4604      	mov	r4, r0
 800e594:	68f8      	ldr	r0, [r7, #12]
 800e596:	f7fd fbab 	bl	800bcf0 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800e59a:	4603      	mov	r3, r0
 800e59c:	613b      	str	r3, [r7, #16]
 800e59e:	f107 0208 	add.w	r2, r7, #8
 800e5a2:	f107 0310 	add.w	r3, r7, #16
 800e5a6:	4611      	mov	r1, r2
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f000 fa88 	bl	800eabe <_ZSt3maxIjERKT_S2_S2_>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4423      	add	r3, r4
 800e5b4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800e5b6:	68f8      	ldr	r0, [r7, #12]
 800e5b8:	f7fd fb9a 	bl	800bcf0 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d306      	bcc.n	800e5d2 <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800e5c4:	68f8      	ldr	r0, [r7, #12]
 800e5c6:	f000 fdd1 	bl	800f16c <_ZNKSt6vectorIP9StatementSaIS1_EE8max_sizeEv>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d904      	bls.n	800e5dc <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc+0x84>
 800e5d2:	68f8      	ldr	r0, [r7, #12]
 800e5d4:	f000 fdca 	bl	800f16c <_ZNKSt6vectorIP9StatementSaIS1_EE8max_sizeEv>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	e000      	b.n	800e5de <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc+0x86>
 800e5dc:	697b      	ldr	r3, [r7, #20]
      }
 800e5de:	4618      	mov	r0, r3
 800e5e0:	371c      	adds	r7, #28
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd90      	pop	{r4, r7, pc}

0800e5e6 <_ZN9__gnu_cxxmiIPP9StatementSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e5e6:	b590      	push	{r4, r7, lr}
 800e5e8:	b083      	sub	sp, #12
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
 800e5ee:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f000 f821 	bl	800e638 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	681c      	ldr	r4, [r3, #0]
 800e5fa:	6838      	ldr	r0, [r7, #0]
 800e5fc:	f000 f81c 	bl	800e638 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800e600:	4603      	mov	r3, r0
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	1ae3      	subs	r3, r4, r3
 800e606:	109b      	asrs	r3, r3, #2
 800e608:	4618      	mov	r0, r3
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd90      	pop	{r4, r7, pc}

0800e610 <_ZNSt6vectorIP9StatementSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800e610:	b590      	push	{r4, r7, lr}
 800e612:	b089      	sub	sp, #36	; 0x24
 800e614:	af02      	add	r7, sp, #8
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
 800e61c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800e61e:	f88d 4000 	strb.w	r4, [sp]
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	68b9      	ldr	r1, [r7, #8]
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f000 fdb0 	bl	800f18e <_ZNSt6vectorIP9StatementSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800e62e:	4603      	mov	r3, r0
      }
 800e630:	4618      	mov	r0, r3
 800e632:	371c      	adds	r7, #28
 800e634:	46bd      	mov	sp, r7
 800e636:	bd90      	pop	{r4, r7, pc}

0800e638 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800e638:	b480      	push	{r7}
 800e63a:	b083      	sub	sp, #12
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4618      	mov	r0, r3
 800e644:	370c      	adds	r7, #12
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	4770      	bx	lr

0800e64e <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e64e:	b480      	push	{r7}
 800e650:	b083      	sub	sp, #12
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4618      	mov	r0, r3
 800e65a:	370c      	adds	r7, #12
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr

0800e664 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKS9_St17integral_constantIjLj0EEEESD_St14__invoke_otherOSF_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800e664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e668:	b084      	sub	sp, #16
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	7338      	strb	r0, [r7, #12]
 800e66e:	60b9      	str	r1, [r7, #8]
 800e670:	607a      	str	r2, [r7, #4]
 800e672:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800e674:	68b8      	ldr	r0, [r7, #8]
 800e676:	f7fe fd1b 	bl	800d0b0 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800e67a:	4604      	mov	r4, r0
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f7fa fc28 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800e682:	4605      	mov	r5, r0
 800e684:	6838      	ldr	r0, [r7, #0]
 800e686:	f7ff ffe2 	bl	800e64e <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e68a:	4632      	mov	r2, r6
 800e68c:	4629      	mov	r1, r5
 800e68e:	4620      	mov	r0, r4
 800e690:	f000 fd8f 	bl	800f1b2 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESC_SD_>
 800e694:	4643      	mov	r3, r8
 800e696:	4618      	mov	r0, r3
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e6a0 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e6a0:	b480      	push	{r7}
 800e6a2:	b083      	sub	sp, #12
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	370c      	adds	r7, #12
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr

0800e6b6 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKiSt17integral_constantIjLj1EEEESD_St14__invoke_otherOSF_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800e6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	7338      	strb	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	607a      	str	r2, [r7, #4]
 800e6c4:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800e6c6:	68b8      	ldr	r0, [r7, #8]
 800e6c8:	f7fe fcf2 	bl	800d0b0 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800e6cc:	4604      	mov	r4, r0
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f7fa fc21 	bl	8008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800e6d4:	4605      	mov	r5, r0
 800e6d6:	6838      	ldr	r0, [r7, #0]
 800e6d8:	f7ff ffe2 	bl	800e6a0 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e6dc:	4632      	mov	r2, r6
 800e6de:	4629      	mov	r1, r5
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	f000 fdea 	bl	800f2ba <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESC_SD_>
 800e6e6:	4643      	mov	r3, r8
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3710      	adds	r7, #16
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e6f2 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e6f2:	b480      	push	{r7}
 800e6f4:	b083      	sub	sp, #12
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKfSt17integral_constantIjLj2EEEESD_St14__invoke_otherOSF_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800e708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e70c:	b084      	sub	sp, #16
 800e70e:	af00      	add	r7, sp, #0
 800e710:	7338      	strb	r0, [r7, #12]
 800e712:	60b9      	str	r1, [r7, #8]
 800e714:	607a      	str	r2, [r7, #4]
 800e716:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800e718:	68b8      	ldr	r0, [r7, #8]
 800e71a:	f7fe fcc9 	bl	800d0b0 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800e71e:	4604      	mov	r4, r0
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f7fa fc1a 	bl	8008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800e726:	4605      	mov	r5, r0
 800e728:	6838      	ldr	r0, [r7, #0]
 800e72a:	f7ff ffe2 	bl	800e6f2 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e72e:	4632      	mov	r2, r6
 800e730:	4629      	mov	r1, r5
 800e732:	4620      	mov	r0, r4
 800e734:	f000 fe10 	bl	800f358 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESC_SD_>
 800e738:	4643      	mov	r3, r8
 800e73a:	4618      	mov	r0, r3
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e744 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	4618      	mov	r0, r3
 800e750:	370c      	adds	r7, #12
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr

0800e75a <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKbSt17integral_constantIjLj3EEEESD_St14__invoke_otherOSF_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800e75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
 800e762:	7338      	strb	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	607a      	str	r2, [r7, #4]
 800e768:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800e76a:	68b8      	ldr	r0, [r7, #8]
 800e76c:	f7fe fca0 	bl	800d0b0 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800e770:	4604      	mov	r4, r0
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f7fa fc13 	bl	8008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 800e778:	4605      	mov	r5, r0
 800e77a:	6838      	ldr	r0, [r7, #0]
 800e77c:	f7ff ffe2 	bl	800e744 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e780:	4632      	mov	r2, r6
 800e782:	4629      	mov	r1, r5
 800e784:	4620      	mov	r0, r4
 800e786:	f000 fe36 	bl	800f3f6 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESC_SD_>
 800e78a:	4643      	mov	r3, r8
 800e78c:	4618      	mov	r0, r3
 800e78e:	3710      	adds	r7, #16
 800e790:	46bd      	mov	sp, r7
 800e792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e796 <_ZN9__gnu_cxx13new_allocatorIP9StatementE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800e796:	b580      	push	{r7, lr}
 800e798:	b084      	sub	sp, #16
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	60f8      	str	r0, [r7, #12]
 800e79e:	60b9      	str	r1, [r7, #8]
 800e7a0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800e7a2:	68b8      	ldr	r0, [r7, #8]
 800e7a4:	f00a fec5 	bl	8019532 <_ZdlPv>
      }
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}

0800e7ae <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9StatementEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800e7ae:	b480      	push	{r7}
 800e7b0:	b083      	sub	sp, #12
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
 800e7b6:	6039      	str	r1, [r7, #0]
 800e7b8:	bf00      	nop
 800e7ba:	370c      	adds	r7, #12
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <_ZNSt16allocator_traitsISaIP14And_expressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	6839      	ldr	r1, [r7, #0]
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 fe5f 	bl	800f496 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE8allocateEjPKv>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <_ZSt12__niter_baseIPKP14And_expressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b082      	sub	sp, #8
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800e7ea:	1d3b      	adds	r3, r7, #4
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f000 fe71 	bl	800f4d4 <_ZNK9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}

0800e7fe <_ZSt12__niter_baseIPP14And_expressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800e7fe:	b580      	push	{r7, lr}
 800e800:	b082      	sub	sp, #8
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800e806:	1d3b      	adds	r3, r7, #4
 800e808:	4618      	mov	r0, r3
 800e80a:	f7f4 f8d8 	bl	80029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800e80e:	4603      	mov	r3, r0
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	4618      	mov	r0, r3
 800e814:	3708      	adds	r7, #8
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <_ZSt13__copy_move_aILb0EPKP14And_expressionPS1_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b086      	sub	sp, #24
 800e81e:	af00      	add	r7, sp, #0
 800e820:	60f8      	str	r0, [r7, #12]
 800e822:	60b9      	str	r1, [r7, #8]
 800e824:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800e826:	2301      	movs	r3, #1
 800e828:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	68b9      	ldr	r1, [r7, #8]
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	f000 fe5b 	bl	800f4ea <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP14And_expressionEEPT_PKS5_S8_S6_>
 800e834:	4603      	mov	r3, r0
    }
 800e836:	4618      	mov	r0, r3
 800e838:	3718      	adds	r7, #24
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 800e83e:	b580      	push	{r7, lr}
 800e840:	b082      	sub	sp, #8
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
 800e846:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7ff ffd8 	bl	800e7fe <_ZSt12__niter_baseIPP14And_expressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800e84e:	4602      	mov	r2, r0
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	1a9b      	subs	r3, r3, r2
 800e854:	109b      	asrs	r3, r3, #2
 800e856:	461a      	mov	r2, r3
 800e858:	1d3b      	adds	r3, r7, #4
 800e85a:	4611      	mov	r1, r2
 800e85c:	4618      	mov	r0, r3
 800e85e:	f000 fe61 	bl	800f524 <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEplEi>
 800e862:	4603      	mov	r3, r0
 800e864:	4618      	mov	r0, r3
 800e866:	3708      	adds	r7, #8
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS5_SaIS5_EEEEEEvT_SB_>:
 800e86c:	b480      	push	{r7}
 800e86e:	b083      	sub	sp, #12
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
 800e876:	bf00      	nop
 800e878:	370c      	adds	r7, #12
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr

0800e882 <_ZSt12__niter_baseIPP14And_expressionET_S3_>:
    __niter_base(_Iterator __it)
 800e882:	b480      	push	{r7}
 800e884:	b083      	sub	sp, #12
 800e886:	af00      	add	r7, sp, #0
 800e888:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4618      	mov	r0, r3
 800e88e:	370c      	adds	r7, #12
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr

0800e898 <_ZSt13__copy_move_aILb0EPP14And_expressionS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800e898:	b580      	push	{r7, lr}
 800e89a:	b086      	sub	sp, #24
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	60b9      	str	r1, [r7, #8]
 800e8a2:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	68b9      	ldr	r1, [r7, #8]
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	f000 fe1c 	bl	800f4ea <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP14And_expressionEEPT_PKS5_S8_S6_>
 800e8b2:	4603      	mov	r3, r0
    }
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3718      	adds	r7, #24
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <_ZSt12__niter_wrapIPP14And_expressionET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
    { return __res; }
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP14And_expressionS4_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b084      	sub	sp, #16
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	68b9      	ldr	r1, [r7, #8]
 800e8e4:	68f8      	ldr	r0, [r7, #12]
 800e8e6:	f7fd f9a7 	bl	800bc38 <_ZSt4copyIPP14And_expressionS2_ET0_T_S4_S3_>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <_ZNSt16allocator_traitsISaIP9StatementEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e8fe:	2200      	movs	r2, #0
 800e900:	6839      	ldr	r1, [r7, #0]
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f000 fe26 	bl	800f554 <_ZN9__gnu_cxx13new_allocatorIP9StatementE8allocateEjPKv>
 800e908:	4603      	mov	r3, r0
 800e90a:	4618      	mov	r0, r3
 800e90c:	3708      	adds	r7, #8
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <_ZSt12__niter_baseIPKP9StatementSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800e912:	b580      	push	{r7, lr}
 800e914:	b082      	sub	sp, #8
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800e91a:	1d3b      	adds	r3, r7, #4
 800e91c:	4618      	mov	r0, r3
 800e91e:	f000 fe38 	bl	800f592 <_ZNK9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800e922:	4603      	mov	r3, r0
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	4618      	mov	r0, r3
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}

0800e92e <_ZSt12__niter_baseIPP9StatementSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800e92e:	b580      	push	{r7, lr}
 800e930:	b082      	sub	sp, #8
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800e936:	1d3b      	adds	r3, r7, #4
 800e938:	4618      	mov	r0, r3
 800e93a:	f7ff fe7d 	bl	800e638 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800e93e:	4603      	mov	r3, r0
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4618      	mov	r0, r3
 800e944:	3708      	adds	r7, #8
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <_ZSt13__copy_move_aILb0EPKP9StatementPS1_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b086      	sub	sp, #24
 800e94e:	af00      	add	r7, sp, #0
 800e950:	60f8      	str	r0, [r7, #12]
 800e952:	60b9      	str	r1, [r7, #8]
 800e954:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800e956:	2301      	movs	r3, #1
 800e958:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800e95a:	687a      	ldr	r2, [r7, #4]
 800e95c:	68b9      	ldr	r1, [r7, #8]
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	f000 fe22 	bl	800f5a8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP9StatementEEPT_PKS5_S8_S6_>
 800e964:	4603      	mov	r3, r0
    }
 800e966:	4618      	mov	r0, r3
 800e968:	3718      	adds	r7, #24
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}

0800e96e <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 800e96e:	b580      	push	{r7, lr}
 800e970:	b082      	sub	sp, #8
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
 800e976:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f7ff ffd8 	bl	800e92e <_ZSt12__niter_baseIPP9StatementSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800e97e:	4602      	mov	r2, r0
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	1a9b      	subs	r3, r3, r2
 800e984:	109b      	asrs	r3, r3, #2
 800e986:	461a      	mov	r2, r3
 800e988:	1d3b      	adds	r3, r7, #4
 800e98a:	4611      	mov	r1, r2
 800e98c:	4618      	mov	r0, r3
 800e98e:	f000 fe28 	bl	800f5e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEplEi>
 800e992:	4603      	mov	r3, r0
 800e994:	4618      	mov	r0, r3
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS5_SaIS5_EEEEEEvT_SB_>:
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
 800e9a6:	bf00      	nop
 800e9a8:	370c      	adds	r7, #12
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr

0800e9b2 <_ZSt12__niter_baseIPP9StatementET_S3_>:
    __niter_base(_Iterator __it)
 800e9b2:	b480      	push	{r7}
 800e9b4:	b083      	sub	sp, #12
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	4618      	mov	r0, r3
 800e9be:	370c      	adds	r7, #12
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr

0800e9c8 <_ZSt13__copy_move_aILb0EPP9StatementS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b086      	sub	sp, #24
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	68b9      	ldr	r1, [r7, #8]
 800e9dc:	68f8      	ldr	r0, [r7, #12]
 800e9de:	f000 fde3 	bl	800f5a8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP9StatementEEPT_PKS5_S8_S6_>
 800e9e2:	4603      	mov	r3, r0
    }
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3718      	adds	r7, #24
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <_ZSt12__niter_wrapIPP9StatementET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
    { return __res; }
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP9StatementS4_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	68b9      	ldr	r1, [r7, #8]
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f7fd fa16 	bl	800be46 <_ZSt4copyIPP9StatementS2_ET0_T_S4_S3_>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3710      	adds	r7, #16
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <_ZNSaIP14And_expressionEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b082      	sub	sp, #8
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800ea2e:	6839      	ldr	r1, [r7, #0]
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f000 fdee 	bl	800f612 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionEC1ERKS3_>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	68b9      	ldr	r1, [r7, #8]
 800ea50:	68f8      	ldr	r0, [r7, #12]
 800ea52:	f000 fdea 	bl	800f62a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800ea56:	4603      	mov	r3, r0
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <_ZNSaIP9StatementEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800ea6a:	6839      	ldr	r1, [r7, #0]
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f000 fdf4 	bl	800f65a <_ZN9__gnu_cxx13new_allocatorIP9StatementEC1ERKS3_>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	4618      	mov	r0, r3
 800ea76:	3708      	adds	r7, #8
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	60b9      	str	r1, [r7, #8]
 800ea86:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	68b9      	ldr	r1, [r7, #8]
 800ea8c:	68f8      	ldr	r0, [r7, #12]
 800ea8e:	f000 fdf0 	bl	800f672 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800ea92:	4603      	mov	r3, r0
 800ea94:	4618      	mov	r0, r3
 800ea96:	3710      	adds	r7, #16
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <_ZNKSt6vectorIP10ExpressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7fd fc68 	bl	800c37c <_ZNKSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800eaac:	4603      	mov	r3, r0
 800eaae:	4618      	mov	r0, r3
 800eab0:	f000 fdf7 	bl	800f6a2 <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_max_sizeERKS2_>
 800eab4:	4603      	mov	r3, r0
 800eab6:	4618      	mov	r0, r3
 800eab8:	3708      	adds	r7, #8
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800eabe:	b480      	push	{r7}
 800eac0:	b083      	sub	sp, #12
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
 800eac6:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d201      	bcs.n	800ead8 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	e000      	b.n	800eada <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800ead8:	687b      	ldr	r3, [r7, #4]
    }
 800eada:	4618      	mov	r0, r3
 800eadc:	370c      	adds	r7, #12
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr

0800eae6 <_ZNSt16allocator_traitsISaIP10ExpressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b082      	sub	sp, #8
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
 800eaee:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	6839      	ldr	r1, [r7, #0]
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f000 fdee 	bl	800f6d6 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE8allocateEjPKv>
 800eafa:	4603      	mov	r3, r0
 800eafc:	4618      	mov	r0, r3
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <_ZNSt6vectorIP10ExpressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
 800eb10:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	687a      	ldr	r2, [r7, #4]
 800eb16:	68b9      	ldr	r1, [r7, #8]
 800eb18:	68f8      	ldr	r0, [r7, #12]
 800eb1a:	f000 fdfb 	bl	800f714 <_ZSt12__relocate_aIPP10ExpressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 800eb1e:	4603      	mov	r3, r0
      }
 800eb20:	4618      	mov	r0, r3
 800eb22:	3710      	adds	r7, #16
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <_ZNKSt6vectorIP4BodySaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7fd fc98 	bl	800c468 <_ZNKSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f000 fe07 	bl	800f74e <_ZNSt6vectorIP4BodySaIS1_EE11_S_max_sizeERKS2_>
 800eb40:	4603      	mov	r3, r0
 800eb42:	4618      	mov	r0, r3
 800eb44:	3708      	adds	r7, #8
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <_ZNSt16allocator_traitsISaIP4BodyEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b082      	sub	sp, #8
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
 800eb52:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800eb54:	2200      	movs	r2, #0
 800eb56:	6839      	ldr	r1, [r7, #0]
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f000 fe12 	bl	800f782 <_ZN9__gnu_cxx13new_allocatorIP4BodyE8allocateEjPKv>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	4618      	mov	r0, r3
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <_ZNSt6vectorIP4BodySaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	607a      	str	r2, [r7, #4]
 800eb74:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	68b9      	ldr	r1, [r7, #8]
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f000 fe1f 	bl	800f7c0 <_ZSt12__relocate_aIPP4BodyS2_SaIS1_EET0_T_S5_S4_RT1_>
 800eb82:	4603      	mov	r3, r0
      }
 800eb84:	4618      	mov	r0, r3
 800eb86:	3710      	adds	r7, #16
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800eb98:	68b8      	ldr	r0, [r7, #8]
 800eb9a:	f00a fcca 	bl	8019532 <_ZdlPv>
      }
 800eb9e:	3710      	adds	r7, #16
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10ExpressionEEvT_S5_>:
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
 800ebae:	bf00      	nop
 800ebb0:	370c      	adds	r7, #12
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr

0800ebba <_ZN9__gnu_cxx13new_allocatorIP4BodyE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800ebba:	b580      	push	{r7, lr}
 800ebbc:	b084      	sub	sp, #16
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	60f8      	str	r0, [r7, #12]
 800ebc2:	60b9      	str	r1, [r7, #8]
 800ebc4:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800ebc6:	68b8      	ldr	r0, [r7, #8]
 800ebc8:	f00a fcb3 	bl	8019532 <_ZdlPv>
      }
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP4BodyEEvT_S5_>:
 800ebd2:	b480      	push	{r7}
 800ebd4:	b083      	sub	sp, #12
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
 800ebda:	6039      	str	r1, [r7, #0]
 800ebdc:	bf00      	nop
 800ebde:	370c      	adds	r7, #12
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr

0800ebe8 <_ZNSaIP10ExpressionEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800ebf2:	6839      	ldr	r1, [r7, #0]
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f000 fe00 	bl	800f7fa <_ZN9__gnu_cxx13new_allocatorIP10ExpressionEC1ERKS3_>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3708      	adds	r7, #8
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	68b9      	ldr	r1, [r7, #8]
 800ec14:	68f8      	ldr	r0, [r7, #12]
 800ec16:	f000 fdfc 	bl	800f812 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3710      	adds	r7, #16
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <_ZNSaIP4BodyEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800ec2e:	6839      	ldr	r1, [r7, #0]
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f000 fe06 	bl	800f842 <_ZN9__gnu_cxx13new_allocatorIP4BodyEC1ERKS3_>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	60f8      	str	r0, [r7, #12]
 800ec48:	60b9      	str	r1, [r7, #8]
 800ec4a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	68b9      	ldr	r1, [r7, #8]
 800ec50:	68f8      	ldr	r0, [r7, #12]
 800ec52:	f000 fe02 	bl	800f85a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800ec56:	4603      	mov	r3, r0
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3710      	adds	r7, #16
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ec60:	b590      	push	{r4, r7, lr}
 800ec62:	b085      	sub	sp, #20
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7fe ff65 	bl	800db3c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800ec72:	4603      	mov	r3, r0
 800ec74:	681c      	ldr	r4, [r3, #0]
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	4619      	mov	r1, r3
 800ec7a:	2004      	movs	r0, #4
 800ec7c:	f7f2 f9ae 	bl	8000fdc <_ZnwjPv>
 800ec80:	4603      	mov	r3, r0
 800ec82:	601c      	str	r4, [r3, #0]
 800ec84:	bf00      	nop
 800ec86:	3714      	adds	r7, #20
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd90      	pop	{r4, r7, pc}

0800ec8c <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b084      	sub	sp, #16
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	009b      	lsls	r3, r3, #2
 800ec9e:	425b      	negs	r3, r3
 800eca0:	4413      	add	r3, r2
 800eca2:	60fb      	str	r3, [r7, #12]
 800eca4:	f107 020c 	add.w	r2, r7, #12
 800eca8:	f107 0308 	add.w	r3, r7, #8
 800ecac:	4611      	mov	r1, r2
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fe fc98 	bl	800d5e4 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3710      	adds	r7, #16
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ecbe:	b480      	push	{r7}
 800ecc0:	b083      	sub	sp, #12
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4618      	mov	r0, r3
 800eccc:	370c      	adds	r7, #12
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr

0800ecd6 <_ZN9__gnu_cxx16__aligned_membufI13Function_callE6_M_ptrEv>:
      _M_ptr() noexcept
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b082      	sub	sp, #8
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 fdd3 	bl	800f88a <_ZN9__gnu_cxx16__aligned_membufI13Function_callE7_M_addrEv>
 800ece4:	4603      	mov	r3, r0
 800ece6:	4618      	mov	r0, r3
 800ece8:	3708      	adds	r7, #8
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}

0800ecee <_ZNSt6vectorIP10ExpressionSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800ecee:	b590      	push	{r4, r7, lr}
 800ecf0:	b085      	sub	sp, #20
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
 800ecf6:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	685a      	ldr	r2, [r3, #4]
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	1ad3      	subs	r3, r2, r3
 800ed00:	109b      	asrs	r3, r3, #2
 800ed02:	60fb      	str	r3, [r7, #12]
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00e      	beq.n	800ed28 <_ZNSt6vectorIP10ExpressionSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7fd faa5 	bl	800c260 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800ed16:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800ed18:	461a      	mov	r2, r3
 800ed1a:	4621      	mov	r1, r4
 800ed1c:	6838      	ldr	r0, [r7, #0]
 800ed1e:	f7fd faaa 	bl	800c276 <_ZSt8_DestroyIPP10ExpressionS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	683a      	ldr	r2, [r7, #0]
 800ed26:	605a      	str	r2, [r3, #4]
      }
 800ed28:	bf00      	nop
 800ed2a:	3714      	adds	r7, #20
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd90      	pop	{r4, r7, pc}

0800ed30 <_ZSt18__do_alloc_on_copyISaIP10ExpressionEEvRT_RKS3_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 800ed30:	b480      	push	{r7}
 800ed32:	b085      	sub	sp, #20
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	713a      	strb	r2, [r7, #4]
    { }
 800ed3c:	bf00      	nop
 800ed3e:	3714      	adds	r7, #20
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr

0800ed48 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEET_SA_>:
    __miter_base(_Iterator __it)
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4618      	mov	r0, r3
 800ed54:	370c      	adds	r7, #12
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr

0800ed5e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800ed5e:	b5b0      	push	{r4, r5, r7, lr}
 800ed60:	b084      	sub	sp, #16
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	60f8      	str	r0, [r7, #12]
 800ed66:	60b9      	str	r1, [r7, #8]
 800ed68:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f000 fd98 	bl	800f8a0 <_ZSt12__niter_baseIPKP10ExpressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 800ed70:	4604      	mov	r4, r0
 800ed72:	68b8      	ldr	r0, [r7, #8]
 800ed74:	f000 fd94 	bl	800f8a0 <_ZSt12__niter_baseIPKP10ExpressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 800ed78:	4605      	mov	r5, r0
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 fd9e 	bl	800f8bc <_ZSt12__niter_baseIPP10ExpressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800ed80:	4603      	mov	r3, r0
 800ed82:	461a      	mov	r2, r3
 800ed84:	4629      	mov	r1, r5
 800ed86:	4620      	mov	r0, r4
 800ed88:	f000 fda6 	bl	800f8d8 <_ZSt13__copy_move_aILb0EPKP10ExpressionPS1_ET1_T0_S6_S5_>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	4619      	mov	r1, r3
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f000 fdb3 	bl	800f8fc <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 800ed96:	4603      	mov	r3, r0
    }
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bdb0      	pop	{r4, r5, r7, pc}

0800eda0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS3_SaIS3_EEEEEvT_S9_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800edaa:	6839      	ldr	r1, [r7, #0]
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f000 fdbc 	bl	800f92a <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS5_SaIS5_EEEEEEvT_SB_>
    }
 800edb2:	bf00      	nop
 800edb4:	3708      	adds	r7, #8
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <_ZSt12__miter_baseIPP10ExpressionET_S3_>:
    __miter_base(_Iterator __it)
 800edba:	b480      	push	{r7}
 800edbc:	b083      	sub	sp, #12
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
    { return __it; }
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	4618      	mov	r0, r3
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <_ZSt14__copy_move_a2ILb0EPP10ExpressionS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800edd0:	b5b0      	push	{r4, r5, r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	f000 fdaf 	bl	800f940 <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 800ede2:	4604      	mov	r4, r0
 800ede4:	68b8      	ldr	r0, [r7, #8]
 800ede6:	f000 fdab 	bl	800f940 <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 800edea:	4605      	mov	r5, r0
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	4618      	mov	r0, r3
 800edf0:	f000 fda6 	bl	800f940 <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 800edf4:	4603      	mov	r3, r0
 800edf6:	461a      	mov	r2, r3
 800edf8:	4629      	mov	r1, r5
 800edfa:	4620      	mov	r0, r4
 800edfc:	f000 fdab 	bl	800f956 <_ZSt13__copy_move_aILb0EPP10ExpressionS2_ET1_T0_S4_S3_>
 800ee00:	4602      	mov	r2, r0
 800ee02:	1d3b      	adds	r3, r7, #4
 800ee04:	4611      	mov	r1, r2
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 fdb7 	bl	800f97a <_ZSt12__niter_wrapIPP10ExpressionET_RKS3_S3_>
 800ee0c:	4603      	mov	r3, r0
    }
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3710      	adds	r7, #16
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bdb0      	pop	{r4, r5, r7, pc}

0800ee16 <_ZSt18uninitialized_copyIPP10ExpressionS2_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b086      	sub	sp, #24
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	60f8      	str	r0, [r7, #12]
 800ee1e:	60b9      	str	r1, [r7, #8]
 800ee20:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800ee22:	2301      	movs	r3, #1
 800ee24:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	68b9      	ldr	r1, [r7, #8]
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	f000 fdb1 	bl	800f992 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP10ExpressionS4_EET0_T_S6_S5_>
 800ee30:	4603      	mov	r3, r0
    }
 800ee32:	4618      	mov	r0, r3
 800ee34:	3718      	adds	r7, #24
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}

0800ee3a <_ZSt9addressofI13Function_callEPT_RS1_>:
    addressof(_Tp& __r) noexcept
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b082      	sub	sp, #8
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f000 fdb5 	bl	800f9b2 <_ZSt11__addressofI13Function_callEPT_RS1_>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3708      	adds	r7, #8
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <_ZN9__gnu_cxx16__aligned_membufI10AssignmentE6_M_ptrEv>:
      _M_ptr() noexcept
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b082      	sub	sp, #8
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f000 fdb4 	bl	800f9c8 <_ZN9__gnu_cxx16__aligned_membufI10AssignmentE7_M_addrEv>
 800ee60:	4603      	mov	r3, r0
 800ee62:	4618      	mov	r0, r3
 800ee64:	3708      	adds	r7, #8
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}

0800ee6a <_ZSt9addressofI10AssignmentEPT_RS1_>:
    addressof(_Tp& __r) noexcept
 800ee6a:	b580      	push	{r7, lr}
 800ee6c:	b082      	sub	sp, #8
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 fdb3 	bl	800f9de <_ZSt11__addressofI10AssignmentEPT_RS1_>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ee82:	b480      	push	{r7}
 800ee84:	b083      	sub	sp, #12
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	370c      	adds	r7, #12
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS3_EENSt15__invoke_resultIS8_JDpT0_EE4typeES9_DpOSD_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800ee98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee9a:	b083      	sub	sp, #12
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f000 f876 	bl	800ef94 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800eea8:	4604      	mov	r4, r0
 800eeaa:	6838      	ldr	r0, [r7, #0]
 800eeac:	f000 fda2 	bl	800f9f4 <_ZSt7forwardIR10AssignmentEOT_RNSt16remove_referenceIS2_E4typeE>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	4621      	mov	r1, r4
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	f000 fda7 	bl	800fa0a <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS4_EES9_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 800eebc:	4633      	mov	r3, r6
    }
 800eebe:	4618      	mov	r0, r3
 800eec0:	370c      	adds	r7, #12
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eec6 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JNS1_16__variant_cookieEEENSt15__invoke_resultIS8_JDpT0_EE4typeES9_DpOSD_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800eec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eec8:	b083      	sub	sp, #12
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
 800eece:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f000 f85f 	bl	800ef94 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800eed6:	4604      	mov	r4, r0
 800eed8:	6838      	ldr	r0, [r7, #0]
 800eeda:	f000 f93c 	bl	800f156 <_ZSt7forwardINSt8__detail9__variant16__variant_cookieEEOT_RNSt16remove_referenceIS3_E4typeE>
 800eede:	4603      	mov	r3, r0
 800eee0:	461a      	mov	r2, r3
 800eee2:	4621      	mov	r1, r4
 800eee4:	4628      	mov	r0, r5
 800eee6:	f000 fda7 	bl	800fa38 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JS2_EES9_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 800eeea:	4633      	mov	r3, r6
    }
 800eeec:	4618      	mov	r0, r3
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eef4 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS4_EENSt15__invoke_resultIS8_JDpT0_EE4typeES9_DpOSD_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800eef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eef6:	b083      	sub	sp, #12
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f000 f848 	bl	800ef94 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800ef04:	4604      	mov	r4, r0
 800ef06:	6838      	ldr	r0, [r7, #0]
 800ef08:	f000 fdad 	bl	800fa66 <_ZSt7forwardIR13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	461a      	mov	r2, r3
 800ef10:	4621      	mov	r1, r4
 800ef12:	4628      	mov	r0, r5
 800ef14:	f000 fdb2 	bl	800fa7c <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS5_EES9_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 800ef18:	4633      	mov	r3, r6
    }
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	370c      	adds	r7, #12
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef22 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS5_EENSt15__invoke_resultIS8_JDpT0_EE4typeES9_DpOSD_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800ef22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef24:	b083      	sub	sp, #12
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]
 800ef2a:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f000 f831 	bl	800ef94 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800ef32:	4604      	mov	r4, r0
 800ef34:	6838      	ldr	r0, [r7, #0]
 800ef36:	f000 fdb8 	bl	800faaa <_ZSt7forwardIR15While_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	4621      	mov	r1, r4
 800ef40:	4628      	mov	r0, r5
 800ef42:	f000 fdbd 	bl	800fac0 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS6_EES9_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 800ef46:	4633      	mov	r3, r6
    }
 800ef48:	4618      	mov	r0, r3
 800ef4a:	370c      	adds	r7, #12
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef50 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS6_EENSt15__invoke_resultIS8_JDpT0_EE4typeES9_DpOSD_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800ef50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef52:	b083      	sub	sp, #12
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 f81a 	bl	800ef94 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800ef60:	4604      	mov	r4, r0
 800ef62:	6838      	ldr	r0, [r7, #0]
 800ef64:	f000 fdc3 	bl	800faee <_ZSt7forwardIR12If_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	4621      	mov	r1, r4
 800ef6e:	4628      	mov	r0, r5
 800ef70:	f000 fdc8 	bl	800fb04 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS7_EES9_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 800ef74:	4633      	mov	r3, r6
    }
 800ef76:	4618      	mov	r0, r3
 800ef78:	370c      	adds	r7, #12
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef7e <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_RSt7variantIJS4_S5_S6_S7_EEEJEE9_M_accessEv>:
      _M_access() const
 800ef7e:	b480      	push	{r7}
 800ef80:	b083      	sub	sp, #12
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	370c      	adds	r7, #12
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr

0800ef94 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	370c      	adds	r7, #12
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr

0800efaa <_ZN9__gnu_cxx16__aligned_membufI15While_statementE6_M_ptrEv>:
      _M_ptr() noexcept
 800efaa:	b580      	push	{r7, lr}
 800efac:	b082      	sub	sp, #8
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 fdbd 	bl	800fb32 <_ZN9__gnu_cxx16__aligned_membufI15While_statementE7_M_addrEv>
 800efb8:	4603      	mov	r3, r0
 800efba:	4618      	mov	r0, r3
 800efbc:	3708      	adds	r7, #8
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <_ZSt9addressofI15While_statementEPT_RS1_>:
    addressof(_Tp& __r) noexcept
 800efc2:	b580      	push	{r7, lr}
 800efc4:	b082      	sub	sp, #8
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f000 fdbc 	bl	800fb48 <_ZSt11__addressofI15While_statementEPT_RS1_>
 800efd0:	4603      	mov	r3, r0
 800efd2:	4618      	mov	r0, r3
 800efd4:	3708      	adds	r7, #8
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}

0800efda <_ZN9__gnu_cxx16__aligned_membufI12If_statementE6_M_ptrEv>:
      _M_ptr() noexcept
 800efda:	b580      	push	{r7, lr}
 800efdc:	b082      	sub	sp, #8
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 fdbb 	bl	800fb5e <_ZN9__gnu_cxx16__aligned_membufI12If_statementE7_M_addrEv>
 800efe8:	4603      	mov	r3, r0
 800efea:	4618      	mov	r0, r3
 800efec:	3708      	adds	r7, #8
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}

0800eff2 <_ZNSt6vectorIP4BodySaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800eff2:	b590      	push	{r4, r7, lr}
 800eff4:	b085      	sub	sp, #20
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	6078      	str	r0, [r7, #4]
 800effa:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	685a      	ldr	r2, [r3, #4]
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	1ad3      	subs	r3, r2, r3
 800f004:	109b      	asrs	r3, r3, #2
 800f006:	60fb      	str	r3, [r7, #12]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d00e      	beq.n	800f02c <_ZNSt6vectorIP4BodySaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	4618      	mov	r0, r3
 800f016:	f7fd f97a 	bl	800c30e <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800f01a:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800f01c:	461a      	mov	r2, r3
 800f01e:	4621      	mov	r1, r4
 800f020:	6838      	ldr	r0, [r7, #0]
 800f022:	f7fd f97f 	bl	800c324 <_ZSt8_DestroyIPP4BodyS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	683a      	ldr	r2, [r7, #0]
 800f02a:	605a      	str	r2, [r3, #4]
      }
 800f02c:	bf00      	nop
 800f02e:	3714      	adds	r7, #20
 800f030:	46bd      	mov	sp, r7
 800f032:	bd90      	pop	{r4, r7, pc}

0800f034 <_ZSt18__do_alloc_on_copyISaIP4BodyEEvRT_RKS3_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	713a      	strb	r2, [r7, #4]
    { }
 800f040:	bf00      	nop
 800f042:	3714      	adds	r7, #20
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr

0800f04c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEEET_SA_>:
    __miter_base(_Iterator __it)
 800f04c:	b480      	push	{r7}
 800f04e:	b083      	sub	sp, #12
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	4618      	mov	r0, r3
 800f058:	370c      	adds	r7, #12
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800f062:	b5b0      	push	{r4, r5, r7, lr}
 800f064:	b084      	sub	sp, #16
 800f066:	af00      	add	r7, sp, #0
 800f068:	60f8      	str	r0, [r7, #12]
 800f06a:	60b9      	str	r1, [r7, #8]
 800f06c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f06e:	68f8      	ldr	r0, [r7, #12]
 800f070:	f000 fd80 	bl	800fb74 <_ZSt12__niter_baseIPKP4BodySt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 800f074:	4604      	mov	r4, r0
 800f076:	68b8      	ldr	r0, [r7, #8]
 800f078:	f000 fd7c 	bl	800fb74 <_ZSt12__niter_baseIPKP4BodySt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 800f07c:	4605      	mov	r5, r0
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f000 fd86 	bl	800fb90 <_ZSt12__niter_baseIPP4BodySt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f084:	4603      	mov	r3, r0
 800f086:	461a      	mov	r2, r3
 800f088:	4629      	mov	r1, r5
 800f08a:	4620      	mov	r0, r4
 800f08c:	f000 fd8e 	bl	800fbac <_ZSt13__copy_move_aILb0EPKP4BodyPS1_ET1_T0_S6_S5_>
 800f090:	4603      	mov	r3, r0
 800f092:	4619      	mov	r1, r3
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f000 fd9b 	bl	800fbd0 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 800f09a:	4603      	mov	r3, r0
    }
 800f09c:	4618      	mov	r0, r3
 800f09e:	3710      	adds	r7, #16
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bdb0      	pop	{r4, r5, r7, pc}

0800f0a4 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS3_SaIS3_EEEEEvT_S9_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800f0ae:	6839      	ldr	r1, [r7, #0]
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 fda4 	bl	800fbfe <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS5_SaIS5_EEEEEEvT_SB_>
    }
 800f0b6:	bf00      	nop
 800f0b8:	3708      	adds	r7, #8
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <_ZSt12__miter_baseIPP4BodyET_S3_>:
    __miter_base(_Iterator __it)
 800f0be:	b480      	push	{r7}
 800f0c0:	b083      	sub	sp, #12
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	370c      	adds	r7, #12
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr

0800f0d4 <_ZSt14__copy_move_a2ILb0EPP4BodyS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800f0d4:	b5b0      	push	{r4, r5, r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f0e0:	68f8      	ldr	r0, [r7, #12]
 800f0e2:	f000 fd97 	bl	800fc14 <_ZSt12__niter_baseIPP4BodyET_S3_>
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	68b8      	ldr	r0, [r7, #8]
 800f0ea:	f000 fd93 	bl	800fc14 <_ZSt12__niter_baseIPP4BodyET_S3_>
 800f0ee:	4605      	mov	r5, r0
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f000 fd8e 	bl	800fc14 <_ZSt12__niter_baseIPP4BodyET_S3_>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	4629      	mov	r1, r5
 800f0fe:	4620      	mov	r0, r4
 800f100:	f000 fd93 	bl	800fc2a <_ZSt13__copy_move_aILb0EPP4BodyS2_ET1_T0_S4_S3_>
 800f104:	4602      	mov	r2, r0
 800f106:	1d3b      	adds	r3, r7, #4
 800f108:	4611      	mov	r1, r2
 800f10a:	4618      	mov	r0, r3
 800f10c:	f000 fd9f 	bl	800fc4e <_ZSt12__niter_wrapIPP4BodyET_RKS3_S3_>
 800f110:	4603      	mov	r3, r0
    }
 800f112:	4618      	mov	r0, r3
 800f114:	3710      	adds	r7, #16
 800f116:	46bd      	mov	sp, r7
 800f118:	bdb0      	pop	{r4, r5, r7, pc}

0800f11a <_ZSt18uninitialized_copyIPP4BodyS2_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800f11a:	b580      	push	{r7, lr}
 800f11c:	b086      	sub	sp, #24
 800f11e:	af00      	add	r7, sp, #0
 800f120:	60f8      	str	r0, [r7, #12]
 800f122:	60b9      	str	r1, [r7, #8]
 800f124:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800f126:	2301      	movs	r3, #1
 800f128:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	68b9      	ldr	r1, [r7, #8]
 800f12e:	68f8      	ldr	r0, [r7, #12]
 800f130:	f000 fd99 	bl	800fc66 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP4BodyS4_EET0_T_S6_S5_>
 800f134:	4603      	mov	r3, r0
    }
 800f136:	4618      	mov	r0, r3
 800f138:	3718      	adds	r7, #24
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <_ZSt9addressofI12If_statementEPT_RS1_>:
    addressof(_Tp& __r) noexcept
 800f13e:	b580      	push	{r7, lr}
 800f140:	b082      	sub	sp, #8
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 fd9d 	bl	800fc86 <_ZSt11__addressofI12If_statementEPT_RS1_>
 800f14c:	4603      	mov	r3, r0
 800f14e:	4618      	mov	r0, r3
 800f150:	3708      	adds	r7, #8
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}

0800f156 <_ZSt7forwardINSt8__detail9__variant16__variant_cookieEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f156:	b480      	push	{r7}
 800f158:	b083      	sub	sp, #12
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	4618      	mov	r0, r3
 800f162:	370c      	adds	r7, #12
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr

0800f16c <_ZNKSt6vectorIP9StatementSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b082      	sub	sp, #8
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	4618      	mov	r0, r3
 800f178:	f7fc fd87 	bl	800bc8a <_ZNKSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800f17c:	4603      	mov	r3, r0
 800f17e:	4618      	mov	r0, r3
 800f180:	f000 fd8c 	bl	800fc9c <_ZNSt6vectorIP9StatementSaIS1_EE11_S_max_sizeERKS2_>
 800f184:	4603      	mov	r3, r0
 800f186:	4618      	mov	r0, r3
 800f188:	3708      	adds	r7, #8
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}

0800f18e <_ZNSt6vectorIP9StatementSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800f18e:	b580      	push	{r7, lr}
 800f190:	b084      	sub	sp, #16
 800f192:	af00      	add	r7, sp, #0
 800f194:	60f8      	str	r0, [r7, #12]
 800f196:	60b9      	str	r1, [r7, #8]
 800f198:	607a      	str	r2, [r7, #4]
 800f19a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	68b9      	ldr	r1, [r7, #8]
 800f1a2:	68f8      	ldr	r0, [r7, #12]
 800f1a4:	f000 fd94 	bl	800fcd0 <_ZSt12__relocate_aIPP9StatementS2_SaIS1_EET0_T_S5_S4_RT1_>
 800f1a8:	4603      	mov	r3, r0
      }
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3710      	adds	r7, #16
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}

0800f1b2 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESC_SD_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f1b2:	b5b0      	push	{r4, r5, r7, lr}
 800f1b4:	b08c      	sub	sp, #48	; 0x30
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	60f8      	str	r0, [r7, #12]
 800f1ba:	60b9      	str	r1, [r7, #8]
 800f1bc:	713a      	strb	r2, [r7, #4]
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800f1c2:	7e1b      	ldrb	r3, [r3, #24]
 800f1c4:	461c      	mov	r4, r3
 800f1c6:	1d3b      	adds	r3, r7, #4
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f000 f82f 	bl	800f22c <_ZNKSt17integral_constantIjLj0EEcvjEv>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	429c      	cmp	r4, r3
 800f1d2:	bf0c      	ite	eq
 800f1d4:	2301      	moveq	r3, #1
 800f1d6:	2300      	movne	r3, #0
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00a      	beq.n	800f1f4 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESC_SD_+0x42>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f000 f82d 	bl	800f242 <_ZNSt8__detail9__variant5__getILj0ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	68b9      	ldr	r1, [r7, #8]
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f00a fb82 	bl	80198f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	    return {};
 800f1f2:	e016      	b.n	800f222 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESC_SD_+0x70>
			= variant<_Types...>(__rhs_mem);
 800f1f4:	f107 0314 	add.w	r3, r7, #20
 800f1f8:	68b9      	ldr	r1, [r7, #8]
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f000 fda9 	bl	800fd52 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IRKS5_vvS5_vEEOT_>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
		      __variant_cast<_Types...>(*this)
 800f204:	4618      	mov	r0, r3
 800f206:	f000 f82d 	bl	800f264 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Copy_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800f20a:	4602      	mov	r2, r0
			= variant<_Types...>(__rhs_mem);
 800f20c:	f107 0314 	add.w	r3, r7, #20
 800f210:	4619      	mov	r1, r3
 800f212:	4610      	mov	r0, r2
 800f214:	f000 f841 	bl	800f29a <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS6_>
 800f218:	f107 0314 	add.w	r3, r7, #20
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7f7 f931 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	    return {};
 800f222:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f224:	4618      	mov	r0, r3
 800f226:	3730      	adds	r7, #48	; 0x30
 800f228:	46bd      	mov	sp, r7
 800f22a:	bdb0      	pop	{r4, r5, r7, pc}

0800f22c <_ZNKSt17integral_constantIjLj0EEcvjEv>:
    struct integral_constant
    {
      static constexpr _Tp                  value = __v;
      typedef _Tp                           value_type;
      typedef integral_constant<_Tp, __v>   type;
      constexpr operator value_type() const noexcept { return value; }
 800f22c:	b480      	push	{r7}
 800f22e:	b083      	sub	sp, #12
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	2300      	movs	r3, #0
 800f236:	4618      	mov	r0, r3
 800f238:	370c      	adds	r7, #12
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr

0800f242 <_ZNSt8__detail9__variant5__getILj0ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800f242:	b590      	push	{r4, r7, lr}
 800f244:	b083      	sub	sp, #12
 800f246:	af00      	add	r7, sp, #0
 800f248:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 fd5d 	bl	800fd0a <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800f250:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800f252:	4619      	mov	r1, r3
 800f254:	4620      	mov	r0, r4
 800f256:	f7f8 fec0 	bl	8007fda <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 800f25a:	4603      	mov	r3, r0
    }
 800f25c:	4618      	mov	r0, r3
 800f25e:	370c      	adds	r7, #12
 800f260:	46bd      	mov	sp, r7
 800f262:	bd90      	pop	{r4, r7, pc}

0800f264 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Copy_assign_baseILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
	    return static_cast<variant<_Types...>&>(__rhs);
 800f26c:	687b      	ldr	r3, [r7, #4]
    }
 800f26e:	4618      	mov	r0, r3
 800f270:	370c      	adds	r7, #12
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr

0800f27a <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_>:
    struct _Variant_base : _Move_assign_alias<_Types...>
 800f27a:	b580      	push	{r7, lr}
 800f27c:	b082      	sub	sp, #8
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
 800f282:	6039      	str	r1, [r7, #0]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	683a      	ldr	r2, [r7, #0]
 800f288:	4611      	mov	r1, r2
 800f28a:	4618      	mov	r0, r3
 800f28c:	f000 ff16 	bl	80100bc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	4618      	mov	r0, r3
 800f294:	3708      	adds	r7, #8
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}

0800f29a <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS6_>:
    class variant
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b082      	sub	sp, #8
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
 800f2a2:	6039      	str	r1, [r7, #0]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	683a      	ldr	r2, [r7, #0]
 800f2a8:	4611      	mov	r1, r2
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7ff ffe5 	bl	800f27a <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3708      	adds	r7, #8
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESC_SD_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f2ba:	b5b0      	push	{r4, r5, r7, lr}
 800f2bc:	b084      	sub	sp, #16
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	60f8      	str	r0, [r7, #12]
 800f2c2:	60b9      	str	r1, [r7, #8]
 800f2c4:	713a      	strb	r2, [r7, #4]
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800f2ca:	7e1b      	ldrb	r3, [r3, #24]
 800f2cc:	461c      	mov	r4, r3
 800f2ce:	1d3b      	adds	r3, r7, #4
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f000 f825 	bl	800f320 <_ZNKSt17integral_constantIjLj1EEcvjEv>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	429c      	cmp	r4, r3
 800f2da:	bf0c      	ite	eq
 800f2dc:	2301      	moveq	r3, #1
 800f2de:	2300      	movne	r3, #0
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d009      	beq.n	800f2fa <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESC_SD_+0x40>
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	681c      	ldr	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f000 f821 	bl	800f336 <_ZNSt8__detail9__variant5__getILj1ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	601c      	str	r4, [r3, #0]
	    return {};
 800f2f8:	e00d      	b.n	800f316 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESC_SD_+0x5c>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 800f2fe:	461c      	mov	r4, r3
 800f300:	1d3b      	adds	r3, r7, #4
 800f302:	4618      	mov	r0, r3
 800f304:	f000 f80c 	bl	800f320 <_ZNKSt17integral_constantIjLj1EEcvjEv>
 800f308:	4603      	mov	r3, r0
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	68ba      	ldr	r2, [r7, #8]
 800f30e:	4619      	mov	r1, r3
 800f310:	4620      	mov	r0, r4
 800f312:	f000 fee9 	bl	80100e8 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIiEEvtRKT_>
	    return {};
 800f316:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f318:	4618      	mov	r0, r3
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bdb0      	pop	{r4, r5, r7, pc}

0800f320 <_ZNKSt17integral_constantIjLj1EEcvjEv>:
 800f320:	b480      	push	{r7}
 800f322:	b083      	sub	sp, #12
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	2301      	movs	r3, #1
 800f32a:	4618      	mov	r0, r3
 800f32c:	370c      	adds	r7, #12
 800f32e:	46bd      	mov	sp, r7
 800f330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f334:	4770      	bx	lr

0800f336 <_ZNSt8__detail9__variant5__getILj1ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800f336:	b590      	push	{r4, r7, lr}
 800f338:	b083      	sub	sp, #12
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f000 fce3 	bl	800fd0a <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800f344:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800f346:	4619      	mov	r1, r3
 800f348:	4620      	mov	r0, r4
 800f34a:	f7f8 fecf 	bl	80080ec <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800f34e:	4603      	mov	r3, r0
    }
 800f350:	4618      	mov	r0, r3
 800f352:	370c      	adds	r7, #12
 800f354:	46bd      	mov	sp, r7
 800f356:	bd90      	pop	{r4, r7, pc}

0800f358 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESC_SD_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f358:	b5b0      	push	{r4, r5, r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	713a      	strb	r2, [r7, #4]
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800f368:	7e1b      	ldrb	r3, [r3, #24]
 800f36a:	461c      	mov	r4, r3
 800f36c:	1d3b      	adds	r3, r7, #4
 800f36e:	4618      	mov	r0, r3
 800f370:	f000 f825 	bl	800f3be <_ZNKSt17integral_constantIjLj2EEcvjEv>
 800f374:	4603      	mov	r3, r0
 800f376:	429c      	cmp	r4, r3
 800f378:	bf0c      	ite	eq
 800f37a:	2301      	moveq	r3, #1
 800f37c:	2300      	movne	r3, #0
 800f37e:	b2db      	uxtb	r3, r3
 800f380:	2b00      	cmp	r3, #0
 800f382:	d009      	beq.n	800f398 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESC_SD_+0x40>
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	681c      	ldr	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800f38c:	4618      	mov	r0, r3
 800f38e:	f000 f821 	bl	800f3d4 <_ZNSt8__detail9__variant5__getILj2ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800f392:	4603      	mov	r3, r0
 800f394:	601c      	str	r4, [r3, #0]
	    return {};
 800f396:	e00d      	b.n	800f3b4 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESC_SD_+0x5c>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 800f39c:	461c      	mov	r4, r3
 800f39e:	1d3b      	adds	r3, r7, #4
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f000 f80c 	bl	800f3be <_ZNKSt17integral_constantIjLj2EEcvjEv>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	68ba      	ldr	r2, [r7, #8]
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	f000 feb1 	bl	8010116 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIfEEvtRKT_>
	    return {};
 800f3b4:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3710      	adds	r7, #16
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bdb0      	pop	{r4, r5, r7, pc}

0800f3be <_ZNKSt17integral_constantIjLj2EEcvjEv>:
 800f3be:	b480      	push	{r7}
 800f3c0:	b083      	sub	sp, #12
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
 800f3c6:	2302      	movs	r3, #2
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	370c      	adds	r7, #12
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr

0800f3d4 <_ZNSt8__detail9__variant5__getILj2ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800f3d4:	b590      	push	{r4, r7, lr}
 800f3d6:	b083      	sub	sp, #12
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f000 fc94 	bl	800fd0a <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800f3e2:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	f7f8 ff1c 	bl	8008224 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800f3ec:	4603      	mov	r3, r0
    }
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	370c      	adds	r7, #12
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd90      	pop	{r4, r7, pc}

0800f3f6 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESC_SD_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f3f6:	b5b0      	push	{r4, r5, r7, lr}
 800f3f8:	b084      	sub	sp, #16
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	60f8      	str	r0, [r7, #12]
 800f3fe:	60b9      	str	r1, [r7, #8]
 800f400:	713a      	strb	r2, [r7, #4]
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800f406:	7e1b      	ldrb	r3, [r3, #24]
 800f408:	461c      	mov	r4, r3
 800f40a:	1d3b      	adds	r3, r7, #4
 800f40c:	4618      	mov	r0, r3
 800f40e:	f000 f826 	bl	800f45e <_ZNKSt17integral_constantIjLj3EEcvjEv>
 800f412:	4603      	mov	r3, r0
 800f414:	429c      	cmp	r4, r3
 800f416:	bf0c      	ite	eq
 800f418:	2301      	moveq	r3, #1
 800f41a:	2300      	movne	r3, #0
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d00a      	beq.n	800f438 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESC_SD_+0x42>
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	781c      	ldrb	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800f42a:	4618      	mov	r0, r3
 800f42c:	f000 f822 	bl	800f474 <_ZNSt8__detail9__variant5__getILj3ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800f430:	4603      	mov	r3, r0
 800f432:	4622      	mov	r2, r4
 800f434:	701a      	strb	r2, [r3, #0]
	    return {};
 800f436:	e00d      	b.n	800f454 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESC_SD_+0x5e>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 800f43c:	461c      	mov	r4, r3
 800f43e:	1d3b      	adds	r3, r7, #4
 800f440:	4618      	mov	r0, r3
 800f442:	f000 f80c 	bl	800f45e <_ZNKSt17integral_constantIjLj3EEcvjEv>
 800f446:	4603      	mov	r3, r0
 800f448:	b29b      	uxth	r3, r3
 800f44a:	68ba      	ldr	r2, [r7, #8]
 800f44c:	4619      	mov	r1, r3
 800f44e:	4620      	mov	r0, r4
 800f450:	f000 fe78 	bl	8010144 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIbEEvtRKT_>
	    return {};
 800f454:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800f456:	4618      	mov	r0, r3
 800f458:	3710      	adds	r7, #16
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bdb0      	pop	{r4, r5, r7, pc}

0800f45e <_ZNKSt17integral_constantIjLj3EEcvjEv>:
 800f45e:	b480      	push	{r7}
 800f460:	b083      	sub	sp, #12
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
 800f466:	2303      	movs	r3, #3
 800f468:	4618      	mov	r0, r3
 800f46a:	370c      	adds	r7, #12
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr

0800f474 <_ZNSt8__detail9__variant5__getILj3ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800f474:	b590      	push	{r4, r7, lr}
 800f476:	b083      	sub	sp, #12
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f000 fc44 	bl	800fd0a <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800f482:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800f484:	4619      	mov	r1, r3
 800f486:	4620      	mov	r0, r4
 800f488:	f7f8 ff7a 	bl	8008380 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800f48c:	4603      	mov	r3, r0
    }
 800f48e:	4618      	mov	r0, r3
 800f490:	370c      	adds	r7, #12
 800f492:	46bd      	mov	sp, r7
 800f494:	bd90      	pop	{r4, r7, pc}

0800f496 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f496:	b580      	push	{r7, lr}
 800f498:	b084      	sub	sp, #16
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	60f8      	str	r0, [r7, #12]
 800f49e:	60b9      	str	r1, [r7, #8]
 800f4a0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800f4a2:	68f8      	ldr	r0, [r7, #12]
 800f4a4:	f000 fe65 	bl	8010172 <_ZNK9__gnu_cxx13new_allocatorIP14And_expressionE8max_sizeEv>
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	bf8c      	ite	hi
 800f4b0:	2301      	movhi	r3, #1
 800f4b2:	2300      	movls	r3, #0
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d001      	beq.n	800f4be <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800f4ba:	f00a f903 	bl	80196c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	009b      	lsls	r3, r3, #2
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f00a f839 	bl	801953a <_Znwj>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	bf00      	nop
      }
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3710      	adds	r7, #16
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <_ZNK9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800f4d4:	b480      	push	{r7}
 800f4d6:	b083      	sub	sp, #12
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	4618      	mov	r0, r3
 800f4e0:	370c      	adds	r7, #12
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr

0800f4ea <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP14And_expressionEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800f4ea:	b580      	push	{r7, lr}
 800f4ec:	b086      	sub	sp, #24
 800f4ee:	af00      	add	r7, sp, #0
 800f4f0:	60f8      	str	r0, [r7, #12]
 800f4f2:	60b9      	str	r1, [r7, #8]
 800f4f4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800f4f6:	68ba      	ldr	r2, [r7, #8]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	1ad3      	subs	r3, r2, r3
 800f4fc:	109b      	asrs	r3, r3, #2
 800f4fe:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d006      	beq.n	800f514 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP14And_expressionEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	461a      	mov	r2, r3
 800f50c:	68f9      	ldr	r1, [r7, #12]
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f00a fbc0 	bl	8019c94 <memmove>
	  return __result + _Num;
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	687a      	ldr	r2, [r7, #4]
 800f51a:	4413      	add	r3, r2
	}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3718      	adds	r7, #24
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	009b      	lsls	r3, r3, #2
 800f536:	4413      	add	r3, r2
 800f538:	60fb      	str	r3, [r7, #12]
 800f53a:	f107 020c 	add.w	r2, r7, #12
 800f53e:	f107 0308 	add.w	r3, r7, #8
 800f542:	4611      	mov	r1, r2
 800f544:	4618      	mov	r0, r3
 800f546:	f7f3 fa2a 	bl	800299e <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	4618      	mov	r0, r3
 800f54e:	3710      	adds	r7, #16
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}

0800f554 <_ZN9__gnu_cxx13new_allocatorIP9StatementE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800f560:	68f8      	ldr	r0, [r7, #12]
 800f562:	f000 fe12 	bl	801018a <_ZNK9__gnu_cxx13new_allocatorIP9StatementE8max_sizeEv>
 800f566:	4602      	mov	r2, r0
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	4293      	cmp	r3, r2
 800f56c:	bf8c      	ite	hi
 800f56e:	2301      	movhi	r3, #1
 800f570:	2300      	movls	r3, #0
 800f572:	b2db      	uxtb	r3, r3
 800f574:	2b00      	cmp	r3, #0
 800f576:	d001      	beq.n	800f57c <_ZN9__gnu_cxx13new_allocatorIP9StatementE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800f578:	f00a f8a4 	bl	80196c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	4618      	mov	r0, r3
 800f582:	f009 ffda 	bl	801953a <_Znwj>
 800f586:	4603      	mov	r3, r0
 800f588:	bf00      	nop
      }
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}

0800f592 <_ZNK9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800f592:	b480      	push	{r7}
 800f594:	b083      	sub	sp, #12
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4618      	mov	r0, r3
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP9StatementEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b086      	sub	sp, #24
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	60f8      	str	r0, [r7, #12]
 800f5b0:	60b9      	str	r1, [r7, #8]
 800f5b2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800f5b4:	68ba      	ldr	r2, [r7, #8]
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	1ad3      	subs	r3, r2, r3
 800f5ba:	109b      	asrs	r3, r3, #2
 800f5bc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d006      	beq.n	800f5d2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP9StatementEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	68f9      	ldr	r1, [r7, #12]
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f00a fb61 	bl	8019c94 <memmove>
	  return __result + _Num;
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	687a      	ldr	r2, [r7, #4]
 800f5d8:	4413      	add	r3, r2
	}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3718      	adds	r7, #24
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}

0800f5e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800f5e2:	b580      	push	{r7, lr}
 800f5e4:	b084      	sub	sp, #16
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	6078      	str	r0, [r7, #4]
 800f5ea:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	009b      	lsls	r3, r3, #2
 800f5f4:	4413      	add	r3, r2
 800f5f6:	60fb      	str	r3, [r7, #12]
 800f5f8:	f107 020c 	add.w	r2, r7, #12
 800f5fc:	f107 0308 	add.w	r3, r7, #8
 800f600:	4611      	mov	r1, r2
 800f602:	4618      	mov	r0, r3
 800f604:	f7fd feac 	bl	800d360 <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	4618      	mov	r0, r3
 800f60c:	3710      	adds	r7, #16
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}

0800f612 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800f612:	b480      	push	{r7}
 800f614:	b083      	sub	sp, #12
 800f616:	af00      	add	r7, sp, #0
 800f618:	6078      	str	r0, [r7, #4]
 800f61a:	6039      	str	r1, [r7, #0]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	4618      	mov	r0, r3
 800f620:	370c      	adds	r7, #12
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr

0800f62a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    copy(_II __first, _II __last, _OI __result)
 800f62a:	b590      	push	{r4, r7, lr}
 800f62c:	b085      	sub	sp, #20
 800f62e:	af00      	add	r7, sp, #0
 800f630:	60f8      	str	r0, [r7, #12]
 800f632:	60b9      	str	r1, [r7, #8]
 800f634:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f7fd fdc8 	bl	800d1cc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEEET_SA_>
 800f63c:	4604      	mov	r4, r0
 800f63e:	68b8      	ldr	r0, [r7, #8]
 800f640:	f7fd fdc4 	bl	800d1cc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEEET_SA_>
 800f644:	4603      	mov	r3, r0
 800f646:	687a      	ldr	r2, [r7, #4]
 800f648:	4619      	mov	r1, r3
 800f64a:	4620      	mov	r0, r4
 800f64c:	f000 fda9 	bl	80101a2 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEEPS3_ET1_T0_SC_SB_>
 800f650:	4603      	mov	r3, r0
    }
 800f652:	4618      	mov	r0, r3
 800f654:	3714      	adds	r7, #20
 800f656:	46bd      	mov	sp, r7
 800f658:	bd90      	pop	{r4, r7, pc}

0800f65a <_ZN9__gnu_cxx13new_allocatorIP9StatementEC1ERKS3_>:
 800f65a:	b480      	push	{r7}
 800f65c:	b083      	sub	sp, #12
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
 800f662:	6039      	str	r1, [r7, #0]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	4618      	mov	r0, r3
 800f668:	370c      	adds	r7, #12
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr

0800f672 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    copy(_II __first, _II __last, _OI __result)
 800f672:	b590      	push	{r4, r7, lr}
 800f674:	b085      	sub	sp, #20
 800f676:	af00      	add	r7, sp, #0
 800f678:	60f8      	str	r0, [r7, #12]
 800f67a:	60b9      	str	r1, [r7, #8]
 800f67c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f7fd fe7e 	bl	800d380 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEEET_SA_>
 800f684:	4604      	mov	r4, r0
 800f686:	68b8      	ldr	r0, [r7, #8]
 800f688:	f7fd fe7a 	bl	800d380 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEEET_SA_>
 800f68c:	4603      	mov	r3, r0
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	4619      	mov	r1, r3
 800f692:	4620      	mov	r0, r4
 800f694:	f000 fda8 	bl	80101e8 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEEPS3_ET1_T0_SC_SB_>
 800f698:	4603      	mov	r3, r0
    }
 800f69a:	4618      	mov	r0, r3
 800f69c:	3714      	adds	r7, #20
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd90      	pop	{r4, r7, pc}

0800f6a2 <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b084      	sub	sp, #16
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800f6aa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f6ae:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f000 fdbc 	bl	801022e <_ZNSt16allocator_traitsISaIP10ExpressionEE8max_sizeERKS2_>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800f6ba:	f107 0208 	add.w	r2, r7, #8
 800f6be:	f107 030c 	add.w	r3, r7, #12
 800f6c2:	4611      	mov	r1, r2
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f000 fdbe 	bl	8010246 <_ZSt3minIjERKT_S2_S2_>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	681b      	ldr	r3, [r3, #0]
      }
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3710      	adds	r7, #16
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b084      	sub	sp, #16
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	60f8      	str	r0, [r7, #12]
 800f6de:	60b9      	str	r1, [r7, #8]
 800f6e0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800f6e2:	68f8      	ldr	r0, [r7, #12]
 800f6e4:	f000 fdc3 	bl	801026e <_ZNK9__gnu_cxx13new_allocatorIP10ExpressionE8max_sizeEv>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	bf8c      	ite	hi
 800f6f0:	2301      	movhi	r3, #1
 800f6f2:	2300      	movls	r3, #0
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d001      	beq.n	800f6fe <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800f6fa:	f009 ffe3 	bl	80196c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	009b      	lsls	r3, r3, #2
 800f702:	4618      	mov	r0, r3
 800f704:	f009 ff19 	bl	801953a <_Znwj>
 800f708:	4603      	mov	r3, r0
 800f70a:	bf00      	nop
      }
 800f70c:	4618      	mov	r0, r3
 800f70e:	3710      	adds	r7, #16
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <_ZSt12__relocate_aIPP10ExpressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800f714:	b5b0      	push	{r4, r5, r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
 800f720:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800f722:	68f8      	ldr	r0, [r7, #12]
 800f724:	f000 f90c 	bl	800f940 <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 800f728:	4604      	mov	r4, r0
 800f72a:	68b8      	ldr	r0, [r7, #8]
 800f72c:	f000 f908 	bl	800f940 <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 800f730:	4605      	mov	r5, r0
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 f904 	bl	800f940 <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 800f738:	4602      	mov	r2, r0
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	4629      	mov	r1, r5
 800f73e:	4620      	mov	r0, r4
 800f740:	f000 fda1 	bl	8010286 <_ZSt14__relocate_a_1IP10ExpressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800f744:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800f746:	4618      	mov	r0, r3
 800f748:	3710      	adds	r7, #16
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bdb0      	pop	{r4, r5, r7, pc}

0800f74e <_ZNSt6vectorIP4BodySaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800f74e:	b580      	push	{r7, lr}
 800f750:	b084      	sub	sp, #16
 800f752:	af00      	add	r7, sp, #0
 800f754:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800f756:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f75a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f000 fdb0 	bl	80102c2 <_ZNSt16allocator_traitsISaIP4BodyEE8max_sizeERKS2_>
 800f762:	4603      	mov	r3, r0
 800f764:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800f766:	f107 0208 	add.w	r2, r7, #8
 800f76a:	f107 030c 	add.w	r3, r7, #12
 800f76e:	4611      	mov	r1, r2
 800f770:	4618      	mov	r0, r3
 800f772:	f000 fd68 	bl	8010246 <_ZSt3minIjERKT_S2_S2_>
 800f776:	4603      	mov	r3, r0
 800f778:	681b      	ldr	r3, [r3, #0]
      }
 800f77a:	4618      	mov	r0, r3
 800f77c:	3710      	adds	r7, #16
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}

0800f782 <_ZN9__gnu_cxx13new_allocatorIP4BodyE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f782:	b580      	push	{r7, lr}
 800f784:	b084      	sub	sp, #16
 800f786:	af00      	add	r7, sp, #0
 800f788:	60f8      	str	r0, [r7, #12]
 800f78a:	60b9      	str	r1, [r7, #8]
 800f78c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f000 fda3 	bl	80102da <_ZNK9__gnu_cxx13new_allocatorIP4BodyE8max_sizeEv>
 800f794:	4602      	mov	r2, r0
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	4293      	cmp	r3, r2
 800f79a:	bf8c      	ite	hi
 800f79c:	2301      	movhi	r3, #1
 800f79e:	2300      	movls	r3, #0
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d001      	beq.n	800f7aa <_ZN9__gnu_cxx13new_allocatorIP4BodyE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800f7a6:	f009 ff8d 	bl	80196c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	009b      	lsls	r3, r3, #2
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f009 fec3 	bl	801953a <_Znwj>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	bf00      	nop
      }
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3710      	adds	r7, #16
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <_ZSt12__relocate_aIPP4BodyS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800f7c0:	b5b0      	push	{r4, r5, r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
 800f7cc:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800f7ce:	68f8      	ldr	r0, [r7, #12]
 800f7d0:	f000 fa20 	bl	800fc14 <_ZSt12__niter_baseIPP4BodyET_S3_>
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	68b8      	ldr	r0, [r7, #8]
 800f7d8:	f000 fa1c 	bl	800fc14 <_ZSt12__niter_baseIPP4BodyET_S3_>
 800f7dc:	4605      	mov	r5, r0
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f000 fa18 	bl	800fc14 <_ZSt12__niter_baseIPP4BodyET_S3_>
 800f7e4:	4602      	mov	r2, r0
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	4629      	mov	r1, r5
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	f000 fd81 	bl	80102f2 <_ZSt14__relocate_a_1IP4BodyS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800f7f0:	4603      	mov	r3, r0
    }
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3710      	adds	r7, #16
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bdb0      	pop	{r4, r5, r7, pc}

0800f7fa <_ZN9__gnu_cxx13new_allocatorIP10ExpressionEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800f7fa:	b480      	push	{r7}
 800f7fc:	b083      	sub	sp, #12
 800f7fe:	af00      	add	r7, sp, #0
 800f800:	6078      	str	r0, [r7, #4]
 800f802:	6039      	str	r1, [r7, #0]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	4618      	mov	r0, r3
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr

0800f812 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    copy(_II __first, _II __last, _OI __result)
 800f812:	b590      	push	{r4, r7, lr}
 800f814:	b085      	sub	sp, #20
 800f816:	af00      	add	r7, sp, #0
 800f818:	60f8      	str	r0, [r7, #12]
 800f81a:	60b9      	str	r1, [r7, #8]
 800f81c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f7ff fa92 	bl	800ed48 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEET_SA_>
 800f824:	4604      	mov	r4, r0
 800f826:	68b8      	ldr	r0, [r7, #8]
 800f828:	f7ff fa8e 	bl	800ed48 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEET_SA_>
 800f82c:	4603      	mov	r3, r0
 800f82e:	687a      	ldr	r2, [r7, #4]
 800f830:	4619      	mov	r1, r3
 800f832:	4620      	mov	r0, r4
 800f834:	f000 fd7b 	bl	801032e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_ET1_T0_SC_SB_>
 800f838:	4603      	mov	r3, r0
    }
 800f83a:	4618      	mov	r0, r3
 800f83c:	3714      	adds	r7, #20
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd90      	pop	{r4, r7, pc}

0800f842 <_ZN9__gnu_cxx13new_allocatorIP4BodyEC1ERKS3_>:
 800f842:	b480      	push	{r7}
 800f844:	b083      	sub	sp, #12
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
 800f84a:	6039      	str	r1, [r7, #0]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	4618      	mov	r0, r3
 800f850:	370c      	adds	r7, #12
 800f852:	46bd      	mov	sp, r7
 800f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f858:	4770      	bx	lr

0800f85a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    copy(_II __first, _II __last, _OI __result)
 800f85a:	b590      	push	{r4, r7, lr}
 800f85c:	b085      	sub	sp, #20
 800f85e:	af00      	add	r7, sp, #0
 800f860:	60f8      	str	r0, [r7, #12]
 800f862:	60b9      	str	r1, [r7, #8]
 800f864:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800f866:	68f8      	ldr	r0, [r7, #12]
 800f868:	f7ff fbf0 	bl	800f04c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEEET_SA_>
 800f86c:	4604      	mov	r4, r0
 800f86e:	68b8      	ldr	r0, [r7, #8]
 800f870:	f7ff fbec 	bl	800f04c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEEET_SA_>
 800f874:	4603      	mov	r3, r0
 800f876:	687a      	ldr	r2, [r7, #4]
 800f878:	4619      	mov	r1, r3
 800f87a:	4620      	mov	r0, r4
 800f87c:	f000 fd7a 	bl	8010374 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEEPS3_ET1_T0_SC_SB_>
 800f880:	4603      	mov	r3, r0
    }
 800f882:	4618      	mov	r0, r3
 800f884:	3714      	adds	r7, #20
 800f886:	46bd      	mov	sp, r7
 800f888:	bd90      	pop	{r4, r7, pc}

0800f88a <_ZN9__gnu_cxx16__aligned_membufI13Function_callE7_M_addrEv>:
      _M_addr() noexcept
 800f88a:	b480      	push	{r7}
 800f88c:	b083      	sub	sp, #12
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	4618      	mov	r0, r3
 800f896:	370c      	adds	r7, #12
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr

0800f8a0 <_ZSt12__niter_baseIPKP10ExpressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800f8a8:	1d3b      	adds	r3, r7, #4
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f000 fd85 	bl	80103ba <_ZNK9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}

0800f8bc <_ZSt12__niter_baseIPP10ExpressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800f8c4:	1d3b      	adds	r3, r7, #4
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7fd ff30 	bl	800d72c <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3708      	adds	r7, #8
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <_ZSt13__copy_move_aILb0EPKP10ExpressionPS1_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b086      	sub	sp, #24
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800f8e8:	687a      	ldr	r2, [r7, #4]
 800f8ea:	68b9      	ldr	r1, [r7, #8]
 800f8ec:	68f8      	ldr	r0, [r7, #12]
 800f8ee:	f000 fd6f 	bl	80103d0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP10ExpressionEEPT_PKS5_S8_S6_>
 800f8f2:	4603      	mov	r3, r0
    }
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3718      	adds	r7, #24
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7ff ffd8 	bl	800f8bc <_ZSt12__niter_baseIPP10ExpressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f90c:	4602      	mov	r2, r0
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	1a9b      	subs	r3, r3, r2
 800f912:	109b      	asrs	r3, r3, #2
 800f914:	461a      	mov	r2, r3
 800f916:	1d3b      	adds	r3, r7, #4
 800f918:	4611      	mov	r1, r2
 800f91a:	4618      	mov	r0, r3
 800f91c:	f000 fd75 	bl	801040a <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEplEi>
 800f920:	4603      	mov	r3, r0
 800f922:	4618      	mov	r0, r3
 800f924:	3708      	adds	r7, #8
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}

0800f92a <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS5_SaIS5_EEEEEEvT_SB_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800f92a:	b480      	push	{r7}
 800f92c:	b083      	sub	sp, #12
 800f92e:	af00      	add	r7, sp, #0
 800f930:	6078      	str	r0, [r7, #4]
 800f932:	6039      	str	r1, [r7, #0]
 800f934:	bf00      	nop
 800f936:	370c      	adds	r7, #12
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <_ZSt12__niter_baseIPP10ExpressionET_S3_>:
    __niter_base(_Iterator __it)
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	4618      	mov	r0, r3
 800f94c:	370c      	adds	r7, #12
 800f94e:	46bd      	mov	sp, r7
 800f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f954:	4770      	bx	lr

0800f956 <_ZSt13__copy_move_aILb0EPP10ExpressionS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800f956:	b580      	push	{r7, lr}
 800f958:	b086      	sub	sp, #24
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	60f8      	str	r0, [r7, #12]
 800f95e:	60b9      	str	r1, [r7, #8]
 800f960:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800f962:	2301      	movs	r3, #1
 800f964:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	68b9      	ldr	r1, [r7, #8]
 800f96a:	68f8      	ldr	r0, [r7, #12]
 800f96c:	f000 fd30 	bl	80103d0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP10ExpressionEEPT_PKS5_S8_S6_>
 800f970:	4603      	mov	r3, r0
    }
 800f972:	4618      	mov	r0, r3
 800f974:	3718      	adds	r7, #24
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}

0800f97a <_ZSt12__niter_wrapIPP10ExpressionET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800f97a:	b480      	push	{r7}
 800f97c:	b083      	sub	sp, #12
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
 800f982:	6039      	str	r1, [r7, #0]
    { return __res; }
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	4618      	mov	r0, r3
 800f988:	370c      	adds	r7, #12
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr

0800f992 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP10ExpressionS4_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800f992:	b580      	push	{r7, lr}
 800f994:	b084      	sub	sp, #16
 800f996:	af00      	add	r7, sp, #0
 800f998:	60f8      	str	r0, [r7, #12]
 800f99a:	60b9      	str	r1, [r7, #8]
 800f99c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800f99e:	687a      	ldr	r2, [r7, #4]
 800f9a0:	68b9      	ldr	r1, [r7, #8]
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	f7fe fa27 	bl	800ddf6 <_ZSt4copyIPP10ExpressionS2_ET0_T_S4_S3_>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3710      	adds	r7, #16
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}

0800f9b2 <_ZSt11__addressofI13Function_callEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f9b2:	b480      	push	{r7}
 800f9b4:	b083      	sub	sp, #12
 800f9b6:	af00      	add	r7, sp, #0
 800f9b8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4618      	mov	r0, r3
 800f9be:	370c      	adds	r7, #12
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <_ZN9__gnu_cxx16__aligned_membufI10AssignmentE7_M_addrEv>:
      _M_addr() noexcept
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	370c      	adds	r7, #12
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr

0800f9de <_ZSt11__addressofI10AssignmentEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f9de:	b480      	push	{r7}
 800f9e0:	b083      	sub	sp, #12
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <_ZSt7forwardIR10AssignmentEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f9f4:	b480      	push	{r7}
 800f9f6:	b083      	sub	sp, #12
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	370c      	adds	r7, #12
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr

0800fa0a <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS4_EES9_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800fa0a:	b5b0      	push	{r4, r5, r7, lr}
 800fa0c:	b084      	sub	sp, #16
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	7338      	strb	r0, [r7, #12]
 800fa12:	60b9      	str	r1, [r7, #8]
 800fa14:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800fa16:	68b8      	ldr	r0, [r7, #8]
 800fa18:	f7ff fabc 	bl	800ef94 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800fa1c:	4604      	mov	r4, r0
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f7ff ffe8 	bl	800f9f4 <_ZSt7forwardIR10AssignmentEOT_RNSt16remove_referenceIS2_E4typeE>
 800fa24:	4603      	mov	r3, r0
 800fa26:	4619      	mov	r1, r3
 800fa28:	4620      	mov	r0, r4
 800fa2a:	f000 fd06 	bl	801043a <_ZZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvENUlOT_E_clIRS2_EENS0_16__variant_cookieES8_>
 800fa2e:	462b      	mov	r3, r5
 800fa30:	4618      	mov	r0, r3
 800fa32:	3710      	adds	r7, #16
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bdb0      	pop	{r4, r5, r7, pc}

0800fa38 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JS2_EES9_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800fa38:	b5b0      	push	{r4, r5, r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	7338      	strb	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800fa44:	68b8      	ldr	r0, [r7, #8]
 800fa46:	f7ff faa5 	bl	800ef94 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f7ff fb82 	bl	800f156 <_ZSt7forwardINSt8__detail9__variant16__variant_cookieEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fa52:	4603      	mov	r3, r0
 800fa54:	4619      	mov	r1, r3
 800fa56:	4620      	mov	r0, r4
 800fa58:	f000 fd00 	bl	801045c <_ZZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvENUlOT_E_clINS0_16__variant_cookieEEESB_S8_>
 800fa5c:	462b      	mov	r3, r5
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3710      	adds	r7, #16
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bdb0      	pop	{r4, r5, r7, pc}

0800fa66 <_ZSt7forwardIR13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fa66:	b480      	push	{r7}
 800fa68:	b083      	sub	sp, #12
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4618      	mov	r0, r3
 800fa72:	370c      	adds	r7, #12
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr

0800fa7c <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS5_EES9_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800fa7c:	b5b0      	push	{r4, r5, r7, lr}
 800fa7e:	b084      	sub	sp, #16
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	7338      	strb	r0, [r7, #12]
 800fa84:	60b9      	str	r1, [r7, #8]
 800fa86:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800fa88:	68b8      	ldr	r0, [r7, #8]
 800fa8a:	f7ff fa83 	bl	800ef94 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800fa8e:	4604      	mov	r4, r0
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f7ff ffe8 	bl	800fa66 <_ZSt7forwardIR13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800fa96:	4603      	mov	r3, r0
 800fa98:	4619      	mov	r1, r3
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	f000 fce9 	bl	8010472 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvENUlOT_E_clIRS3_EENS0_16__variant_cookieES8_>
 800faa0:	462b      	mov	r3, r5
 800faa2:	4618      	mov	r0, r3
 800faa4:	3710      	adds	r7, #16
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bdb0      	pop	{r4, r5, r7, pc}

0800faaa <_ZSt7forwardIR15While_statementEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800faaa:	b480      	push	{r7}
 800faac:	b083      	sub	sp, #12
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4618      	mov	r0, r3
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS6_EES9_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800fac0:	b5b0      	push	{r4, r5, r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	7338      	strb	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800facc:	68b8      	ldr	r0, [r7, #8]
 800face:	f7ff fa61 	bl	800ef94 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800fad2:	4604      	mov	r4, r0
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7ff ffe8 	bl	800faaa <_ZSt7forwardIR15While_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800fada:	4603      	mov	r3, r0
 800fadc:	4619      	mov	r1, r3
 800fade:	4620      	mov	r0, r4
 800fae0:	f000 fcd8 	bl	8010494 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvENUlOT_E_clIRS4_EENS0_16__variant_cookieES8_>
 800fae4:	462b      	mov	r3, r5
 800fae6:	4618      	mov	r0, r3
 800fae8:	3710      	adds	r7, #16
 800faea:	46bd      	mov	sp, r7
 800faec:	bdb0      	pop	{r4, r5, r7, pc}

0800faee <_ZSt7forwardIR12If_statementEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800faee:	b480      	push	{r7}
 800faf0:	b083      	sub	sp, #12
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	4618      	mov	r0, r3
 800fafa:	370c      	adds	r7, #12
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr

0800fb04 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_JRS7_EES9_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800fb04:	b5b0      	push	{r4, r5, r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	7338      	strb	r0, [r7, #12]
 800fb0c:	60b9      	str	r1, [r7, #8]
 800fb0e:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800fb10:	68b8      	ldr	r0, [r7, #8]
 800fb12:	f7ff fa3f 	bl	800ef94 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvEUlOT_E_ES9_RNSt16remove_referenceIS8_E4typeE>
 800fb16:	4604      	mov	r4, r0
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7ff ffe8 	bl	800faee <_ZSt7forwardIR12If_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	4619      	mov	r1, r3
 800fb22:	4620      	mov	r0, r4
 800fb24:	f000 fcc7 	bl	80104b6 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvENUlOT_E_clIRS5_EENS0_16__variant_cookieES8_>
 800fb28:	462b      	mov	r3, r5
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3710      	adds	r7, #16
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bdb0      	pop	{r4, r5, r7, pc}

0800fb32 <_ZN9__gnu_cxx16__aligned_membufI15While_statementE7_M_addrEv>:
      _M_addr() noexcept
 800fb32:	b480      	push	{r7}
 800fb34:	b083      	sub	sp, #12
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	370c      	adds	r7, #12
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr

0800fb48 <_ZSt11__addressofI15While_statementEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800fb48:	b480      	push	{r7}
 800fb4a:	b083      	sub	sp, #12
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4618      	mov	r0, r3
 800fb54:	370c      	adds	r7, #12
 800fb56:	46bd      	mov	sp, r7
 800fb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5c:	4770      	bx	lr

0800fb5e <_ZN9__gnu_cxx16__aligned_membufI12If_statementE7_M_addrEv>:
      _M_addr() noexcept
 800fb5e:	b480      	push	{r7}
 800fb60:	b083      	sub	sp, #12
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	370c      	adds	r7, #12
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr

0800fb74 <_ZSt12__niter_baseIPKP4BodySt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800fb7c:	1d3b      	adds	r3, r7, #4
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f000 fcaa 	bl	80104d8 <_ZNK9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800fb84:	4603      	mov	r3, r0
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3708      	adds	r7, #8
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <_ZSt12__niter_baseIPP4BodySt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800fb98:	1d3b      	adds	r3, r7, #4
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7fd fe96 	bl	800d8cc <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800fba0:	4603      	mov	r3, r0
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4618      	mov	r0, r3
 800fba6:	3708      	adds	r7, #8
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <_ZSt13__copy_move_aILb0EPKP4BodyPS1_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b086      	sub	sp, #24
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	60b9      	str	r1, [r7, #8]
 800fbb6:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800fbb8:	2301      	movs	r3, #1
 800fbba:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	68b9      	ldr	r1, [r7, #8]
 800fbc0:	68f8      	ldr	r0, [r7, #12]
 800fbc2:	f000 fc94 	bl	80104ee <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP4BodyEEPT_PKS5_S8_S6_>
 800fbc6:	4603      	mov	r3, r0
    }
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3718      	adds	r7, #24
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f7ff ffd8 	bl	800fb90 <_ZSt12__niter_baseIPP4BodySt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800fbe0:	4602      	mov	r2, r0
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	1a9b      	subs	r3, r3, r2
 800fbe6:	109b      	asrs	r3, r3, #2
 800fbe8:	461a      	mov	r2, r3
 800fbea:	1d3b      	adds	r3, r7, #4
 800fbec:	4611      	mov	r1, r2
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f000 fc9a 	bl	8010528 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEplEi>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3708      	adds	r7, #8
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS5_SaIS5_EEEEEEvT_SB_>:
 800fbfe:	b480      	push	{r7}
 800fc00:	b083      	sub	sp, #12
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
 800fc06:	6039      	str	r1, [r7, #0]
 800fc08:	bf00      	nop
 800fc0a:	370c      	adds	r7, #12
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <_ZSt12__niter_baseIPP4BodyET_S3_>:
    __niter_base(_Iterator __it)
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4618      	mov	r0, r3
 800fc20:	370c      	adds	r7, #12
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr

0800fc2a <_ZSt13__copy_move_aILb0EPP4BodyS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800fc2a:	b580      	push	{r7, lr}
 800fc2c:	b086      	sub	sp, #24
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	60f8      	str	r0, [r7, #12]
 800fc32:	60b9      	str	r1, [r7, #8]
 800fc34:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800fc36:	2301      	movs	r3, #1
 800fc38:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800fc3a:	687a      	ldr	r2, [r7, #4]
 800fc3c:	68b9      	ldr	r1, [r7, #8]
 800fc3e:	68f8      	ldr	r0, [r7, #12]
 800fc40:	f000 fc55 	bl	80104ee <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP4BodyEEPT_PKS5_S8_S6_>
 800fc44:	4603      	mov	r3, r0
    }
 800fc46:	4618      	mov	r0, r3
 800fc48:	3718      	adds	r7, #24
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}

0800fc4e <_ZSt12__niter_wrapIPP4BodyET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800fc4e:	b480      	push	{r7}
 800fc50:	b083      	sub	sp, #12
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	6078      	str	r0, [r7, #4]
 800fc56:	6039      	str	r1, [r7, #0]
    { return __res; }
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	370c      	adds	r7, #12
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc64:	4770      	bx	lr

0800fc66 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP4BodyS4_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800fc66:	b580      	push	{r7, lr}
 800fc68:	b084      	sub	sp, #16
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	60f8      	str	r0, [r7, #12]
 800fc6e:	60b9      	str	r1, [r7, #8]
 800fc70:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	68b9      	ldr	r1, [r7, #8]
 800fc76:	68f8      	ldr	r0, [r7, #12]
 800fc78:	f7fe fc02 	bl	800e480 <_ZSt4copyIPP4BodyS2_ET0_T_S4_S3_>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3710      	adds	r7, #16
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}

0800fc86 <_ZSt11__addressofI12If_statementEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800fc86:	b480      	push	{r7}
 800fc88:	b083      	sub	sp, #12
 800fc8a:	af00      	add	r7, sp, #0
 800fc8c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4618      	mov	r0, r3
 800fc92:	370c      	adds	r7, #12
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr

0800fc9c <_ZNSt6vectorIP9StatementSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b084      	sub	sp, #16
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800fca4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800fca8:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f000 fc54 	bl	8010558 <_ZNSt16allocator_traitsISaIP9StatementEE8max_sizeERKS2_>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800fcb4:	f107 0208 	add.w	r2, r7, #8
 800fcb8:	f107 030c 	add.w	r3, r7, #12
 800fcbc:	4611      	mov	r1, r2
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f000 fac1 	bl	8010246 <_ZSt3minIjERKT_S2_S2_>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	681b      	ldr	r3, [r3, #0]
      }
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3710      	adds	r7, #16
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <_ZSt12__relocate_aIPP9StatementS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800fcd0:	b5b0      	push	{r4, r5, r7, lr}
 800fcd2:	b084      	sub	sp, #16
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	607a      	str	r2, [r7, #4]
 800fcdc:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800fcde:	68f8      	ldr	r0, [r7, #12]
 800fce0:	f7fe fe67 	bl	800e9b2 <_ZSt12__niter_baseIPP9StatementET_S3_>
 800fce4:	4604      	mov	r4, r0
 800fce6:	68b8      	ldr	r0, [r7, #8]
 800fce8:	f7fe fe63 	bl	800e9b2 <_ZSt12__niter_baseIPP9StatementET_S3_>
 800fcec:	4605      	mov	r5, r0
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f7fe fe5f 	bl	800e9b2 <_ZSt12__niter_baseIPP9StatementET_S3_>
 800fcf4:	4602      	mov	r2, r0
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	f000 fc38 	bl	8010570 <_ZSt14__relocate_a_1IP9StatementS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800fd00:	4603      	mov	r3, r0
    }
 800fd02:	4618      	mov	r0, r3
 800fd04:	3710      	adds	r7, #16
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bdb0      	pop	{r4, r5, r7, pc}

0800fd0a <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fd0a:	b480      	push	{r7}
 800fd0c:	b083      	sub	sp, #12
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	4618      	mov	r0, r3
 800fd16:	370c      	adds	r7, #12
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr

0800fd20 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS5_ES5_vEESt16in_place_index_tIXT_EEDpOT0_>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
 800fd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd22:	b085      	sub	sp, #20
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	60f8      	str	r0, [r7, #12]
 800fd28:	7239      	strb	r1, [r7, #8]
 800fd2a:	607a      	str	r2, [r7, #4]
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
 800fd2c:	68fc      	ldr	r4, [r7, #12]
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f7f9 f8cf 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800fd34:	4603      	mov	r3, r0
 800fd36:	461a      	mov	r2, r3
 800fd38:	4631      	mov	r1, r6
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f000 fc7a 	bl	8010634 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800fd40:	4629      	mov	r1, r5
 800fd42:	68f8      	ldr	r0, [r7, #12]
 800fd44:	f7f7 fd3f 	bl	80077c6 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>
	{ }
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3714      	adds	r7, #20
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd52 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IRKS5_vvS5_vEEOT_>:
	variant(_Tp&& __t)
 800fd52:	b590      	push	{r4, r7, lr}
 800fd54:	b083      	sub	sp, #12
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	6078      	str	r0, [r7, #4]
 800fd5a:	6039      	str	r1, [r7, #0]
		  std::forward<_Tp>(__t))
 800fd5c:	6838      	ldr	r0, [r7, #0]
 800fd5e:	f7f9 f8b8 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800fd62:	4603      	mov	r3, r0
 800fd64:	461a      	mov	r2, r3
 800fd66:	4621      	mov	r1, r4
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f7ff ffd9 	bl	800fd20 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS5_ES5_vEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4618      	mov	r0, r3
 800fd72:	370c      	adds	r7, #12
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd90      	pop	{r4, r7, pc}

0800fd78 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 800fd78:	b480      	push	{r7}
 800fd7a:	b083      	sub	sp, #12
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
	    return static_cast<variant<_Types...>&>(__rhs);
 800fd80:	687b      	ldr	r3, [r7, #4]
    }
 800fd82:	4618      	mov	r0, r3
 800fd84:	370c      	adds	r7, #12
 800fd86:	46bd      	mov	sp, r7
 800fd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8c:	4770      	bx	lr

0800fd8e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESK_EEDcOSF_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800fd8e:	b580      	push	{r7, lr}
 800fd90:	b082      	sub	sp, #8
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f7f8 ff91 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7f8 f92c 	bl	8007ffc <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800fda4:	4603      	mov	r3, r0
	}
 800fda6:	4618      	mov	r0, r3
 800fda8:	3708      	adds	r7, #8
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}

0800fdae <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESH_SK_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800fdae:	b5b0      	push	{r4, r5, r7, lr}
 800fdb0:	b084      	sub	sp, #16
 800fdb2:	af00      	add	r7, sp, #0
 800fdb4:	6078      	str	r0, [r7, #4]
 800fdb6:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f000 fc50 	bl	801065e <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	6838      	ldr	r0, [r7, #0]
 800fdc2:	f7f8 ff7c 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7ff ffe0 	bl	800fd8e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESK_EEDcOSF_>
 800fdce:	4601      	mov	r1, r0
 800fdd0:	f107 030c 	add.w	r3, r7, #12
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	f000 fc4c 	bl	8010674 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRS8_St17integral_constantIjLj0EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>
	      integral_constant<size_t, __indices>()...);
 800fddc:	462b      	mov	r3, r5
      }
 800fdde:	4618      	mov	r0, r3
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bdb0      	pop	{r4, r5, r7, pc}

0800fde6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESH_SK_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800fde6:	b5b0      	push	{r4, r5, r7, lr}
 800fde8:	b082      	sub	sp, #8
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
 800fdee:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f000 fc34 	bl	801065e <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	6838      	ldr	r0, [r7, #0]
 800fdfa:	f7f8 ff60 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	4619      	mov	r1, r3
 800fe02:	4620      	mov	r0, r4
 800fe04:	f7ff ffd3 	bl	800fdae <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800fe08:	462b      	mov	r3, r5
      }
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3708      	adds	r7, #8
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bdb0      	pop	{r4, r5, r7, pc}

0800fe12 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESH_SK_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800fe12:	b5b0      	push	{r4, r5, r7, lr}
 800fe14:	b082      	sub	sp, #8
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
 800fe1a:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f000 fc1e 	bl	801065e <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800fe22:	4604      	mov	r4, r0
 800fe24:	6838      	ldr	r0, [r7, #0]
 800fe26:	f7f8 ff4a 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	4620      	mov	r0, r4
 800fe30:	f7ff ffd9 	bl	800fde6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800fe34:	462b      	mov	r3, r5
      }
 800fe36:	4618      	mov	r0, r3
 800fe38:	3708      	adds	r7, #8
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bdb0      	pop	{r4, r5, r7, pc}

0800fe3e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESK_EEDcOSF_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800fe3e:	b580      	push	{r7, lr}
 800fe40:	b082      	sub	sp, #8
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f7f8 ff39 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7f8 f95e 	bl	8008110 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800fe54:	4603      	mov	r3, r0
	}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3708      	adds	r7, #8
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}

0800fe5e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESH_SK_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800fe5e:	b5b0      	push	{r4, r5, r7, lr}
 800fe60:	b084      	sub	sp, #16
 800fe62:	af00      	add	r7, sp, #0
 800fe64:	6078      	str	r0, [r7, #4]
 800fe66:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f000 fbf8 	bl	801065e <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800fe6e:	4604      	mov	r4, r0
 800fe70:	6838      	ldr	r0, [r7, #0]
 800fe72:	f7f8 ff24 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800fe76:	4603      	mov	r3, r0
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7ff ffe0 	bl	800fe3e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESK_EEDcOSF_>
 800fe7e:	4601      	mov	r1, r0
 800fe80:	f107 030c 	add.w	r3, r7, #12
 800fe84:	461a      	mov	r2, r3
 800fe86:	4620      	mov	r0, r4
 800fe88:	f000 fc12 	bl	80106b0 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRiSt17integral_constantIjLj1EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>
	      integral_constant<size_t, __indices>()...);
 800fe8c:	462b      	mov	r3, r5
      }
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3710      	adds	r7, #16
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bdb0      	pop	{r4, r5, r7, pc}

0800fe96 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESH_SK_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800fe96:	b5b0      	push	{r4, r5, r7, lr}
 800fe98:	b082      	sub	sp, #8
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
 800fe9e:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f000 fbdc 	bl	801065e <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800fea6:	4604      	mov	r4, r0
 800fea8:	6838      	ldr	r0, [r7, #0]
 800feaa:	f7f8 ff08 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800feae:	4603      	mov	r3, r0
 800feb0:	4619      	mov	r1, r3
 800feb2:	4620      	mov	r0, r4
 800feb4:	f7ff ffd3 	bl	800fe5e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800feb8:	462b      	mov	r3, r5
      }
 800feba:	4618      	mov	r0, r3
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bdb0      	pop	{r4, r5, r7, pc}

0800fec2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESH_SK_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800fec2:	b5b0      	push	{r4, r5, r7, lr}
 800fec4:	b082      	sub	sp, #8
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
 800feca:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 fbc6 	bl	801065e <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800fed2:	4604      	mov	r4, r0
 800fed4:	6838      	ldr	r0, [r7, #0]
 800fed6:	f7f8 fef2 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800feda:	4603      	mov	r3, r0
 800fedc:	4619      	mov	r1, r3
 800fede:	4620      	mov	r0, r4
 800fee0:	f7ff ffd9 	bl	800fe96 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800fee4:	462b      	mov	r3, r5
      }
 800fee6:	4618      	mov	r0, r3
 800fee8:	3708      	adds	r7, #8
 800feea:	46bd      	mov	sp, r7
 800feec:	bdb0      	pop	{r4, r5, r7, pc}

0800feee <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESK_EEDcOSF_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800feee:	b580      	push	{r7, lr}
 800fef0:	b082      	sub	sp, #8
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f7f8 fee1 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800fefc:	4603      	mov	r3, r0
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7f8 f9a2 	bl	8008248 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800ff04:	4603      	mov	r3, r0
	}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESH_SK_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800ff0e:	b5b0      	push	{r4, r5, r7, lr}
 800ff10:	b084      	sub	sp, #16
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
 800ff16:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f000 fba0 	bl	801065e <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800ff1e:	4604      	mov	r4, r0
 800ff20:	6838      	ldr	r0, [r7, #0]
 800ff22:	f7f8 fecc 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800ff26:	4603      	mov	r3, r0
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7ff ffe0 	bl	800feee <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESK_EEDcOSF_>
 800ff2e:	4601      	mov	r1, r0
 800ff30:	f107 030c 	add.w	r3, r7, #12
 800ff34:	461a      	mov	r2, r3
 800ff36:	4620      	mov	r0, r4
 800ff38:	f000 fbd8 	bl	80106ec <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRfSt17integral_constantIjLj2EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>
	      integral_constant<size_t, __indices>()...);
 800ff3c:	462b      	mov	r3, r5
      }
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3710      	adds	r7, #16
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bdb0      	pop	{r4, r5, r7, pc}

0800ff46 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESH_SK_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800ff46:	b5b0      	push	{r4, r5, r7, lr}
 800ff48:	b082      	sub	sp, #8
 800ff4a:	af00      	add	r7, sp, #0
 800ff4c:	6078      	str	r0, [r7, #4]
 800ff4e:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 fb84 	bl	801065e <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800ff56:	4604      	mov	r4, r0
 800ff58:	6838      	ldr	r0, [r7, #0]
 800ff5a:	f7f8 feb0 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	4619      	mov	r1, r3
 800ff62:	4620      	mov	r0, r4
 800ff64:	f7ff ffd3 	bl	800ff0e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800ff68:	462b      	mov	r3, r5
      }
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3708      	adds	r7, #8
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bdb0      	pop	{r4, r5, r7, pc}

0800ff72 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESH_SK_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800ff72:	b5b0      	push	{r4, r5, r7, lr}
 800ff74:	b082      	sub	sp, #8
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]
 800ff7a:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f000 fb6e 	bl	801065e <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800ff82:	4604      	mov	r4, r0
 800ff84:	6838      	ldr	r0, [r7, #0]
 800ff86:	f7f8 fe9a 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f7ff ffd9 	bl	800ff46 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800ff94:	462b      	mov	r3, r5
      }
 800ff96:	4618      	mov	r0, r3
 800ff98:	3708      	adds	r7, #8
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bdb0      	pop	{r4, r5, r7, pc}

0800ff9e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESK_EEDcOSF_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800ff9e:	b580      	push	{r7, lr}
 800ffa0:	b082      	sub	sp, #8
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f7f8 fe89 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800ffac:	4603      	mov	r3, r0
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7f8 f9f8 	bl	80083a4 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800ffb4:	4603      	mov	r3, r0
	}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3708      	adds	r7, #8
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}

0800ffbe <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESH_SK_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800ffbe:	b5b0      	push	{r4, r5, r7, lr}
 800ffc0:	b084      	sub	sp, #16
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
 800ffc6:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f000 fb48 	bl	801065e <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800ffce:	4604      	mov	r4, r0
 800ffd0:	6838      	ldr	r0, [r7, #0]
 800ffd2:	f7f8 fe74 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7ff ffe0 	bl	800ff9e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESK_EEDcOSF_>
 800ffde:	4601      	mov	r1, r0
 800ffe0:	f107 030c 	add.w	r3, r7, #12
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f000 fb9e 	bl	8010728 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRbSt17integral_constantIjLj3EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>
	      integral_constant<size_t, __indices>()...);
 800ffec:	462b      	mov	r3, r5
      }
 800ffee:	4618      	mov	r0, r3
 800fff0:	3710      	adds	r7, #16
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bdb0      	pop	{r4, r5, r7, pc}

0800fff6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESH_SK_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800fff6:	b5b0      	push	{r4, r5, r7, lr}
 800fff8:	b082      	sub	sp, #8
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	6078      	str	r0, [r7, #4]
 800fffe:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f000 fb2c 	bl	801065e <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 8010006:	4604      	mov	r4, r0
 8010008:	6838      	ldr	r0, [r7, #0]
 801000a:	f7f8 fe58 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 801000e:	4603      	mov	r3, r0
 8010010:	4619      	mov	r1, r3
 8010012:	4620      	mov	r0, r4
 8010014:	f7ff ffd3 	bl	800ffbe <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESH_SK_>
				   std::forward<_Variants>(__vars)...);
 8010018:	462b      	mov	r3, r5
      }
 801001a:	4618      	mov	r0, r3
 801001c:	3708      	adds	r7, #8
 801001e:	46bd      	mov	sp, r7
 8010020:	bdb0      	pop	{r4, r5, r7, pc}

08010022 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESH_SK_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8010022:	b5b0      	push	{r4, r5, r7, lr}
 8010024:	b082      	sub	sp, #8
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
 801002a:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f000 fb16 	bl	801065e <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 8010032:	4604      	mov	r4, r0
 8010034:	6838      	ldr	r0, [r7, #0]
 8010036:	f7f8 fe42 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 801003a:	4603      	mov	r3, r0
 801003c:	4619      	mov	r1, r3
 801003e:	4620      	mov	r0, r4
 8010040:	f7ff ffd9 	bl	800fff6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESH_SK_>
				   std::forward<_Variants>(__vars)...);
 8010044:	462b      	mov	r3, r5
      }
 8010046:	4618      	mov	r0, r3
 8010048:	3708      	adds	r7, #8
 801004a:	46bd      	mov	sp, r7
 801004c:	bdb0      	pop	{r4, r5, r7, pc}

0801004e <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_RSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSL_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 801004e:	b580      	push	{r7, lr}
 8010050:	b082      	sub	sp, #8
 8010052:	af00      	add	r7, sp, #0
 8010054:	6078      	str	r0, [r7, #4]
 8010056:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	009b      	lsls	r3, r3, #2
 801005c:	687a      	ldr	r2, [r7, #4]
 801005e:	4413      	add	r3, r2
 8010060:	4618      	mov	r0, r3
 8010062:	f000 fb7f 	bl	8010764 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_RSt7variantIJS9_ifbEEEJEE9_M_accessEv>
 8010066:	4603      	mov	r3, r0
	}
 8010068:	4618      	mov	r0, r3
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}

08010070 <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>:
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 8010070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010072:	b085      	sub	sp, #20
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	6039      	str	r1, [r7, #0]
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 801007a:	4b0f      	ldr	r3, [pc, #60]	; (80100b8 <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_+0x48>)
 801007c:	60fb      	str	r3, [r7, #12]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 801007e:	6838      	ldr	r0, [r7, #0]
 8010080:	f7f7 fee4 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 8010084:	4603      	mov	r3, r0
 8010086:	4619      	mov	r1, r3
 8010088:	68f8      	ldr	r0, [r7, #12]
 801008a:	f7ff ffe0 	bl	801004e <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_RSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSL_jDpT_>
 801008e:	4603      	mov	r3, r0
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 8010094:	68bc      	ldr	r4, [r7, #8]
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 fb6f 	bl	801077a <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 801009c:	4605      	mov	r5, r0
 801009e:	6838      	ldr	r0, [r7, #0]
 80100a0:	f7f8 fe0d 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80100a4:	4603      	mov	r3, r0
 80100a6:	4619      	mov	r1, r3
 80100a8:	4628      	mov	r0, r5
 80100aa:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 80100ac:	4633      	mov	r3, r6
    }
 80100ae:	4618      	mov	r0, r3
 80100b0:	3714      	adds	r7, #20
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100b6:	bf00      	nop
 80100b8:	0801d240 	.word	0x0801d240

080100bc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_>:
      operator=(_Move_assign_base&& __rhs)
 80100bc:	b580      	push	{r7, lr}
 80100be:	b084      	sub	sp, #16
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	60fb      	str	r3, [r7, #12]
 80100ca:	6838      	ldr	r0, [r7, #0]
 80100cc:	f7ff fe54 	bl	800fd78 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 80100d0:	4602      	mov	r2, r0
 80100d2:	f107 030c 	add.w	r3, r7, #12
 80100d6:	4611      	mov	r1, r2
 80100d8:	4618      	mov	r0, r3
 80100da:	f7ff ffc9 	bl	8010070 <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>
	return *this;
 80100de:	687b      	ldr	r3, [r7, #4]
      }
 80100e0:	4618      	mov	r0, r3
 80100e2:	3710      	adds	r7, #16
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIiEEvtRKT_>:
        void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	60f8      	str	r0, [r7, #12]
 80100f0:	460b      	mov	r3, r1
 80100f2:	607a      	str	r2, [r7, #4]
 80100f4:	817b      	strh	r3, [r7, #10]
	  this->_M_reset();
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7f7 fa16 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	  __variant_construct_single(*this, __rhs);
 80100fe:	6879      	ldr	r1, [r7, #4]
 8010100:	68f8      	ldr	r0, [r7, #12]
 8010102:	f000 fb45 	bl	8010790 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKiEEvOT_OT0_>
	  this->_M_index = __rhs_index;
 8010106:	897b      	ldrh	r3, [r7, #10]
 8010108:	b2da      	uxtb	r2, r3
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	761a      	strb	r2, [r3, #24]
	}
 801010e:	bf00      	nop
 8010110:	3710      	adds	r7, #16
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}

08010116 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIfEEvtRKT_>:
        void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 8010116:	b580      	push	{r7, lr}
 8010118:	b084      	sub	sp, #16
 801011a:	af00      	add	r7, sp, #0
 801011c:	60f8      	str	r0, [r7, #12]
 801011e:	460b      	mov	r3, r1
 8010120:	607a      	str	r2, [r7, #4]
 8010122:	817b      	strh	r3, [r7, #10]
	  this->_M_reset();
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	4618      	mov	r0, r3
 8010128:	f7f7 f9ff 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	  __variant_construct_single(*this, __rhs);
 801012c:	6879      	ldr	r1, [r7, #4]
 801012e:	68f8      	ldr	r0, [r7, #12]
 8010130:	f000 fb48 	bl	80107c4 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKfEEvOT_OT0_>
	  this->_M_index = __rhs_index;
 8010134:	897b      	ldrh	r3, [r7, #10]
 8010136:	b2da      	uxtb	r2, r3
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	761a      	strb	r2, [r3, #24]
	}
 801013c:	bf00      	nop
 801013e:	3710      	adds	r7, #16
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIbEEvtRKT_>:
        void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	60f8      	str	r0, [r7, #12]
 801014c:	460b      	mov	r3, r1
 801014e:	607a      	str	r2, [r7, #4]
 8010150:	817b      	strh	r3, [r7, #10]
	  this->_M_reset();
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	4618      	mov	r0, r3
 8010156:	f7f7 f9e8 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	  __variant_construct_single(*this, __rhs);
 801015a:	6879      	ldr	r1, [r7, #4]
 801015c:	68f8      	ldr	r0, [r7, #12]
 801015e:	f000 fb4b 	bl	80107f8 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKbEEvOT_OT0_>
	  this->_M_index = __rhs_index;
 8010162:	897b      	ldrh	r3, [r7, #10]
 8010164:	b2da      	uxtb	r2, r3
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	761a      	strb	r2, [r3, #24]
	}
 801016a:	bf00      	nop
 801016c:	3710      	adds	r7, #16
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <_ZNK9__gnu_cxx13new_allocatorIP14And_expressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8010172:	b480      	push	{r7}
 8010174:	b083      	sub	sp, #12
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801017a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 801017e:	4618      	mov	r0, r3
 8010180:	370c      	adds	r7, #12
 8010182:	46bd      	mov	sp, r7
 8010184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010188:	4770      	bx	lr

0801018a <_ZNK9__gnu_cxx13new_allocatorIP9StatementE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801018a:	b480      	push	{r7}
 801018c:	b083      	sub	sp, #12
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010192:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8010196:	4618      	mov	r0, r3
 8010198:	370c      	adds	r7, #12
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr

080101a2 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP14And_expressionSt6vectorIS3_SaIS3_EEEEPS3_ET1_T0_SC_SB_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80101a2:	b5b0      	push	{r4, r5, r7, lr}
 80101a4:	b084      	sub	sp, #16
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	60f8      	str	r0, [r7, #12]
 80101aa:	60b9      	str	r1, [r7, #8]
 80101ac:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80101ae:	68f8      	ldr	r0, [r7, #12]
 80101b0:	f7fe fb17 	bl	800e7e2 <_ZSt12__niter_baseIPKP14And_expressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 80101b4:	4604      	mov	r4, r0
 80101b6:	68b8      	ldr	r0, [r7, #8]
 80101b8:	f7fe fb13 	bl	800e7e2 <_ZSt12__niter_baseIPKP14And_expressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 80101bc:	4605      	mov	r5, r0
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fe fb5e 	bl	800e882 <_ZSt12__niter_baseIPP14And_expressionET_S3_>
 80101c6:	4603      	mov	r3, r0
 80101c8:	461a      	mov	r2, r3
 80101ca:	4629      	mov	r1, r5
 80101cc:	4620      	mov	r0, r4
 80101ce:	f7fe fb24 	bl	800e81a <_ZSt13__copy_move_aILb0EPKP14And_expressionPS1_ET1_T0_S6_S5_>
 80101d2:	4602      	mov	r2, r0
 80101d4:	1d3b      	adds	r3, r7, #4
 80101d6:	4611      	mov	r1, r2
 80101d8:	4618      	mov	r0, r3
 80101da:	f7fe fb6f 	bl	800e8bc <_ZSt12__niter_wrapIPP14And_expressionET_RKS3_S3_>
 80101de:	4603      	mov	r3, r0
    }
 80101e0:	4618      	mov	r0, r3
 80101e2:	3710      	adds	r7, #16
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bdb0      	pop	{r4, r5, r7, pc}

080101e8 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP9StatementSt6vectorIS3_SaIS3_EEEEPS3_ET1_T0_SC_SB_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80101e8:	b5b0      	push	{r4, r5, r7, lr}
 80101ea:	b084      	sub	sp, #16
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80101f4:	68f8      	ldr	r0, [r7, #12]
 80101f6:	f7fe fb8c 	bl	800e912 <_ZSt12__niter_baseIPKP9StatementSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 80101fa:	4604      	mov	r4, r0
 80101fc:	68b8      	ldr	r0, [r7, #8]
 80101fe:	f7fe fb88 	bl	800e912 <_ZSt12__niter_baseIPKP9StatementSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8010202:	4605      	mov	r5, r0
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	4618      	mov	r0, r3
 8010208:	f7fe fbd3 	bl	800e9b2 <_ZSt12__niter_baseIPP9StatementET_S3_>
 801020c:	4603      	mov	r3, r0
 801020e:	461a      	mov	r2, r3
 8010210:	4629      	mov	r1, r5
 8010212:	4620      	mov	r0, r4
 8010214:	f7fe fb99 	bl	800e94a <_ZSt13__copy_move_aILb0EPKP9StatementPS1_ET1_T0_S6_S5_>
 8010218:	4602      	mov	r2, r0
 801021a:	1d3b      	adds	r3, r7, #4
 801021c:	4611      	mov	r1, r2
 801021e:	4618      	mov	r0, r3
 8010220:	f7fe fbe4 	bl	800e9ec <_ZSt12__niter_wrapIPP9StatementET_RKS3_S3_>
 8010224:	4603      	mov	r3, r0
    }
 8010226:	4618      	mov	r0, r3
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bdb0      	pop	{r4, r5, r7, pc}

0801022e <_ZNSt16allocator_traitsISaIP10ExpressionEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 801022e:	b580      	push	{r7, lr}
 8010230:	b082      	sub	sp, #8
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f000 f819 	bl	801026e <_ZNK9__gnu_cxx13new_allocatorIP10ExpressionE8max_sizeEv>
 801023c:	4603      	mov	r3, r0
 801023e:	4618      	mov	r0, r3
 8010240:	3708      	adds	r7, #8
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}

08010246 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8010246:	b480      	push	{r7}
 8010248:	b083      	sub	sp, #12
 801024a:	af00      	add	r7, sp, #0
 801024c:	6078      	str	r0, [r7, #4]
 801024e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	429a      	cmp	r2, r3
 801025a:	d201      	bcs.n	8010260 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	e000      	b.n	8010262 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8010260:	687b      	ldr	r3, [r7, #4]
    }
 8010262:	4618      	mov	r0, r3
 8010264:	370c      	adds	r7, #12
 8010266:	46bd      	mov	sp, r7
 8010268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026c:	4770      	bx	lr

0801026e <_ZNK9__gnu_cxx13new_allocatorIP10ExpressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801026e:	b480      	push	{r7}
 8010270:	b083      	sub	sp, #12
 8010272:	af00      	add	r7, sp, #0
 8010274:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010276:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 801027a:	4618      	mov	r0, r3
 801027c:	370c      	adds	r7, #12
 801027e:	46bd      	mov	sp, r7
 8010280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010284:	4770      	bx	lr

08010286 <_ZSt14__relocate_a_1IP10ExpressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8010286:	b580      	push	{r7, lr}
 8010288:	b086      	sub	sp, #24
 801028a:	af00      	add	r7, sp, #0
 801028c:	60f8      	str	r0, [r7, #12]
 801028e:	60b9      	str	r1, [r7, #8]
 8010290:	607a      	str	r2, [r7, #4]
 8010292:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8010294:	68ba      	ldr	r2, [r7, #8]
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	1ad3      	subs	r3, r2, r3
 801029a:	109b      	asrs	r3, r3, #2
 801029c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	dd06      	ble.n	80102b2 <_ZSt14__relocate_a_1IP10ExpressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	009b      	lsls	r3, r3, #2
 80102a8:	461a      	mov	r2, r3
 80102aa:	68f9      	ldr	r1, [r7, #12]
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f009 fcf1 	bl	8019c94 <memmove>
      return __result + __count;
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	009b      	lsls	r3, r3, #2
 80102b6:	687a      	ldr	r2, [r7, #4]
 80102b8:	4413      	add	r3, r2
    }
 80102ba:	4618      	mov	r0, r3
 80102bc:	3718      	adds	r7, #24
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}

080102c2 <_ZNSt16allocator_traitsISaIP4BodyEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 80102c2:	b580      	push	{r7, lr}
 80102c4:	b082      	sub	sp, #8
 80102c6:	af00      	add	r7, sp, #0
 80102c8:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f000 f805 	bl	80102da <_ZNK9__gnu_cxx13new_allocatorIP4BodyE8max_sizeEv>
 80102d0:	4603      	mov	r3, r0
 80102d2:	4618      	mov	r0, r3
 80102d4:	3708      	adds	r7, #8
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}

080102da <_ZNK9__gnu_cxx13new_allocatorIP4BodyE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80102da:	b480      	push	{r7}
 80102dc:	b083      	sub	sp, #12
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80102e2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80102e6:	4618      	mov	r0, r3
 80102e8:	370c      	adds	r7, #12
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr

080102f2 <_ZSt14__relocate_a_1IP4BodyS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80102f2:	b580      	push	{r7, lr}
 80102f4:	b086      	sub	sp, #24
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	60f8      	str	r0, [r7, #12]
 80102fa:	60b9      	str	r1, [r7, #8]
 80102fc:	607a      	str	r2, [r7, #4]
 80102fe:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8010300:	68ba      	ldr	r2, [r7, #8]
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	1ad3      	subs	r3, r2, r3
 8010306:	109b      	asrs	r3, r3, #2
 8010308:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	2b00      	cmp	r3, #0
 801030e:	dd06      	ble.n	801031e <_ZSt14__relocate_a_1IP4BodyS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	009b      	lsls	r3, r3, #2
 8010314:	461a      	mov	r2, r3
 8010316:	68f9      	ldr	r1, [r7, #12]
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f009 fcbb 	bl	8019c94 <memmove>
      return __result + __count;
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	009b      	lsls	r3, r3, #2
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	4413      	add	r3, r2
    }
 8010326:	4618      	mov	r0, r3
 8010328:	3718      	adds	r7, #24
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS3_SaIS3_EEEEPS3_ET1_T0_SC_SB_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801032e:	b5b0      	push	{r4, r5, r7, lr}
 8010330:	b084      	sub	sp, #16
 8010332:	af00      	add	r7, sp, #0
 8010334:	60f8      	str	r0, [r7, #12]
 8010336:	60b9      	str	r1, [r7, #8]
 8010338:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801033a:	68f8      	ldr	r0, [r7, #12]
 801033c:	f7ff fab0 	bl	800f8a0 <_ZSt12__niter_baseIPKP10ExpressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8010340:	4604      	mov	r4, r0
 8010342:	68b8      	ldr	r0, [r7, #8]
 8010344:	f7ff faac 	bl	800f8a0 <_ZSt12__niter_baseIPKP10ExpressionSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8010348:	4605      	mov	r5, r0
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	4618      	mov	r0, r3
 801034e:	f7ff faf7 	bl	800f940 <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 8010352:	4603      	mov	r3, r0
 8010354:	461a      	mov	r2, r3
 8010356:	4629      	mov	r1, r5
 8010358:	4620      	mov	r0, r4
 801035a:	f7ff fabd 	bl	800f8d8 <_ZSt13__copy_move_aILb0EPKP10ExpressionPS1_ET1_T0_S6_S5_>
 801035e:	4602      	mov	r2, r0
 8010360:	1d3b      	adds	r3, r7, #4
 8010362:	4611      	mov	r1, r2
 8010364:	4618      	mov	r0, r3
 8010366:	f7ff fb08 	bl	800f97a <_ZSt12__niter_wrapIPP10ExpressionET_RKS3_S3_>
 801036a:	4603      	mov	r3, r0
    }
 801036c:	4618      	mov	r0, r3
 801036e:	3710      	adds	r7, #16
 8010370:	46bd      	mov	sp, r7
 8010372:	bdb0      	pop	{r4, r5, r7, pc}

08010374 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS3_SaIS3_EEEEPS3_ET1_T0_SC_SB_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8010374:	b5b0      	push	{r4, r5, r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	f7ff fbf7 	bl	800fb74 <_ZSt12__niter_baseIPKP4BodySt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8010386:	4604      	mov	r4, r0
 8010388:	68b8      	ldr	r0, [r7, #8]
 801038a:	f7ff fbf3 	bl	800fb74 <_ZSt12__niter_baseIPKP4BodySt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801038e:	4605      	mov	r5, r0
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	4618      	mov	r0, r3
 8010394:	f7ff fc3e 	bl	800fc14 <_ZSt12__niter_baseIPP4BodyET_S3_>
 8010398:	4603      	mov	r3, r0
 801039a:	461a      	mov	r2, r3
 801039c:	4629      	mov	r1, r5
 801039e:	4620      	mov	r0, r4
 80103a0:	f7ff fc04 	bl	800fbac <_ZSt13__copy_move_aILb0EPKP4BodyPS1_ET1_T0_S6_S5_>
 80103a4:	4602      	mov	r2, r0
 80103a6:	1d3b      	adds	r3, r7, #4
 80103a8:	4611      	mov	r1, r2
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7ff fc4f 	bl	800fc4e <_ZSt12__niter_wrapIPP4BodyET_RKS3_S3_>
 80103b0:	4603      	mov	r3, r0
    }
 80103b2:	4618      	mov	r0, r3
 80103b4:	3710      	adds	r7, #16
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bdb0      	pop	{r4, r5, r7, pc}

080103ba <_ZNK9__gnu_cxx17__normal_iteratorIPKP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80103ba:	b480      	push	{r7}
 80103bc:	b083      	sub	sp, #12
 80103be:	af00      	add	r7, sp, #0
 80103c0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4618      	mov	r0, r3
 80103c6:	370c      	adds	r7, #12
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr

080103d0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP10ExpressionEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b086      	sub	sp, #24
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	60f8      	str	r0, [r7, #12]
 80103d8:	60b9      	str	r1, [r7, #8]
 80103da:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80103dc:	68ba      	ldr	r2, [r7, #8]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	1ad3      	subs	r3, r2, r3
 80103e2:	109b      	asrs	r3, r3, #2
 80103e4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d006      	beq.n	80103fa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP10ExpressionEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	009b      	lsls	r3, r3, #2
 80103f0:	461a      	mov	r2, r3
 80103f2:	68f9      	ldr	r1, [r7, #12]
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f009 fc4d 	bl	8019c94 <memmove>
	  return __result + _Num;
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	009b      	lsls	r3, r3, #2
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	4413      	add	r3, r2
	}
 8010402:	4618      	mov	r0, r3
 8010404:	3718      	adds	r7, #24
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}

0801040a <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 801040a:	b580      	push	{r7, lr}
 801040c:	b084      	sub	sp, #16
 801040e:	af00      	add	r7, sp, #0
 8010410:	6078      	str	r0, [r7, #4]
 8010412:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	009b      	lsls	r3, r3, #2
 801041c:	4413      	add	r3, r2
 801041e:	60fb      	str	r3, [r7, #12]
 8010420:	f107 020c 	add.w	r2, r7, #12
 8010424:	f107 0308 	add.w	r3, r7, #8
 8010428:	4611      	mov	r1, r2
 801042a:	4618      	mov	r0, r3
 801042c:	f7fd f8da 	bl	800d5e4 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	4618      	mov	r0, r3
 8010434:	3710      	adds	r7, #16
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}

0801043a <_ZZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvENUlOT_E_clIRS2_EENS0_16__variant_cookieES8_>:
	__do_visit([](auto&& __this_mem) mutable
 801043a:	b590      	push	{r4, r7, lr}
 801043c:	b083      	sub	sp, #12
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
 8010442:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 8010444:	6838      	ldr	r0, [r7, #0]
 8010446:	f7ff faca 	bl	800f9de <_ZSt11__addressofI10AssignmentEPT_RS1_>
 801044a:	4603      	mov	r3, r0
 801044c:	4618      	mov	r0, r3
 801044e:	f000 f9ee 	bl	801082e <_ZSt8_DestroyI10AssignmentEvPT_>
	    return {};
 8010452:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 8010454:	4618      	mov	r0, r3
 8010456:	370c      	adds	r7, #12
 8010458:	46bd      	mov	sp, r7
 801045a:	bd90      	pop	{r4, r7, pc}

0801045c <_ZZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvENUlOT_E_clINS0_16__variant_cookieEEESB_S8_>:
 801045c:	b480      	push	{r7}
 801045e:	b083      	sub	sp, #12
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]
 8010466:	4618      	mov	r0, r3
 8010468:	370c      	adds	r7, #12
 801046a:	46bd      	mov	sp, r7
 801046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010470:	4770      	bx	lr

08010472 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvENUlOT_E_clIRS3_EENS0_16__variant_cookieES8_>:
 8010472:	b590      	push	{r4, r7, lr}
 8010474:	b083      	sub	sp, #12
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
 801047a:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 801047c:	6838      	ldr	r0, [r7, #0]
 801047e:	f7ff fa98 	bl	800f9b2 <_ZSt11__addressofI13Function_callEPT_RS1_>
 8010482:	4603      	mov	r3, r0
 8010484:	4618      	mov	r0, r3
 8010486:	f000 f9dd 	bl	8010844 <_ZSt8_DestroyI13Function_callEvPT_>
	    return {};
 801048a:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 801048c:	4618      	mov	r0, r3
 801048e:	370c      	adds	r7, #12
 8010490:	46bd      	mov	sp, r7
 8010492:	bd90      	pop	{r4, r7, pc}

08010494 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvENUlOT_E_clIRS4_EENS0_16__variant_cookieES8_>:
 8010494:	b590      	push	{r4, r7, lr}
 8010496:	b083      	sub	sp, #12
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 801049e:	6838      	ldr	r0, [r7, #0]
 80104a0:	f7ff fb52 	bl	800fb48 <_ZSt11__addressofI15While_statementEPT_RS1_>
 80104a4:	4603      	mov	r3, r0
 80104a6:	4618      	mov	r0, r3
 80104a8:	f000 f9d7 	bl	801085a <_ZSt8_DestroyI15While_statementEvPT_>
	    return {};
 80104ac:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80104ae:	4618      	mov	r0, r3
 80104b0:	370c      	adds	r7, #12
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd90      	pop	{r4, r7, pc}

080104b6 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE13_M_reset_implEvENUlOT_E_clIRS5_EENS0_16__variant_cookieES8_>:
 80104b6:	b590      	push	{r4, r7, lr}
 80104b8:	b083      	sub	sp, #12
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
 80104be:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80104c0:	6838      	ldr	r0, [r7, #0]
 80104c2:	f7ff fbe0 	bl	800fc86 <_ZSt11__addressofI12If_statementEPT_RS1_>
 80104c6:	4603      	mov	r3, r0
 80104c8:	4618      	mov	r0, r3
 80104ca:	f000 f9d1 	bl	8010870 <_ZSt8_DestroyI12If_statementEvPT_>
	    return {};
 80104ce:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80104d0:	4618      	mov	r0, r3
 80104d2:	370c      	adds	r7, #12
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd90      	pop	{r4, r7, pc}

080104d8 <_ZNK9__gnu_cxx17__normal_iteratorIPKP4BodySt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80104d8:	b480      	push	{r7}
 80104da:	b083      	sub	sp, #12
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4618      	mov	r0, r3
 80104e4:	370c      	adds	r7, #12
 80104e6:	46bd      	mov	sp, r7
 80104e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ec:	4770      	bx	lr

080104ee <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP4BodyEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80104ee:	b580      	push	{r7, lr}
 80104f0:	b086      	sub	sp, #24
 80104f2:	af00      	add	r7, sp, #0
 80104f4:	60f8      	str	r0, [r7, #12]
 80104f6:	60b9      	str	r1, [r7, #8]
 80104f8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80104fa:	68ba      	ldr	r2, [r7, #8]
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	1ad3      	subs	r3, r2, r3
 8010500:	109b      	asrs	r3, r3, #2
 8010502:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d006      	beq.n	8010518 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP4BodyEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	009b      	lsls	r3, r3, #2
 801050e:	461a      	mov	r2, r3
 8010510:	68f9      	ldr	r1, [r7, #12]
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f009 fbbe 	bl	8019c94 <memmove>
	  return __result + _Num;
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	009b      	lsls	r3, r3, #2
 801051c:	687a      	ldr	r2, [r7, #4]
 801051e:	4413      	add	r3, r2
	}
 8010520:	4618      	mov	r0, r3
 8010522:	3718      	adds	r7, #24
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681a      	ldr	r2, [r3, #0]
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	009b      	lsls	r3, r3, #2
 801053a:	4413      	add	r3, r2
 801053c:	60fb      	str	r3, [r7, #12]
 801053e:	f107 020c 	add.w	r2, r7, #12
 8010542:	f107 0308 	add.w	r3, r7, #8
 8010546:	4611      	mov	r1, r2
 8010548:	4618      	mov	r0, r3
 801054a:	f7fd f91b 	bl	800d784 <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	4618      	mov	r0, r3
 8010552:	3710      	adds	r7, #16
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <_ZNSt16allocator_traitsISaIP9StatementEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f7ff fe12 	bl	801018a <_ZNK9__gnu_cxx13new_allocatorIP9StatementE8max_sizeEv>
 8010566:	4603      	mov	r3, r0
 8010568:	4618      	mov	r0, r3
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <_ZSt14__relocate_a_1IP9StatementS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8010570:	b580      	push	{r7, lr}
 8010572:	b086      	sub	sp, #24
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	607a      	str	r2, [r7, #4]
 801057c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801057e:	68ba      	ldr	r2, [r7, #8]
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	1ad3      	subs	r3, r2, r3
 8010584:	109b      	asrs	r3, r3, #2
 8010586:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	2b00      	cmp	r3, #0
 801058c:	dd06      	ble.n	801059c <_ZSt14__relocate_a_1IP9StatementS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	009b      	lsls	r3, r3, #2
 8010592:	461a      	mov	r2, r3
 8010594:	68f9      	ldr	r1, [r7, #12]
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f009 fb7c 	bl	8019c94 <memmove>
      return __result + __count;
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	009b      	lsls	r3, r3, #2
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	4413      	add	r3, r2
    }
 80105a4:	4618      	mov	r0, r3
 80105a6:	3718      	adds	r7, #24
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80105ac:	b590      	push	{r4, r7, lr}
 80105ae:	b085      	sub	sp, #20
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	7239      	strb	r1, [r7, #8]
 80105b6:	607a      	str	r2, [r7, #4]
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	687a      	ldr	r2, [r7, #4]
 80105bc:	4621      	mov	r1, r4
 80105be:	4618      	mov	r0, r3
 80105c0:	f000 f993 	bl	80108ea <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	4618      	mov	r0, r3
 80105c8:	3714      	adds	r7, #20
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd90      	pop	{r4, r7, pc}

080105ce <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80105ce:	b590      	push	{r4, r7, lr}
 80105d0:	b085      	sub	sp, #20
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	60f8      	str	r0, [r7, #12]
 80105d6:	7239      	strb	r1, [r7, #8]
 80105d8:	607a      	str	r2, [r7, #4]
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	4621      	mov	r1, r4
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7ff ffe3 	bl	80105ac <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	4618      	mov	r0, r3
 80105ea:	3714      	adds	r7, #20
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd90      	pop	{r4, r7, pc}

080105f0 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80105f0:	b590      	push	{r4, r7, lr}
 80105f2:	b085      	sub	sp, #20
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	60f8      	str	r0, [r7, #12]
 80105f8:	7239      	strb	r1, [r7, #8]
 80105fa:	607a      	str	r2, [r7, #4]
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	4621      	mov	r1, r4
 8010602:	4618      	mov	r0, r3
 8010604:	f7ff ffe3 	bl	80105ce <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	4618      	mov	r0, r3
 801060c:	3714      	adds	r7, #20
 801060e:	46bd      	mov	sp, r7
 8010610:	bd90      	pop	{r4, r7, pc}

08010612 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8010612:	b590      	push	{r4, r7, lr}
 8010614:	b085      	sub	sp, #20
 8010616:	af00      	add	r7, sp, #0
 8010618:	60f8      	str	r0, [r7, #12]
 801061a:	7239      	strb	r1, [r7, #8]
 801061c:	607a      	str	r2, [r7, #4]
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	687a      	ldr	r2, [r7, #4]
 8010622:	4621      	mov	r1, r4
 8010624:	4618      	mov	r0, r3
 8010626:	f7ff ffe3 	bl	80105f0 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	4618      	mov	r0, r3
 801062e:	3714      	adds	r7, #20
 8010630:	46bd      	mov	sp, r7
 8010632:	bd90      	pop	{r4, r7, pc}

08010634 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8010634:	b5b0      	push	{r4, r5, r7, lr}
 8010636:	b084      	sub	sp, #16
 8010638:	af00      	add	r7, sp, #0
 801063a:	60f8      	str	r0, [r7, #12]
 801063c:	7239      	strb	r1, [r7, #8]
 801063e:	607a      	str	r2, [r7, #4]
	: _Base(__i, std::forward<_Args>(__args)...)
 8010640:	68fc      	ldr	r4, [r7, #12]
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f7f8 fc45 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8010648:	4603      	mov	r3, r0
 801064a:	461a      	mov	r2, r3
 801064c:	4629      	mov	r1, r5
 801064e:	4620      	mov	r0, r4
 8010650:	f7ff ffdf 	bl	8010612 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	4618      	mov	r0, r3
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	bdb0      	pop	{r4, r5, r7, pc}

0801065e <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801065e:	b480      	push	{r7}
 8010660:	b083      	sub	sp, #12
 8010662:	af00      	add	r7, sp, #0
 8010664:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	4618      	mov	r0, r3
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr

08010674 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRS8_St17integral_constantIjLj0EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8010674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010678:	b084      	sub	sp, #16
 801067a:	af00      	add	r7, sp, #0
 801067c:	60f8      	str	r0, [r7, #12]
 801067e:	60b9      	str	r1, [r7, #8]
 8010680:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8010682:	68f8      	ldr	r0, [r7, #12]
 8010684:	f000 f879 	bl	801077a <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 8010688:	4604      	mov	r4, r0
 801068a:	68b8      	ldr	r0, [r7, #8]
 801068c:	f7f4 fdd4 	bl	8005238 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8010690:	4605      	mov	r5, r0
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f7fd ffdb 	bl	800e64e <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010698:	4603      	mov	r3, r0
 801069a:	462a      	mov	r2, r5
 801069c:	4621      	mov	r1, r4
 801069e:	4630      	mov	r0, r6
 80106a0:	f000 f93b 	bl	801091a <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRS9_St17integral_constantIjLj0EEEESC_St14__invoke_otherOSE_DpOT1_>
					std::forward<_Args>(__args)...);
 80106a4:	4643      	mov	r3, r8
    }
 80106a6:	4618      	mov	r0, r3
 80106a8:	3710      	adds	r7, #16
 80106aa:	46bd      	mov	sp, r7
 80106ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080106b0 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRiSt17integral_constantIjLj1EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 80106b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b4:	b084      	sub	sp, #16
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	60f8      	str	r0, [r7, #12]
 80106ba:	60b9      	str	r1, [r7, #8]
 80106bc:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80106be:	68f8      	ldr	r0, [r7, #12]
 80106c0:	f000 f85b 	bl	801077a <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 80106c4:	4604      	mov	r4, r0
 80106c6:	68b8      	ldr	r0, [r7, #8]
 80106c8:	f7f4 fd66 	bl	8005198 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80106cc:	4605      	mov	r5, r0
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f7fd ffe6 	bl	800e6a0 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 80106d4:	4603      	mov	r3, r0
 80106d6:	462a      	mov	r2, r5
 80106d8:	4621      	mov	r1, r4
 80106da:	4630      	mov	r0, r6
 80106dc:	f000 f93b 	bl	8010956 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRiSt17integral_constantIjLj1EEEESC_St14__invoke_otherOSE_DpOT1_>
					std::forward<_Args>(__args)...);
 80106e0:	4643      	mov	r3, r8
    }
 80106e2:	4618      	mov	r0, r3
 80106e4:	3710      	adds	r7, #16
 80106e6:	46bd      	mov	sp, r7
 80106e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080106ec <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRfSt17integral_constantIjLj2EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 80106ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106f0:	b084      	sub	sp, #16
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	60f8      	str	r0, [r7, #12]
 80106f6:	60b9      	str	r1, [r7, #8]
 80106f8:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	f000 f83d 	bl	801077a <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 8010700:	4604      	mov	r4, r0
 8010702:	68b8      	ldr	r0, [r7, #8]
 8010704:	f7f4 fd6a 	bl	80051dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8010708:	4605      	mov	r5, r0
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f7fd fff1 	bl	800e6f2 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010710:	4603      	mov	r3, r0
 8010712:	462a      	mov	r2, r5
 8010714:	4621      	mov	r1, r4
 8010716:	4630      	mov	r0, r6
 8010718:	f000 f93b 	bl	8010992 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRfSt17integral_constantIjLj2EEEESC_St14__invoke_otherOSE_DpOT1_>
					std::forward<_Args>(__args)...);
 801071c:	4643      	mov	r3, r8
    }
 801071e:	4618      	mov	r0, r3
 8010720:	3710      	adds	r7, #16
 8010722:	46bd      	mov	sp, r7
 8010724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010728 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRbSt17integral_constantIjLj3EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8010728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801072c:	b084      	sub	sp, #16
 801072e:	af00      	add	r7, sp, #0
 8010730:	60f8      	str	r0, [r7, #12]
 8010732:	60b9      	str	r1, [r7, #8]
 8010734:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8010736:	68f8      	ldr	r0, [r7, #12]
 8010738:	f000 f81f 	bl	801077a <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 801073c:	4604      	mov	r4, r0
 801073e:	68b8      	ldr	r0, [r7, #8]
 8010740:	f7f4 fd08 	bl	8005154 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8010744:	4605      	mov	r5, r0
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f7fd fffc 	bl	800e744 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801074c:	4603      	mov	r3, r0
 801074e:	462a      	mov	r2, r5
 8010750:	4621      	mov	r1, r4
 8010752:	4630      	mov	r0, r6
 8010754:	f000 f93b 	bl	80109ce <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRbSt17integral_constantIjLj3EEEESC_St14__invoke_otherOSE_DpOT1_>
					std::forward<_Args>(__args)...);
 8010758:	4643      	mov	r3, r8
    }
 801075a:	4618      	mov	r0, r3
 801075c:	3710      	adds	r7, #16
 801075e:	46bd      	mov	sp, r7
 8010760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010764 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_RSt7variantIJS9_ifbEEEJEE9_M_accessEv>:
      _M_access() const
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	4618      	mov	r0, r3
 8010770:	370c      	adds	r7, #12
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr

0801077a <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801077a:	b480      	push	{r7}
 801077c:	b083      	sub	sp, #12
 801077e:	af00      	add	r7, sp, #0
 8010780:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	4618      	mov	r0, r3
 8010786:	370c      	adds	r7, #12
 8010788:	46bd      	mov	sp, r7
 801078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078e:	4770      	bx	lr

08010790 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKiEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 8010790:	b590      	push	{r4, r7, lr}
 8010792:	b085      	sub	sp, #20
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	4618      	mov	r0, r3
 801079e:	f7f8 fd41 	bl	8009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 80107a2:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 80107a4:	6838      	ldr	r0, [r7, #0]
 80107a6:	f7f8 fbb6 	bl	8008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 80107aa:	4603      	mov	r3, r0
        ::new (__storage)
 80107ac:	681c      	ldr	r4, [r3, #0]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	4619      	mov	r1, r3
 80107b2:	2004      	movs	r0, #4
 80107b4:	f7f0 fc12 	bl	8000fdc <_ZnwjPv>
 80107b8:	4603      	mov	r3, r0
 80107ba:	601c      	str	r4, [r3, #0]
    }
 80107bc:	bf00      	nop
 80107be:	3714      	adds	r7, #20
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd90      	pop	{r4, r7, pc}

080107c4 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKfEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 80107c4:	b590      	push	{r4, r7, lr}
 80107c6:	b085      	sub	sp, #20
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	4618      	mov	r0, r3
 80107d2:	f7f8 fd27 	bl	8009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 80107d6:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 80107d8:	6838      	ldr	r0, [r7, #0]
 80107da:	f7f8 fbbe 	bl	8008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80107de:	4603      	mov	r3, r0
        ::new (__storage)
 80107e0:	681c      	ldr	r4, [r3, #0]
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	4619      	mov	r1, r3
 80107e6:	2004      	movs	r0, #4
 80107e8:	f7f0 fbf8 	bl	8000fdc <_ZnwjPv>
 80107ec:	4603      	mov	r3, r0
 80107ee:	601c      	str	r4, [r3, #0]
    }
 80107f0:	bf00      	nop
 80107f2:	3714      	adds	r7, #20
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd90      	pop	{r4, r7, pc}

080107f8 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKbEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 80107f8:	b590      	push	{r4, r7, lr}
 80107fa:	b085      	sub	sp, #20
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	4618      	mov	r0, r3
 8010806:	f7f8 fd0d 	bl	8009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 801080a:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 801080c:	6838      	ldr	r0, [r7, #0]
 801080e:	f7f8 fbc6 	bl	8008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 8010812:	4603      	mov	r3, r0
        ::new (__storage)
 8010814:	781c      	ldrb	r4, [r3, #0]
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	4619      	mov	r1, r3
 801081a:	2001      	movs	r0, #1
 801081c:	f7f0 fbde 	bl	8000fdc <_ZnwjPv>
 8010820:	4603      	mov	r3, r0
 8010822:	4622      	mov	r2, r4
 8010824:	701a      	strb	r2, [r3, #0]
    }
 8010826:	bf00      	nop
 8010828:	3714      	adds	r7, #20
 801082a:	46bd      	mov	sp, r7
 801082c:	bd90      	pop	{r4, r7, pc}

0801082e <_ZSt8_DestroyI10AssignmentEvPT_>:
    _Destroy(_Tp* __pointer)
 801082e:	b580      	push	{r7, lr}
 8010830:	b082      	sub	sp, #8
 8010832:	af00      	add	r7, sp, #0
 8010834:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f7f9 fbab 	bl	8009f92 <_ZN10AssignmentD1Ev>
 801083c:	bf00      	nop
 801083e:	3708      	adds	r7, #8
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <_ZSt8_DestroyI13Function_callEvPT_>:
    _Destroy(_Tp* __pointer)
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f000 ff44 	bl	80116da <_ZN13Function_callD1Ev>
 8010852:	bf00      	nop
 8010854:	3708      	adds	r7, #8
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}

0801085a <_ZSt8_DestroyI15While_statementEvPT_>:
    _Destroy(_Tp* __pointer)
 801085a:	b580      	push	{r7, lr}
 801085c:	b082      	sub	sp, #8
 801085e:	af00      	add	r7, sp, #0
 8010860:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f7f8 ffc2 	bl	80097ec <_ZN15While_statementD1Ev>
 8010868:	bf00      	nop
 801086a:	3708      	adds	r7, #8
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <_ZSt8_DestroyI12If_statementEvPT_>:
    _Destroy(_Tp* __pointer)
 8010870:	b580      	push	{r7, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f000 febd 	bl	80115f8 <_ZN12If_statementD1Ev>
 801087e:	bf00      	nop
 8010880:	3708      	adds	r7, #8
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJRKS7_EEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 8010886:	b590      	push	{r4, r7, lr}
 8010888:	b085      	sub	sp, #20
 801088a:	af00      	add	r7, sp, #0
 801088c:	60f8      	str	r0, [r7, #12]
 801088e:	7239      	strb	r1, [r7, #8]
 8010890:	607a      	str	r2, [r7, #4]
	    _Type(std::forward<_Args>(__args)...);
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f7f8 fb1d 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8010898:	4604      	mov	r4, r0
	  ::new ((void*)std::addressof(_M_storage))
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	4618      	mov	r0, r3
 801089e:	f7f7 fb85 	bl	8007fac <_ZSt9addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 80108a2:	4603      	mov	r3, r0
 80108a4:	4619      	mov	r1, r3
 80108a6:	2018      	movs	r0, #24
 80108a8:	f7f0 fb98 	bl	8000fdc <_ZnwjPv>
 80108ac:	4603      	mov	r3, r0
 80108ae:	4621      	mov	r1, r4
 80108b0:	4618      	mov	r0, r3
 80108b2:	f009 f947 	bl	8019b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	}
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	4618      	mov	r0, r3
 80108ba:	3714      	adds	r7, #20
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd90      	pop	{r4, r7, pc}

080108c0 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJRKS7_EEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 80108c0:	b5b0      	push	{r4, r5, r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	7239      	strb	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 80108cc:	68fc      	ldr	r4, [r7, #12]
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f7f8 faff 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80108d4:	4603      	mov	r3, r0
 80108d6:	461a      	mov	r2, r3
 80108d8:	4629      	mov	r1, r5
 80108da:	4620      	mov	r0, r4
 80108dc:	f7ff ffd3 	bl	8010886 <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJRKS7_EEESt16in_place_index_tILj0EEDpOT_>
	{ }
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	4618      	mov	r0, r3
 80108e4:	3710      	adds	r7, #16
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bdb0      	pop	{r4, r5, r7, pc}

080108ea <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 80108ea:	b5b0      	push	{r4, r5, r7, lr}
 80108ec:	b084      	sub	sp, #16
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	60f8      	str	r0, [r7, #12]
 80108f2:	7239      	strb	r1, [r7, #8]
 80108f4:	607a      	str	r2, [r7, #4]
	_M_index(_Np)
 80108f6:	68fc      	ldr	r4, [r7, #12]
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f7f8 faea 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80108fe:	4603      	mov	r3, r0
 8010900:	461a      	mov	r2, r3
 8010902:	4629      	mov	r1, r5
 8010904:	4620      	mov	r0, r4
 8010906:	f7ff ffdb 	bl	80108c0 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJRKS7_EEESt16in_place_index_tILj0EEDpOT_>
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	2200      	movs	r2, #0
 801090e:	761a      	strb	r2, [r3, #24]
	{ }
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	4618      	mov	r0, r3
 8010914:	3710      	adds	r7, #16
 8010916:	46bd      	mov	sp, r7
 8010918:	bdb0      	pop	{r4, r5, r7, pc}

0801091a <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRS9_St17integral_constantIjLj0EEEESC_St14__invoke_otherOSE_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 801091a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801091e:	b084      	sub	sp, #16
 8010920:	af00      	add	r7, sp, #0
 8010922:	7338      	strb	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	607a      	str	r2, [r7, #4]
 8010928:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 801092a:	68b8      	ldr	r0, [r7, #8]
 801092c:	f7ff ff25 	bl	801077a <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 8010930:	4604      	mov	r4, r0
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f7f4 fc80 	bl	8005238 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8010938:	4605      	mov	r5, r0
 801093a:	6838      	ldr	r0, [r7, #0]
 801093c:	f7fd fe87 	bl	800e64e <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010940:	4632      	mov	r2, r6
 8010942:	4629      	mov	r1, r5
 8010944:	4620      	mov	r0, r4
 8010946:	f000 f860 	bl	8010a0a <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESB_SC_>
 801094a:	4643      	mov	r3, r8
 801094c:	4618      	mov	r0, r3
 801094e:	3710      	adds	r7, #16
 8010950:	46bd      	mov	sp, r7
 8010952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010956 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRiSt17integral_constantIjLj1EEEESC_St14__invoke_otherOSE_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8010956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801095a:	b084      	sub	sp, #16
 801095c:	af00      	add	r7, sp, #0
 801095e:	7338      	strb	r0, [r7, #12]
 8010960:	60b9      	str	r1, [r7, #8]
 8010962:	607a      	str	r2, [r7, #4]
 8010964:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8010966:	68b8      	ldr	r0, [r7, #8]
 8010968:	f7ff ff07 	bl	801077a <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 801096c:	4604      	mov	r4, r0
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f7f4 fc12 	bl	8005198 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8010974:	4605      	mov	r5, r0
 8010976:	6838      	ldr	r0, [r7, #0]
 8010978:	f7fd fe92 	bl	800e6a0 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801097c:	4632      	mov	r2, r6
 801097e:	4629      	mov	r1, r5
 8010980:	4620      	mov	r0, r4
 8010982:	f000 f88b 	bl	8010a9c <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESB_SC_>
 8010986:	4643      	mov	r3, r8
 8010988:	4618      	mov	r0, r3
 801098a:	3710      	adds	r7, #16
 801098c:	46bd      	mov	sp, r7
 801098e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010992 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRfSt17integral_constantIjLj2EEEESC_St14__invoke_otherOSE_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8010992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	7338      	strb	r0, [r7, #12]
 801099c:	60b9      	str	r1, [r7, #8]
 801099e:	607a      	str	r2, [r7, #4]
 80109a0:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80109a2:	68b8      	ldr	r0, [r7, #8]
 80109a4:	f7ff fee9 	bl	801077a <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 80109a8:	4604      	mov	r4, r0
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	f7f4 fc16 	bl	80051dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80109b0:	4605      	mov	r5, r0
 80109b2:	6838      	ldr	r0, [r7, #0]
 80109b4:	f7fd fe9d 	bl	800e6f2 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 80109b8:	4632      	mov	r2, r6
 80109ba:	4629      	mov	r1, r5
 80109bc:	4620      	mov	r0, r4
 80109be:	f000 f8b4 	bl	8010b2a <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESB_SC_>
 80109c2:	4643      	mov	r3, r8
 80109c4:	4618      	mov	r0, r3
 80109c6:	3710      	adds	r7, #16
 80109c8:	46bd      	mov	sp, r7
 80109ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080109ce <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRbSt17integral_constantIjLj3EEEESC_St14__invoke_otherOSE_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80109ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	7338      	strb	r0, [r7, #12]
 80109d8:	60b9      	str	r1, [r7, #8]
 80109da:	607a      	str	r2, [r7, #4]
 80109dc:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80109de:	68b8      	ldr	r0, [r7, #8]
 80109e0:	f7ff fecb 	bl	801077a <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 80109e4:	4604      	mov	r4, r0
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f7f4 fbb4 	bl	8005154 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80109ec:	4605      	mov	r5, r0
 80109ee:	6838      	ldr	r0, [r7, #0]
 80109f0:	f7fd fea8 	bl	800e744 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 80109f4:	4632      	mov	r2, r6
 80109f6:	4629      	mov	r1, r5
 80109f8:	4620      	mov	r0, r4
 80109fa:	f000 f8dd 	bl	8010bb8 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESB_SC_>
 80109fe:	4643      	mov	r3, r8
 8010a00:	4618      	mov	r0, r3
 8010a02:	3710      	adds	r7, #16
 8010a04:	46bd      	mov	sp, r7
 8010a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a0a <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESB_SC_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010a0a:	b5b0      	push	{r4, r5, r7, lr}
 8010a0c:	b084      	sub	sp, #16
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	60f8      	str	r0, [r7, #12]
 8010a12:	60b9      	str	r1, [r7, #8]
 8010a14:	713a      	strb	r2, [r7, #4]
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 8010a1a:	7e1b      	ldrb	r3, [r3, #24]
 8010a1c:	461c      	mov	r4, r3
 8010a1e:	1d3b      	adds	r3, r7, #4
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7fe fc03 	bl	800f22c <_ZNKSt17integral_constantIjLj0EEcvjEv>
 8010a26:	4603      	mov	r3, r0
 8010a28:	429c      	cmp	r4, r3
 8010a2a:	bf0c      	ite	eq
 8010a2c:	2301      	moveq	r3, #1
 8010a2e:	2300      	movne	r3, #0
 8010a30:	b2db      	uxtb	r3, r3
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d00e      	beq.n	8010a54 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESB_SC_+0x4a>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 8010a36:	68b8      	ldr	r0, [r7, #8]
 8010a38:	f7fb fdbc 	bl	800c5b4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8010a3c:	4604      	mov	r4, r0
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 8010a42:	4618      	mov	r0, r3
 8010a44:	f000 f819 	bl	8010a7a <_ZNSt8__detail9__variant5__getILj0ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	4621      	mov	r1, r4
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f008 ff58 	bl	8019902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
	    return {};
 8010a52:	e00d      	b.n	8010a70 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESB_SC_+0x66>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
		  __variant_cast<_Types...>(*this)
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7ff f98d 	bl	800fd78 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 8010a5e:	4604      	mov	r4, r0
		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 8010a60:	68b8      	ldr	r0, [r7, #8]
 8010a62:	f7fb fda7 	bl	800c5b4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8010a66:	4603      	mov	r3, r0
		  __variant_cast<_Types...>(*this)
 8010a68:	4619      	mov	r1, r3
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	f000 f8f7 	bl	8010c5e <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj0EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>
	    return {};
 8010a70:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010a72:	4618      	mov	r0, r3
 8010a74:	3710      	adds	r7, #16
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bdb0      	pop	{r4, r5, r7, pc}

08010a7a <_ZNSt8__detail9__variant5__getILj0ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8010a7a:	b590      	push	{r4, r7, lr}
 8010a7c:	b083      	sub	sp, #12
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f000 f8e0 	bl	8010c48 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8010a88:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	4620      	mov	r0, r4
 8010a8e:	f7f7 faa4 	bl	8007fda <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8010a92:	4603      	mov	r3, r0
    }
 8010a94:	4618      	mov	r0, r3
 8010a96:	370c      	adds	r7, #12
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd90      	pop	{r4, r7, pc}

08010a9c <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESB_SC_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010a9c:	b5b0      	push	{r4, r5, r7, lr}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	60f8      	str	r0, [r7, #12]
 8010aa4:	60b9      	str	r1, [r7, #8]
 8010aa6:	713a      	strb	r2, [r7, #4]
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 8010aac:	7e1b      	ldrb	r3, [r3, #24]
 8010aae:	461c      	mov	r4, r3
 8010ab0:	1d3b      	adds	r3, r7, #4
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7fe fc34 	bl	800f320 <_ZNKSt17integral_constantIjLj1EEcvjEv>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	429c      	cmp	r4, r3
 8010abc:	bf0c      	ite	eq
 8010abe:	2301      	moveq	r3, #1
 8010ac0:	2300      	movne	r3, #0
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d00c      	beq.n	8010ae2 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESB_SC_+0x46>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 8010ac8:	68b8      	ldr	r0, [r7, #8]
 8010aca:	f000 f8e1 	bl	8010c90 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	681c      	ldr	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f000 f816 	bl	8010b08 <_ZNSt8__detail9__variant5__getILj1ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 8010adc:	4603      	mov	r3, r0
 8010ade:	601c      	str	r4, [r3, #0]
	    return {};
 8010ae0:	e00d      	b.n	8010afe <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESB_SC_+0x62>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
		  __variant_cast<_Types...>(*this)
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7ff f946 	bl	800fd78 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 8010aec:	4604      	mov	r4, r0
		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 8010aee:	68b8      	ldr	r0, [r7, #8]
 8010af0:	f000 f8ce 	bl	8010c90 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8010af4:	4603      	mov	r3, r0
		  __variant_cast<_Types...>(*this)
 8010af6:	4619      	mov	r1, r3
 8010af8:	4620      	mov	r0, r4
 8010afa:	f000 f8d4 	bl	8010ca6 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj1EJiEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>
	    return {};
 8010afe:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010b00:	4618      	mov	r0, r3
 8010b02:	3710      	adds	r7, #16
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bdb0      	pop	{r4, r5, r7, pc}

08010b08 <_ZNSt8__detail9__variant5__getILj1ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8010b08:	b590      	push	{r4, r7, lr}
 8010b0a:	b083      	sub	sp, #12
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f000 f899 	bl	8010c48 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8010b16:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8010b18:	4619      	mov	r1, r3
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	f7f7 fae6 	bl	80080ec <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8010b20:	4603      	mov	r3, r0
    }
 8010b22:	4618      	mov	r0, r3
 8010b24:	370c      	adds	r7, #12
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd90      	pop	{r4, r7, pc}

08010b2a <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESB_SC_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010b2a:	b5b0      	push	{r4, r5, r7, lr}
 8010b2c:	b084      	sub	sp, #16
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	60f8      	str	r0, [r7, #12]
 8010b32:	60b9      	str	r1, [r7, #8]
 8010b34:	713a      	strb	r2, [r7, #4]
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 8010b3a:	7e1b      	ldrb	r3, [r3, #24]
 8010b3c:	461c      	mov	r4, r3
 8010b3e:	1d3b      	adds	r3, r7, #4
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7fe fc3c 	bl	800f3be <_ZNKSt17integral_constantIjLj2EEcvjEv>
 8010b46:	4603      	mov	r3, r0
 8010b48:	429c      	cmp	r4, r3
 8010b4a:	bf0c      	ite	eq
 8010b4c:	2301      	moveq	r3, #1
 8010b4e:	2300      	movne	r3, #0
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d00c      	beq.n	8010b70 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESB_SC_+0x46>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 8010b56:	68b8      	ldr	r0, [r7, #8]
 8010b58:	f000 f8be 	bl	8010cd8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	681c      	ldr	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 8010b64:	4618      	mov	r0, r3
 8010b66:	f000 f816 	bl	8010b96 <_ZNSt8__detail9__variant5__getILj2ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	601c      	str	r4, [r3, #0]
	    return {};
 8010b6e:	e00d      	b.n	8010b8c <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESB_SC_+0x62>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
		  __variant_cast<_Types...>(*this)
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7ff f8ff 	bl	800fd78 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 8010b7a:	4604      	mov	r4, r0
		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 8010b7c:	68b8      	ldr	r0, [r7, #8]
 8010b7e:	f000 f8ab 	bl	8010cd8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010b82:	4603      	mov	r3, r0
		  __variant_cast<_Types...>(*this)
 8010b84:	4619      	mov	r1, r3
 8010b86:	4620      	mov	r0, r4
 8010b88:	f000 f8b1 	bl	8010cee <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj2EJfEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>
	    return {};
 8010b8c:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3710      	adds	r7, #16
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bdb0      	pop	{r4, r5, r7, pc}

08010b96 <_ZNSt8__detail9__variant5__getILj2ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8010b96:	b590      	push	{r4, r7, lr}
 8010b98:	b083      	sub	sp, #12
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f000 f852 	bl	8010c48 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8010ba4:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	4620      	mov	r0, r4
 8010baa:	f7f7 fb3b 	bl	8008224 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8010bae:	4603      	mov	r3, r0
    }
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	370c      	adds	r7, #12
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd90      	pop	{r4, r7, pc}

08010bb8 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESB_SC_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010bb8:	b5b0      	push	{r4, r5, r7, lr}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	60f8      	str	r0, [r7, #12]
 8010bc0:	60b9      	str	r1, [r7, #8]
 8010bc2:	713a      	strb	r2, [r7, #4]
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 8010bc8:	7e1b      	ldrb	r3, [r3, #24]
 8010bca:	461c      	mov	r4, r3
 8010bcc:	1d3b      	adds	r3, r7, #4
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fe fc45 	bl	800f45e <_ZNKSt17integral_constantIjLj3EEcvjEv>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	429c      	cmp	r4, r3
 8010bd8:	bf0c      	ite	eq
 8010bda:	2301      	moveq	r3, #1
 8010bdc:	2300      	movne	r3, #0
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d00d      	beq.n	8010c00 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESB_SC_+0x48>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 8010be4:	68b8      	ldr	r0, [r7, #8]
 8010be6:	f000 f89b 	bl	8010d20 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 8010bea:	4603      	mov	r3, r0
 8010bec:	781c      	ldrb	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f000 f817 	bl	8010c26 <_ZNSt8__detail9__variant5__getILj3ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	4622      	mov	r2, r4
 8010bfc:	701a      	strb	r2, [r3, #0]
	    return {};
 8010bfe:	e00d      	b.n	8010c1c <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESB_SC_+0x64>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	681b      	ldr	r3, [r3, #0]
		  __variant_cast<_Types...>(*this)
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7ff f8b7 	bl	800fd78 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 8010c0a:	4604      	mov	r4, r0
		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 8010c0c:	68b8      	ldr	r0, [r7, #8]
 8010c0e:	f000 f887 	bl	8010d20 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 8010c12:	4603      	mov	r3, r0
		  __variant_cast<_Types...>(*this)
 8010c14:	4619      	mov	r1, r3
 8010c16:	4620      	mov	r0, r4
 8010c18:	f000 f88d 	bl	8010d36 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj3EJbEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>
	    return {};
 8010c1c:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3710      	adds	r7, #16
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bdb0      	pop	{r4, r5, r7, pc}

08010c26 <_ZNSt8__detail9__variant5__getILj3ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8010c26:	b590      	push	{r4, r7, lr}
 8010c28:	b083      	sub	sp, #12
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f000 f80a 	bl	8010c48 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8010c34:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8010c36:	4619      	mov	r1, r3
 8010c38:	4620      	mov	r0, r4
 8010c3a:	f7f7 fba1 	bl	8008380 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8010c3e:	4603      	mov	r3, r0
    }
 8010c40:	4618      	mov	r0, r3
 8010c42:	370c      	adds	r7, #12
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd90      	pop	{r4, r7, pc}

08010c48 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010c48:	b480      	push	{r7}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	4618      	mov	r0, r3
 8010c54:	370c      	adds	r7, #12
 8010c56:	46bd      	mov	sp, r7
 8010c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5c:	4770      	bx	lr

08010c5e <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj0EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>:
	emplace(_Args&&... __args)
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	b082      	sub	sp, #8
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	6078      	str	r0, [r7, #4]
 8010c66:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7f6 fc5d 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010c70:	6838      	ldr	r0, [r7, #0]
 8010c72:	f7f6 fb4d 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8010c76:	4603      	mov	r3, r0
 8010c78:	4619      	mov	r1, r3
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f000 f874 	bl	8010d68 <_ZSt28__variant_construct_by_indexILj0ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJS6_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f000 f893 	bl	8010dac <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>
 8010c86:	4603      	mov	r3, r0
	}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3708      	adds	r7, #8
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8010c90:	b480      	push	{r7}
 8010c92:	b083      	sub	sp, #12
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	370c      	adds	r7, #12
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr

08010ca6 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj1EJiEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>:
	emplace(_Args&&... __args)
 8010ca6:	b580      	push	{r7, lr}
 8010ca8:	b082      	sub	sp, #8
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	6078      	str	r0, [r7, #4]
 8010cae:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7f6 fc39 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010cb8:	6838      	ldr	r0, [r7, #0]
 8010cba:	f7f6 fb60 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f000 f88e 	bl	8010de4 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJiEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f000 f8ab 	bl	8010e24 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>
 8010cce:	4603      	mov	r3, r0
	}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3708      	adds	r7, #8
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8010cd8:	b480      	push	{r7}
 8010cda:	b083      	sub	sp, #12
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	370c      	adds	r7, #12
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cec:	4770      	bx	lr

08010cee <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj2EJfEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>:
	emplace(_Args&&... __args)
 8010cee:	b580      	push	{r7, lr}
 8010cf0:	b082      	sub	sp, #8
 8010cf2:	af00      	add	r7, sp, #0
 8010cf4:	6078      	str	r0, [r7, #4]
 8010cf6:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7f6 fc15 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010d00:	6838      	ldr	r0, [r7, #0]
 8010d02:	f7f6 fb73 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8010d06:	4603      	mov	r3, r0
 8010d08:	4619      	mov	r1, r3
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f000 f8a6 	bl	8010e5c <_ZSt28__variant_construct_by_indexILj2ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJfEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f000 f8c3 	bl	8010e9c <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>
 8010d16:	4603      	mov	r3, r0
	}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8010d20:	b480      	push	{r7}
 8010d22:	b083      	sub	sp, #12
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	370c      	adds	r7, #12
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d34:	4770      	bx	lr

08010d36 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj3EJbEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>:
	emplace(_Args&&... __args)
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b082      	sub	sp, #8
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
 8010d3e:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7f6 fbf1 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010d48:	6838      	ldr	r0, [r7, #0]
 8010d4a:	f000 f8c3 	bl	8010ed4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	4619      	mov	r1, r3
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f000 f8c9 	bl	8010eea <_ZSt28__variant_construct_by_indexILj3ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJbEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f000 f8e7 	bl	8010f2c <_ZSt3getILj3EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>
 8010d5e:	4603      	mov	r3, r0
	}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3708      	adds	r7, #8
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}

08010d68 <_ZSt28__variant_construct_by_indexILj0ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJS6_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8010d68:	b590      	push	{r4, r7, lr}
 8010d6a:	b085      	sub	sp, #20
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2200      	movs	r2, #0
 8010d76:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f7f7 f93f 	bl	8007ffc <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8010d7e:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8010d80:	6838      	ldr	r0, [r7, #0]
 8010d82:	f7f6 fac5 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8010d86:	4604      	mov	r4, r0
      ::new ((void*)std::addressof(__storage))
 8010d88:	68f8      	ldr	r0, [r7, #12]
 8010d8a:	f000 f8eb 	bl	8010f64 <_ZSt9addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	4619      	mov	r1, r3
 8010d92:	2018      	movs	r0, #24
 8010d94:	f7f0 f922 	bl	8000fdc <_ZnwjPv>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	4621      	mov	r1, r4
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f008 fd8a 	bl	80198b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8010da2:	bf00      	nop
 8010da4:	3714      	adds	r7, #20
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd90      	pop	{r4, r7, pc}
	...

08010dac <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>:
    get(variant<_Types...>& __v)
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f7f7 f849 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	bf14      	ite	ne
 8010dc0:	2301      	movne	r3, #1
 8010dc2:	2300      	moveq	r3, #0
 8010dc4:	b2db      	uxtb	r3, r3
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d002      	beq.n	8010dd0 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8010dca:	4805      	ldr	r0, [pc, #20]	; (8010de0 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x34>)
 8010dcc:	f7f0 f912 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f7f7 f913 	bl	8007ffc <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8010dd6:	4603      	mov	r3, r0
    }
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3708      	adds	r7, #8
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}
 8010de0:	0801ce98 	.word	0x0801ce98

08010de4 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJiEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8010de4:	b590      	push	{r4, r7, lr}
 8010de6:	b085      	sub	sp, #20
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2201      	movs	r2, #1
 8010df2:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f7f7 f98b 	bl	8008110 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8010dfa:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8010dfc:	6838      	ldr	r0, [r7, #0]
 8010dfe:	f7f6 fabe 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8010e02:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8010e04:	681c      	ldr	r4, [r3, #0]
 8010e06:	68f8      	ldr	r0, [r7, #12]
 8010e08:	f000 f8b8 	bl	8010f7c <_ZSt9addressofIiEPT_RS0_>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	4619      	mov	r1, r3
 8010e10:	2004      	movs	r0, #4
 8010e12:	f7f0 f8e3 	bl	8000fdc <_ZnwjPv>
 8010e16:	4603      	mov	r3, r0
 8010e18:	601c      	str	r4, [r3, #0]
    }
 8010e1a:	bf00      	nop
 8010e1c:	3714      	adds	r7, #20
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd90      	pop	{r4, r7, pc}
	...

08010e24 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>:
    get(variant<_Types...>& __v)
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b082      	sub	sp, #8
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f7f7 f80d 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 8010e32:	4603      	mov	r3, r0
 8010e34:	2b01      	cmp	r3, #1
 8010e36:	bf14      	ite	ne
 8010e38:	2301      	movne	r3, #1
 8010e3a:	2300      	moveq	r3, #0
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d002      	beq.n	8010e48 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8010e42:	4805      	ldr	r0, [pc, #20]	; (8010e58 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x34>)
 8010e44:	f7f0 f8d6 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f7f7 f961 	bl	8008110 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8010e4e:	4603      	mov	r3, r0
    }
 8010e50:	4618      	mov	r0, r3
 8010e52:	3708      	adds	r7, #8
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}
 8010e58:	0801ce98 	.word	0x0801ce98

08010e5c <_ZSt28__variant_construct_by_indexILj2ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJfEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8010e5c:	b590      	push	{r4, r7, lr}
 8010e5e:	b085      	sub	sp, #20
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2202      	movs	r2, #2
 8010e6a:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f7f7 f9eb 	bl	8008248 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8010e72:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8010e74:	6838      	ldr	r0, [r7, #0]
 8010e76:	f7f6 fab9 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8010e7a:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8010e7c:	681c      	ldr	r4, [r3, #0]
 8010e7e:	68f8      	ldr	r0, [r7, #12]
 8010e80:	f000 f888 	bl	8010f94 <_ZSt9addressofIfEPT_RS0_>
 8010e84:	4603      	mov	r3, r0
 8010e86:	4619      	mov	r1, r3
 8010e88:	2004      	movs	r0, #4
 8010e8a:	f7f0 f8a7 	bl	8000fdc <_ZnwjPv>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	601c      	str	r4, [r3, #0]
    }
 8010e92:	bf00      	nop
 8010e94:	3714      	adds	r7, #20
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd90      	pop	{r4, r7, pc}
	...

08010e9c <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>:
    get(variant<_Types...>& __v)
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b082      	sub	sp, #8
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f7f6 ffd1 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	2b02      	cmp	r3, #2
 8010eae:	bf14      	ite	ne
 8010eb0:	2301      	movne	r3, #1
 8010eb2:	2300      	moveq	r3, #0
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d002      	beq.n	8010ec0 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8010eba:	4805      	ldr	r0, [pc, #20]	; (8010ed0 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x34>)
 8010ebc:	f7f0 f89a 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f7f7 f9c1 	bl	8008248 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8010ec6:	4603      	mov	r3, r0
    }
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3708      	adds	r7, #8
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	0801ce98 	.word	0x0801ce98

08010ed4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010ed4:	b480      	push	{r7}
 8010ed6:	b083      	sub	sp, #12
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	4618      	mov	r0, r3
 8010ee0:	370c      	adds	r7, #12
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee8:	4770      	bx	lr

08010eea <_ZSt28__variant_construct_by_indexILj3ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJbEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8010eea:	b590      	push	{r4, r7, lr}
 8010eec:	b085      	sub	sp, #20
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
 8010ef2:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2203      	movs	r2, #3
 8010ef8:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f7f7 fa52 	bl	80083a4 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8010f00:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8010f02:	6838      	ldr	r0, [r7, #0]
 8010f04:	f7ff ffe6 	bl	8010ed4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010f08:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8010f0a:	781c      	ldrb	r4, [r3, #0]
 8010f0c:	68f8      	ldr	r0, [r7, #12]
 8010f0e:	f000 f84d 	bl	8010fac <_ZSt9addressofIbEPT_RS0_>
 8010f12:	4603      	mov	r3, r0
 8010f14:	4619      	mov	r1, r3
 8010f16:	2001      	movs	r0, #1
 8010f18:	f7f0 f860 	bl	8000fdc <_ZnwjPv>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	4622      	mov	r2, r4
 8010f20:	701a      	strb	r2, [r3, #0]
    }
 8010f22:	bf00      	nop
 8010f24:	3714      	adds	r7, #20
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd90      	pop	{r4, r7, pc}
	...

08010f2c <_ZSt3getILj3EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>:
    get(variant<_Types...>& __v)
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f7f6 ff89 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b03      	cmp	r3, #3
 8010f3e:	bf14      	ite	ne
 8010f40:	2301      	movne	r3, #1
 8010f42:	2300      	moveq	r3, #0
 8010f44:	b2db      	uxtb	r3, r3
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d002      	beq.n	8010f50 <_ZSt3getILj3EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8010f4a:	4805      	ldr	r0, [pc, #20]	; (8010f60 <_ZSt3getILj3EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x34>)
 8010f4c:	f7f0 f852 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f7f7 fa27 	bl	80083a4 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8010f56:	4603      	mov	r3, r0
    }
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	0801ce98 	.word	0x0801ce98

08010f64 <_ZSt9addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    addressof(_Tp& __r) noexcept
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f7f4 fdfb 	bl	8005b68 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8010f72:	4603      	mov	r3, r0
 8010f74:	4618      	mov	r0, r3
 8010f76:	3708      	adds	r7, #8
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}

08010f7c <_ZSt9addressofIiEPT_RS0_>:
    addressof(_Tp& __r) noexcept
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b082      	sub	sp, #8
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f7f4 fdc5 	bl	8005b14 <_ZSt11__addressofIiEPT_RS0_>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	3708      	adds	r7, #8
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}

08010f94 <_ZSt9addressofIfEPT_RS0_>:
    addressof(_Tp& __r) noexcept
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b082      	sub	sp, #8
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f7f4 fdce 	bl	8005b3e <_ZSt11__addressofIfEPT_RS0_>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3708      	adds	r7, #8
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}

08010fac <_ZSt9addressofIbEPT_RS0_>:
    addressof(_Tp& __r) noexcept
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f7f4 fd98 	bl	8005aea <_ZSt11__addressofIbEPT_RS0_>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3708      	adds	r7, #8
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}

08010fc4 <_Z41__static_initialization_and_destruction_0ii>:
 8010fc4:	b590      	push	{r4, r7, lr}
 8010fc6:	b0e7      	sub	sp, #412	; 0x19c
 8010fc8:	af02      	add	r7, sp, #8
 8010fca:	1d3b      	adds	r3, r7, #4
 8010fcc:	6018      	str	r0, [r3, #0]
 8010fce:	463b      	mov	r3, r7
 8010fd0:	6019      	str	r1, [r3, #0]
 8010fd2:	1d3b      	adds	r3, r7, #4
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2b01      	cmp	r3, #1
 8010fd8:	f040 819d 	bne.w	8011316 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8010fdc:	463b      	mov	r3, r7
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	f040 8196 	bne.w	8011316 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8010fea:	f107 0314 	add.w	r3, r7, #20
 8010fee:	4618      	mov	r0, r3
 8010ff0:	2322      	movs	r3, #34	; 0x22
 8010ff2:	461a      	mov	r2, r3
 8010ff4:	2100      	movs	r1, #0
 8010ff6:	f008 fe67 	bl	8019cc8 <memset>
 8010ffa:	f107 0314 	add.w	r3, r7, #20
 8010ffe:	223a      	movs	r2, #58	; 0x3a
 8011000:	701a      	strb	r2, [r3, #0]
 8011002:	f107 0314 	add.w	r3, r7, #20
 8011006:	2201      	movs	r2, #1
 8011008:	705a      	strb	r2, [r3, #1]
 801100a:	f107 0314 	add.w	r3, r7, #20
 801100e:	220a      	movs	r2, #10
 8011010:	709a      	strb	r2, [r3, #2]
 8011012:	f107 0314 	add.w	r3, r7, #20
 8011016:	220a      	movs	r2, #10
 8011018:	70da      	strb	r2, [r3, #3]
 801101a:	f107 0314 	add.w	r3, r7, #20
 801101e:	222c      	movs	r2, #44	; 0x2c
 8011020:	711a      	strb	r2, [r3, #4]
 8011022:	f107 0314 	add.w	r3, r7, #20
 8011026:	220c      	movs	r2, #12
 8011028:	715a      	strb	r2, [r3, #5]
 801102a:	f107 0314 	add.w	r3, r7, #20
 801102e:	222e      	movs	r2, #46	; 0x2e
 8011030:	719a      	strb	r2, [r3, #6]
 8011032:	f107 0314 	add.w	r3, r7, #20
 8011036:	220b      	movs	r2, #11
 8011038:	71da      	strb	r2, [r3, #7]
 801103a:	f107 0314 	add.w	r3, r7, #20
 801103e:	225b      	movs	r2, #91	; 0x5b
 8011040:	721a      	strb	r2, [r3, #8]
 8011042:	f107 0314 	add.w	r3, r7, #20
 8011046:	220d      	movs	r2, #13
 8011048:	725a      	strb	r2, [r3, #9]
 801104a:	f107 0314 	add.w	r3, r7, #20
 801104e:	225d      	movs	r2, #93	; 0x5d
 8011050:	729a      	strb	r2, [r3, #10]
 8011052:	f107 0314 	add.w	r3, r7, #20
 8011056:	220e      	movs	r2, #14
 8011058:	72da      	strb	r2, [r3, #11]
 801105a:	f107 0314 	add.w	r3, r7, #20
 801105e:	227c      	movs	r2, #124	; 0x7c
 8011060:	731a      	strb	r2, [r3, #12]
 8011062:	f107 0314 	add.w	r3, r7, #20
 8011066:	2215      	movs	r2, #21
 8011068:	735a      	strb	r2, [r3, #13]
 801106a:	f107 0314 	add.w	r3, r7, #20
 801106e:	2226      	movs	r2, #38	; 0x26
 8011070:	739a      	strb	r2, [r3, #14]
 8011072:	f107 0314 	add.w	r3, r7, #20
 8011076:	2216      	movs	r2, #22
 8011078:	73da      	strb	r2, [r3, #15]
 801107a:	f107 0314 	add.w	r3, r7, #20
 801107e:	222b      	movs	r2, #43	; 0x2b
 8011080:	741a      	strb	r2, [r3, #16]
 8011082:	f107 0314 	add.w	r3, r7, #20
 8011086:	221f      	movs	r2, #31
 8011088:	745a      	strb	r2, [r3, #17]
 801108a:	f107 0314 	add.w	r3, r7, #20
 801108e:	222d      	movs	r2, #45	; 0x2d
 8011090:	749a      	strb	r2, [r3, #18]
 8011092:	f107 0314 	add.w	r3, r7, #20
 8011096:	2220      	movs	r2, #32
 8011098:	74da      	strb	r2, [r3, #19]
 801109a:	f107 0314 	add.w	r3, r7, #20
 801109e:	222a      	movs	r2, #42	; 0x2a
 80110a0:	751a      	strb	r2, [r3, #20]
 80110a2:	f107 0314 	add.w	r3, r7, #20
 80110a6:	2221      	movs	r2, #33	; 0x21
 80110a8:	755a      	strb	r2, [r3, #21]
 80110aa:	f107 0314 	add.w	r3, r7, #20
 80110ae:	222f      	movs	r2, #47	; 0x2f
 80110b0:	759a      	strb	r2, [r3, #22]
 80110b2:	f107 0314 	add.w	r3, r7, #20
 80110b6:	2222      	movs	r2, #34	; 0x22
 80110b8:	75da      	strb	r2, [r3, #23]
 80110ba:	f107 0314 	add.w	r3, r7, #20
 80110be:	225e      	movs	r2, #94	; 0x5e
 80110c0:	761a      	strb	r2, [r3, #24]
 80110c2:	f107 0314 	add.w	r3, r7, #20
 80110c6:	2223      	movs	r2, #35	; 0x23
 80110c8:	765a      	strb	r2, [r3, #25]
 80110ca:	f107 0314 	add.w	r3, r7, #20
 80110ce:	2225      	movs	r2, #37	; 0x25
 80110d0:	769a      	strb	r2, [r3, #26]
 80110d2:	f107 0314 	add.w	r3, r7, #20
 80110d6:	2224      	movs	r2, #36	; 0x24
 80110d8:	76da      	strb	r2, [r3, #27]
 80110da:	f107 0314 	add.w	r3, r7, #20
 80110de:	2228      	movs	r2, #40	; 0x28
 80110e0:	771a      	strb	r2, [r3, #28]
 80110e2:	f107 0314 	add.w	r3, r7, #20
 80110e6:	2226      	movs	r2, #38	; 0x26
 80110e8:	775a      	strb	r2, [r3, #29]
 80110ea:	f107 0314 	add.w	r3, r7, #20
 80110ee:	2229      	movs	r2, #41	; 0x29
 80110f0:	779a      	strb	r2, [r3, #30]
 80110f2:	f107 0314 	add.w	r3, r7, #20
 80110f6:	2227      	movs	r2, #39	; 0x27
 80110f8:	77da      	strb	r2, [r3, #31]
 80110fa:	f107 0314 	add.w	r3, r7, #20
 80110fe:	2225      	movs	r2, #37	; 0x25
 8011100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8011104:	f107 030c 	add.w	r3, r7, #12
 8011108:	f107 0214 	add.w	r2, r7, #20
 801110c:	601a      	str	r2, [r3, #0]
 801110e:	f107 030c 	add.w	r3, r7, #12
 8011112:	2211      	movs	r2, #17
 8011114:	605a      	str	r2, [r3, #4]
 8011116:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801111a:	4618      	mov	r0, r3
 801111c:	f7f0 fae7 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8011120:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8011124:	f107 020c 	add.w	r2, r7, #12
 8011128:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801112c:	9300      	str	r3, [sp, #0]
 801112e:	460b      	mov	r3, r1
 8011130:	ca06      	ldmia	r2, {r1, r2}
 8011132:	4885      	ldr	r0, [pc, #532]	; (8011348 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8011134:	f7f0 faf3 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8011138:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801113c:	4618      	mov	r0, r3
 801113e:	f7f0 fae2 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8011142:	2305      	movs	r3, #5
 8011144:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8011148:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 801114c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011150:	497e      	ldr	r1, [pc, #504]	; (801134c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8011152:	4618      	mov	r0, r3
 8011154:	f7ef ffa8 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8011158:	2306      	movs	r3, #6
 801115a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 801115e:	f207 1263 	addw	r2, r7, #355	; 0x163
 8011162:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011166:	331c      	adds	r3, #28
 8011168:	4979      	ldr	r1, [pc, #484]	; (8011350 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 801116a:	4618      	mov	r0, r3
 801116c:	f7ef ffc4 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8011170:	2307      	movs	r3, #7
 8011172:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8011176:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 801117a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801117e:	3338      	adds	r3, #56	; 0x38
 8011180:	4974      	ldr	r1, [pc, #464]	; (8011354 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8011182:	4618      	mov	r0, r3
 8011184:	f7ef ffb8 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8011188:	2308      	movs	r3, #8
 801118a:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 801118e:	f207 1265 	addw	r2, r7, #357	; 0x165
 8011192:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011196:	3354      	adds	r3, #84	; 0x54
 8011198:	496f      	ldr	r1, [pc, #444]	; (8011358 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 801119a:	4618      	mov	r0, r3
 801119c:	f7ef ff84 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 80111a0:	2309      	movs	r3, #9
 80111a2:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 80111a6:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 80111aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80111ae:	3370      	adds	r3, #112	; 0x70
 80111b0:	496a      	ldr	r1, [pc, #424]	; (801135c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7ef ffc8 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 80111b8:	2310      	movs	r3, #16
 80111ba:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 80111be:	f207 1267 	addw	r2, r7, #359	; 0x167
 80111c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80111c6:	338c      	adds	r3, #140	; 0x8c
 80111c8:	4965      	ldr	r1, [pc, #404]	; (8011360 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7ef ffe4 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 80111d0:	2311      	movs	r3, #17
 80111d2:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 80111d6:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80111da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80111de:	33a8      	adds	r3, #168	; 0xa8
 80111e0:	4960      	ldr	r1, [pc, #384]	; (8011364 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7ef ffb0 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 80111e8:	2312      	movs	r3, #18
 80111ea:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 80111ee:	f207 1269 	addw	r2, r7, #361	; 0x169
 80111f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80111f6:	33c4      	adds	r3, #196	; 0xc4
 80111f8:	495b      	ldr	r1, [pc, #364]	; (8011368 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7ef ff54 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8011200:	2313      	movs	r3, #19
 8011202:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8011206:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 801120a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801120e:	33e0      	adds	r3, #224	; 0xe0
 8011210:	4956      	ldr	r1, [pc, #344]	; (801136c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8011212:	4618      	mov	r0, r3
 8011214:	f7ef ff70 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8011218:	2314      	movs	r3, #20
 801121a:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 801121e:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8011222:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011226:	33fc      	adds	r3, #252	; 0xfc
 8011228:	4951      	ldr	r1, [pc, #324]	; (8011370 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 801122a:	4618      	mov	r0, r3
 801122c:	f7ef ffdc 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8011230:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011234:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011238:	601a      	str	r2, [r3, #0]
 801123a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801123e:	220a      	movs	r2, #10
 8011240:	605a      	str	r2, [r3, #4]
 8011242:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011246:	4618      	mov	r0, r3
 8011248:	f7f0 faf6 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 801124c:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8011250:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011254:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011258:	9300      	str	r3, [sp, #0]
 801125a:	460b      	mov	r3, r1
 801125c:	ca06      	ldmia	r2, {r1, r2}
 801125e:	4845      	ldr	r0, [pc, #276]	; (8011374 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8011260:	f7f0 fb02 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8011264:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011268:	4618      	mov	r0, r3
 801126a:	f7f0 faf1 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 801126e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8011272:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8011276:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801127a:	429c      	cmp	r4, r3
 801127c:	d004      	beq.n	8011288 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 801127e:	3c1c      	subs	r4, #28
 8011280:	4620      	mov	r0, r4
 8011282:	f7ef ff04 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8011286:	e7f6      	b.n	8011276 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8011288:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801128c:	2200      	movs	r2, #0
 801128e:	601a      	str	r2, [r3, #0]
 8011290:	605a      	str	r2, [r3, #4]
 8011292:	609a      	str	r2, [r3, #8]
 8011294:	233c      	movs	r3, #60	; 0x3c
 8011296:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 801129a:	231b      	movs	r3, #27
 801129c:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80112a0:	231c      	movs	r3, #28
 80112a2:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80112a6:	233e      	movs	r3, #62	; 0x3e
 80112a8:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80112ac:	2319      	movs	r3, #25
 80112ae:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 80112b2:	231a      	movs	r3, #26
 80112b4:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 80112b8:	233d      	movs	r3, #61	; 0x3d
 80112ba:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 80112be:	2318      	movs	r3, #24
 80112c0:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 80112c4:	231d      	movs	r3, #29
 80112c6:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80112ca:	2321      	movs	r3, #33	; 0x21
 80112cc:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80112d0:	2317      	movs	r3, #23
 80112d2:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80112d6:	231e      	movs	r3, #30
 80112d8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80112dc:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80112e0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80112e4:	2304      	movs	r3, #4
 80112e6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80112ea:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7f0 faea 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 80112f4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80112f8:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80112fc:	9300      	str	r3, [sp, #0]
 80112fe:	4613      	mov	r3, r2
 8011300:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8011304:	ca06      	ldmia	r2, {r1, r2}
 8011306:	481c      	ldr	r0, [pc, #112]	; (8011378 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8011308:	f7f0 faf6 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 801130c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8011310:	4618      	mov	r0, r3
 8011312:	f7f0 fae5 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8011316:	1d3b      	adds	r3, r7, #4
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d10e      	bne.n	801133c <_Z41__static_initialization_and_destruction_0ii+0x378>
 801131e:	463b      	mov	r3, r7
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011326:	4293      	cmp	r3, r2
 8011328:	d108      	bne.n	801133c <_Z41__static_initialization_and_destruction_0ii+0x378>
 801132a:	4813      	ldr	r0, [pc, #76]	; (8011378 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 801132c:	f7f4 fe14 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8011330:	4810      	ldr	r0, [pc, #64]	; (8011374 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8011332:	f7f4 fe1e 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8011336:	4804      	ldr	r0, [pc, #16]	; (8011348 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8011338:	f7f4 fe28 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 801133c:	bf00      	nop
 801133e:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8011342:	46bd      	mov	sp, r7
 8011344:	bd90      	pop	{r4, r7, pc}
 8011346:	bf00      	nop
 8011348:	2000028c 	.word	0x2000028c
 801134c:	0801ced8 	.word	0x0801ced8
 8011350:	0801cee0 	.word	0x0801cee0
 8011354:	0801cee8 	.word	0x0801cee8
 8011358:	0801cef0 	.word	0x0801cef0
 801135c:	0801cef8 	.word	0x0801cef8
 8011360:	0801cf00 	.word	0x0801cf00
 8011364:	0801cf04 	.word	0x0801cf04
 8011368:	0801cf0c 	.word	0x0801cf0c
 801136c:	0801cf14 	.word	0x0801cf14
 8011370:	0801cf1c 	.word	0x0801cf1c
 8011374:	200002a4 	.word	0x200002a4
 8011378:	200002bc 	.word	0x200002bc

0801137c <_GLOBAL__sub_I__ZN6ParserC2EP5LexerP11Transmitter>:
 801137c:	b580      	push	{r7, lr}
 801137e:	af00      	add	r7, sp, #0
 8011380:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011384:	2001      	movs	r0, #1
 8011386:	f7ff fe1d 	bl	8010fc4 <_Z41__static_initialization_and_destruction_0ii>
 801138a:	bd80      	pop	{r7, pc}

0801138c <_GLOBAL__sub_D__ZN6ParserC2EP5LexerP11Transmitter>:
 801138c:	b580      	push	{r7, lr}
 801138e:	af00      	add	r7, sp, #0
 8011390:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011394:	2000      	movs	r0, #0
 8011396:	f7ff fe15 	bl	8010fc4 <_Z41__static_initialization_and_destruction_0ii>
 801139a:	bd80      	pop	{r7, pc}

0801139c <_ZN6SourceC1EP20__UART_HandleTypeDef>:

#ifdef TESTS
static std::ifstream indata{};
#endif

Source::Source(UART_HandleTypeDef* huart)
 801139c:	b480      	push	{r7}
 801139e:	b083      	sub	sp, #12
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
 80113a6:	4a09      	ldr	r2, [pc, #36]	; (80113cc <_ZN6SourceC1EP20__UART_HandleTypeDef+0x30>)
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	601a      	str	r2, [r3, #0]
{
	line = 1;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2201      	movs	r2, #1
 80113b0:	605a      	str	r2, [r3, #4]
	position = 0;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2200      	movs	r2, #0
 80113b6:	609a      	str	r2, [r3, #8]
	this->huart = huart;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	683a      	ldr	r2, [r7, #0]
 80113bc:	60da      	str	r2, [r3, #12]
#ifdef TESTS
    indata.open("code.txt");
#endif
}
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	4618      	mov	r0, r3
 80113c2:	370c      	adds	r7, #12
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr
 80113cc:	0801d258 	.word	0x0801d258

080113d0 <_ZN6SourceD1Ev>:

Source::~Source()
 80113d0:	b480      	push	{r7}
 80113d2:	b083      	sub	sp, #12
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	4a04      	ldr	r2, [pc, #16]	; (80113ec <_ZN6SourceD1Ev+0x1c>)
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	601a      	str	r2, [r3, #0]
{
#ifdef TESTS
    indata.close();
#endif
}
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	4618      	mov	r0, r3
 80113e2:	370c      	adds	r7, #12
 80113e4:	46bd      	mov	sp, r7
 80113e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ea:	4770      	bx	lr
 80113ec:	0801d258 	.word	0x0801d258

080113f0 <_ZN6SourceD0Ev>:
Source::~Source()
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
}
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f7ff ffe9 	bl	80113d0 <_ZN6SourceD1Ev>
 80113fe:	2110      	movs	r1, #16
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f008 f898 	bl	8019536 <_ZdlPvj>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	4618      	mov	r0, r3
 801140a:	3708      	adds	r7, #8
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <_ZN6Source8get_lineEv>:

int Source::get_line()
{
 8011410:	b480      	push	{r7}
 8011412:	b083      	sub	sp, #12
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
	return line;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	685b      	ldr	r3, [r3, #4]
}
 801141c:	4618      	mov	r0, r3
 801141e:	370c      	adds	r7, #12
 8011420:	46bd      	mov	sp, r7
 8011422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011426:	4770      	bx	lr

08011428 <_ZN6Source12get_positionEv>:

int Source::get_position()
{
 8011428:	b480      	push	{r7}
 801142a:	b083      	sub	sp, #12
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
	return position;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	689b      	ldr	r3, [r3, #8]
}
 8011434:	4618      	mov	r0, r3
 8011436:	370c      	adds	r7, #12
 8011438:	46bd      	mov	sp, r7
 801143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143e:	4770      	bx	lr

08011440 <_ZN6Source15update_positionEh>:

// update line and position in line depending on received char
void Source::update_position(uint8_t rx_buffer)
{
 8011440:	b480      	push	{r7}
 8011442:	b083      	sub	sp, #12
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	460b      	mov	r3, r1
 801144a:	70fb      	strb	r3, [r7, #3]
	if (rx_buffer == '\n')
 801144c:	78fb      	ldrb	r3, [r7, #3]
 801144e:	2b0a      	cmp	r3, #10
 8011450:	d108      	bne.n	8011464 <_ZN6Source15update_positionEh+0x24>
	{
		++line;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	685b      	ldr	r3, [r3, #4]
 8011456:	1c5a      	adds	r2, r3, #1
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	605a      	str	r2, [r3, #4]
		position = 0;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2200      	movs	r2, #0
 8011460:	609a      	str	r2, [r3, #8]
	}
	else
	{
		++position;
	}
}
 8011462:	e004      	b.n	801146e <_ZN6Source15update_positionEh+0x2e>
		++position;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	689b      	ldr	r3, [r3, #8]
 8011468:	1c5a      	adds	r2, r3, #1
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	609a      	str	r2, [r3, #8]
}
 801146e:	bf00      	nop
 8011470:	370c      	adds	r7, #12
 8011472:	46bd      	mov	sp, r7
 8011474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011478:	4770      	bx	lr
	...

0801147c <_ZN6Source17receive_code_charEv>:

// receive char with UART in blocking mode
char Source::receive_code_char()
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b082      	sub	sp, #8
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
    static uint8_t rx_buffer;
#ifndef TESTS
    static uint8_t tx_buf;
    tx_buf = 'c';
 8011484:	4b0e      	ldr	r3, [pc, #56]	; (80114c0 <_ZN6Source17receive_code_charEv+0x44>)
 8011486:	2263      	movs	r2, #99	; 0x63
 8011488:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, &tx_buf, 1, 100);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	68d8      	ldr	r0, [r3, #12]
 801148e:	2364      	movs	r3, #100	; 0x64
 8011490:	2201      	movs	r2, #1
 8011492:	490b      	ldr	r1, [pc, #44]	; (80114c0 <_ZN6Source17receive_code_charEv+0x44>)
 8011494:	f007 f8cc 	bl	8018630 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, &rx_buffer, 1, -1);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	68d8      	ldr	r0, [r3, #12]
 801149c:	f04f 33ff 	mov.w	r3, #4294967295
 80114a0:	2201      	movs	r2, #1
 80114a2:	4908      	ldr	r1, [pc, #32]	; (80114c4 <_ZN6Source17receive_code_charEv+0x48>)
 80114a4:	f007 f957 	bl	8018756 <HAL_UART_Receive>
#else
	indata >> rx_buffer;
#endif
	update_position(rx_buffer);
 80114a8:	4b06      	ldr	r3, [pc, #24]	; (80114c4 <_ZN6Source17receive_code_charEv+0x48>)
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	4619      	mov	r1, r3
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f7ff ffc6 	bl	8011440 <_ZN6Source15update_positionEh>

	return rx_buffer;
 80114b4:	4b03      	ldr	r3, [pc, #12]	; (80114c4 <_ZN6Source17receive_code_charEv+0x48>)
 80114b6:	781b      	ldrb	r3, [r3, #0]
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3708      	adds	r7, #8
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	200002d5 	.word	0x200002d5
 80114c4:	200002d4 	.word	0x200002d4

080114c8 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEED1Ev>:
    struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f000 f9ab 	bl	801182e <_ZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEED1Ev>
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	4618      	mov	r0, r3
 80114dc:	3708      	adds	r7, #8
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}

080114e2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEED1Ev>:
    struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 80114e2:	b580      	push	{r7, lr}
 80114e4:	b082      	sub	sp, #8
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	6078      	str	r0, [r7, #4]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7ff ffeb 	bl	80114c8 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEED1Ev>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	4618      	mov	r0, r3
 80114f6:	3708      	adds	r7, #8
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}

080114fc <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEED1Ev>:
    struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b082      	sub	sp, #8
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	4618      	mov	r0, r3
 8011508:	f7ff ffeb 	bl	80114e2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEED1Ev>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	4618      	mov	r0, r3
 8011510:	3708      	adds	r7, #8
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}

08011516 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEED1Ev>:
    struct _Move_assign_base : _Copy_assign_alias<_Types...>
 8011516:	b580      	push	{r7, lr}
 8011518:	b082      	sub	sp, #8
 801151a:	af00      	add	r7, sp, #0
 801151c:	6078      	str	r0, [r7, #4]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	4618      	mov	r0, r3
 8011522:	f7ff ffeb 	bl	80114fc <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEED1Ev>
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	4618      	mov	r0, r3
 801152a:	3708      	adds	r7, #8
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}

08011530 <_ZNSt8__detail9__variant13_Variant_baseIJ10Assignment13Function_call15While_statement12If_statementEED1Ev>:
    struct _Variant_base : _Move_assign_alias<_Types...>
 8011530:	b580      	push	{r7, lr}
 8011532:	b082      	sub	sp, #8
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	4618      	mov	r0, r3
 801153c:	f7ff ffeb 	bl	8011516 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJ10Assignment13Function_call15While_statement12If_statementEED1Ev>
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	4618      	mov	r0, r3
 8011544:	3708      	adds	r7, #8
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}

0801154a <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEED1Ev>:
      ~variant() = default;
 801154a:	b580      	push	{r7, lr}
 801154c:	b082      	sub	sp, #8
 801154e:	af00      	add	r7, sp, #0
 8011550:	6078      	str	r0, [r7, #4]
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	4618      	mov	r0, r3
 8011556:	f7ff ffeb 	bl	8011530 <_ZNSt8__detail9__variant13_Variant_baseIJ10Assignment13Function_call15While_statement12If_statementEED1Ev>
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	4618      	mov	r0, r3
 801155e:	3708      	adds	r7, #8
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}

08011564 <_ZN9StatementD1Ev>:
	STATEMENT_IF
}statement_type;

typedef std::variant<Assignment, Function_call, While_statement, If_statement> statement_content;

class Statement
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	3304      	adds	r3, #4
 8011570:	4618      	mov	r0, r3
 8011572:	f7ff ffea 	bl	801154a <_ZNSt7variantIJ10Assignment13Function_call15While_statement12If_statementEED1Ev>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	4618      	mov	r0, r3
 801157a:	3708      	adds	r7, #8
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <_ZN4BodyD1Ev>:
#include <Statement.h>

Body::~Body()
 8011580:	b590      	push	{r4, r7, lr}
 8011582:	b087      	sub	sp, #28
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
{
	for(Statement* s : statements)
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	617b      	str	r3, [r7, #20]
 801158c:	6978      	ldr	r0, [r7, #20]
 801158e:	f7fa fc13 	bl	800bdb8 <_ZNSt6vectorIP9StatementSaIS1_EE5beginEv>
 8011592:	4603      	mov	r3, r0
 8011594:	60fb      	str	r3, [r7, #12]
 8011596:	6978      	ldr	r0, [r7, #20]
 8011598:	f7fa fc36 	bl	800be08 <_ZNSt6vectorIP9StatementSaIS1_EE3endEv>
 801159c:	4603      	mov	r3, r0
 801159e:	60bb      	str	r3, [r7, #8]
 80115a0:	f107 0208 	add.w	r2, r7, #8
 80115a4:	f107 030c 	add.w	r3, r7, #12
 80115a8:	4611      	mov	r1, r2
 80115aa:	4618      	mov	r0, r3
 80115ac:	f000 f90b 	bl	80117c6 <_ZN9__gnu_cxxneIPP9StatementSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80115b0:	4603      	mov	r3, r0
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d017      	beq.n	80115e6 <_ZN4BodyD1Ev+0x66>
 80115b6:	f107 030c 	add.w	r3, r7, #12
 80115ba:	4618      	mov	r0, r3
 80115bc:	f000 f92b 	bl	8011816 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEdeEv>
 80115c0:	4603      	mov	r3, r0
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	613b      	str	r3, [r7, #16]
	{
		delete s;
 80115c6:	693c      	ldr	r4, [r7, #16]
 80115c8:	2c00      	cmp	r4, #0
 80115ca:	d006      	beq.n	80115da <_ZN4BodyD1Ev+0x5a>
 80115cc:	4620      	mov	r0, r4
 80115ce:	f7ff ffc9 	bl	8011564 <_ZN9StatementD1Ev>
 80115d2:	2134      	movs	r1, #52	; 0x34
 80115d4:	4620      	mov	r0, r4
 80115d6:	f007 ffae 	bl	8019536 <_ZdlPvj>
	for(Statement* s : statements)
 80115da:	f107 030c 	add.w	r3, r7, #12
 80115de:	4618      	mov	r0, r3
 80115e0:	f000 f909 	bl	80117f6 <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEppEv>
 80115e4:	e7dc      	b.n	80115a0 <_ZN4BodyD1Ev+0x20>
Body::~Body()
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	4618      	mov	r0, r3
 80115ea:	f000 f8d1 	bl	8011790 <_ZNSt6vectorIP9StatementSaIS1_EED1Ev>
	}
}
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	4618      	mov	r0, r3
 80115f2:	371c      	adds	r7, #28
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd90      	pop	{r4, r7, pc}

080115f8 <_ZN12If_statementD1Ev>:

If_statement::~If_statement()
 80115f8:	b590      	push	{r4, r7, lr}
 80115fa:	b08b      	sub	sp, #44	; 0x2c
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
{
	for(Expression* e : conditions)
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	627b      	str	r3, [r7, #36]	; 0x24
 8011604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011606:	f7fc f844 	bl	800d692 <_ZNSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 801160a:	4603      	mov	r3, r0
 801160c:	617b      	str	r3, [r7, #20]
 801160e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011610:	f7fa fcbb 	bl	800bf8a <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>
 8011614:	4603      	mov	r3, r0
 8011616:	613b      	str	r3, [r7, #16]
 8011618:	f107 0210 	add.w	r2, r7, #16
 801161c:	f107 0314 	add.w	r3, r7, #20
 8011620:	4611      	mov	r1, r2
 8011622:	4618      	mov	r0, r3
 8011624:	f000 f945 	bl	80118b2 <_ZN9__gnu_cxxneIPP10ExpressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8011628:	4603      	mov	r3, r0
 801162a:	2b00      	cmp	r3, #0
 801162c:	d017      	beq.n	801165e <_ZN12If_statementD1Ev+0x66>
 801162e:	f107 0314 	add.w	r3, r7, #20
 8011632:	4618      	mov	r0, r3
 8011634:	f7fd fb43 	bl	800ecbe <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEdeEv>
 8011638:	4603      	mov	r3, r0
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	61bb      	str	r3, [r7, #24]
	{
		delete e;
 801163e:	69bc      	ldr	r4, [r7, #24]
 8011640:	2c00      	cmp	r4, #0
 8011642:	d006      	beq.n	8011652 <_ZN12If_statementD1Ev+0x5a>
 8011644:	4620      	mov	r0, r4
 8011646:	f7ef ffe2 	bl	800160e <_ZN10ExpressionD1Ev>
 801164a:	210c      	movs	r1, #12
 801164c:	4620      	mov	r0, r4
 801164e:	f007 ff72 	bl	8019536 <_ZdlPvj>
	for(Expression* e : conditions)
 8011652:	f107 0314 	add.w	r3, r7, #20
 8011656:	4618      	mov	r0, r3
 8011658:	f000 f943 	bl	80118e2 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEppEv>
 801165c:	e7dc      	b.n	8011618 <_ZN12If_statementD1Ev+0x20>
	}

	for(Body* b : if_bodies)
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	330c      	adds	r3, #12
 8011662:	623b      	str	r3, [r7, #32]
 8011664:	6a38      	ldr	r0, [r7, #32]
 8011666:	f7fc f8e4 	bl	800d832 <_ZNSt6vectorIP4BodySaIS1_EE5beginEv>
 801166a:	4603      	mov	r3, r0
 801166c:	60fb      	str	r3, [r7, #12]
 801166e:	6a38      	ldr	r0, [r7, #32]
 8011670:	f7fa fd2b 	bl	800c0ca <_ZNSt6vectorIP4BodySaIS1_EE3endEv>
 8011674:	4603      	mov	r3, r0
 8011676:	60bb      	str	r3, [r7, #8]
 8011678:	f107 0208 	add.w	r2, r7, #8
 801167c:	f107 030c 	add.w	r3, r7, #12
 8011680:	4611      	mov	r1, r2
 8011682:	4618      	mov	r0, r3
 8011684:	f000 f93d 	bl	8011902 <_ZN9__gnu_cxxneIPP4BodySt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8011688:	4603      	mov	r3, r0
 801168a:	2b00      	cmp	r3, #0
 801168c:	d017      	beq.n	80116be <_ZN12If_statementD1Ev+0xc6>
 801168e:	f107 030c 	add.w	r3, r7, #12
 8011692:	4618      	mov	r0, r3
 8011694:	f000 f95d 	bl	8011952 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEdeEv>
 8011698:	4603      	mov	r3, r0
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	61fb      	str	r3, [r7, #28]
	{
		delete b;
 801169e:	69fc      	ldr	r4, [r7, #28]
 80116a0:	2c00      	cmp	r4, #0
 80116a2:	d006      	beq.n	80116b2 <_ZN12If_statementD1Ev+0xba>
 80116a4:	4620      	mov	r0, r4
 80116a6:	f7ff ff6b 	bl	8011580 <_ZN4BodyD1Ev>
 80116aa:	210c      	movs	r1, #12
 80116ac:	4620      	mov	r0, r4
 80116ae:	f007 ff42 	bl	8019536 <_ZdlPvj>
	for(Body* b : if_bodies)
 80116b2:	f107 030c 	add.w	r3, r7, #12
 80116b6:	4618      	mov	r0, r3
 80116b8:	f000 f93b 	bl	8011932 <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEppEv>
 80116bc:	e7dc      	b.n	8011678 <_ZN12If_statementD1Ev+0x80>
If_statement::~If_statement()
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	330c      	adds	r3, #12
 80116c2:	4618      	mov	r0, r3
 80116c4:	f000 f8da 	bl	801187c <_ZNSt6vectorIP4BodySaIS1_EED1Ev>
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	4618      	mov	r0, r3
 80116cc:	f000 f8bb 	bl	8011846 <_ZNSt6vectorIP10ExpressionSaIS1_EED1Ev>
	}
}
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	4618      	mov	r0, r3
 80116d4:	372c      	adds	r7, #44	; 0x2c
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd90      	pop	{r4, r7, pc}

080116da <_ZN13Function_callD1Ev>:

Function_call::~Function_call()
 80116da:	b590      	push	{r4, r7, lr}
 80116dc:	b087      	sub	sp, #28
 80116de:	af00      	add	r7, sp, #0
 80116e0:	6078      	str	r0, [r7, #4]
{
	for(Expression* e : arguments)
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	3318      	adds	r3, #24
 80116e6:	617b      	str	r3, [r7, #20]
 80116e8:	6978      	ldr	r0, [r7, #20]
 80116ea:	f7fb ffd2 	bl	800d692 <_ZNSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 80116ee:	4603      	mov	r3, r0
 80116f0:	60fb      	str	r3, [r7, #12]
 80116f2:	6978      	ldr	r0, [r7, #20]
 80116f4:	f7fa fc49 	bl	800bf8a <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>
 80116f8:	4603      	mov	r3, r0
 80116fa:	60bb      	str	r3, [r7, #8]
 80116fc:	f107 0208 	add.w	r2, r7, #8
 8011700:	f107 030c 	add.w	r3, r7, #12
 8011704:	4611      	mov	r1, r2
 8011706:	4618      	mov	r0, r3
 8011708:	f000 f8d3 	bl	80118b2 <_ZN9__gnu_cxxneIPP10ExpressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 801170c:	4603      	mov	r3, r0
 801170e:	2b00      	cmp	r3, #0
 8011710:	d017      	beq.n	8011742 <_ZN13Function_callD1Ev+0x68>
 8011712:	f107 030c 	add.w	r3, r7, #12
 8011716:	4618      	mov	r0, r3
 8011718:	f7fd fad1 	bl	800ecbe <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEdeEv>
 801171c:	4603      	mov	r3, r0
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	613b      	str	r3, [r7, #16]
	{
		delete e;
 8011722:	693c      	ldr	r4, [r7, #16]
 8011724:	2c00      	cmp	r4, #0
 8011726:	d006      	beq.n	8011736 <_ZN13Function_callD1Ev+0x5c>
 8011728:	4620      	mov	r0, r4
 801172a:	f7ef ff70 	bl	800160e <_ZN10ExpressionD1Ev>
 801172e:	210c      	movs	r1, #12
 8011730:	4620      	mov	r0, r4
 8011732:	f007 ff00 	bl	8019536 <_ZdlPvj>
	for(Expression* e : arguments)
 8011736:	f107 030c 	add.w	r3, r7, #12
 801173a:	4618      	mov	r0, r3
 801173c:	f000 f8d1 	bl	80118e2 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEppEv>
 8011740:	e7dc      	b.n	80116fc <_ZN13Function_callD1Ev+0x22>
Function_call::~Function_call()
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	3318      	adds	r3, #24
 8011746:	4618      	mov	r0, r3
 8011748:	f000 f87d 	bl	8011846 <_ZNSt6vectorIP10ExpressionSaIS1_EED1Ev>
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	4618      	mov	r0, r3
 8011750:	f008 f8cb 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	4618      	mov	r0, r3
 8011758:	371c      	adds	r7, #28
 801175a:	46bd      	mov	sp, r7
 801175c:	bd90      	pop	{r4, r7, pc}

0801175e <_ZN8VariableD1Ev>:


Variable::~Variable()
 801175e:	b590      	push	{r4, r7, lr}
 8011760:	b083      	sub	sp, #12
 8011762:	af00      	add	r7, sp, #0
 8011764:	6078      	str	r0, [r7, #4]
{
	delete index;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	69dc      	ldr	r4, [r3, #28]
 801176a:	2c00      	cmp	r4, #0
 801176c:	d006      	beq.n	801177c <_ZN8VariableD1Ev+0x1e>
 801176e:	4620      	mov	r0, r4
 8011770:	f7ef ff4d 	bl	800160e <_ZN10ExpressionD1Ev>
 8011774:	210c      	movs	r1, #12
 8011776:	4620      	mov	r0, r4
 8011778:	f007 fedd 	bl	8019536 <_ZdlPvj>
Variable::~Variable()
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	3304      	adds	r3, #4
 8011780:	4618      	mov	r0, r3
 8011782:	f008 f8b2 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	4618      	mov	r0, r3
 801178a:	370c      	adds	r7, #12
 801178c:	46bd      	mov	sp, r7
 801178e:	bd90      	pop	{r4, r7, pc}

08011790 <_ZNSt6vectorIP9StatementSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8011790:	b5b0      	push	{r4, r5, r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681c      	ldr	r4, [r3, #0]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7fa f972 	bl	800ba8c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 80117a8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80117aa:	461a      	mov	r2, r3
 80117ac:	4629      	mov	r1, r5
 80117ae:	4620      	mov	r0, r4
 80117b0:	f7fa f977 	bl	800baa2 <_ZSt8_DestroyIPP9StatementS1_EvT_S3_RSaIT0_E>
      }
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	4618      	mov	r0, r3
 80117b8:	f000 f8e3 	bl	8011982 <_ZNSt12_Vector_baseIP9StatementSaIS1_EED1Ev>
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	4618      	mov	r0, r3
 80117c0:	3708      	adds	r7, #8
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bdb0      	pop	{r4, r5, r7, pc}

080117c6 <_ZN9__gnu_cxxneIPP9StatementSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80117c6:	b590      	push	{r4, r7, lr}
 80117c8:	b083      	sub	sp, #12
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	6078      	str	r0, [r7, #4]
 80117ce:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f7fc ff31 	bl	800e638 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 80117d6:	4603      	mov	r3, r0
 80117d8:	681c      	ldr	r4, [r3, #0]
 80117da:	6838      	ldr	r0, [r7, #0]
 80117dc:	f7fc ff2c 	bl	800e638 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 80117e0:	4603      	mov	r3, r0
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	429c      	cmp	r4, r3
 80117e6:	bf14      	ite	ne
 80117e8:	2301      	movne	r3, #1
 80117ea:	2300      	moveq	r3, #0
 80117ec:	b2db      	uxtb	r3, r3
 80117ee:	4618      	mov	r0, r3
 80117f0:	370c      	adds	r7, #12
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd90      	pop	{r4, r7, pc}

080117f6 <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80117f6:	b480      	push	{r7}
 80117f8:	b083      	sub	sp, #12
 80117fa:	af00      	add	r7, sp, #0
 80117fc:	6078      	str	r0, [r7, #4]
	++_M_current;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	1d1a      	adds	r2, r3, #4
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	601a      	str	r2, [r3, #0]
	return *this;
 8011808:	687b      	ldr	r3, [r7, #4]
      }
 801180a:	4618      	mov	r0, r3
 801180c:	370c      	adds	r7, #12
 801180e:	46bd      	mov	sp, r7
 8011810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011814:	4770      	bx	lr

08011816 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8011816:	b480      	push	{r7}
 8011818:	b083      	sub	sp, #12
 801181a:	af00      	add	r7, sp, #0
 801181c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	4618      	mov	r0, r3
 8011824:	370c      	adds	r7, #12
 8011826:	46bd      	mov	sp, r7
 8011828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182c:	4770      	bx	lr

0801182e <_ZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEED1Ev>:
      ~_Variant_storage()
 801182e:	b580      	push	{r7, lr}
 8011830:	b082      	sub	sp, #8
 8011832:	af00      	add	r7, sp, #0
 8011834:	6078      	str	r0, [r7, #4]
      { _M_reset(); }
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f7fb f8e0 	bl	800c9fc <_ZNSt8__detail9__variant16_Variant_storageILb0EJ10Assignment13Function_call15While_statement12If_statementEE8_M_resetEv>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	4618      	mov	r0, r3
 8011840:	3708      	adds	r7, #8
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}

08011846 <_ZNSt6vectorIP10ExpressionSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8011846:	b5b0      	push	{r4, r5, r7, lr}
 8011848:	b082      	sub	sp, #8
 801184a:	af00      	add	r7, sp, #0
 801184c:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681c      	ldr	r4, [r3, #0]
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	4618      	mov	r0, r3
 801185a:	f7fa fd01 	bl	800c260 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 801185e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011860:	461a      	mov	r2, r3
 8011862:	4629      	mov	r1, r5
 8011864:	4620      	mov	r0, r4
 8011866:	f7fa fd06 	bl	800c276 <_ZSt8_DestroyIPP10ExpressionS1_EvT_S3_RSaIT0_E>
      }
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	4618      	mov	r0, r3
 801186e:	f000 f8ad 	bl	80119cc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EED1Ev>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	4618      	mov	r0, r3
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bdb0      	pop	{r4, r5, r7, pc}

0801187c <_ZNSt6vectorIP4BodySaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801187c:	b5b0      	push	{r4, r5, r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681c      	ldr	r4, [r3, #0]
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	4618      	mov	r0, r3
 8011890:	f7fa fd3d 	bl	800c30e <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 8011894:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011896:	461a      	mov	r2, r3
 8011898:	4629      	mov	r1, r5
 801189a:	4620      	mov	r0, r4
 801189c:	f7fa fd42 	bl	800c324 <_ZSt8_DestroyIPP4BodyS1_EvT_S3_RSaIT0_E>
      }
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	4618      	mov	r0, r3
 80118a4:	f000 f8b7 	bl	8011a16 <_ZNSt12_Vector_baseIP4BodySaIS1_EED1Ev>
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	4618      	mov	r0, r3
 80118ac:	3708      	adds	r7, #8
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bdb0      	pop	{r4, r5, r7, pc}

080118b2 <_ZN9__gnu_cxxneIPP10ExpressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80118b2:	b590      	push	{r4, r7, lr}
 80118b4:	b083      	sub	sp, #12
 80118b6:	af00      	add	r7, sp, #0
 80118b8:	6078      	str	r0, [r7, #4]
 80118ba:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f7fb ff35 	bl	800d72c <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 80118c2:	4603      	mov	r3, r0
 80118c4:	681c      	ldr	r4, [r3, #0]
 80118c6:	6838      	ldr	r0, [r7, #0]
 80118c8:	f7fb ff30 	bl	800d72c <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 80118cc:	4603      	mov	r3, r0
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	429c      	cmp	r4, r3
 80118d2:	bf14      	ite	ne
 80118d4:	2301      	movne	r3, #1
 80118d6:	2300      	moveq	r3, #0
 80118d8:	b2db      	uxtb	r3, r3
 80118da:	4618      	mov	r0, r3
 80118dc:	370c      	adds	r7, #12
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd90      	pop	{r4, r7, pc}

080118e2 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80118e2:	b480      	push	{r7}
 80118e4:	b083      	sub	sp, #12
 80118e6:	af00      	add	r7, sp, #0
 80118e8:	6078      	str	r0, [r7, #4]
	++_M_current;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	1d1a      	adds	r2, r3, #4
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	601a      	str	r2, [r3, #0]
	return *this;
 80118f4:	687b      	ldr	r3, [r7, #4]
      }
 80118f6:	4618      	mov	r0, r3
 80118f8:	370c      	adds	r7, #12
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr

08011902 <_ZN9__gnu_cxxneIPP4BodySt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011902:	b590      	push	{r4, r7, lr}
 8011904:	b083      	sub	sp, #12
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
 801190a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f7fb ffdd 	bl	800d8cc <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 8011912:	4603      	mov	r3, r0
 8011914:	681c      	ldr	r4, [r3, #0]
 8011916:	6838      	ldr	r0, [r7, #0]
 8011918:	f7fb ffd8 	bl	800d8cc <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 801191c:	4603      	mov	r3, r0
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	429c      	cmp	r4, r3
 8011922:	bf14      	ite	ne
 8011924:	2301      	movne	r3, #1
 8011926:	2300      	moveq	r3, #0
 8011928:	b2db      	uxtb	r3, r3
 801192a:	4618      	mov	r0, r3
 801192c:	370c      	adds	r7, #12
 801192e:	46bd      	mov	sp, r7
 8011930:	bd90      	pop	{r4, r7, pc}

08011932 <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8011932:	b480      	push	{r7}
 8011934:	b083      	sub	sp, #12
 8011936:	af00      	add	r7, sp, #0
 8011938:	6078      	str	r0, [r7, #4]
	++_M_current;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	1d1a      	adds	r2, r3, #4
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	601a      	str	r2, [r3, #0]
	return *this;
 8011944:	687b      	ldr	r3, [r7, #4]
      }
 8011946:	4618      	mov	r0, r3
 8011948:	370c      	adds	r7, #12
 801194a:	46bd      	mov	sp, r7
 801194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011950:	4770      	bx	lr

08011952 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8011952:	b480      	push	{r7}
 8011954:	b083      	sub	sp, #12
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	4618      	mov	r0, r3
 8011960:	370c      	adds	r7, #12
 8011962:	46bd      	mov	sp, r7
 8011964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011968:	4770      	bx	lr

0801196a <_ZNSt12_Vector_baseIP9StatementSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 801196a:	b580      	push	{r7, lr}
 801196c:	b082      	sub	sp, #8
 801196e:	af00      	add	r7, sp, #0
 8011970:	6078      	str	r0, [r7, #4]
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f7f9 f91e 	bl	800abb4 <_ZNSaIP9StatementED1Ev>
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	4618      	mov	r0, r3
 801197c:	3708      	adds	r7, #8
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}

08011982 <_ZNSt12_Vector_baseIP9StatementSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8011982:	b580      	push	{r7, lr}
 8011984:	b082      	sub	sp, #8
 8011986:	af00      	add	r7, sp, #0
 8011988:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	689a      	ldr	r2, [r3, #8]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	1ad3      	subs	r3, r2, r3
 8011998:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 801199a:	461a      	mov	r2, r3
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f7fa f862 	bl	800ba66 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE13_M_deallocateEPS1_j>
      }
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7ff ffe0 	bl	801196a <_ZNSt12_Vector_baseIP9StatementSaIS1_EE12_Vector_implD1Ev>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	4618      	mov	r0, r3
 80119ae:	3708      	adds	r7, #8
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}

080119b4 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f7f9 fbe3 	bl	800b188 <_ZNSaIP10ExpressionED1Ev>
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	4618      	mov	r0, r3
 80119c6:	3708      	adds	r7, #8
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b082      	sub	sp, #8
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	689a      	ldr	r2, [r3, #8]
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	1ad3      	subs	r3, r2, r3
 80119e2:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80119e4:	461a      	mov	r2, r3
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f7fa fc27 	bl	800c23a <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7ff ffe0 	bl	80119b4 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implD1Ev>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	4618      	mov	r0, r3
 80119f8:	3708      	adds	r7, #8
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}

080119fe <_ZNSt12_Vector_baseIP4BodySaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80119fe:	b580      	push	{r7, lr}
 8011a00:	b082      	sub	sp, #8
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	6078      	str	r0, [r7, #4]
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f7f9 fbda 	bl	800b1c0 <_ZNSaIP4BodyED1Ev>
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3708      	adds	r7, #8
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}

08011a16 <_ZNSt12_Vector_baseIP4BodySaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8011a16:	b580      	push	{r7, lr}
 8011a18:	b082      	sub	sp, #8
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	689a      	ldr	r2, [r3, #8]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	1ad3      	subs	r3, r2, r3
 8011a2c:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8011a2e:	461a      	mov	r2, r3
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f7fa fc59 	bl	800c2e8 <_ZNSt12_Vector_baseIP4BodySaIS1_EE13_M_deallocateEPS1_j>
      }
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7ff ffe0 	bl	80119fe <_ZNSt12_Vector_baseIP4BodySaIS1_EE12_Vector_implD1Ev>
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	4618      	mov	r0, r3
 8011a42:	3708      	adds	r7, #8
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <_Z41__static_initialization_and_destruction_0ii>:
 8011a48:	b590      	push	{r4, r7, lr}
 8011a4a:	b0e7      	sub	sp, #412	; 0x19c
 8011a4c:	af02      	add	r7, sp, #8
 8011a4e:	1d3b      	adds	r3, r7, #4
 8011a50:	6018      	str	r0, [r3, #0]
 8011a52:	463b      	mov	r3, r7
 8011a54:	6019      	str	r1, [r3, #0]
 8011a56:	1d3b      	adds	r3, r7, #4
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2b01      	cmp	r3, #1
 8011a5c:	f040 819d 	bne.w	8011d9a <_Z41__static_initialization_and_destruction_0ii+0x352>
 8011a60:	463b      	mov	r3, r7
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a68:	4293      	cmp	r3, r2
 8011a6a:	f040 8196 	bne.w	8011d9a <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8011a6e:	f107 0314 	add.w	r3, r7, #20
 8011a72:	4618      	mov	r0, r3
 8011a74:	2322      	movs	r3, #34	; 0x22
 8011a76:	461a      	mov	r2, r3
 8011a78:	2100      	movs	r1, #0
 8011a7a:	f008 f925 	bl	8019cc8 <memset>
 8011a7e:	f107 0314 	add.w	r3, r7, #20
 8011a82:	223a      	movs	r2, #58	; 0x3a
 8011a84:	701a      	strb	r2, [r3, #0]
 8011a86:	f107 0314 	add.w	r3, r7, #20
 8011a8a:	2201      	movs	r2, #1
 8011a8c:	705a      	strb	r2, [r3, #1]
 8011a8e:	f107 0314 	add.w	r3, r7, #20
 8011a92:	220a      	movs	r2, #10
 8011a94:	709a      	strb	r2, [r3, #2]
 8011a96:	f107 0314 	add.w	r3, r7, #20
 8011a9a:	220a      	movs	r2, #10
 8011a9c:	70da      	strb	r2, [r3, #3]
 8011a9e:	f107 0314 	add.w	r3, r7, #20
 8011aa2:	222c      	movs	r2, #44	; 0x2c
 8011aa4:	711a      	strb	r2, [r3, #4]
 8011aa6:	f107 0314 	add.w	r3, r7, #20
 8011aaa:	220c      	movs	r2, #12
 8011aac:	715a      	strb	r2, [r3, #5]
 8011aae:	f107 0314 	add.w	r3, r7, #20
 8011ab2:	222e      	movs	r2, #46	; 0x2e
 8011ab4:	719a      	strb	r2, [r3, #6]
 8011ab6:	f107 0314 	add.w	r3, r7, #20
 8011aba:	220b      	movs	r2, #11
 8011abc:	71da      	strb	r2, [r3, #7]
 8011abe:	f107 0314 	add.w	r3, r7, #20
 8011ac2:	225b      	movs	r2, #91	; 0x5b
 8011ac4:	721a      	strb	r2, [r3, #8]
 8011ac6:	f107 0314 	add.w	r3, r7, #20
 8011aca:	220d      	movs	r2, #13
 8011acc:	725a      	strb	r2, [r3, #9]
 8011ace:	f107 0314 	add.w	r3, r7, #20
 8011ad2:	225d      	movs	r2, #93	; 0x5d
 8011ad4:	729a      	strb	r2, [r3, #10]
 8011ad6:	f107 0314 	add.w	r3, r7, #20
 8011ada:	220e      	movs	r2, #14
 8011adc:	72da      	strb	r2, [r3, #11]
 8011ade:	f107 0314 	add.w	r3, r7, #20
 8011ae2:	227c      	movs	r2, #124	; 0x7c
 8011ae4:	731a      	strb	r2, [r3, #12]
 8011ae6:	f107 0314 	add.w	r3, r7, #20
 8011aea:	2215      	movs	r2, #21
 8011aec:	735a      	strb	r2, [r3, #13]
 8011aee:	f107 0314 	add.w	r3, r7, #20
 8011af2:	2226      	movs	r2, #38	; 0x26
 8011af4:	739a      	strb	r2, [r3, #14]
 8011af6:	f107 0314 	add.w	r3, r7, #20
 8011afa:	2216      	movs	r2, #22
 8011afc:	73da      	strb	r2, [r3, #15]
 8011afe:	f107 0314 	add.w	r3, r7, #20
 8011b02:	222b      	movs	r2, #43	; 0x2b
 8011b04:	741a      	strb	r2, [r3, #16]
 8011b06:	f107 0314 	add.w	r3, r7, #20
 8011b0a:	221f      	movs	r2, #31
 8011b0c:	745a      	strb	r2, [r3, #17]
 8011b0e:	f107 0314 	add.w	r3, r7, #20
 8011b12:	222d      	movs	r2, #45	; 0x2d
 8011b14:	749a      	strb	r2, [r3, #18]
 8011b16:	f107 0314 	add.w	r3, r7, #20
 8011b1a:	2220      	movs	r2, #32
 8011b1c:	74da      	strb	r2, [r3, #19]
 8011b1e:	f107 0314 	add.w	r3, r7, #20
 8011b22:	222a      	movs	r2, #42	; 0x2a
 8011b24:	751a      	strb	r2, [r3, #20]
 8011b26:	f107 0314 	add.w	r3, r7, #20
 8011b2a:	2221      	movs	r2, #33	; 0x21
 8011b2c:	755a      	strb	r2, [r3, #21]
 8011b2e:	f107 0314 	add.w	r3, r7, #20
 8011b32:	222f      	movs	r2, #47	; 0x2f
 8011b34:	759a      	strb	r2, [r3, #22]
 8011b36:	f107 0314 	add.w	r3, r7, #20
 8011b3a:	2222      	movs	r2, #34	; 0x22
 8011b3c:	75da      	strb	r2, [r3, #23]
 8011b3e:	f107 0314 	add.w	r3, r7, #20
 8011b42:	225e      	movs	r2, #94	; 0x5e
 8011b44:	761a      	strb	r2, [r3, #24]
 8011b46:	f107 0314 	add.w	r3, r7, #20
 8011b4a:	2223      	movs	r2, #35	; 0x23
 8011b4c:	765a      	strb	r2, [r3, #25]
 8011b4e:	f107 0314 	add.w	r3, r7, #20
 8011b52:	2225      	movs	r2, #37	; 0x25
 8011b54:	769a      	strb	r2, [r3, #26]
 8011b56:	f107 0314 	add.w	r3, r7, #20
 8011b5a:	2224      	movs	r2, #36	; 0x24
 8011b5c:	76da      	strb	r2, [r3, #27]
 8011b5e:	f107 0314 	add.w	r3, r7, #20
 8011b62:	2228      	movs	r2, #40	; 0x28
 8011b64:	771a      	strb	r2, [r3, #28]
 8011b66:	f107 0314 	add.w	r3, r7, #20
 8011b6a:	2226      	movs	r2, #38	; 0x26
 8011b6c:	775a      	strb	r2, [r3, #29]
 8011b6e:	f107 0314 	add.w	r3, r7, #20
 8011b72:	2229      	movs	r2, #41	; 0x29
 8011b74:	779a      	strb	r2, [r3, #30]
 8011b76:	f107 0314 	add.w	r3, r7, #20
 8011b7a:	2227      	movs	r2, #39	; 0x27
 8011b7c:	77da      	strb	r2, [r3, #31]
 8011b7e:	f107 0314 	add.w	r3, r7, #20
 8011b82:	2225      	movs	r2, #37	; 0x25
 8011b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8011b88:	f107 030c 	add.w	r3, r7, #12
 8011b8c:	f107 0214 	add.w	r2, r7, #20
 8011b90:	601a      	str	r2, [r3, #0]
 8011b92:	f107 030c 	add.w	r3, r7, #12
 8011b96:	2211      	movs	r2, #17
 8011b98:	605a      	str	r2, [r3, #4]
 8011b9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7ef fda5 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8011ba4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8011ba8:	f107 020c 	add.w	r2, r7, #12
 8011bac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011bb0:	9300      	str	r3, [sp, #0]
 8011bb2:	460b      	mov	r3, r1
 8011bb4:	ca06      	ldmia	r2, {r1, r2}
 8011bb6:	4885      	ldr	r0, [pc, #532]	; (8011dcc <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8011bb8:	f7ef fdb1 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8011bbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7ef fda0 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8011bc6:	2305      	movs	r3, #5
 8011bc8:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8011bcc:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8011bd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011bd4:	497e      	ldr	r1, [pc, #504]	; (8011dd0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7ef fa66 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8011bdc:	2306      	movs	r3, #6
 8011bde:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8011be2:	f207 1263 	addw	r2, r7, #355	; 0x163
 8011be6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011bea:	331c      	adds	r3, #28
 8011bec:	4979      	ldr	r1, [pc, #484]	; (8011dd4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7ef fa82 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8011bf4:	2307      	movs	r3, #7
 8011bf6:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8011bfa:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8011bfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c02:	3338      	adds	r3, #56	; 0x38
 8011c04:	4974      	ldr	r1, [pc, #464]	; (8011dd8 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7ef fa76 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8011c0c:	2308      	movs	r3, #8
 8011c0e:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8011c12:	f207 1265 	addw	r2, r7, #357	; 0x165
 8011c16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c1a:	3354      	adds	r3, #84	; 0x54
 8011c1c:	496f      	ldr	r1, [pc, #444]	; (8011ddc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7ef fa42 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8011c24:	2309      	movs	r3, #9
 8011c26:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8011c2a:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8011c2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c32:	3370      	adds	r3, #112	; 0x70
 8011c34:	496a      	ldr	r1, [pc, #424]	; (8011de0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7ef fa86 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8011c3c:	2310      	movs	r3, #16
 8011c3e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8011c42:	f207 1267 	addw	r2, r7, #359	; 0x167
 8011c46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c4a:	338c      	adds	r3, #140	; 0x8c
 8011c4c:	4965      	ldr	r1, [pc, #404]	; (8011de4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f7ef faa2 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8011c54:	2311      	movs	r3, #17
 8011c56:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8011c5a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8011c5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c62:	33a8      	adds	r3, #168	; 0xa8
 8011c64:	4960      	ldr	r1, [pc, #384]	; (8011de8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7ef fa6e 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8011c6c:	2312      	movs	r3, #18
 8011c6e:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8011c72:	f207 1269 	addw	r2, r7, #361	; 0x169
 8011c76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c7a:	33c4      	adds	r3, #196	; 0xc4
 8011c7c:	495b      	ldr	r1, [pc, #364]	; (8011dec <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7ef fa12 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8011c84:	2313      	movs	r3, #19
 8011c86:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8011c8a:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8011c8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c92:	33e0      	adds	r3, #224	; 0xe0
 8011c94:	4956      	ldr	r1, [pc, #344]	; (8011df0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7ef fa2e 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8011c9c:	2314      	movs	r3, #20
 8011c9e:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8011ca2:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8011ca6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011caa:	33fc      	adds	r3, #252	; 0xfc
 8011cac:	4951      	ldr	r1, [pc, #324]	; (8011df4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7ef fa9a 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8011cb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011cb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011cbc:	601a      	str	r2, [r3, #0]
 8011cbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011cc2:	220a      	movs	r2, #10
 8011cc4:	605a      	str	r2, [r3, #4]
 8011cc6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7ef fdb4 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8011cd0:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8011cd4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011cd8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011cdc:	9300      	str	r3, [sp, #0]
 8011cde:	460b      	mov	r3, r1
 8011ce0:	ca06      	ldmia	r2, {r1, r2}
 8011ce2:	4845      	ldr	r0, [pc, #276]	; (8011df8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8011ce4:	f7ef fdc0 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8011ce8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7ef fdaf 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8011cf2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8011cf6:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8011cfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011cfe:	429c      	cmp	r4, r3
 8011d00:	d004      	beq.n	8011d0c <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8011d02:	3c1c      	subs	r4, #28
 8011d04:	4620      	mov	r0, r4
 8011d06:	f7ef f9c2 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8011d0a:	e7f6      	b.n	8011cfa <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8011d0c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8011d10:	2200      	movs	r2, #0
 8011d12:	601a      	str	r2, [r3, #0]
 8011d14:	605a      	str	r2, [r3, #4]
 8011d16:	609a      	str	r2, [r3, #8]
 8011d18:	233c      	movs	r3, #60	; 0x3c
 8011d1a:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8011d1e:	231b      	movs	r3, #27
 8011d20:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8011d24:	231c      	movs	r3, #28
 8011d26:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8011d2a:	233e      	movs	r3, #62	; 0x3e
 8011d2c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8011d30:	2319      	movs	r3, #25
 8011d32:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8011d36:	231a      	movs	r3, #26
 8011d38:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8011d3c:	233d      	movs	r3, #61	; 0x3d
 8011d3e:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8011d42:	2318      	movs	r3, #24
 8011d44:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8011d48:	231d      	movs	r3, #29
 8011d4a:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8011d4e:	2321      	movs	r3, #33	; 0x21
 8011d50:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8011d54:	2317      	movs	r3, #23
 8011d56:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8011d5a:	231e      	movs	r3, #30
 8011d5c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8011d60:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8011d64:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8011d68:	2304      	movs	r3, #4
 8011d6a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8011d6e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8011d72:	4618      	mov	r0, r3
 8011d74:	f7ef fda8 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8011d78:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8011d7c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8011d80:	9300      	str	r3, [sp, #0]
 8011d82:	4613      	mov	r3, r2
 8011d84:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8011d88:	ca06      	ldmia	r2, {r1, r2}
 8011d8a:	481c      	ldr	r0, [pc, #112]	; (8011dfc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8011d8c:	f7ef fdb4 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8011d90:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7ef fda3 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8011d9a:	1d3b      	adds	r3, r7, #4
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d10e      	bne.n	8011dc0 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8011da2:	463b      	mov	r3, r7
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011daa:	4293      	cmp	r3, r2
 8011dac:	d108      	bne.n	8011dc0 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8011dae:	4813      	ldr	r0, [pc, #76]	; (8011dfc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8011db0:	f7f4 f8d2 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8011db4:	4810      	ldr	r0, [pc, #64]	; (8011df8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8011db6:	f7f4 f8dc 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8011dba:	4804      	ldr	r0, [pc, #16]	; (8011dcc <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8011dbc:	f7f4 f8e6 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8011dc0:	bf00      	nop
 8011dc2:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd90      	pop	{r4, r7, pc}
 8011dca:	bf00      	nop
 8011dcc:	200002d8 	.word	0x200002d8
 8011dd0:	0801cf4c 	.word	0x0801cf4c
 8011dd4:	0801cf54 	.word	0x0801cf54
 8011dd8:	0801cf5c 	.word	0x0801cf5c
 8011ddc:	0801cf64 	.word	0x0801cf64
 8011de0:	0801cf6c 	.word	0x0801cf6c
 8011de4:	0801cf74 	.word	0x0801cf74
 8011de8:	0801cf78 	.word	0x0801cf78
 8011dec:	0801cf80 	.word	0x0801cf80
 8011df0:	0801cf88 	.word	0x0801cf88
 8011df4:	0801cf90 	.word	0x0801cf90
 8011df8:	200002f0 	.word	0x200002f0
 8011dfc:	20000308 	.word	0x20000308

08011e00 <_GLOBAL__sub_I__ZN4BodyD2Ev>:
 8011e00:	b580      	push	{r7, lr}
 8011e02:	af00      	add	r7, sp, #0
 8011e04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011e08:	2001      	movs	r0, #1
 8011e0a:	f7ff fe1d 	bl	8011a48 <_Z41__static_initialization_and_destruction_0ii>
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <_GLOBAL__sub_D__ZN4BodyD2Ev>:
 8011e10:	b580      	push	{r7, lr}
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011e18:	2000      	movs	r0, #0
 8011e1a:	f7ff fe15 	bl	8011a48 <_Z41__static_initialization_and_destruction_0ii>
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <_ZN5TokenD1Ev>:
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	3304      	adds	r3, #4
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7f4 fb29 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	4618      	mov	r0, r3
 8011e36:	3708      	adds	r7, #8
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <_ZN5Token9get_valueB5cxx11Ev>:

Token::~Token()
= default;

token_value Token::get_value()
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b082      	sub	sp, #8
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	6039      	str	r1, [r7, #0]
	return value;
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	3304      	adds	r3, #4
 8011e4a:	4619      	mov	r1, r3
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f7f4 fef0 	bl	8006c32 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS6_>
}
 8011e52:	6878      	ldr	r0, [r7, #4]
 8011e54:	3708      	adds	r7, #8
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}

08011e5a <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>:

void Token::set_value(token_value value)
{
 8011e5a:	b580      	push	{r7, lr}
 8011e5c:	b082      	sub	sp, #8
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	6078      	str	r0, [r7, #4]
 8011e62:	6039      	str	r1, [r7, #0]
	this->value = std::move(value);
 8011e64:	6838      	ldr	r0, [r7, #0]
 8011e66:	f7fa fb57 	bl	800c518 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 8011e6a:	4602      	mov	r2, r0
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	3304      	adds	r3, #4
 8011e70:	4611      	mov	r1, r2
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7fd fa11 	bl	800f29a <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS6_>
}
 8011e78:	bf00      	nop
 8011e7a:	3708      	adds	r7, #8
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}

08011e80 <_ZN5Token8get_typeEv>:

token_type Token::get_type()
{
 8011e80:	b480      	push	{r7}
 8011e82:	b083      	sub	sp, #12
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
	return type;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	781b      	ldrb	r3, [r3, #0]
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	370c      	adds	r7, #12
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <_ZN5Token8set_typeE10token_type>:

void Token::set_type(token_type type)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b083      	sub	sp, #12
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	460b      	mov	r3, r1
 8011ea2:	70fb      	strb	r3, [r7, #3]
	this->type = type;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	78fa      	ldrb	r2, [r7, #3]
 8011ea8:	701a      	strb	r2, [r3, #0]
}
 8011eaa:	bf00      	nop
 8011eac:	370c      	adds	r7, #12
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb4:	4770      	bx	lr

08011eb6 <_ZN5Token8get_lineEv>:

int Token::get_line()
{
 8011eb6:	b480      	push	{r7}
 8011eb8:	b083      	sub	sp, #12
 8011eba:	af00      	add	r7, sp, #0
 8011ebc:	6078      	str	r0, [r7, #4]
	return line;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6a1b      	ldr	r3, [r3, #32]
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	370c      	adds	r7, #12
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ecc:	4770      	bx	lr

08011ece <_ZN5Token8set_lineEi>:

void Token::set_line(int line)
{
 8011ece:	b480      	push	{r7}
 8011ed0:	b083      	sub	sp, #12
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	6078      	str	r0, [r7, #4]
 8011ed6:	6039      	str	r1, [r7, #0]
	this->line = line;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	683a      	ldr	r2, [r7, #0]
 8011edc:	621a      	str	r2, [r3, #32]
}
 8011ede:	bf00      	nop
 8011ee0:	370c      	adds	r7, #12
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee8:	4770      	bx	lr

08011eea <_ZN5Token12get_positionEv>:

int Token::get_position()
{
 8011eea:	b480      	push	{r7}
 8011eec:	b083      	sub	sp, #12
 8011eee:	af00      	add	r7, sp, #0
 8011ef0:	6078      	str	r0, [r7, #4]
	return position;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	370c      	adds	r7, #12
 8011efa:	46bd      	mov	sp, r7
 8011efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f00:	4770      	bx	lr

08011f02 <_ZN5Token12set_positionEi>:
void Token::set_position(int position)
{
 8011f02:	b480      	push	{r7}
 8011f04:	b083      	sub	sp, #12
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	6078      	str	r0, [r7, #4]
 8011f0a:	6039      	str	r1, [r7, #0]
	this->position = position;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	683a      	ldr	r2, [r7, #0]
 8011f10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011f12:	bf00      	nop
 8011f14:	370c      	adds	r7, #12
 8011f16:	46bd      	mov	sp, r7
 8011f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1c:	4770      	bx	lr
	...

08011f20 <_Z41__static_initialization_and_destruction_0ii>:
 8011f20:	b590      	push	{r4, r7, lr}
 8011f22:	b0e7      	sub	sp, #412	; 0x19c
 8011f24:	af02      	add	r7, sp, #8
 8011f26:	1d3b      	adds	r3, r7, #4
 8011f28:	6018      	str	r0, [r3, #0]
 8011f2a:	463b      	mov	r3, r7
 8011f2c:	6019      	str	r1, [r3, #0]
 8011f2e:	1d3b      	adds	r3, r7, #4
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	2b01      	cmp	r3, #1
 8011f34:	f040 819d 	bne.w	8012272 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8011f38:	463b      	mov	r3, r7
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f40:	4293      	cmp	r3, r2
 8011f42:	f040 8196 	bne.w	8012272 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8011f46:	f107 0314 	add.w	r3, r7, #20
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	2322      	movs	r3, #34	; 0x22
 8011f4e:	461a      	mov	r2, r3
 8011f50:	2100      	movs	r1, #0
 8011f52:	f007 feb9 	bl	8019cc8 <memset>
 8011f56:	f107 0314 	add.w	r3, r7, #20
 8011f5a:	223a      	movs	r2, #58	; 0x3a
 8011f5c:	701a      	strb	r2, [r3, #0]
 8011f5e:	f107 0314 	add.w	r3, r7, #20
 8011f62:	2201      	movs	r2, #1
 8011f64:	705a      	strb	r2, [r3, #1]
 8011f66:	f107 0314 	add.w	r3, r7, #20
 8011f6a:	220a      	movs	r2, #10
 8011f6c:	709a      	strb	r2, [r3, #2]
 8011f6e:	f107 0314 	add.w	r3, r7, #20
 8011f72:	220a      	movs	r2, #10
 8011f74:	70da      	strb	r2, [r3, #3]
 8011f76:	f107 0314 	add.w	r3, r7, #20
 8011f7a:	222c      	movs	r2, #44	; 0x2c
 8011f7c:	711a      	strb	r2, [r3, #4]
 8011f7e:	f107 0314 	add.w	r3, r7, #20
 8011f82:	220c      	movs	r2, #12
 8011f84:	715a      	strb	r2, [r3, #5]
 8011f86:	f107 0314 	add.w	r3, r7, #20
 8011f8a:	222e      	movs	r2, #46	; 0x2e
 8011f8c:	719a      	strb	r2, [r3, #6]
 8011f8e:	f107 0314 	add.w	r3, r7, #20
 8011f92:	220b      	movs	r2, #11
 8011f94:	71da      	strb	r2, [r3, #7]
 8011f96:	f107 0314 	add.w	r3, r7, #20
 8011f9a:	225b      	movs	r2, #91	; 0x5b
 8011f9c:	721a      	strb	r2, [r3, #8]
 8011f9e:	f107 0314 	add.w	r3, r7, #20
 8011fa2:	220d      	movs	r2, #13
 8011fa4:	725a      	strb	r2, [r3, #9]
 8011fa6:	f107 0314 	add.w	r3, r7, #20
 8011faa:	225d      	movs	r2, #93	; 0x5d
 8011fac:	729a      	strb	r2, [r3, #10]
 8011fae:	f107 0314 	add.w	r3, r7, #20
 8011fb2:	220e      	movs	r2, #14
 8011fb4:	72da      	strb	r2, [r3, #11]
 8011fb6:	f107 0314 	add.w	r3, r7, #20
 8011fba:	227c      	movs	r2, #124	; 0x7c
 8011fbc:	731a      	strb	r2, [r3, #12]
 8011fbe:	f107 0314 	add.w	r3, r7, #20
 8011fc2:	2215      	movs	r2, #21
 8011fc4:	735a      	strb	r2, [r3, #13]
 8011fc6:	f107 0314 	add.w	r3, r7, #20
 8011fca:	2226      	movs	r2, #38	; 0x26
 8011fcc:	739a      	strb	r2, [r3, #14]
 8011fce:	f107 0314 	add.w	r3, r7, #20
 8011fd2:	2216      	movs	r2, #22
 8011fd4:	73da      	strb	r2, [r3, #15]
 8011fd6:	f107 0314 	add.w	r3, r7, #20
 8011fda:	222b      	movs	r2, #43	; 0x2b
 8011fdc:	741a      	strb	r2, [r3, #16]
 8011fde:	f107 0314 	add.w	r3, r7, #20
 8011fe2:	221f      	movs	r2, #31
 8011fe4:	745a      	strb	r2, [r3, #17]
 8011fe6:	f107 0314 	add.w	r3, r7, #20
 8011fea:	222d      	movs	r2, #45	; 0x2d
 8011fec:	749a      	strb	r2, [r3, #18]
 8011fee:	f107 0314 	add.w	r3, r7, #20
 8011ff2:	2220      	movs	r2, #32
 8011ff4:	74da      	strb	r2, [r3, #19]
 8011ff6:	f107 0314 	add.w	r3, r7, #20
 8011ffa:	222a      	movs	r2, #42	; 0x2a
 8011ffc:	751a      	strb	r2, [r3, #20]
 8011ffe:	f107 0314 	add.w	r3, r7, #20
 8012002:	2221      	movs	r2, #33	; 0x21
 8012004:	755a      	strb	r2, [r3, #21]
 8012006:	f107 0314 	add.w	r3, r7, #20
 801200a:	222f      	movs	r2, #47	; 0x2f
 801200c:	759a      	strb	r2, [r3, #22]
 801200e:	f107 0314 	add.w	r3, r7, #20
 8012012:	2222      	movs	r2, #34	; 0x22
 8012014:	75da      	strb	r2, [r3, #23]
 8012016:	f107 0314 	add.w	r3, r7, #20
 801201a:	225e      	movs	r2, #94	; 0x5e
 801201c:	761a      	strb	r2, [r3, #24]
 801201e:	f107 0314 	add.w	r3, r7, #20
 8012022:	2223      	movs	r2, #35	; 0x23
 8012024:	765a      	strb	r2, [r3, #25]
 8012026:	f107 0314 	add.w	r3, r7, #20
 801202a:	2225      	movs	r2, #37	; 0x25
 801202c:	769a      	strb	r2, [r3, #26]
 801202e:	f107 0314 	add.w	r3, r7, #20
 8012032:	2224      	movs	r2, #36	; 0x24
 8012034:	76da      	strb	r2, [r3, #27]
 8012036:	f107 0314 	add.w	r3, r7, #20
 801203a:	2228      	movs	r2, #40	; 0x28
 801203c:	771a      	strb	r2, [r3, #28]
 801203e:	f107 0314 	add.w	r3, r7, #20
 8012042:	2226      	movs	r2, #38	; 0x26
 8012044:	775a      	strb	r2, [r3, #29]
 8012046:	f107 0314 	add.w	r3, r7, #20
 801204a:	2229      	movs	r2, #41	; 0x29
 801204c:	779a      	strb	r2, [r3, #30]
 801204e:	f107 0314 	add.w	r3, r7, #20
 8012052:	2227      	movs	r2, #39	; 0x27
 8012054:	77da      	strb	r2, [r3, #31]
 8012056:	f107 0314 	add.w	r3, r7, #20
 801205a:	2225      	movs	r2, #37	; 0x25
 801205c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8012060:	f107 030c 	add.w	r3, r7, #12
 8012064:	f107 0214 	add.w	r2, r7, #20
 8012068:	601a      	str	r2, [r3, #0]
 801206a:	f107 030c 	add.w	r3, r7, #12
 801206e:	2211      	movs	r2, #17
 8012070:	605a      	str	r2, [r3, #4]
 8012072:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012076:	4618      	mov	r0, r3
 8012078:	f7ef fb39 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 801207c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8012080:	f107 020c 	add.w	r2, r7, #12
 8012084:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012088:	9300      	str	r3, [sp, #0]
 801208a:	460b      	mov	r3, r1
 801208c:	ca06      	ldmia	r2, {r1, r2}
 801208e:	4885      	ldr	r0, [pc, #532]	; (80122a4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8012090:	f7ef fb45 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8012094:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012098:	4618      	mov	r0, r3
 801209a:	f7ef fb34 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 801209e:	2305      	movs	r3, #5
 80120a0:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80120a4:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80120a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80120ac:	497e      	ldr	r1, [pc, #504]	; (80122a8 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7ee fffa 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80120b4:	2306      	movs	r3, #6
 80120b6:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80120ba:	f207 1263 	addw	r2, r7, #355	; 0x163
 80120be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80120c2:	331c      	adds	r3, #28
 80120c4:	4979      	ldr	r1, [pc, #484]	; (80122ac <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80120c6:	4618      	mov	r0, r3
 80120c8:	f7ef f816 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80120cc:	2307      	movs	r3, #7
 80120ce:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80120d2:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80120d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80120da:	3338      	adds	r3, #56	; 0x38
 80120dc:	4974      	ldr	r1, [pc, #464]	; (80122b0 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80120de:	4618      	mov	r0, r3
 80120e0:	f7ef f80a 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80120e4:	2308      	movs	r3, #8
 80120e6:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80120ea:	f207 1265 	addw	r2, r7, #357	; 0x165
 80120ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80120f2:	3354      	adds	r3, #84	; 0x54
 80120f4:	496f      	ldr	r1, [pc, #444]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7ee ffd6 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 80120fc:	2309      	movs	r3, #9
 80120fe:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8012102:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8012106:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801210a:	3370      	adds	r3, #112	; 0x70
 801210c:	496a      	ldr	r1, [pc, #424]	; (80122b8 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 801210e:	4618      	mov	r0, r3
 8012110:	f7ef f81a 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8012114:	2310      	movs	r3, #16
 8012116:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 801211a:	f207 1267 	addw	r2, r7, #359	; 0x167
 801211e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012122:	338c      	adds	r3, #140	; 0x8c
 8012124:	4965      	ldr	r1, [pc, #404]	; (80122bc <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8012126:	4618      	mov	r0, r3
 8012128:	f7ef f836 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 801212c:	2311      	movs	r3, #17
 801212e:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8012132:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8012136:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801213a:	33a8      	adds	r3, #168	; 0xa8
 801213c:	4960      	ldr	r1, [pc, #384]	; (80122c0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 801213e:	4618      	mov	r0, r3
 8012140:	f7ef f802 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8012144:	2312      	movs	r3, #18
 8012146:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 801214a:	f207 1269 	addw	r2, r7, #361	; 0x169
 801214e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012152:	33c4      	adds	r3, #196	; 0xc4
 8012154:	495b      	ldr	r1, [pc, #364]	; (80122c4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8012156:	4618      	mov	r0, r3
 8012158:	f7ee ffa6 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 801215c:	2313      	movs	r3, #19
 801215e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8012162:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8012166:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801216a:	33e0      	adds	r3, #224	; 0xe0
 801216c:	4956      	ldr	r1, [pc, #344]	; (80122c8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 801216e:	4618      	mov	r0, r3
 8012170:	f7ee ffc2 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8012174:	2314      	movs	r3, #20
 8012176:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 801217a:	f207 126b 	addw	r2, r7, #363	; 0x16b
 801217e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012182:	33fc      	adds	r3, #252	; 0xfc
 8012184:	4951      	ldr	r1, [pc, #324]	; (80122cc <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8012186:	4618      	mov	r0, r3
 8012188:	f7ef f82e 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 801218c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012190:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012194:	601a      	str	r2, [r3, #0]
 8012196:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801219a:	220a      	movs	r2, #10
 801219c:	605a      	str	r2, [r3, #4]
 801219e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7ef fb48 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80121a8:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80121ac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80121b0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80121b4:	9300      	str	r3, [sp, #0]
 80121b6:	460b      	mov	r3, r1
 80121b8:	ca06      	ldmia	r2, {r1, r2}
 80121ba:	4845      	ldr	r0, [pc, #276]	; (80122d0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80121bc:	f7ef fb54 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80121c0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80121c4:	4618      	mov	r0, r3
 80121c6:	f7ef fb43 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80121ca:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80121ce:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80121d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80121d6:	429c      	cmp	r4, r3
 80121d8:	d004      	beq.n	80121e4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 80121da:	3c1c      	subs	r4, #28
 80121dc:	4620      	mov	r0, r4
 80121de:	f7ee ff56 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80121e2:	e7f6      	b.n	80121d2 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80121e4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80121e8:	2200      	movs	r2, #0
 80121ea:	601a      	str	r2, [r3, #0]
 80121ec:	605a      	str	r2, [r3, #4]
 80121ee:	609a      	str	r2, [r3, #8]
 80121f0:	233c      	movs	r3, #60	; 0x3c
 80121f2:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80121f6:	231b      	movs	r3, #27
 80121f8:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80121fc:	231c      	movs	r3, #28
 80121fe:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8012202:	233e      	movs	r3, #62	; 0x3e
 8012204:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8012208:	2319      	movs	r3, #25
 801220a:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 801220e:	231a      	movs	r3, #26
 8012210:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8012214:	233d      	movs	r3, #61	; 0x3d
 8012216:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 801221a:	2318      	movs	r3, #24
 801221c:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8012220:	231d      	movs	r3, #29
 8012222:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8012226:	2321      	movs	r3, #33	; 0x21
 8012228:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 801222c:	2317      	movs	r3, #23
 801222e:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8012232:	231e      	movs	r3, #30
 8012234:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8012238:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801223c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8012240:	2304      	movs	r3, #4
 8012242:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8012246:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801224a:	4618      	mov	r0, r3
 801224c:	f7ef fb3c 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8012250:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8012254:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8012258:	9300      	str	r3, [sp, #0]
 801225a:	4613      	mov	r3, r2
 801225c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8012260:	ca06      	ldmia	r2, {r1, r2}
 8012262:	481c      	ldr	r0, [pc, #112]	; (80122d4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8012264:	f7ef fb48 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8012268:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801226c:	4618      	mov	r0, r3
 801226e:	f7ef fb37 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8012272:	1d3b      	adds	r3, r7, #4
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d10e      	bne.n	8012298 <_Z41__static_initialization_and_destruction_0ii+0x378>
 801227a:	463b      	mov	r3, r7
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012282:	4293      	cmp	r3, r2
 8012284:	d108      	bne.n	8012298 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8012286:	4813      	ldr	r0, [pc, #76]	; (80122d4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8012288:	f7f3 fe66 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 801228c:	4810      	ldr	r0, [pc, #64]	; (80122d0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 801228e:	f7f3 fe70 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8012292:	4804      	ldr	r0, [pc, #16]	; (80122a4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8012294:	f7f3 fe7a 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8012298:	bf00      	nop
 801229a:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd90      	pop	{r4, r7, pc}
 80122a2:	bf00      	nop
 80122a4:	20000320 	.word	0x20000320
 80122a8:	0801cfd4 	.word	0x0801cfd4
 80122ac:	0801cfdc 	.word	0x0801cfdc
 80122b0:	0801cfe4 	.word	0x0801cfe4
 80122b4:	0801cfec 	.word	0x0801cfec
 80122b8:	0801cff4 	.word	0x0801cff4
 80122bc:	0801cffc 	.word	0x0801cffc
 80122c0:	0801d000 	.word	0x0801d000
 80122c4:	0801d008 	.word	0x0801d008
 80122c8:	0801d010 	.word	0x0801d010
 80122cc:	0801d018 	.word	0x0801d018
 80122d0:	20000338 	.word	0x20000338
 80122d4:	20000350 	.word	0x20000350

080122d8 <_GLOBAL__sub_I__ZN5TokenD2Ev>:
 80122d8:	b580      	push	{r7, lr}
 80122da:	af00      	add	r7, sp, #0
 80122dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80122e0:	2001      	movs	r0, #1
 80122e2:	f7ff fe1d 	bl	8011f20 <_Z41__static_initialization_and_destruction_0ii>
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <_GLOBAL__sub_D__ZN5TokenD2Ev>:
 80122e8:	b580      	push	{r7, lr}
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80122f0:	2000      	movs	r0, #0
 80122f2:	f7ff fe15 	bl	8011f20 <_Z41__static_initialization_and_destruction_0ii>
 80122f6:	bd80      	pop	{r7, pc}

080122f8 <_ZN11TransmitterC1EP20__UART_HandleTypeDef>:
#include <Transmitter.h>

Transmitter::Transmitter(UART_HandleTypeDef* huart)
 80122f8:	b480      	push	{r7}
 80122fa:	b083      	sub	sp, #12
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	6039      	str	r1, [r7, #0]
 8012302:	4a06      	ldr	r2, [pc, #24]	; (801231c <_ZN11TransmitterC1EP20__UART_HandleTypeDef+0x24>)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	601a      	str	r2, [r3, #0]
{
	this->huart = huart;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	683a      	ldr	r2, [r7, #0]
 801230c:	605a      	str	r2, [r3, #4]
}
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	4618      	mov	r0, r3
 8012312:	370c      	adds	r7, #12
 8012314:	46bd      	mov	sp, r7
 8012316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231a:	4770      	bx	lr
 801231c:	0801d268 	.word	0x0801d268

08012320 <_ZN11TransmitterD1Ev>:
typedef int UART_HandleTypeDef;
#endif

#include <string>

class Transmitter
 8012320:	b480      	push	{r7}
 8012322:	b083      	sub	sp, #12
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	4a04      	ldr	r2, [pc, #16]	; (801233c <_ZN11TransmitterD1Ev+0x1c>)
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	601a      	str	r2, [r3, #0]
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	4618      	mov	r0, r3
 8012332:	370c      	adds	r7, #12
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr
 801233c:	0801d268 	.word	0x0801d268

08012340 <_ZN11TransmitterD0Ev>:
 8012340:	b580      	push	{r7, lr}
 8012342:	b082      	sub	sp, #8
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f7ff ffe9 	bl	8012320 <_ZN11TransmitterD1Ev>
 801234e:	2108      	movs	r1, #8
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f007 f8f0 	bl	8019536 <_ZdlPvj>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	4618      	mov	r0, r3
 801235a:	3708      	adds	r7, #8
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>:

Transmitter::~Transmitter()
= default;

void Transmitter::report_error(std::string message, int line, int position)
{
 8012360:	b5b0      	push	{r4, r5, r7, lr}
 8012362:	b0a2      	sub	sp, #136	; 0x88
 8012364:	af00      	add	r7, sp, #0
 8012366:	60f8      	str	r0, [r7, #12]
 8012368:	60b9      	str	r1, [r7, #8]
 801236a:	607a      	str	r2, [r7, #4]
 801236c:	603b      	str	r3, [r7, #0]
	std::string full_message = message + "\nin line: " + itoa(line, nullptr, 10) + " in position: " + itoa(position, nullptr, 10) + "\n";
 801236e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012372:	4a2f      	ldr	r2, [pc, #188]	; (8012430 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xd0>)
 8012374:	68b9      	ldr	r1, [r7, #8]
 8012376:	4618      	mov	r0, r3
 8012378:	f000 f860 	bl	801243c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 801237c:	220a      	movs	r2, #10
 801237e:	2100      	movs	r1, #0
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f007 fc59 	bl	8019c38 <itoa>
 8012386:	4602      	mov	r2, r0
 8012388:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801238c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8012390:	4618      	mov	r0, r3
 8012392:	f7f8 ffe3 	bl	800b35c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8012396:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801239a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801239e:	4a25      	ldr	r2, [pc, #148]	; (8012434 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xd4>)
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7f8 ffdb 	bl	800b35c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80123a6:	220a      	movs	r2, #10
 80123a8:	2100      	movs	r1, #0
 80123aa:	6838      	ldr	r0, [r7, #0]
 80123ac:	f007 fc44 	bl	8019c38 <itoa>
 80123b0:	4602      	mov	r2, r0
 80123b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80123b6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7f8 ffce 	bl	800b35c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80123c0:	f107 0310 	add.w	r3, r7, #16
 80123c4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80123c8:	4a1b      	ldr	r2, [pc, #108]	; (8012438 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xd8>)
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7f8 ffc6 	bl	800b35c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80123d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80123d4:	4618      	mov	r0, r3
 80123d6:	f007 fa88 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80123da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80123de:	4618      	mov	r0, r3
 80123e0:	f007 fa83 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80123e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80123e8:	4618      	mov	r0, r3
 80123ea:	f007 fa7e 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80123ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80123f2:	4618      	mov	r0, r3
 80123f4:	f007 fa79 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80123f8:	b672      	cpsid	i
}
 80123fa:	bf00      	nop
#ifndef TESTS
	__disable_irq();
	while (1)
	{
		HAL_UART_Transmit(huart, (uint8_t*)full_message.c_str(), full_message.length(), 100);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	685c      	ldr	r4, [r3, #4]
 8012400:	f107 0310 	add.w	r3, r7, #16
 8012404:	4618      	mov	r0, r3
 8012406:	f007 fb53 	bl	8019ab0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801240a:	4605      	mov	r5, r0
 801240c:	f107 0310 	add.w	r3, r7, #16
 8012410:	4618      	mov	r0, r3
 8012412:	f007 faa0 	bl	8019956 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8012416:	4603      	mov	r3, r0
 8012418:	b29a      	uxth	r2, r3
 801241a:	2364      	movs	r3, #100	; 0x64
 801241c:	4629      	mov	r1, r5
 801241e:	4620      	mov	r0, r4
 8012420:	f006 f906 	bl	8018630 <HAL_UART_Transmit>
		HAL_Delay(500);
 8012424:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012428:	f004 fc86 	bl	8016d38 <HAL_Delay>
		HAL_UART_Transmit(huart, (uint8_t*)full_message.c_str(), full_message.length(), 100);
 801242c:	e7e6      	b.n	80123fc <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x9c>
 801242e:	bf00      	nop
 8012430:	0801d01c 	.word	0x0801d01c
 8012434:	0801d028 	.word	0x0801d028
 8012438:	0801d038 	.word	0x0801d038

0801243c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 801243c:	b580      	push	{r7, lr}
 801243e:	b084      	sub	sp, #16
 8012440:	af00      	add	r7, sp, #0
 8012442:	60f8      	str	r0, [r7, #12]
 8012444:	60b9      	str	r1, [r7, #8]
 8012446:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 8012448:	68b9      	ldr	r1, [r7, #8]
 801244a:	68f8      	ldr	r0, [r7, #12]
 801244c:	f007 fb7a 	bl	8019b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8012450:	6879      	ldr	r1, [r7, #4]
 8012452:	68f8      	ldr	r0, [r7, #12]
 8012454:	f007 fb16 	bl	8019a84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8012458:	bf00      	nop
    }
 801245a:	68f8      	ldr	r0, [r7, #12]
 801245c:	3710      	adds	r7, #16
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}

08012462 <_ZN6Parser31parse_variable_or_function_callER17Primal_expression>:
#include "Parser.h"

void Parser::parse_variable_or_function_call(Primal_expression &exp)
{
 8012462:	b590      	push	{r4, r7, lr}
 8012464:	b093      	sub	sp, #76	; 0x4c
 8012466:	af00      	add	r7, sp, #0
 8012468:	6078      	str	r0, [r7, #4]
 801246a:	6039      	str	r1, [r7, #0]
	std::string id(std::get<std::string>(token_buffer.get_value()));
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f103 0208 	add.w	r2, r3, #8
 8012472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012476:	4611      	mov	r1, r2
 8012478:	4618      	mov	r0, r3
 801247a:	f7ff fcdf 	bl	8011e3c <_ZN5Token9get_valueB5cxx11Ev>
 801247e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012482:	4618      	mov	r0, r3
 8012484:	f7f8 ff22 	bl	800b2cc <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 8012488:	4602      	mov	r2, r0
 801248a:	f107 030c 	add.w	r3, r7, #12
 801248e:	4611      	mov	r1, r2
 8012490:	4618      	mov	r0, r3
 8012492:	f007 fa10 	bl	80198b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8012496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801249a:	4618      	mov	r0, r3
 801249c:	f7f3 fff2 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	get_next_token();
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	f7f8 f9b1 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	if (token_buffer.get_type() == TOKEN_LEFT_BRACKET)
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	3308      	adds	r3, #8
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7ff fce8 	bl	8011e80 <_ZN5Token8get_typeEv>
 80124b0:	4603      	mov	r3, r0
 80124b2:	2b26      	cmp	r3, #38	; 0x26
 80124b4:	bf0c      	ite	eq
 80124b6:	2301      	moveq	r3, #1
 80124b8:	2300      	movne	r3, #0
 80124ba:	b2db      	uxtb	r3, r3
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d018      	beq.n	80124f2 <_ZN6Parser31parse_variable_or_function_callER17Primal_expression+0x90>
	{
		exp.type = PRIMAL_FUNCTION_CALL;
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	2205      	movs	r2, #5
 80124c4:	701a      	strb	r2, [r3, #0]
		exp.content = new Function_call(parse_function_call(id));
 80124c6:	2024      	movs	r0, #36	; 0x24
 80124c8:	f007 f837 	bl	801953a <_Znwj>
 80124cc:	4603      	mov	r3, r0
 80124ce:	461c      	mov	r4, r3
 80124d0:	f107 030c 	add.w	r3, r7, #12
 80124d4:	461a      	mov	r2, r3
 80124d6:	6879      	ldr	r1, [r7, #4]
 80124d8:	4620      	mov	r0, r4
 80124da:	f7f7 fee1 	bl	800a2a0 <_ZN6Parser19parse_function_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80124de:	643c      	str	r4, [r7, #64]	; 0x40
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	3304      	adds	r3, #4
 80124e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80124e8:	4611      	mov	r1, r2
 80124ea:	4618      	mov	r0, r3
 80124ec:	f000 fccf 	bl	8012e8e <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
 80124f0:	e017      	b.n	8012522 <_ZN6Parser31parse_variable_or_function_callER17Primal_expression+0xc0>
	}
	else
	{
		exp.type = PRIMAL_VARIABLE;
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	2204      	movs	r2, #4
 80124f6:	701a      	strb	r2, [r3, #0]
		exp.content = new Variable(parse_variable(id));
 80124f8:	2020      	movs	r0, #32
 80124fa:	f007 f81e 	bl	801953a <_Znwj>
 80124fe:	4603      	mov	r3, r0
 8012500:	461c      	mov	r4, r3
 8012502:	f107 030c 	add.w	r3, r7, #12
 8012506:	461a      	mov	r2, r3
 8012508:	6879      	ldr	r1, [r7, #4]
 801250a:	4620      	mov	r0, r4
 801250c:	f7f7 fd18 	bl	8009f40 <_ZN6Parser14parse_variableERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8012510:	647c      	str	r4, [r7, #68]	; 0x44
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	3304      	adds	r3, #4
 8012516:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801251a:	4611      	mov	r1, r2
 801251c:	4618      	mov	r0, r3
 801251e:	f000 fce0 	bl	8012ee2 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
	std::string id(std::get<std::string>(token_buffer.get_value()));
 8012522:	f107 030c 	add.w	r3, r7, #12
 8012526:	4618      	mov	r0, r3
 8012528:	f007 f9df 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 801252c:	bf00      	nop
 801252e:	374c      	adds	r7, #76	; 0x4c
 8012530:	46bd      	mov	sp, r7
 8012532:	bd90      	pop	{r4, r7, pc}

08012534 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1Ev>:
      variant() = default;
 8012534:	b580      	push	{r7, lr}
 8012536:	b082      	sub	sp, #8
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	4618      	mov	r0, r3
 8012540:	f000 fd44 	bl	8012fcc <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1Ev>
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	4618      	mov	r0, r3
 8012548:	3708      	adds	r7, #8
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}

0801254e <_ZN17Primal_expressionC1Ev>:
class Primal_expression
 801254e:	b580      	push	{r7, lr}
 8012550:	b082      	sub	sp, #8
 8012552:	af00      	add	r7, sp, #0
 8012554:	6078      	str	r0, [r7, #4]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	3304      	adds	r3, #4
 801255a:	4618      	mov	r0, r3
 801255c:	f7ff ffea 	bl	8012534 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1Ev>
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	4618      	mov	r0, r3
 8012564:	3708      	adds	r7, #8
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}
	...

0801256c <_ZN6Parser23parse_primal_expressionEv>:

Primal_expression Parser::parse_primal_expression()
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b0a6      	sub	sp, #152	; 0x98
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
	Primal_expression exp;
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	f7ff ffe9 	bl	801254e <_ZN17Primal_expressionC1Ev>
	switch(token_buffer.get_type())
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	3308      	adds	r3, #8
 8012580:	4618      	mov	r0, r3
 8012582:	f7ff fc7d 	bl	8011e80 <_ZN5Token8get_typeEv>
 8012586:	4603      	mov	r3, r0
 8012588:	3b02      	subs	r3, #2
 801258a:	2b0d      	cmp	r3, #13
 801258c:	f200 80a7 	bhi.w	80126de <_ZN6Parser23parse_primal_expressionEv+0x172>
 8012590:	a201      	add	r2, pc, #4	; (adr r2, 8012598 <_ZN6Parser23parse_primal_expressionEv+0x2c>)
 8012592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012596:	bf00      	nop
 8012598:	080126d5 	.word	0x080126d5
 801259c:	08012607 	.word	0x08012607
 80125a0:	08012643 	.word	0x08012643
 80125a4:	080125d1 	.word	0x080125d1
 80125a8:	080125ed 	.word	0x080125ed
 80125ac:	080126df 	.word	0x080126df
 80125b0:	080126df 	.word	0x080126df
 80125b4:	080126df 	.word	0x080126df
 80125b8:	080126df 	.word	0x080126df
 80125bc:	080126df 	.word	0x080126df
 80125c0:	080126df 	.word	0x080126df
 80125c4:	080126df 	.word	0x080126df
 80125c8:	080126df 	.word	0x080126df
 80125cc:	0801267f 	.word	0x0801267f
	{
	case TOKEN_TRUE:
		exp.type = PRIMAL_BOOL;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2200      	movs	r2, #0
 80125d4:	701a      	strb	r2, [r3, #0]
		exp.content = true;
 80125d6:	2301      	movs	r3, #1
 80125d8:	73bb      	strb	r3, [r7, #14]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	3304      	adds	r3, #4
 80125de:	f107 020e 	add.w	r2, r7, #14
 80125e2:	4611      	mov	r1, r2
 80125e4:	4618      	mov	r0, r3
 80125e6:	f000 fcfe 	bl	8012fe6 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
		break;
 80125ea:	e096      	b.n	801271a <_ZN6Parser23parse_primal_expressionEv+0x1ae>
	case TOKEN_FALSE:
		exp.type = PRIMAL_BOOL;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2200      	movs	r2, #0
 80125f0:	701a      	strb	r2, [r3, #0]
		exp.content = false;
 80125f2:	2300      	movs	r3, #0
 80125f4:	73fb      	strb	r3, [r7, #15]
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	3304      	adds	r3, #4
 80125fa:	f107 020f 	add.w	r2, r7, #15
 80125fe:	4611      	mov	r1, r2
 8012600:	4618      	mov	r0, r3
 8012602:	f000 fcf0 	bl	8012fe6 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
	case TOKEN_INT:
		exp.type = PRIMAL_INT;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2201      	movs	r2, #1
 801260a:	701a      	strb	r2, [r3, #0]
		exp.content = std::get<int>(token_buffer.get_value());
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	f103 0208 	add.w	r2, r3, #8
 8012612:	f107 0310 	add.w	r3, r7, #16
 8012616:	4611      	mov	r1, r2
 8012618:	4618      	mov	r0, r3
 801261a:	f7ff fc0f 	bl	8011e3c <_ZN5Token9get_valueB5cxx11Ev>
 801261e:	f107 0310 	add.w	r3, r7, #16
 8012622:	4618      	mov	r0, r3
 8012624:	f000 fd0a 	bl	801303c <_ZSt3getIiJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEOT_OSt7variantIJDpT0_EE>
 8012628:	4602      	mov	r2, r0
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	3304      	adds	r3, #4
 801262e:	4611      	mov	r1, r2
 8012630:	4618      	mov	r0, r3
 8012632:	f000 fd13 	bl	801305c <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIiEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
 8012636:	f107 0310 	add.w	r3, r7, #16
 801263a:	4618      	mov	r0, r3
 801263c:	f7f3 ff22 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
		break;
 8012640:	e06b      	b.n	801271a <_ZN6Parser23parse_primal_expressionEv+0x1ae>
	case TOKEN_FLOAT:
		exp.type = PRIMAL_FLOAT;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2202      	movs	r2, #2
 8012646:	701a      	strb	r2, [r3, #0]
		exp.content = std::get<float>(token_buffer.get_value());
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	f103 0208 	add.w	r2, r3, #8
 801264e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012652:	4611      	mov	r1, r2
 8012654:	4618      	mov	r0, r3
 8012656:	f7ff fbf1 	bl	8011e3c <_ZN5Token9get_valueB5cxx11Ev>
 801265a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801265e:	4618      	mov	r0, r3
 8012660:	f000 fd26 	bl	80130b0 <_ZSt3getIfJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEOT_OSt7variantIJDpT0_EE>
 8012664:	4602      	mov	r2, r0
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	3304      	adds	r3, #4
 801266a:	4611      	mov	r1, r2
 801266c:	4618      	mov	r0, r3
 801266e:	f000 fd2f 	bl	80130d0 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIfEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
 8012672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012676:	4618      	mov	r0, r3
 8012678:	f7f3 ff04 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
		break;
 801267c:	e04d      	b.n	801271a <_ZN6Parser23parse_primal_expressionEv+0x1ae>
	case TOKEN_STRING:
		exp.type = PRIMAL_STRING;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2203      	movs	r2, #3
 8012682:	701a      	strb	r2, [r3, #0]
		exp.content = std::string(std::get<std::string>(token_buffer.get_value()));
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	f103 0208 	add.w	r2, r3, #8
 801268a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801268e:	4611      	mov	r1, r2
 8012690:	4618      	mov	r0, r3
 8012692:	f7ff fbd3 	bl	8011e3c <_ZN5Token9get_valueB5cxx11Ev>
 8012696:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801269a:	4618      	mov	r0, r3
 801269c:	f7f8 fe16 	bl	800b2cc <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 80126a0:	4602      	mov	r2, r0
 80126a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80126a6:	4611      	mov	r1, r2
 80126a8:	4618      	mov	r0, r3
 80126aa:	f007 f904 	bl	80198b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	3304      	adds	r3, #4
 80126b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80126b6:	4611      	mov	r1, r2
 80126b8:	4618      	mov	r0, r3
 80126ba:	f000 fd33 	bl	8013124 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
 80126be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80126c2:	4618      	mov	r0, r3
 80126c4:	f007 f911 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80126c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80126cc:	4618      	mov	r0, r3
 80126ce:	f7f3 fed9 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
		break;
 80126d2:	e022      	b.n	801271a <_ZN6Parser23parse_primal_expressionEv+0x1ae>
	case TOKEN_IDENTIFIER:
		parse_variable_or_function_call(exp);
 80126d4:	6879      	ldr	r1, [r7, #4]
 80126d6:	6838      	ldr	r0, [r7, #0]
 80126d8:	f7ff fec3 	bl	8012462 <_ZN6Parser31parse_variable_or_function_callER17Primal_expression>
		break;
 80126dc:	e01d      	b.n	801271a <_ZN6Parser23parse_primal_expressionEv+0x1ae>
	default:
		report_error("expression");
 80126de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80126e2:	4618      	mov	r0, r3
 80126e4:	f006 ff3a 	bl	801955c <_ZNSaIcEC1Ev>
 80126e8:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80126ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80126f0:	490c      	ldr	r1, [pc, #48]	; (8012724 <_ZN6Parser23parse_primal_expressionEv+0x1b8>)
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7ef f84e 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80126f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80126fc:	4619      	mov	r1, r3
 80126fe:	6838      	ldr	r0, [r7, #0]
 8012700:	f7f7 fce4 	bl	800a0cc <_ZN6Parser12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8012704:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012708:	4618      	mov	r0, r3
 801270a:	f007 f8ee 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801270e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012712:	4618      	mov	r0, r3
 8012714:	f006 ff23 	bl	801955e <_ZNSaIcED1Ev>
		break;
 8012718:	bf00      	nop
	}
	return exp;
 801271a:	bf00      	nop
}
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	3798      	adds	r7, #152	; 0x98
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}
 8012724:	0801d03c 	.word	0x0801d03c

08012728 <_ZN6Parser23parse_nested_expressionER19Priority_expression>:

void Parser::parse_nested_expression(Priority_expression &exp)
{
 8012728:	b590      	push	{r4, r7, lr}
 801272a:	b08b      	sub	sp, #44	; 0x2c
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
 8012730:	6039      	str	r1, [r7, #0]
	get_next_token();
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f7f8 f868 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	exp.exp = new Expression(parse_expression());
 8012738:	200c      	movs	r0, #12
 801273a:	f006 fefe 	bl	801953a <_Znwj>
 801273e:	4603      	mov	r3, r0
 8012740:	461c      	mov	r4, r3
 8012742:	6879      	ldr	r1, [r7, #4]
 8012744:	4620      	mov	r0, r4
 8012746:	f000 fb62 	bl	8012e0e <_ZN6Parser16parse_expressionEv>
 801274a:	60bc      	str	r4, [r7, #8]
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	f107 0208 	add.w	r2, r7, #8
 8012752:	4611      	mov	r1, r2
 8012754:	4618      	mov	r0, r3
 8012756:	f000 fd11 	bl	801317c <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>
	assert_token(TOKEN_RIGHT_BRACKET, "closing bracket");
 801275a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801275e:	4618      	mov	r0, r3
 8012760:	f006 fefc 	bl	801955c <_ZNSaIcEC1Ev>
 8012764:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012768:	f107 030c 	add.w	r3, r7, #12
 801276c:	490d      	ldr	r1, [pc, #52]	; (80127a4 <_ZN6Parser23parse_nested_expressionER19Priority_expression+0x7c>)
 801276e:	4618      	mov	r0, r3
 8012770:	f7ef f810 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8012774:	f107 030c 	add.w	r3, r7, #12
 8012778:	461a      	mov	r2, r3
 801277a:	2127      	movs	r1, #39	; 0x27
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f7f7 fccd 	bl	800a11c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8012782:	f107 030c 	add.w	r3, r7, #12
 8012786:	4618      	mov	r0, r3
 8012788:	f007 f8af 	bl	80198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801278c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012790:	4618      	mov	r0, r3
 8012792:	f006 fee4 	bl	801955e <_ZNSaIcED1Ev>
	get_next_token();
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f7f8 f836 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
}
 801279c:	bf00      	nop
 801279e:	372c      	adds	r7, #44	; 0x2c
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd90      	pop	{r4, r7, pc}
 80127a4:	0801d048 	.word	0x0801d048

080127a8 <_ZN6Parser25parse_priority_expressionEv>:

Priority_expression Parser::parse_priority_expression()
{
 80127a8:	b590      	push	{r4, r7, lr}
 80127aa:	b085      	sub	sp, #20
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	6039      	str	r1, [r7, #0]
	Priority_expression exp;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	461a      	mov	r2, r3
 80127b6:	2300      	movs	r3, #0
 80127b8:	6013      	str	r3, [r2, #0]
 80127ba:	6053      	str	r3, [r2, #4]
	if(token_buffer.get_type() == TOKEN_LEFT_BRACKET)
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	3308      	adds	r3, #8
 80127c0:	4618      	mov	r0, r3
 80127c2:	f7ff fb5d 	bl	8011e80 <_ZN5Token8get_typeEv>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2b26      	cmp	r3, #38	; 0x26
 80127ca:	bf0c      	ite	eq
 80127cc:	2301      	moveq	r3, #1
 80127ce:	2300      	movne	r3, #0
 80127d0:	b2db      	uxtb	r3, r3
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d004      	beq.n	80127e0 <_ZN6Parser25parse_priority_expressionEv+0x38>
	{
		parse_nested_expression(exp);
 80127d6:	6879      	ldr	r1, [r7, #4]
 80127d8:	6838      	ldr	r0, [r7, #0]
 80127da:	f7ff ffa5 	bl	8012728 <_ZN6Parser23parse_nested_expressionER19Priority_expression>
	}
	else
	{
		exp.exp = new Primal_expression(parse_primal_expression());
	}
	return exp;
 80127de:	e010      	b.n	8012802 <_ZN6Parser25parse_priority_expressionEv+0x5a>
		exp.exp = new Primal_expression(parse_primal_expression());
 80127e0:	2020      	movs	r0, #32
 80127e2:	f006 feaa 	bl	801953a <_Znwj>
 80127e6:	4603      	mov	r3, r0
 80127e8:	461c      	mov	r4, r3
 80127ea:	6839      	ldr	r1, [r7, #0]
 80127ec:	4620      	mov	r0, r4
 80127ee:	f7ff febd 	bl	801256c <_ZN6Parser23parse_primal_expressionEv>
 80127f2:	60fc      	str	r4, [r7, #12]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f107 020c 	add.w	r2, r7, #12
 80127fa:	4611      	mov	r1, r2
 80127fc:	4618      	mov	r0, r3
 80127fe:	f000 fce7 	bl	80131d0 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>
	return exp;
 8012802:	bf00      	nop
}
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	3714      	adds	r7, #20
 8012808:	46bd      	mov	sp, r7
 801280a:	bd90      	pop	{r4, r7, pc}

0801280c <_ZN6Parser20match_unary_operatorER16Unary_expression>:

bool Parser::match_unary_operator(Unary_expression& exp)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b082      	sub	sp, #8
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]
	switch(token_buffer.get_type())
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	3308      	adds	r3, #8
 801281a:	4618      	mov	r0, r3
 801281c:	f7ff fb30 	bl	8011e80 <_ZN5Token8get_typeEv>
 8012820:	4603      	mov	r3, r0
 8012822:	2b17      	cmp	r3, #23
 8012824:	d005      	beq.n	8012832 <_ZN6Parser20match_unary_operatorER16Unary_expression+0x26>
 8012826:	2b20      	cmp	r3, #32
 8012828:	d107      	bne.n	801283a <_ZN6Parser20match_unary_operatorER16Unary_expression+0x2e>
	{
	case TOKEN_MINUS:
		exp.op = UN_OP_MINUS;
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	2201      	movs	r2, #1
 801282e:	711a      	strb	r2, [r3, #4]
		break;
 8012830:	e005      	b.n	801283e <_ZN6Parser20match_unary_operatorER16Unary_expression+0x32>
	case TOKEN_EXCLAMATION:
		exp.op = UN_OP_EXCLAMATION;
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	2202      	movs	r2, #2
 8012836:	711a      	strb	r2, [r3, #4]
		break;
 8012838:	e001      	b.n	801283e <_ZN6Parser20match_unary_operatorER16Unary_expression+0x32>
	default:
		return false;
 801283a:	2300      	movs	r3, #0
 801283c:	e000      	b.n	8012840 <_ZN6Parser20match_unary_operatorER16Unary_expression+0x34>
	}
	return true;
 801283e:	2301      	movs	r3, #1
}
 8012840:	4618      	mov	r0, r3
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}

08012848 <_ZN6Parser22parse_unary_expressionEv>:

Unary_expression Parser::parse_unary_expression()
{
 8012848:	b590      	push	{r4, r7, lr}
 801284a:	b083      	sub	sp, #12
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	6039      	str	r1, [r7, #0]
	Unary_expression exp{};
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	461a      	mov	r2, r3
 8012856:	2300      	movs	r3, #0
 8012858:	6013      	str	r3, [r2, #0]
 801285a:	6053      	str	r3, [r2, #4]
	if(match_unary_operator(exp))
 801285c:	6879      	ldr	r1, [r7, #4]
 801285e:	6838      	ldr	r0, [r7, #0]
 8012860:	f7ff ffd4 	bl	801280c <_ZN6Parser20match_unary_operatorER16Unary_expression>
 8012864:	4603      	mov	r3, r0
 8012866:	2b00      	cmp	r3, #0
 8012868:	d002      	beq.n	8012870 <_ZN6Parser22parse_unary_expressionEv+0x28>
	{
		get_next_token();
 801286a:	6838      	ldr	r0, [r7, #0]
 801286c:	f7f7 ffcc 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
	}
	exp.prior_exp = new Priority_expression(parse_priority_expression());
 8012870:	2008      	movs	r0, #8
 8012872:	f006 fe62 	bl	801953a <_Znwj>
 8012876:	4603      	mov	r3, r0
 8012878:	461c      	mov	r4, r3
 801287a:	6839      	ldr	r1, [r7, #0]
 801287c:	4620      	mov	r0, r4
 801287e:	f7ff ff93 	bl	80127a8 <_ZN6Parser25parse_priority_expressionEv>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	601c      	str	r4, [r3, #0]
	return exp;
 8012886:	bf00      	nop
}
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	370c      	adds	r7, #12
 801288c:	46bd      	mov	sp, r7
 801288e:	bd90      	pop	{r4, r7, pc}

08012890 <_ZN6Parser22parse_power_expressionEv>:

Power_expression Parser::parse_power_expression()
{
 8012890:	b590      	push	{r4, r7, lr}
 8012892:	b083      	sub	sp, #12
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	6039      	str	r1, [r7, #0]
	Power_expression exp{};
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	461a      	mov	r2, r3
 801289e:	2300      	movs	r3, #0
 80128a0:	6013      	str	r3, [r2, #0]
 80128a2:	6053      	str	r3, [r2, #4]
	exp.left_un_exp = new Unary_expression(parse_unary_expression());
 80128a4:	2008      	movs	r0, #8
 80128a6:	f006 fe48 	bl	801953a <_Znwj>
 80128aa:	4603      	mov	r3, r0
 80128ac:	461c      	mov	r4, r3
 80128ae:	6839      	ldr	r1, [r7, #0]
 80128b0:	4620      	mov	r0, r4
 80128b2:	f7ff ffc9 	bl	8012848 <_ZN6Parser22parse_unary_expressionEv>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	601c      	str	r4, [r3, #0]
	if(token_buffer.get_type() == TOKEN_POWER)
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	3308      	adds	r3, #8
 80128be:	4618      	mov	r0, r3
 80128c0:	f7ff fade 	bl	8011e80 <_ZN5Token8get_typeEv>
 80128c4:	4603      	mov	r3, r0
 80128c6:	2b23      	cmp	r3, #35	; 0x23
 80128c8:	bf0c      	ite	eq
 80128ca:	2301      	moveq	r3, #1
 80128cc:	2300      	movne	r3, #0
 80128ce:	b2db      	uxtb	r3, r3
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d00e      	beq.n	80128f2 <_ZN6Parser22parse_power_expressionEv+0x62>
	{
		get_next_token();
 80128d4:	6838      	ldr	r0, [r7, #0]
 80128d6:	f7f7 ff97 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
		exp.right_un_exp = new Unary_expression(parse_unary_expression());
 80128da:	2008      	movs	r0, #8
 80128dc:	f006 fe2d 	bl	801953a <_Znwj>
 80128e0:	4603      	mov	r3, r0
 80128e2:	461c      	mov	r4, r3
 80128e4:	6839      	ldr	r1, [r7, #0]
 80128e6:	4620      	mov	r0, r4
 80128e8:	f7ff ffae 	bl	8012848 <_ZN6Parser22parse_unary_expressionEv>
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	605c      	str	r4, [r3, #4]
	}
	else
	{
		exp.right_un_exp = nullptr;
	}
	return exp;
 80128f0:	e002      	b.n	80128f8 <_ZN6Parser22parse_power_expressionEv+0x68>
		exp.right_un_exp = nullptr;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	2200      	movs	r2, #0
 80128f6:	605a      	str	r2, [r3, #4]
	return exp;
 80128f8:	bf00      	nop
}
 80128fa:	6878      	ldr	r0, [r7, #4]
 80128fc:	370c      	adds	r7, #12
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd90      	pop	{r4, r7, pc}

08012902 <_ZN6Parser23match_multiply_operatorER19Multiply_expression>:

bool Parser::match_multiply_operator(Multiply_expression& exp)
{
 8012902:	b580      	push	{r7, lr}
 8012904:	b084      	sub	sp, #16
 8012906:	af00      	add	r7, sp, #0
 8012908:	6078      	str	r0, [r7, #4]
 801290a:	6039      	str	r1, [r7, #0]
	switch(token_buffer.get_type())
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	3308      	adds	r3, #8
 8012910:	4618      	mov	r0, r3
 8012912:	f7ff fab5 	bl	8011e80 <_ZN5Token8get_typeEv>
 8012916:	4603      	mov	r3, r0
 8012918:	2b24      	cmp	r3, #36	; 0x24
 801291a:	d01c      	beq.n	8012956 <_ZN6Parser23match_multiply_operatorER19Multiply_expression+0x54>
 801291c:	2b24      	cmp	r3, #36	; 0x24
 801291e:	dc25      	bgt.n	801296c <_ZN6Parser23match_multiply_operatorER19Multiply_expression+0x6a>
 8012920:	2b21      	cmp	r3, #33	; 0x21
 8012922:	d002      	beq.n	801292a <_ZN6Parser23match_multiply_operatorER19Multiply_expression+0x28>
 8012924:	2b22      	cmp	r3, #34	; 0x22
 8012926:	d00b      	beq.n	8012940 <_ZN6Parser23match_multiply_operatorER19Multiply_expression+0x3e>
 8012928:	e020      	b.n	801296c <_ZN6Parser23match_multiply_operatorER19Multiply_expression+0x6a>
	{
	case TOKEN_MULTIPLY:
		exp.ops.push_back(MULT_OP_MULTIPLY);
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	330c      	adds	r3, #12
 801292e:	2201      	movs	r2, #1
 8012930:	737a      	strb	r2, [r7, #13]
 8012932:	f107 020d 	add.w	r2, r7, #13
 8012936:	4611      	mov	r1, r2
 8012938:	4618      	mov	r0, r3
 801293a:	f000 fc73 	bl	8013224 <_ZNSt6vectorI13mult_operatorSaIS0_EE9push_backEOS0_>
		break;
 801293e:	e017      	b.n	8012970 <_ZN6Parser23match_multiply_operatorER19Multiply_expression+0x6e>
	case TOKEN_DIVIDE:
		exp.ops.push_back(MULT_OP_DIVIDE);
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	330c      	adds	r3, #12
 8012944:	2202      	movs	r2, #2
 8012946:	73ba      	strb	r2, [r7, #14]
 8012948:	f107 020e 	add.w	r2, r7, #14
 801294c:	4611      	mov	r1, r2
 801294e:	4618      	mov	r0, r3
 8012950:	f000 fc68 	bl	8013224 <_ZNSt6vectorI13mult_operatorSaIS0_EE9push_backEOS0_>
		break;
 8012954:	e00c      	b.n	8012970 <_ZN6Parser23match_multiply_operatorER19Multiply_expression+0x6e>
	case TOKEN_MODULO:
		exp.ops.push_back(MULT_OP_MODULO);
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	330c      	adds	r3, #12
 801295a:	2203      	movs	r2, #3
 801295c:	73fa      	strb	r2, [r7, #15]
 801295e:	f107 020f 	add.w	r2, r7, #15
 8012962:	4611      	mov	r1, r2
 8012964:	4618      	mov	r0, r3
 8012966:	f000 fc5d 	bl	8013224 <_ZNSt6vectorI13mult_operatorSaIS0_EE9push_backEOS0_>
		break;
 801296a:	e001      	b.n	8012970 <_ZN6Parser23match_multiply_operatorER19Multiply_expression+0x6e>
	default:
		return false;
 801296c:	2300      	movs	r3, #0
 801296e:	e000      	b.n	8012972 <_ZN6Parser23match_multiply_operatorER19Multiply_expression+0x70>
	}
	return true;
 8012970:	2301      	movs	r3, #1
}
 8012972:	4618      	mov	r0, r3
 8012974:	3710      	adds	r7, #16
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}

0801297a <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 801297a:	b580      	push	{r7, lr}
 801297c:	b082      	sub	sp, #8
 801297e:	af00      	add	r7, sp, #0
 8012980:	6078      	str	r0, [r7, #4]
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	4618      	mov	r0, r3
 8012986:	f000 fc5e 	bl	8013246 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE12_Vector_implC1Ev>
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	4618      	mov	r0, r3
 801298e:	3708      	adds	r7, #8
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}

08012994 <_ZNSt6vectorIP16Power_expressionSaIS1_EEC1Ev>:
      vector() = default;
 8012994:	b580      	push	{r7, lr}
 8012996:	b082      	sub	sp, #8
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	4618      	mov	r0, r3
 80129a0:	f7ff ffeb 	bl	801297a <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EEC1Ev>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	4618      	mov	r0, r3
 80129a8:	3708      	adds	r7, #8
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}

080129ae <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EEC1Ev>:
      _Vector_base() = default;
 80129ae:	b580      	push	{r7, lr}
 80129b0:	b082      	sub	sp, #8
 80129b2:	af00      	add	r7, sp, #0
 80129b4:	6078      	str	r0, [r7, #4]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	4618      	mov	r0, r3
 80129ba:	f000 fc54 	bl	8013266 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE12_Vector_implC1Ev>
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	4618      	mov	r0, r3
 80129c2:	3708      	adds	r7, #8
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}

080129c8 <_ZNSt6vectorI13mult_operatorSaIS0_EEC1Ev>:
      vector() = default;
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b082      	sub	sp, #8
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7ff ffeb 	bl	80129ae <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EEC1Ev>
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	4618      	mov	r0, r3
 80129dc:	3708      	adds	r7, #8
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}

080129e2 <_ZN19Multiply_expressionC1Ev>:
class Multiply_expression
 80129e2:	b580      	push	{r7, lr}
 80129e4:	b082      	sub	sp, #8
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	6078      	str	r0, [r7, #4]
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7ff ffd1 	bl	8012994 <_ZNSt6vectorIP16Power_expressionSaIS1_EEC1Ev>
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	330c      	adds	r3, #12
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7ff ffe6 	bl	80129c8 <_ZNSt6vectorI13mult_operatorSaIS0_EEC1Ev>
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	4618      	mov	r0, r3
 8012a00:	3708      	adds	r7, #8
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}

08012a06 <_ZN6Parser25parse_multiply_expressionEv>:

Multiply_expression Parser::parse_multiply_expression()
{
 8012a06:	b5b0      	push	{r4, r5, r7, lr}
 8012a08:	b084      	sub	sp, #16
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	6078      	str	r0, [r7, #4]
 8012a0e:	6039      	str	r1, [r7, #0]
	Multiply_expression exp;
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f7ff ffe6 	bl	80129e2 <_ZN19Multiply_expressionC1Ev>
	exp.pow_exps.push_back(new Power_expression(parse_power_expression()));
 8012a16:	687d      	ldr	r5, [r7, #4]
 8012a18:	2008      	movs	r0, #8
 8012a1a:	f006 fd8e 	bl	801953a <_Znwj>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	461c      	mov	r4, r3
 8012a22:	6839      	ldr	r1, [r7, #0]
 8012a24:	4620      	mov	r0, r4
 8012a26:	f7ff ff33 	bl	8012890 <_ZN6Parser22parse_power_expressionEv>
 8012a2a:	60bc      	str	r4, [r7, #8]
 8012a2c:	f107 0308 	add.w	r3, r7, #8
 8012a30:	4619      	mov	r1, r3
 8012a32:	4628      	mov	r0, r5
 8012a34:	f000 fc27 	bl	8013286 <_ZNSt6vectorIP16Power_expressionSaIS1_EE9push_backEOS1_>
	while(match_multiply_operator(exp))
 8012a38:	6879      	ldr	r1, [r7, #4]
 8012a3a:	6838      	ldr	r0, [r7, #0]
 8012a3c:	f7ff ff61 	bl	8012902 <_ZN6Parser23match_multiply_operatorER19Multiply_expression>
 8012a40:	4603      	mov	r3, r0
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d014      	beq.n	8012a70 <_ZN6Parser25parse_multiply_expressionEv+0x6a>
	{
		get_next_token();
 8012a46:	6838      	ldr	r0, [r7, #0]
 8012a48:	f7f7 fede 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
		exp.pow_exps.push_back(new Power_expression(parse_power_expression()));
 8012a4c:	687d      	ldr	r5, [r7, #4]
 8012a4e:	2008      	movs	r0, #8
 8012a50:	f006 fd73 	bl	801953a <_Znwj>
 8012a54:	4603      	mov	r3, r0
 8012a56:	461c      	mov	r4, r3
 8012a58:	6839      	ldr	r1, [r7, #0]
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	f7ff ff18 	bl	8012890 <_ZN6Parser22parse_power_expressionEv>
 8012a60:	60fc      	str	r4, [r7, #12]
 8012a62:	f107 030c 	add.w	r3, r7, #12
 8012a66:	4619      	mov	r1, r3
 8012a68:	4628      	mov	r0, r5
 8012a6a:	f000 fc0c 	bl	8013286 <_ZNSt6vectorIP16Power_expressionSaIS1_EE9push_backEOS1_>
	while(match_multiply_operator(exp))
 8012a6e:	e7e3      	b.n	8012a38 <_ZN6Parser25parse_multiply_expressionEv+0x32>
	}
	return exp;
 8012a70:	bf00      	nop
}
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	3710      	adds	r7, #16
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bdb0      	pop	{r4, r5, r7, pc}

08012a7a <_ZN6Parser18match_sum_operatorER14Sum_expression>:

bool Parser::match_sum_operator(Sum_expression& exp)
{
 8012a7a:	b580      	push	{r7, lr}
 8012a7c:	b084      	sub	sp, #16
 8012a7e:	af00      	add	r7, sp, #0
 8012a80:	6078      	str	r0, [r7, #4]
 8012a82:	6039      	str	r1, [r7, #0]
	switch(token_buffer.get_type())
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	3308      	adds	r3, #8
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7ff f9f9 	bl	8011e80 <_ZN5Token8get_typeEv>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	2b1f      	cmp	r3, #31
 8012a92:	d002      	beq.n	8012a9a <_ZN6Parser18match_sum_operatorER14Sum_expression+0x20>
 8012a94:	2b20      	cmp	r3, #32
 8012a96:	d00b      	beq.n	8012ab0 <_ZN6Parser18match_sum_operatorER14Sum_expression+0x36>
 8012a98:	e015      	b.n	8012ac6 <_ZN6Parser18match_sum_operatorER14Sum_expression+0x4c>
	{
	case TOKEN_PLUS:
		exp.ops.push_back(SUM_OP_PLUS);
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	330c      	adds	r3, #12
 8012a9e:	2201      	movs	r2, #1
 8012aa0:	73ba      	strb	r2, [r7, #14]
 8012aa2:	f107 020e 	add.w	r2, r7, #14
 8012aa6:	4611      	mov	r1, r2
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f000 fbfd 	bl	80132a8 <_ZNSt6vectorI12sum_operatorSaIS0_EE9push_backEOS0_>
		break;
 8012aae:	e00c      	b.n	8012aca <_ZN6Parser18match_sum_operatorER14Sum_expression+0x50>
	case TOKEN_MINUS:
		exp.ops.push_back(SUM_OP_MINUS);
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	330c      	adds	r3, #12
 8012ab4:	2202      	movs	r2, #2
 8012ab6:	73fa      	strb	r2, [r7, #15]
 8012ab8:	f107 020f 	add.w	r2, r7, #15
 8012abc:	4611      	mov	r1, r2
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f000 fbf2 	bl	80132a8 <_ZNSt6vectorI12sum_operatorSaIS0_EE9push_backEOS0_>
		break;
 8012ac4:	e001      	b.n	8012aca <_ZN6Parser18match_sum_operatorER14Sum_expression+0x50>
	default:
		return false;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	e000      	b.n	8012acc <_ZN6Parser18match_sum_operatorER14Sum_expression+0x52>
	}
	return true;
 8012aca:	2301      	movs	r3, #1
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	3710      	adds	r7, #16
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}

08012ad4 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f000 fbf3 	bl	80132ca <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE12_Vector_implC1Ev>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	3708      	adds	r7, #8
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bd80      	pop	{r7, pc}

08012aee <_ZNSt6vectorIP19Multiply_expressionSaIS1_EEC1Ev>:
      vector() = default;
 8012aee:	b580      	push	{r7, lr}
 8012af0:	b082      	sub	sp, #8
 8012af2:	af00      	add	r7, sp, #0
 8012af4:	6078      	str	r0, [r7, #4]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7ff ffeb 	bl	8012ad4 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EEC1Ev>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	4618      	mov	r0, r3
 8012b02:	3708      	adds	r7, #8
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}

08012b08 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EEC1Ev>:
      _Vector_base() = default;
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b082      	sub	sp, #8
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	4618      	mov	r0, r3
 8012b14:	f000 fbe9 	bl	80132ea <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE12_Vector_implC1Ev>
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3708      	adds	r7, #8
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}

08012b22 <_ZNSt6vectorI12sum_operatorSaIS0_EEC1Ev>:
      vector() = default;
 8012b22:	b580      	push	{r7, lr}
 8012b24:	b082      	sub	sp, #8
 8012b26:	af00      	add	r7, sp, #0
 8012b28:	6078      	str	r0, [r7, #4]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7ff ffeb 	bl	8012b08 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EEC1Ev>
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	4618      	mov	r0, r3
 8012b36:	3708      	adds	r7, #8
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}

08012b3c <_ZN14Sum_expressionC1Ev>:
class Sum_expression
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b082      	sub	sp, #8
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7ff ffd1 	bl	8012aee <_ZNSt6vectorIP19Multiply_expressionSaIS1_EEC1Ev>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	330c      	adds	r3, #12
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7ff ffe6 	bl	8012b22 <_ZNSt6vectorI12sum_operatorSaIS0_EEC1Ev>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3708      	adds	r7, #8
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <_ZN6Parser20parse_sum_expressionEv>:

Sum_expression Parser::parse_sum_expression()
{
 8012b60:	b5b0      	push	{r4, r5, r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	6039      	str	r1, [r7, #0]
	Sum_expression exp;
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f7ff ffe6 	bl	8012b3c <_ZN14Sum_expressionC1Ev>
	exp.mult_exps.push_back(new Multiply_expression(parse_multiply_expression()));
 8012b70:	687d      	ldr	r5, [r7, #4]
 8012b72:	2018      	movs	r0, #24
 8012b74:	f006 fce1 	bl	801953a <_Znwj>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	461c      	mov	r4, r3
 8012b7c:	6839      	ldr	r1, [r7, #0]
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f7ff ff41 	bl	8012a06 <_ZN6Parser25parse_multiply_expressionEv>
 8012b84:	60bc      	str	r4, [r7, #8]
 8012b86:	f107 0308 	add.w	r3, r7, #8
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	4628      	mov	r0, r5
 8012b8e:	f000 fbbc 	bl	801330a <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE9push_backEOS1_>
	while(match_sum_operator(exp))
 8012b92:	6879      	ldr	r1, [r7, #4]
 8012b94:	6838      	ldr	r0, [r7, #0]
 8012b96:	f7ff ff70 	bl	8012a7a <_ZN6Parser18match_sum_operatorER14Sum_expression>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d014      	beq.n	8012bca <_ZN6Parser20parse_sum_expressionEv+0x6a>
	{
		get_next_token();
 8012ba0:	6838      	ldr	r0, [r7, #0]
 8012ba2:	f7f7 fe31 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
		exp.mult_exps.push_back(new Multiply_expression(parse_multiply_expression()));
 8012ba6:	687d      	ldr	r5, [r7, #4]
 8012ba8:	2018      	movs	r0, #24
 8012baa:	f006 fcc6 	bl	801953a <_Znwj>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	461c      	mov	r4, r3
 8012bb2:	6839      	ldr	r1, [r7, #0]
 8012bb4:	4620      	mov	r0, r4
 8012bb6:	f7ff ff26 	bl	8012a06 <_ZN6Parser25parse_multiply_expressionEv>
 8012bba:	60fc      	str	r4, [r7, #12]
 8012bbc:	f107 030c 	add.w	r3, r7, #12
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	f000 fba1 	bl	801330a <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE9push_backEOS1_>
	while(match_sum_operator(exp))
 8012bc8:	e7e3      	b.n	8012b92 <_ZN6Parser20parse_sum_expressionEv+0x32>
	}
	return exp;
 8012bca:	bf00      	nop
}
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	3710      	adds	r7, #16
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bdb0      	pop	{r4, r5, r7, pc}

08012bd4 <_ZN6Parser23match_relation_operatorER19Relation_expression>:

bool Parser::match_relation_operator(Relation_expression& exp)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b082      	sub	sp, #8
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	6039      	str	r1, [r7, #0]
	switch (token_buffer.get_type())
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	3308      	adds	r3, #8
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7ff f94c 	bl	8011e80 <_ZN5Token8get_typeEv>
 8012be8:	4603      	mov	r3, r0
 8012bea:	3b19      	subs	r3, #25
 8012bec:	2b03      	cmp	r3, #3
 8012bee:	d81b      	bhi.n	8012c28 <_ZN6Parser23match_relation_operatorER19Relation_expression+0x54>
 8012bf0:	a201      	add	r2, pc, #4	; (adr r2, 8012bf8 <_ZN6Parser23match_relation_operatorER19Relation_expression+0x24>)
 8012bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bf6:	bf00      	nop
 8012bf8:	08012c19 	.word	0x08012c19
 8012bfc:	08012c21 	.word	0x08012c21
 8012c00:	08012c09 	.word	0x08012c09
 8012c04:	08012c11 	.word	0x08012c11
	{
	case TOKEN_SMALLER_THAN:
		exp.op = REL_OP_SMALLER;
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	2201      	movs	r2, #1
 8012c0c:	721a      	strb	r2, [r3, #8]
		break;
 8012c0e:	e010      	b.n	8012c32 <_ZN6Parser23match_relation_operatorER19Relation_expression+0x5e>
	case TOKEN_SMALLER_OR_EQUAL:
		exp.op = REL_OP_SMALLER_EQUAL;
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	2202      	movs	r2, #2
 8012c14:	721a      	strb	r2, [r3, #8]
		break;
 8012c16:	e00c      	b.n	8012c32 <_ZN6Parser23match_relation_operatorER19Relation_expression+0x5e>
	case TOKEN_GREATER_THAN:
		exp.op = REL_OP_GREATER;
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	2203      	movs	r2, #3
 8012c1c:	721a      	strb	r2, [r3, #8]
		break;
 8012c1e:	e008      	b.n	8012c32 <_ZN6Parser23match_relation_operatorER19Relation_expression+0x5e>
	case TOKEN_GREATER_OR_EQUAL:
		exp.op = REL_OP_SMALLER_EQUAL;
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	2202      	movs	r2, #2
 8012c24:	721a      	strb	r2, [r3, #8]
		break;
 8012c26:	e004      	b.n	8012c32 <_ZN6Parser23match_relation_operatorER19Relation_expression+0x5e>
	default:
		exp.right_sum_exp = nullptr;
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	605a      	str	r2, [r3, #4]
		return false;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	e000      	b.n	8012c34 <_ZN6Parser23match_relation_operatorER19Relation_expression+0x60>
	}
	return true;
 8012c32:	2301      	movs	r3, #1
}
 8012c34:	4618      	mov	r0, r3
 8012c36:	3708      	adds	r7, #8
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}

08012c3c <_ZN6Parser25parse_relation_expressionEv>:

Relation_expression Parser::parse_relation_expression()
{
 8012c3c:	b590      	push	{r4, r7, lr}
 8012c3e:	b083      	sub	sp, #12
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
 8012c44:	6039      	str	r1, [r7, #0]
	Relation_expression exp{};
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	461a      	mov	r2, r3
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	6013      	str	r3, [r2, #0]
 8012c4e:	6053      	str	r3, [r2, #4]
 8012c50:	6093      	str	r3, [r2, #8]
	exp.left_sum_exp = new Sum_expression(parse_sum_expression());
 8012c52:	2018      	movs	r0, #24
 8012c54:	f006 fc71 	bl	801953a <_Znwj>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	461c      	mov	r4, r3
 8012c5c:	6839      	ldr	r1, [r7, #0]
 8012c5e:	4620      	mov	r0, r4
 8012c60:	f7ff ff7e 	bl	8012b60 <_ZN6Parser20parse_sum_expressionEv>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	601c      	str	r4, [r3, #0]
	if(match_relation_operator(exp))
 8012c68:	6879      	ldr	r1, [r7, #4]
 8012c6a:	6838      	ldr	r0, [r7, #0]
 8012c6c:	f7ff ffb2 	bl	8012bd4 <_ZN6Parser23match_relation_operatorER19Relation_expression>
 8012c70:	4603      	mov	r3, r0
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d00d      	beq.n	8012c92 <_ZN6Parser25parse_relation_expressionEv+0x56>
	{
		get_next_token();
 8012c76:	6838      	ldr	r0, [r7, #0]
 8012c78:	f7f7 fdc6 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
		exp.right_sum_exp = new Sum_expression(parse_sum_expression());
 8012c7c:	2018      	movs	r0, #24
 8012c7e:	f006 fc5c 	bl	801953a <_Znwj>
 8012c82:	4603      	mov	r3, r0
 8012c84:	461c      	mov	r4, r3
 8012c86:	6839      	ldr	r1, [r7, #0]
 8012c88:	4620      	mov	r0, r4
 8012c8a:	f7ff ff69 	bl	8012b60 <_ZN6Parser20parse_sum_expressionEv>
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	605c      	str	r4, [r3, #4]
	}
	return exp;
 8012c92:	bf00      	nop
}
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	370c      	adds	r7, #12
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd90      	pop	{r4, r7, pc}

08012c9c <_ZN6Parser22match_compare_operatorER18Compare_expression>:

bool Parser::match_compare_operator(Compare_expression &exp)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b082      	sub	sp, #8
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
 8012ca4:	6039      	str	r1, [r7, #0]
	switch (token_buffer.get_type())
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	3308      	adds	r3, #8
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7ff f8e8 	bl	8011e80 <_ZN5Token8get_typeEv>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	2b1d      	cmp	r3, #29
 8012cb4:	d002      	beq.n	8012cbc <_ZN6Parser22match_compare_operatorER18Compare_expression+0x20>
 8012cb6:	2b1e      	cmp	r3, #30
 8012cb8:	d004      	beq.n	8012cc4 <_ZN6Parser22match_compare_operatorER18Compare_expression+0x28>
 8012cba:	e007      	b.n	8012ccc <_ZN6Parser22match_compare_operatorER18Compare_expression+0x30>
	{
	case TOKEN_EQUALS:
		exp.op = COMP_OP_EQUAL;
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	2201      	movs	r2, #1
 8012cc0:	721a      	strb	r2, [r3, #8]
		break;
 8012cc2:	e008      	b.n	8012cd6 <_ZN6Parser22match_compare_operatorER18Compare_expression+0x3a>
	case TOKEN_NOT_EQUAL:
		exp.op = COMP_OP_NOT_EQUAL;
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	2202      	movs	r2, #2
 8012cc8:	721a      	strb	r2, [r3, #8]
		break;
 8012cca:	e004      	b.n	8012cd6 <_ZN6Parser22match_compare_operatorER18Compare_expression+0x3a>
	default:
		exp.right_rel_exp = nullptr;
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	2200      	movs	r2, #0
 8012cd0:	605a      	str	r2, [r3, #4]
		return false;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	e000      	b.n	8012cd8 <_ZN6Parser22match_compare_operatorER18Compare_expression+0x3c>
	}
	return true;
 8012cd6:	2301      	movs	r3, #1
}
 8012cd8:	4618      	mov	r0, r3
 8012cda:	3708      	adds	r7, #8
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}

08012ce0 <_ZN6Parser24parse_compare_expressionEv>:

Compare_expression Parser::parse_compare_expression()
{
 8012ce0:	b590      	push	{r4, r7, lr}
 8012ce2:	b083      	sub	sp, #12
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
 8012ce8:	6039      	str	r1, [r7, #0]
	Compare_expression exp{};
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	461a      	mov	r2, r3
 8012cee:	2300      	movs	r3, #0
 8012cf0:	6013      	str	r3, [r2, #0]
 8012cf2:	6053      	str	r3, [r2, #4]
 8012cf4:	6093      	str	r3, [r2, #8]
	exp.left_rel_exp = new Relation_expression(parse_relation_expression());
 8012cf6:	200c      	movs	r0, #12
 8012cf8:	f006 fc1f 	bl	801953a <_Znwj>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	461c      	mov	r4, r3
 8012d00:	6839      	ldr	r1, [r7, #0]
 8012d02:	4620      	mov	r0, r4
 8012d04:	f7ff ff9a 	bl	8012c3c <_ZN6Parser25parse_relation_expressionEv>
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	601c      	str	r4, [r3, #0]
	if(match_compare_operator(exp))
 8012d0c:	6879      	ldr	r1, [r7, #4]
 8012d0e:	6838      	ldr	r0, [r7, #0]
 8012d10:	f7ff ffc4 	bl	8012c9c <_ZN6Parser22match_compare_operatorER18Compare_expression>
 8012d14:	4603      	mov	r3, r0
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d00d      	beq.n	8012d36 <_ZN6Parser24parse_compare_expressionEv+0x56>
	{
		get_next_token();
 8012d1a:	6838      	ldr	r0, [r7, #0]
 8012d1c:	f7f7 fd74 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
		exp.right_rel_exp = new Relation_expression(parse_relation_expression());
 8012d20:	200c      	movs	r0, #12
 8012d22:	f006 fc0a 	bl	801953a <_Znwj>
 8012d26:	4603      	mov	r3, r0
 8012d28:	461c      	mov	r4, r3
 8012d2a:	6839      	ldr	r1, [r7, #0]
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	f7ff ff85 	bl	8012c3c <_ZN6Parser25parse_relation_expressionEv>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	605c      	str	r4, [r3, #4]
	}
	return exp;
 8012d36:	bf00      	nop
}
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	370c      	adds	r7, #12
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd90      	pop	{r4, r7, pc}

08012d40 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f000 faee 	bl	801332c <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE12_Vector_implC1Ev>
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	4618      	mov	r0, r3
 8012d54:	3708      	adds	r7, #8
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}

08012d5a <_ZNSt6vectorIP18Compare_expressionSaIS1_EEC1Ev>:
      vector() = default;
 8012d5a:	b580      	push	{r7, lr}
 8012d5c:	b082      	sub	sp, #8
 8012d5e:	af00      	add	r7, sp, #0
 8012d60:	6078      	str	r0, [r7, #4]
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7ff ffeb 	bl	8012d40 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EEC1Ev>
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	3708      	adds	r7, #8
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}

08012d74 <_ZN14And_expressionC1Ev>:
class And_expression
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b082      	sub	sp, #8
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7ff ffeb 	bl	8012d5a <_ZNSt6vectorIP18Compare_expressionSaIS1_EEC1Ev>
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	4618      	mov	r0, r3
 8012d88:	3708      	adds	r7, #8
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}

08012d8e <_ZN6Parser20parse_and_expressionEv>:

And_expression Parser::parse_and_expression()
{
 8012d8e:	b5b0      	push	{r4, r5, r7, lr}
 8012d90:	b084      	sub	sp, #16
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	6078      	str	r0, [r7, #4]
 8012d96:	6039      	str	r1, [r7, #0]
	And_expression exp;
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f7ff ffeb 	bl	8012d74 <_ZN14And_expressionC1Ev>
	exp.comp_exps.push_back(new Compare_expression(parse_compare_expression()));
 8012d9e:	687d      	ldr	r5, [r7, #4]
 8012da0:	200c      	movs	r0, #12
 8012da2:	f006 fbca 	bl	801953a <_Znwj>
 8012da6:	4603      	mov	r3, r0
 8012da8:	461c      	mov	r4, r3
 8012daa:	6839      	ldr	r1, [r7, #0]
 8012dac:	4620      	mov	r0, r4
 8012dae:	f7ff ff97 	bl	8012ce0 <_ZN6Parser24parse_compare_expressionEv>
 8012db2:	60bc      	str	r4, [r7, #8]
 8012db4:	f107 0308 	add.w	r3, r7, #8
 8012db8:	4619      	mov	r1, r3
 8012dba:	4628      	mov	r0, r5
 8012dbc:	f000 fac6 	bl	801334c <_ZNSt6vectorIP18Compare_expressionSaIS1_EE9push_backEOS1_>
	while(token_buffer.get_type() == TOKEN_AND)
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	3308      	adds	r3, #8
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7ff f85b 	bl	8011e80 <_ZN5Token8get_typeEv>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	2b16      	cmp	r3, #22
 8012dce:	bf0c      	ite	eq
 8012dd0:	2301      	moveq	r3, #1
 8012dd2:	2300      	movne	r3, #0
 8012dd4:	b2db      	uxtb	r3, r3
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d014      	beq.n	8012e04 <_ZN6Parser20parse_and_expressionEv+0x76>
	{
		get_next_token();
 8012dda:	6838      	ldr	r0, [r7, #0]
 8012ddc:	f7f7 fd14 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
		exp.comp_exps.push_back(new Compare_expression(parse_compare_expression()));
 8012de0:	687d      	ldr	r5, [r7, #4]
 8012de2:	200c      	movs	r0, #12
 8012de4:	f006 fba9 	bl	801953a <_Znwj>
 8012de8:	4603      	mov	r3, r0
 8012dea:	461c      	mov	r4, r3
 8012dec:	6839      	ldr	r1, [r7, #0]
 8012dee:	4620      	mov	r0, r4
 8012df0:	f7ff ff76 	bl	8012ce0 <_ZN6Parser24parse_compare_expressionEv>
 8012df4:	60fc      	str	r4, [r7, #12]
 8012df6:	f107 030c 	add.w	r3, r7, #12
 8012dfa:	4619      	mov	r1, r3
 8012dfc:	4628      	mov	r0, r5
 8012dfe:	f000 faa5 	bl	801334c <_ZNSt6vectorIP18Compare_expressionSaIS1_EE9push_backEOS1_>
	while(token_buffer.get_type() == TOKEN_AND)
 8012e02:	e7dd      	b.n	8012dc0 <_ZN6Parser20parse_and_expressionEv+0x32>
	}
	return exp;
 8012e04:	bf00      	nop
}
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	3710      	adds	r7, #16
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bdb0      	pop	{r4, r5, r7, pc}

08012e0e <_ZN6Parser16parse_expressionEv>:

Expression Parser::parse_expression()
{
 8012e0e:	b5b0      	push	{r4, r5, r7, lr}
 8012e10:	b084      	sub	sp, #16
 8012e12:	af00      	add	r7, sp, #0
 8012e14:	6078      	str	r0, [r7, #4]
 8012e16:	6039      	str	r1, [r7, #0]
	Expression exp;
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f7f6 fca1 	bl	8009760 <_ZN10ExpressionC1Ev>
	exp.and_exps.push_back(new And_expression(parse_and_expression()));
 8012e1e:	687d      	ldr	r5, [r7, #4]
 8012e20:	200c      	movs	r0, #12
 8012e22:	f006 fb8a 	bl	801953a <_Znwj>
 8012e26:	4603      	mov	r3, r0
 8012e28:	461c      	mov	r4, r3
 8012e2a:	6839      	ldr	r1, [r7, #0]
 8012e2c:	4620      	mov	r0, r4
 8012e2e:	f7ff ffae 	bl	8012d8e <_ZN6Parser20parse_and_expressionEv>
 8012e32:	60bc      	str	r4, [r7, #8]
 8012e34:	f107 0308 	add.w	r3, r7, #8
 8012e38:	4619      	mov	r1, r3
 8012e3a:	4628      	mov	r0, r5
 8012e3c:	f000 fa97 	bl	801336e <_ZNSt6vectorIP14And_expressionSaIS1_EE9push_backEOS1_>
	while(token_buffer.get_type() == TOKEN_OR)
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	3308      	adds	r3, #8
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7ff f81b 	bl	8011e80 <_ZN5Token8get_typeEv>
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	2b15      	cmp	r3, #21
 8012e4e:	bf0c      	ite	eq
 8012e50:	2301      	moveq	r3, #1
 8012e52:	2300      	movne	r3, #0
 8012e54:	b2db      	uxtb	r3, r3
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d014      	beq.n	8012e84 <_ZN6Parser16parse_expressionEv+0x76>
	{
		get_next_token();
 8012e5a:	6838      	ldr	r0, [r7, #0]
 8012e5c:	f7f7 fcd4 	bl	800a808 <_ZN6Parser14get_next_tokenEv>
		exp.and_exps.push_back(new And_expression(parse_and_expression()));
 8012e60:	687d      	ldr	r5, [r7, #4]
 8012e62:	200c      	movs	r0, #12
 8012e64:	f006 fb69 	bl	801953a <_Znwj>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	461c      	mov	r4, r3
 8012e6c:	6839      	ldr	r1, [r7, #0]
 8012e6e:	4620      	mov	r0, r4
 8012e70:	f7ff ff8d 	bl	8012d8e <_ZN6Parser20parse_and_expressionEv>
 8012e74:	60fc      	str	r4, [r7, #12]
 8012e76:	f107 030c 	add.w	r3, r7, #12
 8012e7a:	4619      	mov	r1, r3
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	f000 fa76 	bl	801336e <_ZNSt6vectorIP14And_expressionSaIS1_EE9push_backEOS1_>
	while(token_buffer.get_type() == TOKEN_OR)
 8012e82:	e7dd      	b.n	8012e40 <_ZN6Parser16parse_expressionEv+0x32>
	}
	return exp;
 8012e84:	bf00      	nop
}
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	3710      	adds	r7, #16
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bdb0      	pop	{r4, r5, r7, pc}

08012e8e <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 8012e8e:	b590      	push	{r4, r7, lr}
 8012e90:	b085      	sub	sp, #20
 8012e92:	af00      	add	r7, sp, #0
 8012e94:	6078      	str	r0, [r7, #4]
 8012e96:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 8012e98:	2305      	movs	r3, #5
 8012e9a:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f7ee fd67 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	2b05      	cmp	r3, #5
 8012ea6:	bf0c      	ite	eq
 8012ea8:	2301      	moveq	r3, #1
 8012eaa:	2300      	movne	r3, #0
 8012eac:	b2db      	uxtb	r3, r3
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d00a      	beq.n	8012ec8 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 8012eb2:	6838      	ldr	r0, [r7, #0]
 8012eb4:	f000 fa6c 	bl	8013390 <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	681c      	ldr	r4, [r3, #0]
 8012ebc:	6878      	ldr	r0, [r7, #4]
 8012ebe:	f7ef fb01 	bl	80024c4 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	601c      	str	r4, [r3, #0]
 8012ec6:	e007      	b.n	8012ed8 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8012ec8:	6838      	ldr	r0, [r7, #0]
 8012eca:	f000 fa61 	bl	8013390 <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	4619      	mov	r1, r3
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	f000 fa67 	bl	80133a6 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj5EJS9_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 8012ed8:	687b      	ldr	r3, [r7, #4]
	}
 8012eda:	4618      	mov	r0, r3
 8012edc:	3714      	adds	r7, #20
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd90      	pop	{r4, r7, pc}

08012ee2 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 8012ee2:	b590      	push	{r4, r7, lr}
 8012ee4:	b085      	sub	sp, #20
 8012ee6:	af00      	add	r7, sp, #0
 8012ee8:	6078      	str	r0, [r7, #4]
 8012eea:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 8012eec:	2304      	movs	r3, #4
 8012eee:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f7ee fd3d 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	2b04      	cmp	r3, #4
 8012efa:	bf0c      	ite	eq
 8012efc:	2301      	moveq	r3, #1
 8012efe:	2300      	movne	r3, #0
 8012f00:	b2db      	uxtb	r3, r3
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d00a      	beq.n	8012f1c <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 8012f06:	6838      	ldr	r0, [r7, #0]
 8012f08:	f000 fa66 	bl	80133d8 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	681c      	ldr	r4, [r3, #0]
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f7ef fa3f 	bl	8002394 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8012f16:	4603      	mov	r3, r0
 8012f18:	601c      	str	r4, [r3, #0]
 8012f1a:	e007      	b.n	8012f2c <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8012f1c:	6838      	ldr	r0, [r7, #0]
 8012f1e:	f000 fa5b 	bl	80133d8 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>
 8012f22:	4603      	mov	r3, r0
 8012f24:	4619      	mov	r1, r3
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f000 fa61 	bl	80133ee <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj4EJS7_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 8012f2c:	687b      	ldr	r3, [r7, #4]
	}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	3714      	adds	r7, #20
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd90      	pop	{r4, r7, pc}

08012f36 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8012f36:	b580      	push	{r7, lr}
 8012f38:	b082      	sub	sp, #8
 8012f3a:	af00      	add	r7, sp, #0
 8012f3c:	6078      	str	r0, [r7, #4]
 8012f3e:	7039      	strb	r1, [r7, #0]
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	4611      	mov	r1, r2
 8012f44:	4618      	mov	r0, r3
 8012f46:	f000 fa89 	bl	801345c <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	3708      	adds	r7, #8
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}

08012f54 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b082      	sub	sp, #8
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	7039      	strb	r1, [r7, #0]
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	4611      	mov	r1, r2
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7ff ffe7 	bl	8012f36 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3708      	adds	r7, #8
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}

08012f72 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8012f72:	b580      	push	{r7, lr}
 8012f74:	b082      	sub	sp, #8
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	6078      	str	r0, [r7, #4]
 8012f7a:	7039      	strb	r1, [r7, #0]
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	4611      	mov	r1, r2
 8012f80:	4618      	mov	r0, r3
 8012f82:	f7ff ffe7 	bl	8012f54 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	4618      	mov	r0, r3
 8012f8a:	3708      	adds	r7, #8
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}

08012f90 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b082      	sub	sp, #8
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	7039      	strb	r1, [r7, #0]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	4611      	mov	r1, r2
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7ff ffe7 	bl	8012f72 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3708      	adds	r7, #8
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}

08012fae <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8012fae:	b580      	push	{r7, lr}
 8012fb0:	b082      	sub	sp, #8
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	6078      	str	r0, [r7, #4]
 8012fb6:	7039      	strb	r1, [r7, #0]
	: _Base(__i, std::forward<_Args>(__args)...)
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	4611      	mov	r1, r2
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7ff ffe7 	bl	8012f90 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	3708      	adds	r7, #8
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}

08012fcc <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1Ev>:
      _Variant_base()
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
      : _Variant_base(in_place_index<0>) { }
 8012fd4:	4619      	mov	r1, r3
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f7ff ffe9 	bl	8012fae <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	4618      	mov	r0, r3
 8012fe0:	3708      	adds	r7, #8
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}

08012fe6 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 8012fe6:	b590      	push	{r4, r7, lr}
 8012fe8:	b085      	sub	sp, #20
 8012fea:	af00      	add	r7, sp, #0
 8012fec:	6078      	str	r0, [r7, #4]
 8012fee:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f7ee fcbb 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	bf0c      	ite	eq
 8013000:	2301      	moveq	r3, #1
 8013002:	2300      	movne	r3, #0
 8013004:	b2db      	uxtb	r3, r3
 8013006:	2b00      	cmp	r3, #0
 8013008:	d00b      	beq.n	8013022 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3c>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 801300a:	6838      	ldr	r0, [r7, #0]
 801300c:	f7fd ff62 	bl	8010ed4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8013010:	4603      	mov	r3, r0
 8013012:	781c      	ldrb	r4, [r3, #0]
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	f000 fa33 	bl	8013480 <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 801301a:	4603      	mov	r3, r0
 801301c:	4622      	mov	r2, r4
 801301e:	701a      	strb	r2, [r3, #0]
 8013020:	e007      	b.n	8013032 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4c>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8013022:	6838      	ldr	r0, [r7, #0]
 8013024:	f7fd ff56 	bl	8010ed4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8013028:	4603      	mov	r3, r0
 801302a:	4619      	mov	r1, r3
 801302c:	6878      	ldr	r0, [r7, #4]
 801302e:	f000 fa43 	bl	80134b8 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj0EJbEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 8013032:	687b      	ldr	r3, [r7, #4]
	}
 8013034:	4618      	mov	r0, r3
 8013036:	3714      	adds	r7, #20
 8013038:	46bd      	mov	sp, r7
 801303a:	bd90      	pop	{r4, r7, pc}

0801303c <_ZSt3getIiJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEOT_OSt7variantIJDpT0_EE>:
    constexpr _Tp&& get(variant<_Types...>&& __v)
 801303c:	b580      	push	{r7, lr}
 801303e:	b082      	sub	sp, #8
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
	std::move(__v));
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f7f9 fa67 	bl	800c518 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 801304a:	4603      	mov	r3, r0
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
 801304c:	4618      	mov	r0, r3
 801304e:	f000 fa81 	bl	8013554 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>
 8013052:	4603      	mov	r3, r0
    }
 8013054:	4618      	mov	r0, r3
 8013056:	3708      	adds	r7, #8
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIiEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 801305c:	b590      	push	{r4, r7, lr}
 801305e:	b085      	sub	sp, #20
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 8013066:	2301      	movs	r3, #1
 8013068:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 801306a:	6878      	ldr	r0, [r7, #4]
 801306c:	f7ee fc80 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8013070:	4603      	mov	r3, r0
 8013072:	2b01      	cmp	r3, #1
 8013074:	bf0c      	ite	eq
 8013076:	2301      	moveq	r3, #1
 8013078:	2300      	movne	r3, #0
 801307a:	b2db      	uxtb	r3, r3
 801307c:	2b00      	cmp	r3, #0
 801307e:	d00a      	beq.n	8013096 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIiEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 8013080:	6838      	ldr	r0, [r7, #0]
 8013082:	f7f4 f97c 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8013086:	4603      	mov	r3, r0
 8013088:	681c      	ldr	r4, [r3, #0]
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f000 fa82 	bl	8013594 <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8013090:	4603      	mov	r3, r0
 8013092:	601c      	str	r4, [r3, #0]
 8013094:	e007      	b.n	80130a6 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIiEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8013096:	6838      	ldr	r0, [r7, #0]
 8013098:	f7f4 f971 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 801309c:	4603      	mov	r3, r0
 801309e:	4619      	mov	r1, r3
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f000 fa93 	bl	80135cc <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj1EJiEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 80130a6:	687b      	ldr	r3, [r7, #4]
	}
 80130a8:	4618      	mov	r0, r3
 80130aa:	3714      	adds	r7, #20
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd90      	pop	{r4, r7, pc}

080130b0 <_ZSt3getIfJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEOT_OSt7variantIJDpT0_EE>:
    constexpr _Tp&& get(variant<_Types...>&& __v)
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b082      	sub	sp, #8
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
	std::move(__v));
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f7f9 fa2d 	bl	800c518 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 80130be:	4603      	mov	r3, r0
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
 80130c0:	4618      	mov	r0, r3
 80130c2:	f000 fae3 	bl	801368c <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>
 80130c6:	4603      	mov	r3, r0
    }
 80130c8:	4618      	mov	r0, r3
 80130ca:	3708      	adds	r7, #8
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd80      	pop	{r7, pc}

080130d0 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIfEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 80130d0:	b590      	push	{r4, r7, lr}
 80130d2:	b085      	sub	sp, #20
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
 80130d8:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 80130da:	2302      	movs	r3, #2
 80130dc:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f7ee fc46 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80130e4:	4603      	mov	r3, r0
 80130e6:	2b02      	cmp	r3, #2
 80130e8:	bf0c      	ite	eq
 80130ea:	2301      	moveq	r3, #1
 80130ec:	2300      	movne	r3, #0
 80130ee:	b2db      	uxtb	r3, r3
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d00a      	beq.n	801310a <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIfEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 80130f4:	6838      	ldr	r0, [r7, #0]
 80130f6:	f7f4 f979 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80130fa:	4603      	mov	r3, r0
 80130fc:	681c      	ldr	r4, [r3, #0]
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f000 fae4 	bl	80136cc <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8013104:	4603      	mov	r3, r0
 8013106:	601c      	str	r4, [r3, #0]
 8013108:	e007      	b.n	801311a <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIfEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 801310a:	6838      	ldr	r0, [r7, #0]
 801310c:	f7f4 f96e 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8013110:	4603      	mov	r3, r0
 8013112:	4619      	mov	r1, r3
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f000 faf5 	bl	8013704 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj2EJfEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 801311a:	687b      	ldr	r3, [r7, #4]
	}
 801311c:	4618      	mov	r0, r3
 801311e:	3714      	adds	r7, #20
 8013120:	46bd      	mov	sp, r7
 8013122:	bd90      	pop	{r4, r7, pc}

08013124 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 8013124:	b590      	push	{r4, r7, lr}
 8013126:	b085      	sub	sp, #20
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 801312e:	2303      	movs	r3, #3
 8013130:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 8013132:	6878      	ldr	r0, [r7, #4]
 8013134:	f7ee fc1c 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8013138:	4603      	mov	r3, r0
 801313a:	2b03      	cmp	r3, #3
 801313c:	bf0c      	ite	eq
 801313e:	2301      	moveq	r3, #1
 8013140:	2300      	movne	r3, #0
 8013142:	b2db      	uxtb	r3, r3
 8013144:	2b00      	cmp	r3, #0
 8013146:	d00c      	beq.n	8013162 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3e>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 8013148:	6838      	ldr	r0, [r7, #0]
 801314a:	f7f4 f8e1 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801314e:	4604      	mov	r4, r0
 8013150:	6878      	ldr	r0, [r7, #4]
 8013152:	f000 faf1 	bl	8013738 <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8013156:	4603      	mov	r3, r0
 8013158:	4621      	mov	r1, r4
 801315a:	4618      	mov	r0, r3
 801315c:	f006 fbd1 	bl	8019902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8013160:	e007      	b.n	8013172 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4e>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8013162:	6838      	ldr	r0, [r7, #0]
 8013164:	f7f4 f8d4 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8013168:	4603      	mov	r3, r0
 801316a:	4619      	mov	r1, r3
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f000 faff 	bl	8013770 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj3EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 8013172:	687b      	ldr	r3, [r7, #4]
	}
 8013174:	4618      	mov	r0, r3
 8013176:	3714      	adds	r7, #20
 8013178:	46bd      	mov	sp, r7
 801317a:	bd90      	pop	{r4, r7, pc}

0801317c <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>:
	operator=(_Tp&& __rhs)
 801317c:	b590      	push	{r4, r7, lr}
 801317e:	b085      	sub	sp, #20
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
 8013184:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 8013186:	2301      	movs	r3, #1
 8013188:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f7ee fc3d 	bl	8001a0a <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 8013190:	4603      	mov	r3, r0
 8013192:	2b01      	cmp	r3, #1
 8013194:	bf0c      	ite	eq
 8013196:	2301      	moveq	r3, #1
 8013198:	2300      	movne	r3, #0
 801319a:	b2db      	uxtb	r3, r3
 801319c:	2b00      	cmp	r3, #0
 801319e:	d00a      	beq.n	80131b6 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 80131a0:	6838      	ldr	r0, [r7, #0]
 80131a2:	f7fa fccb 	bl	800db3c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80131a6:	4603      	mov	r3, r0
 80131a8:	681c      	ldr	r4, [r3, #0]
 80131aa:	6878      	ldr	r0, [r7, #4]
 80131ac:	f7ef f9da 	bl	8002564 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 80131b0:	4603      	mov	r3, r0
 80131b2:	601c      	str	r4, [r3, #0]
 80131b4:	e007      	b.n	80131c6 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 80131b6:	6838      	ldr	r0, [r7, #0]
 80131b8:	f7fa fcc0 	bl	800db3c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80131bc:	4603      	mov	r3, r0
 80131be:	4619      	mov	r1, r3
 80131c0:	6878      	ldr	r0, [r7, #4]
 80131c2:	f000 faee 	bl	80137a2 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEE7emplaceILj1EJS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>
	  return *this;
 80131c6:	687b      	ldr	r3, [r7, #4]
	}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3714      	adds	r7, #20
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd90      	pop	{r4, r7, pc}

080131d0 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>:
	operator=(_Tp&& __rhs)
 80131d0:	b590      	push	{r4, r7, lr}
 80131d2:	b085      	sub	sp, #20
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
 80131d8:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 80131da:	2300      	movs	r3, #0
 80131dc:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f7ee fc13 	bl	8001a0a <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 80131e4:	4603      	mov	r3, r0
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	bf0c      	ite	eq
 80131ea:	2301      	moveq	r3, #1
 80131ec:	2300      	movne	r3, #0
 80131ee:	b2db      	uxtb	r3, r3
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d00a      	beq.n	801320a <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 80131f4:	6838      	ldr	r0, [r7, #0]
 80131f6:	f000 faed 	bl	80137d4 <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80131fa:	4603      	mov	r3, r0
 80131fc:	681c      	ldr	r4, [r3, #0]
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f7ef f9ee 	bl	80025e0 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 8013204:	4603      	mov	r3, r0
 8013206:	601c      	str	r4, [r3, #0]
 8013208:	e007      	b.n	801321a <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 801320a:	6838      	ldr	r0, [r7, #0]
 801320c:	f000 fae2 	bl	80137d4 <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013210:	4603      	mov	r3, r0
 8013212:	4619      	mov	r1, r3
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f000 fae8 	bl	80137ea <_ZNSt7variantIJP17Primal_expressionP10ExpressionEE7emplaceILj0EJS1_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>
	  return *this;
 801321a:	687b      	ldr	r3, [r7, #4]
	}
 801321c:	4618      	mov	r0, r3
 801321e:	3714      	adds	r7, #20
 8013220:	46bd      	mov	sp, r7
 8013222:	bd90      	pop	{r4, r7, pc}

08013224 <_ZNSt6vectorI13mult_operatorSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 8013224:	b580      	push	{r7, lr}
 8013226:	b082      	sub	sp, #8
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 801322e:	6838      	ldr	r0, [r7, #0]
 8013230:	f000 faf4 	bl	801381c <_ZSt4moveIR13mult_operatorEONSt16remove_referenceIT_E4typeEOS3_>
 8013234:	4603      	mov	r3, r0
 8013236:	4619      	mov	r1, r3
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f000 fafa 	bl	8013832 <_ZNSt6vectorI13mult_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_>
 801323e:	bf00      	nop
 8013240:	3708      	adds	r7, #8
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}

08013246 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8013246:	b580      	push	{r7, lr}
 8013248:	b082      	sub	sp, #8
 801324a:	af00      	add	r7, sp, #0
 801324c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f000 fb21 	bl	8013896 <_ZNSaIP16Power_expressionEC1Ev>
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	4618      	mov	r0, r3
 8013258:	f000 fb29 	bl	80138ae <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	4618      	mov	r0, r3
 8013260:	3708      	adds	r7, #8
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}

08013266 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8013266:	b580      	push	{r7, lr}
 8013268:	b082      	sub	sp, #8
 801326a:	af00      	add	r7, sp, #0
 801326c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 801326e:	6878      	ldr	r0, [r7, #4]
 8013270:	f000 fb31 	bl	80138d6 <_ZNSaI13mult_operatorEC1Ev>
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	4618      	mov	r0, r3
 8013278:	f000 fb39 	bl	80138ee <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	4618      	mov	r0, r3
 8013280:	3708      	adds	r7, #8
 8013282:	46bd      	mov	sp, r7
 8013284:	bd80      	pop	{r7, pc}

08013286 <_ZNSt6vectorIP16Power_expressionSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8013286:	b580      	push	{r7, lr}
 8013288:	b082      	sub	sp, #8
 801328a:	af00      	add	r7, sp, #0
 801328c:	6078      	str	r0, [r7, #4]
 801328e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8013290:	6838      	ldr	r0, [r7, #0]
 8013292:	f000 fb40 	bl	8013916 <_ZSt4moveIRP16Power_expressionEONSt16remove_referenceIT_E4typeEOS4_>
 8013296:	4603      	mov	r3, r0
 8013298:	4619      	mov	r1, r3
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	f000 fb46 	bl	801392c <_ZNSt6vectorIP16Power_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80132a0:	bf00      	nop
 80132a2:	3708      	adds	r7, #8
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <_ZNSt6vectorI12sum_operatorSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b082      	sub	sp, #8
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
 80132b0:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80132b2:	6838      	ldr	r0, [r7, #0]
 80132b4:	f000 fba1 	bl	80139fa <_ZSt4moveIR12sum_operatorEONSt16remove_referenceIT_E4typeEOS3_>
 80132b8:	4603      	mov	r3, r0
 80132ba:	4619      	mov	r1, r3
 80132bc:	6878      	ldr	r0, [r7, #4]
 80132be:	f000 fba7 	bl	8013a10 <_ZNSt6vectorI12sum_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_>
 80132c2:	bf00      	nop
 80132c4:	3708      	adds	r7, #8
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}

080132ca <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80132ca:	b580      	push	{r7, lr}
 80132cc:	b082      	sub	sp, #8
 80132ce:	af00      	add	r7, sp, #0
 80132d0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80132d2:	6878      	ldr	r0, [r7, #4]
 80132d4:	f000 fbce 	bl	8013a74 <_ZNSaIP19Multiply_expressionEC1Ev>
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	4618      	mov	r0, r3
 80132dc:	f000 fbd6 	bl	8013a8c <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	4618      	mov	r0, r3
 80132e4:	3708      	adds	r7, #8
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}

080132ea <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80132ea:	b580      	push	{r7, lr}
 80132ec:	b082      	sub	sp, #8
 80132ee:	af00      	add	r7, sp, #0
 80132f0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f000 fbde 	bl	8013ab4 <_ZNSaI12sum_operatorEC1Ev>
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	4618      	mov	r0, r3
 80132fc:	f000 fbe6 	bl	8013acc <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	4618      	mov	r0, r3
 8013304:	3708      	adds	r7, #8
 8013306:	46bd      	mov	sp, r7
 8013308:	bd80      	pop	{r7, pc}

0801330a <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 801330a:	b580      	push	{r7, lr}
 801330c:	b082      	sub	sp, #8
 801330e:	af00      	add	r7, sp, #0
 8013310:	6078      	str	r0, [r7, #4]
 8013312:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8013314:	6838      	ldr	r0, [r7, #0]
 8013316:	f000 fbed 	bl	8013af4 <_ZSt4moveIRP19Multiply_expressionEONSt16remove_referenceIT_E4typeEOS4_>
 801331a:	4603      	mov	r3, r0
 801331c:	4619      	mov	r1, r3
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	f000 fbf3 	bl	8013b0a <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8013324:	bf00      	nop
 8013326:	3708      	adds	r7, #8
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}

0801332c <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f000 fc4f 	bl	8013bd8 <_ZNSaIP18Compare_expressionEC1Ev>
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	4618      	mov	r0, r3
 801333e:	f000 fc57 	bl	8013bf0 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	4618      	mov	r0, r3
 8013346:	3708      	adds	r7, #8
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}

0801334c <_ZNSt6vectorIP18Compare_expressionSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 801334c:	b580      	push	{r7, lr}
 801334e:	b082      	sub	sp, #8
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8013356:	6838      	ldr	r0, [r7, #0]
 8013358:	f000 fc5e 	bl	8013c18 <_ZSt4moveIRP18Compare_expressionEONSt16remove_referenceIT_E4typeEOS4_>
 801335c:	4603      	mov	r3, r0
 801335e:	4619      	mov	r1, r3
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f000 fc64 	bl	8013c2e <_ZNSt6vectorIP18Compare_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8013366:	bf00      	nop
 8013368:	3708      	adds	r7, #8
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}

0801336e <_ZNSt6vectorIP14And_expressionSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 801336e:	b580      	push	{r7, lr}
 8013370:	b082      	sub	sp, #8
 8013372:	af00      	add	r7, sp, #0
 8013374:	6078      	str	r0, [r7, #4]
 8013376:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8013378:	6838      	ldr	r0, [r7, #0]
 801337a:	f000 fca5 	bl	8013cc8 <_ZSt4moveIRP14And_expressionEONSt16remove_referenceIT_E4typeEOS4_>
 801337e:	4603      	mov	r3, r0
 8013380:	4619      	mov	r1, r3
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f000 fcab 	bl	8013cde <_ZNSt6vectorIP14And_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8013388:	bf00      	nop
 801338a:	3708      	adds	r7, #8
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}

08013390 <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013390:	b480      	push	{r7}
 8013392:	b083      	sub	sp, #12
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	4618      	mov	r0, r3
 801339c:	370c      	adds	r7, #12
 801339e:	46bd      	mov	sp, r7
 80133a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a4:	4770      	bx	lr

080133a6 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj5EJS9_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 80133a6:	b580      	push	{r7, lr}
 80133a8:	b082      	sub	sp, #8
 80133aa:	af00      	add	r7, sp, #0
 80133ac:	6078      	str	r0, [r7, #4]
 80133ae:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7ee ff76 	bl	80022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 80133b8:	6838      	ldr	r0, [r7, #0]
 80133ba:	f7ff ffe9 	bl	8013390 <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 80133be:	4603      	mov	r3, r0
 80133c0:	4619      	mov	r1, r3
 80133c2:	6878      	ldr	r0, [r7, #4]
 80133c4:	f000 fcbd 	bl	8013d42 <_ZSt28__variant_construct_by_indexILj5ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJSA_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	f7ef f87b 	bl	80024c4 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 80133ce:	4603      	mov	r3, r0
	}
 80133d0:	4618      	mov	r0, r3
 80133d2:	3708      	adds	r7, #8
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}

080133d8 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80133d8:	b480      	push	{r7}
 80133da:	b083      	sub	sp, #12
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	4618      	mov	r0, r3
 80133e4:	370c      	adds	r7, #12
 80133e6:	46bd      	mov	sp, r7
 80133e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ec:	4770      	bx	lr

080133ee <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj4EJS7_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 80133ee:	b580      	push	{r7, lr}
 80133f0:	b082      	sub	sp, #8
 80133f2:	af00      	add	r7, sp, #0
 80133f4:	6078      	str	r0, [r7, #4]
 80133f6:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7ee ff52 	bl	80022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8013400:	6838      	ldr	r0, [r7, #0]
 8013402:	f7ff ffe9 	bl	80133d8 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>
 8013406:	4603      	mov	r3, r0
 8013408:	4619      	mov	r1, r3
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f000 fcb8 	bl	8013d80 <_ZSt28__variant_construct_by_indexILj4ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJS8_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f7ee ffbf 	bl	8002394 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8013416:	4603      	mov	r3, r0
	}
 8013418:	4618      	mov	r0, r3
 801341a:	3708      	adds	r7, #8
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}

08013420 <_ZNSt8__detail9__variant14_UninitializedIbLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 8013420:	b480      	push	{r7}
 8013422:	b083      	sub	sp, #12
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
 8013428:	7039      	strb	r1, [r7, #0]
	: _M_storage(std::forward<_Args>(__args)...)
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	2200      	movs	r2, #0
 801342e:	701a      	strb	r2, [r3, #0]
	{ }
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	4618      	mov	r0, r3
 8013434:	370c      	adds	r7, #12
 8013436:	46bd      	mov	sp, r7
 8013438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343c:	4770      	bx	lr

0801343e <_ZNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 801343e:	b580      	push	{r7, lr}
 8013440:	b082      	sub	sp, #8
 8013442:	af00      	add	r7, sp, #0
 8013444:	6078      	str	r0, [r7, #4]
 8013446:	7039      	strb	r1, [r7, #0]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	4611      	mov	r1, r2
 801344c:	4618      	mov	r0, r3
 801344e:	f7ff ffe7 	bl	8013420 <_ZNSt8__detail9__variant14_UninitializedIbLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	4618      	mov	r0, r3
 8013456:	3708      	adds	r7, #8
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}

0801345c <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 801345c:	b580      	push	{r7, lr}
 801345e:	b082      	sub	sp, #8
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	7039      	strb	r1, [r7, #0]
	_M_index(_Np)
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	4611      	mov	r1, r2
 801346a:	4618      	mov	r0, r3
 801346c:	f7ff ffe7 	bl	801343e <_ZNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1IJEEESt16in_place_index_tILj0EEDpOT_>
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2200      	movs	r2, #0
 8013474:	761a      	strb	r2, [r3, #24]
	{ }
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	4618      	mov	r0, r3
 801347a:	3708      	adds	r7, #8
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 8013480:	b580      	push	{r7, lr}
 8013482:	b082      	sub	sp, #8
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	f7ee fa71 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 801348e:	4603      	mov	r3, r0
 8013490:	2b00      	cmp	r3, #0
 8013492:	bf14      	ite	ne
 8013494:	2301      	movne	r3, #1
 8013496:	2300      	moveq	r3, #0
 8013498:	b2db      	uxtb	r3, r3
 801349a:	2b00      	cmp	r3, #0
 801349c:	d002      	beq.n	80134a4 <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 801349e:	4805      	ldr	r0, [pc, #20]	; (80134b4 <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 80134a0:	f7ed fda8 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f7ef fd56 	bl	8002f56 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80134aa:	4603      	mov	r3, r0
    }
 80134ac:	4618      	mov	r0, r3
 80134ae:	3708      	adds	r7, #8
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}
 80134b4:	0801d058 	.word	0x0801d058

080134b8 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj0EJbEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b082      	sub	sp, #8
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
 80134c0:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7ee feed 	bl	80022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 80134ca:	6838      	ldr	r0, [r7, #0]
 80134cc:	f7fd fd02 	bl	8010ed4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80134d0:	4603      	mov	r3, r0
 80134d2:	4619      	mov	r1, r3
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f000 fc72 	bl	8013dbe <_ZSt28__variant_construct_by_indexILj0ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJbEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 80134da:	6878      	ldr	r0, [r7, #4]
 80134dc:	f7ff ffd0 	bl	8013480 <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 80134e0:	4603      	mov	r3, r0
	}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3708      	adds	r7, #8
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}

080134ea <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80134ea:	b580      	push	{r7, lr}
 80134ec:	b082      	sub	sp, #8
 80134ee:	af00      	add	r7, sp, #0
 80134f0:	7138      	strb	r0, [r7, #4]
 80134f2:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80134f4:	6838      	ldr	r0, [r7, #0]
 80134f6:	f000 fc82 	bl	8013dfe <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80134fa:	4603      	mov	r3, r0
 80134fc:	4618      	mov	r0, r3
 80134fe:	f000 fc89 	bl	8013e14 <_ZNOSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>
 8013502:	4603      	mov	r3, r0
 8013504:	4618      	mov	r0, r3
 8013506:	3708      	adds	r7, #8
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}

0801350c <_ZNSt8__detail9__variant5__getILj1ENS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 801350c:	b590      	push	{r4, r7, lr}
 801350e:	b083      	sub	sp, #12
 8013510:	af00      	add	r7, sp, #0
 8013512:	7138      	strb	r0, [r7, #4]
 8013514:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8013516:	6838      	ldr	r0, [r7, #0]
 8013518:	f7fa faf4 	bl	800db04 <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISA_E4typeE>
 801351c:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 801351e:	4619      	mov	r1, r3
 8013520:	4620      	mov	r0, r4
 8013522:	f7ff ffe2 	bl	80134ea <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8013526:	4603      	mov	r3, r0
    }
 8013528:	4618      	mov	r0, r3
 801352a:	370c      	adds	r7, #12
 801352c:	46bd      	mov	sp, r7
 801352e:	bd90      	pop	{r4, r7, pc}

08013530 <_ZNSt8__detail9__variant5__getILj1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8013530:	b590      	push	{r4, r7, lr}
 8013532:	b083      	sub	sp, #12
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f7fa fad8 	bl	800daee <_ZSt7forwardISt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS8_E4typeE>
 801353e:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8013540:	4619      	mov	r1, r3
 8013542:	4620      	mov	r0, r4
 8013544:	f7ff ffe2 	bl	801350c <_ZNSt8__detail9__variant5__getILj1ENS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8013548:	4603      	mov	r3, r0
    }
 801354a:	4618      	mov	r0, r3
 801354c:	370c      	adds	r7, #12
 801354e:	46bd      	mov	sp, r7
 8013550:	bd90      	pop	{r4, r7, pc}
	...

08013554 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>:
    get(variant<_Types...>&& __v)
 8013554:	b580      	push	{r7, lr}
 8013556:	b082      	sub	sp, #8
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f7f4 fc75 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 8013562:	4603      	mov	r3, r0
 8013564:	2b01      	cmp	r3, #1
 8013566:	bf14      	ite	ne
 8013568:	2301      	movne	r3, #1
 801356a:	2300      	moveq	r3, #0
 801356c:	b2db      	uxtb	r3, r3
 801356e:	2b00      	cmp	r3, #0
 8013570:	d002      	beq.n	8013578 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8013572:	4807      	ldr	r0, [pc, #28]	; (8013590 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x3c>)
 8013574:	f7ed fd3e 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(std::move(__v));
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f7f8 ffcd 	bl	800c518 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 801357e:	4603      	mov	r3, r0
 8013580:	4618      	mov	r0, r3
 8013582:	f7ff ffd5 	bl	8013530 <_ZNSt8__detail9__variant5__getILj1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8013586:	4603      	mov	r3, r0
    }
 8013588:	4618      	mov	r0, r3
 801358a:	3708      	adds	r7, #8
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}
 8013590:	0801d058 	.word	0x0801d058

08013594 <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f7ee f9e7 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80135a2:	4603      	mov	r3, r0
 80135a4:	2b01      	cmp	r3, #1
 80135a6:	bf14      	ite	ne
 80135a8:	2301      	movne	r3, #1
 80135aa:	2300      	moveq	r3, #0
 80135ac:	b2db      	uxtb	r3, r3
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d002      	beq.n	80135b8 <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 80135b2:	4805      	ldr	r0, [pc, #20]	; (80135c8 <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 80135b4:	f7ed fd1e 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f7ef fd56 	bl	800306a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80135be:	4603      	mov	r3, r0
    }
 80135c0:	4618      	mov	r0, r3
 80135c2:	3708      	adds	r7, #8
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	0801d058 	.word	0x0801d058

080135cc <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj1EJiEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b082      	sub	sp, #8
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
 80135d4:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	4618      	mov	r0, r3
 80135da:	f7ee fe63 	bl	80022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 80135de:	6838      	ldr	r0, [r7, #0]
 80135e0:	f7f3 fecd 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80135e4:	4603      	mov	r3, r0
 80135e6:	4619      	mov	r1, r3
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f000 fc20 	bl	8013e2e <_ZSt28__variant_construct_by_indexILj1ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJiEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f7ff ffd0 	bl	8013594 <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 80135f4:	4603      	mov	r3, r0
	}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3708      	adds	r7, #8
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}

080135fe <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80135fe:	b580      	push	{r7, lr}
 8013600:	b082      	sub	sp, #8
 8013602:	af00      	add	r7, sp, #0
 8013604:	7138      	strb	r0, [r7, #4]
 8013606:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8013608:	6838      	ldr	r0, [r7, #0]
 801360a:	f000 fc2f 	bl	8013e6c <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801360e:	4603      	mov	r3, r0
 8013610:	4618      	mov	r0, r3
 8013612:	f000 fc36 	bl	8013e82 <_ZNOSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>
 8013616:	4603      	mov	r3, r0
 8013618:	4618      	mov	r0, r3
 801361a:	3708      	adds	r7, #8
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <_ZNSt8__detail9__variant5__getILj1ENS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8013620:	b590      	push	{r4, r7, lr}
 8013622:	b083      	sub	sp, #12
 8013624:	af00      	add	r7, sp, #0
 8013626:	7138      	strb	r0, [r7, #4]
 8013628:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 801362a:	6838      	ldr	r0, [r7, #0]
 801362c:	f000 fbe7 	bl	8013dfe <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013630:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8013632:	4619      	mov	r1, r3
 8013634:	4620      	mov	r0, r4
 8013636:	f7ff ffe2 	bl	80135fe <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>
 801363a:	4603      	mov	r3, r0
    }
 801363c:	4618      	mov	r0, r3
 801363e:	370c      	adds	r7, #12
 8013640:	46bd      	mov	sp, r7
 8013642:	bd90      	pop	{r4, r7, pc}

08013644 <_ZNSt8__detail9__variant5__getILj2ENS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8013644:	b590      	push	{r4, r7, lr}
 8013646:	b083      	sub	sp, #12
 8013648:	af00      	add	r7, sp, #0
 801364a:	7138      	strb	r0, [r7, #4]
 801364c:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 801364e:	6838      	ldr	r0, [r7, #0]
 8013650:	f7fa fa58 	bl	800db04 <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8013654:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8013656:	4619      	mov	r1, r3
 8013658:	4620      	mov	r0, r4
 801365a:	f7ff ffe1 	bl	8013620 <_ZNSt8__detail9__variant5__getILj1ENS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 801365e:	4603      	mov	r3, r0
    }
 8013660:	4618      	mov	r0, r3
 8013662:	370c      	adds	r7, #12
 8013664:	46bd      	mov	sp, r7
 8013666:	bd90      	pop	{r4, r7, pc}

08013668 <_ZNSt8__detail9__variant5__getILj2ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8013668:	b590      	push	{r4, r7, lr}
 801366a:	b083      	sub	sp, #12
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f7fa fa3c 	bl	800daee <_ZSt7forwardISt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8013676:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8013678:	4619      	mov	r1, r3
 801367a:	4620      	mov	r0, r4
 801367c:	f7ff ffe2 	bl	8013644 <_ZNSt8__detail9__variant5__getILj2ENS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8013680:	4603      	mov	r3, r0
    }
 8013682:	4618      	mov	r0, r3
 8013684:	370c      	adds	r7, #12
 8013686:	46bd      	mov	sp, r7
 8013688:	bd90      	pop	{r4, r7, pc}
	...

0801368c <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>:
    get(variant<_Types...>&& __v)
 801368c:	b580      	push	{r7, lr}
 801368e:	b082      	sub	sp, #8
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f7f4 fbd9 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 801369a:	4603      	mov	r3, r0
 801369c:	2b02      	cmp	r3, #2
 801369e:	bf14      	ite	ne
 80136a0:	2301      	movne	r3, #1
 80136a2:	2300      	moveq	r3, #0
 80136a4:	b2db      	uxtb	r3, r3
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d002      	beq.n	80136b0 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 80136aa:	4807      	ldr	r0, [pc, #28]	; (80136c8 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x3c>)
 80136ac:	f7ed fca2 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(std::move(__v));
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f7f8 ff31 	bl	800c518 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 80136b6:	4603      	mov	r3, r0
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7ff ffd5 	bl	8013668 <_ZNSt8__detail9__variant5__getILj2ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 80136be:	4603      	mov	r3, r0
    }
 80136c0:	4618      	mov	r0, r3
 80136c2:	3708      	adds	r7, #8
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	0801d058 	.word	0x0801d058

080136cc <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b082      	sub	sp, #8
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 80136d4:	6878      	ldr	r0, [r7, #4]
 80136d6:	f7ee f94b 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80136da:	4603      	mov	r3, r0
 80136dc:	2b02      	cmp	r3, #2
 80136de:	bf14      	ite	ne
 80136e0:	2301      	movne	r3, #1
 80136e2:	2300      	moveq	r3, #0
 80136e4:	b2db      	uxtb	r3, r3
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d002      	beq.n	80136f0 <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 80136ea:	4805      	ldr	r0, [pc, #20]	; (8013700 <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 80136ec:	f7ed fc82 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	f7ef fd56 	bl	80031a2 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80136f6:	4603      	mov	r3, r0
    }
 80136f8:	4618      	mov	r0, r3
 80136fa:	3708      	adds	r7, #8
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}
 8013700:	0801d058 	.word	0x0801d058

08013704 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj2EJfEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 8013704:	b580      	push	{r7, lr}
 8013706:	b082      	sub	sp, #8
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	4618      	mov	r0, r3
 8013712:	f7ee fdc7 	bl	80022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8013716:	6838      	ldr	r0, [r7, #0]
 8013718:	f7f3 fe68 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 801371c:	4603      	mov	r3, r0
 801371e:	4619      	mov	r1, r3
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f000 fbbb 	bl	8013e9c <_ZSt28__variant_construct_by_indexILj2ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJfEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f7ff ffd0 	bl	80136cc <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 801372c:	4603      	mov	r3, r0
	}
 801372e:	4618      	mov	r0, r3
 8013730:	3708      	adds	r7, #8
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}
	...

08013738 <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 8013738:	b580      	push	{r7, lr}
 801373a:	b082      	sub	sp, #8
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	f7ee f915 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8013746:	4603      	mov	r3, r0
 8013748:	2b03      	cmp	r3, #3
 801374a:	bf14      	ite	ne
 801374c:	2301      	movne	r3, #1
 801374e:	2300      	moveq	r3, #0
 8013750:	b2db      	uxtb	r3, r3
 8013752:	2b00      	cmp	r3, #0
 8013754:	d002      	beq.n	801375c <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8013756:	4805      	ldr	r0, [pc, #20]	; (801376c <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 8013758:	f7ed fc4c 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	f7ef fdce 	bl	80032fe <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8013762:	4603      	mov	r3, r0
    }
 8013764:	4618      	mov	r0, r3
 8013766:	3708      	adds	r7, #8
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	0801d058 	.word	0x0801d058

08013770 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj3EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	4618      	mov	r0, r3
 801377e:	f7ee fd91 	bl	80022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8013782:	6838      	ldr	r0, [r7, #0]
 8013784:	f7f3 fdc4 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8013788:	4603      	mov	r3, r0
 801378a:	4619      	mov	r1, r3
 801378c:	6878      	ldr	r0, [r7, #4]
 801378e:	f000 fba4 	bl	8013eda <_ZSt28__variant_construct_by_indexILj3ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJS6_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8013792:	6878      	ldr	r0, [r7, #4]
 8013794:	f7ff ffd0 	bl	8013738 <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8013798:	4603      	mov	r3, r0
	}
 801379a:	4618      	mov	r0, r3
 801379c:	3708      	adds	r7, #8
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}

080137a2 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEE7emplaceILj1EJS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>:
	emplace(_Args&&... __args)
 80137a2:	b580      	push	{r7, lr}
 80137a4:	b082      	sub	sp, #8
 80137a6:	af00      	add	r7, sp, #0
 80137a8:	6078      	str	r0, [r7, #4]
 80137aa:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	4618      	mov	r0, r3
 80137b0:	f000 fbb4 	bl	8013f1c <_ZNSt8__detail9__variant16_Variant_storageILb1EJP17Primal_expressionP10ExpressionEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 80137b4:	6838      	ldr	r0, [r7, #0]
 80137b6:	f7fa f9c1 	bl	800db3c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80137ba:	4603      	mov	r3, r0
 80137bc:	4619      	mov	r1, r3
 80137be:	6878      	ldr	r0, [r7, #4]
 80137c0:	f000 fbb9 	bl	8013f36 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJP17Primal_expressionP10ExpressionEEJS4_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f7ee fecd 	bl	8002564 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 80137ca:	4603      	mov	r3, r0
	}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3708      	adds	r7, #8
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80137d4:	b480      	push	{r7}
 80137d6:	b083      	sub	sp, #12
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	4618      	mov	r0, r3
 80137e0:	370c      	adds	r7, #12
 80137e2:	46bd      	mov	sp, r7
 80137e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e8:	4770      	bx	lr

080137ea <_ZNSt7variantIJP17Primal_expressionP10ExpressionEE7emplaceILj0EJS1_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>:
	emplace(_Args&&... __args)
 80137ea:	b580      	push	{r7, lr}
 80137ec:	b082      	sub	sp, #8
 80137ee:	af00      	add	r7, sp, #0
 80137f0:	6078      	str	r0, [r7, #4]
 80137f2:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	4618      	mov	r0, r3
 80137f8:	f000 fb90 	bl	8013f1c <_ZNSt8__detail9__variant16_Variant_storageILb1EJP17Primal_expressionP10ExpressionEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 80137fc:	6838      	ldr	r0, [r7, #0]
 80137fe:	f7ff ffe9 	bl	80137d4 <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013802:	4603      	mov	r3, r0
 8013804:	4619      	mov	r1, r3
 8013806:	6878      	ldr	r0, [r7, #4]
 8013808:	f000 fbb4 	bl	8013f74 <_ZSt28__variant_construct_by_indexILj0ESt7variantIJP17Primal_expressionP10ExpressionEEJS2_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f7ee fee7 	bl	80025e0 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 8013812:	4603      	mov	r3, r0
	}
 8013814:	4618      	mov	r0, r3
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <_ZSt4moveIR13mult_operatorEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 801381c:	b480      	push	{r7}
 801381e:	b083      	sub	sp, #12
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	4618      	mov	r0, r3
 8013828:	370c      	adds	r7, #12
 801382a:	46bd      	mov	sp, r7
 801382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013830:	4770      	bx	lr

08013832 <_ZNSt6vectorI13mult_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_>:
      vector<_Tp, _Alloc>::
 8013832:	b5b0      	push	{r4, r5, r7, lr}
 8013834:	b082      	sub	sp, #8
 8013836:	af00      	add	r7, sp, #0
 8013838:	6078      	str	r0, [r7, #4]
 801383a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	685a      	ldr	r2, [r3, #4]
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	689b      	ldr	r3, [r3, #8]
 8013844:	429a      	cmp	r2, r3
 8013846:	d011      	beq.n	801386c <_ZNSt6vectorI13mult_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8013848:	687c      	ldr	r4, [r7, #4]
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	685d      	ldr	r5, [r3, #4]
 801384e:	6838      	ldr	r0, [r7, #0]
 8013850:	f000 fbaf 	bl	8013fb2 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8013854:	4603      	mov	r3, r0
 8013856:	461a      	mov	r2, r3
 8013858:	4629      	mov	r1, r5
 801385a:	4620      	mov	r0, r4
 801385c:	f000 fbb4 	bl	8013fc8 <_ZNSt16allocator_traitsISaI13mult_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	685b      	ldr	r3, [r3, #4]
 8013864:	1c5a      	adds	r2, r3, #1
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	605a      	str	r2, [r3, #4]
 801386a:	e00c      	b.n	8013886 <_ZNSt6vectorI13mult_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 801386c:	6878      	ldr	r0, [r7, #4]
 801386e:	f000 fbbe 	bl	8013fee <_ZNSt6vectorI13mult_operatorSaIS0_EE3endEv>
 8013872:	4604      	mov	r4, r0
 8013874:	6838      	ldr	r0, [r7, #0]
 8013876:	f000 fb9c 	bl	8013fb2 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 801387a:	4603      	mov	r3, r0
 801387c:	461a      	mov	r2, r3
 801387e:	4621      	mov	r1, r4
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f000 fbc5 	bl	8014010 <_ZNSt6vectorI13mult_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
	return back();
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f000 fc3c 	bl	8014104 <_ZNSt6vectorI13mult_operatorSaIS0_EE4backEv>
 801388c:	4603      	mov	r3, r0
      }
 801388e:	4618      	mov	r0, r3
 8013890:	3708      	adds	r7, #8
 8013892:	46bd      	mov	sp, r7
 8013894:	bdb0      	pop	{r4, r5, r7, pc}

08013896 <_ZNSaIP16Power_expressionEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8013896:	b580      	push	{r7, lr}
 8013898:	b082      	sub	sp, #8
 801389a:	af00      	add	r7, sp, #0
 801389c:	6078      	str	r0, [r7, #4]
 801389e:	6878      	ldr	r0, [r7, #4]
 80138a0:	f000 fc4b 	bl	801413a <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionEC1Ev>
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	4618      	mov	r0, r3
 80138a8:	3708      	adds	r7, #8
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}

080138ae <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80138ae:	b480      	push	{r7}
 80138b0:	b083      	sub	sp, #12
 80138b2:	af00      	add	r7, sp, #0
 80138b4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	2200      	movs	r2, #0
 80138ba:	601a      	str	r2, [r3, #0]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2200      	movs	r2, #0
 80138c0:	605a      	str	r2, [r3, #4]
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2200      	movs	r2, #0
 80138c6:	609a      	str	r2, [r3, #8]
	{ }
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	4618      	mov	r0, r3
 80138cc:	370c      	adds	r7, #12
 80138ce:	46bd      	mov	sp, r7
 80138d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d4:	4770      	bx	lr

080138d6 <_ZNSaI13mult_operatorEC1Ev>:
 80138d6:	b580      	push	{r7, lr}
 80138d8:	b082      	sub	sp, #8
 80138da:	af00      	add	r7, sp, #0
 80138dc:	6078      	str	r0, [r7, #4]
 80138de:	6878      	ldr	r0, [r7, #4]
 80138e0:	f000 fc36 	bl	8014150 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorEC1Ev>
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	4618      	mov	r0, r3
 80138e8:	3708      	adds	r7, #8
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd80      	pop	{r7, pc}

080138ee <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80138ee:	b480      	push	{r7}
 80138f0:	b083      	sub	sp, #12
 80138f2:	af00      	add	r7, sp, #0
 80138f4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2200      	movs	r2, #0
 80138fa:	601a      	str	r2, [r3, #0]
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	2200      	movs	r2, #0
 8013900:	605a      	str	r2, [r3, #4]
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	2200      	movs	r2, #0
 8013906:	609a      	str	r2, [r3, #8]
	{ }
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	4618      	mov	r0, r3
 801390c:	370c      	adds	r7, #12
 801390e:	46bd      	mov	sp, r7
 8013910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013914:	4770      	bx	lr

08013916 <_ZSt4moveIRP16Power_expressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8013916:	b480      	push	{r7}
 8013918:	b083      	sub	sp, #12
 801391a:	af00      	add	r7, sp, #0
 801391c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	4618      	mov	r0, r3
 8013922:	370c      	adds	r7, #12
 8013924:	46bd      	mov	sp, r7
 8013926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392a:	4770      	bx	lr

0801392c <_ZNSt6vectorIP16Power_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 801392c:	b5b0      	push	{r4, r5, r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
 8013934:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	685a      	ldr	r2, [r3, #4]
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	689b      	ldr	r3, [r3, #8]
 801393e:	429a      	cmp	r2, r3
 8013940:	d011      	beq.n	8013966 <_ZNSt6vectorIP16Power_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8013942:	687c      	ldr	r4, [r7, #4]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	685d      	ldr	r5, [r3, #4]
 8013948:	6838      	ldr	r0, [r7, #0]
 801394a:	f000 fc0c 	bl	8014166 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 801394e:	4603      	mov	r3, r0
 8013950:	461a      	mov	r2, r3
 8013952:	4629      	mov	r1, r5
 8013954:	4620      	mov	r0, r4
 8013956:	f000 fc11 	bl	801417c <_ZNSt16allocator_traitsISaIP16Power_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	685b      	ldr	r3, [r3, #4]
 801395e:	1d1a      	adds	r2, r3, #4
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	605a      	str	r2, [r3, #4]
 8013964:	e00c      	b.n	8013980 <_ZNSt6vectorIP16Power_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8013966:	6878      	ldr	r0, [r7, #4]
 8013968:	f7ee f8d1 	bl	8001b0e <_ZNSt6vectorIP16Power_expressionSaIS1_EE3endEv>
 801396c:	4604      	mov	r4, r0
 801396e:	6838      	ldr	r0, [r7, #0]
 8013970:	f000 fbf9 	bl	8014166 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013974:	4603      	mov	r3, r0
 8013976:	461a      	mov	r2, r3
 8013978:	4621      	mov	r1, r4
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f000 fc12 	bl	80141a4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	f000 fc8b 	bl	801429c <_ZNSt6vectorIP16Power_expressionSaIS1_EE4backEv>
 8013986:	4603      	mov	r3, r0
      }
 8013988:	4618      	mov	r0, r3
 801398a:	3708      	adds	r7, #8
 801398c:	46bd      	mov	sp, r7
 801398e:	bdb0      	pop	{r4, r5, r7, pc}

08013990 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013990:	b480      	push	{r7}
 8013992:	b083      	sub	sp, #12
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	685a      	ldr	r2, [r3, #4]
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	1ad3      	subs	r3, r2, r3
 80139a2:	109b      	asrs	r3, r3, #2
 80139a4:	4618      	mov	r0, r3
 80139a6:	370c      	adds	r7, #12
 80139a8:	46bd      	mov	sp, r7
 80139aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ae:	4770      	bx	lr

080139b0 <_ZNKSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80139b0:	b480      	push	{r7}
 80139b2:	b083      	sub	sp, #12
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	4618      	mov	r0, r3
 80139bc:	370c      	adds	r7, #12
 80139be:	46bd      	mov	sp, r7
 80139c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c4:	4770      	bx	lr

080139c6 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80139c6:	b480      	push	{r7}
 80139c8:	b083      	sub	sp, #12
 80139ca:	af00      	add	r7, sp, #0
 80139cc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	685a      	ldr	r2, [r3, #4]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	1ad3      	subs	r3, r2, r3
 80139d8:	4618      	mov	r0, r3
 80139da:	370c      	adds	r7, #12
 80139dc:	46bd      	mov	sp, r7
 80139de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e2:	4770      	bx	lr

080139e4 <_ZNKSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80139e4:	b480      	push	{r7}
 80139e6:	b083      	sub	sp, #12
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	4618      	mov	r0, r3
 80139f0:	370c      	adds	r7, #12
 80139f2:	46bd      	mov	sp, r7
 80139f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f8:	4770      	bx	lr

080139fa <_ZSt4moveIR12sum_operatorEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80139fa:	b480      	push	{r7}
 80139fc:	b083      	sub	sp, #12
 80139fe:	af00      	add	r7, sp, #0
 8013a00:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	4618      	mov	r0, r3
 8013a06:	370c      	adds	r7, #12
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0e:	4770      	bx	lr

08013a10 <_ZNSt6vectorI12sum_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_>:
      vector<_Tp, _Alloc>::
 8013a10:	b5b0      	push	{r4, r5, r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
 8013a18:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	685a      	ldr	r2, [r3, #4]
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	689b      	ldr	r3, [r3, #8]
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d011      	beq.n	8013a4a <_ZNSt6vectorI12sum_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8013a26:	687c      	ldr	r4, [r7, #4]
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	685d      	ldr	r5, [r3, #4]
 8013a2c:	6838      	ldr	r0, [r7, #0]
 8013a2e:	f000 fc50 	bl	80142d2 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8013a32:	4603      	mov	r3, r0
 8013a34:	461a      	mov	r2, r3
 8013a36:	4629      	mov	r1, r5
 8013a38:	4620      	mov	r0, r4
 8013a3a:	f000 fc55 	bl	80142e8 <_ZNSt16allocator_traitsISaI12sum_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	685b      	ldr	r3, [r3, #4]
 8013a42:	1c5a      	adds	r2, r3, #1
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	605a      	str	r2, [r3, #4]
 8013a48:	e00c      	b.n	8013a64 <_ZNSt6vectorI12sum_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f000 fc5f 	bl	801430e <_ZNSt6vectorI12sum_operatorSaIS0_EE3endEv>
 8013a50:	4604      	mov	r4, r0
 8013a52:	6838      	ldr	r0, [r7, #0]
 8013a54:	f000 fc3d 	bl	80142d2 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	4621      	mov	r1, r4
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f000 fc66 	bl	8014330 <_ZNSt6vectorI12sum_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
	return back();
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f000 fcdd 	bl	8014424 <_ZNSt6vectorI12sum_operatorSaIS0_EE4backEv>
 8013a6a:	4603      	mov	r3, r0
      }
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3708      	adds	r7, #8
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bdb0      	pop	{r4, r5, r7, pc}

08013a74 <_ZNSaIP19Multiply_expressionEC1Ev>:
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b082      	sub	sp, #8
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f000 fcec 	bl	801445a <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionEC1Ev>
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	4618      	mov	r0, r3
 8013a86:	3708      	adds	r7, #8
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8013a8c:	b480      	push	{r7}
 8013a8e:	b083      	sub	sp, #12
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	2200      	movs	r2, #0
 8013a98:	601a      	str	r2, [r3, #0]
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	605a      	str	r2, [r3, #4]
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	609a      	str	r2, [r3, #8]
	{ }
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	370c      	adds	r7, #12
 8013aac:	46bd      	mov	sp, r7
 8013aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab2:	4770      	bx	lr

08013ab4 <_ZNSaI12sum_operatorEC1Ev>:
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f000 fcd7 	bl	8014470 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorEC1Ev>
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	3708      	adds	r7, #8
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}

08013acc <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8013acc:	b480      	push	{r7}
 8013ace:	b083      	sub	sp, #12
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	601a      	str	r2, [r3, #0]
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	2200      	movs	r2, #0
 8013ade:	605a      	str	r2, [r3, #4]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	609a      	str	r2, [r3, #8]
	{ }
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	370c      	adds	r7, #12
 8013aec:	46bd      	mov	sp, r7
 8013aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af2:	4770      	bx	lr

08013af4 <_ZSt4moveIRP19Multiply_expressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8013af4:	b480      	push	{r7}
 8013af6:	b083      	sub	sp, #12
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	4618      	mov	r0, r3
 8013b00:	370c      	adds	r7, #12
 8013b02:	46bd      	mov	sp, r7
 8013b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b08:	4770      	bx	lr

08013b0a <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8013b0a:	b5b0      	push	{r4, r5, r7, lr}
 8013b0c:	b082      	sub	sp, #8
 8013b0e:	af00      	add	r7, sp, #0
 8013b10:	6078      	str	r0, [r7, #4]
 8013b12:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	685a      	ldr	r2, [r3, #4]
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	689b      	ldr	r3, [r3, #8]
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d011      	beq.n	8013b44 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8013b20:	687c      	ldr	r4, [r7, #4]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	685d      	ldr	r5, [r3, #4]
 8013b26:	6838      	ldr	r0, [r7, #0]
 8013b28:	f000 fcad 	bl	8014486 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	461a      	mov	r2, r3
 8013b30:	4629      	mov	r1, r5
 8013b32:	4620      	mov	r0, r4
 8013b34:	f000 fcb2 	bl	801449c <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	685b      	ldr	r3, [r3, #4]
 8013b3c:	1d1a      	adds	r2, r3, #4
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	605a      	str	r2, [r3, #4]
 8013b42:	e00c      	b.n	8013b5e <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8013b44:	6878      	ldr	r0, [r7, #4]
 8013b46:	f7ee f86d 	bl	8001c24 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE3endEv>
 8013b4a:	4604      	mov	r4, r0
 8013b4c:	6838      	ldr	r0, [r7, #0]
 8013b4e:	f000 fc9a 	bl	8014486 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013b52:	4603      	mov	r3, r0
 8013b54:	461a      	mov	r2, r3
 8013b56:	4621      	mov	r1, r4
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f000 fcb3 	bl	80144c4 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f000 fd2c 	bl	80145bc <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE4backEv>
 8013b64:	4603      	mov	r3, r0
      }
 8013b66:	4618      	mov	r0, r3
 8013b68:	3708      	adds	r7, #8
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bdb0      	pop	{r4, r5, r7, pc}

08013b6e <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013b6e:	b480      	push	{r7}
 8013b70:	b083      	sub	sp, #12
 8013b72:	af00      	add	r7, sp, #0
 8013b74:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	685a      	ldr	r2, [r3, #4]
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	1ad3      	subs	r3, r2, r3
 8013b80:	109b      	asrs	r3, r3, #2
 8013b82:	4618      	mov	r0, r3
 8013b84:	370c      	adds	r7, #12
 8013b86:	46bd      	mov	sp, r7
 8013b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8c:	4770      	bx	lr

08013b8e <_ZNKSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013b8e:	b480      	push	{r7}
 8013b90:	b083      	sub	sp, #12
 8013b92:	af00      	add	r7, sp, #0
 8013b94:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	4618      	mov	r0, r3
 8013b9a:	370c      	adds	r7, #12
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba2:	4770      	bx	lr

08013ba4 <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013ba4:	b480      	push	{r7}
 8013ba6:	b083      	sub	sp, #12
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	685a      	ldr	r2, [r3, #4]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	1ad3      	subs	r3, r2, r3
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	370c      	adds	r7, #12
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc0:	4770      	bx	lr

08013bc2 <_ZNKSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013bc2:	b480      	push	{r7}
 8013bc4:	b083      	sub	sp, #12
 8013bc6:	af00      	add	r7, sp, #0
 8013bc8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	4618      	mov	r0, r3
 8013bce:	370c      	adds	r7, #12
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd6:	4770      	bx	lr

08013bd8 <_ZNSaIP18Compare_expressionEC1Ev>:
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f000 fd06 	bl	80145f2 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionEC1Ev>
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	4618      	mov	r0, r3
 8013bea:	3708      	adds	r7, #8
 8013bec:	46bd      	mov	sp, r7
 8013bee:	bd80      	pop	{r7, pc}

08013bf0 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8013bf0:	b480      	push	{r7}
 8013bf2:	b083      	sub	sp, #12
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	601a      	str	r2, [r3, #0]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	2200      	movs	r2, #0
 8013c02:	605a      	str	r2, [r3, #4]
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	2200      	movs	r2, #0
 8013c08:	609a      	str	r2, [r3, #8]
	{ }
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	370c      	adds	r7, #12
 8013c10:	46bd      	mov	sp, r7
 8013c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c16:	4770      	bx	lr

08013c18 <_ZSt4moveIRP18Compare_expressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8013c18:	b480      	push	{r7}
 8013c1a:	b083      	sub	sp, #12
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	4618      	mov	r0, r3
 8013c24:	370c      	adds	r7, #12
 8013c26:	46bd      	mov	sp, r7
 8013c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2c:	4770      	bx	lr

08013c2e <_ZNSt6vectorIP18Compare_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8013c2e:	b5b0      	push	{r4, r5, r7, lr}
 8013c30:	b082      	sub	sp, #8
 8013c32:	af00      	add	r7, sp, #0
 8013c34:	6078      	str	r0, [r7, #4]
 8013c36:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	685a      	ldr	r2, [r3, #4]
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	689b      	ldr	r3, [r3, #8]
 8013c40:	429a      	cmp	r2, r3
 8013c42:	d011      	beq.n	8013c68 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8013c44:	687c      	ldr	r4, [r7, #4]
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	685d      	ldr	r5, [r3, #4]
 8013c4a:	6838      	ldr	r0, [r7, #0]
 8013c4c:	f000 fcdc 	bl	8014608 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013c50:	4603      	mov	r3, r0
 8013c52:	461a      	mov	r2, r3
 8013c54:	4629      	mov	r1, r5
 8013c56:	4620      	mov	r0, r4
 8013c58:	f000 fce1 	bl	801461e <_ZNSt16allocator_traitsISaIP18Compare_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	685b      	ldr	r3, [r3, #4]
 8013c60:	1d1a      	adds	r2, r3, #4
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	605a      	str	r2, [r3, #4]
 8013c66:	e00c      	b.n	8013c82 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8013c68:	6878      	ldr	r0, [r7, #4]
 8013c6a:	f7ee f84b 	bl	8001d04 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE3endEv>
 8013c6e:	4604      	mov	r4, r0
 8013c70:	6838      	ldr	r0, [r7, #0]
 8013c72:	f000 fcc9 	bl	8014608 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013c76:	4603      	mov	r3, r0
 8013c78:	461a      	mov	r2, r3
 8013c7a:	4621      	mov	r1, r4
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f000 fce1 	bl	8014644 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f000 fd5a 	bl	801473c <_ZNSt6vectorIP18Compare_expressionSaIS1_EE4backEv>
 8013c88:	4603      	mov	r3, r0
      }
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3708      	adds	r7, #8
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bdb0      	pop	{r4, r5, r7, pc}

08013c92 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013c92:	b480      	push	{r7}
 8013c94:	b083      	sub	sp, #12
 8013c96:	af00      	add	r7, sp, #0
 8013c98:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	685a      	ldr	r2, [r3, #4]
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	1ad3      	subs	r3, r2, r3
 8013ca4:	109b      	asrs	r3, r3, #2
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	370c      	adds	r7, #12
 8013caa:	46bd      	mov	sp, r7
 8013cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb0:	4770      	bx	lr

08013cb2 <_ZNKSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013cb2:	b480      	push	{r7}
 8013cb4:	b083      	sub	sp, #12
 8013cb6:	af00      	add	r7, sp, #0
 8013cb8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	370c      	adds	r7, #12
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr

08013cc8 <_ZSt4moveIRP14And_expressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8013cc8:	b480      	push	{r7}
 8013cca:	b083      	sub	sp, #12
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	370c      	adds	r7, #12
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cdc:	4770      	bx	lr

08013cde <_ZNSt6vectorIP14And_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8013cde:	b5b0      	push	{r4, r5, r7, lr}
 8013ce0:	b082      	sub	sp, #8
 8013ce2:	af00      	add	r7, sp, #0
 8013ce4:	6078      	str	r0, [r7, #4]
 8013ce6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	685a      	ldr	r2, [r3, #4]
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	689b      	ldr	r3, [r3, #8]
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d011      	beq.n	8013d18 <_ZNSt6vectorIP14And_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8013cf4:	687c      	ldr	r4, [r7, #4]
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	685d      	ldr	r5, [r3, #4]
 8013cfa:	6838      	ldr	r0, [r7, #0]
 8013cfc:	f000 fd39 	bl	8014772 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013d00:	4603      	mov	r3, r0
 8013d02:	461a      	mov	r2, r3
 8013d04:	4629      	mov	r1, r5
 8013d06:	4620      	mov	r0, r4
 8013d08:	f000 fd3e 	bl	8014788 <_ZNSt16allocator_traitsISaIP14And_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	685b      	ldr	r3, [r3, #4]
 8013d10:	1d1a      	adds	r2, r3, #4
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	605a      	str	r2, [r3, #4]
 8013d16:	e00c      	b.n	8013d32 <_ZNSt6vectorIP14And_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f7ee f863 	bl	8001de4 <_ZNSt6vectorIP14And_expressionSaIS1_EE3endEv>
 8013d1e:	4604      	mov	r4, r0
 8013d20:	6838      	ldr	r0, [r7, #0]
 8013d22:	f000 fd26 	bl	8014772 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013d26:	4603      	mov	r3, r0
 8013d28:	461a      	mov	r2, r3
 8013d2a:	4621      	mov	r1, r4
 8013d2c:	6878      	ldr	r0, [r7, #4]
 8013d2e:	f000 fd3f 	bl	80147b0 <_ZNSt6vectorIP14And_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f000 fdb8 	bl	80148a8 <_ZNSt6vectorIP14And_expressionSaIS1_EE4backEv>
 8013d38:	4603      	mov	r3, r0
      }
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3708      	adds	r7, #8
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bdb0      	pop	{r4, r5, r7, pc}

08013d42 <_ZSt28__variant_construct_by_indexILj5ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJSA_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8013d42:	b590      	push	{r4, r7, lr}
 8013d44:	b085      	sub	sp, #20
 8013d46:	af00      	add	r7, sp, #0
 8013d48:	6078      	str	r0, [r7, #4]
 8013d4a:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2205      	movs	r2, #5
 8013d50:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8013d52:	6878      	ldr	r0, [r7, #4]
 8013d54:	f7ee fba5 	bl	80024a2 <_ZNSt8__detail9__variant5__getILj5ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8013d58:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8013d5a:	6838      	ldr	r0, [r7, #0]
 8013d5c:	f7ff fb18 	bl	8013390 <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 8013d60:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8013d62:	681c      	ldr	r4, [r3, #0]
 8013d64:	68f8      	ldr	r0, [r7, #12]
 8013d66:	f000 fdba 	bl	80148de <_ZSt9addressofIP13Function_callEPT_RS2_>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	4619      	mov	r1, r3
 8013d6e:	2004      	movs	r0, #4
 8013d70:	f7ed f934 	bl	8000fdc <_ZnwjPv>
 8013d74:	4603      	mov	r3, r0
 8013d76:	601c      	str	r4, [r3, #0]
    }
 8013d78:	bf00      	nop
 8013d7a:	3714      	adds	r7, #20
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd90      	pop	{r4, r7, pc}

08013d80 <_ZSt28__variant_construct_by_indexILj4ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJS8_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8013d80:	b590      	push	{r4, r7, lr}
 8013d82:	b085      	sub	sp, #20
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2204      	movs	r2, #4
 8013d8e:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f7ee faee 	bl	8002372 <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8013d96:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8013d98:	6838      	ldr	r0, [r7, #0]
 8013d9a:	f7ff fb1d 	bl	80133d8 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>
 8013d9e:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8013da0:	681c      	ldr	r4, [r3, #0]
 8013da2:	68f8      	ldr	r0, [r7, #12]
 8013da4:	f000 fda7 	bl	80148f6 <_ZSt9addressofIP8VariableEPT_RS2_>
 8013da8:	4603      	mov	r3, r0
 8013daa:	4619      	mov	r1, r3
 8013dac:	2004      	movs	r0, #4
 8013dae:	f7ed f915 	bl	8000fdc <_ZnwjPv>
 8013db2:	4603      	mov	r3, r0
 8013db4:	601c      	str	r4, [r3, #0]
    }
 8013db6:	bf00      	nop
 8013db8:	3714      	adds	r7, #20
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd90      	pop	{r4, r7, pc}

08013dbe <_ZSt28__variant_construct_by_indexILj0ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJbEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8013dbe:	b590      	push	{r4, r7, lr}
 8013dc0:	b085      	sub	sp, #20
 8013dc2:	af00      	add	r7, sp, #0
 8013dc4:	6078      	str	r0, [r7, #4]
 8013dc6:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f7ef f8c1 	bl	8002f56 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8013dd4:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8013dd6:	6838      	ldr	r0, [r7, #0]
 8013dd8:	f7fd f87c 	bl	8010ed4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8013ddc:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8013dde:	781c      	ldrb	r4, [r3, #0]
 8013de0:	68f8      	ldr	r0, [r7, #12]
 8013de2:	f7fd f8e3 	bl	8010fac <_ZSt9addressofIbEPT_RS0_>
 8013de6:	4603      	mov	r3, r0
 8013de8:	4619      	mov	r1, r3
 8013dea:	2001      	movs	r0, #1
 8013dec:	f7ed f8f6 	bl	8000fdc <_ZnwjPv>
 8013df0:	4603      	mov	r3, r0
 8013df2:	4622      	mov	r2, r4
 8013df4:	701a      	strb	r2, [r3, #0]
    }
 8013df6:	bf00      	nop
 8013df8:	3714      	adds	r7, #20
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd90      	pop	{r4, r7, pc}

08013dfe <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013dfe:	b480      	push	{r7}
 8013e00:	b083      	sub	sp, #12
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	4618      	mov	r0, r3
 8013e0a:	370c      	adds	r7, #12
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e12:	4770      	bx	lr

08013e14 <_ZNOSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>:
      constexpr _Type&& _M_get() && noexcept
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b082      	sub	sp, #8
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
      { return std::move(_M_storage); }
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7fc ff36 	bl	8010c90 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8013e24:	4603      	mov	r3, r0
 8013e26:	4618      	mov	r0, r3
 8013e28:	3708      	adds	r7, #8
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}

08013e2e <_ZSt28__variant_construct_by_indexILj1ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJiEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8013e2e:	b590      	push	{r4, r7, lr}
 8013e30:	b085      	sub	sp, #20
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	6078      	str	r0, [r7, #4]
 8013e36:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2201      	movs	r2, #1
 8013e3c:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8013e3e:	6878      	ldr	r0, [r7, #4]
 8013e40:	f7ef f913 	bl	800306a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8013e44:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8013e46:	6838      	ldr	r0, [r7, #0]
 8013e48:	f7f3 fa99 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8013e4c:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8013e4e:	681c      	ldr	r4, [r3, #0]
 8013e50:	68f8      	ldr	r0, [r7, #12]
 8013e52:	f7fd f893 	bl	8010f7c <_ZSt9addressofIiEPT_RS0_>
 8013e56:	4603      	mov	r3, r0
 8013e58:	4619      	mov	r1, r3
 8013e5a:	2004      	movs	r0, #4
 8013e5c:	f7ed f8be 	bl	8000fdc <_ZnwjPv>
 8013e60:	4603      	mov	r3, r0
 8013e62:	601c      	str	r4, [r3, #0]
    }
 8013e64:	bf00      	nop
 8013e66:	3714      	adds	r7, #20
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd90      	pop	{r4, r7, pc}

08013e6c <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013e6c:	b480      	push	{r7}
 8013e6e:	b083      	sub	sp, #12
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	4618      	mov	r0, r3
 8013e78:	370c      	adds	r7, #12
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e80:	4770      	bx	lr

08013e82 <_ZNOSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>:
      constexpr _Type&& _M_get() && noexcept
 8013e82:	b580      	push	{r7, lr}
 8013e84:	b082      	sub	sp, #8
 8013e86:	af00      	add	r7, sp, #0
 8013e88:	6078      	str	r0, [r7, #4]
      { return std::move(_M_storage); }
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7fc ff23 	bl	8010cd8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8013e92:	4603      	mov	r3, r0
 8013e94:	4618      	mov	r0, r3
 8013e96:	3708      	adds	r7, #8
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}

08013e9c <_ZSt28__variant_construct_by_indexILj2ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJfEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8013e9c:	b590      	push	{r4, r7, lr}
 8013e9e:	b085      	sub	sp, #20
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
 8013ea4:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2202      	movs	r2, #2
 8013eaa:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f7ef f978 	bl	80031a2 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8013eb2:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8013eb4:	6838      	ldr	r0, [r7, #0]
 8013eb6:	f7f3 fa99 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8013eba:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8013ebc:	681c      	ldr	r4, [r3, #0]
 8013ebe:	68f8      	ldr	r0, [r7, #12]
 8013ec0:	f7fd f868 	bl	8010f94 <_ZSt9addressofIfEPT_RS0_>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	4619      	mov	r1, r3
 8013ec8:	2004      	movs	r0, #4
 8013eca:	f7ed f887 	bl	8000fdc <_ZnwjPv>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	601c      	str	r4, [r3, #0]
    }
 8013ed2:	bf00      	nop
 8013ed4:	3714      	adds	r7, #20
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	bd90      	pop	{r4, r7, pc}

08013eda <_ZSt28__variant_construct_by_indexILj3ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJS6_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8013eda:	b590      	push	{r4, r7, lr}
 8013edc:	b085      	sub	sp, #20
 8013ede:	af00      	add	r7, sp, #0
 8013ee0:	6078      	str	r0, [r7, #4]
 8013ee2:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	2203      	movs	r2, #3
 8013ee8:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	f7ef fa07 	bl	80032fe <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8013ef0:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8013ef2:	6838      	ldr	r0, [r7, #0]
 8013ef4:	f7f3 fa0c 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8013ef8:	4604      	mov	r4, r0
      ::new ((void*)std::addressof(__storage))
 8013efa:	68f8      	ldr	r0, [r7, #12]
 8013efc:	f7fd f832 	bl	8010f64 <_ZSt9addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8013f00:	4603      	mov	r3, r0
 8013f02:	4619      	mov	r1, r3
 8013f04:	2018      	movs	r0, #24
 8013f06:	f7ed f869 	bl	8000fdc <_ZnwjPv>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	4621      	mov	r1, r4
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f005 fcd1 	bl	80198b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8013f14:	bf00      	nop
 8013f16:	3714      	adds	r7, #20
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd90      	pop	{r4, r7, pc}

08013f1c <_ZNSt8__detail9__variant16_Variant_storageILb1EJP17Primal_expressionP10ExpressionEE8_M_resetEv>:
      void _M_reset()
 8013f1c:	b480      	push	{r7}
 8013f1e:	b083      	sub	sp, #12
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
      { _M_index = variant_npos; }
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	22ff      	movs	r2, #255	; 0xff
 8013f28:	711a      	strb	r2, [r3, #4]
 8013f2a:	bf00      	nop
 8013f2c:	370c      	adds	r7, #12
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f34:	4770      	bx	lr

08013f36 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJP17Primal_expressionP10ExpressionEEJS4_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8013f36:	b590      	push	{r4, r7, lr}
 8013f38:	b085      	sub	sp, #20
 8013f3a:	af00      	add	r7, sp, #0
 8013f3c:	6078      	str	r0, [r7, #4]
 8013f3e:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	2201      	movs	r2, #1
 8013f44:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8013f46:	6878      	ldr	r0, [r7, #4]
 8013f48:	f7ee fafb 	bl	8002542 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>
 8013f4c:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8013f4e:	6838      	ldr	r0, [r7, #0]
 8013f50:	f7f9 fdf4 	bl	800db3c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013f54:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8013f56:	681c      	ldr	r4, [r3, #0]
 8013f58:	68f8      	ldr	r0, [r7, #12]
 8013f5a:	f000 fcd8 	bl	801490e <_ZSt9addressofIP10ExpressionEPT_RS2_>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	4619      	mov	r1, r3
 8013f62:	2004      	movs	r0, #4
 8013f64:	f7ed f83a 	bl	8000fdc <_ZnwjPv>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	601c      	str	r4, [r3, #0]
    }
 8013f6c:	bf00      	nop
 8013f6e:	3714      	adds	r7, #20
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd90      	pop	{r4, r7, pc}

08013f74 <_ZSt28__variant_construct_by_indexILj0ESt7variantIJP17Primal_expressionP10ExpressionEEJS2_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8013f74:	b590      	push	{r4, r7, lr}
 8013f76:	b085      	sub	sp, #20
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
 8013f7c:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	2200      	movs	r2, #0
 8013f82:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f7ee fb1a 	bl	80025be <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>
 8013f8a:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8013f8c:	6838      	ldr	r0, [r7, #0]
 8013f8e:	f7ff fc21 	bl	80137d4 <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013f92:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8013f94:	681c      	ldr	r4, [r3, #0]
 8013f96:	68f8      	ldr	r0, [r7, #12]
 8013f98:	f000 fcc5 	bl	8014926 <_ZSt9addressofIP17Primal_expressionEPT_RS2_>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	4619      	mov	r1, r3
 8013fa0:	2004      	movs	r0, #4
 8013fa2:	f7ed f81b 	bl	8000fdc <_ZnwjPv>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	601c      	str	r4, [r3, #0]
    }
 8013faa:	bf00      	nop
 8013fac:	3714      	adds	r7, #20
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd90      	pop	{r4, r7, pc}

08013fb2 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013fb2:	b480      	push	{r7}
 8013fb4:	b083      	sub	sp, #12
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	370c      	adds	r7, #12
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc6:	4770      	bx	lr

08013fc8 <_ZNSt16allocator_traitsISaI13mult_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b084      	sub	sp, #16
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	60f8      	str	r0, [r7, #12]
 8013fd0:	60b9      	str	r1, [r7, #8]
 8013fd2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f7ff ffec 	bl	8013fb2 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	461a      	mov	r2, r3
 8013fde:	68b9      	ldr	r1, [r7, #8]
 8013fe0:	68f8      	ldr	r0, [r7, #12]
 8013fe2:	f000 fcac 	bl	801493e <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE9constructIS1_JS1_EEEvPT_DpOT0_>
 8013fe6:	bf00      	nop
 8013fe8:	3710      	adds	r7, #16
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}

08013fee <_ZNSt6vectorI13mult_operatorSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8013fee:	b580      	push	{r7, lr}
 8013ff0:	b084      	sub	sp, #16
 8013ff2:	af00      	add	r7, sp, #0
 8013ff4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	1d1a      	adds	r2, r3, #4
 8013ffa:	f107 030c 	add.w	r3, r7, #12
 8013ffe:	4611      	mov	r1, r2
 8014000:	4618      	mov	r0, r3
 8014002:	f000 fcb3 	bl	801496c <_ZN9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	4618      	mov	r0, r3
 801400a:	3710      	adds	r7, #16
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}

08014010 <_ZNSt6vectorI13mult_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8014010:	b5b0      	push	{r4, r5, r7, lr}
 8014012:	b08c      	sub	sp, #48	; 0x30
 8014014:	af00      	add	r7, sp, #0
 8014016:	60f8      	str	r0, [r7, #12]
 8014018:	60b9      	str	r1, [r7, #8]
 801401a:	607a      	str	r2, [r7, #4]
      const size_type __len =
 801401c:	4a38      	ldr	r2, [pc, #224]	; (8014100 <_ZNSt6vectorI13mult_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf0>)
 801401e:	2101      	movs	r1, #1
 8014020:	68f8      	ldr	r0, [r7, #12]
 8014022:	f000 fcb3 	bl	801498c <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc>
 8014026:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	685b      	ldr	r3, [r3, #4]
 8014032:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8014034:	68f8      	ldr	r0, [r7, #12]
 8014036:	f000 fcf0 	bl	8014a1a <_ZNSt6vectorI13mult_operatorSaIS0_EE5beginEv>
 801403a:	4603      	mov	r3, r0
 801403c:	617b      	str	r3, [r7, #20]
 801403e:	f107 0214 	add.w	r2, r7, #20
 8014042:	f107 0308 	add.w	r3, r7, #8
 8014046:	4611      	mov	r1, r2
 8014048:	4618      	mov	r0, r3
 801404a:	f000 fcf6 	bl	8014a3a <_ZN9__gnu_cxxmiIP13mult_operatorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 801404e:	4603      	mov	r3, r0
 8014050:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014056:	4618      	mov	r0, r3
 8014058:	f000 fd03 	bl	8014a62 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE11_M_allocateEj>
 801405c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801405e:	69fb      	ldr	r3, [r7, #28]
 8014060:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8014062:	68fc      	ldr	r4, [r7, #12]
 8014064:	69fa      	ldr	r2, [r7, #28]
 8014066:	6a3b      	ldr	r3, [r7, #32]
 8014068:	18d5      	adds	r5, r2, r3
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	f7ff ffa1 	bl	8013fb2 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8014070:	4603      	mov	r3, r0
 8014072:	461a      	mov	r2, r3
 8014074:	4629      	mov	r1, r5
 8014076:	4620      	mov	r0, r4
 8014078:	f7ff ffa6 	bl	8013fc8 <_ZNSt16allocator_traitsISaI13mult_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 801407c:	2300      	movs	r3, #0
 801407e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8014080:	f107 0308 	add.w	r3, r7, #8
 8014084:	4618      	mov	r0, r3
 8014086:	f000 fd14 	bl	8014ab2 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 801408a:	4603      	mov	r3, r0
 801408c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	4618      	mov	r0, r3
 8014092:	f7ee fb23 	bl	80026dc <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 8014096:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8014098:	69fa      	ldr	r2, [r7, #28]
 801409a:	4621      	mov	r1, r4
 801409c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801409e:	f000 fcf4 	bl	8014a8a <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80140a2:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80140a4:	69bb      	ldr	r3, [r7, #24]
 80140a6:	3301      	adds	r3, #1
 80140a8:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80140aa:	f107 0308 	add.w	r3, r7, #8
 80140ae:	4618      	mov	r0, r3
 80140b0:	f000 fcff 	bl	8014ab2 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 80140b4:	4603      	mov	r3, r0
 80140b6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7ee fb0e 	bl	80026dc <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80140c0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80140c2:	69ba      	ldr	r2, [r7, #24]
 80140c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80140c6:	4620      	mov	r0, r4
 80140c8:	f000 fcdf 	bl	8014a8a <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80140cc:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80140ce:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	689a      	ldr	r2, [r3, #8]
 80140d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140d6:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 80140d8:	461a      	mov	r2, r3
 80140da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80140dc:	f7ef fb3e 	bl	800375c <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	69fa      	ldr	r2, [r7, #28]
 80140e4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	69ba      	ldr	r2, [r7, #24]
 80140ea:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80140ec:	69fa      	ldr	r2, [r7, #28]
 80140ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140f0:	441a      	add	r2, r3
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	609a      	str	r2, [r3, #8]
    }
 80140f6:	bf00      	nop
 80140f8:	3730      	adds	r7, #48	; 0x30
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bdb0      	pop	{r4, r5, r7, pc}
 80140fe:	bf00      	nop
 8014100:	0801d06c 	.word	0x0801d06c

08014104 <_ZNSt6vectorI13mult_operatorSaIS0_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8014104:	b580      	push	{r7, lr}
 8014106:	b084      	sub	sp, #16
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f7ff ff6e 	bl	8013fee <_ZNSt6vectorI13mult_operatorSaIS0_EE3endEv>
 8014112:	4603      	mov	r3, r0
 8014114:	60fb      	str	r3, [r7, #12]
 8014116:	f107 030c 	add.w	r3, r7, #12
 801411a:	2101      	movs	r1, #1
 801411c:	4618      	mov	r0, r3
 801411e:	f000 fcd3 	bl	8014ac8 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEmiEi>
 8014122:	4603      	mov	r3, r0
 8014124:	60bb      	str	r3, [r7, #8]
 8014126:	f107 0308 	add.w	r3, r7, #8
 801412a:	4618      	mov	r0, r3
 801412c:	f000 fce4 	bl	8014af8 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEdeEv>
 8014130:	4603      	mov	r3, r0
      }
 8014132:	4618      	mov	r0, r3
 8014134:	3710      	adds	r7, #16
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}

0801413a <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801413a:	b480      	push	{r7}
 801413c:	b083      	sub	sp, #12
 801413e:	af00      	add	r7, sp, #0
 8014140:	6078      	str	r0, [r7, #4]
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	4618      	mov	r0, r3
 8014146:	370c      	adds	r7, #12
 8014148:	46bd      	mov	sp, r7
 801414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414e:	4770      	bx	lr

08014150 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorEC1Ev>:
 8014150:	b480      	push	{r7}
 8014152:	b083      	sub	sp, #12
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	4618      	mov	r0, r3
 801415c:	370c      	adds	r7, #12
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr

08014166 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014166:	b480      	push	{r7}
 8014168:	b083      	sub	sp, #12
 801416a:	af00      	add	r7, sp, #0
 801416c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	4618      	mov	r0, r3
 8014172:	370c      	adds	r7, #12
 8014174:	46bd      	mov	sp, r7
 8014176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417a:	4770      	bx	lr

0801417c <_ZNSt16allocator_traitsISaIP16Power_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 801417c:	b580      	push	{r7, lr}
 801417e:	b084      	sub	sp, #16
 8014180:	af00      	add	r7, sp, #0
 8014182:	60f8      	str	r0, [r7, #12]
 8014184:	60b9      	str	r1, [r7, #8]
 8014186:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f7ff ffec 	bl	8014166 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 801418e:	4603      	mov	r3, r0
 8014190:	461a      	mov	r2, r3
 8014192:	68b9      	ldr	r1, [r7, #8]
 8014194:	68f8      	ldr	r0, [r7, #12]
 8014196:	f000 fcbb 	bl	8014b10 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 801419a:	bf00      	nop
 801419c:	3710      	adds	r7, #16
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}
	...

080141a4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80141a4:	b5b0      	push	{r4, r5, r7, lr}
 80141a6:	b08c      	sub	sp, #48	; 0x30
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	60f8      	str	r0, [r7, #12]
 80141ac:	60b9      	str	r1, [r7, #8]
 80141ae:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80141b0:	4a39      	ldr	r2, [pc, #228]	; (8014298 <_ZNSt6vectorIP16Power_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80141b2:	2101      	movs	r1, #1
 80141b4:	68f8      	ldr	r0, [r7, #12]
 80141b6:	f000 fcc1 	bl	8014b3c <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc>
 80141ba:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	685b      	ldr	r3, [r3, #4]
 80141c6:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80141c8:	68f8      	ldr	r0, [r7, #12]
 80141ca:	f7ed fc90 	bl	8001aee <_ZNSt6vectorIP16Power_expressionSaIS1_EE5beginEv>
 80141ce:	4603      	mov	r3, r0
 80141d0:	617b      	str	r3, [r7, #20]
 80141d2:	f107 0214 	add.w	r2, r7, #20
 80141d6:	f107 0308 	add.w	r3, r7, #8
 80141da:	4611      	mov	r1, r2
 80141dc:	4618      	mov	r0, r3
 80141de:	f000 fcf4 	bl	8014bca <_ZN9__gnu_cxxmiIPP16Power_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80141e2:	4603      	mov	r3, r0
 80141e4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80141ea:	4618      	mov	r0, r3
 80141ec:	f000 fd02 	bl	8014bf4 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE11_M_allocateEj>
 80141f0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80141f2:	69fb      	ldr	r3, [r7, #28]
 80141f4:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80141f6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80141f8:	6a3b      	ldr	r3, [r7, #32]
 80141fa:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80141fc:	69fa      	ldr	r2, [r7, #28]
 80141fe:	18d5      	adds	r5, r2, r3
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f7ff ffb0 	bl	8014166 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8014206:	4603      	mov	r3, r0
 8014208:	461a      	mov	r2, r3
 801420a:	4629      	mov	r1, r5
 801420c:	4620      	mov	r0, r4
 801420e:	f7ff ffb5 	bl	801417c <_ZNSt16allocator_traitsISaIP16Power_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8014212:	2300      	movs	r3, #0
 8014214:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8014216:	f107 0308 	add.w	r3, r7, #8
 801421a:	4618      	mov	r0, r3
 801421c:	f7ee fa87 	bl	800272e <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8014220:	4603      	mov	r3, r0
 8014222:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	4618      	mov	r0, r3
 8014228:	f7ee fa1b 	bl	8002662 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 801422c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801422e:	69fa      	ldr	r2, [r7, #28]
 8014230:	4621      	mov	r1, r4
 8014232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014234:	f000 fcf2 	bl	8014c1c <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8014238:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801423a:	69bb      	ldr	r3, [r7, #24]
 801423c:	3304      	adds	r3, #4
 801423e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8014240:	f107 0308 	add.w	r3, r7, #8
 8014244:	4618      	mov	r0, r3
 8014246:	f7ee fa72 	bl	800272e <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 801424a:	4603      	mov	r3, r0
 801424c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	4618      	mov	r0, r3
 8014252:	f7ee fa06 	bl	8002662 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8014256:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8014258:	69ba      	ldr	r2, [r7, #24]
 801425a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801425c:	4620      	mov	r0, r4
 801425e:	f000 fcdd 	bl	8014c1c <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8014262:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8014264:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	689a      	ldr	r2, [r3, #8]
 801426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801426c:	1ad3      	subs	r3, r2, r3
 801426e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8014270:	461a      	mov	r2, r3
 8014272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014274:	f7ef fa46 	bl	8003704 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	69fa      	ldr	r2, [r7, #28]
 801427c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	69ba      	ldr	r2, [r7, #24]
 8014282:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8014284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014286:	009b      	lsls	r3, r3, #2
 8014288:	69fa      	ldr	r2, [r7, #28]
 801428a:	441a      	add	r2, r3
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	609a      	str	r2, [r3, #8]
    }
 8014290:	bf00      	nop
 8014292:	3730      	adds	r7, #48	; 0x30
 8014294:	46bd      	mov	sp, r7
 8014296:	bdb0      	pop	{r4, r5, r7, pc}
 8014298:	0801d06c 	.word	0x0801d06c

0801429c <_ZNSt6vectorIP16Power_expressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 801429c:	b580      	push	{r7, lr}
 801429e:	b084      	sub	sp, #16
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80142a4:	6878      	ldr	r0, [r7, #4]
 80142a6:	f7ed fc32 	bl	8001b0e <_ZNSt6vectorIP16Power_expressionSaIS1_EE3endEv>
 80142aa:	4603      	mov	r3, r0
 80142ac:	60fb      	str	r3, [r7, #12]
 80142ae:	f107 030c 	add.w	r3, r7, #12
 80142b2:	2101      	movs	r1, #1
 80142b4:	4618      	mov	r0, r3
 80142b6:	f000 fcc5 	bl	8014c44 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEmiEi>
 80142ba:	4603      	mov	r3, r0
 80142bc:	60bb      	str	r3, [r7, #8]
 80142be:	f107 0308 	add.w	r3, r7, #8
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7ed fc5c 	bl	8001b80 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 80142c8:	4603      	mov	r3, r0
      }
 80142ca:	4618      	mov	r0, r3
 80142cc:	3710      	adds	r7, #16
 80142ce:	46bd      	mov	sp, r7
 80142d0:	bd80      	pop	{r7, pc}

080142d2 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80142d2:	b480      	push	{r7}
 80142d4:	b083      	sub	sp, #12
 80142d6:	af00      	add	r7, sp, #0
 80142d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	4618      	mov	r0, r3
 80142de:	370c      	adds	r7, #12
 80142e0:	46bd      	mov	sp, r7
 80142e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e6:	4770      	bx	lr

080142e8 <_ZNSt16allocator_traitsISaI12sum_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b084      	sub	sp, #16
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	60f8      	str	r0, [r7, #12]
 80142f0:	60b9      	str	r1, [r7, #8]
 80142f2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f7ff ffec 	bl	80142d2 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 80142fa:	4603      	mov	r3, r0
 80142fc:	461a      	mov	r2, r3
 80142fe:	68b9      	ldr	r1, [r7, #8]
 8014300:	68f8      	ldr	r0, [r7, #12]
 8014302:	f000 fcb8 	bl	8014c76 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE9constructIS1_JS1_EEEvPT_DpOT0_>
 8014306:	bf00      	nop
 8014308:	3710      	adds	r7, #16
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}

0801430e <_ZNSt6vectorI12sum_operatorSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801430e:	b580      	push	{r7, lr}
 8014310:	b084      	sub	sp, #16
 8014312:	af00      	add	r7, sp, #0
 8014314:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	1d1a      	adds	r2, r3, #4
 801431a:	f107 030c 	add.w	r3, r7, #12
 801431e:	4611      	mov	r1, r2
 8014320:	4618      	mov	r0, r3
 8014322:	f000 fcbf 	bl	8014ca4 <_ZN9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	4618      	mov	r0, r3
 801432a:	3710      	adds	r7, #16
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}

08014330 <_ZNSt6vectorI12sum_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8014330:	b5b0      	push	{r4, r5, r7, lr}
 8014332:	b08c      	sub	sp, #48	; 0x30
 8014334:	af00      	add	r7, sp, #0
 8014336:	60f8      	str	r0, [r7, #12]
 8014338:	60b9      	str	r1, [r7, #8]
 801433a:	607a      	str	r2, [r7, #4]
      const size_type __len =
 801433c:	4a38      	ldr	r2, [pc, #224]	; (8014420 <_ZNSt6vectorI12sum_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf0>)
 801433e:	2101      	movs	r1, #1
 8014340:	68f8      	ldr	r0, [r7, #12]
 8014342:	f000 fcbf 	bl	8014cc4 <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc>
 8014346:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	685b      	ldr	r3, [r3, #4]
 8014352:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8014354:	68f8      	ldr	r0, [r7, #12]
 8014356:	f000 fcfc 	bl	8014d52 <_ZNSt6vectorI12sum_operatorSaIS0_EE5beginEv>
 801435a:	4603      	mov	r3, r0
 801435c:	617b      	str	r3, [r7, #20]
 801435e:	f107 0214 	add.w	r2, r7, #20
 8014362:	f107 0308 	add.w	r3, r7, #8
 8014366:	4611      	mov	r1, r2
 8014368:	4618      	mov	r0, r3
 801436a:	f000 fd02 	bl	8014d72 <_ZN9__gnu_cxxmiIP12sum_operatorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 801436e:	4603      	mov	r3, r0
 8014370:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014376:	4618      	mov	r0, r3
 8014378:	f000 fd0f 	bl	8014d9a <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE11_M_allocateEj>
 801437c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801437e:	69fb      	ldr	r3, [r7, #28]
 8014380:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8014382:	68fc      	ldr	r4, [r7, #12]
 8014384:	69fa      	ldr	r2, [r7, #28]
 8014386:	6a3b      	ldr	r3, [r7, #32]
 8014388:	18d5      	adds	r5, r2, r3
 801438a:	6878      	ldr	r0, [r7, #4]
 801438c:	f7ff ffa1 	bl	80142d2 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8014390:	4603      	mov	r3, r0
 8014392:	461a      	mov	r2, r3
 8014394:	4629      	mov	r1, r5
 8014396:	4620      	mov	r0, r4
 8014398:	f7ff ffa6 	bl	80142e8 <_ZNSt16allocator_traitsISaI12sum_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 801439c:	2300      	movs	r3, #0
 801439e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80143a0:	f107 0308 	add.w	r3, r7, #8
 80143a4:	4618      	mov	r0, r3
 80143a6:	f000 fd20 	bl	8014dea <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 80143aa:	4603      	mov	r3, r0
 80143ac:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7ee fa29 	bl	8002808 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80143b6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80143b8:	69fa      	ldr	r2, [r7, #28]
 80143ba:	4621      	mov	r1, r4
 80143bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143be:	f000 fd00 	bl	8014dc2 <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80143c2:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80143c4:	69bb      	ldr	r3, [r7, #24]
 80143c6:	3301      	adds	r3, #1
 80143c8:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80143ca:	f107 0308 	add.w	r3, r7, #8
 80143ce:	4618      	mov	r0, r3
 80143d0:	f000 fd0b 	bl	8014dea <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 80143d4:	4603      	mov	r3, r0
 80143d6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	4618      	mov	r0, r3
 80143dc:	f7ee fa14 	bl	8002808 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80143e0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80143e2:	69ba      	ldr	r2, [r7, #24]
 80143e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80143e6:	4620      	mov	r0, r4
 80143e8:	f000 fceb 	bl	8014dc2 <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80143ec:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80143ee:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	689a      	ldr	r2, [r3, #8]
 80143f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143f6:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 80143f8:	461a      	mov	r2, r3
 80143fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80143fc:	f7ef fa06 	bl	800380c <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	69fa      	ldr	r2, [r7, #28]
 8014404:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	69ba      	ldr	r2, [r7, #24]
 801440a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801440c:	69fa      	ldr	r2, [r7, #28]
 801440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014410:	441a      	add	r2, r3
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	609a      	str	r2, [r3, #8]
    }
 8014416:	bf00      	nop
 8014418:	3730      	adds	r7, #48	; 0x30
 801441a:	46bd      	mov	sp, r7
 801441c:	bdb0      	pop	{r4, r5, r7, pc}
 801441e:	bf00      	nop
 8014420:	0801d06c 	.word	0x0801d06c

08014424 <_ZNSt6vectorI12sum_operatorSaIS0_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8014424:	b580      	push	{r7, lr}
 8014426:	b084      	sub	sp, #16
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 801442c:	6878      	ldr	r0, [r7, #4]
 801442e:	f7ff ff6e 	bl	801430e <_ZNSt6vectorI12sum_operatorSaIS0_EE3endEv>
 8014432:	4603      	mov	r3, r0
 8014434:	60fb      	str	r3, [r7, #12]
 8014436:	f107 030c 	add.w	r3, r7, #12
 801443a:	2101      	movs	r1, #1
 801443c:	4618      	mov	r0, r3
 801443e:	f000 fcdf 	bl	8014e00 <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEmiEi>
 8014442:	4603      	mov	r3, r0
 8014444:	60bb      	str	r3, [r7, #8]
 8014446:	f107 0308 	add.w	r3, r7, #8
 801444a:	4618      	mov	r0, r3
 801444c:	f000 fcf0 	bl	8014e30 <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEdeEv>
 8014450:	4603      	mov	r3, r0
      }
 8014452:	4618      	mov	r0, r3
 8014454:	3710      	adds	r7, #16
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}

0801445a <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionEC1Ev>:
 801445a:	b480      	push	{r7}
 801445c:	b083      	sub	sp, #12
 801445e:	af00      	add	r7, sp, #0
 8014460:	6078      	str	r0, [r7, #4]
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	4618      	mov	r0, r3
 8014466:	370c      	adds	r7, #12
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr

08014470 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorEC1Ev>:
 8014470:	b480      	push	{r7}
 8014472:	b083      	sub	sp, #12
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	4618      	mov	r0, r3
 801447c:	370c      	adds	r7, #12
 801447e:	46bd      	mov	sp, r7
 8014480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014484:	4770      	bx	lr

08014486 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014486:	b480      	push	{r7}
 8014488:	b083      	sub	sp, #12
 801448a:	af00      	add	r7, sp, #0
 801448c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	4618      	mov	r0, r3
 8014492:	370c      	adds	r7, #12
 8014494:	46bd      	mov	sp, r7
 8014496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449a:	4770      	bx	lr

0801449c <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 801449c:	b580      	push	{r7, lr}
 801449e:	b084      	sub	sp, #16
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	60f8      	str	r0, [r7, #12]
 80144a4:	60b9      	str	r1, [r7, #8]
 80144a6:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f7ff ffec 	bl	8014486 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80144ae:	4603      	mov	r3, r0
 80144b0:	461a      	mov	r2, r3
 80144b2:	68b9      	ldr	r1, [r7, #8]
 80144b4:	68f8      	ldr	r0, [r7, #12]
 80144b6:	f000 fcc7 	bl	8014e48 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 80144ba:	bf00      	nop
 80144bc:	3710      	adds	r7, #16
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
	...

080144c4 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80144c4:	b5b0      	push	{r4, r5, r7, lr}
 80144c6:	b08c      	sub	sp, #48	; 0x30
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	60f8      	str	r0, [r7, #12]
 80144cc:	60b9      	str	r1, [r7, #8]
 80144ce:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80144d0:	4a39      	ldr	r2, [pc, #228]	; (80145b8 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80144d2:	2101      	movs	r1, #1
 80144d4:	68f8      	ldr	r0, [r7, #12]
 80144d6:	f000 fccd 	bl	8014e74 <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc>
 80144da:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	685b      	ldr	r3, [r3, #4]
 80144e6:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80144e8:	68f8      	ldr	r0, [r7, #12]
 80144ea:	f7ed fb8b 	bl	8001c04 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE5beginEv>
 80144ee:	4603      	mov	r3, r0
 80144f0:	617b      	str	r3, [r7, #20]
 80144f2:	f107 0214 	add.w	r2, r7, #20
 80144f6:	f107 0308 	add.w	r3, r7, #8
 80144fa:	4611      	mov	r1, r2
 80144fc:	4618      	mov	r0, r3
 80144fe:	f000 fd00 	bl	8014f02 <_ZN9__gnu_cxxmiIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8014502:	4603      	mov	r3, r0
 8014504:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801450a:	4618      	mov	r0, r3
 801450c:	f000 fd0e 	bl	8014f2c <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE11_M_allocateEj>
 8014510:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8014512:	69fb      	ldr	r3, [r7, #28]
 8014514:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8014516:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8014518:	6a3b      	ldr	r3, [r7, #32]
 801451a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 801451c:	69fa      	ldr	r2, [r7, #28]
 801451e:	18d5      	adds	r5, r2, r3
 8014520:	6878      	ldr	r0, [r7, #4]
 8014522:	f7ff ffb0 	bl	8014486 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8014526:	4603      	mov	r3, r0
 8014528:	461a      	mov	r2, r3
 801452a:	4629      	mov	r1, r5
 801452c:	4620      	mov	r0, r4
 801452e:	f7ff ffb5 	bl	801449c <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8014532:	2300      	movs	r3, #0
 8014534:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8014536:	f107 0308 	add.w	r3, r7, #8
 801453a:	4618      	mov	r0, r3
 801453c:	f7ee f98d 	bl	800285a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8014540:	4603      	mov	r3, r0
 8014542:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	4618      	mov	r0, r3
 8014548:	f7ee f921 	bl	800278e <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 801454c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801454e:	69fa      	ldr	r2, [r7, #28]
 8014550:	4621      	mov	r1, r4
 8014552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014554:	f000 fcfe 	bl	8014f54 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8014558:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801455a:	69bb      	ldr	r3, [r7, #24]
 801455c:	3304      	adds	r3, #4
 801455e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8014560:	f107 0308 	add.w	r3, r7, #8
 8014564:	4618      	mov	r0, r3
 8014566:	f7ee f978 	bl	800285a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 801456a:	4603      	mov	r3, r0
 801456c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	4618      	mov	r0, r3
 8014572:	f7ee f90c 	bl	800278e <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8014576:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8014578:	69ba      	ldr	r2, [r7, #24]
 801457a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801457c:	4620      	mov	r0, r4
 801457e:	f000 fce9 	bl	8014f54 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8014582:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8014584:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	689a      	ldr	r2, [r3, #8]
 801458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801458c:	1ad3      	subs	r3, r2, r3
 801458e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8014590:	461a      	mov	r2, r3
 8014592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014594:	f7ef f90e 	bl	80037b4 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	69fa      	ldr	r2, [r7, #28]
 801459c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	69ba      	ldr	r2, [r7, #24]
 80145a2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80145a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a6:	009b      	lsls	r3, r3, #2
 80145a8:	69fa      	ldr	r2, [r7, #28]
 80145aa:	441a      	add	r2, r3
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	609a      	str	r2, [r3, #8]
    }
 80145b0:	bf00      	nop
 80145b2:	3730      	adds	r7, #48	; 0x30
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bdb0      	pop	{r4, r5, r7, pc}
 80145b8:	0801d06c 	.word	0x0801d06c

080145bc <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80145bc:	b580      	push	{r7, lr}
 80145be:	b084      	sub	sp, #16
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f7ed fb2d 	bl	8001c24 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE3endEv>
 80145ca:	4603      	mov	r3, r0
 80145cc:	60fb      	str	r3, [r7, #12]
 80145ce:	f107 030c 	add.w	r3, r7, #12
 80145d2:	2101      	movs	r1, #1
 80145d4:	4618      	mov	r0, r3
 80145d6:	f000 fcd1 	bl	8014f7c <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEmiEi>
 80145da:	4603      	mov	r3, r0
 80145dc:	60bb      	str	r3, [r7, #8]
 80145de:	f107 0308 	add.w	r3, r7, #8
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7ed fb57 	bl	8001c96 <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 80145e8:	4603      	mov	r3, r0
      }
 80145ea:	4618      	mov	r0, r3
 80145ec:	3710      	adds	r7, #16
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}

080145f2 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionEC1Ev>:
 80145f2:	b480      	push	{r7}
 80145f4:	b083      	sub	sp, #12
 80145f6:	af00      	add	r7, sp, #0
 80145f8:	6078      	str	r0, [r7, #4]
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	4618      	mov	r0, r3
 80145fe:	370c      	adds	r7, #12
 8014600:	46bd      	mov	sp, r7
 8014602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014606:	4770      	bx	lr

08014608 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014608:	b480      	push	{r7}
 801460a:	b083      	sub	sp, #12
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	4618      	mov	r0, r3
 8014614:	370c      	adds	r7, #12
 8014616:	46bd      	mov	sp, r7
 8014618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461c:	4770      	bx	lr

0801461e <_ZNSt16allocator_traitsISaIP18Compare_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 801461e:	b580      	push	{r7, lr}
 8014620:	b084      	sub	sp, #16
 8014622:	af00      	add	r7, sp, #0
 8014624:	60f8      	str	r0, [r7, #12]
 8014626:	60b9      	str	r1, [r7, #8]
 8014628:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f7ff ffec 	bl	8014608 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8014630:	4603      	mov	r3, r0
 8014632:	461a      	mov	r2, r3
 8014634:	68b9      	ldr	r1, [r7, #8]
 8014636:	68f8      	ldr	r0, [r7, #12]
 8014638:	f000 fcb9 	bl	8014fae <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 801463c:	bf00      	nop
 801463e:	3710      	adds	r7, #16
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}

08014644 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8014644:	b5b0      	push	{r4, r5, r7, lr}
 8014646:	b08c      	sub	sp, #48	; 0x30
 8014648:	af00      	add	r7, sp, #0
 801464a:	60f8      	str	r0, [r7, #12]
 801464c:	60b9      	str	r1, [r7, #8]
 801464e:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8014650:	4a39      	ldr	r2, [pc, #228]	; (8014738 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8014652:	2101      	movs	r1, #1
 8014654:	68f8      	ldr	r0, [r7, #12]
 8014656:	f000 fcc0 	bl	8014fda <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc>
 801465a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	685b      	ldr	r3, [r3, #4]
 8014666:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8014668:	68f8      	ldr	r0, [r7, #12]
 801466a:	f7ed fb3b 	bl	8001ce4 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE5beginEv>
 801466e:	4603      	mov	r3, r0
 8014670:	617b      	str	r3, [r7, #20]
 8014672:	f107 0214 	add.w	r2, r7, #20
 8014676:	f107 0308 	add.w	r3, r7, #8
 801467a:	4611      	mov	r1, r2
 801467c:	4618      	mov	r0, r3
 801467e:	f000 fcf3 	bl	8015068 <_ZN9__gnu_cxxmiIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8014682:	4603      	mov	r3, r0
 8014684:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801468a:	4618      	mov	r0, r3
 801468c:	f000 fd01 	bl	8015092 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE11_M_allocateEj>
 8014690:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8014692:	69fb      	ldr	r3, [r7, #28]
 8014694:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8014696:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8014698:	6a3b      	ldr	r3, [r7, #32]
 801469a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 801469c:	69fa      	ldr	r2, [r7, #28]
 801469e:	18d5      	adds	r5, r2, r3
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f7ff ffb1 	bl	8014608 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80146a6:	4603      	mov	r3, r0
 80146a8:	461a      	mov	r2, r3
 80146aa:	4629      	mov	r1, r5
 80146ac:	4620      	mov	r0, r4
 80146ae:	f7ff ffb6 	bl	801461e <_ZNSt16allocator_traitsISaIP18Compare_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80146b2:	2300      	movs	r3, #0
 80146b4:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80146b6:	f107 0308 	add.w	r3, r7, #8
 80146ba:	4618      	mov	r0, r3
 80146bc:	f7ee f926 	bl	800290c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 80146c0:	4603      	mov	r3, r0
 80146c2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	4618      	mov	r0, r3
 80146c8:	f7ee f8f7 	bl	80028ba <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 80146cc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80146ce:	69fa      	ldr	r2, [r7, #28]
 80146d0:	4621      	mov	r1, r4
 80146d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146d4:	f000 fcf1 	bl	80150ba <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80146d8:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80146da:	69bb      	ldr	r3, [r7, #24]
 80146dc:	3304      	adds	r3, #4
 80146de:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80146e0:	f107 0308 	add.w	r3, r7, #8
 80146e4:	4618      	mov	r0, r3
 80146e6:	f7ee f911 	bl	800290c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 80146ea:	4603      	mov	r3, r0
 80146ec:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	4618      	mov	r0, r3
 80146f2:	f7ee f8e2 	bl	80028ba <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 80146f6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80146f8:	69ba      	ldr	r2, [r7, #24]
 80146fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80146fc:	4620      	mov	r0, r4
 80146fe:	f000 fcdc 	bl	80150ba <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8014702:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8014704:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	689a      	ldr	r2, [r3, #8]
 801470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801470c:	1ad3      	subs	r3, r2, r3
 801470e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8014710:	461a      	mov	r2, r3
 8014712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014714:	f7ef f8a6 	bl	8003864 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	69fa      	ldr	r2, [r7, #28]
 801471c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	69ba      	ldr	r2, [r7, #24]
 8014722:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8014724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014726:	009b      	lsls	r3, r3, #2
 8014728:	69fa      	ldr	r2, [r7, #28]
 801472a:	441a      	add	r2, r3
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	609a      	str	r2, [r3, #8]
    }
 8014730:	bf00      	nop
 8014732:	3730      	adds	r7, #48	; 0x30
 8014734:	46bd      	mov	sp, r7
 8014736:	bdb0      	pop	{r4, r5, r7, pc}
 8014738:	0801d06c 	.word	0x0801d06c

0801473c <_ZNSt6vectorIP18Compare_expressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 801473c:	b580      	push	{r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f7ed fadd 	bl	8001d04 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE3endEv>
 801474a:	4603      	mov	r3, r0
 801474c:	60fb      	str	r3, [r7, #12]
 801474e:	f107 030c 	add.w	r3, r7, #12
 8014752:	2101      	movs	r1, #1
 8014754:	4618      	mov	r0, r3
 8014756:	f000 fcc4 	bl	80150e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEmiEi>
 801475a:	4603      	mov	r3, r0
 801475c:	60bb      	str	r3, [r7, #8]
 801475e:	f107 0308 	add.w	r3, r7, #8
 8014762:	4618      	mov	r0, r3
 8014764:	f7ed fb07 	bl	8001d76 <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 8014768:	4603      	mov	r3, r0
      }
 801476a:	4618      	mov	r0, r3
 801476c:	3710      	adds	r7, #16
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}

08014772 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014772:	b480      	push	{r7}
 8014774:	b083      	sub	sp, #12
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	4618      	mov	r0, r3
 801477e:	370c      	adds	r7, #12
 8014780:	46bd      	mov	sp, r7
 8014782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014786:	4770      	bx	lr

08014788 <_ZNSt16allocator_traitsISaIP14And_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8014788:	b580      	push	{r7, lr}
 801478a:	b084      	sub	sp, #16
 801478c:	af00      	add	r7, sp, #0
 801478e:	60f8      	str	r0, [r7, #12]
 8014790:	60b9      	str	r1, [r7, #8]
 8014792:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8014794:	6878      	ldr	r0, [r7, #4]
 8014796:	f7ff ffec 	bl	8014772 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 801479a:	4603      	mov	r3, r0
 801479c:	461a      	mov	r2, r3
 801479e:	68b9      	ldr	r1, [r7, #8]
 80147a0:	68f8      	ldr	r0, [r7, #12]
 80147a2:	f000 fcb7 	bl	8015114 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 80147a6:	bf00      	nop
 80147a8:	3710      	adds	r7, #16
 80147aa:	46bd      	mov	sp, r7
 80147ac:	bd80      	pop	{r7, pc}
	...

080147b0 <_ZNSt6vectorIP14And_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80147b0:	b5b0      	push	{r4, r5, r7, lr}
 80147b2:	b08c      	sub	sp, #48	; 0x30
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	60f8      	str	r0, [r7, #12]
 80147b8:	60b9      	str	r1, [r7, #8]
 80147ba:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80147bc:	4a39      	ldr	r2, [pc, #228]	; (80148a4 <_ZNSt6vectorIP14And_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80147be:	2101      	movs	r1, #1
 80147c0:	68f8      	ldr	r0, [r7, #12]
 80147c2:	f000 fcbd 	bl	8015140 <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc>
 80147c6:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	685b      	ldr	r3, [r3, #4]
 80147d2:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80147d4:	68f8      	ldr	r0, [r7, #12]
 80147d6:	f7ed faf5 	bl	8001dc4 <_ZNSt6vectorIP14And_expressionSaIS1_EE5beginEv>
 80147da:	4603      	mov	r3, r0
 80147dc:	617b      	str	r3, [r7, #20]
 80147de:	f107 0214 	add.w	r2, r7, #20
 80147e2:	f107 0308 	add.w	r3, r7, #8
 80147e6:	4611      	mov	r1, r2
 80147e8:	4618      	mov	r0, r3
 80147ea:	f000 fcf0 	bl	80151ce <_ZN9__gnu_cxxmiIPP14And_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80147ee:	4603      	mov	r3, r0
 80147f0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80147f6:	4618      	mov	r0, r3
 80147f8:	f7f8 fcd4 	bl	800d1a4 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE11_M_allocateEj>
 80147fc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80147fe:	69fb      	ldr	r3, [r7, #28]
 8014800:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8014802:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8014804:	6a3b      	ldr	r3, [r7, #32]
 8014806:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8014808:	69fa      	ldr	r2, [r7, #28]
 801480a:	18d5      	adds	r5, r2, r3
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f7ff ffb0 	bl	8014772 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8014812:	4603      	mov	r3, r0
 8014814:	461a      	mov	r2, r3
 8014816:	4629      	mov	r1, r5
 8014818:	4620      	mov	r0, r4
 801481a:	f7ff ffb5 	bl	8014788 <_ZNSt16allocator_traitsISaIP14And_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 801481e:	2300      	movs	r3, #0
 8014820:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8014822:	f107 0308 	add.w	r3, r7, #8
 8014826:	4618      	mov	r0, r3
 8014828:	f7ee f8c9 	bl	80029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 801482c:	4603      	mov	r3, r0
 801482e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	4618      	mov	r0, r3
 8014834:	f7ee f89a 	bl	800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8014838:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801483a:	69fa      	ldr	r2, [r7, #28]
 801483c:	4621      	mov	r1, r4
 801483e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014840:	f000 fcda 	bl	80151f8 <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8014844:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8014846:	69bb      	ldr	r3, [r7, #24]
 8014848:	3304      	adds	r3, #4
 801484a:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801484c:	f107 0308 	add.w	r3, r7, #8
 8014850:	4618      	mov	r0, r3
 8014852:	f7ee f8b4 	bl	80029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8014856:	4603      	mov	r3, r0
 8014858:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	4618      	mov	r0, r3
 801485e:	f7ee f885 	bl	800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8014862:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8014864:	69ba      	ldr	r2, [r7, #24]
 8014866:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014868:	4620      	mov	r0, r4
 801486a:	f000 fcc5 	bl	80151f8 <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 801486e:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8014870:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	689a      	ldr	r2, [r3, #8]
 8014876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014878:	1ad3      	subs	r3, r2, r3
 801487a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 801487c:	461a      	mov	r2, r3
 801487e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014880:	f7ef f81c 	bl	80038bc <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	69fa      	ldr	r2, [r7, #28]
 8014888:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	69ba      	ldr	r2, [r7, #24]
 801488e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8014890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014892:	009b      	lsls	r3, r3, #2
 8014894:	69fa      	ldr	r2, [r7, #28]
 8014896:	441a      	add	r2, r3
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	609a      	str	r2, [r3, #8]
    }
 801489c:	bf00      	nop
 801489e:	3730      	adds	r7, #48	; 0x30
 80148a0:	46bd      	mov	sp, r7
 80148a2:	bdb0      	pop	{r4, r5, r7, pc}
 80148a4:	0801d06c 	.word	0x0801d06c

080148a8 <_ZNSt6vectorIP14And_expressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f7ed fa97 	bl	8001de4 <_ZNSt6vectorIP14And_expressionSaIS1_EE3endEv>
 80148b6:	4603      	mov	r3, r0
 80148b8:	60fb      	str	r3, [r7, #12]
 80148ba:	f107 030c 	add.w	r3, r7, #12
 80148be:	2101      	movs	r1, #1
 80148c0:	4618      	mov	r0, r3
 80148c2:	f000 fcad 	bl	8015220 <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEmiEi>
 80148c6:	4603      	mov	r3, r0
 80148c8:	60bb      	str	r3, [r7, #8]
 80148ca:	f107 0308 	add.w	r3, r7, #8
 80148ce:	4618      	mov	r0, r3
 80148d0:	f7ed fac1 	bl	8001e56 <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 80148d4:	4603      	mov	r3, r0
      }
 80148d6:	4618      	mov	r0, r3
 80148d8:	3710      	adds	r7, #16
 80148da:	46bd      	mov	sp, r7
 80148dc:	bd80      	pop	{r7, pc}

080148de <_ZSt9addressofIP13Function_callEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 80148de:	b580      	push	{r7, lr}
 80148e0:	b082      	sub	sp, #8
 80148e2:	af00      	add	r7, sp, #0
 80148e4:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	f7f1 f969 	bl	8005bbe <_ZSt11__addressofIP13Function_callEPT_RS2_>
 80148ec:	4603      	mov	r3, r0
 80148ee:	4618      	mov	r0, r3
 80148f0:	3708      	adds	r7, #8
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}

080148f6 <_ZSt9addressofIP8VariableEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 80148f6:	b580      	push	{r7, lr}
 80148f8:	b082      	sub	sp, #8
 80148fa:	af00      	add	r7, sp, #0
 80148fc:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	f7f1 f948 	bl	8005b94 <_ZSt11__addressofIP8VariableEPT_RS2_>
 8014904:	4603      	mov	r3, r0
 8014906:	4618      	mov	r0, r3
 8014908:	3708      	adds	r7, #8
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}

0801490e <_ZSt9addressofIP10ExpressionEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 801490e:	b580      	push	{r7, lr}
 8014910:	b082      	sub	sp, #8
 8014912:	af00      	add	r7, sp, #0
 8014914:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f000 fc9b 	bl	8015252 <_ZSt11__addressofIP10ExpressionEPT_RS2_>
 801491c:	4603      	mov	r3, r0
 801491e:	4618      	mov	r0, r3
 8014920:	3708      	adds	r7, #8
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}

08014926 <_ZSt9addressofIP17Primal_expressionEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 8014926:	b580      	push	{r7, lr}
 8014928:	b082      	sub	sp, #8
 801492a:	af00      	add	r7, sp, #0
 801492c:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f000 fc9a 	bl	8015268 <_ZSt11__addressofIP17Primal_expressionEPT_RS2_>
 8014934:	4603      	mov	r3, r0
 8014936:	4618      	mov	r0, r3
 8014938:	3708      	adds	r7, #8
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}

0801493e <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801493e:	b590      	push	{r4, r7, lr}
 8014940:	b085      	sub	sp, #20
 8014942:	af00      	add	r7, sp, #0
 8014944:	60f8      	str	r0, [r7, #12]
 8014946:	60b9      	str	r1, [r7, #8]
 8014948:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f7ff fb31 	bl	8013fb2 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8014950:	4603      	mov	r3, r0
 8014952:	781c      	ldrb	r4, [r3, #0]
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	4619      	mov	r1, r3
 8014958:	2001      	movs	r0, #1
 801495a:	f7ec fb3f 	bl	8000fdc <_ZnwjPv>
 801495e:	4603      	mov	r3, r0
 8014960:	4622      	mov	r2, r4
 8014962:	701a      	strb	r2, [r3, #0]
 8014964:	bf00      	nop
 8014966:	3714      	adds	r7, #20
 8014968:	46bd      	mov	sp, r7
 801496a:	bd90      	pop	{r4, r7, pc}

0801496c <_ZN9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801496c:	b480      	push	{r7}
 801496e:	b083      	sub	sp, #12
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	681a      	ldr	r2, [r3, #0]
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	601a      	str	r2, [r3, #0]
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	4618      	mov	r0, r3
 8014982:	370c      	adds	r7, #12
 8014984:	46bd      	mov	sp, r7
 8014986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498a:	4770      	bx	lr

0801498c <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801498c:	b590      	push	{r4, r7, lr}
 801498e:	b087      	sub	sp, #28
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8014998:	68f8      	ldr	r0, [r7, #12]
 801499a:	f000 fc70 	bl	801527e <_ZNKSt6vectorI13mult_operatorSaIS0_EE8max_sizeEv>
 801499e:	4604      	mov	r4, r0
 80149a0:	68f8      	ldr	r0, [r7, #12]
 80149a2:	f7ff f810 	bl	80139c6 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>
 80149a6:	4603      	mov	r3, r0
 80149a8:	1ae2      	subs	r2, r4, r3
 80149aa:	68bb      	ldr	r3, [r7, #8]
 80149ac:	429a      	cmp	r2, r3
 80149ae:	bf34      	ite	cc
 80149b0:	2301      	movcc	r3, #1
 80149b2:	2300      	movcs	r3, #0
 80149b4:	b2db      	uxtb	r3, r3
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d002      	beq.n	80149c0 <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f004 fe8b 	bl	80196d6 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80149c0:	68f8      	ldr	r0, [r7, #12]
 80149c2:	f7ff f800 	bl	80139c6 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>
 80149c6:	4604      	mov	r4, r0
 80149c8:	68f8      	ldr	r0, [r7, #12]
 80149ca:	f7fe fffc 	bl	80139c6 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>
 80149ce:	4603      	mov	r3, r0
 80149d0:	613b      	str	r3, [r7, #16]
 80149d2:	f107 0208 	add.w	r2, r7, #8
 80149d6:	f107 0310 	add.w	r3, r7, #16
 80149da:	4611      	mov	r1, r2
 80149dc:	4618      	mov	r0, r3
 80149de:	f7fa f86e 	bl	800eabe <_ZSt3maxIjERKT_S2_S2_>
 80149e2:	4603      	mov	r3, r0
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	4423      	add	r3, r4
 80149e8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80149ea:	68f8      	ldr	r0, [r7, #12]
 80149ec:	f7fe ffeb 	bl	80139c6 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>
 80149f0:	4602      	mov	r2, r0
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	4293      	cmp	r3, r2
 80149f6:	d306      	bcc.n	8014a06 <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc+0x7a>
 80149f8:	68f8      	ldr	r0, [r7, #12]
 80149fa:	f000 fc40 	bl	801527e <_ZNKSt6vectorI13mult_operatorSaIS0_EE8max_sizeEv>
 80149fe:	4602      	mov	r2, r0
 8014a00:	697b      	ldr	r3, [r7, #20]
 8014a02:	4293      	cmp	r3, r2
 8014a04:	d904      	bls.n	8014a10 <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc+0x84>
 8014a06:	68f8      	ldr	r0, [r7, #12]
 8014a08:	f000 fc39 	bl	801527e <_ZNKSt6vectorI13mult_operatorSaIS0_EE8max_sizeEv>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	e000      	b.n	8014a12 <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc+0x86>
 8014a10:	697b      	ldr	r3, [r7, #20]
      }
 8014a12:	4618      	mov	r0, r3
 8014a14:	371c      	adds	r7, #28
 8014a16:	46bd      	mov	sp, r7
 8014a18:	bd90      	pop	{r4, r7, pc}

08014a1a <_ZNSt6vectorI13mult_operatorSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8014a1a:	b580      	push	{r7, lr}
 8014a1c:	b084      	sub	sp, #16
 8014a1e:	af00      	add	r7, sp, #0
 8014a20:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8014a22:	687a      	ldr	r2, [r7, #4]
 8014a24:	f107 030c 	add.w	r3, r7, #12
 8014a28:	4611      	mov	r1, r2
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7ff ff9e 	bl	801496c <_ZN9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	4618      	mov	r0, r3
 8014a34:	3710      	adds	r7, #16
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}

08014a3a <_ZN9__gnu_cxxmiIP13mult_operatorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8014a3a:	b590      	push	{r4, r7, lr}
 8014a3c:	b083      	sub	sp, #12
 8014a3e:	af00      	add	r7, sp, #0
 8014a40:	6078      	str	r0, [r7, #4]
 8014a42:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f000 f834 	bl	8014ab2 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	681c      	ldr	r4, [r3, #0]
 8014a4e:	6838      	ldr	r0, [r7, #0]
 8014a50:	f000 f82f 	bl	8014ab2 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 8014a54:	4603      	mov	r3, r0
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	1ae3      	subs	r3, r4, r3
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	370c      	adds	r7, #12
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd90      	pop	{r4, r7, pc}

08014a62 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8014a62:	b580      	push	{r7, lr}
 8014a64:	b082      	sub	sp, #8
 8014a66:	af00      	add	r7, sp, #0
 8014a68:	6078      	str	r0, [r7, #4]
 8014a6a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d006      	beq.n	8014a80 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE11_M_allocateEj+0x1e>
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	6839      	ldr	r1, [r7, #0]
 8014a76:	4618      	mov	r0, r3
 8014a78:	f000 fc12 	bl	80152a0 <_ZNSt16allocator_traitsISaI13mult_operatorEE8allocateERS1_j>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	e000      	b.n	8014a82 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE11_M_allocateEj+0x20>
 8014a80:	2300      	movs	r3, #0
      }
 8014a82:	4618      	mov	r0, r3
 8014a84:	3708      	adds	r7, #8
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}

08014a8a <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8014a8a:	b590      	push	{r4, r7, lr}
 8014a8c:	b089      	sub	sp, #36	; 0x24
 8014a8e:	af02      	add	r7, sp, #8
 8014a90:	60f8      	str	r0, [r7, #12]
 8014a92:	60b9      	str	r1, [r7, #8]
 8014a94:	607a      	str	r2, [r7, #4]
 8014a96:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8014a98:	f88d 4000 	strb.w	r4, [sp]
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	687a      	ldr	r2, [r7, #4]
 8014aa0:	68b9      	ldr	r1, [r7, #8]
 8014aa2:	68f8      	ldr	r0, [r7, #12]
 8014aa4:	f000 fc0b 	bl	80152be <_ZNSt6vectorI13mult_operatorSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8014aa8:	4603      	mov	r3, r0
      }
 8014aaa:	4618      	mov	r0, r3
 8014aac:	371c      	adds	r7, #28
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd90      	pop	{r4, r7, pc}

08014ab2 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8014ab2:	b480      	push	{r7}
 8014ab4:	b083      	sub	sp, #12
 8014ab6:	af00      	add	r7, sp, #0
 8014ab8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	4618      	mov	r0, r3
 8014abe:	370c      	adds	r7, #12
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac6:	4770      	bx	lr

08014ac8 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b084      	sub	sp, #16
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	681a      	ldr	r2, [r3, #0]
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	425b      	negs	r3, r3
 8014ada:	4413      	add	r3, r2
 8014adc:	60fb      	str	r3, [r7, #12]
 8014ade:	f107 020c 	add.w	r2, r7, #12
 8014ae2:	f107 0308 	add.w	r3, r7, #8
 8014ae6:	4611      	mov	r1, r2
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7ff ff3f 	bl	801496c <_ZN9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8014aee:	68bb      	ldr	r3, [r7, #8]
 8014af0:	4618      	mov	r0, r3
 8014af2:	3710      	adds	r7, #16
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}

08014af8 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8014af8:	b480      	push	{r7}
 8014afa:	b083      	sub	sp, #12
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	4618      	mov	r0, r3
 8014b06:	370c      	adds	r7, #12
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0e:	4770      	bx	lr

08014b10 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8014b10:	b590      	push	{r4, r7, lr}
 8014b12:	b085      	sub	sp, #20
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	60f8      	str	r0, [r7, #12]
 8014b18:	60b9      	str	r1, [r7, #8]
 8014b1a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014b1c:	6878      	ldr	r0, [r7, #4]
 8014b1e:	f7ff fb22 	bl	8014166 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8014b22:	4603      	mov	r3, r0
 8014b24:	681c      	ldr	r4, [r3, #0]
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	4619      	mov	r1, r3
 8014b2a:	2004      	movs	r0, #4
 8014b2c:	f7ec fa56 	bl	8000fdc <_ZnwjPv>
 8014b30:	4603      	mov	r3, r0
 8014b32:	601c      	str	r4, [r3, #0]
 8014b34:	bf00      	nop
 8014b36:	3714      	adds	r7, #20
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd90      	pop	{r4, r7, pc}

08014b3c <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8014b3c:	b590      	push	{r4, r7, lr}
 8014b3e:	b087      	sub	sp, #28
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	60f8      	str	r0, [r7, #12]
 8014b44:	60b9      	str	r1, [r7, #8]
 8014b46:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8014b48:	68f8      	ldr	r0, [r7, #12]
 8014b4a:	f000 fbca 	bl	80152e2 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE8max_sizeEv>
 8014b4e:	4604      	mov	r4, r0
 8014b50:	68f8      	ldr	r0, [r7, #12]
 8014b52:	f7fe ff1d 	bl	8013990 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>
 8014b56:	4603      	mov	r3, r0
 8014b58:	1ae2      	subs	r2, r4, r3
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	429a      	cmp	r2, r3
 8014b5e:	bf34      	ite	cc
 8014b60:	2301      	movcc	r3, #1
 8014b62:	2300      	movcs	r3, #0
 8014b64:	b2db      	uxtb	r3, r3
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d002      	beq.n	8014b70 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f004 fdb3 	bl	80196d6 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8014b70:	68f8      	ldr	r0, [r7, #12]
 8014b72:	f7fe ff0d 	bl	8013990 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>
 8014b76:	4604      	mov	r4, r0
 8014b78:	68f8      	ldr	r0, [r7, #12]
 8014b7a:	f7fe ff09 	bl	8013990 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	613b      	str	r3, [r7, #16]
 8014b82:	f107 0208 	add.w	r2, r7, #8
 8014b86:	f107 0310 	add.w	r3, r7, #16
 8014b8a:	4611      	mov	r1, r2
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f7f9 ff96 	bl	800eabe <_ZSt3maxIjERKT_S2_S2_>
 8014b92:	4603      	mov	r3, r0
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	4423      	add	r3, r4
 8014b98:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014b9a:	68f8      	ldr	r0, [r7, #12]
 8014b9c:	f7fe fef8 	bl	8013990 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>
 8014ba0:	4602      	mov	r2, r0
 8014ba2:	697b      	ldr	r3, [r7, #20]
 8014ba4:	4293      	cmp	r3, r2
 8014ba6:	d306      	bcc.n	8014bb6 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8014ba8:	68f8      	ldr	r0, [r7, #12]
 8014baa:	f000 fb9a 	bl	80152e2 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE8max_sizeEv>
 8014bae:	4602      	mov	r2, r0
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	4293      	cmp	r3, r2
 8014bb4:	d904      	bls.n	8014bc0 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 8014bb6:	68f8      	ldr	r0, [r7, #12]
 8014bb8:	f000 fb93 	bl	80152e2 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE8max_sizeEv>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	e000      	b.n	8014bc2 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 8014bc0:	697b      	ldr	r3, [r7, #20]
      }
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	371c      	adds	r7, #28
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd90      	pop	{r4, r7, pc}

08014bca <_ZN9__gnu_cxxmiIPP16Power_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8014bca:	b590      	push	{r4, r7, lr}
 8014bcc:	b083      	sub	sp, #12
 8014bce:	af00      	add	r7, sp, #0
 8014bd0:	6078      	str	r0, [r7, #4]
 8014bd2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8014bd4:	6878      	ldr	r0, [r7, #4]
 8014bd6:	f7ed fdaa 	bl	800272e <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	681c      	ldr	r4, [r3, #0]
 8014bde:	6838      	ldr	r0, [r7, #0]
 8014be0:	f7ed fda5 	bl	800272e <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8014be4:	4603      	mov	r3, r0
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	1ae3      	subs	r3, r4, r3
 8014bea:	109b      	asrs	r3, r3, #2
 8014bec:	4618      	mov	r0, r3
 8014bee:	370c      	adds	r7, #12
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	bd90      	pop	{r4, r7, pc}

08014bf4 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b082      	sub	sp, #8
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
 8014bfc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d006      	beq.n	8014c12 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE11_M_allocateEj+0x1e>
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	6839      	ldr	r1, [r7, #0]
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f000 fb7b 	bl	8015304 <_ZNSt16allocator_traitsISaIP16Power_expressionEE8allocateERS2_j>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	e000      	b.n	8014c14 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE11_M_allocateEj+0x20>
 8014c12:	2300      	movs	r3, #0
      }
 8014c14:	4618      	mov	r0, r3
 8014c16:	3708      	adds	r7, #8
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}

08014c1c <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8014c1c:	b590      	push	{r4, r7, lr}
 8014c1e:	b089      	sub	sp, #36	; 0x24
 8014c20:	af02      	add	r7, sp, #8
 8014c22:	60f8      	str	r0, [r7, #12]
 8014c24:	60b9      	str	r1, [r7, #8]
 8014c26:	607a      	str	r2, [r7, #4]
 8014c28:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8014c2a:	f88d 4000 	strb.w	r4, [sp]
 8014c2e:	683b      	ldr	r3, [r7, #0]
 8014c30:	687a      	ldr	r2, [r7, #4]
 8014c32:	68b9      	ldr	r1, [r7, #8]
 8014c34:	68f8      	ldr	r0, [r7, #12]
 8014c36:	f000 fb74 	bl	8015322 <_ZNSt6vectorIP16Power_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8014c3a:	4603      	mov	r3, r0
      }
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	371c      	adds	r7, #28
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd90      	pop	{r4, r7, pc}

08014c44 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b084      	sub	sp, #16
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	681a      	ldr	r2, [r3, #0]
 8014c52:	683b      	ldr	r3, [r7, #0]
 8014c54:	009b      	lsls	r3, r3, #2
 8014c56:	425b      	negs	r3, r3
 8014c58:	4413      	add	r3, r2
 8014c5a:	60fb      	str	r3, [r7, #12]
 8014c5c:	f107 020c 	add.w	r2, r7, #12
 8014c60:	f107 0308 	add.w	r3, r7, #8
 8014c64:	4611      	mov	r1, r2
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7ed fd51 	bl	800270e <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3710      	adds	r7, #16
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}

08014c76 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8014c76:	b590      	push	{r4, r7, lr}
 8014c78:	b085      	sub	sp, #20
 8014c7a:	af00      	add	r7, sp, #0
 8014c7c:	60f8      	str	r0, [r7, #12]
 8014c7e:	60b9      	str	r1, [r7, #8]
 8014c80:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014c82:	6878      	ldr	r0, [r7, #4]
 8014c84:	f7ff fb25 	bl	80142d2 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	781c      	ldrb	r4, [r3, #0]
 8014c8c:	68bb      	ldr	r3, [r7, #8]
 8014c8e:	4619      	mov	r1, r3
 8014c90:	2001      	movs	r0, #1
 8014c92:	f7ec f9a3 	bl	8000fdc <_ZnwjPv>
 8014c96:	4603      	mov	r3, r0
 8014c98:	4622      	mov	r2, r4
 8014c9a:	701a      	strb	r2, [r3, #0]
 8014c9c:	bf00      	nop
 8014c9e:	3714      	adds	r7, #20
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd90      	pop	{r4, r7, pc}

08014ca4 <_ZN9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8014ca4:	b480      	push	{r7}
 8014ca6:	b083      	sub	sp, #12
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
 8014cac:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8014cae:	683b      	ldr	r3, [r7, #0]
 8014cb0:	681a      	ldr	r2, [r3, #0]
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	601a      	str	r2, [r3, #0]
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	4618      	mov	r0, r3
 8014cba:	370c      	adds	r7, #12
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc2:	4770      	bx	lr

08014cc4 <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8014cc4:	b590      	push	{r4, r7, lr}
 8014cc6:	b087      	sub	sp, #28
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	60f8      	str	r0, [r7, #12]
 8014ccc:	60b9      	str	r1, [r7, #8]
 8014cce:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8014cd0:	68f8      	ldr	r0, [r7, #12]
 8014cd2:	f000 fb38 	bl	8015346 <_ZNKSt6vectorI12sum_operatorSaIS0_EE8max_sizeEv>
 8014cd6:	4604      	mov	r4, r0
 8014cd8:	68f8      	ldr	r0, [r7, #12]
 8014cda:	f7fe ff63 	bl	8013ba4 <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	1ae2      	subs	r2, r4, r3
 8014ce2:	68bb      	ldr	r3, [r7, #8]
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	bf34      	ite	cc
 8014ce8:	2301      	movcc	r3, #1
 8014cea:	2300      	movcs	r3, #0
 8014cec:	b2db      	uxtb	r3, r3
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d002      	beq.n	8014cf8 <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8014cf2:	6878      	ldr	r0, [r7, #4]
 8014cf4:	f004 fcef 	bl	80196d6 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8014cf8:	68f8      	ldr	r0, [r7, #12]
 8014cfa:	f7fe ff53 	bl	8013ba4 <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>
 8014cfe:	4604      	mov	r4, r0
 8014d00:	68f8      	ldr	r0, [r7, #12]
 8014d02:	f7fe ff4f 	bl	8013ba4 <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>
 8014d06:	4603      	mov	r3, r0
 8014d08:	613b      	str	r3, [r7, #16]
 8014d0a:	f107 0208 	add.w	r2, r7, #8
 8014d0e:	f107 0310 	add.w	r3, r7, #16
 8014d12:	4611      	mov	r1, r2
 8014d14:	4618      	mov	r0, r3
 8014d16:	f7f9 fed2 	bl	800eabe <_ZSt3maxIjERKT_S2_S2_>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	4423      	add	r3, r4
 8014d20:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014d22:	68f8      	ldr	r0, [r7, #12]
 8014d24:	f7fe ff3e 	bl	8013ba4 <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>
 8014d28:	4602      	mov	r2, r0
 8014d2a:	697b      	ldr	r3, [r7, #20]
 8014d2c:	4293      	cmp	r3, r2
 8014d2e:	d306      	bcc.n	8014d3e <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8014d30:	68f8      	ldr	r0, [r7, #12]
 8014d32:	f000 fb08 	bl	8015346 <_ZNKSt6vectorI12sum_operatorSaIS0_EE8max_sizeEv>
 8014d36:	4602      	mov	r2, r0
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	4293      	cmp	r3, r2
 8014d3c:	d904      	bls.n	8014d48 <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc+0x84>
 8014d3e:	68f8      	ldr	r0, [r7, #12]
 8014d40:	f000 fb01 	bl	8015346 <_ZNKSt6vectorI12sum_operatorSaIS0_EE8max_sizeEv>
 8014d44:	4603      	mov	r3, r0
 8014d46:	e000      	b.n	8014d4a <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc+0x86>
 8014d48:	697b      	ldr	r3, [r7, #20]
      }
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	371c      	adds	r7, #28
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd90      	pop	{r4, r7, pc}

08014d52 <_ZNSt6vectorI12sum_operatorSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8014d52:	b580      	push	{r7, lr}
 8014d54:	b084      	sub	sp, #16
 8014d56:	af00      	add	r7, sp, #0
 8014d58:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8014d5a:	687a      	ldr	r2, [r7, #4]
 8014d5c:	f107 030c 	add.w	r3, r7, #12
 8014d60:	4611      	mov	r1, r2
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7ff ff9e 	bl	8014ca4 <_ZN9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	3710      	adds	r7, #16
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}

08014d72 <_ZN9__gnu_cxxmiIP12sum_operatorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8014d72:	b590      	push	{r4, r7, lr}
 8014d74:	b083      	sub	sp, #12
 8014d76:	af00      	add	r7, sp, #0
 8014d78:	6078      	str	r0, [r7, #4]
 8014d7a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8014d7c:	6878      	ldr	r0, [r7, #4]
 8014d7e:	f000 f834 	bl	8014dea <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 8014d82:	4603      	mov	r3, r0
 8014d84:	681c      	ldr	r4, [r3, #0]
 8014d86:	6838      	ldr	r0, [r7, #0]
 8014d88:	f000 f82f 	bl	8014dea <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 8014d8c:	4603      	mov	r3, r0
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	1ae3      	subs	r3, r4, r3
 8014d92:	4618      	mov	r0, r3
 8014d94:	370c      	adds	r7, #12
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd90      	pop	{r4, r7, pc}

08014d9a <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8014d9a:	b580      	push	{r7, lr}
 8014d9c:	b082      	sub	sp, #8
 8014d9e:	af00      	add	r7, sp, #0
 8014da0:	6078      	str	r0, [r7, #4]
 8014da2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d006      	beq.n	8014db8 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE11_M_allocateEj+0x1e>
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	6839      	ldr	r1, [r7, #0]
 8014dae:	4618      	mov	r0, r3
 8014db0:	f000 fada 	bl	8015368 <_ZNSt16allocator_traitsISaI12sum_operatorEE8allocateERS1_j>
 8014db4:	4603      	mov	r3, r0
 8014db6:	e000      	b.n	8014dba <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE11_M_allocateEj+0x20>
 8014db8:	2300      	movs	r3, #0
      }
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3708      	adds	r7, #8
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}

08014dc2 <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8014dc2:	b590      	push	{r4, r7, lr}
 8014dc4:	b089      	sub	sp, #36	; 0x24
 8014dc6:	af02      	add	r7, sp, #8
 8014dc8:	60f8      	str	r0, [r7, #12]
 8014dca:	60b9      	str	r1, [r7, #8]
 8014dcc:	607a      	str	r2, [r7, #4]
 8014dce:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8014dd0:	f88d 4000 	strb.w	r4, [sp]
 8014dd4:	683b      	ldr	r3, [r7, #0]
 8014dd6:	687a      	ldr	r2, [r7, #4]
 8014dd8:	68b9      	ldr	r1, [r7, #8]
 8014dda:	68f8      	ldr	r0, [r7, #12]
 8014ddc:	f000 fad3 	bl	8015386 <_ZNSt6vectorI12sum_operatorSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8014de0:	4603      	mov	r3, r0
      }
 8014de2:	4618      	mov	r0, r3
 8014de4:	371c      	adds	r7, #28
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd90      	pop	{r4, r7, pc}

08014dea <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8014dea:	b480      	push	{r7}
 8014dec:	b083      	sub	sp, #12
 8014dee:	af00      	add	r7, sp, #0
 8014df0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	4618      	mov	r0, r3
 8014df6:	370c      	adds	r7, #12
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfe:	4770      	bx	lr

08014e00 <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b084      	sub	sp, #16
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
 8014e08:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	681a      	ldr	r2, [r3, #0]
 8014e0e:	683b      	ldr	r3, [r7, #0]
 8014e10:	425b      	negs	r3, r3
 8014e12:	4413      	add	r3, r2
 8014e14:	60fb      	str	r3, [r7, #12]
 8014e16:	f107 020c 	add.w	r2, r7, #12
 8014e1a:	f107 0308 	add.w	r3, r7, #8
 8014e1e:	4611      	mov	r1, r2
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7ff ff3f 	bl	8014ca4 <_ZN9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8014e26:	68bb      	ldr	r3, [r7, #8]
 8014e28:	4618      	mov	r0, r3
 8014e2a:	3710      	adds	r7, #16
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd80      	pop	{r7, pc}

08014e30 <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8014e30:	b480      	push	{r7}
 8014e32:	b083      	sub	sp, #12
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	370c      	adds	r7, #12
 8014e40:	46bd      	mov	sp, r7
 8014e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e46:	4770      	bx	lr

08014e48 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8014e48:	b590      	push	{r4, r7, lr}
 8014e4a:	b085      	sub	sp, #20
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	60f8      	str	r0, [r7, #12]
 8014e50:	60b9      	str	r1, [r7, #8]
 8014e52:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014e54:	6878      	ldr	r0, [r7, #4]
 8014e56:	f7ff fb16 	bl	8014486 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	681c      	ldr	r4, [r3, #0]
 8014e5e:	68bb      	ldr	r3, [r7, #8]
 8014e60:	4619      	mov	r1, r3
 8014e62:	2004      	movs	r0, #4
 8014e64:	f7ec f8ba 	bl	8000fdc <_ZnwjPv>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	601c      	str	r4, [r3, #0]
 8014e6c:	bf00      	nop
 8014e6e:	3714      	adds	r7, #20
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd90      	pop	{r4, r7, pc}

08014e74 <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8014e74:	b590      	push	{r4, r7, lr}
 8014e76:	b087      	sub	sp, #28
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	60f8      	str	r0, [r7, #12]
 8014e7c:	60b9      	str	r1, [r7, #8]
 8014e7e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8014e80:	68f8      	ldr	r0, [r7, #12]
 8014e82:	f000 fa92 	bl	80153aa <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE8max_sizeEv>
 8014e86:	4604      	mov	r4, r0
 8014e88:	68f8      	ldr	r0, [r7, #12]
 8014e8a:	f7fe fe70 	bl	8013b6e <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	1ae2      	subs	r2, r4, r3
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	429a      	cmp	r2, r3
 8014e96:	bf34      	ite	cc
 8014e98:	2301      	movcc	r3, #1
 8014e9a:	2300      	movcs	r3, #0
 8014e9c:	b2db      	uxtb	r3, r3
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d002      	beq.n	8014ea8 <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8014ea2:	6878      	ldr	r0, [r7, #4]
 8014ea4:	f004 fc17 	bl	80196d6 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8014ea8:	68f8      	ldr	r0, [r7, #12]
 8014eaa:	f7fe fe60 	bl	8013b6e <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>
 8014eae:	4604      	mov	r4, r0
 8014eb0:	68f8      	ldr	r0, [r7, #12]
 8014eb2:	f7fe fe5c 	bl	8013b6e <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	613b      	str	r3, [r7, #16]
 8014eba:	f107 0208 	add.w	r2, r7, #8
 8014ebe:	f107 0310 	add.w	r3, r7, #16
 8014ec2:	4611      	mov	r1, r2
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f7f9 fdfa 	bl	800eabe <_ZSt3maxIjERKT_S2_S2_>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	4423      	add	r3, r4
 8014ed0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014ed2:	68f8      	ldr	r0, [r7, #12]
 8014ed4:	f7fe fe4b 	bl	8013b6e <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>
 8014ed8:	4602      	mov	r2, r0
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	4293      	cmp	r3, r2
 8014ede:	d306      	bcc.n	8014eee <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8014ee0:	68f8      	ldr	r0, [r7, #12]
 8014ee2:	f000 fa62 	bl	80153aa <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE8max_sizeEv>
 8014ee6:	4602      	mov	r2, r0
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	4293      	cmp	r3, r2
 8014eec:	d904      	bls.n	8014ef8 <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 8014eee:	68f8      	ldr	r0, [r7, #12]
 8014ef0:	f000 fa5b 	bl	80153aa <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE8max_sizeEv>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	e000      	b.n	8014efa <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 8014ef8:	697b      	ldr	r3, [r7, #20]
      }
 8014efa:	4618      	mov	r0, r3
 8014efc:	371c      	adds	r7, #28
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd90      	pop	{r4, r7, pc}

08014f02 <_ZN9__gnu_cxxmiIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8014f02:	b590      	push	{r4, r7, lr}
 8014f04:	b083      	sub	sp, #12
 8014f06:	af00      	add	r7, sp, #0
 8014f08:	6078      	str	r0, [r7, #4]
 8014f0a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8014f0c:	6878      	ldr	r0, [r7, #4]
 8014f0e:	f7ed fca4 	bl	800285a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8014f12:	4603      	mov	r3, r0
 8014f14:	681c      	ldr	r4, [r3, #0]
 8014f16:	6838      	ldr	r0, [r7, #0]
 8014f18:	f7ed fc9f 	bl	800285a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	1ae3      	subs	r3, r4, r3
 8014f22:	109b      	asrs	r3, r3, #2
 8014f24:	4618      	mov	r0, r3
 8014f26:	370c      	adds	r7, #12
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	bd90      	pop	{r4, r7, pc}

08014f2c <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b082      	sub	sp, #8
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
 8014f34:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d006      	beq.n	8014f4a <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE11_M_allocateEj+0x1e>
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	6839      	ldr	r1, [r7, #0]
 8014f40:	4618      	mov	r0, r3
 8014f42:	f000 fa43 	bl	80153cc <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE8allocateERS2_j>
 8014f46:	4603      	mov	r3, r0
 8014f48:	e000      	b.n	8014f4c <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE11_M_allocateEj+0x20>
 8014f4a:	2300      	movs	r3, #0
      }
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	3708      	adds	r7, #8
 8014f50:	46bd      	mov	sp, r7
 8014f52:	bd80      	pop	{r7, pc}

08014f54 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8014f54:	b590      	push	{r4, r7, lr}
 8014f56:	b089      	sub	sp, #36	; 0x24
 8014f58:	af02      	add	r7, sp, #8
 8014f5a:	60f8      	str	r0, [r7, #12]
 8014f5c:	60b9      	str	r1, [r7, #8]
 8014f5e:	607a      	str	r2, [r7, #4]
 8014f60:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8014f62:	f88d 4000 	strb.w	r4, [sp]
 8014f66:	683b      	ldr	r3, [r7, #0]
 8014f68:	687a      	ldr	r2, [r7, #4]
 8014f6a:	68b9      	ldr	r1, [r7, #8]
 8014f6c:	68f8      	ldr	r0, [r7, #12]
 8014f6e:	f000 fa3c 	bl	80153ea <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8014f72:	4603      	mov	r3, r0
      }
 8014f74:	4618      	mov	r0, r3
 8014f76:	371c      	adds	r7, #28
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd90      	pop	{r4, r7, pc}

08014f7c <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b084      	sub	sp, #16
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	681a      	ldr	r2, [r3, #0]
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	009b      	lsls	r3, r3, #2
 8014f8e:	425b      	negs	r3, r3
 8014f90:	4413      	add	r3, r2
 8014f92:	60fb      	str	r3, [r7, #12]
 8014f94:	f107 020c 	add.w	r2, r7, #12
 8014f98:	f107 0308 	add.w	r3, r7, #8
 8014f9c:	4611      	mov	r1, r2
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7ed fc4b 	bl	800283a <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8014fa4:	68bb      	ldr	r3, [r7, #8]
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3710      	adds	r7, #16
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}

08014fae <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8014fae:	b590      	push	{r4, r7, lr}
 8014fb0:	b085      	sub	sp, #20
 8014fb2:	af00      	add	r7, sp, #0
 8014fb4:	60f8      	str	r0, [r7, #12]
 8014fb6:	60b9      	str	r1, [r7, #8]
 8014fb8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f7ff fb24 	bl	8014608 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	681c      	ldr	r4, [r3, #0]
 8014fc4:	68bb      	ldr	r3, [r7, #8]
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	2004      	movs	r0, #4
 8014fca:	f7ec f807 	bl	8000fdc <_ZnwjPv>
 8014fce:	4603      	mov	r3, r0
 8014fd0:	601c      	str	r4, [r3, #0]
 8014fd2:	bf00      	nop
 8014fd4:	3714      	adds	r7, #20
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd90      	pop	{r4, r7, pc}

08014fda <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8014fda:	b590      	push	{r4, r7, lr}
 8014fdc:	b087      	sub	sp, #28
 8014fde:	af00      	add	r7, sp, #0
 8014fe0:	60f8      	str	r0, [r7, #12]
 8014fe2:	60b9      	str	r1, [r7, #8]
 8014fe4:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8014fe6:	68f8      	ldr	r0, [r7, #12]
 8014fe8:	f000 fa11 	bl	801540e <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE8max_sizeEv>
 8014fec:	4604      	mov	r4, r0
 8014fee:	68f8      	ldr	r0, [r7, #12]
 8014ff0:	f7fe fe4f 	bl	8013c92 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	1ae2      	subs	r2, r4, r3
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	429a      	cmp	r2, r3
 8014ffc:	bf34      	ite	cc
 8014ffe:	2301      	movcc	r3, #1
 8015000:	2300      	movcs	r3, #0
 8015002:	b2db      	uxtb	r3, r3
 8015004:	2b00      	cmp	r3, #0
 8015006:	d002      	beq.n	801500e <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f004 fb64 	bl	80196d6 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801500e:	68f8      	ldr	r0, [r7, #12]
 8015010:	f7fe fe3f 	bl	8013c92 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>
 8015014:	4604      	mov	r4, r0
 8015016:	68f8      	ldr	r0, [r7, #12]
 8015018:	f7fe fe3b 	bl	8013c92 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>
 801501c:	4603      	mov	r3, r0
 801501e:	613b      	str	r3, [r7, #16]
 8015020:	f107 0208 	add.w	r2, r7, #8
 8015024:	f107 0310 	add.w	r3, r7, #16
 8015028:	4611      	mov	r1, r2
 801502a:	4618      	mov	r0, r3
 801502c:	f7f9 fd47 	bl	800eabe <_ZSt3maxIjERKT_S2_S2_>
 8015030:	4603      	mov	r3, r0
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	4423      	add	r3, r4
 8015036:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015038:	68f8      	ldr	r0, [r7, #12]
 801503a:	f7fe fe2a 	bl	8013c92 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>
 801503e:	4602      	mov	r2, r0
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	4293      	cmp	r3, r2
 8015044:	d306      	bcc.n	8015054 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8015046:	68f8      	ldr	r0, [r7, #12]
 8015048:	f000 f9e1 	bl	801540e <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE8max_sizeEv>
 801504c:	4602      	mov	r2, r0
 801504e:	697b      	ldr	r3, [r7, #20]
 8015050:	4293      	cmp	r3, r2
 8015052:	d904      	bls.n	801505e <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 8015054:	68f8      	ldr	r0, [r7, #12]
 8015056:	f000 f9da 	bl	801540e <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE8max_sizeEv>
 801505a:	4603      	mov	r3, r0
 801505c:	e000      	b.n	8015060 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 801505e:	697b      	ldr	r3, [r7, #20]
      }
 8015060:	4618      	mov	r0, r3
 8015062:	371c      	adds	r7, #28
 8015064:	46bd      	mov	sp, r7
 8015066:	bd90      	pop	{r4, r7, pc}

08015068 <_ZN9__gnu_cxxmiIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8015068:	b590      	push	{r4, r7, lr}
 801506a:	b083      	sub	sp, #12
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
 8015070:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f7ed fc4a 	bl	800290c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8015078:	4603      	mov	r3, r0
 801507a:	681c      	ldr	r4, [r3, #0]
 801507c:	6838      	ldr	r0, [r7, #0]
 801507e:	f7ed fc45 	bl	800290c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8015082:	4603      	mov	r3, r0
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	1ae3      	subs	r3, r4, r3
 8015088:	109b      	asrs	r3, r3, #2
 801508a:	4618      	mov	r0, r3
 801508c:	370c      	adds	r7, #12
 801508e:	46bd      	mov	sp, r7
 8015090:	bd90      	pop	{r4, r7, pc}

08015092 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8015092:	b580      	push	{r7, lr}
 8015094:	b082      	sub	sp, #8
 8015096:	af00      	add	r7, sp, #0
 8015098:	6078      	str	r0, [r7, #4]
 801509a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801509c:	683b      	ldr	r3, [r7, #0]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d006      	beq.n	80150b0 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE11_M_allocateEj+0x1e>
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	6839      	ldr	r1, [r7, #0]
 80150a6:	4618      	mov	r0, r3
 80150a8:	f000 f9c2 	bl	8015430 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE8allocateERS2_j>
 80150ac:	4603      	mov	r3, r0
 80150ae:	e000      	b.n	80150b2 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE11_M_allocateEj+0x20>
 80150b0:	2300      	movs	r3, #0
      }
 80150b2:	4618      	mov	r0, r3
 80150b4:	3708      	adds	r7, #8
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}

080150ba <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80150ba:	b590      	push	{r4, r7, lr}
 80150bc:	b089      	sub	sp, #36	; 0x24
 80150be:	af02      	add	r7, sp, #8
 80150c0:	60f8      	str	r0, [r7, #12]
 80150c2:	60b9      	str	r1, [r7, #8]
 80150c4:	607a      	str	r2, [r7, #4]
 80150c6:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80150c8:	f88d 4000 	strb.w	r4, [sp]
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	687a      	ldr	r2, [r7, #4]
 80150d0:	68b9      	ldr	r1, [r7, #8]
 80150d2:	68f8      	ldr	r0, [r7, #12]
 80150d4:	f000 f9bb 	bl	801544e <_ZNSt6vectorIP18Compare_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80150d8:	4603      	mov	r3, r0
      }
 80150da:	4618      	mov	r0, r3
 80150dc:	371c      	adds	r7, #28
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd90      	pop	{r4, r7, pc}

080150e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80150e2:	b580      	push	{r7, lr}
 80150e4:	b084      	sub	sp, #16
 80150e6:	af00      	add	r7, sp, #0
 80150e8:	6078      	str	r0, [r7, #4]
 80150ea:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	681a      	ldr	r2, [r3, #0]
 80150f0:	683b      	ldr	r3, [r7, #0]
 80150f2:	009b      	lsls	r3, r3, #2
 80150f4:	425b      	negs	r3, r3
 80150f6:	4413      	add	r3, r2
 80150f8:	60fb      	str	r3, [r7, #12]
 80150fa:	f107 020c 	add.w	r2, r7, #12
 80150fe:	f107 0308 	add.w	r3, r7, #8
 8015102:	4611      	mov	r1, r2
 8015104:	4618      	mov	r0, r3
 8015106:	f7ed fbf1 	bl	80028ec <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801510a:	68bb      	ldr	r3, [r7, #8]
 801510c:	4618      	mov	r0, r3
 801510e:	3710      	adds	r7, #16
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}

08015114 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8015114:	b590      	push	{r4, r7, lr}
 8015116:	b085      	sub	sp, #20
 8015118:	af00      	add	r7, sp, #0
 801511a:	60f8      	str	r0, [r7, #12]
 801511c:	60b9      	str	r1, [r7, #8]
 801511e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015120:	6878      	ldr	r0, [r7, #4]
 8015122:	f7ff fb26 	bl	8014772 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8015126:	4603      	mov	r3, r0
 8015128:	681c      	ldr	r4, [r3, #0]
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	4619      	mov	r1, r3
 801512e:	2004      	movs	r0, #4
 8015130:	f7eb ff54 	bl	8000fdc <_ZnwjPv>
 8015134:	4603      	mov	r3, r0
 8015136:	601c      	str	r4, [r3, #0]
 8015138:	bf00      	nop
 801513a:	3714      	adds	r7, #20
 801513c:	46bd      	mov	sp, r7
 801513e:	bd90      	pop	{r4, r7, pc}

08015140 <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8015140:	b590      	push	{r4, r7, lr}
 8015142:	b087      	sub	sp, #28
 8015144:	af00      	add	r7, sp, #0
 8015146:	60f8      	str	r0, [r7, #12]
 8015148:	60b9      	str	r1, [r7, #8]
 801514a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 801514c:	68f8      	ldr	r0, [r7, #12]
 801514e:	f000 f990 	bl	8015472 <_ZNKSt6vectorIP14And_expressionSaIS1_EE8max_sizeEv>
 8015152:	4604      	mov	r4, r0
 8015154:	68f8      	ldr	r0, [r7, #12]
 8015156:	f7f6 fce5 	bl	800bb24 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 801515a:	4603      	mov	r3, r0
 801515c:	1ae2      	subs	r2, r4, r3
 801515e:	68bb      	ldr	r3, [r7, #8]
 8015160:	429a      	cmp	r2, r3
 8015162:	bf34      	ite	cc
 8015164:	2301      	movcc	r3, #1
 8015166:	2300      	movcs	r3, #0
 8015168:	b2db      	uxtb	r3, r3
 801516a:	2b00      	cmp	r3, #0
 801516c:	d002      	beq.n	8015174 <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801516e:	6878      	ldr	r0, [r7, #4]
 8015170:	f004 fab1 	bl	80196d6 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8015174:	68f8      	ldr	r0, [r7, #12]
 8015176:	f7f6 fcd5 	bl	800bb24 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 801517a:	4604      	mov	r4, r0
 801517c:	68f8      	ldr	r0, [r7, #12]
 801517e:	f7f6 fcd1 	bl	800bb24 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 8015182:	4603      	mov	r3, r0
 8015184:	613b      	str	r3, [r7, #16]
 8015186:	f107 0208 	add.w	r2, r7, #8
 801518a:	f107 0310 	add.w	r3, r7, #16
 801518e:	4611      	mov	r1, r2
 8015190:	4618      	mov	r0, r3
 8015192:	f7f9 fc94 	bl	800eabe <_ZSt3maxIjERKT_S2_S2_>
 8015196:	4603      	mov	r3, r0
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	4423      	add	r3, r4
 801519c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801519e:	68f8      	ldr	r0, [r7, #12]
 80151a0:	f7f6 fcc0 	bl	800bb24 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 80151a4:	4602      	mov	r2, r0
 80151a6:	697b      	ldr	r3, [r7, #20]
 80151a8:	4293      	cmp	r3, r2
 80151aa:	d306      	bcc.n	80151ba <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80151ac:	68f8      	ldr	r0, [r7, #12]
 80151ae:	f000 f960 	bl	8015472 <_ZNKSt6vectorIP14And_expressionSaIS1_EE8max_sizeEv>
 80151b2:	4602      	mov	r2, r0
 80151b4:	697b      	ldr	r3, [r7, #20]
 80151b6:	4293      	cmp	r3, r2
 80151b8:	d904      	bls.n	80151c4 <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 80151ba:	68f8      	ldr	r0, [r7, #12]
 80151bc:	f000 f959 	bl	8015472 <_ZNKSt6vectorIP14And_expressionSaIS1_EE8max_sizeEv>
 80151c0:	4603      	mov	r3, r0
 80151c2:	e000      	b.n	80151c6 <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 80151c4:	697b      	ldr	r3, [r7, #20]
      }
 80151c6:	4618      	mov	r0, r3
 80151c8:	371c      	adds	r7, #28
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bd90      	pop	{r4, r7, pc}

080151ce <_ZN9__gnu_cxxmiIPP14And_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80151ce:	b590      	push	{r4, r7, lr}
 80151d0:	b083      	sub	sp, #12
 80151d2:	af00      	add	r7, sp, #0
 80151d4:	6078      	str	r0, [r7, #4]
 80151d6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80151d8:	6878      	ldr	r0, [r7, #4]
 80151da:	f7ed fbf0 	bl	80029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 80151de:	4603      	mov	r3, r0
 80151e0:	681c      	ldr	r4, [r3, #0]
 80151e2:	6838      	ldr	r0, [r7, #0]
 80151e4:	f7ed fbeb 	bl	80029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 80151e8:	4603      	mov	r3, r0
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	1ae3      	subs	r3, r4, r3
 80151ee:	109b      	asrs	r3, r3, #2
 80151f0:	4618      	mov	r0, r3
 80151f2:	370c      	adds	r7, #12
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd90      	pop	{r4, r7, pc}

080151f8 <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80151f8:	b590      	push	{r4, r7, lr}
 80151fa:	b089      	sub	sp, #36	; 0x24
 80151fc:	af02      	add	r7, sp, #8
 80151fe:	60f8      	str	r0, [r7, #12]
 8015200:	60b9      	str	r1, [r7, #8]
 8015202:	607a      	str	r2, [r7, #4]
 8015204:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8015206:	f88d 4000 	strb.w	r4, [sp]
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	68b9      	ldr	r1, [r7, #8]
 8015210:	68f8      	ldr	r0, [r7, #12]
 8015212:	f000 f93f 	bl	8015494 <_ZNSt6vectorIP14And_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8015216:	4603      	mov	r3, r0
      }
 8015218:	4618      	mov	r0, r3
 801521a:	371c      	adds	r7, #28
 801521c:	46bd      	mov	sp, r7
 801521e:	bd90      	pop	{r4, r7, pc}

08015220 <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8015220:	b580      	push	{r7, lr}
 8015222:	b084      	sub	sp, #16
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
 8015228:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	681a      	ldr	r2, [r3, #0]
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	009b      	lsls	r3, r3, #2
 8015232:	425b      	negs	r3, r3
 8015234:	4413      	add	r3, r2
 8015236:	60fb      	str	r3, [r7, #12]
 8015238:	f107 020c 	add.w	r2, r7, #12
 801523c:	f107 0308 	add.w	r3, r7, #8
 8015240:	4611      	mov	r1, r2
 8015242:	4618      	mov	r0, r3
 8015244:	f7ed fbab 	bl	800299e <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8015248:	68bb      	ldr	r3, [r7, #8]
 801524a:	4618      	mov	r0, r3
 801524c:	3710      	adds	r7, #16
 801524e:	46bd      	mov	sp, r7
 8015250:	bd80      	pop	{r7, pc}

08015252 <_ZSt11__addressofIP10ExpressionEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8015252:	b480      	push	{r7}
 8015254:	b083      	sub	sp, #12
 8015256:	af00      	add	r7, sp, #0
 8015258:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	4618      	mov	r0, r3
 801525e:	370c      	adds	r7, #12
 8015260:	46bd      	mov	sp, r7
 8015262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015266:	4770      	bx	lr

08015268 <_ZSt11__addressofIP17Primal_expressionEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8015268:	b480      	push	{r7}
 801526a:	b083      	sub	sp, #12
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	4618      	mov	r0, r3
 8015274:	370c      	adds	r7, #12
 8015276:	46bd      	mov	sp, r7
 8015278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527c:	4770      	bx	lr

0801527e <_ZNKSt6vectorI13mult_operatorSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801527e:	b580      	push	{r7, lr}
 8015280:	b082      	sub	sp, #8
 8015282:	af00      	add	r7, sp, #0
 8015284:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	4618      	mov	r0, r3
 801528a:	f7fe fbab 	bl	80139e4 <_ZNKSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 801528e:	4603      	mov	r3, r0
 8015290:	4618      	mov	r0, r3
 8015292:	f000 f911 	bl	80154b8 <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_max_sizeERKS1_>
 8015296:	4603      	mov	r3, r0
 8015298:	4618      	mov	r0, r3
 801529a:	3708      	adds	r7, #8
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}

080152a0 <_ZNSt16allocator_traitsISaI13mult_operatorEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
 80152a8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80152aa:	2200      	movs	r2, #0
 80152ac:	6839      	ldr	r1, [r7, #0]
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f000 f91c 	bl	80154ec <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE8allocateEjPKv>
 80152b4:	4603      	mov	r3, r0
 80152b6:	4618      	mov	r0, r3
 80152b8:	3708      	adds	r7, #8
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd80      	pop	{r7, pc}

080152be <_ZNSt6vectorI13mult_operatorSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80152be:	b580      	push	{r7, lr}
 80152c0:	b084      	sub	sp, #16
 80152c2:	af00      	add	r7, sp, #0
 80152c4:	60f8      	str	r0, [r7, #12]
 80152c6:	60b9      	str	r1, [r7, #8]
 80152c8:	607a      	str	r2, [r7, #4]
 80152ca:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	687a      	ldr	r2, [r7, #4]
 80152d0:	68b9      	ldr	r1, [r7, #8]
 80152d2:	68f8      	ldr	r0, [r7, #12]
 80152d4:	f000 f927 	bl	8015526 <_ZSt12__relocate_aIP13mult_operatorS1_SaIS0_EET0_T_S4_S3_RT1_>
 80152d8:	4603      	mov	r3, r0
      }
 80152da:	4618      	mov	r0, r3
 80152dc:	3710      	adds	r7, #16
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}

080152e2 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80152e2:	b580      	push	{r7, lr}
 80152e4:	b082      	sub	sp, #8
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	4618      	mov	r0, r3
 80152ee:	f7fe fb5f 	bl	80139b0 <_ZNKSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 80152f2:	4603      	mov	r3, r0
 80152f4:	4618      	mov	r0, r3
 80152f6:	f000 f933 	bl	8015560 <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_max_sizeERKS2_>
 80152fa:	4603      	mov	r3, r0
 80152fc:	4618      	mov	r0, r3
 80152fe:	3708      	adds	r7, #8
 8015300:	46bd      	mov	sp, r7
 8015302:	bd80      	pop	{r7, pc}

08015304 <_ZNSt16allocator_traitsISaIP16Power_expressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8015304:	b580      	push	{r7, lr}
 8015306:	b082      	sub	sp, #8
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
 801530c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801530e:	2200      	movs	r2, #0
 8015310:	6839      	ldr	r1, [r7, #0]
 8015312:	6878      	ldr	r0, [r7, #4]
 8015314:	f000 f93e 	bl	8015594 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE8allocateEjPKv>
 8015318:	4603      	mov	r3, r0
 801531a:	4618      	mov	r0, r3
 801531c:	3708      	adds	r7, #8
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}

08015322 <_ZNSt6vectorIP16Power_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8015322:	b580      	push	{r7, lr}
 8015324:	b084      	sub	sp, #16
 8015326:	af00      	add	r7, sp, #0
 8015328:	60f8      	str	r0, [r7, #12]
 801532a:	60b9      	str	r1, [r7, #8]
 801532c:	607a      	str	r2, [r7, #4]
 801532e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	687a      	ldr	r2, [r7, #4]
 8015334:	68b9      	ldr	r1, [r7, #8]
 8015336:	68f8      	ldr	r0, [r7, #12]
 8015338:	f000 f94b 	bl	80155d2 <_ZSt12__relocate_aIPP16Power_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 801533c:	4603      	mov	r3, r0
      }
 801533e:	4618      	mov	r0, r3
 8015340:	3710      	adds	r7, #16
 8015342:	46bd      	mov	sp, r7
 8015344:	bd80      	pop	{r7, pc}

08015346 <_ZNKSt6vectorI12sum_operatorSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8015346:	b580      	push	{r7, lr}
 8015348:	b082      	sub	sp, #8
 801534a:	af00      	add	r7, sp, #0
 801534c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	4618      	mov	r0, r3
 8015352:	f7fe fc36 	bl	8013bc2 <_ZNKSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 8015356:	4603      	mov	r3, r0
 8015358:	4618      	mov	r0, r3
 801535a:	f000 f957 	bl	801560c <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_max_sizeERKS1_>
 801535e:	4603      	mov	r3, r0
 8015360:	4618      	mov	r0, r3
 8015362:	3708      	adds	r7, #8
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}

08015368 <_ZNSt16allocator_traitsISaI12sum_operatorEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8015368:	b580      	push	{r7, lr}
 801536a:	b082      	sub	sp, #8
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
 8015370:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8015372:	2200      	movs	r2, #0
 8015374:	6839      	ldr	r1, [r7, #0]
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	f000 f962 	bl	8015640 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE8allocateEjPKv>
 801537c:	4603      	mov	r3, r0
 801537e:	4618      	mov	r0, r3
 8015380:	3708      	adds	r7, #8
 8015382:	46bd      	mov	sp, r7
 8015384:	bd80      	pop	{r7, pc}

08015386 <_ZNSt6vectorI12sum_operatorSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8015386:	b580      	push	{r7, lr}
 8015388:	b084      	sub	sp, #16
 801538a:	af00      	add	r7, sp, #0
 801538c:	60f8      	str	r0, [r7, #12]
 801538e:	60b9      	str	r1, [r7, #8]
 8015390:	607a      	str	r2, [r7, #4]
 8015392:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8015394:	683b      	ldr	r3, [r7, #0]
 8015396:	687a      	ldr	r2, [r7, #4]
 8015398:	68b9      	ldr	r1, [r7, #8]
 801539a:	68f8      	ldr	r0, [r7, #12]
 801539c:	f000 f96d 	bl	801567a <_ZSt12__relocate_aIP12sum_operatorS1_SaIS0_EET0_T_S4_S3_RT1_>
 80153a0:	4603      	mov	r3, r0
      }
 80153a2:	4618      	mov	r0, r3
 80153a4:	3710      	adds	r7, #16
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}

080153aa <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80153aa:	b580      	push	{r7, lr}
 80153ac:	b082      	sub	sp, #8
 80153ae:	af00      	add	r7, sp, #0
 80153b0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	4618      	mov	r0, r3
 80153b6:	f7fe fbea 	bl	8013b8e <_ZNKSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 80153ba:	4603      	mov	r3, r0
 80153bc:	4618      	mov	r0, r3
 80153be:	f000 f979 	bl	80156b4 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_max_sizeERKS2_>
 80153c2:	4603      	mov	r3, r0
 80153c4:	4618      	mov	r0, r3
 80153c6:	3708      	adds	r7, #8
 80153c8:	46bd      	mov	sp, r7
 80153ca:	bd80      	pop	{r7, pc}

080153cc <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b082      	sub	sp, #8
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
 80153d4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80153d6:	2200      	movs	r2, #0
 80153d8:	6839      	ldr	r1, [r7, #0]
 80153da:	6878      	ldr	r0, [r7, #4]
 80153dc:	f000 f984 	bl	80156e8 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE8allocateEjPKv>
 80153e0:	4603      	mov	r3, r0
 80153e2:	4618      	mov	r0, r3
 80153e4:	3708      	adds	r7, #8
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}

080153ea <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80153ea:	b580      	push	{r7, lr}
 80153ec:	b084      	sub	sp, #16
 80153ee:	af00      	add	r7, sp, #0
 80153f0:	60f8      	str	r0, [r7, #12]
 80153f2:	60b9      	str	r1, [r7, #8]
 80153f4:	607a      	str	r2, [r7, #4]
 80153f6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	687a      	ldr	r2, [r7, #4]
 80153fc:	68b9      	ldr	r1, [r7, #8]
 80153fe:	68f8      	ldr	r0, [r7, #12]
 8015400:	f000 f991 	bl	8015726 <_ZSt12__relocate_aIPP19Multiply_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 8015404:	4603      	mov	r3, r0
      }
 8015406:	4618      	mov	r0, r3
 8015408:	3710      	adds	r7, #16
 801540a:	46bd      	mov	sp, r7
 801540c:	bd80      	pop	{r7, pc}

0801540e <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801540e:	b580      	push	{r7, lr}
 8015410:	b082      	sub	sp, #8
 8015412:	af00      	add	r7, sp, #0
 8015414:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	4618      	mov	r0, r3
 801541a:	f7fe fc4a 	bl	8013cb2 <_ZNKSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 801541e:	4603      	mov	r3, r0
 8015420:	4618      	mov	r0, r3
 8015422:	f000 f99d 	bl	8015760 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_max_sizeERKS2_>
 8015426:	4603      	mov	r3, r0
 8015428:	4618      	mov	r0, r3
 801542a:	3708      	adds	r7, #8
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}

08015430 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
 8015438:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801543a:	2200      	movs	r2, #0
 801543c:	6839      	ldr	r1, [r7, #0]
 801543e:	6878      	ldr	r0, [r7, #4]
 8015440:	f000 f9a8 	bl	8015794 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE8allocateEjPKv>
 8015444:	4603      	mov	r3, r0
 8015446:	4618      	mov	r0, r3
 8015448:	3708      	adds	r7, #8
 801544a:	46bd      	mov	sp, r7
 801544c:	bd80      	pop	{r7, pc}

0801544e <_ZNSt6vectorIP18Compare_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801544e:	b580      	push	{r7, lr}
 8015450:	b084      	sub	sp, #16
 8015452:	af00      	add	r7, sp, #0
 8015454:	60f8      	str	r0, [r7, #12]
 8015456:	60b9      	str	r1, [r7, #8]
 8015458:	607a      	str	r2, [r7, #4]
 801545a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801545c:	683b      	ldr	r3, [r7, #0]
 801545e:	687a      	ldr	r2, [r7, #4]
 8015460:	68b9      	ldr	r1, [r7, #8]
 8015462:	68f8      	ldr	r0, [r7, #12]
 8015464:	f000 f9b5 	bl	80157d2 <_ZSt12__relocate_aIPP18Compare_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 8015468:	4603      	mov	r3, r0
      }
 801546a:	4618      	mov	r0, r3
 801546c:	3710      	adds	r7, #16
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}

08015472 <_ZNKSt6vectorIP14And_expressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8015472:	b580      	push	{r7, lr}
 8015474:	b082      	sub	sp, #8
 8015476:	af00      	add	r7, sp, #0
 8015478:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	4618      	mov	r0, r3
 801547e:	f7f6 fb1e 	bl	800babe <_ZNKSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8015482:	4603      	mov	r3, r0
 8015484:	4618      	mov	r0, r3
 8015486:	f000 f9c1 	bl	801580c <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_max_sizeERKS2_>
 801548a:	4603      	mov	r3, r0
 801548c:	4618      	mov	r0, r3
 801548e:	3708      	adds	r7, #8
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}

08015494 <_ZNSt6vectorIP14And_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8015494:	b580      	push	{r7, lr}
 8015496:	b084      	sub	sp, #16
 8015498:	af00      	add	r7, sp, #0
 801549a:	60f8      	str	r0, [r7, #12]
 801549c:	60b9      	str	r1, [r7, #8]
 801549e:	607a      	str	r2, [r7, #4]
 80154a0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80154a2:	683b      	ldr	r3, [r7, #0]
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	68b9      	ldr	r1, [r7, #8]
 80154a8:	68f8      	ldr	r0, [r7, #12]
 80154aa:	f000 f9c9 	bl	8015840 <_ZSt12__relocate_aIPP14And_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 80154ae:	4603      	mov	r3, r0
      }
 80154b0:	4618      	mov	r0, r3
 80154b2:	3710      	adds	r7, #16
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}

080154b8 <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b084      	sub	sp, #16
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80154c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80154c4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f000 f9d7 	bl	801587a <_ZNSt16allocator_traitsISaI13mult_operatorEE8max_sizeERKS1_>
 80154cc:	4603      	mov	r3, r0
 80154ce:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80154d0:	f107 0208 	add.w	r2, r7, #8
 80154d4:	f107 030c 	add.w	r3, r7, #12
 80154d8:	4611      	mov	r1, r2
 80154da:	4618      	mov	r0, r3
 80154dc:	f7fa feb3 	bl	8010246 <_ZSt3minIjERKT_S2_S2_>
 80154e0:	4603      	mov	r3, r0
 80154e2:	681b      	ldr	r3, [r3, #0]
      }
 80154e4:	4618      	mov	r0, r3
 80154e6:	3710      	adds	r7, #16
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}

080154ec <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b084      	sub	sp, #16
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	60f8      	str	r0, [r7, #12]
 80154f4:	60b9      	str	r1, [r7, #8]
 80154f6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80154f8:	68f8      	ldr	r0, [r7, #12]
 80154fa:	f000 f9ca 	bl	8015892 <_ZNK9__gnu_cxx13new_allocatorI13mult_operatorE8max_sizeEv>
 80154fe:	4602      	mov	r2, r0
 8015500:	68bb      	ldr	r3, [r7, #8]
 8015502:	4293      	cmp	r3, r2
 8015504:	bf8c      	ite	hi
 8015506:	2301      	movhi	r3, #1
 8015508:	2300      	movls	r3, #0
 801550a:	b2db      	uxtb	r3, r3
 801550c:	2b00      	cmp	r3, #0
 801550e:	d001      	beq.n	8015514 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8015510:	f004 f8d8 	bl	80196c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015514:	68b8      	ldr	r0, [r7, #8]
 8015516:	f004 f810 	bl	801953a <_Znwj>
 801551a:	4603      	mov	r3, r0
 801551c:	bf00      	nop
      }
 801551e:	4618      	mov	r0, r3
 8015520:	3710      	adds	r7, #16
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}

08015526 <_ZSt12__relocate_aIP13mult_operatorS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8015526:	b5b0      	push	{r4, r5, r7, lr}
 8015528:	b084      	sub	sp, #16
 801552a:	af00      	add	r7, sp, #0
 801552c:	60f8      	str	r0, [r7, #12]
 801552e:	60b9      	str	r1, [r7, #8]
 8015530:	607a      	str	r2, [r7, #4]
 8015532:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8015534:	68f8      	ldr	r0, [r7, #12]
 8015536:	f000 f9b8 	bl	80158aa <_ZSt12__niter_baseIP13mult_operatorET_S2_>
 801553a:	4604      	mov	r4, r0
 801553c:	68b8      	ldr	r0, [r7, #8]
 801553e:	f000 f9b4 	bl	80158aa <_ZSt12__niter_baseIP13mult_operatorET_S2_>
 8015542:	4605      	mov	r5, r0
 8015544:	6878      	ldr	r0, [r7, #4]
 8015546:	f000 f9b0 	bl	80158aa <_ZSt12__niter_baseIP13mult_operatorET_S2_>
 801554a:	4602      	mov	r2, r0
 801554c:	683b      	ldr	r3, [r7, #0]
 801554e:	4629      	mov	r1, r5
 8015550:	4620      	mov	r0, r4
 8015552:	f000 f9b5 	bl	80158c0 <_ZSt14__relocate_a_1I13mult_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8015556:	4603      	mov	r3, r0
    }
 8015558:	4618      	mov	r0, r3
 801555a:	3710      	adds	r7, #16
 801555c:	46bd      	mov	sp, r7
 801555e:	bdb0      	pop	{r4, r5, r7, pc}

08015560 <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8015560:	b580      	push	{r7, lr}
 8015562:	b084      	sub	sp, #16
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8015568:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801556c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f000 f9c1 	bl	80158f6 <_ZNSt16allocator_traitsISaIP16Power_expressionEE8max_sizeERKS2_>
 8015574:	4603      	mov	r3, r0
 8015576:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8015578:	f107 0208 	add.w	r2, r7, #8
 801557c:	f107 030c 	add.w	r3, r7, #12
 8015580:	4611      	mov	r1, r2
 8015582:	4618      	mov	r0, r3
 8015584:	f7fa fe5f 	bl	8010246 <_ZSt3minIjERKT_S2_S2_>
 8015588:	4603      	mov	r3, r0
 801558a:	681b      	ldr	r3, [r3, #0]
      }
 801558c:	4618      	mov	r0, r3
 801558e:	3710      	adds	r7, #16
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}

08015594 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015594:	b580      	push	{r7, lr}
 8015596:	b084      	sub	sp, #16
 8015598:	af00      	add	r7, sp, #0
 801559a:	60f8      	str	r0, [r7, #12]
 801559c:	60b9      	str	r1, [r7, #8]
 801559e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80155a0:	68f8      	ldr	r0, [r7, #12]
 80155a2:	f000 f9b4 	bl	801590e <_ZNK9__gnu_cxx13new_allocatorIP16Power_expressionE8max_sizeEv>
 80155a6:	4602      	mov	r2, r0
 80155a8:	68bb      	ldr	r3, [r7, #8]
 80155aa:	4293      	cmp	r3, r2
 80155ac:	bf8c      	ite	hi
 80155ae:	2301      	movhi	r3, #1
 80155b0:	2300      	movls	r3, #0
 80155b2:	b2db      	uxtb	r3, r3
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d001      	beq.n	80155bc <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80155b8:	f004 f884 	bl	80196c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80155bc:	68bb      	ldr	r3, [r7, #8]
 80155be:	009b      	lsls	r3, r3, #2
 80155c0:	4618      	mov	r0, r3
 80155c2:	f003 ffba 	bl	801953a <_Znwj>
 80155c6:	4603      	mov	r3, r0
 80155c8:	bf00      	nop
      }
 80155ca:	4618      	mov	r0, r3
 80155cc:	3710      	adds	r7, #16
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd80      	pop	{r7, pc}

080155d2 <_ZSt12__relocate_aIPP16Power_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80155d2:	b5b0      	push	{r4, r5, r7, lr}
 80155d4:	b084      	sub	sp, #16
 80155d6:	af00      	add	r7, sp, #0
 80155d8:	60f8      	str	r0, [r7, #12]
 80155da:	60b9      	str	r1, [r7, #8]
 80155dc:	607a      	str	r2, [r7, #4]
 80155de:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80155e0:	68f8      	ldr	r0, [r7, #12]
 80155e2:	f000 f9a0 	bl	8015926 <_ZSt12__niter_baseIPP16Power_expressionET_S3_>
 80155e6:	4604      	mov	r4, r0
 80155e8:	68b8      	ldr	r0, [r7, #8]
 80155ea:	f000 f99c 	bl	8015926 <_ZSt12__niter_baseIPP16Power_expressionET_S3_>
 80155ee:	4605      	mov	r5, r0
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f000 f998 	bl	8015926 <_ZSt12__niter_baseIPP16Power_expressionET_S3_>
 80155f6:	4602      	mov	r2, r0
 80155f8:	683b      	ldr	r3, [r7, #0]
 80155fa:	4629      	mov	r1, r5
 80155fc:	4620      	mov	r0, r4
 80155fe:	f000 f99d 	bl	801593c <_ZSt14__relocate_a_1IP16Power_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8015602:	4603      	mov	r3, r0
    }
 8015604:	4618      	mov	r0, r3
 8015606:	3710      	adds	r7, #16
 8015608:	46bd      	mov	sp, r7
 801560a:	bdb0      	pop	{r4, r5, r7, pc}

0801560c <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801560c:	b580      	push	{r7, lr}
 801560e:	b084      	sub	sp, #16
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8015614:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015618:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f000 f9ac 	bl	8015978 <_ZNSt16allocator_traitsISaI12sum_operatorEE8max_sizeERKS1_>
 8015620:	4603      	mov	r3, r0
 8015622:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8015624:	f107 0208 	add.w	r2, r7, #8
 8015628:	f107 030c 	add.w	r3, r7, #12
 801562c:	4611      	mov	r1, r2
 801562e:	4618      	mov	r0, r3
 8015630:	f7fa fe09 	bl	8010246 <_ZSt3minIjERKT_S2_S2_>
 8015634:	4603      	mov	r3, r0
 8015636:	681b      	ldr	r3, [r3, #0]
      }
 8015638:	4618      	mov	r0, r3
 801563a:	3710      	adds	r7, #16
 801563c:	46bd      	mov	sp, r7
 801563e:	bd80      	pop	{r7, pc}

08015640 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015640:	b580      	push	{r7, lr}
 8015642:	b084      	sub	sp, #16
 8015644:	af00      	add	r7, sp, #0
 8015646:	60f8      	str	r0, [r7, #12]
 8015648:	60b9      	str	r1, [r7, #8]
 801564a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 801564c:	68f8      	ldr	r0, [r7, #12]
 801564e:	f000 f99f 	bl	8015990 <_ZNK9__gnu_cxx13new_allocatorI12sum_operatorE8max_sizeEv>
 8015652:	4602      	mov	r2, r0
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	4293      	cmp	r3, r2
 8015658:	bf8c      	ite	hi
 801565a:	2301      	movhi	r3, #1
 801565c:	2300      	movls	r3, #0
 801565e:	b2db      	uxtb	r3, r3
 8015660:	2b00      	cmp	r3, #0
 8015662:	d001      	beq.n	8015668 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8015664:	f004 f82e 	bl	80196c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015668:	68b8      	ldr	r0, [r7, #8]
 801566a:	f003 ff66 	bl	801953a <_Znwj>
 801566e:	4603      	mov	r3, r0
 8015670:	bf00      	nop
      }
 8015672:	4618      	mov	r0, r3
 8015674:	3710      	adds	r7, #16
 8015676:	46bd      	mov	sp, r7
 8015678:	bd80      	pop	{r7, pc}

0801567a <_ZSt12__relocate_aIP12sum_operatorS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 801567a:	b5b0      	push	{r4, r5, r7, lr}
 801567c:	b084      	sub	sp, #16
 801567e:	af00      	add	r7, sp, #0
 8015680:	60f8      	str	r0, [r7, #12]
 8015682:	60b9      	str	r1, [r7, #8]
 8015684:	607a      	str	r2, [r7, #4]
 8015686:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8015688:	68f8      	ldr	r0, [r7, #12]
 801568a:	f000 f98d 	bl	80159a8 <_ZSt12__niter_baseIP12sum_operatorET_S2_>
 801568e:	4604      	mov	r4, r0
 8015690:	68b8      	ldr	r0, [r7, #8]
 8015692:	f000 f989 	bl	80159a8 <_ZSt12__niter_baseIP12sum_operatorET_S2_>
 8015696:	4605      	mov	r5, r0
 8015698:	6878      	ldr	r0, [r7, #4]
 801569a:	f000 f985 	bl	80159a8 <_ZSt12__niter_baseIP12sum_operatorET_S2_>
 801569e:	4602      	mov	r2, r0
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	4629      	mov	r1, r5
 80156a4:	4620      	mov	r0, r4
 80156a6:	f000 f98a 	bl	80159be <_ZSt14__relocate_a_1I12sum_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 80156aa:	4603      	mov	r3, r0
    }
 80156ac:	4618      	mov	r0, r3
 80156ae:	3710      	adds	r7, #16
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bdb0      	pop	{r4, r5, r7, pc}

080156b4 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b084      	sub	sp, #16
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80156bc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80156c0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80156c2:	6878      	ldr	r0, [r7, #4]
 80156c4:	f000 f996 	bl	80159f4 <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE8max_sizeERKS2_>
 80156c8:	4603      	mov	r3, r0
 80156ca:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80156cc:	f107 0208 	add.w	r2, r7, #8
 80156d0:	f107 030c 	add.w	r3, r7, #12
 80156d4:	4611      	mov	r1, r2
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7fa fdb5 	bl	8010246 <_ZSt3minIjERKT_S2_S2_>
 80156dc:	4603      	mov	r3, r0
 80156de:	681b      	ldr	r3, [r3, #0]
      }
 80156e0:	4618      	mov	r0, r3
 80156e2:	3710      	adds	r7, #16
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}

080156e8 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b084      	sub	sp, #16
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	60f8      	str	r0, [r7, #12]
 80156f0:	60b9      	str	r1, [r7, #8]
 80156f2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80156f4:	68f8      	ldr	r0, [r7, #12]
 80156f6:	f000 f989 	bl	8015a0c <_ZNK9__gnu_cxx13new_allocatorIP19Multiply_expressionE8max_sizeEv>
 80156fa:	4602      	mov	r2, r0
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	4293      	cmp	r3, r2
 8015700:	bf8c      	ite	hi
 8015702:	2301      	movhi	r3, #1
 8015704:	2300      	movls	r3, #0
 8015706:	b2db      	uxtb	r3, r3
 8015708:	2b00      	cmp	r3, #0
 801570a:	d001      	beq.n	8015710 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801570c:	f003 ffda 	bl	80196c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015710:	68bb      	ldr	r3, [r7, #8]
 8015712:	009b      	lsls	r3, r3, #2
 8015714:	4618      	mov	r0, r3
 8015716:	f003 ff10 	bl	801953a <_Znwj>
 801571a:	4603      	mov	r3, r0
 801571c:	bf00      	nop
      }
 801571e:	4618      	mov	r0, r3
 8015720:	3710      	adds	r7, #16
 8015722:	46bd      	mov	sp, r7
 8015724:	bd80      	pop	{r7, pc}

08015726 <_ZSt12__relocate_aIPP19Multiply_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8015726:	b5b0      	push	{r4, r5, r7, lr}
 8015728:	b084      	sub	sp, #16
 801572a:	af00      	add	r7, sp, #0
 801572c:	60f8      	str	r0, [r7, #12]
 801572e:	60b9      	str	r1, [r7, #8]
 8015730:	607a      	str	r2, [r7, #4]
 8015732:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8015734:	68f8      	ldr	r0, [r7, #12]
 8015736:	f000 f975 	bl	8015a24 <_ZSt12__niter_baseIPP19Multiply_expressionET_S3_>
 801573a:	4604      	mov	r4, r0
 801573c:	68b8      	ldr	r0, [r7, #8]
 801573e:	f000 f971 	bl	8015a24 <_ZSt12__niter_baseIPP19Multiply_expressionET_S3_>
 8015742:	4605      	mov	r5, r0
 8015744:	6878      	ldr	r0, [r7, #4]
 8015746:	f000 f96d 	bl	8015a24 <_ZSt12__niter_baseIPP19Multiply_expressionET_S3_>
 801574a:	4602      	mov	r2, r0
 801574c:	683b      	ldr	r3, [r7, #0]
 801574e:	4629      	mov	r1, r5
 8015750:	4620      	mov	r0, r4
 8015752:	f000 f972 	bl	8015a3a <_ZSt14__relocate_a_1IP19Multiply_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8015756:	4603      	mov	r3, r0
    }
 8015758:	4618      	mov	r0, r3
 801575a:	3710      	adds	r7, #16
 801575c:	46bd      	mov	sp, r7
 801575e:	bdb0      	pop	{r4, r5, r7, pc}

08015760 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8015760:	b580      	push	{r7, lr}
 8015762:	b084      	sub	sp, #16
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8015768:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801576c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f000 f981 	bl	8015a76 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE8max_sizeERKS2_>
 8015774:	4603      	mov	r3, r0
 8015776:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8015778:	f107 0208 	add.w	r2, r7, #8
 801577c:	f107 030c 	add.w	r3, r7, #12
 8015780:	4611      	mov	r1, r2
 8015782:	4618      	mov	r0, r3
 8015784:	f7fa fd5f 	bl	8010246 <_ZSt3minIjERKT_S2_S2_>
 8015788:	4603      	mov	r3, r0
 801578a:	681b      	ldr	r3, [r3, #0]
      }
 801578c:	4618      	mov	r0, r3
 801578e:	3710      	adds	r7, #16
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}

08015794 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015794:	b580      	push	{r7, lr}
 8015796:	b084      	sub	sp, #16
 8015798:	af00      	add	r7, sp, #0
 801579a:	60f8      	str	r0, [r7, #12]
 801579c:	60b9      	str	r1, [r7, #8]
 801579e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80157a0:	68f8      	ldr	r0, [r7, #12]
 80157a2:	f000 f974 	bl	8015a8e <_ZNK9__gnu_cxx13new_allocatorIP18Compare_expressionE8max_sizeEv>
 80157a6:	4602      	mov	r2, r0
 80157a8:	68bb      	ldr	r3, [r7, #8]
 80157aa:	4293      	cmp	r3, r2
 80157ac:	bf8c      	ite	hi
 80157ae:	2301      	movhi	r3, #1
 80157b0:	2300      	movls	r3, #0
 80157b2:	b2db      	uxtb	r3, r3
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d001      	beq.n	80157bc <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80157b8:	f003 ff84 	bl	80196c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80157bc:	68bb      	ldr	r3, [r7, #8]
 80157be:	009b      	lsls	r3, r3, #2
 80157c0:	4618      	mov	r0, r3
 80157c2:	f003 feba 	bl	801953a <_Znwj>
 80157c6:	4603      	mov	r3, r0
 80157c8:	bf00      	nop
      }
 80157ca:	4618      	mov	r0, r3
 80157cc:	3710      	adds	r7, #16
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}

080157d2 <_ZSt12__relocate_aIPP18Compare_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80157d2:	b5b0      	push	{r4, r5, r7, lr}
 80157d4:	b084      	sub	sp, #16
 80157d6:	af00      	add	r7, sp, #0
 80157d8:	60f8      	str	r0, [r7, #12]
 80157da:	60b9      	str	r1, [r7, #8]
 80157dc:	607a      	str	r2, [r7, #4]
 80157de:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80157e0:	68f8      	ldr	r0, [r7, #12]
 80157e2:	f000 f960 	bl	8015aa6 <_ZSt12__niter_baseIPP18Compare_expressionET_S3_>
 80157e6:	4604      	mov	r4, r0
 80157e8:	68b8      	ldr	r0, [r7, #8]
 80157ea:	f000 f95c 	bl	8015aa6 <_ZSt12__niter_baseIPP18Compare_expressionET_S3_>
 80157ee:	4605      	mov	r5, r0
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f000 f958 	bl	8015aa6 <_ZSt12__niter_baseIPP18Compare_expressionET_S3_>
 80157f6:	4602      	mov	r2, r0
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	4629      	mov	r1, r5
 80157fc:	4620      	mov	r0, r4
 80157fe:	f000 f95d 	bl	8015abc <_ZSt14__relocate_a_1IP18Compare_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8015802:	4603      	mov	r3, r0
    }
 8015804:	4618      	mov	r0, r3
 8015806:	3710      	adds	r7, #16
 8015808:	46bd      	mov	sp, r7
 801580a:	bdb0      	pop	{r4, r5, r7, pc}

0801580c <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801580c:	b580      	push	{r7, lr}
 801580e:	b084      	sub	sp, #16
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8015814:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8015818:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f000 f96c 	bl	8015af8 <_ZNSt16allocator_traitsISaIP14And_expressionEE8max_sizeERKS2_>
 8015820:	4603      	mov	r3, r0
 8015822:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8015824:	f107 0208 	add.w	r2, r7, #8
 8015828:	f107 030c 	add.w	r3, r7, #12
 801582c:	4611      	mov	r1, r2
 801582e:	4618      	mov	r0, r3
 8015830:	f7fa fd09 	bl	8010246 <_ZSt3minIjERKT_S2_S2_>
 8015834:	4603      	mov	r3, r0
 8015836:	681b      	ldr	r3, [r3, #0]
      }
 8015838:	4618      	mov	r0, r3
 801583a:	3710      	adds	r7, #16
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}

08015840 <_ZSt12__relocate_aIPP14And_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8015840:	b5b0      	push	{r4, r5, r7, lr}
 8015842:	b084      	sub	sp, #16
 8015844:	af00      	add	r7, sp, #0
 8015846:	60f8      	str	r0, [r7, #12]
 8015848:	60b9      	str	r1, [r7, #8]
 801584a:	607a      	str	r2, [r7, #4]
 801584c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 801584e:	68f8      	ldr	r0, [r7, #12]
 8015850:	f7f9 f817 	bl	800e882 <_ZSt12__niter_baseIPP14And_expressionET_S3_>
 8015854:	4604      	mov	r4, r0
 8015856:	68b8      	ldr	r0, [r7, #8]
 8015858:	f7f9 f813 	bl	800e882 <_ZSt12__niter_baseIPP14And_expressionET_S3_>
 801585c:	4605      	mov	r5, r0
 801585e:	6878      	ldr	r0, [r7, #4]
 8015860:	f7f9 f80f 	bl	800e882 <_ZSt12__niter_baseIPP14And_expressionET_S3_>
 8015864:	4602      	mov	r2, r0
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	4629      	mov	r1, r5
 801586a:	4620      	mov	r0, r4
 801586c:	f000 f950 	bl	8015b10 <_ZSt14__relocate_a_1IP14And_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8015870:	4603      	mov	r3, r0
    }
 8015872:	4618      	mov	r0, r3
 8015874:	3710      	adds	r7, #16
 8015876:	46bd      	mov	sp, r7
 8015878:	bdb0      	pop	{r4, r5, r7, pc}

0801587a <_ZNSt16allocator_traitsISaI13mult_operatorEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 801587a:	b580      	push	{r7, lr}
 801587c:	b082      	sub	sp, #8
 801587e:	af00      	add	r7, sp, #0
 8015880:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8015882:	6878      	ldr	r0, [r7, #4]
 8015884:	f000 f805 	bl	8015892 <_ZNK9__gnu_cxx13new_allocatorI13mult_operatorE8max_sizeEv>
 8015888:	4603      	mov	r3, r0
 801588a:	4618      	mov	r0, r3
 801588c:	3708      	adds	r7, #8
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}

08015892 <_ZNK9__gnu_cxx13new_allocatorI13mult_operatorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8015892:	b480      	push	{r7}
 8015894:	b083      	sub	sp, #12
 8015896:	af00      	add	r7, sp, #0
 8015898:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801589a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 801589e:	4618      	mov	r0, r3
 80158a0:	370c      	adds	r7, #12
 80158a2:	46bd      	mov	sp, r7
 80158a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a8:	4770      	bx	lr

080158aa <_ZSt12__niter_baseIP13mult_operatorET_S2_>:
    __niter_base(_Iterator __it)
 80158aa:	b480      	push	{r7}
 80158ac:	b083      	sub	sp, #12
 80158ae:	af00      	add	r7, sp, #0
 80158b0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	4618      	mov	r0, r3
 80158b6:	370c      	adds	r7, #12
 80158b8:	46bd      	mov	sp, r7
 80158ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158be:	4770      	bx	lr

080158c0 <_ZSt14__relocate_a_1I13mult_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b086      	sub	sp, #24
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	60f8      	str	r0, [r7, #12]
 80158c8:	60b9      	str	r1, [r7, #8]
 80158ca:	607a      	str	r2, [r7, #4]
 80158cc:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80158ce:	68ba      	ldr	r2, [r7, #8]
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	1ad3      	subs	r3, r2, r3
 80158d4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80158d6:	697b      	ldr	r3, [r7, #20]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	dd05      	ble.n	80158e8 <_ZSt14__relocate_a_1I13mult_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80158dc:	697b      	ldr	r3, [r7, #20]
 80158de:	461a      	mov	r2, r3
 80158e0:	68f9      	ldr	r1, [r7, #12]
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f004 f9d6 	bl	8019c94 <memmove>
      return __result + __count;
 80158e8:	697b      	ldr	r3, [r7, #20]
 80158ea:	687a      	ldr	r2, [r7, #4]
 80158ec:	4413      	add	r3, r2
    }
 80158ee:	4618      	mov	r0, r3
 80158f0:	3718      	adds	r7, #24
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bd80      	pop	{r7, pc}

080158f6 <_ZNSt16allocator_traitsISaIP16Power_expressionEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 80158f6:	b580      	push	{r7, lr}
 80158f8:	b082      	sub	sp, #8
 80158fa:	af00      	add	r7, sp, #0
 80158fc:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80158fe:	6878      	ldr	r0, [r7, #4]
 8015900:	f000 f805 	bl	801590e <_ZNK9__gnu_cxx13new_allocatorIP16Power_expressionE8max_sizeEv>
 8015904:	4603      	mov	r3, r0
 8015906:	4618      	mov	r0, r3
 8015908:	3708      	adds	r7, #8
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}

0801590e <_ZNK9__gnu_cxx13new_allocatorIP16Power_expressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801590e:	b480      	push	{r7}
 8015910:	b083      	sub	sp, #12
 8015912:	af00      	add	r7, sp, #0
 8015914:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8015916:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 801591a:	4618      	mov	r0, r3
 801591c:	370c      	adds	r7, #12
 801591e:	46bd      	mov	sp, r7
 8015920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015924:	4770      	bx	lr

08015926 <_ZSt12__niter_baseIPP16Power_expressionET_S3_>:
    __niter_base(_Iterator __it)
 8015926:	b480      	push	{r7}
 8015928:	b083      	sub	sp, #12
 801592a:	af00      	add	r7, sp, #0
 801592c:	6078      	str	r0, [r7, #4]
    { return __it; }
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	4618      	mov	r0, r3
 8015932:	370c      	adds	r7, #12
 8015934:	46bd      	mov	sp, r7
 8015936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593a:	4770      	bx	lr

0801593c <_ZSt14__relocate_a_1IP16Power_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 801593c:	b580      	push	{r7, lr}
 801593e:	b086      	sub	sp, #24
 8015940:	af00      	add	r7, sp, #0
 8015942:	60f8      	str	r0, [r7, #12]
 8015944:	60b9      	str	r1, [r7, #8]
 8015946:	607a      	str	r2, [r7, #4]
 8015948:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801594a:	68ba      	ldr	r2, [r7, #8]
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	1ad3      	subs	r3, r2, r3
 8015950:	109b      	asrs	r3, r3, #2
 8015952:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	2b00      	cmp	r3, #0
 8015958:	dd06      	ble.n	8015968 <_ZSt14__relocate_a_1IP16Power_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	009b      	lsls	r3, r3, #2
 801595e:	461a      	mov	r2, r3
 8015960:	68f9      	ldr	r1, [r7, #12]
 8015962:	6878      	ldr	r0, [r7, #4]
 8015964:	f004 f996 	bl	8019c94 <memmove>
      return __result + __count;
 8015968:	697b      	ldr	r3, [r7, #20]
 801596a:	009b      	lsls	r3, r3, #2
 801596c:	687a      	ldr	r2, [r7, #4]
 801596e:	4413      	add	r3, r2
    }
 8015970:	4618      	mov	r0, r3
 8015972:	3718      	adds	r7, #24
 8015974:	46bd      	mov	sp, r7
 8015976:	bd80      	pop	{r7, pc}

08015978 <_ZNSt16allocator_traitsISaI12sum_operatorEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 8015978:	b580      	push	{r7, lr}
 801597a:	b082      	sub	sp, #8
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8015980:	6878      	ldr	r0, [r7, #4]
 8015982:	f000 f805 	bl	8015990 <_ZNK9__gnu_cxx13new_allocatorI12sum_operatorE8max_sizeEv>
 8015986:	4603      	mov	r3, r0
 8015988:	4618      	mov	r0, r3
 801598a:	3708      	adds	r7, #8
 801598c:	46bd      	mov	sp, r7
 801598e:	bd80      	pop	{r7, pc}

08015990 <_ZNK9__gnu_cxx13new_allocatorI12sum_operatorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8015990:	b480      	push	{r7}
 8015992:	b083      	sub	sp, #12
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8015998:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 801599c:	4618      	mov	r0, r3
 801599e:	370c      	adds	r7, #12
 80159a0:	46bd      	mov	sp, r7
 80159a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a6:	4770      	bx	lr

080159a8 <_ZSt12__niter_baseIP12sum_operatorET_S2_>:
    __niter_base(_Iterator __it)
 80159a8:	b480      	push	{r7}
 80159aa:	b083      	sub	sp, #12
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
    { return __it; }
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	4618      	mov	r0, r3
 80159b4:	370c      	adds	r7, #12
 80159b6:	46bd      	mov	sp, r7
 80159b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159bc:	4770      	bx	lr

080159be <_ZSt14__relocate_a_1I12sum_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80159be:	b580      	push	{r7, lr}
 80159c0:	b086      	sub	sp, #24
 80159c2:	af00      	add	r7, sp, #0
 80159c4:	60f8      	str	r0, [r7, #12]
 80159c6:	60b9      	str	r1, [r7, #8]
 80159c8:	607a      	str	r2, [r7, #4]
 80159ca:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80159cc:	68ba      	ldr	r2, [r7, #8]
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	1ad3      	subs	r3, r2, r3
 80159d2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80159d4:	697b      	ldr	r3, [r7, #20]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	dd05      	ble.n	80159e6 <_ZSt14__relocate_a_1I12sum_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80159da:	697b      	ldr	r3, [r7, #20]
 80159dc:	461a      	mov	r2, r3
 80159de:	68f9      	ldr	r1, [r7, #12]
 80159e0:	6878      	ldr	r0, [r7, #4]
 80159e2:	f004 f957 	bl	8019c94 <memmove>
      return __result + __count;
 80159e6:	697b      	ldr	r3, [r7, #20]
 80159e8:	687a      	ldr	r2, [r7, #4]
 80159ea:	4413      	add	r3, r2
    }
 80159ec:	4618      	mov	r0, r3
 80159ee:	3718      	adds	r7, #24
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd80      	pop	{r7, pc}

080159f4 <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b082      	sub	sp, #8
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80159fc:	6878      	ldr	r0, [r7, #4]
 80159fe:	f000 f805 	bl	8015a0c <_ZNK9__gnu_cxx13new_allocatorIP19Multiply_expressionE8max_sizeEv>
 8015a02:	4603      	mov	r3, r0
 8015a04:	4618      	mov	r0, r3
 8015a06:	3708      	adds	r7, #8
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}

08015a0c <_ZNK9__gnu_cxx13new_allocatorIP19Multiply_expressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8015a0c:	b480      	push	{r7}
 8015a0e:	b083      	sub	sp, #12
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8015a14:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8015a18:	4618      	mov	r0, r3
 8015a1a:	370c      	adds	r7, #12
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a22:	4770      	bx	lr

08015a24 <_ZSt12__niter_baseIPP19Multiply_expressionET_S3_>:
    __niter_base(_Iterator __it)
 8015a24:	b480      	push	{r7}
 8015a26:	b083      	sub	sp, #12
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	4618      	mov	r0, r3
 8015a30:	370c      	adds	r7, #12
 8015a32:	46bd      	mov	sp, r7
 8015a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a38:	4770      	bx	lr

08015a3a <_ZSt14__relocate_a_1IP19Multiply_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8015a3a:	b580      	push	{r7, lr}
 8015a3c:	b086      	sub	sp, #24
 8015a3e:	af00      	add	r7, sp, #0
 8015a40:	60f8      	str	r0, [r7, #12]
 8015a42:	60b9      	str	r1, [r7, #8]
 8015a44:	607a      	str	r2, [r7, #4]
 8015a46:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8015a48:	68ba      	ldr	r2, [r7, #8]
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	1ad3      	subs	r3, r2, r3
 8015a4e:	109b      	asrs	r3, r3, #2
 8015a50:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	dd06      	ble.n	8015a66 <_ZSt14__relocate_a_1IP19Multiply_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015a58:	697b      	ldr	r3, [r7, #20]
 8015a5a:	009b      	lsls	r3, r3, #2
 8015a5c:	461a      	mov	r2, r3
 8015a5e:	68f9      	ldr	r1, [r7, #12]
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	f004 f917 	bl	8019c94 <memmove>
      return __result + __count;
 8015a66:	697b      	ldr	r3, [r7, #20]
 8015a68:	009b      	lsls	r3, r3, #2
 8015a6a:	687a      	ldr	r2, [r7, #4]
 8015a6c:	4413      	add	r3, r2
    }
 8015a6e:	4618      	mov	r0, r3
 8015a70:	3718      	adds	r7, #24
 8015a72:	46bd      	mov	sp, r7
 8015a74:	bd80      	pop	{r7, pc}

08015a76 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8015a76:	b580      	push	{r7, lr}
 8015a78:	b082      	sub	sp, #8
 8015a7a:	af00      	add	r7, sp, #0
 8015a7c:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8015a7e:	6878      	ldr	r0, [r7, #4]
 8015a80:	f000 f805 	bl	8015a8e <_ZNK9__gnu_cxx13new_allocatorIP18Compare_expressionE8max_sizeEv>
 8015a84:	4603      	mov	r3, r0
 8015a86:	4618      	mov	r0, r3
 8015a88:	3708      	adds	r7, #8
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}

08015a8e <_ZNK9__gnu_cxx13new_allocatorIP18Compare_expressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8015a8e:	b480      	push	{r7}
 8015a90:	b083      	sub	sp, #12
 8015a92:	af00      	add	r7, sp, #0
 8015a94:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8015a96:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	370c      	adds	r7, #12
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa4:	4770      	bx	lr

08015aa6 <_ZSt12__niter_baseIPP18Compare_expressionET_S3_>:
    __niter_base(_Iterator __it)
 8015aa6:	b480      	push	{r7}
 8015aa8:	b083      	sub	sp, #12
 8015aaa:	af00      	add	r7, sp, #0
 8015aac:	6078      	str	r0, [r7, #4]
    { return __it; }
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	370c      	adds	r7, #12
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aba:	4770      	bx	lr

08015abc <_ZSt14__relocate_a_1IP18Compare_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b086      	sub	sp, #24
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	60f8      	str	r0, [r7, #12]
 8015ac4:	60b9      	str	r1, [r7, #8]
 8015ac6:	607a      	str	r2, [r7, #4]
 8015ac8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8015aca:	68ba      	ldr	r2, [r7, #8]
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	1ad3      	subs	r3, r2, r3
 8015ad0:	109b      	asrs	r3, r3, #2
 8015ad2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	dd06      	ble.n	8015ae8 <_ZSt14__relocate_a_1IP18Compare_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015ada:	697b      	ldr	r3, [r7, #20]
 8015adc:	009b      	lsls	r3, r3, #2
 8015ade:	461a      	mov	r2, r3
 8015ae0:	68f9      	ldr	r1, [r7, #12]
 8015ae2:	6878      	ldr	r0, [r7, #4]
 8015ae4:	f004 f8d6 	bl	8019c94 <memmove>
      return __result + __count;
 8015ae8:	697b      	ldr	r3, [r7, #20]
 8015aea:	009b      	lsls	r3, r3, #2
 8015aec:	687a      	ldr	r2, [r7, #4]
 8015aee:	4413      	add	r3, r2
    }
 8015af0:	4618      	mov	r0, r3
 8015af2:	3718      	adds	r7, #24
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}

08015af8 <_ZNSt16allocator_traitsISaIP14And_expressionEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b082      	sub	sp, #8
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f7fa fb36 	bl	8010172 <_ZNK9__gnu_cxx13new_allocatorIP14And_expressionE8max_sizeEv>
 8015b06:	4603      	mov	r3, r0
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3708      	adds	r7, #8
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}

08015b10 <_ZSt14__relocate_a_1IP14And_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b086      	sub	sp, #24
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	60f8      	str	r0, [r7, #12]
 8015b18:	60b9      	str	r1, [r7, #8]
 8015b1a:	607a      	str	r2, [r7, #4]
 8015b1c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8015b1e:	68ba      	ldr	r2, [r7, #8]
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	1ad3      	subs	r3, r2, r3
 8015b24:	109b      	asrs	r3, r3, #2
 8015b26:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8015b28:	697b      	ldr	r3, [r7, #20]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	dd06      	ble.n	8015b3c <_ZSt14__relocate_a_1IP14And_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015b2e:	697b      	ldr	r3, [r7, #20]
 8015b30:	009b      	lsls	r3, r3, #2
 8015b32:	461a      	mov	r2, r3
 8015b34:	68f9      	ldr	r1, [r7, #12]
 8015b36:	6878      	ldr	r0, [r7, #4]
 8015b38:	f004 f8ac 	bl	8019c94 <memmove>
      return __result + __count;
 8015b3c:	697b      	ldr	r3, [r7, #20]
 8015b3e:	009b      	lsls	r3, r3, #2
 8015b40:	687a      	ldr	r2, [r7, #4]
 8015b42:	4413      	add	r3, r2
    }
 8015b44:	4618      	mov	r0, r3
 8015b46:	3718      	adds	r7, #24
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}

08015b4c <_Z41__static_initialization_and_destruction_0ii>:
 8015b4c:	b590      	push	{r4, r7, lr}
 8015b4e:	b0e7      	sub	sp, #412	; 0x19c
 8015b50:	af02      	add	r7, sp, #8
 8015b52:	1d3b      	adds	r3, r7, #4
 8015b54:	6018      	str	r0, [r3, #0]
 8015b56:	463b      	mov	r3, r7
 8015b58:	6019      	str	r1, [r3, #0]
 8015b5a:	1d3b      	adds	r3, r7, #4
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2b01      	cmp	r3, #1
 8015b60:	f040 819d 	bne.w	8015e9e <_Z41__static_initialization_and_destruction_0ii+0x352>
 8015b64:	463b      	mov	r3, r7
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b6c:	4293      	cmp	r3, r2
 8015b6e:	f040 8196 	bne.w	8015e9e <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8015b72:	f107 0314 	add.w	r3, r7, #20
 8015b76:	4618      	mov	r0, r3
 8015b78:	2322      	movs	r3, #34	; 0x22
 8015b7a:	461a      	mov	r2, r3
 8015b7c:	2100      	movs	r1, #0
 8015b7e:	f004 f8a3 	bl	8019cc8 <memset>
 8015b82:	f107 0314 	add.w	r3, r7, #20
 8015b86:	223a      	movs	r2, #58	; 0x3a
 8015b88:	701a      	strb	r2, [r3, #0]
 8015b8a:	f107 0314 	add.w	r3, r7, #20
 8015b8e:	2201      	movs	r2, #1
 8015b90:	705a      	strb	r2, [r3, #1]
 8015b92:	f107 0314 	add.w	r3, r7, #20
 8015b96:	220a      	movs	r2, #10
 8015b98:	709a      	strb	r2, [r3, #2]
 8015b9a:	f107 0314 	add.w	r3, r7, #20
 8015b9e:	220a      	movs	r2, #10
 8015ba0:	70da      	strb	r2, [r3, #3]
 8015ba2:	f107 0314 	add.w	r3, r7, #20
 8015ba6:	222c      	movs	r2, #44	; 0x2c
 8015ba8:	711a      	strb	r2, [r3, #4]
 8015baa:	f107 0314 	add.w	r3, r7, #20
 8015bae:	220c      	movs	r2, #12
 8015bb0:	715a      	strb	r2, [r3, #5]
 8015bb2:	f107 0314 	add.w	r3, r7, #20
 8015bb6:	222e      	movs	r2, #46	; 0x2e
 8015bb8:	719a      	strb	r2, [r3, #6]
 8015bba:	f107 0314 	add.w	r3, r7, #20
 8015bbe:	220b      	movs	r2, #11
 8015bc0:	71da      	strb	r2, [r3, #7]
 8015bc2:	f107 0314 	add.w	r3, r7, #20
 8015bc6:	225b      	movs	r2, #91	; 0x5b
 8015bc8:	721a      	strb	r2, [r3, #8]
 8015bca:	f107 0314 	add.w	r3, r7, #20
 8015bce:	220d      	movs	r2, #13
 8015bd0:	725a      	strb	r2, [r3, #9]
 8015bd2:	f107 0314 	add.w	r3, r7, #20
 8015bd6:	225d      	movs	r2, #93	; 0x5d
 8015bd8:	729a      	strb	r2, [r3, #10]
 8015bda:	f107 0314 	add.w	r3, r7, #20
 8015bde:	220e      	movs	r2, #14
 8015be0:	72da      	strb	r2, [r3, #11]
 8015be2:	f107 0314 	add.w	r3, r7, #20
 8015be6:	227c      	movs	r2, #124	; 0x7c
 8015be8:	731a      	strb	r2, [r3, #12]
 8015bea:	f107 0314 	add.w	r3, r7, #20
 8015bee:	2215      	movs	r2, #21
 8015bf0:	735a      	strb	r2, [r3, #13]
 8015bf2:	f107 0314 	add.w	r3, r7, #20
 8015bf6:	2226      	movs	r2, #38	; 0x26
 8015bf8:	739a      	strb	r2, [r3, #14]
 8015bfa:	f107 0314 	add.w	r3, r7, #20
 8015bfe:	2216      	movs	r2, #22
 8015c00:	73da      	strb	r2, [r3, #15]
 8015c02:	f107 0314 	add.w	r3, r7, #20
 8015c06:	222b      	movs	r2, #43	; 0x2b
 8015c08:	741a      	strb	r2, [r3, #16]
 8015c0a:	f107 0314 	add.w	r3, r7, #20
 8015c0e:	221f      	movs	r2, #31
 8015c10:	745a      	strb	r2, [r3, #17]
 8015c12:	f107 0314 	add.w	r3, r7, #20
 8015c16:	222d      	movs	r2, #45	; 0x2d
 8015c18:	749a      	strb	r2, [r3, #18]
 8015c1a:	f107 0314 	add.w	r3, r7, #20
 8015c1e:	2220      	movs	r2, #32
 8015c20:	74da      	strb	r2, [r3, #19]
 8015c22:	f107 0314 	add.w	r3, r7, #20
 8015c26:	222a      	movs	r2, #42	; 0x2a
 8015c28:	751a      	strb	r2, [r3, #20]
 8015c2a:	f107 0314 	add.w	r3, r7, #20
 8015c2e:	2221      	movs	r2, #33	; 0x21
 8015c30:	755a      	strb	r2, [r3, #21]
 8015c32:	f107 0314 	add.w	r3, r7, #20
 8015c36:	222f      	movs	r2, #47	; 0x2f
 8015c38:	759a      	strb	r2, [r3, #22]
 8015c3a:	f107 0314 	add.w	r3, r7, #20
 8015c3e:	2222      	movs	r2, #34	; 0x22
 8015c40:	75da      	strb	r2, [r3, #23]
 8015c42:	f107 0314 	add.w	r3, r7, #20
 8015c46:	225e      	movs	r2, #94	; 0x5e
 8015c48:	761a      	strb	r2, [r3, #24]
 8015c4a:	f107 0314 	add.w	r3, r7, #20
 8015c4e:	2223      	movs	r2, #35	; 0x23
 8015c50:	765a      	strb	r2, [r3, #25]
 8015c52:	f107 0314 	add.w	r3, r7, #20
 8015c56:	2225      	movs	r2, #37	; 0x25
 8015c58:	769a      	strb	r2, [r3, #26]
 8015c5a:	f107 0314 	add.w	r3, r7, #20
 8015c5e:	2224      	movs	r2, #36	; 0x24
 8015c60:	76da      	strb	r2, [r3, #27]
 8015c62:	f107 0314 	add.w	r3, r7, #20
 8015c66:	2228      	movs	r2, #40	; 0x28
 8015c68:	771a      	strb	r2, [r3, #28]
 8015c6a:	f107 0314 	add.w	r3, r7, #20
 8015c6e:	2226      	movs	r2, #38	; 0x26
 8015c70:	775a      	strb	r2, [r3, #29]
 8015c72:	f107 0314 	add.w	r3, r7, #20
 8015c76:	2229      	movs	r2, #41	; 0x29
 8015c78:	779a      	strb	r2, [r3, #30]
 8015c7a:	f107 0314 	add.w	r3, r7, #20
 8015c7e:	2227      	movs	r2, #39	; 0x27
 8015c80:	77da      	strb	r2, [r3, #31]
 8015c82:	f107 0314 	add.w	r3, r7, #20
 8015c86:	2225      	movs	r2, #37	; 0x25
 8015c88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8015c8c:	f107 030c 	add.w	r3, r7, #12
 8015c90:	f107 0214 	add.w	r2, r7, #20
 8015c94:	601a      	str	r2, [r3, #0]
 8015c96:	f107 030c 	add.w	r3, r7, #12
 8015c9a:	2211      	movs	r2, #17
 8015c9c:	605a      	str	r2, [r3, #4]
 8015c9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f7eb fd23 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8015ca8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8015cac:	f107 020c 	add.w	r2, r7, #12
 8015cb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015cb4:	9300      	str	r3, [sp, #0]
 8015cb6:	460b      	mov	r3, r1
 8015cb8:	ca06      	ldmia	r2, {r1, r2}
 8015cba:	4885      	ldr	r0, [pc, #532]	; (8015ed0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8015cbc:	f7eb fd2f 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8015cc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	f7eb fd1e 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8015cca:	2305      	movs	r3, #5
 8015ccc:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8015cd0:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8015cd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015cd8:	497e      	ldr	r1, [pc, #504]	; (8015ed4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8015cda:	4618      	mov	r0, r3
 8015cdc:	f7eb f9e4 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8015ce0:	2306      	movs	r3, #6
 8015ce2:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8015ce6:	f207 1263 	addw	r2, r7, #355	; 0x163
 8015cea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015cee:	331c      	adds	r3, #28
 8015cf0:	4979      	ldr	r1, [pc, #484]	; (8015ed8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	f7eb fa00 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8015cf8:	2307      	movs	r3, #7
 8015cfa:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8015cfe:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8015d02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d06:	3338      	adds	r3, #56	; 0x38
 8015d08:	4974      	ldr	r1, [pc, #464]	; (8015edc <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7eb f9f4 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8015d10:	2308      	movs	r3, #8
 8015d12:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8015d16:	f207 1265 	addw	r2, r7, #357	; 0x165
 8015d1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d1e:	3354      	adds	r3, #84	; 0x54
 8015d20:	496f      	ldr	r1, [pc, #444]	; (8015ee0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8015d22:	4618      	mov	r0, r3
 8015d24:	f7eb f9c0 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8015d28:	2309      	movs	r3, #9
 8015d2a:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8015d2e:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8015d32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d36:	3370      	adds	r3, #112	; 0x70
 8015d38:	496a      	ldr	r1, [pc, #424]	; (8015ee4 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	f7eb fa04 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8015d40:	2310      	movs	r3, #16
 8015d42:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8015d46:	f207 1267 	addw	r2, r7, #359	; 0x167
 8015d4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d4e:	338c      	adds	r3, #140	; 0x8c
 8015d50:	4965      	ldr	r1, [pc, #404]	; (8015ee8 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7eb fa20 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8015d58:	2311      	movs	r3, #17
 8015d5a:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8015d5e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8015d62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d66:	33a8      	adds	r3, #168	; 0xa8
 8015d68:	4960      	ldr	r1, [pc, #384]	; (8015eec <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	f7eb f9ec 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8015d70:	2312      	movs	r3, #18
 8015d72:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8015d76:	f207 1269 	addw	r2, r7, #361	; 0x169
 8015d7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d7e:	33c4      	adds	r3, #196	; 0xc4
 8015d80:	495b      	ldr	r1, [pc, #364]	; (8015ef0 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8015d82:	4618      	mov	r0, r3
 8015d84:	f7eb f990 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8015d88:	2313      	movs	r3, #19
 8015d8a:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8015d8e:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8015d92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d96:	33e0      	adds	r3, #224	; 0xe0
 8015d98:	4956      	ldr	r1, [pc, #344]	; (8015ef4 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f7eb f9ac 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8015da0:	2314      	movs	r3, #20
 8015da2:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8015da6:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8015daa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015dae:	33fc      	adds	r3, #252	; 0xfc
 8015db0:	4951      	ldr	r1, [pc, #324]	; (8015ef8 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8015db2:	4618      	mov	r0, r3
 8015db4:	f7eb fa18 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8015db8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015dbc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015dc0:	601a      	str	r2, [r3, #0]
 8015dc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015dc6:	220a      	movs	r2, #10
 8015dc8:	605a      	str	r2, [r3, #4]
 8015dca:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f7eb fd32 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8015dd4:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8015dd8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015ddc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8015de0:	9300      	str	r3, [sp, #0]
 8015de2:	460b      	mov	r3, r1
 8015de4:	ca06      	ldmia	r2, {r1, r2}
 8015de6:	4845      	ldr	r0, [pc, #276]	; (8015efc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8015de8:	f7eb fd3e 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8015dec:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7eb fd2d 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8015df6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8015dfa:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8015dfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015e02:	429c      	cmp	r4, r3
 8015e04:	d004      	beq.n	8015e10 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8015e06:	3c1c      	subs	r4, #28
 8015e08:	4620      	mov	r0, r4
 8015e0a:	f7eb f940 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8015e0e:	e7f6      	b.n	8015dfe <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8015e10:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8015e14:	2200      	movs	r2, #0
 8015e16:	601a      	str	r2, [r3, #0]
 8015e18:	605a      	str	r2, [r3, #4]
 8015e1a:	609a      	str	r2, [r3, #8]
 8015e1c:	233c      	movs	r3, #60	; 0x3c
 8015e1e:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8015e22:	231b      	movs	r3, #27
 8015e24:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8015e28:	231c      	movs	r3, #28
 8015e2a:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8015e2e:	233e      	movs	r3, #62	; 0x3e
 8015e30:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8015e34:	2319      	movs	r3, #25
 8015e36:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8015e3a:	231a      	movs	r3, #26
 8015e3c:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8015e40:	233d      	movs	r3, #61	; 0x3d
 8015e42:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8015e46:	2318      	movs	r3, #24
 8015e48:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8015e4c:	231d      	movs	r3, #29
 8015e4e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8015e52:	2321      	movs	r3, #33	; 0x21
 8015e54:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8015e58:	2317      	movs	r3, #23
 8015e5a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8015e5e:	231e      	movs	r3, #30
 8015e60:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8015e64:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8015e68:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8015e6c:	2304      	movs	r3, #4
 8015e6e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8015e72:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8015e76:	4618      	mov	r0, r3
 8015e78:	f7eb fd26 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8015e7c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8015e80:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8015e84:	9300      	str	r3, [sp, #0]
 8015e86:	4613      	mov	r3, r2
 8015e88:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8015e8c:	ca06      	ldmia	r2, {r1, r2}
 8015e8e:	481c      	ldr	r0, [pc, #112]	; (8015f00 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8015e90:	f7eb fd32 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8015e94:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f7eb fd21 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8015e9e:	1d3b      	adds	r3, r7, #4
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d10e      	bne.n	8015ec4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8015ea6:	463b      	mov	r3, r7
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015eae:	4293      	cmp	r3, r2
 8015eb0:	d108      	bne.n	8015ec4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8015eb2:	4813      	ldr	r0, [pc, #76]	; (8015f00 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8015eb4:	f7f0 f850 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8015eb8:	4810      	ldr	r0, [pc, #64]	; (8015efc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8015eba:	f7f0 f85a 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8015ebe:	4804      	ldr	r0, [pc, #16]	; (8015ed0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8015ec0:	f7f0 f864 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8015ec4:	bf00      	nop
 8015ec6:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd90      	pop	{r4, r7, pc}
 8015ece:	bf00      	nop
 8015ed0:	20000368 	.word	0x20000368
 8015ed4:	0801d0b4 	.word	0x0801d0b4
 8015ed8:	0801d0bc 	.word	0x0801d0bc
 8015edc:	0801d0c4 	.word	0x0801d0c4
 8015ee0:	0801d0cc 	.word	0x0801d0cc
 8015ee4:	0801d0d4 	.word	0x0801d0d4
 8015ee8:	0801d0dc 	.word	0x0801d0dc
 8015eec:	0801d0e0 	.word	0x0801d0e0
 8015ef0:	0801d0e8 	.word	0x0801d0e8
 8015ef4:	0801d0f0 	.word	0x0801d0f0
 8015ef8:	0801d0f8 	.word	0x0801d0f8
 8015efc:	20000380 	.word	0x20000380
 8015f00:	20000398 	.word	0x20000398

08015f04 <_GLOBAL__sub_I__ZN6Parser31parse_variable_or_function_callER17Primal_expression>:
 8015f04:	b580      	push	{r7, lr}
 8015f06:	af00      	add	r7, sp, #0
 8015f08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015f0c:	2001      	movs	r0, #1
 8015f0e:	f7ff fe1d 	bl	8015b4c <_Z41__static_initialization_and_destruction_0ii>
 8015f12:	bd80      	pop	{r7, pc}

08015f14 <_GLOBAL__sub_D__ZN6Parser31parse_variable_or_function_callER17Primal_expression>:
 8015f14:	b580      	push	{r7, lr}
 8015f16:	af00      	add	r7, sp, #0
 8015f18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015f1c:	2000      	movs	r0, #0
 8015f1e:	f7ff fe15 	bl	8015b4c <_Z41__static_initialization_and_destruction_0ii>
 8015f22:	bd80      	pop	{r7, pc}

08015f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8015f24:	b580      	push	{r7, lr}
 8015f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8015f28:	f000 fea9 	bl	8016c7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8015f2c:	f000 f80a 	bl	8015f44 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8015f30:	f000 f8e0 	bl	80160f4 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8015f34:	f000 f8aa 	bl	801608c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  my_main_run(&huart1);
 8015f38:	4801      	ldr	r0, [pc, #4]	; (8015f40 <main+0x1c>)
 8015f3a:	f000 fae5 	bl	8016508 <_Z11my_main_runP20__UART_HandleTypeDef>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8015f3e:	e7fe      	b.n	8015f3e <main+0x1a>
 8015f40:	200003f8 	.word	0x200003f8

08015f44 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b0b4      	sub	sp, #208	; 0xd0
 8015f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8015f4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015f4e:	2230      	movs	r2, #48	; 0x30
 8015f50:	2100      	movs	r1, #0
 8015f52:	4618      	mov	r0, r3
 8015f54:	f003 feb8 	bl	8019cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8015f58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015f5c:	2200      	movs	r2, #0
 8015f5e:	601a      	str	r2, [r3, #0]
 8015f60:	605a      	str	r2, [r3, #4]
 8015f62:	609a      	str	r2, [r3, #8]
 8015f64:	60da      	str	r2, [r3, #12]
 8015f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015f68:	f107 0308 	add.w	r3, r7, #8
 8015f6c:	2284      	movs	r2, #132	; 0x84
 8015f6e:	2100      	movs	r1, #0
 8015f70:	4618      	mov	r0, r3
 8015f72:	f003 fea9 	bl	8019cc8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8015f76:	4b43      	ldr	r3, [pc, #268]	; (8016084 <_Z18SystemClock_Configv+0x140>)
 8015f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f7a:	4a42      	ldr	r2, [pc, #264]	; (8016084 <_Z18SystemClock_Configv+0x140>)
 8015f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015f80:	6413      	str	r3, [r2, #64]	; 0x40
 8015f82:	4b40      	ldr	r3, [pc, #256]	; (8016084 <_Z18SystemClock_Configv+0x140>)
 8015f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015f8a:	607b      	str	r3, [r7, #4]
 8015f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8015f8e:	4b3e      	ldr	r3, [pc, #248]	; (8016088 <_Z18SystemClock_Configv+0x144>)
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	4a3d      	ldr	r2, [pc, #244]	; (8016088 <_Z18SystemClock_Configv+0x144>)
 8015f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8015f98:	6013      	str	r3, [r2, #0]
 8015f9a:	4b3b      	ldr	r3, [pc, #236]	; (8016088 <_Z18SystemClock_Configv+0x144>)
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8015fa2:	603b      	str	r3, [r7, #0]
 8015fa4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8015fa6:	2302      	movs	r3, #2
 8015fa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8015fac:	2301      	movs	r3, #1
 8015fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8015fb2:	2310      	movs	r3, #16
 8015fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8015fb8:	2302      	movs	r3, #2
 8015fba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8015fc4:	2308      	movs	r3, #8
 8015fc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8015fca:	23d8      	movs	r3, #216	; 0xd8
 8015fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8015fd0:	2302      	movs	r3, #2
 8015fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8015fd6:	2302      	movs	r3, #2
 8015fd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8015fdc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f001 fa6d 	bl	80174c0 <HAL_RCC_OscConfig>
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	bf14      	ite	ne
 8015fec:	2301      	movne	r3, #1
 8015fee:	2300      	moveq	r3, #0
 8015ff0:	b2db      	uxtb	r3, r3
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d001      	beq.n	8015ffa <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8015ff6:	f000 f895 	bl	8016124 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8015ffa:	f001 fa11 	bl	8017420 <HAL_PWREx_EnableOverDrive>
 8015ffe:	4603      	mov	r3, r0
 8016000:	2b00      	cmp	r3, #0
 8016002:	bf14      	ite	ne
 8016004:	2301      	movne	r3, #1
 8016006:	2300      	moveq	r3, #0
 8016008:	b2db      	uxtb	r3, r3
 801600a:	2b00      	cmp	r3, #0
 801600c:	d001      	beq.n	8016012 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 801600e:	f000 f889 	bl	8016124 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8016012:	230f      	movs	r3, #15
 8016014:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8016018:	2302      	movs	r3, #2
 801601a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801601e:	2300      	movs	r3, #0
 8016020:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8016024:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801602c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016030:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8016034:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016038:	2107      	movs	r1, #7
 801603a:	4618      	mov	r0, r3
 801603c:	f001 fce4 	bl	8017a08 <HAL_RCC_ClockConfig>
 8016040:	4603      	mov	r3, r0
 8016042:	2b00      	cmp	r3, #0
 8016044:	bf14      	ite	ne
 8016046:	2301      	movne	r3, #1
 8016048:	2300      	moveq	r3, #0
 801604a:	b2db      	uxtb	r3, r3
 801604c:	2b00      	cmp	r3, #0
 801604e:	d001      	beq.n	8016054 <_Z18SystemClock_Configv+0x110>
  {
    Error_Handler();
 8016050:	f000 f868 	bl	8016124 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8016054:	2340      	movs	r3, #64	; 0x40
 8016056:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8016058:	2300      	movs	r3, #0
 801605a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801605c:	f107 0308 	add.w	r3, r7, #8
 8016060:	4618      	mov	r0, r3
 8016062:	f001 fea7 	bl	8017db4 <HAL_RCCEx_PeriphCLKConfig>
 8016066:	4603      	mov	r3, r0
 8016068:	2b00      	cmp	r3, #0
 801606a:	bf14      	ite	ne
 801606c:	2301      	movne	r3, #1
 801606e:	2300      	moveq	r3, #0
 8016070:	b2db      	uxtb	r3, r3
 8016072:	2b00      	cmp	r3, #0
 8016074:	d001      	beq.n	801607a <_Z18SystemClock_Configv+0x136>
  {
    Error_Handler();
 8016076:	f000 f855 	bl	8016124 <Error_Handler>
  }
}
 801607a:	bf00      	nop
 801607c:	37d0      	adds	r7, #208	; 0xd0
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}
 8016082:	bf00      	nop
 8016084:	40023800 	.word	0x40023800
 8016088:	40007000 	.word	0x40007000

0801608c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 801608c:	b580      	push	{r7, lr}
 801608e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8016090:	4b16      	ldr	r3, [pc, #88]	; (80160ec <_ZL19MX_USART1_UART_Initv+0x60>)
 8016092:	4a17      	ldr	r2, [pc, #92]	; (80160f0 <_ZL19MX_USART1_UART_Initv+0x64>)
 8016094:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8016096:	4b15      	ldr	r3, [pc, #84]	; (80160ec <_ZL19MX_USART1_UART_Initv+0x60>)
 8016098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801609c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801609e:	4b13      	ldr	r3, [pc, #76]	; (80160ec <_ZL19MX_USART1_UART_Initv+0x60>)
 80160a0:	2200      	movs	r2, #0
 80160a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80160a4:	4b11      	ldr	r3, [pc, #68]	; (80160ec <_ZL19MX_USART1_UART_Initv+0x60>)
 80160a6:	2200      	movs	r2, #0
 80160a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80160aa:	4b10      	ldr	r3, [pc, #64]	; (80160ec <_ZL19MX_USART1_UART_Initv+0x60>)
 80160ac:	2200      	movs	r2, #0
 80160ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80160b0:	4b0e      	ldr	r3, [pc, #56]	; (80160ec <_ZL19MX_USART1_UART_Initv+0x60>)
 80160b2:	220c      	movs	r2, #12
 80160b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80160b6:	4b0d      	ldr	r3, [pc, #52]	; (80160ec <_ZL19MX_USART1_UART_Initv+0x60>)
 80160b8:	2200      	movs	r2, #0
 80160ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80160bc:	4b0b      	ldr	r3, [pc, #44]	; (80160ec <_ZL19MX_USART1_UART_Initv+0x60>)
 80160be:	2200      	movs	r2, #0
 80160c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80160c2:	4b0a      	ldr	r3, [pc, #40]	; (80160ec <_ZL19MX_USART1_UART_Initv+0x60>)
 80160c4:	2200      	movs	r2, #0
 80160c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80160c8:	4b08      	ldr	r3, [pc, #32]	; (80160ec <_ZL19MX_USART1_UART_Initv+0x60>)
 80160ca:	2200      	movs	r2, #0
 80160cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80160ce:	4807      	ldr	r0, [pc, #28]	; (80160ec <_ZL19MX_USART1_UART_Initv+0x60>)
 80160d0:	f002 fa60 	bl	8018594 <HAL_UART_Init>
 80160d4:	4603      	mov	r3, r0
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	bf14      	ite	ne
 80160da:	2301      	movne	r3, #1
 80160dc:	2300      	moveq	r3, #0
 80160de:	b2db      	uxtb	r3, r3
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d001      	beq.n	80160e8 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80160e4:	f000 f81e 	bl	8016124 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80160e8:	bf00      	nop
 80160ea:	bd80      	pop	{r7, pc}
 80160ec:	200003f8 	.word	0x200003f8
 80160f0:	40011000 	.word	0x40011000

080160f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80160f4:	b480      	push	{r7}
 80160f6:	b083      	sub	sp, #12
 80160f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80160fa:	4b09      	ldr	r3, [pc, #36]	; (8016120 <_ZL12MX_GPIO_Initv+0x2c>)
 80160fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160fe:	4a08      	ldr	r2, [pc, #32]	; (8016120 <_ZL12MX_GPIO_Initv+0x2c>)
 8016100:	f043 0301 	orr.w	r3, r3, #1
 8016104:	6313      	str	r3, [r2, #48]	; 0x30
 8016106:	4b06      	ldr	r3, [pc, #24]	; (8016120 <_ZL12MX_GPIO_Initv+0x2c>)
 8016108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801610a:	f003 0301 	and.w	r3, r3, #1
 801610e:	607b      	str	r3, [r7, #4]
 8016110:	687b      	ldr	r3, [r7, #4]

}
 8016112:	bf00      	nop
 8016114:	370c      	adds	r7, #12
 8016116:	46bd      	mov	sp, r7
 8016118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611c:	4770      	bx	lr
 801611e:	bf00      	nop
 8016120:	40023800 	.word	0x40023800

08016124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8016124:	b480      	push	{r7}
 8016126:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8016128:	b672      	cpsid	i
}
 801612a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801612c:	e7fe      	b.n	801612c <Error_Handler+0x8>
	...

08016130 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8016130:	b590      	push	{r4, r7, lr}
 8016132:	b0e7      	sub	sp, #412	; 0x19c
 8016134:	af02      	add	r7, sp, #8
 8016136:	1d3b      	adds	r3, r7, #4
 8016138:	6018      	str	r0, [r3, #0]
 801613a:	463b      	mov	r3, r7
 801613c:	6019      	str	r1, [r3, #0]
 801613e:	1d3b      	adds	r3, r7, #4
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	2b01      	cmp	r3, #1
 8016144:	f040 819d 	bne.w	8016482 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8016148:	463b      	mov	r3, r7
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016150:	4293      	cmp	r3, r2
 8016152:	f040 8196 	bne.w	8016482 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8016156:	f107 0314 	add.w	r3, r7, #20
 801615a:	4618      	mov	r0, r3
 801615c:	2322      	movs	r3, #34	; 0x22
 801615e:	461a      	mov	r2, r3
 8016160:	2100      	movs	r1, #0
 8016162:	f003 fdb1 	bl	8019cc8 <memset>
 8016166:	f107 0314 	add.w	r3, r7, #20
 801616a:	223a      	movs	r2, #58	; 0x3a
 801616c:	701a      	strb	r2, [r3, #0]
 801616e:	f107 0314 	add.w	r3, r7, #20
 8016172:	2201      	movs	r2, #1
 8016174:	705a      	strb	r2, [r3, #1]
 8016176:	f107 0314 	add.w	r3, r7, #20
 801617a:	220a      	movs	r2, #10
 801617c:	709a      	strb	r2, [r3, #2]
 801617e:	f107 0314 	add.w	r3, r7, #20
 8016182:	220a      	movs	r2, #10
 8016184:	70da      	strb	r2, [r3, #3]
 8016186:	f107 0314 	add.w	r3, r7, #20
 801618a:	222c      	movs	r2, #44	; 0x2c
 801618c:	711a      	strb	r2, [r3, #4]
 801618e:	f107 0314 	add.w	r3, r7, #20
 8016192:	220c      	movs	r2, #12
 8016194:	715a      	strb	r2, [r3, #5]
 8016196:	f107 0314 	add.w	r3, r7, #20
 801619a:	222e      	movs	r2, #46	; 0x2e
 801619c:	719a      	strb	r2, [r3, #6]
 801619e:	f107 0314 	add.w	r3, r7, #20
 80161a2:	220b      	movs	r2, #11
 80161a4:	71da      	strb	r2, [r3, #7]
 80161a6:	f107 0314 	add.w	r3, r7, #20
 80161aa:	225b      	movs	r2, #91	; 0x5b
 80161ac:	721a      	strb	r2, [r3, #8]
 80161ae:	f107 0314 	add.w	r3, r7, #20
 80161b2:	220d      	movs	r2, #13
 80161b4:	725a      	strb	r2, [r3, #9]
 80161b6:	f107 0314 	add.w	r3, r7, #20
 80161ba:	225d      	movs	r2, #93	; 0x5d
 80161bc:	729a      	strb	r2, [r3, #10]
 80161be:	f107 0314 	add.w	r3, r7, #20
 80161c2:	220e      	movs	r2, #14
 80161c4:	72da      	strb	r2, [r3, #11]
 80161c6:	f107 0314 	add.w	r3, r7, #20
 80161ca:	227c      	movs	r2, #124	; 0x7c
 80161cc:	731a      	strb	r2, [r3, #12]
 80161ce:	f107 0314 	add.w	r3, r7, #20
 80161d2:	2215      	movs	r2, #21
 80161d4:	735a      	strb	r2, [r3, #13]
 80161d6:	f107 0314 	add.w	r3, r7, #20
 80161da:	2226      	movs	r2, #38	; 0x26
 80161dc:	739a      	strb	r2, [r3, #14]
 80161de:	f107 0314 	add.w	r3, r7, #20
 80161e2:	2216      	movs	r2, #22
 80161e4:	73da      	strb	r2, [r3, #15]
 80161e6:	f107 0314 	add.w	r3, r7, #20
 80161ea:	222b      	movs	r2, #43	; 0x2b
 80161ec:	741a      	strb	r2, [r3, #16]
 80161ee:	f107 0314 	add.w	r3, r7, #20
 80161f2:	221f      	movs	r2, #31
 80161f4:	745a      	strb	r2, [r3, #17]
 80161f6:	f107 0314 	add.w	r3, r7, #20
 80161fa:	222d      	movs	r2, #45	; 0x2d
 80161fc:	749a      	strb	r2, [r3, #18]
 80161fe:	f107 0314 	add.w	r3, r7, #20
 8016202:	2220      	movs	r2, #32
 8016204:	74da      	strb	r2, [r3, #19]
 8016206:	f107 0314 	add.w	r3, r7, #20
 801620a:	222a      	movs	r2, #42	; 0x2a
 801620c:	751a      	strb	r2, [r3, #20]
 801620e:	f107 0314 	add.w	r3, r7, #20
 8016212:	2221      	movs	r2, #33	; 0x21
 8016214:	755a      	strb	r2, [r3, #21]
 8016216:	f107 0314 	add.w	r3, r7, #20
 801621a:	222f      	movs	r2, #47	; 0x2f
 801621c:	759a      	strb	r2, [r3, #22]
 801621e:	f107 0314 	add.w	r3, r7, #20
 8016222:	2222      	movs	r2, #34	; 0x22
 8016224:	75da      	strb	r2, [r3, #23]
 8016226:	f107 0314 	add.w	r3, r7, #20
 801622a:	225e      	movs	r2, #94	; 0x5e
 801622c:	761a      	strb	r2, [r3, #24]
 801622e:	f107 0314 	add.w	r3, r7, #20
 8016232:	2223      	movs	r2, #35	; 0x23
 8016234:	765a      	strb	r2, [r3, #25]
 8016236:	f107 0314 	add.w	r3, r7, #20
 801623a:	2225      	movs	r2, #37	; 0x25
 801623c:	769a      	strb	r2, [r3, #26]
 801623e:	f107 0314 	add.w	r3, r7, #20
 8016242:	2224      	movs	r2, #36	; 0x24
 8016244:	76da      	strb	r2, [r3, #27]
 8016246:	f107 0314 	add.w	r3, r7, #20
 801624a:	2228      	movs	r2, #40	; 0x28
 801624c:	771a      	strb	r2, [r3, #28]
 801624e:	f107 0314 	add.w	r3, r7, #20
 8016252:	2226      	movs	r2, #38	; 0x26
 8016254:	775a      	strb	r2, [r3, #29]
 8016256:	f107 0314 	add.w	r3, r7, #20
 801625a:	2229      	movs	r2, #41	; 0x29
 801625c:	779a      	strb	r2, [r3, #30]
 801625e:	f107 0314 	add.w	r3, r7, #20
 8016262:	2227      	movs	r2, #39	; 0x27
 8016264:	77da      	strb	r2, [r3, #31]
 8016266:	f107 0314 	add.w	r3, r7, #20
 801626a:	2225      	movs	r2, #37	; 0x25
 801626c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8016270:	f107 030c 	add.w	r3, r7, #12
 8016274:	f107 0214 	add.w	r2, r7, #20
 8016278:	601a      	str	r2, [r3, #0]
 801627a:	f107 030c 	add.w	r3, r7, #12
 801627e:	2211      	movs	r2, #17
 8016280:	605a      	str	r2, [r3, #4]
 8016282:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016286:	4618      	mov	r0, r3
 8016288:	f7eb fa31 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 801628c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8016290:	f107 020c 	add.w	r2, r7, #12
 8016294:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016298:	9300      	str	r3, [sp, #0]
 801629a:	460b      	mov	r3, r1
 801629c:	ca06      	ldmia	r2, {r1, r2}
 801629e:	4885      	ldr	r0, [pc, #532]	; (80164b4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80162a0:	f7eb fa3d 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80162a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80162a8:	4618      	mov	r0, r3
 80162aa:	f7eb fa2c 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 80162ae:	2305      	movs	r3, #5
 80162b0:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80162b4:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80162b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80162bc:	497e      	ldr	r1, [pc, #504]	; (80164b8 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80162be:	4618      	mov	r0, r3
 80162c0:	f7ea fef2 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80162c4:	2306      	movs	r3, #6
 80162c6:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80162ca:	f207 1263 	addw	r2, r7, #355	; 0x163
 80162ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80162d2:	331c      	adds	r3, #28
 80162d4:	4979      	ldr	r1, [pc, #484]	; (80164bc <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80162d6:	4618      	mov	r0, r3
 80162d8:	f7ea ff0e 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80162dc:	2307      	movs	r3, #7
 80162de:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80162e2:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80162e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80162ea:	3338      	adds	r3, #56	; 0x38
 80162ec:	4974      	ldr	r1, [pc, #464]	; (80164c0 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7ea ff02 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80162f4:	2308      	movs	r3, #8
 80162f6:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80162fa:	f207 1265 	addw	r2, r7, #357	; 0x165
 80162fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016302:	3354      	adds	r3, #84	; 0x54
 8016304:	496f      	ldr	r1, [pc, #444]	; (80164c4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8016306:	4618      	mov	r0, r3
 8016308:	f7ea fece 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 801630c:	2309      	movs	r3, #9
 801630e:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8016312:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8016316:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801631a:	3370      	adds	r3, #112	; 0x70
 801631c:	496a      	ldr	r1, [pc, #424]	; (80164c8 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 801631e:	4618      	mov	r0, r3
 8016320:	f7ea ff12 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8016324:	2310      	movs	r3, #16
 8016326:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 801632a:	f207 1267 	addw	r2, r7, #359	; 0x167
 801632e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016332:	338c      	adds	r3, #140	; 0x8c
 8016334:	4965      	ldr	r1, [pc, #404]	; (80164cc <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8016336:	4618      	mov	r0, r3
 8016338:	f7ea ff2e 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 801633c:	2311      	movs	r3, #17
 801633e:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8016342:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8016346:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801634a:	33a8      	adds	r3, #168	; 0xa8
 801634c:	4960      	ldr	r1, [pc, #384]	; (80164d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 801634e:	4618      	mov	r0, r3
 8016350:	f7ea fefa 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8016354:	2312      	movs	r3, #18
 8016356:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 801635a:	f207 1269 	addw	r2, r7, #361	; 0x169
 801635e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016362:	33c4      	adds	r3, #196	; 0xc4
 8016364:	495b      	ldr	r1, [pc, #364]	; (80164d4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8016366:	4618      	mov	r0, r3
 8016368:	f7ea fe9e 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 801636c:	2313      	movs	r3, #19
 801636e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8016372:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8016376:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801637a:	33e0      	adds	r3, #224	; 0xe0
 801637c:	4956      	ldr	r1, [pc, #344]	; (80164d8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 801637e:	4618      	mov	r0, r3
 8016380:	f7ea feba 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8016384:	2314      	movs	r3, #20
 8016386:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 801638a:	f207 126b 	addw	r2, r7, #363	; 0x16b
 801638e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016392:	33fc      	adds	r3, #252	; 0xfc
 8016394:	4951      	ldr	r1, [pc, #324]	; (80164dc <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8016396:	4618      	mov	r0, r3
 8016398:	f7ea ff26 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 801639c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80163a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80163a4:	601a      	str	r2, [r3, #0]
 80163a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80163aa:	220a      	movs	r2, #10
 80163ac:	605a      	str	r2, [r3, #4]
 80163ae:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80163b2:	4618      	mov	r0, r3
 80163b4:	f7eb fa40 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80163b8:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80163bc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80163c0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80163c4:	9300      	str	r3, [sp, #0]
 80163c6:	460b      	mov	r3, r1
 80163c8:	ca06      	ldmia	r2, {r1, r2}
 80163ca:	4845      	ldr	r0, [pc, #276]	; (80164e0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80163cc:	f7eb fa4c 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80163d0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80163d4:	4618      	mov	r0, r3
 80163d6:	f7eb fa3b 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80163da:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80163de:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80163e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80163e6:	429c      	cmp	r4, r3
 80163e8:	d004      	beq.n	80163f4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 80163ea:	3c1c      	subs	r4, #28
 80163ec:	4620      	mov	r0, r4
 80163ee:	f7ea fe4e 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80163f2:	e7f6      	b.n	80163e2 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80163f4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80163f8:	2200      	movs	r2, #0
 80163fa:	601a      	str	r2, [r3, #0]
 80163fc:	605a      	str	r2, [r3, #4]
 80163fe:	609a      	str	r2, [r3, #8]
 8016400:	233c      	movs	r3, #60	; 0x3c
 8016402:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8016406:	231b      	movs	r3, #27
 8016408:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 801640c:	231c      	movs	r3, #28
 801640e:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8016412:	233e      	movs	r3, #62	; 0x3e
 8016414:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8016418:	2319      	movs	r3, #25
 801641a:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 801641e:	231a      	movs	r3, #26
 8016420:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8016424:	233d      	movs	r3, #61	; 0x3d
 8016426:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 801642a:	2318      	movs	r3, #24
 801642c:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8016430:	231d      	movs	r3, #29
 8016432:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8016436:	2321      	movs	r3, #33	; 0x21
 8016438:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 801643c:	2317      	movs	r3, #23
 801643e:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8016442:	231e      	movs	r3, #30
 8016444:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8016448:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801644c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8016450:	2304      	movs	r3, #4
 8016452:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8016456:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801645a:	4618      	mov	r0, r3
 801645c:	f7eb fa34 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8016460:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8016464:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8016468:	9300      	str	r3, [sp, #0]
 801646a:	4613      	mov	r3, r2
 801646c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8016470:	ca06      	ldmia	r2, {r1, r2}
 8016472:	481c      	ldr	r0, [pc, #112]	; (80164e4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8016474:	f7eb fa40 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8016478:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801647c:	4618      	mov	r0, r3
 801647e:	f7eb fa2f 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8016482:	1d3b      	adds	r3, r7, #4
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d10e      	bne.n	80164a8 <_Z41__static_initialization_and_destruction_0ii+0x378>
 801648a:	463b      	mov	r3, r7
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016492:	4293      	cmp	r3, r2
 8016494:	d108      	bne.n	80164a8 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8016496:	4813      	ldr	r0, [pc, #76]	; (80164e4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8016498:	f7ef fd5e 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 801649c:	4810      	ldr	r0, [pc, #64]	; (80164e0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 801649e:	f7ef fd68 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 80164a2:	4804      	ldr	r0, [pc, #16]	; (80164b4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80164a4:	f7ef fd72 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80164a8:	bf00      	nop
 80164aa:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bd90      	pop	{r4, r7, pc}
 80164b2:	bf00      	nop
 80164b4:	200003b0 	.word	0x200003b0
 80164b8:	0801d128 	.word	0x0801d128
 80164bc:	0801d130 	.word	0x0801d130
 80164c0:	0801d138 	.word	0x0801d138
 80164c4:	0801d140 	.word	0x0801d140
 80164c8:	0801d148 	.word	0x0801d148
 80164cc:	0801d150 	.word	0x0801d150
 80164d0:	0801d154 	.word	0x0801d154
 80164d4:	0801d15c 	.word	0x0801d15c
 80164d8:	0801d164 	.word	0x0801d164
 80164dc:	0801d16c 	.word	0x0801d16c
 80164e0:	200003c8 	.word	0x200003c8
 80164e4:	200003e0 	.word	0x200003e0

080164e8 <_GLOBAL__sub_I_huart1>:
 80164e8:	b580      	push	{r7, lr}
 80164ea:	af00      	add	r7, sp, #0
 80164ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80164f0:	2001      	movs	r0, #1
 80164f2:	f7ff fe1d 	bl	8016130 <_Z41__static_initialization_and_destruction_0ii>
 80164f6:	bd80      	pop	{r7, pc}

080164f8 <_GLOBAL__sub_D_huart1>:
 80164f8:	b580      	push	{r7, lr}
 80164fa:	af00      	add	r7, sp, #0
 80164fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016500:	2000      	movs	r0, #0
 8016502:	f7ff fe15 	bl	8016130 <_Z41__static_initialization_and_destruction_0ii>
 8016506:	bd80      	pop	{r7, pc}

08016508 <_Z11my_main_runP20__UART_HandleTypeDef>:
#include "my_main.h"

// main function called after setup from CUBEMX
void my_main_run(UART_HandleTypeDef* huart)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b0aa      	sub	sp, #168	; 0xa8
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
	Source Com(huart);
 8016510:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016514:	6879      	ldr	r1, [r7, #4]
 8016516:	4618      	mov	r0, r3
 8016518:	f7fa ff40 	bl	801139c <_ZN6SourceC1EP20__UART_HandleTypeDef>
	Transmitter Trans(huart);
 801651c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016520:	6879      	ldr	r1, [r7, #4]
 8016522:	4618      	mov	r0, r3
 8016524:	f7fb fee8 	bl	80122f8 <_ZN11TransmitterC1EP20__UART_HandleTypeDef>
	Lexer Lex(&Com);
 8016528:	f107 0298 	add.w	r2, r7, #152	; 0x98
 801652c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016530:	4611      	mov	r1, r2
 8016532:	4618      	mov	r0, r3
 8016534:	f7ef ffc1 	bl	80064ba <_ZN5LexerC1EP6Source>
	Parser Par(&Lex, &Trans);
 8016538:	f107 0290 	add.w	r2, r7, #144	; 0x90
 801653c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8016540:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016544:	4618      	mov	r0, r3
 8016546:	f7f3 f8db 	bl	8009700 <_ZN6ParserC1EP5LexerP11Transmitter>

	Program P = Par.parse_program();
 801654a:	f107 030c 	add.w	r3, r7, #12
 801654e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016552:	4611      	mov	r1, r2
 8016554:	4618      	mov	r0, r3
 8016556:	f7f4 faf4 	bl	800ab42 <_ZN6Parser13parse_programEv>

	for(;;)
 801655a:	e7fe      	b.n	801655a <_Z11my_main_runP20__UART_HandleTypeDef+0x52>

0801655c <_Z41__static_initialization_and_destruction_0ii>:
	{

	}
}
 801655c:	b590      	push	{r4, r7, lr}
 801655e:	b0e7      	sub	sp, #412	; 0x19c
 8016560:	af02      	add	r7, sp, #8
 8016562:	1d3b      	adds	r3, r7, #4
 8016564:	6018      	str	r0, [r3, #0]
 8016566:	463b      	mov	r3, r7
 8016568:	6019      	str	r1, [r3, #0]
 801656a:	1d3b      	adds	r3, r7, #4
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	2b01      	cmp	r3, #1
 8016570:	f040 819d 	bne.w	80168ae <_Z41__static_initialization_and_destruction_0ii+0x352>
 8016574:	463b      	mov	r3, r7
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801657c:	4293      	cmp	r3, r2
 801657e:	f040 8196 	bne.w	80168ae <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8016582:	f107 0314 	add.w	r3, r7, #20
 8016586:	4618      	mov	r0, r3
 8016588:	2322      	movs	r3, #34	; 0x22
 801658a:	461a      	mov	r2, r3
 801658c:	2100      	movs	r1, #0
 801658e:	f003 fb9b 	bl	8019cc8 <memset>
 8016592:	f107 0314 	add.w	r3, r7, #20
 8016596:	223a      	movs	r2, #58	; 0x3a
 8016598:	701a      	strb	r2, [r3, #0]
 801659a:	f107 0314 	add.w	r3, r7, #20
 801659e:	2201      	movs	r2, #1
 80165a0:	705a      	strb	r2, [r3, #1]
 80165a2:	f107 0314 	add.w	r3, r7, #20
 80165a6:	220a      	movs	r2, #10
 80165a8:	709a      	strb	r2, [r3, #2]
 80165aa:	f107 0314 	add.w	r3, r7, #20
 80165ae:	220a      	movs	r2, #10
 80165b0:	70da      	strb	r2, [r3, #3]
 80165b2:	f107 0314 	add.w	r3, r7, #20
 80165b6:	222c      	movs	r2, #44	; 0x2c
 80165b8:	711a      	strb	r2, [r3, #4]
 80165ba:	f107 0314 	add.w	r3, r7, #20
 80165be:	220c      	movs	r2, #12
 80165c0:	715a      	strb	r2, [r3, #5]
 80165c2:	f107 0314 	add.w	r3, r7, #20
 80165c6:	222e      	movs	r2, #46	; 0x2e
 80165c8:	719a      	strb	r2, [r3, #6]
 80165ca:	f107 0314 	add.w	r3, r7, #20
 80165ce:	220b      	movs	r2, #11
 80165d0:	71da      	strb	r2, [r3, #7]
 80165d2:	f107 0314 	add.w	r3, r7, #20
 80165d6:	225b      	movs	r2, #91	; 0x5b
 80165d8:	721a      	strb	r2, [r3, #8]
 80165da:	f107 0314 	add.w	r3, r7, #20
 80165de:	220d      	movs	r2, #13
 80165e0:	725a      	strb	r2, [r3, #9]
 80165e2:	f107 0314 	add.w	r3, r7, #20
 80165e6:	225d      	movs	r2, #93	; 0x5d
 80165e8:	729a      	strb	r2, [r3, #10]
 80165ea:	f107 0314 	add.w	r3, r7, #20
 80165ee:	220e      	movs	r2, #14
 80165f0:	72da      	strb	r2, [r3, #11]
 80165f2:	f107 0314 	add.w	r3, r7, #20
 80165f6:	227c      	movs	r2, #124	; 0x7c
 80165f8:	731a      	strb	r2, [r3, #12]
 80165fa:	f107 0314 	add.w	r3, r7, #20
 80165fe:	2215      	movs	r2, #21
 8016600:	735a      	strb	r2, [r3, #13]
 8016602:	f107 0314 	add.w	r3, r7, #20
 8016606:	2226      	movs	r2, #38	; 0x26
 8016608:	739a      	strb	r2, [r3, #14]
 801660a:	f107 0314 	add.w	r3, r7, #20
 801660e:	2216      	movs	r2, #22
 8016610:	73da      	strb	r2, [r3, #15]
 8016612:	f107 0314 	add.w	r3, r7, #20
 8016616:	222b      	movs	r2, #43	; 0x2b
 8016618:	741a      	strb	r2, [r3, #16]
 801661a:	f107 0314 	add.w	r3, r7, #20
 801661e:	221f      	movs	r2, #31
 8016620:	745a      	strb	r2, [r3, #17]
 8016622:	f107 0314 	add.w	r3, r7, #20
 8016626:	222d      	movs	r2, #45	; 0x2d
 8016628:	749a      	strb	r2, [r3, #18]
 801662a:	f107 0314 	add.w	r3, r7, #20
 801662e:	2220      	movs	r2, #32
 8016630:	74da      	strb	r2, [r3, #19]
 8016632:	f107 0314 	add.w	r3, r7, #20
 8016636:	222a      	movs	r2, #42	; 0x2a
 8016638:	751a      	strb	r2, [r3, #20]
 801663a:	f107 0314 	add.w	r3, r7, #20
 801663e:	2221      	movs	r2, #33	; 0x21
 8016640:	755a      	strb	r2, [r3, #21]
 8016642:	f107 0314 	add.w	r3, r7, #20
 8016646:	222f      	movs	r2, #47	; 0x2f
 8016648:	759a      	strb	r2, [r3, #22]
 801664a:	f107 0314 	add.w	r3, r7, #20
 801664e:	2222      	movs	r2, #34	; 0x22
 8016650:	75da      	strb	r2, [r3, #23]
 8016652:	f107 0314 	add.w	r3, r7, #20
 8016656:	225e      	movs	r2, #94	; 0x5e
 8016658:	761a      	strb	r2, [r3, #24]
 801665a:	f107 0314 	add.w	r3, r7, #20
 801665e:	2223      	movs	r2, #35	; 0x23
 8016660:	765a      	strb	r2, [r3, #25]
 8016662:	f107 0314 	add.w	r3, r7, #20
 8016666:	2225      	movs	r2, #37	; 0x25
 8016668:	769a      	strb	r2, [r3, #26]
 801666a:	f107 0314 	add.w	r3, r7, #20
 801666e:	2224      	movs	r2, #36	; 0x24
 8016670:	76da      	strb	r2, [r3, #27]
 8016672:	f107 0314 	add.w	r3, r7, #20
 8016676:	2228      	movs	r2, #40	; 0x28
 8016678:	771a      	strb	r2, [r3, #28]
 801667a:	f107 0314 	add.w	r3, r7, #20
 801667e:	2226      	movs	r2, #38	; 0x26
 8016680:	775a      	strb	r2, [r3, #29]
 8016682:	f107 0314 	add.w	r3, r7, #20
 8016686:	2229      	movs	r2, #41	; 0x29
 8016688:	779a      	strb	r2, [r3, #30]
 801668a:	f107 0314 	add.w	r3, r7, #20
 801668e:	2227      	movs	r2, #39	; 0x27
 8016690:	77da      	strb	r2, [r3, #31]
 8016692:	f107 0314 	add.w	r3, r7, #20
 8016696:	2225      	movs	r2, #37	; 0x25
 8016698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 801669c:	f107 030c 	add.w	r3, r7, #12
 80166a0:	f107 0214 	add.w	r2, r7, #20
 80166a4:	601a      	str	r2, [r3, #0]
 80166a6:	f107 030c 	add.w	r3, r7, #12
 80166aa:	2211      	movs	r2, #17
 80166ac:	605a      	str	r2, [r3, #4]
 80166ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80166b2:	4618      	mov	r0, r3
 80166b4:	f7eb f81b 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 80166b8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80166bc:	f107 020c 	add.w	r2, r7, #12
 80166c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80166c4:	9300      	str	r3, [sp, #0]
 80166c6:	460b      	mov	r3, r1
 80166c8:	ca06      	ldmia	r2, {r1, r2}
 80166ca:	4885      	ldr	r0, [pc, #532]	; (80168e0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80166cc:	f7eb f827 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80166d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80166d4:	4618      	mov	r0, r3
 80166d6:	f7eb f816 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 80166da:	2305      	movs	r3, #5
 80166dc:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80166e0:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80166e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80166e8:	497e      	ldr	r1, [pc, #504]	; (80168e4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80166ea:	4618      	mov	r0, r3
 80166ec:	f7ea fcdc 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80166f0:	2306      	movs	r3, #6
 80166f2:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80166f6:	f207 1263 	addw	r2, r7, #355	; 0x163
 80166fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80166fe:	331c      	adds	r3, #28
 8016700:	4979      	ldr	r1, [pc, #484]	; (80168e8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8016702:	4618      	mov	r0, r3
 8016704:	f7ea fcf8 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8016708:	2307      	movs	r3, #7
 801670a:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 801670e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8016712:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016716:	3338      	adds	r3, #56	; 0x38
 8016718:	4974      	ldr	r1, [pc, #464]	; (80168ec <_Z41__static_initialization_and_destruction_0ii+0x390>)
 801671a:	4618      	mov	r0, r3
 801671c:	f7ea fcec 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8016720:	2308      	movs	r3, #8
 8016722:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8016726:	f207 1265 	addw	r2, r7, #357	; 0x165
 801672a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801672e:	3354      	adds	r3, #84	; 0x54
 8016730:	496f      	ldr	r1, [pc, #444]	; (80168f0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8016732:	4618      	mov	r0, r3
 8016734:	f7ea fcb8 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8016738:	2309      	movs	r3, #9
 801673a:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 801673e:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8016742:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016746:	3370      	adds	r3, #112	; 0x70
 8016748:	496a      	ldr	r1, [pc, #424]	; (80168f4 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 801674a:	4618      	mov	r0, r3
 801674c:	f7ea fcfc 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8016750:	2310      	movs	r3, #16
 8016752:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8016756:	f207 1267 	addw	r2, r7, #359	; 0x167
 801675a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801675e:	338c      	adds	r3, #140	; 0x8c
 8016760:	4965      	ldr	r1, [pc, #404]	; (80168f8 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8016762:	4618      	mov	r0, r3
 8016764:	f7ea fd18 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8016768:	2311      	movs	r3, #17
 801676a:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 801676e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8016772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016776:	33a8      	adds	r3, #168	; 0xa8
 8016778:	4960      	ldr	r1, [pc, #384]	; (80168fc <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 801677a:	4618      	mov	r0, r3
 801677c:	f7ea fce4 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8016780:	2312      	movs	r3, #18
 8016782:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8016786:	f207 1269 	addw	r2, r7, #361	; 0x169
 801678a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801678e:	33c4      	adds	r3, #196	; 0xc4
 8016790:	495b      	ldr	r1, [pc, #364]	; (8016900 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8016792:	4618      	mov	r0, r3
 8016794:	f7ea fc88 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8016798:	2313      	movs	r3, #19
 801679a:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 801679e:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 80167a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80167a6:	33e0      	adds	r3, #224	; 0xe0
 80167a8:	4956      	ldr	r1, [pc, #344]	; (8016904 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 80167aa:	4618      	mov	r0, r3
 80167ac:	f7ea fca4 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 80167b0:	2314      	movs	r3, #20
 80167b2:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 80167b6:	f207 126b 	addw	r2, r7, #363	; 0x16b
 80167ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80167be:	33fc      	adds	r3, #252	; 0xfc
 80167c0:	4951      	ldr	r1, [pc, #324]	; (8016908 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 80167c2:	4618      	mov	r0, r3
 80167c4:	f7ea fd10 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 80167c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80167cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80167d0:	601a      	str	r2, [r3, #0]
 80167d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80167d6:	220a      	movs	r2, #10
 80167d8:	605a      	str	r2, [r3, #4]
 80167da:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80167de:	4618      	mov	r0, r3
 80167e0:	f7eb f82a 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80167e4:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80167e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80167ec:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80167f0:	9300      	str	r3, [sp, #0]
 80167f2:	460b      	mov	r3, r1
 80167f4:	ca06      	ldmia	r2, {r1, r2}
 80167f6:	4845      	ldr	r0, [pc, #276]	; (801690c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80167f8:	f7eb f836 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80167fc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8016800:	4618      	mov	r0, r3
 8016802:	f7eb f825 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8016806:	f107 0448 	add.w	r4, r7, #72	; 0x48
 801680a:	f504 748c 	add.w	r4, r4, #280	; 0x118
 801680e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016812:	429c      	cmp	r4, r3
 8016814:	d004      	beq.n	8016820 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8016816:	3c1c      	subs	r4, #28
 8016818:	4620      	mov	r0, r4
 801681a:	f7ea fc38 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 801681e:	e7f6      	b.n	801680e <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8016820:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8016824:	2200      	movs	r2, #0
 8016826:	601a      	str	r2, [r3, #0]
 8016828:	605a      	str	r2, [r3, #4]
 801682a:	609a      	str	r2, [r3, #8]
 801682c:	233c      	movs	r3, #60	; 0x3c
 801682e:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8016832:	231b      	movs	r3, #27
 8016834:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8016838:	231c      	movs	r3, #28
 801683a:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 801683e:	233e      	movs	r3, #62	; 0x3e
 8016840:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8016844:	2319      	movs	r3, #25
 8016846:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 801684a:	231a      	movs	r3, #26
 801684c:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8016850:	233d      	movs	r3, #61	; 0x3d
 8016852:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8016856:	2318      	movs	r3, #24
 8016858:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 801685c:	231d      	movs	r3, #29
 801685e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8016862:	2321      	movs	r3, #33	; 0x21
 8016864:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8016868:	2317      	movs	r3, #23
 801686a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 801686e:	231e      	movs	r3, #30
 8016870:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8016874:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8016878:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801687c:	2304      	movs	r3, #4
 801687e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8016882:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8016886:	4618      	mov	r0, r3
 8016888:	f7eb f81e 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 801688c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8016890:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8016894:	9300      	str	r3, [sp, #0]
 8016896:	4613      	mov	r3, r2
 8016898:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 801689c:	ca06      	ldmia	r2, {r1, r2}
 801689e:	481c      	ldr	r0, [pc, #112]	; (8016910 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80168a0:	f7eb f82a 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80168a4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80168a8:	4618      	mov	r0, r3
 80168aa:	f7eb f819 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 80168ae:	1d3b      	adds	r3, r7, #4
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d10e      	bne.n	80168d4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80168b6:	463b      	mov	r3, r7
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80168be:	4293      	cmp	r3, r2
 80168c0:	d108      	bne.n	80168d4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80168c2:	4813      	ldr	r0, [pc, #76]	; (8016910 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80168c4:	f7ef fb48 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 80168c8:	4810      	ldr	r0, [pc, #64]	; (801690c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80168ca:	f7ef fb52 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 80168ce:	4804      	ldr	r0, [pc, #16]	; (80168e0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80168d0:	f7ef fb5c 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80168d4:	bf00      	nop
 80168d6:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80168da:	46bd      	mov	sp, r7
 80168dc:	bd90      	pop	{r4, r7, pc}
 80168de:	bf00      	nop
 80168e0:	2000047c 	.word	0x2000047c
 80168e4:	0801d19c 	.word	0x0801d19c
 80168e8:	0801d1a4 	.word	0x0801d1a4
 80168ec:	0801d1ac 	.word	0x0801d1ac
 80168f0:	0801d1b4 	.word	0x0801d1b4
 80168f4:	0801d1bc 	.word	0x0801d1bc
 80168f8:	0801d1c4 	.word	0x0801d1c4
 80168fc:	0801d1c8 	.word	0x0801d1c8
 8016900:	0801d1d0 	.word	0x0801d1d0
 8016904:	0801d1d8 	.word	0x0801d1d8
 8016908:	0801d1e0 	.word	0x0801d1e0
 801690c:	20000494 	.word	0x20000494
 8016910:	200004ac 	.word	0x200004ac

08016914 <_GLOBAL__sub_I__Z11my_main_runP20__UART_HandleTypeDef>:
 8016914:	b580      	push	{r7, lr}
 8016916:	af00      	add	r7, sp, #0
 8016918:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801691c:	2001      	movs	r0, #1
 801691e:	f7ff fe1d 	bl	801655c <_Z41__static_initialization_and_destruction_0ii>
 8016922:	bd80      	pop	{r7, pc}

08016924 <_GLOBAL__sub_D__Z11my_main_runP20__UART_HandleTypeDef>:
 8016924:	b580      	push	{r7, lr}
 8016926:	af00      	add	r7, sp, #0
 8016928:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801692c:	2000      	movs	r0, #0
 801692e:	f7ff fe15 	bl	801655c <_Z41__static_initialization_and_destruction_0ii>
 8016932:	bd80      	pop	{r7, pc}

08016934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8016934:	b480      	push	{r7}
 8016936:	b083      	sub	sp, #12
 8016938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 801693a:	4b0f      	ldr	r3, [pc, #60]	; (8016978 <HAL_MspInit+0x44>)
 801693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801693e:	4a0e      	ldr	r2, [pc, #56]	; (8016978 <HAL_MspInit+0x44>)
 8016940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016944:	6413      	str	r3, [r2, #64]	; 0x40
 8016946:	4b0c      	ldr	r3, [pc, #48]	; (8016978 <HAL_MspInit+0x44>)
 8016948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801694a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801694e:	607b      	str	r3, [r7, #4]
 8016950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016952:	4b09      	ldr	r3, [pc, #36]	; (8016978 <HAL_MspInit+0x44>)
 8016954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016956:	4a08      	ldr	r2, [pc, #32]	; (8016978 <HAL_MspInit+0x44>)
 8016958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801695c:	6453      	str	r3, [r2, #68]	; 0x44
 801695e:	4b06      	ldr	r3, [pc, #24]	; (8016978 <HAL_MspInit+0x44>)
 8016960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016966:	603b      	str	r3, [r7, #0]
 8016968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801696a:	bf00      	nop
 801696c:	370c      	adds	r7, #12
 801696e:	46bd      	mov	sp, r7
 8016970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016974:	4770      	bx	lr
 8016976:	bf00      	nop
 8016978:	40023800 	.word	0x40023800

0801697c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b08a      	sub	sp, #40	; 0x28
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016984:	f107 0314 	add.w	r3, r7, #20
 8016988:	2200      	movs	r2, #0
 801698a:	601a      	str	r2, [r3, #0]
 801698c:	605a      	str	r2, [r3, #4]
 801698e:	609a      	str	r2, [r3, #8]
 8016990:	60da      	str	r2, [r3, #12]
 8016992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	4a1b      	ldr	r2, [pc, #108]	; (8016a08 <HAL_UART_MspInit+0x8c>)
 801699a:	4293      	cmp	r3, r2
 801699c:	d130      	bne.n	8016a00 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801699e:	4b1b      	ldr	r3, [pc, #108]	; (8016a0c <HAL_UART_MspInit+0x90>)
 80169a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80169a2:	4a1a      	ldr	r2, [pc, #104]	; (8016a0c <HAL_UART_MspInit+0x90>)
 80169a4:	f043 0310 	orr.w	r3, r3, #16
 80169a8:	6453      	str	r3, [r2, #68]	; 0x44
 80169aa:	4b18      	ldr	r3, [pc, #96]	; (8016a0c <HAL_UART_MspInit+0x90>)
 80169ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80169ae:	f003 0310 	and.w	r3, r3, #16
 80169b2:	613b      	str	r3, [r7, #16]
 80169b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80169b6:	4b15      	ldr	r3, [pc, #84]	; (8016a0c <HAL_UART_MspInit+0x90>)
 80169b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80169ba:	4a14      	ldr	r2, [pc, #80]	; (8016a0c <HAL_UART_MspInit+0x90>)
 80169bc:	f043 0301 	orr.w	r3, r3, #1
 80169c0:	6313      	str	r3, [r2, #48]	; 0x30
 80169c2:	4b12      	ldr	r3, [pc, #72]	; (8016a0c <HAL_UART_MspInit+0x90>)
 80169c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80169c6:	f003 0301 	and.w	r3, r3, #1
 80169ca:	60fb      	str	r3, [r7, #12]
 80169cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80169ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80169d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80169d4:	2302      	movs	r3, #2
 80169d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80169d8:	2300      	movs	r3, #0
 80169da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80169dc:	2303      	movs	r3, #3
 80169de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80169e0:	2307      	movs	r3, #7
 80169e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80169e4:	f107 0314 	add.w	r3, r7, #20
 80169e8:	4619      	mov	r1, r3
 80169ea:	4809      	ldr	r0, [pc, #36]	; (8016a10 <HAL_UART_MspInit+0x94>)
 80169ec:	f000 fb6c 	bl	80170c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80169f0:	2200      	movs	r2, #0
 80169f2:	2100      	movs	r1, #0
 80169f4:	2025      	movs	r0, #37	; 0x25
 80169f6:	f000 fa9e 	bl	8016f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80169fa:	2025      	movs	r0, #37	; 0x25
 80169fc:	f000 fab7 	bl	8016f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8016a00:	bf00      	nop
 8016a02:	3728      	adds	r7, #40	; 0x28
 8016a04:	46bd      	mov	sp, r7
 8016a06:	bd80      	pop	{r7, pc}
 8016a08:	40011000 	.word	0x40011000
 8016a0c:	40023800 	.word	0x40023800
 8016a10:	40020000 	.word	0x40020000

08016a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8016a14:	b480      	push	{r7}
 8016a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8016a18:	e7fe      	b.n	8016a18 <NMI_Handler+0x4>

08016a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8016a1a:	b480      	push	{r7}
 8016a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8016a1e:	e7fe      	b.n	8016a1e <HardFault_Handler+0x4>

08016a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8016a20:	b480      	push	{r7}
 8016a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016a24:	e7fe      	b.n	8016a24 <MemManage_Handler+0x4>

08016a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8016a26:	b480      	push	{r7}
 8016a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8016a2a:	e7fe      	b.n	8016a2a <BusFault_Handler+0x4>

08016a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8016a2c:	b480      	push	{r7}
 8016a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8016a30:	e7fe      	b.n	8016a30 <UsageFault_Handler+0x4>

08016a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8016a32:	b480      	push	{r7}
 8016a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8016a36:	bf00      	nop
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3e:	4770      	bx	lr

08016a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8016a40:	b480      	push	{r7}
 8016a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016a44:	bf00      	nop
 8016a46:	46bd      	mov	sp, r7
 8016a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4c:	4770      	bx	lr

08016a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8016a4e:	b480      	push	{r7}
 8016a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8016a52:	bf00      	nop
 8016a54:	46bd      	mov	sp, r7
 8016a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5a:	4770      	bx	lr

08016a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8016a60:	f000 f94a 	bl	8016cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8016a64:	bf00      	nop
 8016a66:	bd80      	pop	{r7, pc}

08016a68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8016a6c:	4802      	ldr	r0, [pc, #8]	; (8016a78 <USART1_IRQHandler+0x10>)
 8016a6e:	f001 ff43 	bl	80188f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8016a72:	bf00      	nop
 8016a74:	bd80      	pop	{r7, pc}
 8016a76:	bf00      	nop
 8016a78:	200003f8 	.word	0x200003f8

08016a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8016a7c:	b480      	push	{r7}
 8016a7e:	af00      	add	r7, sp, #0
	return 1;
 8016a80:	2301      	movs	r3, #1
}
 8016a82:	4618      	mov	r0, r3
 8016a84:	46bd      	mov	sp, r7
 8016a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8a:	4770      	bx	lr

08016a8c <_kill>:

int _kill(int pid, int sig)
{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b082      	sub	sp, #8
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
 8016a94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8016a96:	f003 f875 	bl	8019b84 <__errno>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	2216      	movs	r2, #22
 8016a9e:	601a      	str	r2, [r3, #0]
	return -1;
 8016aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	3708      	adds	r7, #8
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	bd80      	pop	{r7, pc}

08016aac <_exit>:

void _exit (int status)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b082      	sub	sp, #8
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8016ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8016ab8:	6878      	ldr	r0, [r7, #4]
 8016aba:	f7ff ffe7 	bl	8016a8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8016abe:	e7fe      	b.n	8016abe <_exit+0x12>

08016ac0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b086      	sub	sp, #24
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	60f8      	str	r0, [r7, #12]
 8016ac8:	60b9      	str	r1, [r7, #8]
 8016aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016acc:	2300      	movs	r3, #0
 8016ace:	617b      	str	r3, [r7, #20]
 8016ad0:	e00a      	b.n	8016ae8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8016ad2:	f3af 8000 	nop.w
 8016ad6:	4601      	mov	r1, r0
 8016ad8:	68bb      	ldr	r3, [r7, #8]
 8016ada:	1c5a      	adds	r2, r3, #1
 8016adc:	60ba      	str	r2, [r7, #8]
 8016ade:	b2ca      	uxtb	r2, r1
 8016ae0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016ae2:	697b      	ldr	r3, [r7, #20]
 8016ae4:	3301      	adds	r3, #1
 8016ae6:	617b      	str	r3, [r7, #20]
 8016ae8:	697a      	ldr	r2, [r7, #20]
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	429a      	cmp	r2, r3
 8016aee:	dbf0      	blt.n	8016ad2 <_read+0x12>
	}

return len;
 8016af0:	687b      	ldr	r3, [r7, #4]
}
 8016af2:	4618      	mov	r0, r3
 8016af4:	3718      	adds	r7, #24
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd80      	pop	{r7, pc}

08016afa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8016afa:	b580      	push	{r7, lr}
 8016afc:	b086      	sub	sp, #24
 8016afe:	af00      	add	r7, sp, #0
 8016b00:	60f8      	str	r0, [r7, #12]
 8016b02:	60b9      	str	r1, [r7, #8]
 8016b04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016b06:	2300      	movs	r3, #0
 8016b08:	617b      	str	r3, [r7, #20]
 8016b0a:	e009      	b.n	8016b20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	1c5a      	adds	r2, r3, #1
 8016b10:	60ba      	str	r2, [r7, #8]
 8016b12:	781b      	ldrb	r3, [r3, #0]
 8016b14:	4618      	mov	r0, r3
 8016b16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016b1a:	697b      	ldr	r3, [r7, #20]
 8016b1c:	3301      	adds	r3, #1
 8016b1e:	617b      	str	r3, [r7, #20]
 8016b20:	697a      	ldr	r2, [r7, #20]
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	429a      	cmp	r2, r3
 8016b26:	dbf1      	blt.n	8016b0c <_write+0x12>
	}
	return len;
 8016b28:	687b      	ldr	r3, [r7, #4]
}
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	3718      	adds	r7, #24
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	bd80      	pop	{r7, pc}

08016b32 <_close>:

int _close(int file)
{
 8016b32:	b480      	push	{r7}
 8016b34:	b083      	sub	sp, #12
 8016b36:	af00      	add	r7, sp, #0
 8016b38:	6078      	str	r0, [r7, #4]
	return -1;
 8016b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016b3e:	4618      	mov	r0, r3
 8016b40:	370c      	adds	r7, #12
 8016b42:	46bd      	mov	sp, r7
 8016b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b48:	4770      	bx	lr

08016b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8016b4a:	b480      	push	{r7}
 8016b4c:	b083      	sub	sp, #12
 8016b4e:	af00      	add	r7, sp, #0
 8016b50:	6078      	str	r0, [r7, #4]
 8016b52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8016b54:	683b      	ldr	r3, [r7, #0]
 8016b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8016b5a:	605a      	str	r2, [r3, #4]
	return 0;
 8016b5c:	2300      	movs	r3, #0
}
 8016b5e:	4618      	mov	r0, r3
 8016b60:	370c      	adds	r7, #12
 8016b62:	46bd      	mov	sp, r7
 8016b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b68:	4770      	bx	lr

08016b6a <_isatty>:

int _isatty(int file)
{
 8016b6a:	b480      	push	{r7}
 8016b6c:	b083      	sub	sp, #12
 8016b6e:	af00      	add	r7, sp, #0
 8016b70:	6078      	str	r0, [r7, #4]
	return 1;
 8016b72:	2301      	movs	r3, #1
}
 8016b74:	4618      	mov	r0, r3
 8016b76:	370c      	adds	r7, #12
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7e:	4770      	bx	lr

08016b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8016b80:	b480      	push	{r7}
 8016b82:	b085      	sub	sp, #20
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	60f8      	str	r0, [r7, #12]
 8016b88:	60b9      	str	r1, [r7, #8]
 8016b8a:	607a      	str	r2, [r7, #4]
	return 0;
 8016b8c:	2300      	movs	r3, #0
}
 8016b8e:	4618      	mov	r0, r3
 8016b90:	3714      	adds	r7, #20
 8016b92:	46bd      	mov	sp, r7
 8016b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b98:	4770      	bx	lr
	...

08016b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b086      	sub	sp, #24
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8016ba4:	4a14      	ldr	r2, [pc, #80]	; (8016bf8 <_sbrk+0x5c>)
 8016ba6:	4b15      	ldr	r3, [pc, #84]	; (8016bfc <_sbrk+0x60>)
 8016ba8:	1ad3      	subs	r3, r2, r3
 8016baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8016bac:	697b      	ldr	r3, [r7, #20]
 8016bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8016bb0:	4b13      	ldr	r3, [pc, #76]	; (8016c00 <_sbrk+0x64>)
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d102      	bne.n	8016bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8016bb8:	4b11      	ldr	r3, [pc, #68]	; (8016c00 <_sbrk+0x64>)
 8016bba:	4a12      	ldr	r2, [pc, #72]	; (8016c04 <_sbrk+0x68>)
 8016bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8016bbe:	4b10      	ldr	r3, [pc, #64]	; (8016c00 <_sbrk+0x64>)
 8016bc0:	681a      	ldr	r2, [r3, #0]
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	4413      	add	r3, r2
 8016bc6:	693a      	ldr	r2, [r7, #16]
 8016bc8:	429a      	cmp	r2, r3
 8016bca:	d207      	bcs.n	8016bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8016bcc:	f002 ffda 	bl	8019b84 <__errno>
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	220c      	movs	r2, #12
 8016bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8016bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8016bda:	e009      	b.n	8016bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8016bdc:	4b08      	ldr	r3, [pc, #32]	; (8016c00 <_sbrk+0x64>)
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8016be2:	4b07      	ldr	r3, [pc, #28]	; (8016c00 <_sbrk+0x64>)
 8016be4:	681a      	ldr	r2, [r3, #0]
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	4413      	add	r3, r2
 8016bea:	4a05      	ldr	r2, [pc, #20]	; (8016c00 <_sbrk+0x64>)
 8016bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8016bee:	68fb      	ldr	r3, [r7, #12]
}
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	3718      	adds	r7, #24
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	bd80      	pop	{r7, pc}
 8016bf8:	20050000 	.word	0x20050000
 8016bfc:	00000400 	.word	0x00000400
 8016c00:	200004c4 	.word	0x200004c4
 8016c04:	200004e8 	.word	0x200004e8

08016c08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8016c08:	b480      	push	{r7}
 8016c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8016c0c:	4b06      	ldr	r3, [pc, #24]	; (8016c28 <SystemInit+0x20>)
 8016c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016c12:	4a05      	ldr	r2, [pc, #20]	; (8016c28 <SystemInit+0x20>)
 8016c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8016c1c:	bf00      	nop
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c24:	4770      	bx	lr
 8016c26:	bf00      	nop
 8016c28:	e000ed00 	.word	0xe000ed00

08016c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8016c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8016c30:	480d      	ldr	r0, [pc, #52]	; (8016c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8016c32:	490e      	ldr	r1, [pc, #56]	; (8016c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8016c34:	4a0e      	ldr	r2, [pc, #56]	; (8016c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8016c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8016c38:	e002      	b.n	8016c40 <LoopCopyDataInit>

08016c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8016c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8016c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8016c3e:	3304      	adds	r3, #4

08016c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8016c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8016c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8016c44:	d3f9      	bcc.n	8016c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8016c46:	4a0b      	ldr	r2, [pc, #44]	; (8016c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8016c48:	4c0b      	ldr	r4, [pc, #44]	; (8016c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8016c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8016c4c:	e001      	b.n	8016c52 <LoopFillZerobss>

08016c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8016c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8016c50:	3204      	adds	r2, #4

08016c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8016c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8016c54:	d3fb      	bcc.n	8016c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8016c56:	f7ff ffd7 	bl	8016c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8016c5a:	f002 ff99 	bl	8019b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8016c5e:	f7ff f961 	bl	8015f24 <main>
  bx  lr    
 8016c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8016c64:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8016c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8016c6c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8016c70:	0801d78c 	.word	0x0801d78c
  ldr r2, =_sbss
 8016c74:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8016c78:	200004e8 	.word	0x200004e8

08016c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8016c7c:	e7fe      	b.n	8016c7c <ADC_IRQHandler>

08016c7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8016c7e:	b580      	push	{r7, lr}
 8016c80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8016c82:	2003      	movs	r0, #3
 8016c84:	f000 f94c 	bl	8016f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8016c88:	200f      	movs	r0, #15
 8016c8a:	f000 f805 	bl	8016c98 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8016c8e:	f7ff fe51 	bl	8016934 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8016c92:	2300      	movs	r3, #0
}
 8016c94:	4618      	mov	r0, r3
 8016c96:	bd80      	pop	{r7, pc}

08016c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b082      	sub	sp, #8
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8016ca0:	4b12      	ldr	r3, [pc, #72]	; (8016cec <HAL_InitTick+0x54>)
 8016ca2:	681a      	ldr	r2, [r3, #0]
 8016ca4:	4b12      	ldr	r3, [pc, #72]	; (8016cf0 <HAL_InitTick+0x58>)
 8016ca6:	781b      	ldrb	r3, [r3, #0]
 8016ca8:	4619      	mov	r1, r3
 8016caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8016cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	f000 f967 	bl	8016f8a <HAL_SYSTICK_Config>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d001      	beq.n	8016cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8016cc2:	2301      	movs	r3, #1
 8016cc4:	e00e      	b.n	8016ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	2b0f      	cmp	r3, #15
 8016cca:	d80a      	bhi.n	8016ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8016ccc:	2200      	movs	r2, #0
 8016cce:	6879      	ldr	r1, [r7, #4]
 8016cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8016cd4:	f000 f92f 	bl	8016f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8016cd8:	4a06      	ldr	r2, [pc, #24]	; (8016cf4 <HAL_InitTick+0x5c>)
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8016cde:	2300      	movs	r3, #0
 8016ce0:	e000      	b.n	8016ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8016ce2:	2301      	movs	r3, #1
}
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	3708      	adds	r7, #8
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	bd80      	pop	{r7, pc}
 8016cec:	20000000 	.word	0x20000000
 8016cf0:	20000008 	.word	0x20000008
 8016cf4:	20000004 	.word	0x20000004

08016cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8016cf8:	b480      	push	{r7}
 8016cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8016cfc:	4b06      	ldr	r3, [pc, #24]	; (8016d18 <HAL_IncTick+0x20>)
 8016cfe:	781b      	ldrb	r3, [r3, #0]
 8016d00:	461a      	mov	r2, r3
 8016d02:	4b06      	ldr	r3, [pc, #24]	; (8016d1c <HAL_IncTick+0x24>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	4413      	add	r3, r2
 8016d08:	4a04      	ldr	r2, [pc, #16]	; (8016d1c <HAL_IncTick+0x24>)
 8016d0a:	6013      	str	r3, [r2, #0]
}
 8016d0c:	bf00      	nop
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d14:	4770      	bx	lr
 8016d16:	bf00      	nop
 8016d18:	20000008 	.word	0x20000008
 8016d1c:	200004d4 	.word	0x200004d4

08016d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8016d20:	b480      	push	{r7}
 8016d22:	af00      	add	r7, sp, #0
  return uwTick;
 8016d24:	4b03      	ldr	r3, [pc, #12]	; (8016d34 <HAL_GetTick+0x14>)
 8016d26:	681b      	ldr	r3, [r3, #0]
}
 8016d28:	4618      	mov	r0, r3
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d30:	4770      	bx	lr
 8016d32:	bf00      	nop
 8016d34:	200004d4 	.word	0x200004d4

08016d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b084      	sub	sp, #16
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8016d40:	f7ff ffee 	bl	8016d20 <HAL_GetTick>
 8016d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d50:	d005      	beq.n	8016d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8016d52:	4b0a      	ldr	r3, [pc, #40]	; (8016d7c <HAL_Delay+0x44>)
 8016d54:	781b      	ldrb	r3, [r3, #0]
 8016d56:	461a      	mov	r2, r3
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	4413      	add	r3, r2
 8016d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8016d5e:	bf00      	nop
 8016d60:	f7ff ffde 	bl	8016d20 <HAL_GetTick>
 8016d64:	4602      	mov	r2, r0
 8016d66:	68bb      	ldr	r3, [r7, #8]
 8016d68:	1ad3      	subs	r3, r2, r3
 8016d6a:	68fa      	ldr	r2, [r7, #12]
 8016d6c:	429a      	cmp	r2, r3
 8016d6e:	d8f7      	bhi.n	8016d60 <HAL_Delay+0x28>
  {
  }
}
 8016d70:	bf00      	nop
 8016d72:	bf00      	nop
 8016d74:	3710      	adds	r7, #16
 8016d76:	46bd      	mov	sp, r7
 8016d78:	bd80      	pop	{r7, pc}
 8016d7a:	bf00      	nop
 8016d7c:	20000008 	.word	0x20000008

08016d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016d80:	b480      	push	{r7}
 8016d82:	b085      	sub	sp, #20
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	f003 0307 	and.w	r3, r3, #7
 8016d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016d90:	4b0b      	ldr	r3, [pc, #44]	; (8016dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8016d92:	68db      	ldr	r3, [r3, #12]
 8016d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8016d96:	68ba      	ldr	r2, [r7, #8]
 8016d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8016d9c:	4013      	ands	r3, r2
 8016d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016da4:	68bb      	ldr	r3, [r7, #8]
 8016da6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8016da8:	4b06      	ldr	r3, [pc, #24]	; (8016dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8016daa:	4313      	orrs	r3, r2
 8016dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8016dae:	4a04      	ldr	r2, [pc, #16]	; (8016dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8016db0:	68bb      	ldr	r3, [r7, #8]
 8016db2:	60d3      	str	r3, [r2, #12]
}
 8016db4:	bf00      	nop
 8016db6:	3714      	adds	r7, #20
 8016db8:	46bd      	mov	sp, r7
 8016dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dbe:	4770      	bx	lr
 8016dc0:	e000ed00 	.word	0xe000ed00
 8016dc4:	05fa0000 	.word	0x05fa0000

08016dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8016dc8:	b480      	push	{r7}
 8016dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016dcc:	4b04      	ldr	r3, [pc, #16]	; (8016de0 <__NVIC_GetPriorityGrouping+0x18>)
 8016dce:	68db      	ldr	r3, [r3, #12]
 8016dd0:	0a1b      	lsrs	r3, r3, #8
 8016dd2:	f003 0307 	and.w	r3, r3, #7
}
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dde:	4770      	bx	lr
 8016de0:	e000ed00 	.word	0xe000ed00

08016de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016de4:	b480      	push	{r7}
 8016de6:	b083      	sub	sp, #12
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	4603      	mov	r3, r0
 8016dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	db0b      	blt.n	8016e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016df6:	79fb      	ldrb	r3, [r7, #7]
 8016df8:	f003 021f 	and.w	r2, r3, #31
 8016dfc:	4907      	ldr	r1, [pc, #28]	; (8016e1c <__NVIC_EnableIRQ+0x38>)
 8016dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e02:	095b      	lsrs	r3, r3, #5
 8016e04:	2001      	movs	r0, #1
 8016e06:	fa00 f202 	lsl.w	r2, r0, r2
 8016e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8016e0e:	bf00      	nop
 8016e10:	370c      	adds	r7, #12
 8016e12:	46bd      	mov	sp, r7
 8016e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e18:	4770      	bx	lr
 8016e1a:	bf00      	nop
 8016e1c:	e000e100 	.word	0xe000e100

08016e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8016e20:	b480      	push	{r7}
 8016e22:	b083      	sub	sp, #12
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	4603      	mov	r3, r0
 8016e28:	6039      	str	r1, [r7, #0]
 8016e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	db0a      	blt.n	8016e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016e34:	683b      	ldr	r3, [r7, #0]
 8016e36:	b2da      	uxtb	r2, r3
 8016e38:	490c      	ldr	r1, [pc, #48]	; (8016e6c <__NVIC_SetPriority+0x4c>)
 8016e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e3e:	0112      	lsls	r2, r2, #4
 8016e40:	b2d2      	uxtb	r2, r2
 8016e42:	440b      	add	r3, r1
 8016e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8016e48:	e00a      	b.n	8016e60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016e4a:	683b      	ldr	r3, [r7, #0]
 8016e4c:	b2da      	uxtb	r2, r3
 8016e4e:	4908      	ldr	r1, [pc, #32]	; (8016e70 <__NVIC_SetPriority+0x50>)
 8016e50:	79fb      	ldrb	r3, [r7, #7]
 8016e52:	f003 030f 	and.w	r3, r3, #15
 8016e56:	3b04      	subs	r3, #4
 8016e58:	0112      	lsls	r2, r2, #4
 8016e5a:	b2d2      	uxtb	r2, r2
 8016e5c:	440b      	add	r3, r1
 8016e5e:	761a      	strb	r2, [r3, #24]
}
 8016e60:	bf00      	nop
 8016e62:	370c      	adds	r7, #12
 8016e64:	46bd      	mov	sp, r7
 8016e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e6a:	4770      	bx	lr
 8016e6c:	e000e100 	.word	0xe000e100
 8016e70:	e000ed00 	.word	0xe000ed00

08016e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016e74:	b480      	push	{r7}
 8016e76:	b089      	sub	sp, #36	; 0x24
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	60f8      	str	r0, [r7, #12]
 8016e7c:	60b9      	str	r1, [r7, #8]
 8016e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	f003 0307 	and.w	r3, r3, #7
 8016e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016e88:	69fb      	ldr	r3, [r7, #28]
 8016e8a:	f1c3 0307 	rsb	r3, r3, #7
 8016e8e:	2b04      	cmp	r3, #4
 8016e90:	bf28      	it	cs
 8016e92:	2304      	movcs	r3, #4
 8016e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016e96:	69fb      	ldr	r3, [r7, #28]
 8016e98:	3304      	adds	r3, #4
 8016e9a:	2b06      	cmp	r3, #6
 8016e9c:	d902      	bls.n	8016ea4 <NVIC_EncodePriority+0x30>
 8016e9e:	69fb      	ldr	r3, [r7, #28]
 8016ea0:	3b03      	subs	r3, #3
 8016ea2:	e000      	b.n	8016ea6 <NVIC_EncodePriority+0x32>
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8016eac:	69bb      	ldr	r3, [r7, #24]
 8016eae:	fa02 f303 	lsl.w	r3, r2, r3
 8016eb2:	43da      	mvns	r2, r3
 8016eb4:	68bb      	ldr	r3, [r7, #8]
 8016eb6:	401a      	ands	r2, r3
 8016eb8:	697b      	ldr	r3, [r7, #20]
 8016eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8016ec0:	697b      	ldr	r3, [r7, #20]
 8016ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8016ec6:	43d9      	mvns	r1, r3
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016ecc:	4313      	orrs	r3, r2
         );
}
 8016ece:	4618      	mov	r0, r3
 8016ed0:	3724      	adds	r7, #36	; 0x24
 8016ed2:	46bd      	mov	sp, r7
 8016ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed8:	4770      	bx	lr
	...

08016edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b082      	sub	sp, #8
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	3b01      	subs	r3, #1
 8016ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016eec:	d301      	bcc.n	8016ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8016eee:	2301      	movs	r3, #1
 8016ef0:	e00f      	b.n	8016f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8016ef2:	4a0a      	ldr	r2, [pc, #40]	; (8016f1c <SysTick_Config+0x40>)
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	3b01      	subs	r3, #1
 8016ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8016efa:	210f      	movs	r1, #15
 8016efc:	f04f 30ff 	mov.w	r0, #4294967295
 8016f00:	f7ff ff8e 	bl	8016e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016f04:	4b05      	ldr	r3, [pc, #20]	; (8016f1c <SysTick_Config+0x40>)
 8016f06:	2200      	movs	r2, #0
 8016f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8016f0a:	4b04      	ldr	r3, [pc, #16]	; (8016f1c <SysTick_Config+0x40>)
 8016f0c:	2207      	movs	r2, #7
 8016f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016f10:	2300      	movs	r3, #0
}
 8016f12:	4618      	mov	r0, r3
 8016f14:	3708      	adds	r7, #8
 8016f16:	46bd      	mov	sp, r7
 8016f18:	bd80      	pop	{r7, pc}
 8016f1a:	bf00      	nop
 8016f1c:	e000e010 	.word	0xe000e010

08016f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b082      	sub	sp, #8
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016f28:	6878      	ldr	r0, [r7, #4]
 8016f2a:	f7ff ff29 	bl	8016d80 <__NVIC_SetPriorityGrouping>
}
 8016f2e:	bf00      	nop
 8016f30:	3708      	adds	r7, #8
 8016f32:	46bd      	mov	sp, r7
 8016f34:	bd80      	pop	{r7, pc}

08016f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016f36:	b580      	push	{r7, lr}
 8016f38:	b086      	sub	sp, #24
 8016f3a:	af00      	add	r7, sp, #0
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	60b9      	str	r1, [r7, #8]
 8016f40:	607a      	str	r2, [r7, #4]
 8016f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8016f44:	2300      	movs	r3, #0
 8016f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8016f48:	f7ff ff3e 	bl	8016dc8 <__NVIC_GetPriorityGrouping>
 8016f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016f4e:	687a      	ldr	r2, [r7, #4]
 8016f50:	68b9      	ldr	r1, [r7, #8]
 8016f52:	6978      	ldr	r0, [r7, #20]
 8016f54:	f7ff ff8e 	bl	8016e74 <NVIC_EncodePriority>
 8016f58:	4602      	mov	r2, r0
 8016f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f5e:	4611      	mov	r1, r2
 8016f60:	4618      	mov	r0, r3
 8016f62:	f7ff ff5d 	bl	8016e20 <__NVIC_SetPriority>
}
 8016f66:	bf00      	nop
 8016f68:	3718      	adds	r7, #24
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd80      	pop	{r7, pc}

08016f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016f6e:	b580      	push	{r7, lr}
 8016f70:	b082      	sub	sp, #8
 8016f72:	af00      	add	r7, sp, #0
 8016f74:	4603      	mov	r3, r0
 8016f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	f7ff ff31 	bl	8016de4 <__NVIC_EnableIRQ>
}
 8016f82:	bf00      	nop
 8016f84:	3708      	adds	r7, #8
 8016f86:	46bd      	mov	sp, r7
 8016f88:	bd80      	pop	{r7, pc}

08016f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8016f8a:	b580      	push	{r7, lr}
 8016f8c:	b082      	sub	sp, #8
 8016f8e:	af00      	add	r7, sp, #0
 8016f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8016f92:	6878      	ldr	r0, [r7, #4]
 8016f94:	f7ff ffa2 	bl	8016edc <SysTick_Config>
 8016f98:	4603      	mov	r3, r0
}
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	3708      	adds	r7, #8
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd80      	pop	{r7, pc}

08016fa2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016fa2:	b580      	push	{r7, lr}
 8016fa4:	b084      	sub	sp, #16
 8016fa6:	af00      	add	r7, sp, #0
 8016fa8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016fae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8016fb0:	f7ff feb6 	bl	8016d20 <HAL_GetTick>
 8016fb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016fbc:	b2db      	uxtb	r3, r3
 8016fbe:	2b02      	cmp	r3, #2
 8016fc0:	d008      	beq.n	8016fd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	2280      	movs	r2, #128	; 0x80
 8016fc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	2200      	movs	r2, #0
 8016fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8016fd0:	2301      	movs	r3, #1
 8016fd2:	e052      	b.n	801707a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	681a      	ldr	r2, [r3, #0]
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	f022 0216 	bic.w	r2, r2, #22
 8016fe2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	695a      	ldr	r2, [r3, #20]
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016ff2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d103      	bne.n	8017004 <HAL_DMA_Abort+0x62>
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017000:	2b00      	cmp	r3, #0
 8017002:	d007      	beq.n	8017014 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	681a      	ldr	r2, [r3, #0]
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	f022 0208 	bic.w	r2, r2, #8
 8017012:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	681a      	ldr	r2, [r3, #0]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	f022 0201 	bic.w	r2, r2, #1
 8017022:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8017024:	e013      	b.n	801704e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8017026:	f7ff fe7b 	bl	8016d20 <HAL_GetTick>
 801702a:	4602      	mov	r2, r0
 801702c:	68bb      	ldr	r3, [r7, #8]
 801702e:	1ad3      	subs	r3, r2, r3
 8017030:	2b05      	cmp	r3, #5
 8017032:	d90c      	bls.n	801704e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	2220      	movs	r2, #32
 8017038:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	2200      	movs	r2, #0
 801703e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	2203      	movs	r2, #3
 8017046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 801704a:	2303      	movs	r3, #3
 801704c:	e015      	b.n	801707a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	f003 0301 	and.w	r3, r3, #1
 8017058:	2b00      	cmp	r3, #0
 801705a:	d1e4      	bne.n	8017026 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017060:	223f      	movs	r2, #63	; 0x3f
 8017062:	409a      	lsls	r2, r3
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	2200      	movs	r2, #0
 801706c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	2201      	movs	r2, #1
 8017074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8017078:	2300      	movs	r3, #0
}
 801707a:	4618      	mov	r0, r3
 801707c:	3710      	adds	r7, #16
 801707e:	46bd      	mov	sp, r7
 8017080:	bd80      	pop	{r7, pc}

08017082 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8017082:	b480      	push	{r7}
 8017084:	b083      	sub	sp, #12
 8017086:	af00      	add	r7, sp, #0
 8017088:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017090:	b2db      	uxtb	r3, r3
 8017092:	2b02      	cmp	r3, #2
 8017094:	d004      	beq.n	80170a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	2280      	movs	r2, #128	; 0x80
 801709a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801709c:	2301      	movs	r3, #1
 801709e:	e00c      	b.n	80170ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	2205      	movs	r2, #5
 80170a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	681a      	ldr	r2, [r3, #0]
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	f022 0201 	bic.w	r2, r2, #1
 80170b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80170b8:	2300      	movs	r3, #0
}
 80170ba:	4618      	mov	r0, r3
 80170bc:	370c      	adds	r7, #12
 80170be:	46bd      	mov	sp, r7
 80170c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c4:	4770      	bx	lr
	...

080170c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80170c8:	b480      	push	{r7}
 80170ca:	b089      	sub	sp, #36	; 0x24
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	6078      	str	r0, [r7, #4]
 80170d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80170d2:	2300      	movs	r3, #0
 80170d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80170d6:	2300      	movs	r3, #0
 80170d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80170da:	2300      	movs	r3, #0
 80170dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80170de:	2300      	movs	r3, #0
 80170e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80170e2:	2300      	movs	r3, #0
 80170e4:	61fb      	str	r3, [r7, #28]
 80170e6:	e175      	b.n	80173d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80170e8:	2201      	movs	r2, #1
 80170ea:	69fb      	ldr	r3, [r7, #28]
 80170ec:	fa02 f303 	lsl.w	r3, r2, r3
 80170f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80170f2:	683b      	ldr	r3, [r7, #0]
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	697a      	ldr	r2, [r7, #20]
 80170f8:	4013      	ands	r3, r2
 80170fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80170fc:	693a      	ldr	r2, [r7, #16]
 80170fe:	697b      	ldr	r3, [r7, #20]
 8017100:	429a      	cmp	r2, r3
 8017102:	f040 8164 	bne.w	80173ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8017106:	683b      	ldr	r3, [r7, #0]
 8017108:	685b      	ldr	r3, [r3, #4]
 801710a:	2b01      	cmp	r3, #1
 801710c:	d00b      	beq.n	8017126 <HAL_GPIO_Init+0x5e>
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	685b      	ldr	r3, [r3, #4]
 8017112:	2b02      	cmp	r3, #2
 8017114:	d007      	beq.n	8017126 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8017116:	683b      	ldr	r3, [r7, #0]
 8017118:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801711a:	2b11      	cmp	r3, #17
 801711c:	d003      	beq.n	8017126 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801711e:	683b      	ldr	r3, [r7, #0]
 8017120:	685b      	ldr	r3, [r3, #4]
 8017122:	2b12      	cmp	r3, #18
 8017124:	d130      	bne.n	8017188 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	689b      	ldr	r3, [r3, #8]
 801712a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801712c:	69fb      	ldr	r3, [r7, #28]
 801712e:	005b      	lsls	r3, r3, #1
 8017130:	2203      	movs	r2, #3
 8017132:	fa02 f303 	lsl.w	r3, r2, r3
 8017136:	43db      	mvns	r3, r3
 8017138:	69ba      	ldr	r2, [r7, #24]
 801713a:	4013      	ands	r3, r2
 801713c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	68da      	ldr	r2, [r3, #12]
 8017142:	69fb      	ldr	r3, [r7, #28]
 8017144:	005b      	lsls	r3, r3, #1
 8017146:	fa02 f303 	lsl.w	r3, r2, r3
 801714a:	69ba      	ldr	r2, [r7, #24]
 801714c:	4313      	orrs	r3, r2
 801714e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	69ba      	ldr	r2, [r7, #24]
 8017154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	685b      	ldr	r3, [r3, #4]
 801715a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801715c:	2201      	movs	r2, #1
 801715e:	69fb      	ldr	r3, [r7, #28]
 8017160:	fa02 f303 	lsl.w	r3, r2, r3
 8017164:	43db      	mvns	r3, r3
 8017166:	69ba      	ldr	r2, [r7, #24]
 8017168:	4013      	ands	r3, r2
 801716a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801716c:	683b      	ldr	r3, [r7, #0]
 801716e:	685b      	ldr	r3, [r3, #4]
 8017170:	091b      	lsrs	r3, r3, #4
 8017172:	f003 0201 	and.w	r2, r3, #1
 8017176:	69fb      	ldr	r3, [r7, #28]
 8017178:	fa02 f303 	lsl.w	r3, r2, r3
 801717c:	69ba      	ldr	r2, [r7, #24]
 801717e:	4313      	orrs	r3, r2
 8017180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	69ba      	ldr	r2, [r7, #24]
 8017186:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	68db      	ldr	r3, [r3, #12]
 801718c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801718e:	69fb      	ldr	r3, [r7, #28]
 8017190:	005b      	lsls	r3, r3, #1
 8017192:	2203      	movs	r2, #3
 8017194:	fa02 f303 	lsl.w	r3, r2, r3
 8017198:	43db      	mvns	r3, r3
 801719a:	69ba      	ldr	r2, [r7, #24]
 801719c:	4013      	ands	r3, r2
 801719e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80171a0:	683b      	ldr	r3, [r7, #0]
 80171a2:	689a      	ldr	r2, [r3, #8]
 80171a4:	69fb      	ldr	r3, [r7, #28]
 80171a6:	005b      	lsls	r3, r3, #1
 80171a8:	fa02 f303 	lsl.w	r3, r2, r3
 80171ac:	69ba      	ldr	r2, [r7, #24]
 80171ae:	4313      	orrs	r3, r2
 80171b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	69ba      	ldr	r2, [r7, #24]
 80171b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80171b8:	683b      	ldr	r3, [r7, #0]
 80171ba:	685b      	ldr	r3, [r3, #4]
 80171bc:	2b02      	cmp	r3, #2
 80171be:	d003      	beq.n	80171c8 <HAL_GPIO_Init+0x100>
 80171c0:	683b      	ldr	r3, [r7, #0]
 80171c2:	685b      	ldr	r3, [r3, #4]
 80171c4:	2b12      	cmp	r3, #18
 80171c6:	d123      	bne.n	8017210 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80171c8:	69fb      	ldr	r3, [r7, #28]
 80171ca:	08da      	lsrs	r2, r3, #3
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	3208      	adds	r2, #8
 80171d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80171d6:	69fb      	ldr	r3, [r7, #28]
 80171d8:	f003 0307 	and.w	r3, r3, #7
 80171dc:	009b      	lsls	r3, r3, #2
 80171de:	220f      	movs	r2, #15
 80171e0:	fa02 f303 	lsl.w	r3, r2, r3
 80171e4:	43db      	mvns	r3, r3
 80171e6:	69ba      	ldr	r2, [r7, #24]
 80171e8:	4013      	ands	r3, r2
 80171ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80171ec:	683b      	ldr	r3, [r7, #0]
 80171ee:	691a      	ldr	r2, [r3, #16]
 80171f0:	69fb      	ldr	r3, [r7, #28]
 80171f2:	f003 0307 	and.w	r3, r3, #7
 80171f6:	009b      	lsls	r3, r3, #2
 80171f8:	fa02 f303 	lsl.w	r3, r2, r3
 80171fc:	69ba      	ldr	r2, [r7, #24]
 80171fe:	4313      	orrs	r3, r2
 8017200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8017202:	69fb      	ldr	r3, [r7, #28]
 8017204:	08da      	lsrs	r2, r3, #3
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	3208      	adds	r2, #8
 801720a:	69b9      	ldr	r1, [r7, #24]
 801720c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8017216:	69fb      	ldr	r3, [r7, #28]
 8017218:	005b      	lsls	r3, r3, #1
 801721a:	2203      	movs	r2, #3
 801721c:	fa02 f303 	lsl.w	r3, r2, r3
 8017220:	43db      	mvns	r3, r3
 8017222:	69ba      	ldr	r2, [r7, #24]
 8017224:	4013      	ands	r3, r2
 8017226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	685b      	ldr	r3, [r3, #4]
 801722c:	f003 0203 	and.w	r2, r3, #3
 8017230:	69fb      	ldr	r3, [r7, #28]
 8017232:	005b      	lsls	r3, r3, #1
 8017234:	fa02 f303 	lsl.w	r3, r2, r3
 8017238:	69ba      	ldr	r2, [r7, #24]
 801723a:	4313      	orrs	r3, r2
 801723c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	69ba      	ldr	r2, [r7, #24]
 8017242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8017244:	683b      	ldr	r3, [r7, #0]
 8017246:	685b      	ldr	r3, [r3, #4]
 8017248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801724c:	2b00      	cmp	r3, #0
 801724e:	f000 80be 	beq.w	80173ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017252:	4b66      	ldr	r3, [pc, #408]	; (80173ec <HAL_GPIO_Init+0x324>)
 8017254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017256:	4a65      	ldr	r2, [pc, #404]	; (80173ec <HAL_GPIO_Init+0x324>)
 8017258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801725c:	6453      	str	r3, [r2, #68]	; 0x44
 801725e:	4b63      	ldr	r3, [pc, #396]	; (80173ec <HAL_GPIO_Init+0x324>)
 8017260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017266:	60fb      	str	r3, [r7, #12]
 8017268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 801726a:	4a61      	ldr	r2, [pc, #388]	; (80173f0 <HAL_GPIO_Init+0x328>)
 801726c:	69fb      	ldr	r3, [r7, #28]
 801726e:	089b      	lsrs	r3, r3, #2
 8017270:	3302      	adds	r3, #2
 8017272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017276:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8017278:	69fb      	ldr	r3, [r7, #28]
 801727a:	f003 0303 	and.w	r3, r3, #3
 801727e:	009b      	lsls	r3, r3, #2
 8017280:	220f      	movs	r2, #15
 8017282:	fa02 f303 	lsl.w	r3, r2, r3
 8017286:	43db      	mvns	r3, r3
 8017288:	69ba      	ldr	r2, [r7, #24]
 801728a:	4013      	ands	r3, r2
 801728c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	4a58      	ldr	r2, [pc, #352]	; (80173f4 <HAL_GPIO_Init+0x32c>)
 8017292:	4293      	cmp	r3, r2
 8017294:	d037      	beq.n	8017306 <HAL_GPIO_Init+0x23e>
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	4a57      	ldr	r2, [pc, #348]	; (80173f8 <HAL_GPIO_Init+0x330>)
 801729a:	4293      	cmp	r3, r2
 801729c:	d031      	beq.n	8017302 <HAL_GPIO_Init+0x23a>
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	4a56      	ldr	r2, [pc, #344]	; (80173fc <HAL_GPIO_Init+0x334>)
 80172a2:	4293      	cmp	r3, r2
 80172a4:	d02b      	beq.n	80172fe <HAL_GPIO_Init+0x236>
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	4a55      	ldr	r2, [pc, #340]	; (8017400 <HAL_GPIO_Init+0x338>)
 80172aa:	4293      	cmp	r3, r2
 80172ac:	d025      	beq.n	80172fa <HAL_GPIO_Init+0x232>
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	4a54      	ldr	r2, [pc, #336]	; (8017404 <HAL_GPIO_Init+0x33c>)
 80172b2:	4293      	cmp	r3, r2
 80172b4:	d01f      	beq.n	80172f6 <HAL_GPIO_Init+0x22e>
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	4a53      	ldr	r2, [pc, #332]	; (8017408 <HAL_GPIO_Init+0x340>)
 80172ba:	4293      	cmp	r3, r2
 80172bc:	d019      	beq.n	80172f2 <HAL_GPIO_Init+0x22a>
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	4a52      	ldr	r2, [pc, #328]	; (801740c <HAL_GPIO_Init+0x344>)
 80172c2:	4293      	cmp	r3, r2
 80172c4:	d013      	beq.n	80172ee <HAL_GPIO_Init+0x226>
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	4a51      	ldr	r2, [pc, #324]	; (8017410 <HAL_GPIO_Init+0x348>)
 80172ca:	4293      	cmp	r3, r2
 80172cc:	d00d      	beq.n	80172ea <HAL_GPIO_Init+0x222>
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	4a50      	ldr	r2, [pc, #320]	; (8017414 <HAL_GPIO_Init+0x34c>)
 80172d2:	4293      	cmp	r3, r2
 80172d4:	d007      	beq.n	80172e6 <HAL_GPIO_Init+0x21e>
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	4a4f      	ldr	r2, [pc, #316]	; (8017418 <HAL_GPIO_Init+0x350>)
 80172da:	4293      	cmp	r3, r2
 80172dc:	d101      	bne.n	80172e2 <HAL_GPIO_Init+0x21a>
 80172de:	2309      	movs	r3, #9
 80172e0:	e012      	b.n	8017308 <HAL_GPIO_Init+0x240>
 80172e2:	230a      	movs	r3, #10
 80172e4:	e010      	b.n	8017308 <HAL_GPIO_Init+0x240>
 80172e6:	2308      	movs	r3, #8
 80172e8:	e00e      	b.n	8017308 <HAL_GPIO_Init+0x240>
 80172ea:	2307      	movs	r3, #7
 80172ec:	e00c      	b.n	8017308 <HAL_GPIO_Init+0x240>
 80172ee:	2306      	movs	r3, #6
 80172f0:	e00a      	b.n	8017308 <HAL_GPIO_Init+0x240>
 80172f2:	2305      	movs	r3, #5
 80172f4:	e008      	b.n	8017308 <HAL_GPIO_Init+0x240>
 80172f6:	2304      	movs	r3, #4
 80172f8:	e006      	b.n	8017308 <HAL_GPIO_Init+0x240>
 80172fa:	2303      	movs	r3, #3
 80172fc:	e004      	b.n	8017308 <HAL_GPIO_Init+0x240>
 80172fe:	2302      	movs	r3, #2
 8017300:	e002      	b.n	8017308 <HAL_GPIO_Init+0x240>
 8017302:	2301      	movs	r3, #1
 8017304:	e000      	b.n	8017308 <HAL_GPIO_Init+0x240>
 8017306:	2300      	movs	r3, #0
 8017308:	69fa      	ldr	r2, [r7, #28]
 801730a:	f002 0203 	and.w	r2, r2, #3
 801730e:	0092      	lsls	r2, r2, #2
 8017310:	4093      	lsls	r3, r2
 8017312:	69ba      	ldr	r2, [r7, #24]
 8017314:	4313      	orrs	r3, r2
 8017316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8017318:	4935      	ldr	r1, [pc, #212]	; (80173f0 <HAL_GPIO_Init+0x328>)
 801731a:	69fb      	ldr	r3, [r7, #28]
 801731c:	089b      	lsrs	r3, r3, #2
 801731e:	3302      	adds	r3, #2
 8017320:	69ba      	ldr	r2, [r7, #24]
 8017322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8017326:	4b3d      	ldr	r3, [pc, #244]	; (801741c <HAL_GPIO_Init+0x354>)
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801732c:	693b      	ldr	r3, [r7, #16]
 801732e:	43db      	mvns	r3, r3
 8017330:	69ba      	ldr	r2, [r7, #24]
 8017332:	4013      	ands	r3, r2
 8017334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8017336:	683b      	ldr	r3, [r7, #0]
 8017338:	685b      	ldr	r3, [r3, #4]
 801733a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801733e:	2b00      	cmp	r3, #0
 8017340:	d003      	beq.n	801734a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8017342:	69ba      	ldr	r2, [r7, #24]
 8017344:	693b      	ldr	r3, [r7, #16]
 8017346:	4313      	orrs	r3, r2
 8017348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801734a:	4a34      	ldr	r2, [pc, #208]	; (801741c <HAL_GPIO_Init+0x354>)
 801734c:	69bb      	ldr	r3, [r7, #24]
 801734e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8017350:	4b32      	ldr	r3, [pc, #200]	; (801741c <HAL_GPIO_Init+0x354>)
 8017352:	685b      	ldr	r3, [r3, #4]
 8017354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017356:	693b      	ldr	r3, [r7, #16]
 8017358:	43db      	mvns	r3, r3
 801735a:	69ba      	ldr	r2, [r7, #24]
 801735c:	4013      	ands	r3, r2
 801735e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8017360:	683b      	ldr	r3, [r7, #0]
 8017362:	685b      	ldr	r3, [r3, #4]
 8017364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017368:	2b00      	cmp	r3, #0
 801736a:	d003      	beq.n	8017374 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 801736c:	69ba      	ldr	r2, [r7, #24]
 801736e:	693b      	ldr	r3, [r7, #16]
 8017370:	4313      	orrs	r3, r2
 8017372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8017374:	4a29      	ldr	r2, [pc, #164]	; (801741c <HAL_GPIO_Init+0x354>)
 8017376:	69bb      	ldr	r3, [r7, #24]
 8017378:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801737a:	4b28      	ldr	r3, [pc, #160]	; (801741c <HAL_GPIO_Init+0x354>)
 801737c:	689b      	ldr	r3, [r3, #8]
 801737e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017380:	693b      	ldr	r3, [r7, #16]
 8017382:	43db      	mvns	r3, r3
 8017384:	69ba      	ldr	r2, [r7, #24]
 8017386:	4013      	ands	r3, r2
 8017388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	685b      	ldr	r3, [r3, #4]
 801738e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017392:	2b00      	cmp	r3, #0
 8017394:	d003      	beq.n	801739e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8017396:	69ba      	ldr	r2, [r7, #24]
 8017398:	693b      	ldr	r3, [r7, #16]
 801739a:	4313      	orrs	r3, r2
 801739c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801739e:	4a1f      	ldr	r2, [pc, #124]	; (801741c <HAL_GPIO_Init+0x354>)
 80173a0:	69bb      	ldr	r3, [r7, #24]
 80173a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80173a4:	4b1d      	ldr	r3, [pc, #116]	; (801741c <HAL_GPIO_Init+0x354>)
 80173a6:	68db      	ldr	r3, [r3, #12]
 80173a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80173aa:	693b      	ldr	r3, [r7, #16]
 80173ac:	43db      	mvns	r3, r3
 80173ae:	69ba      	ldr	r2, [r7, #24]
 80173b0:	4013      	ands	r3, r2
 80173b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80173b4:	683b      	ldr	r3, [r7, #0]
 80173b6:	685b      	ldr	r3, [r3, #4]
 80173b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d003      	beq.n	80173c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80173c0:	69ba      	ldr	r2, [r7, #24]
 80173c2:	693b      	ldr	r3, [r7, #16]
 80173c4:	4313      	orrs	r3, r2
 80173c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80173c8:	4a14      	ldr	r2, [pc, #80]	; (801741c <HAL_GPIO_Init+0x354>)
 80173ca:	69bb      	ldr	r3, [r7, #24]
 80173cc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80173ce:	69fb      	ldr	r3, [r7, #28]
 80173d0:	3301      	adds	r3, #1
 80173d2:	61fb      	str	r3, [r7, #28]
 80173d4:	69fb      	ldr	r3, [r7, #28]
 80173d6:	2b0f      	cmp	r3, #15
 80173d8:	f67f ae86 	bls.w	80170e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80173dc:	bf00      	nop
 80173de:	bf00      	nop
 80173e0:	3724      	adds	r7, #36	; 0x24
 80173e2:	46bd      	mov	sp, r7
 80173e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e8:	4770      	bx	lr
 80173ea:	bf00      	nop
 80173ec:	40023800 	.word	0x40023800
 80173f0:	40013800 	.word	0x40013800
 80173f4:	40020000 	.word	0x40020000
 80173f8:	40020400 	.word	0x40020400
 80173fc:	40020800 	.word	0x40020800
 8017400:	40020c00 	.word	0x40020c00
 8017404:	40021000 	.word	0x40021000
 8017408:	40021400 	.word	0x40021400
 801740c:	40021800 	.word	0x40021800
 8017410:	40021c00 	.word	0x40021c00
 8017414:	40022000 	.word	0x40022000
 8017418:	40022400 	.word	0x40022400
 801741c:	40013c00 	.word	0x40013c00

08017420 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b082      	sub	sp, #8
 8017424:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8017426:	2300      	movs	r3, #0
 8017428:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801742a:	4b23      	ldr	r3, [pc, #140]	; (80174b8 <HAL_PWREx_EnableOverDrive+0x98>)
 801742c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801742e:	4a22      	ldr	r2, [pc, #136]	; (80174b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8017430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017434:	6413      	str	r3, [r2, #64]	; 0x40
 8017436:	4b20      	ldr	r3, [pc, #128]	; (80174b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8017438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801743a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801743e:	603b      	str	r3, [r7, #0]
 8017440:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8017442:	4b1e      	ldr	r3, [pc, #120]	; (80174bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	4a1d      	ldr	r2, [pc, #116]	; (80174bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8017448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801744c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801744e:	f7ff fc67 	bl	8016d20 <HAL_GetTick>
 8017452:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8017454:	e009      	b.n	801746a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8017456:	f7ff fc63 	bl	8016d20 <HAL_GetTick>
 801745a:	4602      	mov	r2, r0
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	1ad3      	subs	r3, r2, r3
 8017460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017464:	d901      	bls.n	801746a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8017466:	2303      	movs	r3, #3
 8017468:	e022      	b.n	80174b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801746a:	4b14      	ldr	r3, [pc, #80]	; (80174bc <HAL_PWREx_EnableOverDrive+0x9c>)
 801746c:	685b      	ldr	r3, [r3, #4]
 801746e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017476:	d1ee      	bne.n	8017456 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8017478:	4b10      	ldr	r3, [pc, #64]	; (80174bc <HAL_PWREx_EnableOverDrive+0x9c>)
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	4a0f      	ldr	r2, [pc, #60]	; (80174bc <HAL_PWREx_EnableOverDrive+0x9c>)
 801747e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017482:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8017484:	f7ff fc4c 	bl	8016d20 <HAL_GetTick>
 8017488:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801748a:	e009      	b.n	80174a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801748c:	f7ff fc48 	bl	8016d20 <HAL_GetTick>
 8017490:	4602      	mov	r2, r0
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	1ad3      	subs	r3, r2, r3
 8017496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801749a:	d901      	bls.n	80174a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 801749c:	2303      	movs	r3, #3
 801749e:	e007      	b.n	80174b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80174a0:	4b06      	ldr	r3, [pc, #24]	; (80174bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80174a2:	685b      	ldr	r3, [r3, #4]
 80174a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80174a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80174ac:	d1ee      	bne.n	801748c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80174ae:	2300      	movs	r3, #0
}
 80174b0:	4618      	mov	r0, r3
 80174b2:	3708      	adds	r7, #8
 80174b4:	46bd      	mov	sp, r7
 80174b6:	bd80      	pop	{r7, pc}
 80174b8:	40023800 	.word	0x40023800
 80174bc:	40007000 	.word	0x40007000

080174c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b086      	sub	sp, #24
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80174c8:	2300      	movs	r3, #0
 80174ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d101      	bne.n	80174d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80174d2:	2301      	movs	r3, #1
 80174d4:	e291      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	f003 0301 	and.w	r3, r3, #1
 80174de:	2b00      	cmp	r3, #0
 80174e0:	f000 8087 	beq.w	80175f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80174e4:	4b96      	ldr	r3, [pc, #600]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 80174e6:	689b      	ldr	r3, [r3, #8]
 80174e8:	f003 030c 	and.w	r3, r3, #12
 80174ec:	2b04      	cmp	r3, #4
 80174ee:	d00c      	beq.n	801750a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80174f0:	4b93      	ldr	r3, [pc, #588]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 80174f2:	689b      	ldr	r3, [r3, #8]
 80174f4:	f003 030c 	and.w	r3, r3, #12
 80174f8:	2b08      	cmp	r3, #8
 80174fa:	d112      	bne.n	8017522 <HAL_RCC_OscConfig+0x62>
 80174fc:	4b90      	ldr	r3, [pc, #576]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 80174fe:	685b      	ldr	r3, [r3, #4]
 8017500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8017508:	d10b      	bne.n	8017522 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801750a:	4b8d      	ldr	r3, [pc, #564]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017512:	2b00      	cmp	r3, #0
 8017514:	d06c      	beq.n	80175f0 <HAL_RCC_OscConfig+0x130>
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	685b      	ldr	r3, [r3, #4]
 801751a:	2b00      	cmp	r3, #0
 801751c:	d168      	bne.n	80175f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801751e:	2301      	movs	r3, #1
 8017520:	e26b      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	685b      	ldr	r3, [r3, #4]
 8017526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801752a:	d106      	bne.n	801753a <HAL_RCC_OscConfig+0x7a>
 801752c:	4b84      	ldr	r3, [pc, #528]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	4a83      	ldr	r2, [pc, #524]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017536:	6013      	str	r3, [r2, #0]
 8017538:	e02e      	b.n	8017598 <HAL_RCC_OscConfig+0xd8>
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	685b      	ldr	r3, [r3, #4]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d10c      	bne.n	801755c <HAL_RCC_OscConfig+0x9c>
 8017542:	4b7f      	ldr	r3, [pc, #508]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	4a7e      	ldr	r2, [pc, #504]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801754c:	6013      	str	r3, [r2, #0]
 801754e:	4b7c      	ldr	r3, [pc, #496]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	4a7b      	ldr	r2, [pc, #492]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017558:	6013      	str	r3, [r2, #0]
 801755a:	e01d      	b.n	8017598 <HAL_RCC_OscConfig+0xd8>
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	685b      	ldr	r3, [r3, #4]
 8017560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8017564:	d10c      	bne.n	8017580 <HAL_RCC_OscConfig+0xc0>
 8017566:	4b76      	ldr	r3, [pc, #472]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	4a75      	ldr	r2, [pc, #468]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 801756c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017570:	6013      	str	r3, [r2, #0]
 8017572:	4b73      	ldr	r3, [pc, #460]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	4a72      	ldr	r2, [pc, #456]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801757c:	6013      	str	r3, [r2, #0]
 801757e:	e00b      	b.n	8017598 <HAL_RCC_OscConfig+0xd8>
 8017580:	4b6f      	ldr	r3, [pc, #444]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	4a6e      	ldr	r2, [pc, #440]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801758a:	6013      	str	r3, [r2, #0]
 801758c:	4b6c      	ldr	r3, [pc, #432]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	4a6b      	ldr	r2, [pc, #428]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	685b      	ldr	r3, [r3, #4]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d013      	beq.n	80175c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80175a0:	f7ff fbbe 	bl	8016d20 <HAL_GetTick>
 80175a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80175a6:	e008      	b.n	80175ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80175a8:	f7ff fbba 	bl	8016d20 <HAL_GetTick>
 80175ac:	4602      	mov	r2, r0
 80175ae:	693b      	ldr	r3, [r7, #16]
 80175b0:	1ad3      	subs	r3, r2, r3
 80175b2:	2b64      	cmp	r3, #100	; 0x64
 80175b4:	d901      	bls.n	80175ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80175b6:	2303      	movs	r3, #3
 80175b8:	e21f      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80175ba:	4b61      	ldr	r3, [pc, #388]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d0f0      	beq.n	80175a8 <HAL_RCC_OscConfig+0xe8>
 80175c6:	e014      	b.n	80175f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80175c8:	f7ff fbaa 	bl	8016d20 <HAL_GetTick>
 80175cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80175ce:	e008      	b.n	80175e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80175d0:	f7ff fba6 	bl	8016d20 <HAL_GetTick>
 80175d4:	4602      	mov	r2, r0
 80175d6:	693b      	ldr	r3, [r7, #16]
 80175d8:	1ad3      	subs	r3, r2, r3
 80175da:	2b64      	cmp	r3, #100	; 0x64
 80175dc:	d901      	bls.n	80175e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80175de:	2303      	movs	r3, #3
 80175e0:	e20b      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80175e2:	4b57      	ldr	r3, [pc, #348]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d1f0      	bne.n	80175d0 <HAL_RCC_OscConfig+0x110>
 80175ee:	e000      	b.n	80175f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80175f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	f003 0302 	and.w	r3, r3, #2
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d069      	beq.n	80176d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80175fe:	4b50      	ldr	r3, [pc, #320]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017600:	689b      	ldr	r3, [r3, #8]
 8017602:	f003 030c 	and.w	r3, r3, #12
 8017606:	2b00      	cmp	r3, #0
 8017608:	d00b      	beq.n	8017622 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801760a:	4b4d      	ldr	r3, [pc, #308]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 801760c:	689b      	ldr	r3, [r3, #8]
 801760e:	f003 030c 	and.w	r3, r3, #12
 8017612:	2b08      	cmp	r3, #8
 8017614:	d11c      	bne.n	8017650 <HAL_RCC_OscConfig+0x190>
 8017616:	4b4a      	ldr	r3, [pc, #296]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017618:	685b      	ldr	r3, [r3, #4]
 801761a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801761e:	2b00      	cmp	r3, #0
 8017620:	d116      	bne.n	8017650 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8017622:	4b47      	ldr	r3, [pc, #284]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	f003 0302 	and.w	r3, r3, #2
 801762a:	2b00      	cmp	r3, #0
 801762c:	d005      	beq.n	801763a <HAL_RCC_OscConfig+0x17a>
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	68db      	ldr	r3, [r3, #12]
 8017632:	2b01      	cmp	r3, #1
 8017634:	d001      	beq.n	801763a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8017636:	2301      	movs	r3, #1
 8017638:	e1df      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801763a:	4b41      	ldr	r3, [pc, #260]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	691b      	ldr	r3, [r3, #16]
 8017646:	00db      	lsls	r3, r3, #3
 8017648:	493d      	ldr	r1, [pc, #244]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 801764a:	4313      	orrs	r3, r2
 801764c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801764e:	e040      	b.n	80176d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	68db      	ldr	r3, [r3, #12]
 8017654:	2b00      	cmp	r3, #0
 8017656:	d023      	beq.n	80176a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017658:	4b39      	ldr	r3, [pc, #228]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	4a38      	ldr	r2, [pc, #224]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 801765e:	f043 0301 	orr.w	r3, r3, #1
 8017662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017664:	f7ff fb5c 	bl	8016d20 <HAL_GetTick>
 8017668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801766a:	e008      	b.n	801767e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801766c:	f7ff fb58 	bl	8016d20 <HAL_GetTick>
 8017670:	4602      	mov	r2, r0
 8017672:	693b      	ldr	r3, [r7, #16]
 8017674:	1ad3      	subs	r3, r2, r3
 8017676:	2b02      	cmp	r3, #2
 8017678:	d901      	bls.n	801767e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 801767a:	2303      	movs	r3, #3
 801767c:	e1bd      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801767e:	4b30      	ldr	r3, [pc, #192]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	f003 0302 	and.w	r3, r3, #2
 8017686:	2b00      	cmp	r3, #0
 8017688:	d0f0      	beq.n	801766c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801768a:	4b2d      	ldr	r3, [pc, #180]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	691b      	ldr	r3, [r3, #16]
 8017696:	00db      	lsls	r3, r3, #3
 8017698:	4929      	ldr	r1, [pc, #164]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 801769a:	4313      	orrs	r3, r2
 801769c:	600b      	str	r3, [r1, #0]
 801769e:	e018      	b.n	80176d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80176a0:	4b27      	ldr	r3, [pc, #156]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	4a26      	ldr	r2, [pc, #152]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 80176a6:	f023 0301 	bic.w	r3, r3, #1
 80176aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80176ac:	f7ff fb38 	bl	8016d20 <HAL_GetTick>
 80176b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80176b2:	e008      	b.n	80176c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80176b4:	f7ff fb34 	bl	8016d20 <HAL_GetTick>
 80176b8:	4602      	mov	r2, r0
 80176ba:	693b      	ldr	r3, [r7, #16]
 80176bc:	1ad3      	subs	r3, r2, r3
 80176be:	2b02      	cmp	r3, #2
 80176c0:	d901      	bls.n	80176c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80176c2:	2303      	movs	r3, #3
 80176c4:	e199      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80176c6:	4b1e      	ldr	r3, [pc, #120]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	f003 0302 	and.w	r3, r3, #2
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d1f0      	bne.n	80176b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	f003 0308 	and.w	r3, r3, #8
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d038      	beq.n	8017750 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	695b      	ldr	r3, [r3, #20]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d019      	beq.n	801771a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80176e6:	4b16      	ldr	r3, [pc, #88]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 80176e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80176ea:	4a15      	ldr	r2, [pc, #84]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 80176ec:	f043 0301 	orr.w	r3, r3, #1
 80176f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80176f2:	f7ff fb15 	bl	8016d20 <HAL_GetTick>
 80176f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80176f8:	e008      	b.n	801770c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80176fa:	f7ff fb11 	bl	8016d20 <HAL_GetTick>
 80176fe:	4602      	mov	r2, r0
 8017700:	693b      	ldr	r3, [r7, #16]
 8017702:	1ad3      	subs	r3, r2, r3
 8017704:	2b02      	cmp	r3, #2
 8017706:	d901      	bls.n	801770c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8017708:	2303      	movs	r3, #3
 801770a:	e176      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801770c:	4b0c      	ldr	r3, [pc, #48]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 801770e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017710:	f003 0302 	and.w	r3, r3, #2
 8017714:	2b00      	cmp	r3, #0
 8017716:	d0f0      	beq.n	80176fa <HAL_RCC_OscConfig+0x23a>
 8017718:	e01a      	b.n	8017750 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801771a:	4b09      	ldr	r3, [pc, #36]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 801771c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801771e:	4a08      	ldr	r2, [pc, #32]	; (8017740 <HAL_RCC_OscConfig+0x280>)
 8017720:	f023 0301 	bic.w	r3, r3, #1
 8017724:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017726:	f7ff fafb 	bl	8016d20 <HAL_GetTick>
 801772a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801772c:	e00a      	b.n	8017744 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801772e:	f7ff faf7 	bl	8016d20 <HAL_GetTick>
 8017732:	4602      	mov	r2, r0
 8017734:	693b      	ldr	r3, [r7, #16]
 8017736:	1ad3      	subs	r3, r2, r3
 8017738:	2b02      	cmp	r3, #2
 801773a:	d903      	bls.n	8017744 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801773c:	2303      	movs	r3, #3
 801773e:	e15c      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
 8017740:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8017744:	4b91      	ldr	r3, [pc, #580]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 8017746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017748:	f003 0302 	and.w	r3, r3, #2
 801774c:	2b00      	cmp	r3, #0
 801774e:	d1ee      	bne.n	801772e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	f003 0304 	and.w	r3, r3, #4
 8017758:	2b00      	cmp	r3, #0
 801775a:	f000 80a4 	beq.w	80178a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801775e:	4b8b      	ldr	r3, [pc, #556]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 8017760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017766:	2b00      	cmp	r3, #0
 8017768:	d10d      	bne.n	8017786 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801776a:	4b88      	ldr	r3, [pc, #544]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 801776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801776e:	4a87      	ldr	r2, [pc, #540]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 8017770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017774:	6413      	str	r3, [r2, #64]	; 0x40
 8017776:	4b85      	ldr	r3, [pc, #532]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 8017778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801777a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801777e:	60bb      	str	r3, [r7, #8]
 8017780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8017782:	2301      	movs	r3, #1
 8017784:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017786:	4b82      	ldr	r3, [pc, #520]	; (8017990 <HAL_RCC_OscConfig+0x4d0>)
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801778e:	2b00      	cmp	r3, #0
 8017790:	d118      	bne.n	80177c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8017792:	4b7f      	ldr	r3, [pc, #508]	; (8017990 <HAL_RCC_OscConfig+0x4d0>)
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	4a7e      	ldr	r2, [pc, #504]	; (8017990 <HAL_RCC_OscConfig+0x4d0>)
 8017798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801779c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801779e:	f7ff fabf 	bl	8016d20 <HAL_GetTick>
 80177a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80177a4:	e008      	b.n	80177b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80177a6:	f7ff fabb 	bl	8016d20 <HAL_GetTick>
 80177aa:	4602      	mov	r2, r0
 80177ac:	693b      	ldr	r3, [r7, #16]
 80177ae:	1ad3      	subs	r3, r2, r3
 80177b0:	2b64      	cmp	r3, #100	; 0x64
 80177b2:	d901      	bls.n	80177b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80177b4:	2303      	movs	r3, #3
 80177b6:	e120      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80177b8:	4b75      	ldr	r3, [pc, #468]	; (8017990 <HAL_RCC_OscConfig+0x4d0>)
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d0f0      	beq.n	80177a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	689b      	ldr	r3, [r3, #8]
 80177c8:	2b01      	cmp	r3, #1
 80177ca:	d106      	bne.n	80177da <HAL_RCC_OscConfig+0x31a>
 80177cc:	4b6f      	ldr	r3, [pc, #444]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 80177ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177d0:	4a6e      	ldr	r2, [pc, #440]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 80177d2:	f043 0301 	orr.w	r3, r3, #1
 80177d6:	6713      	str	r3, [r2, #112]	; 0x70
 80177d8:	e02d      	b.n	8017836 <HAL_RCC_OscConfig+0x376>
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	689b      	ldr	r3, [r3, #8]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d10c      	bne.n	80177fc <HAL_RCC_OscConfig+0x33c>
 80177e2:	4b6a      	ldr	r3, [pc, #424]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 80177e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177e6:	4a69      	ldr	r2, [pc, #420]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 80177e8:	f023 0301 	bic.w	r3, r3, #1
 80177ec:	6713      	str	r3, [r2, #112]	; 0x70
 80177ee:	4b67      	ldr	r3, [pc, #412]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 80177f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177f2:	4a66      	ldr	r2, [pc, #408]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 80177f4:	f023 0304 	bic.w	r3, r3, #4
 80177f8:	6713      	str	r3, [r2, #112]	; 0x70
 80177fa:	e01c      	b.n	8017836 <HAL_RCC_OscConfig+0x376>
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	689b      	ldr	r3, [r3, #8]
 8017800:	2b05      	cmp	r3, #5
 8017802:	d10c      	bne.n	801781e <HAL_RCC_OscConfig+0x35e>
 8017804:	4b61      	ldr	r3, [pc, #388]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 8017806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017808:	4a60      	ldr	r2, [pc, #384]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 801780a:	f043 0304 	orr.w	r3, r3, #4
 801780e:	6713      	str	r3, [r2, #112]	; 0x70
 8017810:	4b5e      	ldr	r3, [pc, #376]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 8017812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017814:	4a5d      	ldr	r2, [pc, #372]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 8017816:	f043 0301 	orr.w	r3, r3, #1
 801781a:	6713      	str	r3, [r2, #112]	; 0x70
 801781c:	e00b      	b.n	8017836 <HAL_RCC_OscConfig+0x376>
 801781e:	4b5b      	ldr	r3, [pc, #364]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 8017820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017822:	4a5a      	ldr	r2, [pc, #360]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 8017824:	f023 0301 	bic.w	r3, r3, #1
 8017828:	6713      	str	r3, [r2, #112]	; 0x70
 801782a:	4b58      	ldr	r3, [pc, #352]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 801782c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801782e:	4a57      	ldr	r2, [pc, #348]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 8017830:	f023 0304 	bic.w	r3, r3, #4
 8017834:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	689b      	ldr	r3, [r3, #8]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d015      	beq.n	801786a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801783e:	f7ff fa6f 	bl	8016d20 <HAL_GetTick>
 8017842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8017844:	e00a      	b.n	801785c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017846:	f7ff fa6b 	bl	8016d20 <HAL_GetTick>
 801784a:	4602      	mov	r2, r0
 801784c:	693b      	ldr	r3, [r7, #16]
 801784e:	1ad3      	subs	r3, r2, r3
 8017850:	f241 3288 	movw	r2, #5000	; 0x1388
 8017854:	4293      	cmp	r3, r2
 8017856:	d901      	bls.n	801785c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8017858:	2303      	movs	r3, #3
 801785a:	e0ce      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801785c:	4b4b      	ldr	r3, [pc, #300]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 801785e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017860:	f003 0302 	and.w	r3, r3, #2
 8017864:	2b00      	cmp	r3, #0
 8017866:	d0ee      	beq.n	8017846 <HAL_RCC_OscConfig+0x386>
 8017868:	e014      	b.n	8017894 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801786a:	f7ff fa59 	bl	8016d20 <HAL_GetTick>
 801786e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8017870:	e00a      	b.n	8017888 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017872:	f7ff fa55 	bl	8016d20 <HAL_GetTick>
 8017876:	4602      	mov	r2, r0
 8017878:	693b      	ldr	r3, [r7, #16]
 801787a:	1ad3      	subs	r3, r2, r3
 801787c:	f241 3288 	movw	r2, #5000	; 0x1388
 8017880:	4293      	cmp	r3, r2
 8017882:	d901      	bls.n	8017888 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8017884:	2303      	movs	r3, #3
 8017886:	e0b8      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8017888:	4b40      	ldr	r3, [pc, #256]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 801788a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801788c:	f003 0302 	and.w	r3, r3, #2
 8017890:	2b00      	cmp	r3, #0
 8017892:	d1ee      	bne.n	8017872 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8017894:	7dfb      	ldrb	r3, [r7, #23]
 8017896:	2b01      	cmp	r3, #1
 8017898:	d105      	bne.n	80178a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801789a:	4b3c      	ldr	r3, [pc, #240]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 801789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801789e:	4a3b      	ldr	r2, [pc, #236]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 80178a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80178a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	699b      	ldr	r3, [r3, #24]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	f000 80a4 	beq.w	80179f8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80178b0:	4b36      	ldr	r3, [pc, #216]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 80178b2:	689b      	ldr	r3, [r3, #8]
 80178b4:	f003 030c 	and.w	r3, r3, #12
 80178b8:	2b08      	cmp	r3, #8
 80178ba:	d06b      	beq.n	8017994 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	699b      	ldr	r3, [r3, #24]
 80178c0:	2b02      	cmp	r3, #2
 80178c2:	d149      	bne.n	8017958 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80178c4:	4b31      	ldr	r3, [pc, #196]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	4a30      	ldr	r2, [pc, #192]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 80178ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80178ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80178d0:	f7ff fa26 	bl	8016d20 <HAL_GetTick>
 80178d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80178d6:	e008      	b.n	80178ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80178d8:	f7ff fa22 	bl	8016d20 <HAL_GetTick>
 80178dc:	4602      	mov	r2, r0
 80178de:	693b      	ldr	r3, [r7, #16]
 80178e0:	1ad3      	subs	r3, r2, r3
 80178e2:	2b02      	cmp	r3, #2
 80178e4:	d901      	bls.n	80178ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80178e6:	2303      	movs	r3, #3
 80178e8:	e087      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80178ea:	4b28      	ldr	r3, [pc, #160]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d1f0      	bne.n	80178d8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	69da      	ldr	r2, [r3, #28]
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	6a1b      	ldr	r3, [r3, #32]
 80178fe:	431a      	orrs	r2, r3
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017904:	019b      	lsls	r3, r3, #6
 8017906:	431a      	orrs	r2, r3
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801790c:	085b      	lsrs	r3, r3, #1
 801790e:	3b01      	subs	r3, #1
 8017910:	041b      	lsls	r3, r3, #16
 8017912:	431a      	orrs	r2, r3
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017918:	061b      	lsls	r3, r3, #24
 801791a:	4313      	orrs	r3, r2
 801791c:	4a1b      	ldr	r2, [pc, #108]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 801791e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017922:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8017924:	4b19      	ldr	r3, [pc, #100]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	4a18      	ldr	r2, [pc, #96]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 801792a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801792e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017930:	f7ff f9f6 	bl	8016d20 <HAL_GetTick>
 8017934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017936:	e008      	b.n	801794a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017938:	f7ff f9f2 	bl	8016d20 <HAL_GetTick>
 801793c:	4602      	mov	r2, r0
 801793e:	693b      	ldr	r3, [r7, #16]
 8017940:	1ad3      	subs	r3, r2, r3
 8017942:	2b02      	cmp	r3, #2
 8017944:	d901      	bls.n	801794a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8017946:	2303      	movs	r3, #3
 8017948:	e057      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801794a:	4b10      	ldr	r3, [pc, #64]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017952:	2b00      	cmp	r3, #0
 8017954:	d0f0      	beq.n	8017938 <HAL_RCC_OscConfig+0x478>
 8017956:	e04f      	b.n	80179f8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017958:	4b0c      	ldr	r3, [pc, #48]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	4a0b      	ldr	r2, [pc, #44]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 801795e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8017962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017964:	f7ff f9dc 	bl	8016d20 <HAL_GetTick>
 8017968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801796a:	e008      	b.n	801797e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801796c:	f7ff f9d8 	bl	8016d20 <HAL_GetTick>
 8017970:	4602      	mov	r2, r0
 8017972:	693b      	ldr	r3, [r7, #16]
 8017974:	1ad3      	subs	r3, r2, r3
 8017976:	2b02      	cmp	r3, #2
 8017978:	d901      	bls.n	801797e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 801797a:	2303      	movs	r3, #3
 801797c:	e03d      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801797e:	4b03      	ldr	r3, [pc, #12]	; (801798c <HAL_RCC_OscConfig+0x4cc>)
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017986:	2b00      	cmp	r3, #0
 8017988:	d1f0      	bne.n	801796c <HAL_RCC_OscConfig+0x4ac>
 801798a:	e035      	b.n	80179f8 <HAL_RCC_OscConfig+0x538>
 801798c:	40023800 	.word	0x40023800
 8017990:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8017994:	4b1b      	ldr	r3, [pc, #108]	; (8017a04 <HAL_RCC_OscConfig+0x544>)
 8017996:	685b      	ldr	r3, [r3, #4]
 8017998:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	699b      	ldr	r3, [r3, #24]
 801799e:	2b01      	cmp	r3, #1
 80179a0:	d028      	beq.n	80179f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80179ac:	429a      	cmp	r2, r3
 80179ae:	d121      	bne.n	80179f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d11a      	bne.n	80179f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80179be:	68fa      	ldr	r2, [r7, #12]
 80179c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80179c4:	4013      	ands	r3, r2
 80179c6:	687a      	ldr	r2, [r7, #4]
 80179c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80179ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80179cc:	4293      	cmp	r3, r2
 80179ce:	d111      	bne.n	80179f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179da:	085b      	lsrs	r3, r3, #1
 80179dc:	3b01      	subs	r3, #1
 80179de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80179e0:	429a      	cmp	r2, r3
 80179e2:	d107      	bne.n	80179f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80179f0:	429a      	cmp	r2, r3
 80179f2:	d001      	beq.n	80179f8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80179f4:	2301      	movs	r3, #1
 80179f6:	e000      	b.n	80179fa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80179f8:	2300      	movs	r3, #0
}
 80179fa:	4618      	mov	r0, r3
 80179fc:	3718      	adds	r7, #24
 80179fe:	46bd      	mov	sp, r7
 8017a00:	bd80      	pop	{r7, pc}
 8017a02:	bf00      	nop
 8017a04:	40023800 	.word	0x40023800

08017a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b084      	sub	sp, #16
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
 8017a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8017a12:	2300      	movs	r3, #0
 8017a14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d101      	bne.n	8017a20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8017a1c:	2301      	movs	r3, #1
 8017a1e:	e0d0      	b.n	8017bc2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017a20:	4b6a      	ldr	r3, [pc, #424]	; (8017bcc <HAL_RCC_ClockConfig+0x1c4>)
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	f003 030f 	and.w	r3, r3, #15
 8017a28:	683a      	ldr	r2, [r7, #0]
 8017a2a:	429a      	cmp	r2, r3
 8017a2c:	d910      	bls.n	8017a50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017a2e:	4b67      	ldr	r3, [pc, #412]	; (8017bcc <HAL_RCC_ClockConfig+0x1c4>)
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	f023 020f 	bic.w	r2, r3, #15
 8017a36:	4965      	ldr	r1, [pc, #404]	; (8017bcc <HAL_RCC_ClockConfig+0x1c4>)
 8017a38:	683b      	ldr	r3, [r7, #0]
 8017a3a:	4313      	orrs	r3, r2
 8017a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017a3e:	4b63      	ldr	r3, [pc, #396]	; (8017bcc <HAL_RCC_ClockConfig+0x1c4>)
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	f003 030f 	and.w	r3, r3, #15
 8017a46:	683a      	ldr	r2, [r7, #0]
 8017a48:	429a      	cmp	r2, r3
 8017a4a:	d001      	beq.n	8017a50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8017a4c:	2301      	movs	r3, #1
 8017a4e:	e0b8      	b.n	8017bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	f003 0302 	and.w	r3, r3, #2
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d020      	beq.n	8017a9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	f003 0304 	and.w	r3, r3, #4
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d005      	beq.n	8017a74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8017a68:	4b59      	ldr	r3, [pc, #356]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017a6a:	689b      	ldr	r3, [r3, #8]
 8017a6c:	4a58      	ldr	r2, [pc, #352]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017a6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8017a72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	f003 0308 	and.w	r3, r3, #8
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d005      	beq.n	8017a8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8017a80:	4b53      	ldr	r3, [pc, #332]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017a82:	689b      	ldr	r3, [r3, #8]
 8017a84:	4a52      	ldr	r2, [pc, #328]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017a86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8017a8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017a8c:	4b50      	ldr	r3, [pc, #320]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017a8e:	689b      	ldr	r3, [r3, #8]
 8017a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	689b      	ldr	r3, [r3, #8]
 8017a98:	494d      	ldr	r1, [pc, #308]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017a9a:	4313      	orrs	r3, r2
 8017a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	f003 0301 	and.w	r3, r3, #1
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d040      	beq.n	8017b2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	685b      	ldr	r3, [r3, #4]
 8017aae:	2b01      	cmp	r3, #1
 8017ab0:	d107      	bne.n	8017ac2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017ab2:	4b47      	ldr	r3, [pc, #284]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d115      	bne.n	8017aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8017abe:	2301      	movs	r3, #1
 8017ac0:	e07f      	b.n	8017bc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	685b      	ldr	r3, [r3, #4]
 8017ac6:	2b02      	cmp	r3, #2
 8017ac8:	d107      	bne.n	8017ada <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017aca:	4b41      	ldr	r3, [pc, #260]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d109      	bne.n	8017aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8017ad6:	2301      	movs	r3, #1
 8017ad8:	e073      	b.n	8017bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017ada:	4b3d      	ldr	r3, [pc, #244]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	f003 0302 	and.w	r3, r3, #2
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d101      	bne.n	8017aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	e06b      	b.n	8017bc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8017aea:	4b39      	ldr	r3, [pc, #228]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017aec:	689b      	ldr	r3, [r3, #8]
 8017aee:	f023 0203 	bic.w	r2, r3, #3
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	685b      	ldr	r3, [r3, #4]
 8017af6:	4936      	ldr	r1, [pc, #216]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017af8:	4313      	orrs	r3, r2
 8017afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017afc:	f7ff f910 	bl	8016d20 <HAL_GetTick>
 8017b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017b02:	e00a      	b.n	8017b1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017b04:	f7ff f90c 	bl	8016d20 <HAL_GetTick>
 8017b08:	4602      	mov	r2, r0
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	1ad3      	subs	r3, r2, r3
 8017b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8017b12:	4293      	cmp	r3, r2
 8017b14:	d901      	bls.n	8017b1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8017b16:	2303      	movs	r3, #3
 8017b18:	e053      	b.n	8017bc2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017b1a:	4b2d      	ldr	r3, [pc, #180]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017b1c:	689b      	ldr	r3, [r3, #8]
 8017b1e:	f003 020c 	and.w	r2, r3, #12
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	685b      	ldr	r3, [r3, #4]
 8017b26:	009b      	lsls	r3, r3, #2
 8017b28:	429a      	cmp	r2, r3
 8017b2a:	d1eb      	bne.n	8017b04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017b2c:	4b27      	ldr	r3, [pc, #156]	; (8017bcc <HAL_RCC_ClockConfig+0x1c4>)
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	f003 030f 	and.w	r3, r3, #15
 8017b34:	683a      	ldr	r2, [r7, #0]
 8017b36:	429a      	cmp	r2, r3
 8017b38:	d210      	bcs.n	8017b5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017b3a:	4b24      	ldr	r3, [pc, #144]	; (8017bcc <HAL_RCC_ClockConfig+0x1c4>)
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	f023 020f 	bic.w	r2, r3, #15
 8017b42:	4922      	ldr	r1, [pc, #136]	; (8017bcc <HAL_RCC_ClockConfig+0x1c4>)
 8017b44:	683b      	ldr	r3, [r7, #0]
 8017b46:	4313      	orrs	r3, r2
 8017b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017b4a:	4b20      	ldr	r3, [pc, #128]	; (8017bcc <HAL_RCC_ClockConfig+0x1c4>)
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	f003 030f 	and.w	r3, r3, #15
 8017b52:	683a      	ldr	r2, [r7, #0]
 8017b54:	429a      	cmp	r2, r3
 8017b56:	d001      	beq.n	8017b5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8017b58:	2301      	movs	r3, #1
 8017b5a:	e032      	b.n	8017bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	f003 0304 	and.w	r3, r3, #4
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d008      	beq.n	8017b7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8017b68:	4b19      	ldr	r3, [pc, #100]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017b6a:	689b      	ldr	r3, [r3, #8]
 8017b6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	68db      	ldr	r3, [r3, #12]
 8017b74:	4916      	ldr	r1, [pc, #88]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017b76:	4313      	orrs	r3, r2
 8017b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	f003 0308 	and.w	r3, r3, #8
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d009      	beq.n	8017b9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8017b86:	4b12      	ldr	r3, [pc, #72]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017b88:	689b      	ldr	r3, [r3, #8]
 8017b8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	691b      	ldr	r3, [r3, #16]
 8017b92:	00db      	lsls	r3, r3, #3
 8017b94:	490e      	ldr	r1, [pc, #56]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017b96:	4313      	orrs	r3, r2
 8017b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8017b9a:	f000 f821 	bl	8017be0 <HAL_RCC_GetSysClockFreq>
 8017b9e:	4602      	mov	r2, r0
 8017ba0:	4b0b      	ldr	r3, [pc, #44]	; (8017bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8017ba2:	689b      	ldr	r3, [r3, #8]
 8017ba4:	091b      	lsrs	r3, r3, #4
 8017ba6:	f003 030f 	and.w	r3, r3, #15
 8017baa:	490a      	ldr	r1, [pc, #40]	; (8017bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8017bac:	5ccb      	ldrb	r3, [r1, r3]
 8017bae:	fa22 f303 	lsr.w	r3, r2, r3
 8017bb2:	4a09      	ldr	r2, [pc, #36]	; (8017bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8017bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8017bb6:	4b09      	ldr	r3, [pc, #36]	; (8017bdc <HAL_RCC_ClockConfig+0x1d4>)
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f7ff f86c 	bl	8016c98 <HAL_InitTick>

  return HAL_OK;
 8017bc0:	2300      	movs	r3, #0
}
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	3710      	adds	r7, #16
 8017bc6:	46bd      	mov	sp, r7
 8017bc8:	bd80      	pop	{r7, pc}
 8017bca:	bf00      	nop
 8017bcc:	40023c00 	.word	0x40023c00
 8017bd0:	40023800 	.word	0x40023800
 8017bd4:	0801d270 	.word	0x0801d270
 8017bd8:	20000000 	.word	0x20000000
 8017bdc:	20000004 	.word	0x20000004

08017be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017be0:	b5b0      	push	{r4, r5, r7, lr}
 8017be2:	b084      	sub	sp, #16
 8017be4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8017be6:	2100      	movs	r1, #0
 8017be8:	6079      	str	r1, [r7, #4]
 8017bea:	2100      	movs	r1, #0
 8017bec:	60f9      	str	r1, [r7, #12]
 8017bee:	2100      	movs	r1, #0
 8017bf0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8017bf2:	2100      	movs	r1, #0
 8017bf4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017bf6:	4952      	ldr	r1, [pc, #328]	; (8017d40 <HAL_RCC_GetSysClockFreq+0x160>)
 8017bf8:	6889      	ldr	r1, [r1, #8]
 8017bfa:	f001 010c 	and.w	r1, r1, #12
 8017bfe:	2908      	cmp	r1, #8
 8017c00:	d00d      	beq.n	8017c1e <HAL_RCC_GetSysClockFreq+0x3e>
 8017c02:	2908      	cmp	r1, #8
 8017c04:	f200 8094 	bhi.w	8017d30 <HAL_RCC_GetSysClockFreq+0x150>
 8017c08:	2900      	cmp	r1, #0
 8017c0a:	d002      	beq.n	8017c12 <HAL_RCC_GetSysClockFreq+0x32>
 8017c0c:	2904      	cmp	r1, #4
 8017c0e:	d003      	beq.n	8017c18 <HAL_RCC_GetSysClockFreq+0x38>
 8017c10:	e08e      	b.n	8017d30 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8017c12:	4b4c      	ldr	r3, [pc, #304]	; (8017d44 <HAL_RCC_GetSysClockFreq+0x164>)
 8017c14:	60bb      	str	r3, [r7, #8]
      break;
 8017c16:	e08e      	b.n	8017d36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8017c18:	4b4b      	ldr	r3, [pc, #300]	; (8017d48 <HAL_RCC_GetSysClockFreq+0x168>)
 8017c1a:	60bb      	str	r3, [r7, #8]
      break;
 8017c1c:	e08b      	b.n	8017d36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8017c1e:	4948      	ldr	r1, [pc, #288]	; (8017d40 <HAL_RCC_GetSysClockFreq+0x160>)
 8017c20:	6849      	ldr	r1, [r1, #4]
 8017c22:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8017c26:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8017c28:	4945      	ldr	r1, [pc, #276]	; (8017d40 <HAL_RCC_GetSysClockFreq+0x160>)
 8017c2a:	6849      	ldr	r1, [r1, #4]
 8017c2c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8017c30:	2900      	cmp	r1, #0
 8017c32:	d024      	beq.n	8017c7e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017c34:	4942      	ldr	r1, [pc, #264]	; (8017d40 <HAL_RCC_GetSysClockFreq+0x160>)
 8017c36:	6849      	ldr	r1, [r1, #4]
 8017c38:	0989      	lsrs	r1, r1, #6
 8017c3a:	4608      	mov	r0, r1
 8017c3c:	f04f 0100 	mov.w	r1, #0
 8017c40:	f240 14ff 	movw	r4, #511	; 0x1ff
 8017c44:	f04f 0500 	mov.w	r5, #0
 8017c48:	ea00 0204 	and.w	r2, r0, r4
 8017c4c:	ea01 0305 	and.w	r3, r1, r5
 8017c50:	493d      	ldr	r1, [pc, #244]	; (8017d48 <HAL_RCC_GetSysClockFreq+0x168>)
 8017c52:	fb01 f003 	mul.w	r0, r1, r3
 8017c56:	2100      	movs	r1, #0
 8017c58:	fb01 f102 	mul.w	r1, r1, r2
 8017c5c:	1844      	adds	r4, r0, r1
 8017c5e:	493a      	ldr	r1, [pc, #232]	; (8017d48 <HAL_RCC_GetSysClockFreq+0x168>)
 8017c60:	fba2 0101 	umull	r0, r1, r2, r1
 8017c64:	1863      	adds	r3, r4, r1
 8017c66:	4619      	mov	r1, r3
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	461a      	mov	r2, r3
 8017c6c:	f04f 0300 	mov.w	r3, #0
 8017c70:	f7e9 f802 	bl	8000c78 <__aeabi_uldivmod>
 8017c74:	4602      	mov	r2, r0
 8017c76:	460b      	mov	r3, r1
 8017c78:	4613      	mov	r3, r2
 8017c7a:	60fb      	str	r3, [r7, #12]
 8017c7c:	e04a      	b.n	8017d14 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017c7e:	4b30      	ldr	r3, [pc, #192]	; (8017d40 <HAL_RCC_GetSysClockFreq+0x160>)
 8017c80:	685b      	ldr	r3, [r3, #4]
 8017c82:	099b      	lsrs	r3, r3, #6
 8017c84:	461a      	mov	r2, r3
 8017c86:	f04f 0300 	mov.w	r3, #0
 8017c8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8017c8e:	f04f 0100 	mov.w	r1, #0
 8017c92:	ea02 0400 	and.w	r4, r2, r0
 8017c96:	ea03 0501 	and.w	r5, r3, r1
 8017c9a:	4620      	mov	r0, r4
 8017c9c:	4629      	mov	r1, r5
 8017c9e:	f04f 0200 	mov.w	r2, #0
 8017ca2:	f04f 0300 	mov.w	r3, #0
 8017ca6:	014b      	lsls	r3, r1, #5
 8017ca8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8017cac:	0142      	lsls	r2, r0, #5
 8017cae:	4610      	mov	r0, r2
 8017cb0:	4619      	mov	r1, r3
 8017cb2:	1b00      	subs	r0, r0, r4
 8017cb4:	eb61 0105 	sbc.w	r1, r1, r5
 8017cb8:	f04f 0200 	mov.w	r2, #0
 8017cbc:	f04f 0300 	mov.w	r3, #0
 8017cc0:	018b      	lsls	r3, r1, #6
 8017cc2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8017cc6:	0182      	lsls	r2, r0, #6
 8017cc8:	1a12      	subs	r2, r2, r0
 8017cca:	eb63 0301 	sbc.w	r3, r3, r1
 8017cce:	f04f 0000 	mov.w	r0, #0
 8017cd2:	f04f 0100 	mov.w	r1, #0
 8017cd6:	00d9      	lsls	r1, r3, #3
 8017cd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8017cdc:	00d0      	lsls	r0, r2, #3
 8017cde:	4602      	mov	r2, r0
 8017ce0:	460b      	mov	r3, r1
 8017ce2:	1912      	adds	r2, r2, r4
 8017ce4:	eb45 0303 	adc.w	r3, r5, r3
 8017ce8:	f04f 0000 	mov.w	r0, #0
 8017cec:	f04f 0100 	mov.w	r1, #0
 8017cf0:	0299      	lsls	r1, r3, #10
 8017cf2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8017cf6:	0290      	lsls	r0, r2, #10
 8017cf8:	4602      	mov	r2, r0
 8017cfa:	460b      	mov	r3, r1
 8017cfc:	4610      	mov	r0, r2
 8017cfe:	4619      	mov	r1, r3
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	461a      	mov	r2, r3
 8017d04:	f04f 0300 	mov.w	r3, #0
 8017d08:	f7e8 ffb6 	bl	8000c78 <__aeabi_uldivmod>
 8017d0c:	4602      	mov	r2, r0
 8017d0e:	460b      	mov	r3, r1
 8017d10:	4613      	mov	r3, r2
 8017d12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8017d14:	4b0a      	ldr	r3, [pc, #40]	; (8017d40 <HAL_RCC_GetSysClockFreq+0x160>)
 8017d16:	685b      	ldr	r3, [r3, #4]
 8017d18:	0c1b      	lsrs	r3, r3, #16
 8017d1a:	f003 0303 	and.w	r3, r3, #3
 8017d1e:	3301      	adds	r3, #1
 8017d20:	005b      	lsls	r3, r3, #1
 8017d22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8017d24:	68fa      	ldr	r2, [r7, #12]
 8017d26:	683b      	ldr	r3, [r7, #0]
 8017d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8017d2c:	60bb      	str	r3, [r7, #8]
      break;
 8017d2e:	e002      	b.n	8017d36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8017d30:	4b04      	ldr	r3, [pc, #16]	; (8017d44 <HAL_RCC_GetSysClockFreq+0x164>)
 8017d32:	60bb      	str	r3, [r7, #8]
      break;
 8017d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8017d36:	68bb      	ldr	r3, [r7, #8]
}
 8017d38:	4618      	mov	r0, r3
 8017d3a:	3710      	adds	r7, #16
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8017d40:	40023800 	.word	0x40023800
 8017d44:	00f42400 	.word	0x00f42400
 8017d48:	017d7840 	.word	0x017d7840

08017d4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017d4c:	b480      	push	{r7}
 8017d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8017d50:	4b03      	ldr	r3, [pc, #12]	; (8017d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8017d52:	681b      	ldr	r3, [r3, #0]
}
 8017d54:	4618      	mov	r0, r3
 8017d56:	46bd      	mov	sp, r7
 8017d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5c:	4770      	bx	lr
 8017d5e:	bf00      	nop
 8017d60:	20000000 	.word	0x20000000

08017d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8017d68:	f7ff fff0 	bl	8017d4c <HAL_RCC_GetHCLKFreq>
 8017d6c:	4602      	mov	r2, r0
 8017d6e:	4b05      	ldr	r3, [pc, #20]	; (8017d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8017d70:	689b      	ldr	r3, [r3, #8]
 8017d72:	0a9b      	lsrs	r3, r3, #10
 8017d74:	f003 0307 	and.w	r3, r3, #7
 8017d78:	4903      	ldr	r1, [pc, #12]	; (8017d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8017d7a:	5ccb      	ldrb	r3, [r1, r3]
 8017d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017d80:	4618      	mov	r0, r3
 8017d82:	bd80      	pop	{r7, pc}
 8017d84:	40023800 	.word	0x40023800
 8017d88:	0801d280 	.word	0x0801d280

08017d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8017d90:	f7ff ffdc 	bl	8017d4c <HAL_RCC_GetHCLKFreq>
 8017d94:	4602      	mov	r2, r0
 8017d96:	4b05      	ldr	r3, [pc, #20]	; (8017dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8017d98:	689b      	ldr	r3, [r3, #8]
 8017d9a:	0b5b      	lsrs	r3, r3, #13
 8017d9c:	f003 0307 	and.w	r3, r3, #7
 8017da0:	4903      	ldr	r1, [pc, #12]	; (8017db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8017da2:	5ccb      	ldrb	r3, [r1, r3]
 8017da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017da8:	4618      	mov	r0, r3
 8017daa:	bd80      	pop	{r7, pc}
 8017dac:	40023800 	.word	0x40023800
 8017db0:	0801d280 	.word	0x0801d280

08017db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8017db4:	b580      	push	{r7, lr}
 8017db6:	b088      	sub	sp, #32
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8017dc8:	2300      	movs	r3, #0
 8017dca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8017dcc:	2300      	movs	r3, #0
 8017dce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	f003 0301 	and.w	r3, r3, #1
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d012      	beq.n	8017e02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8017ddc:	4b69      	ldr	r3, [pc, #420]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017dde:	689b      	ldr	r3, [r3, #8]
 8017de0:	4a68      	ldr	r2, [pc, #416]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017de2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8017de6:	6093      	str	r3, [r2, #8]
 8017de8:	4b66      	ldr	r3, [pc, #408]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017dea:	689a      	ldr	r2, [r3, #8]
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017df0:	4964      	ldr	r1, [pc, #400]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017df2:	4313      	orrs	r3, r2
 8017df4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d101      	bne.n	8017e02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8017dfe:	2301      	movs	r3, #1
 8017e00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d017      	beq.n	8017e3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8017e0e:	4b5d      	ldr	r3, [pc, #372]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e1c:	4959      	ldr	r1, [pc, #356]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017e1e:	4313      	orrs	r3, r2
 8017e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017e2c:	d101      	bne.n	8017e32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8017e2e:	2301      	movs	r3, #1
 8017e30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d101      	bne.n	8017e3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8017e3a:	2301      	movs	r3, #1
 8017e3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d017      	beq.n	8017e7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8017e4a:	4b4e      	ldr	r3, [pc, #312]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017e50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e58:	494a      	ldr	r1, [pc, #296]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017e5a:	4313      	orrs	r3, r2
 8017e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8017e68:	d101      	bne.n	8017e6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8017e6a:	2301      	movs	r3, #1
 8017e6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d101      	bne.n	8017e7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8017e76:	2301      	movs	r3, #1
 8017e78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d001      	beq.n	8017e8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8017e86:	2301      	movs	r3, #1
 8017e88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	f003 0320 	and.w	r3, r3, #32
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	f000 808b 	beq.w	8017fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8017e98:	4b3a      	ldr	r3, [pc, #232]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e9c:	4a39      	ldr	r2, [pc, #228]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8017ea4:	4b37      	ldr	r3, [pc, #220]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017eac:	60bb      	str	r3, [r7, #8]
 8017eae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8017eb0:	4b35      	ldr	r3, [pc, #212]	; (8017f88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	4a34      	ldr	r2, [pc, #208]	; (8017f88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8017eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017eba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017ebc:	f7fe ff30 	bl	8016d20 <HAL_GetTick>
 8017ec0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8017ec2:	e008      	b.n	8017ed6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017ec4:	f7fe ff2c 	bl	8016d20 <HAL_GetTick>
 8017ec8:	4602      	mov	r2, r0
 8017eca:	697b      	ldr	r3, [r7, #20]
 8017ecc:	1ad3      	subs	r3, r2, r3
 8017ece:	2b64      	cmp	r3, #100	; 0x64
 8017ed0:	d901      	bls.n	8017ed6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8017ed2:	2303      	movs	r3, #3
 8017ed4:	e357      	b.n	8018586 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8017ed6:	4b2c      	ldr	r3, [pc, #176]	; (8017f88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d0f0      	beq.n	8017ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8017ee2:	4b28      	ldr	r3, [pc, #160]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017eea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8017eec:	693b      	ldr	r3, [r7, #16]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d035      	beq.n	8017f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017efa:	693a      	ldr	r2, [r7, #16]
 8017efc:	429a      	cmp	r2, r3
 8017efe:	d02e      	beq.n	8017f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8017f00:	4b20      	ldr	r3, [pc, #128]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017f08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8017f0a:	4b1e      	ldr	r3, [pc, #120]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f0e:	4a1d      	ldr	r2, [pc, #116]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017f14:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8017f16:	4b1b      	ldr	r3, [pc, #108]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f1a:	4a1a      	ldr	r2, [pc, #104]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017f20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8017f22:	4a18      	ldr	r2, [pc, #96]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017f24:	693b      	ldr	r3, [r7, #16]
 8017f26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8017f28:	4b16      	ldr	r3, [pc, #88]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f2c:	f003 0301 	and.w	r3, r3, #1
 8017f30:	2b01      	cmp	r3, #1
 8017f32:	d114      	bne.n	8017f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017f34:	f7fe fef4 	bl	8016d20 <HAL_GetTick>
 8017f38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8017f3a:	e00a      	b.n	8017f52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017f3c:	f7fe fef0 	bl	8016d20 <HAL_GetTick>
 8017f40:	4602      	mov	r2, r0
 8017f42:	697b      	ldr	r3, [r7, #20]
 8017f44:	1ad3      	subs	r3, r2, r3
 8017f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8017f4a:	4293      	cmp	r3, r2
 8017f4c:	d901      	bls.n	8017f52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8017f4e:	2303      	movs	r3, #3
 8017f50:	e319      	b.n	8018586 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8017f52:	4b0c      	ldr	r3, [pc, #48]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f56:	f003 0302 	and.w	r3, r3, #2
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d0ee      	beq.n	8017f3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017f6a:	d111      	bne.n	8017f90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8017f6c:	4b05      	ldr	r3, [pc, #20]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017f6e:	689b      	ldr	r3, [r3, #8]
 8017f70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8017f78:	4b04      	ldr	r3, [pc, #16]	; (8017f8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8017f7a:	400b      	ands	r3, r1
 8017f7c:	4901      	ldr	r1, [pc, #4]	; (8017f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017f7e:	4313      	orrs	r3, r2
 8017f80:	608b      	str	r3, [r1, #8]
 8017f82:	e00b      	b.n	8017f9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8017f84:	40023800 	.word	0x40023800
 8017f88:	40007000 	.word	0x40007000
 8017f8c:	0ffffcff 	.word	0x0ffffcff
 8017f90:	4bb1      	ldr	r3, [pc, #708]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017f92:	689b      	ldr	r3, [r3, #8]
 8017f94:	4ab0      	ldr	r2, [pc, #704]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017f96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8017f9a:	6093      	str	r3, [r2, #8]
 8017f9c:	4bae      	ldr	r3, [pc, #696]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017f9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017fa8:	49ab      	ldr	r1, [pc, #684]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017faa:	4313      	orrs	r3, r2
 8017fac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	f003 0310 	and.w	r3, r3, #16
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d010      	beq.n	8017fdc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8017fba:	4ba7      	ldr	r3, [pc, #668]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017fc0:	4aa5      	ldr	r2, [pc, #660]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8017fc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8017fca:	4ba3      	ldr	r3, [pc, #652]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017fcc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fd4:	49a0      	ldr	r1, [pc, #640]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017fd6:	4313      	orrs	r3, r2
 8017fd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d00a      	beq.n	8017ffe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8017fe8:	4b9b      	ldr	r3, [pc, #620]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017fee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017ff6:	4998      	ldr	r1, [pc, #608]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017ff8:	4313      	orrs	r3, r2
 8017ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018006:	2b00      	cmp	r3, #0
 8018008:	d00a      	beq.n	8018020 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801800a:	4b93      	ldr	r3, [pc, #588]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801800c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018010:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018018:	498f      	ldr	r1, [pc, #572]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801801a:	4313      	orrs	r3, r2
 801801c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018028:	2b00      	cmp	r3, #0
 801802a:	d00a      	beq.n	8018042 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801802c:	4b8a      	ldr	r3, [pc, #552]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801802e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018032:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801803a:	4987      	ldr	r1, [pc, #540]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801803c:	4313      	orrs	r3, r2
 801803e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801804a:	2b00      	cmp	r3, #0
 801804c:	d00a      	beq.n	8018064 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801804e:	4b82      	ldr	r3, [pc, #520]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8018050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018054:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801805c:	497e      	ldr	r1, [pc, #504]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801805e:	4313      	orrs	r3, r2
 8018060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801806c:	2b00      	cmp	r3, #0
 801806e:	d00a      	beq.n	8018086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8018070:	4b79      	ldr	r3, [pc, #484]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8018072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018076:	f023 0203 	bic.w	r2, r3, #3
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801807e:	4976      	ldr	r1, [pc, #472]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8018080:	4313      	orrs	r3, r2
 8018082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801808e:	2b00      	cmp	r3, #0
 8018090:	d00a      	beq.n	80180a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8018092:	4b71      	ldr	r3, [pc, #452]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8018094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018098:	f023 020c 	bic.w	r2, r3, #12
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180a0:	496d      	ldr	r1, [pc, #436]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80180a2:	4313      	orrs	r3, r2
 80180a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d00a      	beq.n	80180ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80180b4:	4b68      	ldr	r3, [pc, #416]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80180b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80180ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80180c2:	4965      	ldr	r1, [pc, #404]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80180c4:	4313      	orrs	r3, r2
 80180c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d00a      	beq.n	80180ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80180d6:	4b60      	ldr	r3, [pc, #384]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80180d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80180dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180e4:	495c      	ldr	r1, [pc, #368]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80180e6:	4313      	orrs	r3, r2
 80180e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d00a      	beq.n	801810e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80180f8:	4b57      	ldr	r3, [pc, #348]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80180fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80180fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018106:	4954      	ldr	r1, [pc, #336]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8018108:	4313      	orrs	r3, r2
 801810a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018116:	2b00      	cmp	r3, #0
 8018118:	d00a      	beq.n	8018130 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801811a:	4b4f      	ldr	r3, [pc, #316]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801811c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018120:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018128:	494b      	ldr	r1, [pc, #300]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801812a:	4313      	orrs	r3, r2
 801812c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018138:	2b00      	cmp	r3, #0
 801813a:	d00a      	beq.n	8018152 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801813c:	4b46      	ldr	r3, [pc, #280]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801813e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018142:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801814a:	4943      	ldr	r1, [pc, #268]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801814c:	4313      	orrs	r3, r2
 801814e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801815a:	2b00      	cmp	r3, #0
 801815c:	d00a      	beq.n	8018174 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801815e:	4b3e      	ldr	r3, [pc, #248]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8018160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018164:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801816c:	493a      	ldr	r1, [pc, #232]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801816e:	4313      	orrs	r3, r2
 8018170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801817c:	2b00      	cmp	r3, #0
 801817e:	d00a      	beq.n	8018196 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8018180:	4b35      	ldr	r3, [pc, #212]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8018182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018186:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801818e:	4932      	ldr	r1, [pc, #200]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8018190:	4313      	orrs	r3, r2
 8018192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d011      	beq.n	80181c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80181a2:	4b2d      	ldr	r3, [pc, #180]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80181a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80181b0:	4929      	ldr	r1, [pc, #164]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80181b2:	4313      	orrs	r3, r2
 80181b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80181bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80181c0:	d101      	bne.n	80181c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80181c2:	2301      	movs	r3, #1
 80181c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	f003 0308 	and.w	r3, r3, #8
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d001      	beq.n	80181d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80181d2:	2301      	movs	r3, #1
 80181d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d00a      	beq.n	80181f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80181e2:	4b1d      	ldr	r3, [pc, #116]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80181e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80181f0:	4919      	ldr	r1, [pc, #100]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80181f2:	4313      	orrs	r3, r2
 80181f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8018200:	2b00      	cmp	r3, #0
 8018202:	d00b      	beq.n	801821c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8018204:	4b14      	ldr	r3, [pc, #80]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8018206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801820a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018214:	4910      	ldr	r1, [pc, #64]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8018216:	4313      	orrs	r3, r2
 8018218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801821c:	69fb      	ldr	r3, [r7, #28]
 801821e:	2b01      	cmp	r3, #1
 8018220:	d006      	beq.n	8018230 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801822a:	2b00      	cmp	r3, #0
 801822c:	f000 80d9 	beq.w	80183e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8018230:	4b09      	ldr	r3, [pc, #36]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	4a08      	ldr	r2, [pc, #32]	; (8018258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8018236:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801823a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801823c:	f7fe fd70 	bl	8016d20 <HAL_GetTick>
 8018240:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8018242:	e00b      	b.n	801825c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8018244:	f7fe fd6c 	bl	8016d20 <HAL_GetTick>
 8018248:	4602      	mov	r2, r0
 801824a:	697b      	ldr	r3, [r7, #20]
 801824c:	1ad3      	subs	r3, r2, r3
 801824e:	2b64      	cmp	r3, #100	; 0x64
 8018250:	d904      	bls.n	801825c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8018252:	2303      	movs	r3, #3
 8018254:	e197      	b.n	8018586 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8018256:	bf00      	nop
 8018258:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801825c:	4b6c      	ldr	r3, [pc, #432]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018264:	2b00      	cmp	r3, #0
 8018266:	d1ed      	bne.n	8018244 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	f003 0301 	and.w	r3, r3, #1
 8018270:	2b00      	cmp	r3, #0
 8018272:	d021      	beq.n	80182b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018278:	2b00      	cmp	r3, #0
 801827a:	d11d      	bne.n	80182b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801827c:	4b64      	ldr	r3, [pc, #400]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801827e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018282:	0c1b      	lsrs	r3, r3, #16
 8018284:	f003 0303 	and.w	r3, r3, #3
 8018288:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801828a:	4b61      	ldr	r3, [pc, #388]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801828c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018290:	0e1b      	lsrs	r3, r3, #24
 8018292:	f003 030f 	and.w	r3, r3, #15
 8018296:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	685b      	ldr	r3, [r3, #4]
 801829c:	019a      	lsls	r2, r3, #6
 801829e:	693b      	ldr	r3, [r7, #16]
 80182a0:	041b      	lsls	r3, r3, #16
 80182a2:	431a      	orrs	r2, r3
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	061b      	lsls	r3, r3, #24
 80182a8:	431a      	orrs	r2, r3
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	689b      	ldr	r3, [r3, #8]
 80182ae:	071b      	lsls	r3, r3, #28
 80182b0:	4957      	ldr	r1, [pc, #348]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80182b2:	4313      	orrs	r3, r2
 80182b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d004      	beq.n	80182ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80182c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80182cc:	d00a      	beq.n	80182e4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d02e      	beq.n	8018338 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80182e2:	d129      	bne.n	8018338 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80182e4:	4b4a      	ldr	r3, [pc, #296]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80182e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80182ea:	0c1b      	lsrs	r3, r3, #16
 80182ec:	f003 0303 	and.w	r3, r3, #3
 80182f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80182f2:	4b47      	ldr	r3, [pc, #284]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80182f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80182f8:	0f1b      	lsrs	r3, r3, #28
 80182fa:	f003 0307 	and.w	r3, r3, #7
 80182fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	685b      	ldr	r3, [r3, #4]
 8018304:	019a      	lsls	r2, r3, #6
 8018306:	693b      	ldr	r3, [r7, #16]
 8018308:	041b      	lsls	r3, r3, #16
 801830a:	431a      	orrs	r2, r3
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	68db      	ldr	r3, [r3, #12]
 8018310:	061b      	lsls	r3, r3, #24
 8018312:	431a      	orrs	r2, r3
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	071b      	lsls	r3, r3, #28
 8018318:	493d      	ldr	r1, [pc, #244]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801831a:	4313      	orrs	r3, r2
 801831c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8018320:	4b3b      	ldr	r3, [pc, #236]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8018322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018326:	f023 021f 	bic.w	r2, r3, #31
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801832e:	3b01      	subs	r3, #1
 8018330:	4937      	ldr	r1, [pc, #220]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8018332:	4313      	orrs	r3, r2
 8018334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018340:	2b00      	cmp	r3, #0
 8018342:	d01d      	beq.n	8018380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8018344:	4b32      	ldr	r3, [pc, #200]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8018346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801834a:	0e1b      	lsrs	r3, r3, #24
 801834c:	f003 030f 	and.w	r3, r3, #15
 8018350:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8018352:	4b2f      	ldr	r3, [pc, #188]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8018354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018358:	0f1b      	lsrs	r3, r3, #28
 801835a:	f003 0307 	and.w	r3, r3, #7
 801835e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	685b      	ldr	r3, [r3, #4]
 8018364:	019a      	lsls	r2, r3, #6
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	691b      	ldr	r3, [r3, #16]
 801836a:	041b      	lsls	r3, r3, #16
 801836c:	431a      	orrs	r2, r3
 801836e:	693b      	ldr	r3, [r7, #16]
 8018370:	061b      	lsls	r3, r3, #24
 8018372:	431a      	orrs	r2, r3
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	071b      	lsls	r3, r3, #28
 8018378:	4925      	ldr	r1, [pc, #148]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801837a:	4313      	orrs	r3, r2
 801837c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018388:	2b00      	cmp	r3, #0
 801838a:	d011      	beq.n	80183b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	685b      	ldr	r3, [r3, #4]
 8018390:	019a      	lsls	r2, r3, #6
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	691b      	ldr	r3, [r3, #16]
 8018396:	041b      	lsls	r3, r3, #16
 8018398:	431a      	orrs	r2, r3
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	68db      	ldr	r3, [r3, #12]
 801839e:	061b      	lsls	r3, r3, #24
 80183a0:	431a      	orrs	r2, r3
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	689b      	ldr	r3, [r3, #8]
 80183a6:	071b      	lsls	r3, r3, #28
 80183a8:	4919      	ldr	r1, [pc, #100]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80183aa:	4313      	orrs	r3, r2
 80183ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80183b0:	4b17      	ldr	r3, [pc, #92]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	4a16      	ldr	r2, [pc, #88]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80183b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80183ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80183bc:	f7fe fcb0 	bl	8016d20 <HAL_GetTick>
 80183c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80183c2:	e008      	b.n	80183d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80183c4:	f7fe fcac 	bl	8016d20 <HAL_GetTick>
 80183c8:	4602      	mov	r2, r0
 80183ca:	697b      	ldr	r3, [r7, #20]
 80183cc:	1ad3      	subs	r3, r2, r3
 80183ce:	2b64      	cmp	r3, #100	; 0x64
 80183d0:	d901      	bls.n	80183d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80183d2:	2303      	movs	r3, #3
 80183d4:	e0d7      	b.n	8018586 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80183d6:	4b0e      	ldr	r3, [pc, #56]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d0f0      	beq.n	80183c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80183e2:	69bb      	ldr	r3, [r7, #24]
 80183e4:	2b01      	cmp	r3, #1
 80183e6:	f040 80cd 	bne.w	8018584 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80183ea:	4b09      	ldr	r3, [pc, #36]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	4a08      	ldr	r2, [pc, #32]	; (8018410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80183f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80183f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80183f6:	f7fe fc93 	bl	8016d20 <HAL_GetTick>
 80183fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80183fc:	e00a      	b.n	8018414 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80183fe:	f7fe fc8f 	bl	8016d20 <HAL_GetTick>
 8018402:	4602      	mov	r2, r0
 8018404:	697b      	ldr	r3, [r7, #20]
 8018406:	1ad3      	subs	r3, r2, r3
 8018408:	2b64      	cmp	r3, #100	; 0x64
 801840a:	d903      	bls.n	8018414 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801840c:	2303      	movs	r3, #3
 801840e:	e0ba      	b.n	8018586 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8018410:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8018414:	4b5e      	ldr	r3, [pc, #376]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801841c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8018420:	d0ed      	beq.n	80183fe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801842a:	2b00      	cmp	r3, #0
 801842c:	d003      	beq.n	8018436 <HAL_RCCEx_PeriphCLKConfig+0x682>
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018432:	2b00      	cmp	r3, #0
 8018434:	d009      	beq.n	801844a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801843e:	2b00      	cmp	r3, #0
 8018440:	d02e      	beq.n	80184a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018446:	2b00      	cmp	r3, #0
 8018448:	d12a      	bne.n	80184a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801844a:	4b51      	ldr	r3, [pc, #324]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801844c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018450:	0c1b      	lsrs	r3, r3, #16
 8018452:	f003 0303 	and.w	r3, r3, #3
 8018456:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8018458:	4b4d      	ldr	r3, [pc, #308]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801845a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801845e:	0f1b      	lsrs	r3, r3, #28
 8018460:	f003 0307 	and.w	r3, r3, #7
 8018464:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	695b      	ldr	r3, [r3, #20]
 801846a:	019a      	lsls	r2, r3, #6
 801846c:	693b      	ldr	r3, [r7, #16]
 801846e:	041b      	lsls	r3, r3, #16
 8018470:	431a      	orrs	r2, r3
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	699b      	ldr	r3, [r3, #24]
 8018476:	061b      	lsls	r3, r3, #24
 8018478:	431a      	orrs	r2, r3
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	071b      	lsls	r3, r3, #28
 801847e:	4944      	ldr	r1, [pc, #272]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8018480:	4313      	orrs	r3, r2
 8018482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8018486:	4b42      	ldr	r3, [pc, #264]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8018488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801848c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018494:	3b01      	subs	r3, #1
 8018496:	021b      	lsls	r3, r3, #8
 8018498:	493d      	ldr	r1, [pc, #244]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801849a:	4313      	orrs	r3, r2
 801849c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d022      	beq.n	80184f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80184b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80184b4:	d11d      	bne.n	80184f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80184b6:	4b36      	ldr	r3, [pc, #216]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80184b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80184bc:	0e1b      	lsrs	r3, r3, #24
 80184be:	f003 030f 	and.w	r3, r3, #15
 80184c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80184c4:	4b32      	ldr	r3, [pc, #200]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80184c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80184ca:	0f1b      	lsrs	r3, r3, #28
 80184cc:	f003 0307 	and.w	r3, r3, #7
 80184d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	695b      	ldr	r3, [r3, #20]
 80184d6:	019a      	lsls	r2, r3, #6
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	6a1b      	ldr	r3, [r3, #32]
 80184dc:	041b      	lsls	r3, r3, #16
 80184de:	431a      	orrs	r2, r3
 80184e0:	693b      	ldr	r3, [r7, #16]
 80184e2:	061b      	lsls	r3, r3, #24
 80184e4:	431a      	orrs	r2, r3
 80184e6:	68fb      	ldr	r3, [r7, #12]
 80184e8:	071b      	lsls	r3, r3, #28
 80184ea:	4929      	ldr	r1, [pc, #164]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80184ec:	4313      	orrs	r3, r2
 80184ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	f003 0308 	and.w	r3, r3, #8
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d028      	beq.n	8018550 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80184fe:	4b24      	ldr	r3, [pc, #144]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8018500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018504:	0e1b      	lsrs	r3, r3, #24
 8018506:	f003 030f 	and.w	r3, r3, #15
 801850a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801850c:	4b20      	ldr	r3, [pc, #128]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801850e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018512:	0c1b      	lsrs	r3, r3, #16
 8018514:	f003 0303 	and.w	r3, r3, #3
 8018518:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	695b      	ldr	r3, [r3, #20]
 801851e:	019a      	lsls	r2, r3, #6
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	041b      	lsls	r3, r3, #16
 8018524:	431a      	orrs	r2, r3
 8018526:	693b      	ldr	r3, [r7, #16]
 8018528:	061b      	lsls	r3, r3, #24
 801852a:	431a      	orrs	r2, r3
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	69db      	ldr	r3, [r3, #28]
 8018530:	071b      	lsls	r3, r3, #28
 8018532:	4917      	ldr	r1, [pc, #92]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8018534:	4313      	orrs	r3, r2
 8018536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801853a:	4b15      	ldr	r3, [pc, #84]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801853c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018540:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018548:	4911      	ldr	r1, [pc, #68]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801854a:	4313      	orrs	r3, r2
 801854c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8018550:	4b0f      	ldr	r3, [pc, #60]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	4a0e      	ldr	r2, [pc, #56]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8018556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801855a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801855c:	f7fe fbe0 	bl	8016d20 <HAL_GetTick>
 8018560:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8018562:	e008      	b.n	8018576 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8018564:	f7fe fbdc 	bl	8016d20 <HAL_GetTick>
 8018568:	4602      	mov	r2, r0
 801856a:	697b      	ldr	r3, [r7, #20]
 801856c:	1ad3      	subs	r3, r2, r3
 801856e:	2b64      	cmp	r3, #100	; 0x64
 8018570:	d901      	bls.n	8018576 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8018572:	2303      	movs	r3, #3
 8018574:	e007      	b.n	8018586 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8018576:	4b06      	ldr	r3, [pc, #24]	; (8018590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801857e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8018582:	d1ef      	bne.n	8018564 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8018584:	2300      	movs	r3, #0
}
 8018586:	4618      	mov	r0, r3
 8018588:	3720      	adds	r7, #32
 801858a:	46bd      	mov	sp, r7
 801858c:	bd80      	pop	{r7, pc}
 801858e:	bf00      	nop
 8018590:	40023800 	.word	0x40023800

08018594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018594:	b580      	push	{r7, lr}
 8018596:	b082      	sub	sp, #8
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d101      	bne.n	80185a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80185a2:	2301      	movs	r3, #1
 80185a4:	e040      	b.n	8018628 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d106      	bne.n	80185bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	2200      	movs	r2, #0
 80185b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80185b6:	6878      	ldr	r0, [r7, #4]
 80185b8:	f7fe f9e0 	bl	801697c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	2224      	movs	r2, #36	; 0x24
 80185c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	681a      	ldr	r2, [r3, #0]
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	f022 0201 	bic.w	r2, r2, #1
 80185d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80185d2:	6878      	ldr	r0, [r7, #4]
 80185d4:	f000 fb9c 	bl	8018d10 <UART_SetConfig>
 80185d8:	4603      	mov	r3, r0
 80185da:	2b01      	cmp	r3, #1
 80185dc:	d101      	bne.n	80185e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80185de:	2301      	movs	r3, #1
 80185e0:	e022      	b.n	8018628 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d002      	beq.n	80185f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80185ea:	6878      	ldr	r0, [r7, #4]
 80185ec:	f000 fdf2 	bl	80191d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	685a      	ldr	r2, [r3, #4]
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80185fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	689a      	ldr	r2, [r3, #8]
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801860e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	681a      	ldr	r2, [r3, #0]
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	f042 0201 	orr.w	r2, r2, #1
 801861e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018620:	6878      	ldr	r0, [r7, #4]
 8018622:	f000 fe79 	bl	8019318 <UART_CheckIdleState>
 8018626:	4603      	mov	r3, r0
}
 8018628:	4618      	mov	r0, r3
 801862a:	3708      	adds	r7, #8
 801862c:	46bd      	mov	sp, r7
 801862e:	bd80      	pop	{r7, pc}

08018630 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b08a      	sub	sp, #40	; 0x28
 8018634:	af02      	add	r7, sp, #8
 8018636:	60f8      	str	r0, [r7, #12]
 8018638:	60b9      	str	r1, [r7, #8]
 801863a:	603b      	str	r3, [r7, #0]
 801863c:	4613      	mov	r3, r2
 801863e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018644:	2b20      	cmp	r3, #32
 8018646:	f040 8081 	bne.w	801874c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 801864a:	68bb      	ldr	r3, [r7, #8]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d002      	beq.n	8018656 <HAL_UART_Transmit+0x26>
 8018650:	88fb      	ldrh	r3, [r7, #6]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d101      	bne.n	801865a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8018656:	2301      	movs	r3, #1
 8018658:	e079      	b.n	801874e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8018660:	2b01      	cmp	r3, #1
 8018662:	d101      	bne.n	8018668 <HAL_UART_Transmit+0x38>
 8018664:	2302      	movs	r3, #2
 8018666:	e072      	b.n	801874e <HAL_UART_Transmit+0x11e>
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	2201      	movs	r2, #1
 801866c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	2200      	movs	r2, #0
 8018674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	2221      	movs	r2, #33	; 0x21
 801867c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801867e:	f7fe fb4f 	bl	8016d20 <HAL_GetTick>
 8018682:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	88fa      	ldrh	r2, [r7, #6]
 8018688:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	88fa      	ldrh	r2, [r7, #6]
 8018690:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	689b      	ldr	r3, [r3, #8]
 8018698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801869c:	d108      	bne.n	80186b0 <HAL_UART_Transmit+0x80>
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	691b      	ldr	r3, [r3, #16]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d104      	bne.n	80186b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80186a6:	2300      	movs	r3, #0
 80186a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80186aa:	68bb      	ldr	r3, [r7, #8]
 80186ac:	61bb      	str	r3, [r7, #24]
 80186ae:	e003      	b.n	80186b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80186b0:	68bb      	ldr	r3, [r7, #8]
 80186b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80186b4:	2300      	movs	r3, #0
 80186b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	2200      	movs	r2, #0
 80186bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80186c0:	e02c      	b.n	801871c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80186c2:	683b      	ldr	r3, [r7, #0]
 80186c4:	9300      	str	r3, [sp, #0]
 80186c6:	697b      	ldr	r3, [r7, #20]
 80186c8:	2200      	movs	r2, #0
 80186ca:	2180      	movs	r1, #128	; 0x80
 80186cc:	68f8      	ldr	r0, [r7, #12]
 80186ce:	f000 fe56 	bl	801937e <UART_WaitOnFlagUntilTimeout>
 80186d2:	4603      	mov	r3, r0
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d001      	beq.n	80186dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80186d8:	2303      	movs	r3, #3
 80186da:	e038      	b.n	801874e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80186dc:	69fb      	ldr	r3, [r7, #28]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d10b      	bne.n	80186fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80186e2:	69bb      	ldr	r3, [r7, #24]
 80186e4:	881b      	ldrh	r3, [r3, #0]
 80186e6:	461a      	mov	r2, r3
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80186f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80186f2:	69bb      	ldr	r3, [r7, #24]
 80186f4:	3302      	adds	r3, #2
 80186f6:	61bb      	str	r3, [r7, #24]
 80186f8:	e007      	b.n	801870a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80186fa:	69fb      	ldr	r3, [r7, #28]
 80186fc:	781a      	ldrb	r2, [r3, #0]
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8018704:	69fb      	ldr	r3, [r7, #28]
 8018706:	3301      	adds	r3, #1
 8018708:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8018710:	b29b      	uxth	r3, r3
 8018712:	3b01      	subs	r3, #1
 8018714:	b29a      	uxth	r2, r3
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8018722:	b29b      	uxth	r3, r3
 8018724:	2b00      	cmp	r3, #0
 8018726:	d1cc      	bne.n	80186c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8018728:	683b      	ldr	r3, [r7, #0]
 801872a:	9300      	str	r3, [sp, #0]
 801872c:	697b      	ldr	r3, [r7, #20]
 801872e:	2200      	movs	r2, #0
 8018730:	2140      	movs	r1, #64	; 0x40
 8018732:	68f8      	ldr	r0, [r7, #12]
 8018734:	f000 fe23 	bl	801937e <UART_WaitOnFlagUntilTimeout>
 8018738:	4603      	mov	r3, r0
 801873a:	2b00      	cmp	r3, #0
 801873c:	d001      	beq.n	8018742 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 801873e:	2303      	movs	r3, #3
 8018740:	e005      	b.n	801874e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	2220      	movs	r2, #32
 8018746:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8018748:	2300      	movs	r3, #0
 801874a:	e000      	b.n	801874e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 801874c:	2302      	movs	r3, #2
  }
}
 801874e:	4618      	mov	r0, r3
 8018750:	3720      	adds	r7, #32
 8018752:	46bd      	mov	sp, r7
 8018754:	bd80      	pop	{r7, pc}

08018756 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018756:	b580      	push	{r7, lr}
 8018758:	b08a      	sub	sp, #40	; 0x28
 801875a:	af02      	add	r7, sp, #8
 801875c:	60f8      	str	r0, [r7, #12]
 801875e:	60b9      	str	r1, [r7, #8]
 8018760:	603b      	str	r3, [r7, #0]
 8018762:	4613      	mov	r3, r2
 8018764:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801876a:	2b20      	cmp	r3, #32
 801876c:	f040 80be 	bne.w	80188ec <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8018770:	68bb      	ldr	r3, [r7, #8]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d002      	beq.n	801877c <HAL_UART_Receive+0x26>
 8018776:	88fb      	ldrh	r3, [r7, #6]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d101      	bne.n	8018780 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 801877c:	2301      	movs	r3, #1
 801877e:	e0b6      	b.n	80188ee <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8018786:	2b01      	cmp	r3, #1
 8018788:	d101      	bne.n	801878e <HAL_UART_Receive+0x38>
 801878a:	2302      	movs	r3, #2
 801878c:	e0af      	b.n	80188ee <HAL_UART_Receive+0x198>
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	2201      	movs	r2, #1
 8018792:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	2200      	movs	r2, #0
 801879a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	2222      	movs	r2, #34	; 0x22
 80187a2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	2200      	movs	r2, #0
 80187a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80187aa:	f7fe fab9 	bl	8016d20 <HAL_GetTick>
 80187ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	88fa      	ldrh	r2, [r7, #6]
 80187b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	88fa      	ldrh	r2, [r7, #6]
 80187bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	689b      	ldr	r3, [r3, #8]
 80187c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80187c8:	d10e      	bne.n	80187e8 <HAL_UART_Receive+0x92>
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	691b      	ldr	r3, [r3, #16]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d105      	bne.n	80187de <HAL_UART_Receive+0x88>
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80187d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80187dc:	e02d      	b.n	801883a <HAL_UART_Receive+0xe4>
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	22ff      	movs	r2, #255	; 0xff
 80187e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80187e6:	e028      	b.n	801883a <HAL_UART_Receive+0xe4>
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	689b      	ldr	r3, [r3, #8]
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d10d      	bne.n	801880c <HAL_UART_Receive+0xb6>
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	691b      	ldr	r3, [r3, #16]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d104      	bne.n	8018802 <HAL_UART_Receive+0xac>
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	22ff      	movs	r2, #255	; 0xff
 80187fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8018800:	e01b      	b.n	801883a <HAL_UART_Receive+0xe4>
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	227f      	movs	r2, #127	; 0x7f
 8018806:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801880a:	e016      	b.n	801883a <HAL_UART_Receive+0xe4>
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	689b      	ldr	r3, [r3, #8]
 8018810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8018814:	d10d      	bne.n	8018832 <HAL_UART_Receive+0xdc>
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	691b      	ldr	r3, [r3, #16]
 801881a:	2b00      	cmp	r3, #0
 801881c:	d104      	bne.n	8018828 <HAL_UART_Receive+0xd2>
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	227f      	movs	r2, #127	; 0x7f
 8018822:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8018826:	e008      	b.n	801883a <HAL_UART_Receive+0xe4>
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	223f      	movs	r2, #63	; 0x3f
 801882c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8018830:	e003      	b.n	801883a <HAL_UART_Receive+0xe4>
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	2200      	movs	r2, #0
 8018836:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018840:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	689b      	ldr	r3, [r3, #8]
 8018846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801884a:	d108      	bne.n	801885e <HAL_UART_Receive+0x108>
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	691b      	ldr	r3, [r3, #16]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d104      	bne.n	801885e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8018854:	2300      	movs	r3, #0
 8018856:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8018858:	68bb      	ldr	r3, [r7, #8]
 801885a:	61bb      	str	r3, [r7, #24]
 801885c:	e003      	b.n	8018866 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 801885e:	68bb      	ldr	r3, [r7, #8]
 8018860:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8018862:	2300      	movs	r3, #0
 8018864:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	2200      	movs	r2, #0
 801886a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801886e:	e032      	b.n	80188d6 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8018870:	683b      	ldr	r3, [r7, #0]
 8018872:	9300      	str	r3, [sp, #0]
 8018874:	697b      	ldr	r3, [r7, #20]
 8018876:	2200      	movs	r2, #0
 8018878:	2120      	movs	r1, #32
 801887a:	68f8      	ldr	r0, [r7, #12]
 801887c:	f000 fd7f 	bl	801937e <UART_WaitOnFlagUntilTimeout>
 8018880:	4603      	mov	r3, r0
 8018882:	2b00      	cmp	r3, #0
 8018884:	d001      	beq.n	801888a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8018886:	2303      	movs	r3, #3
 8018888:	e031      	b.n	80188ee <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 801888a:	69fb      	ldr	r3, [r7, #28]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d10c      	bne.n	80188aa <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018896:	b29a      	uxth	r2, r3
 8018898:	8a7b      	ldrh	r3, [r7, #18]
 801889a:	4013      	ands	r3, r2
 801889c:	b29a      	uxth	r2, r3
 801889e:	69bb      	ldr	r3, [r7, #24]
 80188a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80188a2:	69bb      	ldr	r3, [r7, #24]
 80188a4:	3302      	adds	r3, #2
 80188a6:	61bb      	str	r3, [r7, #24]
 80188a8:	e00c      	b.n	80188c4 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188b0:	b2da      	uxtb	r2, r3
 80188b2:	8a7b      	ldrh	r3, [r7, #18]
 80188b4:	b2db      	uxtb	r3, r3
 80188b6:	4013      	ands	r3, r2
 80188b8:	b2da      	uxtb	r2, r3
 80188ba:	69fb      	ldr	r3, [r7, #28]
 80188bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80188be:	69fb      	ldr	r3, [r7, #28]
 80188c0:	3301      	adds	r3, #1
 80188c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80188ca:	b29b      	uxth	r3, r3
 80188cc:	3b01      	subs	r3, #1
 80188ce:	b29a      	uxth	r2, r3
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80188dc:	b29b      	uxth	r3, r3
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d1c6      	bne.n	8018870 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	2220      	movs	r2, #32
 80188e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80188e8:	2300      	movs	r3, #0
 80188ea:	e000      	b.n	80188ee <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80188ec:	2302      	movs	r3, #2
  }
}
 80188ee:	4618      	mov	r0, r3
 80188f0:	3720      	adds	r7, #32
 80188f2:	46bd      	mov	sp, r7
 80188f4:	bd80      	pop	{r7, pc}
	...

080188f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b088      	sub	sp, #32
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	69db      	ldr	r3, [r3, #28]
 8018906:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	689b      	ldr	r3, [r3, #8]
 8018916:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8018918:	69fa      	ldr	r2, [r7, #28]
 801891a:	f640 030f 	movw	r3, #2063	; 0x80f
 801891e:	4013      	ands	r3, r2
 8018920:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8018922:	693b      	ldr	r3, [r7, #16]
 8018924:	2b00      	cmp	r3, #0
 8018926:	d113      	bne.n	8018950 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8018928:	69fb      	ldr	r3, [r7, #28]
 801892a:	f003 0320 	and.w	r3, r3, #32
 801892e:	2b00      	cmp	r3, #0
 8018930:	d00e      	beq.n	8018950 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8018932:	69bb      	ldr	r3, [r7, #24]
 8018934:	f003 0320 	and.w	r3, r3, #32
 8018938:	2b00      	cmp	r3, #0
 801893a:	d009      	beq.n	8018950 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018940:	2b00      	cmp	r3, #0
 8018942:	f000 81b9 	beq.w	8018cb8 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801894a:	6878      	ldr	r0, [r7, #4]
 801894c:	4798      	blx	r3
      }
      return;
 801894e:	e1b3      	b.n	8018cb8 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8018950:	693b      	ldr	r3, [r7, #16]
 8018952:	2b00      	cmp	r3, #0
 8018954:	f000 80e3 	beq.w	8018b1e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8018958:	697b      	ldr	r3, [r7, #20]
 801895a:	f003 0301 	and.w	r3, r3, #1
 801895e:	2b00      	cmp	r3, #0
 8018960:	d105      	bne.n	801896e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8018962:	69ba      	ldr	r2, [r7, #24]
 8018964:	4ba5      	ldr	r3, [pc, #660]	; (8018bfc <HAL_UART_IRQHandler+0x304>)
 8018966:	4013      	ands	r3, r2
 8018968:	2b00      	cmp	r3, #0
 801896a:	f000 80d8 	beq.w	8018b1e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801896e:	69fb      	ldr	r3, [r7, #28]
 8018970:	f003 0301 	and.w	r3, r3, #1
 8018974:	2b00      	cmp	r3, #0
 8018976:	d010      	beq.n	801899a <HAL_UART_IRQHandler+0xa2>
 8018978:	69bb      	ldr	r3, [r7, #24]
 801897a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801897e:	2b00      	cmp	r3, #0
 8018980:	d00b      	beq.n	801899a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	2201      	movs	r2, #1
 8018988:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018990:	f043 0201 	orr.w	r2, r3, #1
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801899a:	69fb      	ldr	r3, [r7, #28]
 801899c:	f003 0302 	and.w	r3, r3, #2
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d010      	beq.n	80189c6 <HAL_UART_IRQHandler+0xce>
 80189a4:	697b      	ldr	r3, [r7, #20]
 80189a6:	f003 0301 	and.w	r3, r3, #1
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d00b      	beq.n	80189c6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	2202      	movs	r2, #2
 80189b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80189bc:	f043 0204 	orr.w	r2, r3, #4
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80189c6:	69fb      	ldr	r3, [r7, #28]
 80189c8:	f003 0304 	and.w	r3, r3, #4
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d010      	beq.n	80189f2 <HAL_UART_IRQHandler+0xfa>
 80189d0:	697b      	ldr	r3, [r7, #20]
 80189d2:	f003 0301 	and.w	r3, r3, #1
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d00b      	beq.n	80189f2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	2204      	movs	r2, #4
 80189e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80189e8:	f043 0202 	orr.w	r2, r3, #2
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80189f2:	69fb      	ldr	r3, [r7, #28]
 80189f4:	f003 0308 	and.w	r3, r3, #8
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d015      	beq.n	8018a28 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80189fc:	69bb      	ldr	r3, [r7, #24]
 80189fe:	f003 0320 	and.w	r3, r3, #32
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d104      	bne.n	8018a10 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8018a06:	697b      	ldr	r3, [r7, #20]
 8018a08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d00b      	beq.n	8018a28 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	2208      	movs	r2, #8
 8018a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018a1e:	f043 0208 	orr.w	r2, r3, #8
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8018a28:	69fb      	ldr	r3, [r7, #28]
 8018a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d011      	beq.n	8018a56 <HAL_UART_IRQHandler+0x15e>
 8018a32:	69bb      	ldr	r3, [r7, #24]
 8018a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d00c      	beq.n	8018a56 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018a44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018a4c:	f043 0220 	orr.w	r2, r3, #32
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	f000 812d 	beq.w	8018cbc <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8018a62:	69fb      	ldr	r3, [r7, #28]
 8018a64:	f003 0320 	and.w	r3, r3, #32
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d00c      	beq.n	8018a86 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8018a6c:	69bb      	ldr	r3, [r7, #24]
 8018a6e:	f003 0320 	and.w	r3, r3, #32
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d007      	beq.n	8018a86 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d003      	beq.n	8018a86 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018a82:	6878      	ldr	r0, [r7, #4]
 8018a84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018a8c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	689b      	ldr	r3, [r3, #8]
 8018a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a98:	2b40      	cmp	r3, #64	; 0x40
 8018a9a:	d004      	beq.n	8018aa6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d031      	beq.n	8018b0a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8018aa6:	6878      	ldr	r0, [r7, #4]
 8018aa8:	f000 fce5 	bl	8019476 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	689b      	ldr	r3, [r3, #8]
 8018ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018ab6:	2b40      	cmp	r3, #64	; 0x40
 8018ab8:	d123      	bne.n	8018b02 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	689a      	ldr	r2, [r3, #8]
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018ac8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d013      	beq.n	8018afa <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ad6:	4a4a      	ldr	r2, [pc, #296]	; (8018c00 <HAL_UART_IRQHandler+0x308>)
 8018ad8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7fe facf 	bl	8017082 <HAL_DMA_Abort_IT>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d017      	beq.n	8018b1a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018af0:	687a      	ldr	r2, [r7, #4]
 8018af2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8018af4:	4610      	mov	r0, r2
 8018af6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018af8:	e00f      	b.n	8018b1a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8018afa:	6878      	ldr	r0, [r7, #4]
 8018afc:	f000 f8f2 	bl	8018ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018b00:	e00b      	b.n	8018b1a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018b02:	6878      	ldr	r0, [r7, #4]
 8018b04:	f000 f8ee 	bl	8018ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018b08:	e007      	b.n	8018b1a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8018b0a:	6878      	ldr	r0, [r7, #4]
 8018b0c:	f000 f8ea 	bl	8018ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	2200      	movs	r2, #0
 8018b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8018b18:	e0d0      	b.n	8018cbc <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018b1a:	bf00      	nop
    return;
 8018b1c:	e0ce      	b.n	8018cbc <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018b22:	2b01      	cmp	r3, #1
 8018b24:	f040 80a7 	bne.w	8018c76 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8018b28:	69fb      	ldr	r3, [r7, #28]
 8018b2a:	f003 0310 	and.w	r3, r3, #16
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	f000 80a1 	beq.w	8018c76 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8018b34:	69bb      	ldr	r3, [r7, #24]
 8018b36:	f003 0310 	and.w	r3, r3, #16
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	f000 809b 	beq.w	8018c76 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	2210      	movs	r2, #16
 8018b46:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	689b      	ldr	r3, [r3, #8]
 8018b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018b52:	2b40      	cmp	r3, #64	; 0x40
 8018b54:	d156      	bne.n	8018c04 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	685b      	ldr	r3, [r3, #4]
 8018b5e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8018b60:	893b      	ldrh	r3, [r7, #8]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	f000 80ac 	beq.w	8018cc0 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8018b6e:	893a      	ldrh	r2, [r7, #8]
 8018b70:	429a      	cmp	r2, r3
 8018b72:	f080 80a5 	bcs.w	8018cc0 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	893a      	ldrh	r2, [r7, #8]
 8018b7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b82:	69db      	ldr	r3, [r3, #28]
 8018b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018b88:	d02a      	beq.n	8018be0 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	681a      	ldr	r2, [r3, #0]
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018b98:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	689a      	ldr	r2, [r3, #8]
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	f022 0201 	bic.w	r2, r2, #1
 8018ba8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	689a      	ldr	r2, [r3, #8]
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018bb8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	2220      	movs	r2, #32
 8018bbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	2200      	movs	r2, #0
 8018bc4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	681a      	ldr	r2, [r3, #0]
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	f022 0210 	bic.w	r2, r2, #16
 8018bd4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018bda:	4618      	mov	r0, r3
 8018bdc:	f7fe f9e1 	bl	8016fa2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8018bec:	b29b      	uxth	r3, r3
 8018bee:	1ad3      	subs	r3, r2, r3
 8018bf0:	b29b      	uxth	r3, r3
 8018bf2:	4619      	mov	r1, r3
 8018bf4:	6878      	ldr	r0, [r7, #4]
 8018bf6:	f000 f87f 	bl	8018cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8018bfa:	e061      	b.n	8018cc0 <HAL_UART_IRQHandler+0x3c8>
 8018bfc:	04000120 	.word	0x04000120
 8018c00:	080194d5 	.word	0x080194d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8018c10:	b29b      	uxth	r3, r3
 8018c12:	1ad3      	subs	r3, r2, r3
 8018c14:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8018c1c:	b29b      	uxth	r3, r3
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d050      	beq.n	8018cc4 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8018c22:	897b      	ldrh	r3, [r7, #10]
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d04d      	beq.n	8018cc4 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	681a      	ldr	r2, [r3, #0]
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8018c36:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	689a      	ldr	r2, [r3, #8]
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	f022 0201 	bic.w	r2, r2, #1
 8018c46:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	2220      	movs	r2, #32
 8018c4c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	2200      	movs	r2, #0
 8018c52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	2200      	movs	r2, #0
 8018c58:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	681a      	ldr	r2, [r3, #0]
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	f022 0210 	bic.w	r2, r2, #16
 8018c68:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8018c6a:	897b      	ldrh	r3, [r7, #10]
 8018c6c:	4619      	mov	r1, r3
 8018c6e:	6878      	ldr	r0, [r7, #4]
 8018c70:	f000 f842 	bl	8018cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8018c74:	e026      	b.n	8018cc4 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8018c76:	69fb      	ldr	r3, [r7, #28]
 8018c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d00d      	beq.n	8018c9c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8018c80:	69bb      	ldr	r3, [r7, #24]
 8018c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d008      	beq.n	8018c9c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d01a      	beq.n	8018cc8 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018c96:	6878      	ldr	r0, [r7, #4]
 8018c98:	4798      	blx	r3
    }
    return;
 8018c9a:	e015      	b.n	8018cc8 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8018c9c:	69fb      	ldr	r3, [r7, #28]
 8018c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d011      	beq.n	8018cca <HAL_UART_IRQHandler+0x3d2>
 8018ca6:	69bb      	ldr	r3, [r7, #24]
 8018ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d00c      	beq.n	8018cca <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8018cb0:	6878      	ldr	r0, [r7, #4]
 8018cb2:	f000 fc25 	bl	8019500 <UART_EndTransmit_IT>
    return;
 8018cb6:	e008      	b.n	8018cca <HAL_UART_IRQHandler+0x3d2>
      return;
 8018cb8:	bf00      	nop
 8018cba:	e006      	b.n	8018cca <HAL_UART_IRQHandler+0x3d2>
    return;
 8018cbc:	bf00      	nop
 8018cbe:	e004      	b.n	8018cca <HAL_UART_IRQHandler+0x3d2>
      return;
 8018cc0:	bf00      	nop
 8018cc2:	e002      	b.n	8018cca <HAL_UART_IRQHandler+0x3d2>
      return;
 8018cc4:	bf00      	nop
 8018cc6:	e000      	b.n	8018cca <HAL_UART_IRQHandler+0x3d2>
    return;
 8018cc8:	bf00      	nop
  }

}
 8018cca:	3720      	adds	r7, #32
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	bd80      	pop	{r7, pc}

08018cd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8018cd0:	b480      	push	{r7}
 8018cd2:	b083      	sub	sp, #12
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8018cd8:	bf00      	nop
 8018cda:	370c      	adds	r7, #12
 8018cdc:	46bd      	mov	sp, r7
 8018cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce2:	4770      	bx	lr

08018ce4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018ce4:	b480      	push	{r7}
 8018ce6:	b083      	sub	sp, #12
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018cec:	bf00      	nop
 8018cee:	370c      	adds	r7, #12
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf6:	4770      	bx	lr

08018cf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018cf8:	b480      	push	{r7}
 8018cfa:	b083      	sub	sp, #12
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	6078      	str	r0, [r7, #4]
 8018d00:	460b      	mov	r3, r1
 8018d02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8018d04:	bf00      	nop
 8018d06:	370c      	adds	r7, #12
 8018d08:	46bd      	mov	sp, r7
 8018d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d0e:	4770      	bx	lr

08018d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018d10:	b580      	push	{r7, lr}
 8018d12:	b088      	sub	sp, #32
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018d18:	2300      	movs	r3, #0
 8018d1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	689a      	ldr	r2, [r3, #8]
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	691b      	ldr	r3, [r3, #16]
 8018d24:	431a      	orrs	r2, r3
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	695b      	ldr	r3, [r3, #20]
 8018d2a:	431a      	orrs	r2, r3
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	69db      	ldr	r3, [r3, #28]
 8018d30:	4313      	orrs	r3, r2
 8018d32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	681a      	ldr	r2, [r3, #0]
 8018d3a:	4ba7      	ldr	r3, [pc, #668]	; (8018fd8 <UART_SetConfig+0x2c8>)
 8018d3c:	4013      	ands	r3, r2
 8018d3e:	687a      	ldr	r2, [r7, #4]
 8018d40:	6812      	ldr	r2, [r2, #0]
 8018d42:	6979      	ldr	r1, [r7, #20]
 8018d44:	430b      	orrs	r3, r1
 8018d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	685b      	ldr	r3, [r3, #4]
 8018d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	68da      	ldr	r2, [r3, #12]
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	430a      	orrs	r2, r1
 8018d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	699b      	ldr	r3, [r3, #24]
 8018d62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	6a1b      	ldr	r3, [r3, #32]
 8018d68:	697a      	ldr	r2, [r7, #20]
 8018d6a:	4313      	orrs	r3, r2
 8018d6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	689b      	ldr	r3, [r3, #8]
 8018d74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	697a      	ldr	r2, [r7, #20]
 8018d7e:	430a      	orrs	r2, r1
 8018d80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	4a95      	ldr	r2, [pc, #596]	; (8018fdc <UART_SetConfig+0x2cc>)
 8018d88:	4293      	cmp	r3, r2
 8018d8a:	d120      	bne.n	8018dce <UART_SetConfig+0xbe>
 8018d8c:	4b94      	ldr	r3, [pc, #592]	; (8018fe0 <UART_SetConfig+0x2d0>)
 8018d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018d92:	f003 0303 	and.w	r3, r3, #3
 8018d96:	2b03      	cmp	r3, #3
 8018d98:	d816      	bhi.n	8018dc8 <UART_SetConfig+0xb8>
 8018d9a:	a201      	add	r2, pc, #4	; (adr r2, 8018da0 <UART_SetConfig+0x90>)
 8018d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018da0:	08018db1 	.word	0x08018db1
 8018da4:	08018dbd 	.word	0x08018dbd
 8018da8:	08018db7 	.word	0x08018db7
 8018dac:	08018dc3 	.word	0x08018dc3
 8018db0:	2301      	movs	r3, #1
 8018db2:	77fb      	strb	r3, [r7, #31]
 8018db4:	e14f      	b.n	8019056 <UART_SetConfig+0x346>
 8018db6:	2302      	movs	r3, #2
 8018db8:	77fb      	strb	r3, [r7, #31]
 8018dba:	e14c      	b.n	8019056 <UART_SetConfig+0x346>
 8018dbc:	2304      	movs	r3, #4
 8018dbe:	77fb      	strb	r3, [r7, #31]
 8018dc0:	e149      	b.n	8019056 <UART_SetConfig+0x346>
 8018dc2:	2308      	movs	r3, #8
 8018dc4:	77fb      	strb	r3, [r7, #31]
 8018dc6:	e146      	b.n	8019056 <UART_SetConfig+0x346>
 8018dc8:	2310      	movs	r3, #16
 8018dca:	77fb      	strb	r3, [r7, #31]
 8018dcc:	e143      	b.n	8019056 <UART_SetConfig+0x346>
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	4a84      	ldr	r2, [pc, #528]	; (8018fe4 <UART_SetConfig+0x2d4>)
 8018dd4:	4293      	cmp	r3, r2
 8018dd6:	d132      	bne.n	8018e3e <UART_SetConfig+0x12e>
 8018dd8:	4b81      	ldr	r3, [pc, #516]	; (8018fe0 <UART_SetConfig+0x2d0>)
 8018dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018dde:	f003 030c 	and.w	r3, r3, #12
 8018de2:	2b0c      	cmp	r3, #12
 8018de4:	d828      	bhi.n	8018e38 <UART_SetConfig+0x128>
 8018de6:	a201      	add	r2, pc, #4	; (adr r2, 8018dec <UART_SetConfig+0xdc>)
 8018de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018dec:	08018e21 	.word	0x08018e21
 8018df0:	08018e39 	.word	0x08018e39
 8018df4:	08018e39 	.word	0x08018e39
 8018df8:	08018e39 	.word	0x08018e39
 8018dfc:	08018e2d 	.word	0x08018e2d
 8018e00:	08018e39 	.word	0x08018e39
 8018e04:	08018e39 	.word	0x08018e39
 8018e08:	08018e39 	.word	0x08018e39
 8018e0c:	08018e27 	.word	0x08018e27
 8018e10:	08018e39 	.word	0x08018e39
 8018e14:	08018e39 	.word	0x08018e39
 8018e18:	08018e39 	.word	0x08018e39
 8018e1c:	08018e33 	.word	0x08018e33
 8018e20:	2300      	movs	r3, #0
 8018e22:	77fb      	strb	r3, [r7, #31]
 8018e24:	e117      	b.n	8019056 <UART_SetConfig+0x346>
 8018e26:	2302      	movs	r3, #2
 8018e28:	77fb      	strb	r3, [r7, #31]
 8018e2a:	e114      	b.n	8019056 <UART_SetConfig+0x346>
 8018e2c:	2304      	movs	r3, #4
 8018e2e:	77fb      	strb	r3, [r7, #31]
 8018e30:	e111      	b.n	8019056 <UART_SetConfig+0x346>
 8018e32:	2308      	movs	r3, #8
 8018e34:	77fb      	strb	r3, [r7, #31]
 8018e36:	e10e      	b.n	8019056 <UART_SetConfig+0x346>
 8018e38:	2310      	movs	r3, #16
 8018e3a:	77fb      	strb	r3, [r7, #31]
 8018e3c:	e10b      	b.n	8019056 <UART_SetConfig+0x346>
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	4a69      	ldr	r2, [pc, #420]	; (8018fe8 <UART_SetConfig+0x2d8>)
 8018e44:	4293      	cmp	r3, r2
 8018e46:	d120      	bne.n	8018e8a <UART_SetConfig+0x17a>
 8018e48:	4b65      	ldr	r3, [pc, #404]	; (8018fe0 <UART_SetConfig+0x2d0>)
 8018e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018e4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8018e52:	2b30      	cmp	r3, #48	; 0x30
 8018e54:	d013      	beq.n	8018e7e <UART_SetConfig+0x16e>
 8018e56:	2b30      	cmp	r3, #48	; 0x30
 8018e58:	d814      	bhi.n	8018e84 <UART_SetConfig+0x174>
 8018e5a:	2b20      	cmp	r3, #32
 8018e5c:	d009      	beq.n	8018e72 <UART_SetConfig+0x162>
 8018e5e:	2b20      	cmp	r3, #32
 8018e60:	d810      	bhi.n	8018e84 <UART_SetConfig+0x174>
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d002      	beq.n	8018e6c <UART_SetConfig+0x15c>
 8018e66:	2b10      	cmp	r3, #16
 8018e68:	d006      	beq.n	8018e78 <UART_SetConfig+0x168>
 8018e6a:	e00b      	b.n	8018e84 <UART_SetConfig+0x174>
 8018e6c:	2300      	movs	r3, #0
 8018e6e:	77fb      	strb	r3, [r7, #31]
 8018e70:	e0f1      	b.n	8019056 <UART_SetConfig+0x346>
 8018e72:	2302      	movs	r3, #2
 8018e74:	77fb      	strb	r3, [r7, #31]
 8018e76:	e0ee      	b.n	8019056 <UART_SetConfig+0x346>
 8018e78:	2304      	movs	r3, #4
 8018e7a:	77fb      	strb	r3, [r7, #31]
 8018e7c:	e0eb      	b.n	8019056 <UART_SetConfig+0x346>
 8018e7e:	2308      	movs	r3, #8
 8018e80:	77fb      	strb	r3, [r7, #31]
 8018e82:	e0e8      	b.n	8019056 <UART_SetConfig+0x346>
 8018e84:	2310      	movs	r3, #16
 8018e86:	77fb      	strb	r3, [r7, #31]
 8018e88:	e0e5      	b.n	8019056 <UART_SetConfig+0x346>
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	4a57      	ldr	r2, [pc, #348]	; (8018fec <UART_SetConfig+0x2dc>)
 8018e90:	4293      	cmp	r3, r2
 8018e92:	d120      	bne.n	8018ed6 <UART_SetConfig+0x1c6>
 8018e94:	4b52      	ldr	r3, [pc, #328]	; (8018fe0 <UART_SetConfig+0x2d0>)
 8018e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018e9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8018e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8018ea0:	d013      	beq.n	8018eca <UART_SetConfig+0x1ba>
 8018ea2:	2bc0      	cmp	r3, #192	; 0xc0
 8018ea4:	d814      	bhi.n	8018ed0 <UART_SetConfig+0x1c0>
 8018ea6:	2b80      	cmp	r3, #128	; 0x80
 8018ea8:	d009      	beq.n	8018ebe <UART_SetConfig+0x1ae>
 8018eaa:	2b80      	cmp	r3, #128	; 0x80
 8018eac:	d810      	bhi.n	8018ed0 <UART_SetConfig+0x1c0>
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d002      	beq.n	8018eb8 <UART_SetConfig+0x1a8>
 8018eb2:	2b40      	cmp	r3, #64	; 0x40
 8018eb4:	d006      	beq.n	8018ec4 <UART_SetConfig+0x1b4>
 8018eb6:	e00b      	b.n	8018ed0 <UART_SetConfig+0x1c0>
 8018eb8:	2300      	movs	r3, #0
 8018eba:	77fb      	strb	r3, [r7, #31]
 8018ebc:	e0cb      	b.n	8019056 <UART_SetConfig+0x346>
 8018ebe:	2302      	movs	r3, #2
 8018ec0:	77fb      	strb	r3, [r7, #31]
 8018ec2:	e0c8      	b.n	8019056 <UART_SetConfig+0x346>
 8018ec4:	2304      	movs	r3, #4
 8018ec6:	77fb      	strb	r3, [r7, #31]
 8018ec8:	e0c5      	b.n	8019056 <UART_SetConfig+0x346>
 8018eca:	2308      	movs	r3, #8
 8018ecc:	77fb      	strb	r3, [r7, #31]
 8018ece:	e0c2      	b.n	8019056 <UART_SetConfig+0x346>
 8018ed0:	2310      	movs	r3, #16
 8018ed2:	77fb      	strb	r3, [r7, #31]
 8018ed4:	e0bf      	b.n	8019056 <UART_SetConfig+0x346>
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	4a45      	ldr	r2, [pc, #276]	; (8018ff0 <UART_SetConfig+0x2e0>)
 8018edc:	4293      	cmp	r3, r2
 8018ede:	d125      	bne.n	8018f2c <UART_SetConfig+0x21c>
 8018ee0:	4b3f      	ldr	r3, [pc, #252]	; (8018fe0 <UART_SetConfig+0x2d0>)
 8018ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018eee:	d017      	beq.n	8018f20 <UART_SetConfig+0x210>
 8018ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018ef4:	d817      	bhi.n	8018f26 <UART_SetConfig+0x216>
 8018ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018efa:	d00b      	beq.n	8018f14 <UART_SetConfig+0x204>
 8018efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018f00:	d811      	bhi.n	8018f26 <UART_SetConfig+0x216>
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d003      	beq.n	8018f0e <UART_SetConfig+0x1fe>
 8018f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018f0a:	d006      	beq.n	8018f1a <UART_SetConfig+0x20a>
 8018f0c:	e00b      	b.n	8018f26 <UART_SetConfig+0x216>
 8018f0e:	2300      	movs	r3, #0
 8018f10:	77fb      	strb	r3, [r7, #31]
 8018f12:	e0a0      	b.n	8019056 <UART_SetConfig+0x346>
 8018f14:	2302      	movs	r3, #2
 8018f16:	77fb      	strb	r3, [r7, #31]
 8018f18:	e09d      	b.n	8019056 <UART_SetConfig+0x346>
 8018f1a:	2304      	movs	r3, #4
 8018f1c:	77fb      	strb	r3, [r7, #31]
 8018f1e:	e09a      	b.n	8019056 <UART_SetConfig+0x346>
 8018f20:	2308      	movs	r3, #8
 8018f22:	77fb      	strb	r3, [r7, #31]
 8018f24:	e097      	b.n	8019056 <UART_SetConfig+0x346>
 8018f26:	2310      	movs	r3, #16
 8018f28:	77fb      	strb	r3, [r7, #31]
 8018f2a:	e094      	b.n	8019056 <UART_SetConfig+0x346>
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	4a30      	ldr	r2, [pc, #192]	; (8018ff4 <UART_SetConfig+0x2e4>)
 8018f32:	4293      	cmp	r3, r2
 8018f34:	d125      	bne.n	8018f82 <UART_SetConfig+0x272>
 8018f36:	4b2a      	ldr	r3, [pc, #168]	; (8018fe0 <UART_SetConfig+0x2d0>)
 8018f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018f3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8018f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018f44:	d017      	beq.n	8018f76 <UART_SetConfig+0x266>
 8018f46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018f4a:	d817      	bhi.n	8018f7c <UART_SetConfig+0x26c>
 8018f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018f50:	d00b      	beq.n	8018f6a <UART_SetConfig+0x25a>
 8018f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018f56:	d811      	bhi.n	8018f7c <UART_SetConfig+0x26c>
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d003      	beq.n	8018f64 <UART_SetConfig+0x254>
 8018f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018f60:	d006      	beq.n	8018f70 <UART_SetConfig+0x260>
 8018f62:	e00b      	b.n	8018f7c <UART_SetConfig+0x26c>
 8018f64:	2301      	movs	r3, #1
 8018f66:	77fb      	strb	r3, [r7, #31]
 8018f68:	e075      	b.n	8019056 <UART_SetConfig+0x346>
 8018f6a:	2302      	movs	r3, #2
 8018f6c:	77fb      	strb	r3, [r7, #31]
 8018f6e:	e072      	b.n	8019056 <UART_SetConfig+0x346>
 8018f70:	2304      	movs	r3, #4
 8018f72:	77fb      	strb	r3, [r7, #31]
 8018f74:	e06f      	b.n	8019056 <UART_SetConfig+0x346>
 8018f76:	2308      	movs	r3, #8
 8018f78:	77fb      	strb	r3, [r7, #31]
 8018f7a:	e06c      	b.n	8019056 <UART_SetConfig+0x346>
 8018f7c:	2310      	movs	r3, #16
 8018f7e:	77fb      	strb	r3, [r7, #31]
 8018f80:	e069      	b.n	8019056 <UART_SetConfig+0x346>
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	4a1c      	ldr	r2, [pc, #112]	; (8018ff8 <UART_SetConfig+0x2e8>)
 8018f88:	4293      	cmp	r3, r2
 8018f8a:	d137      	bne.n	8018ffc <UART_SetConfig+0x2ec>
 8018f8c:	4b14      	ldr	r3, [pc, #80]	; (8018fe0 <UART_SetConfig+0x2d0>)
 8018f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018f92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8018f96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8018f9a:	d017      	beq.n	8018fcc <UART_SetConfig+0x2bc>
 8018f9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8018fa0:	d817      	bhi.n	8018fd2 <UART_SetConfig+0x2c2>
 8018fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8018fa6:	d00b      	beq.n	8018fc0 <UART_SetConfig+0x2b0>
 8018fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8018fac:	d811      	bhi.n	8018fd2 <UART_SetConfig+0x2c2>
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d003      	beq.n	8018fba <UART_SetConfig+0x2aa>
 8018fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018fb6:	d006      	beq.n	8018fc6 <UART_SetConfig+0x2b6>
 8018fb8:	e00b      	b.n	8018fd2 <UART_SetConfig+0x2c2>
 8018fba:	2300      	movs	r3, #0
 8018fbc:	77fb      	strb	r3, [r7, #31]
 8018fbe:	e04a      	b.n	8019056 <UART_SetConfig+0x346>
 8018fc0:	2302      	movs	r3, #2
 8018fc2:	77fb      	strb	r3, [r7, #31]
 8018fc4:	e047      	b.n	8019056 <UART_SetConfig+0x346>
 8018fc6:	2304      	movs	r3, #4
 8018fc8:	77fb      	strb	r3, [r7, #31]
 8018fca:	e044      	b.n	8019056 <UART_SetConfig+0x346>
 8018fcc:	2308      	movs	r3, #8
 8018fce:	77fb      	strb	r3, [r7, #31]
 8018fd0:	e041      	b.n	8019056 <UART_SetConfig+0x346>
 8018fd2:	2310      	movs	r3, #16
 8018fd4:	77fb      	strb	r3, [r7, #31]
 8018fd6:	e03e      	b.n	8019056 <UART_SetConfig+0x346>
 8018fd8:	efff69f3 	.word	0xefff69f3
 8018fdc:	40011000 	.word	0x40011000
 8018fe0:	40023800 	.word	0x40023800
 8018fe4:	40004400 	.word	0x40004400
 8018fe8:	40004800 	.word	0x40004800
 8018fec:	40004c00 	.word	0x40004c00
 8018ff0:	40005000 	.word	0x40005000
 8018ff4:	40011400 	.word	0x40011400
 8018ff8:	40007800 	.word	0x40007800
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	4a71      	ldr	r2, [pc, #452]	; (80191c8 <UART_SetConfig+0x4b8>)
 8019002:	4293      	cmp	r3, r2
 8019004:	d125      	bne.n	8019052 <UART_SetConfig+0x342>
 8019006:	4b71      	ldr	r3, [pc, #452]	; (80191cc <UART_SetConfig+0x4bc>)
 8019008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801900c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8019010:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8019014:	d017      	beq.n	8019046 <UART_SetConfig+0x336>
 8019016:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801901a:	d817      	bhi.n	801904c <UART_SetConfig+0x33c>
 801901c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019020:	d00b      	beq.n	801903a <UART_SetConfig+0x32a>
 8019022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019026:	d811      	bhi.n	801904c <UART_SetConfig+0x33c>
 8019028:	2b00      	cmp	r3, #0
 801902a:	d003      	beq.n	8019034 <UART_SetConfig+0x324>
 801902c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019030:	d006      	beq.n	8019040 <UART_SetConfig+0x330>
 8019032:	e00b      	b.n	801904c <UART_SetConfig+0x33c>
 8019034:	2300      	movs	r3, #0
 8019036:	77fb      	strb	r3, [r7, #31]
 8019038:	e00d      	b.n	8019056 <UART_SetConfig+0x346>
 801903a:	2302      	movs	r3, #2
 801903c:	77fb      	strb	r3, [r7, #31]
 801903e:	e00a      	b.n	8019056 <UART_SetConfig+0x346>
 8019040:	2304      	movs	r3, #4
 8019042:	77fb      	strb	r3, [r7, #31]
 8019044:	e007      	b.n	8019056 <UART_SetConfig+0x346>
 8019046:	2308      	movs	r3, #8
 8019048:	77fb      	strb	r3, [r7, #31]
 801904a:	e004      	b.n	8019056 <UART_SetConfig+0x346>
 801904c:	2310      	movs	r3, #16
 801904e:	77fb      	strb	r3, [r7, #31]
 8019050:	e001      	b.n	8019056 <UART_SetConfig+0x346>
 8019052:	2310      	movs	r3, #16
 8019054:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	69db      	ldr	r3, [r3, #28]
 801905a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801905e:	d15b      	bne.n	8019118 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8019060:	7ffb      	ldrb	r3, [r7, #31]
 8019062:	2b08      	cmp	r3, #8
 8019064:	d827      	bhi.n	80190b6 <UART_SetConfig+0x3a6>
 8019066:	a201      	add	r2, pc, #4	; (adr r2, 801906c <UART_SetConfig+0x35c>)
 8019068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801906c:	08019091 	.word	0x08019091
 8019070:	08019099 	.word	0x08019099
 8019074:	080190a1 	.word	0x080190a1
 8019078:	080190b7 	.word	0x080190b7
 801907c:	080190a7 	.word	0x080190a7
 8019080:	080190b7 	.word	0x080190b7
 8019084:	080190b7 	.word	0x080190b7
 8019088:	080190b7 	.word	0x080190b7
 801908c:	080190af 	.word	0x080190af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019090:	f7fe fe68 	bl	8017d64 <HAL_RCC_GetPCLK1Freq>
 8019094:	61b8      	str	r0, [r7, #24]
        break;
 8019096:	e013      	b.n	80190c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019098:	f7fe fe78 	bl	8017d8c <HAL_RCC_GetPCLK2Freq>
 801909c:	61b8      	str	r0, [r7, #24]
        break;
 801909e:	e00f      	b.n	80190c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80190a0:	4b4b      	ldr	r3, [pc, #300]	; (80191d0 <UART_SetConfig+0x4c0>)
 80190a2:	61bb      	str	r3, [r7, #24]
        break;
 80190a4:	e00c      	b.n	80190c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80190a6:	f7fe fd9b 	bl	8017be0 <HAL_RCC_GetSysClockFreq>
 80190aa:	61b8      	str	r0, [r7, #24]
        break;
 80190ac:	e008      	b.n	80190c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80190ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80190b2:	61bb      	str	r3, [r7, #24]
        break;
 80190b4:	e004      	b.n	80190c0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80190b6:	2300      	movs	r3, #0
 80190b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80190ba:	2301      	movs	r3, #1
 80190bc:	77bb      	strb	r3, [r7, #30]
        break;
 80190be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80190c0:	69bb      	ldr	r3, [r7, #24]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d074      	beq.n	80191b0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80190c6:	69bb      	ldr	r3, [r7, #24]
 80190c8:	005a      	lsls	r2, r3, #1
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	685b      	ldr	r3, [r3, #4]
 80190ce:	085b      	lsrs	r3, r3, #1
 80190d0:	441a      	add	r2, r3
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	685b      	ldr	r3, [r3, #4]
 80190d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80190da:	b29b      	uxth	r3, r3
 80190dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80190de:	693b      	ldr	r3, [r7, #16]
 80190e0:	2b0f      	cmp	r3, #15
 80190e2:	d916      	bls.n	8019112 <UART_SetConfig+0x402>
 80190e4:	693b      	ldr	r3, [r7, #16]
 80190e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80190ea:	d212      	bcs.n	8019112 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80190ec:	693b      	ldr	r3, [r7, #16]
 80190ee:	b29b      	uxth	r3, r3
 80190f0:	f023 030f 	bic.w	r3, r3, #15
 80190f4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80190f6:	693b      	ldr	r3, [r7, #16]
 80190f8:	085b      	lsrs	r3, r3, #1
 80190fa:	b29b      	uxth	r3, r3
 80190fc:	f003 0307 	and.w	r3, r3, #7
 8019100:	b29a      	uxth	r2, r3
 8019102:	89fb      	ldrh	r3, [r7, #14]
 8019104:	4313      	orrs	r3, r2
 8019106:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	89fa      	ldrh	r2, [r7, #14]
 801910e:	60da      	str	r2, [r3, #12]
 8019110:	e04e      	b.n	80191b0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8019112:	2301      	movs	r3, #1
 8019114:	77bb      	strb	r3, [r7, #30]
 8019116:	e04b      	b.n	80191b0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8019118:	7ffb      	ldrb	r3, [r7, #31]
 801911a:	2b08      	cmp	r3, #8
 801911c:	d827      	bhi.n	801916e <UART_SetConfig+0x45e>
 801911e:	a201      	add	r2, pc, #4	; (adr r2, 8019124 <UART_SetConfig+0x414>)
 8019120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019124:	08019149 	.word	0x08019149
 8019128:	08019151 	.word	0x08019151
 801912c:	08019159 	.word	0x08019159
 8019130:	0801916f 	.word	0x0801916f
 8019134:	0801915f 	.word	0x0801915f
 8019138:	0801916f 	.word	0x0801916f
 801913c:	0801916f 	.word	0x0801916f
 8019140:	0801916f 	.word	0x0801916f
 8019144:	08019167 	.word	0x08019167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019148:	f7fe fe0c 	bl	8017d64 <HAL_RCC_GetPCLK1Freq>
 801914c:	61b8      	str	r0, [r7, #24]
        break;
 801914e:	e013      	b.n	8019178 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019150:	f7fe fe1c 	bl	8017d8c <HAL_RCC_GetPCLK2Freq>
 8019154:	61b8      	str	r0, [r7, #24]
        break;
 8019156:	e00f      	b.n	8019178 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8019158:	4b1d      	ldr	r3, [pc, #116]	; (80191d0 <UART_SetConfig+0x4c0>)
 801915a:	61bb      	str	r3, [r7, #24]
        break;
 801915c:	e00c      	b.n	8019178 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801915e:	f7fe fd3f 	bl	8017be0 <HAL_RCC_GetSysClockFreq>
 8019162:	61b8      	str	r0, [r7, #24]
        break;
 8019164:	e008      	b.n	8019178 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801916a:	61bb      	str	r3, [r7, #24]
        break;
 801916c:	e004      	b.n	8019178 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 801916e:	2300      	movs	r3, #0
 8019170:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8019172:	2301      	movs	r3, #1
 8019174:	77bb      	strb	r3, [r7, #30]
        break;
 8019176:	bf00      	nop
    }

    if (pclk != 0U)
 8019178:	69bb      	ldr	r3, [r7, #24]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d018      	beq.n	80191b0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	685b      	ldr	r3, [r3, #4]
 8019182:	085a      	lsrs	r2, r3, #1
 8019184:	69bb      	ldr	r3, [r7, #24]
 8019186:	441a      	add	r2, r3
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	685b      	ldr	r3, [r3, #4]
 801918c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019190:	b29b      	uxth	r3, r3
 8019192:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019194:	693b      	ldr	r3, [r7, #16]
 8019196:	2b0f      	cmp	r3, #15
 8019198:	d908      	bls.n	80191ac <UART_SetConfig+0x49c>
 801919a:	693b      	ldr	r3, [r7, #16]
 801919c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80191a0:	d204      	bcs.n	80191ac <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	693a      	ldr	r2, [r7, #16]
 80191a8:	60da      	str	r2, [r3, #12]
 80191aa:	e001      	b.n	80191b0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80191ac:	2301      	movs	r3, #1
 80191ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	2200      	movs	r2, #0
 80191b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	2200      	movs	r2, #0
 80191ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80191bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80191be:	4618      	mov	r0, r3
 80191c0:	3720      	adds	r7, #32
 80191c2:	46bd      	mov	sp, r7
 80191c4:	bd80      	pop	{r7, pc}
 80191c6:	bf00      	nop
 80191c8:	40007c00 	.word	0x40007c00
 80191cc:	40023800 	.word	0x40023800
 80191d0:	00f42400 	.word	0x00f42400

080191d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80191d4:	b480      	push	{r7}
 80191d6:	b083      	sub	sp, #12
 80191d8:	af00      	add	r7, sp, #0
 80191da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191e0:	f003 0301 	and.w	r3, r3, #1
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d00a      	beq.n	80191fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	685b      	ldr	r3, [r3, #4]
 80191ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	430a      	orrs	r2, r1
 80191fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019202:	f003 0302 	and.w	r3, r3, #2
 8019206:	2b00      	cmp	r3, #0
 8019208:	d00a      	beq.n	8019220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	685b      	ldr	r3, [r3, #4]
 8019210:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	430a      	orrs	r2, r1
 801921e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019224:	f003 0304 	and.w	r3, r3, #4
 8019228:	2b00      	cmp	r3, #0
 801922a:	d00a      	beq.n	8019242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	685b      	ldr	r3, [r3, #4]
 8019232:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	430a      	orrs	r2, r1
 8019240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019246:	f003 0308 	and.w	r3, r3, #8
 801924a:	2b00      	cmp	r3, #0
 801924c:	d00a      	beq.n	8019264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	685b      	ldr	r3, [r3, #4]
 8019254:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	430a      	orrs	r2, r1
 8019262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019268:	f003 0310 	and.w	r3, r3, #16
 801926c:	2b00      	cmp	r3, #0
 801926e:	d00a      	beq.n	8019286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	689b      	ldr	r3, [r3, #8]
 8019276:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	430a      	orrs	r2, r1
 8019284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801928a:	f003 0320 	and.w	r3, r3, #32
 801928e:	2b00      	cmp	r3, #0
 8019290:	d00a      	beq.n	80192a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	689b      	ldr	r3, [r3, #8]
 8019298:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	430a      	orrs	r2, r1
 80192a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d01a      	beq.n	80192ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	685b      	ldr	r3, [r3, #4]
 80192ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	430a      	orrs	r2, r1
 80192c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80192d2:	d10a      	bne.n	80192ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	685b      	ldr	r3, [r3, #4]
 80192da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	430a      	orrs	r2, r1
 80192e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d00a      	beq.n	801930c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	685b      	ldr	r3, [r3, #4]
 80192fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	430a      	orrs	r2, r1
 801930a:	605a      	str	r2, [r3, #4]
  }
}
 801930c:	bf00      	nop
 801930e:	370c      	adds	r7, #12
 8019310:	46bd      	mov	sp, r7
 8019312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019316:	4770      	bx	lr

08019318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b086      	sub	sp, #24
 801931c:	af02      	add	r7, sp, #8
 801931e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	2200      	movs	r2, #0
 8019324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019328:	f7fd fcfa 	bl	8016d20 <HAL_GetTick>
 801932c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	f003 0308 	and.w	r3, r3, #8
 8019338:	2b08      	cmp	r3, #8
 801933a:	d10e      	bne.n	801935a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801933c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8019340:	9300      	str	r3, [sp, #0]
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	2200      	movs	r2, #0
 8019346:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801934a:	6878      	ldr	r0, [r7, #4]
 801934c:	f000 f817 	bl	801937e <UART_WaitOnFlagUntilTimeout>
 8019350:	4603      	mov	r3, r0
 8019352:	2b00      	cmp	r3, #0
 8019354:	d001      	beq.n	801935a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019356:	2303      	movs	r3, #3
 8019358:	e00d      	b.n	8019376 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	2220      	movs	r2, #32
 801935e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	2220      	movs	r2, #32
 8019364:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	2200      	movs	r2, #0
 801936a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	2200      	movs	r2, #0
 8019370:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8019374:	2300      	movs	r3, #0
}
 8019376:	4618      	mov	r0, r3
 8019378:	3710      	adds	r7, #16
 801937a:	46bd      	mov	sp, r7
 801937c:	bd80      	pop	{r7, pc}

0801937e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801937e:	b580      	push	{r7, lr}
 8019380:	b084      	sub	sp, #16
 8019382:	af00      	add	r7, sp, #0
 8019384:	60f8      	str	r0, [r7, #12]
 8019386:	60b9      	str	r1, [r7, #8]
 8019388:	603b      	str	r3, [r7, #0]
 801938a:	4613      	mov	r3, r2
 801938c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801938e:	e05e      	b.n	801944e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019390:	69bb      	ldr	r3, [r7, #24]
 8019392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019396:	d05a      	beq.n	801944e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019398:	f7fd fcc2 	bl	8016d20 <HAL_GetTick>
 801939c:	4602      	mov	r2, r0
 801939e:	683b      	ldr	r3, [r7, #0]
 80193a0:	1ad3      	subs	r3, r2, r3
 80193a2:	69ba      	ldr	r2, [r7, #24]
 80193a4:	429a      	cmp	r2, r3
 80193a6:	d302      	bcc.n	80193ae <UART_WaitOnFlagUntilTimeout+0x30>
 80193a8:	69bb      	ldr	r3, [r7, #24]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d11b      	bne.n	80193e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	681a      	ldr	r2, [r3, #0]
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80193bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	689a      	ldr	r2, [r3, #8]
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	f022 0201 	bic.w	r2, r2, #1
 80193cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	2220      	movs	r2, #32
 80193d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	2220      	movs	r2, #32
 80193d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	2200      	movs	r2, #0
 80193de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80193e2:	2303      	movs	r3, #3
 80193e4:	e043      	b.n	801946e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	f003 0304 	and.w	r3, r3, #4
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d02c      	beq.n	801944e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	69db      	ldr	r3, [r3, #28]
 80193fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80193fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019402:	d124      	bne.n	801944e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801940c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	681a      	ldr	r2, [r3, #0]
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801941c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	689a      	ldr	r2, [r3, #8]
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	f022 0201 	bic.w	r2, r2, #1
 801942c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	2220      	movs	r2, #32
 8019432:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	2220      	movs	r2, #32
 8019438:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	2220      	movs	r2, #32
 801943e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	2200      	movs	r2, #0
 8019446:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 801944a:	2303      	movs	r3, #3
 801944c:	e00f      	b.n	801946e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	69da      	ldr	r2, [r3, #28]
 8019454:	68bb      	ldr	r3, [r7, #8]
 8019456:	4013      	ands	r3, r2
 8019458:	68ba      	ldr	r2, [r7, #8]
 801945a:	429a      	cmp	r2, r3
 801945c:	bf0c      	ite	eq
 801945e:	2301      	moveq	r3, #1
 8019460:	2300      	movne	r3, #0
 8019462:	b2db      	uxtb	r3, r3
 8019464:	461a      	mov	r2, r3
 8019466:	79fb      	ldrb	r3, [r7, #7]
 8019468:	429a      	cmp	r2, r3
 801946a:	d091      	beq.n	8019390 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801946c:	2300      	movs	r3, #0
}
 801946e:	4618      	mov	r0, r3
 8019470:	3710      	adds	r7, #16
 8019472:	46bd      	mov	sp, r7
 8019474:	bd80      	pop	{r7, pc}

08019476 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019476:	b480      	push	{r7}
 8019478:	b083      	sub	sp, #12
 801947a:	af00      	add	r7, sp, #0
 801947c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	681a      	ldr	r2, [r3, #0]
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801948c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	689a      	ldr	r2, [r3, #8]
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	f022 0201 	bic.w	r2, r2, #1
 801949c:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80194a2:	2b01      	cmp	r3, #1
 80194a4:	d107      	bne.n	80194b6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	681a      	ldr	r2, [r3, #0]
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	f022 0210 	bic.w	r2, r2, #16
 80194b4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	2220      	movs	r2, #32
 80194ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	2200      	movs	r2, #0
 80194c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	2200      	movs	r2, #0
 80194c6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80194c8:	bf00      	nop
 80194ca:	370c      	adds	r7, #12
 80194cc:	46bd      	mov	sp, r7
 80194ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194d2:	4770      	bx	lr

080194d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80194d4:	b580      	push	{r7, lr}
 80194d6:	b084      	sub	sp, #16
 80194d8:	af00      	add	r7, sp, #0
 80194da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	2200      	movs	r2, #0
 80194e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	2200      	movs	r2, #0
 80194ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80194f2:	68f8      	ldr	r0, [r7, #12]
 80194f4:	f7ff fbf6 	bl	8018ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80194f8:	bf00      	nop
 80194fa:	3710      	adds	r7, #16
 80194fc:	46bd      	mov	sp, r7
 80194fe:	bd80      	pop	{r7, pc}

08019500 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8019500:	b580      	push	{r7, lr}
 8019502:	b082      	sub	sp, #8
 8019504:	af00      	add	r7, sp, #0
 8019506:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	681a      	ldr	r2, [r3, #0]
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019516:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	2220      	movs	r2, #32
 801951c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	2200      	movs	r2, #0
 8019522:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8019524:	6878      	ldr	r0, [r7, #4]
 8019526:	f7ff fbd3 	bl	8018cd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801952a:	bf00      	nop
 801952c:	3708      	adds	r7, #8
 801952e:	46bd      	mov	sp, r7
 8019530:	bd80      	pop	{r7, pc}

08019532 <_ZdlPv>:
 8019532:	f000 bb8b 	b.w	8019c4c <free>

08019536 <_ZdlPvj>:
 8019536:	f7ff bffc 	b.w	8019532 <_ZdlPv>

0801953a <_Znwj>:
 801953a:	2801      	cmp	r0, #1
 801953c:	bf38      	it	cc
 801953e:	2001      	movcc	r0, #1
 8019540:	b510      	push	{r4, lr}
 8019542:	4604      	mov	r4, r0
 8019544:	4620      	mov	r0, r4
 8019546:	f000 fb79 	bl	8019c3c <malloc>
 801954a:	b930      	cbnz	r0, 801955a <_Znwj+0x20>
 801954c:	f000 fb0a 	bl	8019b64 <_ZSt15get_new_handlerv>
 8019550:	b908      	cbnz	r0, 8019556 <_Znwj+0x1c>
 8019552:	f000 fb0f 	bl	8019b74 <abort>
 8019556:	4780      	blx	r0
 8019558:	e7f4      	b.n	8019544 <_Znwj+0xa>
 801955a:	bd10      	pop	{r4, pc}

0801955c <_ZNSaIcEC1Ev>:
 801955c:	4770      	bx	lr

0801955e <_ZNSaIcED1Ev>:
 801955e:	4770      	bx	lr

08019560 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8019560:	68c3      	ldr	r3, [r0, #12]
 8019562:	689a      	ldr	r2, [r3, #8]
 8019564:	60c2      	str	r2, [r0, #12]
 8019566:	b510      	push	{r4, lr}
 8019568:	b102      	cbz	r2, 801956c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 801956a:	6050      	str	r0, [r2, #4]
 801956c:	6842      	ldr	r2, [r0, #4]
 801956e:	605a      	str	r2, [r3, #4]
 8019570:	680c      	ldr	r4, [r1, #0]
 8019572:	4284      	cmp	r4, r0
 8019574:	d103      	bne.n	801957e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8019576:	600b      	str	r3, [r1, #0]
 8019578:	6098      	str	r0, [r3, #8]
 801957a:	6043      	str	r3, [r0, #4]
 801957c:	bd10      	pop	{r4, pc}
 801957e:	6891      	ldr	r1, [r2, #8]
 8019580:	4281      	cmp	r1, r0
 8019582:	bf0c      	ite	eq
 8019584:	6093      	streq	r3, [r2, #8]
 8019586:	60d3      	strne	r3, [r2, #12]
 8019588:	e7f6      	b.n	8019578 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0801958a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 801958a:	6883      	ldr	r3, [r0, #8]
 801958c:	68da      	ldr	r2, [r3, #12]
 801958e:	6082      	str	r2, [r0, #8]
 8019590:	b510      	push	{r4, lr}
 8019592:	b102      	cbz	r2, 8019596 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8019594:	6050      	str	r0, [r2, #4]
 8019596:	6842      	ldr	r2, [r0, #4]
 8019598:	605a      	str	r2, [r3, #4]
 801959a:	680c      	ldr	r4, [r1, #0]
 801959c:	4284      	cmp	r4, r0
 801959e:	d103      	bne.n	80195a8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 80195a0:	600b      	str	r3, [r1, #0]
 80195a2:	60d8      	str	r0, [r3, #12]
 80195a4:	6043      	str	r3, [r0, #4]
 80195a6:	bd10      	pop	{r4, pc}
 80195a8:	68d1      	ldr	r1, [r2, #12]
 80195aa:	4281      	cmp	r1, r0
 80195ac:	bf0c      	ite	eq
 80195ae:	60d3      	streq	r3, [r2, #12]
 80195b0:	6093      	strne	r3, [r2, #8]
 80195b2:	e7f6      	b.n	80195a2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

080195b4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80195b4:	7803      	ldrb	r3, [r0, #0]
 80195b6:	b933      	cbnz	r3, 80195c6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80195b8:	6843      	ldr	r3, [r0, #4]
 80195ba:	685b      	ldr	r3, [r3, #4]
 80195bc:	4283      	cmp	r3, r0
 80195be:	d102      	bne.n	80195c6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80195c0:	68db      	ldr	r3, [r3, #12]
 80195c2:	4618      	mov	r0, r3
 80195c4:	4770      	bx	lr
 80195c6:	6882      	ldr	r2, [r0, #8]
 80195c8:	b122      	cbz	r2, 80195d4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 80195ca:	4613      	mov	r3, r2
 80195cc:	68d2      	ldr	r2, [r2, #12]
 80195ce:	2a00      	cmp	r2, #0
 80195d0:	d1fb      	bne.n	80195ca <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 80195d2:	e7f6      	b.n	80195c2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 80195d4:	6843      	ldr	r3, [r0, #4]
 80195d6:	689a      	ldr	r2, [r3, #8]
 80195d8:	4282      	cmp	r2, r0
 80195da:	d1f2      	bne.n	80195c2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 80195dc:	4618      	mov	r0, r3
 80195de:	685b      	ldr	r3, [r3, #4]
 80195e0:	e7f9      	b.n	80195d6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

080195e2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80195e2:	68c3      	ldr	r3, [r0, #12]
 80195e4:	b123      	cbz	r3, 80195f0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 80195e6:	4618      	mov	r0, r3
 80195e8:	689b      	ldr	r3, [r3, #8]
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d1fb      	bne.n	80195e6 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80195ee:	4770      	bx	lr
 80195f0:	6843      	ldr	r3, [r0, #4]
 80195f2:	68da      	ldr	r2, [r3, #12]
 80195f4:	4282      	cmp	r2, r0
 80195f6:	d102      	bne.n	80195fe <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 80195f8:	4618      	mov	r0, r3
 80195fa:	685b      	ldr	r3, [r3, #4]
 80195fc:	e7f9      	b.n	80195f2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80195fe:	68c2      	ldr	r2, [r0, #12]
 8019600:	4293      	cmp	r3, r2
 8019602:	bf18      	it	ne
 8019604:	4618      	movne	r0, r3
 8019606:	4770      	bx	lr

08019608 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8019608:	f7ff bfd4 	b.w	80195b4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0801960c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 801960c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019610:	461e      	mov	r6, r3
 8019612:	f103 0804 	add.w	r8, r3, #4
 8019616:	2300      	movs	r3, #0
 8019618:	e9c1 3302 	strd	r3, r3, [r1, #8]
 801961c:	460c      	mov	r4, r1
 801961e:	604a      	str	r2, [r1, #4]
 8019620:	700b      	strb	r3, [r1, #0]
 8019622:	b300      	cbz	r0, 8019666 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8019624:	4296      	cmp	r6, r2
 8019626:	6091      	str	r1, [r2, #8]
 8019628:	d118      	bne.n	801965c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 801962a:	6071      	str	r1, [r6, #4]
 801962c:	60f4      	str	r4, [r6, #12]
 801962e:	2701      	movs	r7, #1
 8019630:	f04f 0900 	mov.w	r9, #0
 8019634:	6873      	ldr	r3, [r6, #4]
 8019636:	42a3      	cmp	r3, r4
 8019638:	d03f      	beq.n	80196ba <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 801963a:	6860      	ldr	r0, [r4, #4]
 801963c:	7802      	ldrb	r2, [r0, #0]
 801963e:	2a00      	cmp	r2, #0
 8019640:	d13c      	bne.n	80196bc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 8019642:	6845      	ldr	r5, [r0, #4]
 8019644:	68ab      	ldr	r3, [r5, #8]
 8019646:	4298      	cmp	r0, r3
 8019648:	d123      	bne.n	8019692 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 801964a:	68eb      	ldr	r3, [r5, #12]
 801964c:	b183      	cbz	r3, 8019670 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 801964e:	781a      	ldrb	r2, [r3, #0]
 8019650:	b972      	cbnz	r2, 8019670 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8019652:	7007      	strb	r7, [r0, #0]
 8019654:	701f      	strb	r7, [r3, #0]
 8019656:	702a      	strb	r2, [r5, #0]
 8019658:	462c      	mov	r4, r5
 801965a:	e7eb      	b.n	8019634 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 801965c:	68b3      	ldr	r3, [r6, #8]
 801965e:	4293      	cmp	r3, r2
 8019660:	d1e5      	bne.n	801962e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8019662:	60b1      	str	r1, [r6, #8]
 8019664:	e7e3      	b.n	801962e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8019666:	60d1      	str	r1, [r2, #12]
 8019668:	68f3      	ldr	r3, [r6, #12]
 801966a:	4293      	cmp	r3, r2
 801966c:	d1df      	bne.n	801962e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801966e:	e7dd      	b.n	801962c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8019670:	68c3      	ldr	r3, [r0, #12]
 8019672:	42a3      	cmp	r3, r4
 8019674:	d103      	bne.n	801967e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8019676:	4641      	mov	r1, r8
 8019678:	f7ff ff72 	bl	8019560 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801967c:	4604      	mov	r4, r0
 801967e:	6863      	ldr	r3, [r4, #4]
 8019680:	4641      	mov	r1, r8
 8019682:	701f      	strb	r7, [r3, #0]
 8019684:	4628      	mov	r0, r5
 8019686:	f885 9000 	strb.w	r9, [r5]
 801968a:	f7ff ff7e 	bl	801958a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801968e:	4625      	mov	r5, r4
 8019690:	e7e2      	b.n	8019658 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8019692:	b113      	cbz	r3, 801969a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8019694:	781a      	ldrb	r2, [r3, #0]
 8019696:	2a00      	cmp	r2, #0
 8019698:	d0db      	beq.n	8019652 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 801969a:	6883      	ldr	r3, [r0, #8]
 801969c:	42a3      	cmp	r3, r4
 801969e:	d103      	bne.n	80196a8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 80196a0:	4641      	mov	r1, r8
 80196a2:	f7ff ff72 	bl	801958a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80196a6:	4604      	mov	r4, r0
 80196a8:	6863      	ldr	r3, [r4, #4]
 80196aa:	4641      	mov	r1, r8
 80196ac:	701f      	strb	r7, [r3, #0]
 80196ae:	4628      	mov	r0, r5
 80196b0:	f885 9000 	strb.w	r9, [r5]
 80196b4:	f7ff ff54 	bl	8019560 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80196b8:	e7e9      	b.n	801968e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 80196ba:	4623      	mov	r3, r4
 80196bc:	2201      	movs	r2, #1
 80196be:	701a      	strb	r2, [r3, #0]
 80196c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080196c4 <_ZSt17__throw_bad_allocv>:
 80196c4:	b508      	push	{r3, lr}
 80196c6:	f000 fa55 	bl	8019b74 <abort>

080196ca <_ZSt19__throw_logic_errorPKc>:
 80196ca:	b508      	push	{r3, lr}
 80196cc:	f000 fa52 	bl	8019b74 <abort>

080196d0 <_ZSt24__throw_invalid_argumentPKc>:
 80196d0:	b508      	push	{r3, lr}
 80196d2:	f000 fa4f 	bl	8019b74 <abort>

080196d6 <_ZSt20__throw_length_errorPKc>:
 80196d6:	b508      	push	{r3, lr}
 80196d8:	f000 fa4c 	bl	8019b74 <abort>

080196dc <_ZSt20__throw_out_of_rangePKc>:
 80196dc:	b508      	push	{r3, lr}
 80196de:	f000 fa49 	bl	8019b74 <abort>

080196e2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 80196e2:	b10a      	cbz	r2, 80196e8 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 80196e4:	f000 baba 	b.w	8019c5c <memcmp>
 80196e8:	4610      	mov	r0, r2
 80196ea:	4770      	bx	lr

080196ec <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80196ec:	b10a      	cbz	r2, 80196f2 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80196ee:	f000 bac3 	b.w	8019c78 <memcpy>
 80196f2:	4770      	bx	lr

080196f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80196f4:	6001      	str	r1, [r0, #0]
 80196f6:	4770      	bx	lr

080196f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80196f8:	6800      	ldr	r0, [r0, #0]
 80196fa:	4770      	bx	lr

080196fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80196fc:	3008      	adds	r0, #8
 80196fe:	4770      	bx	lr

08019700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8019700:	6081      	str	r1, [r0, #8]
 8019702:	4770      	bx	lr

08019704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8019704:	6803      	ldr	r3, [r0, #0]
 8019706:	6041      	str	r1, [r0, #4]
 8019708:	2200      	movs	r2, #0
 801970a:	545a      	strb	r2, [r3, r1]
 801970c:	4770      	bx	lr
	...

08019710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8019710:	b508      	push	{r3, lr}
 8019712:	680b      	ldr	r3, [r1, #0]
 8019714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019718:	d302      	bcc.n	8019720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801971a:	480d      	ldr	r0, [pc, #52]	; (8019750 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801971c:	f7ff ffdb 	bl	80196d6 <_ZSt20__throw_length_errorPKc>
 8019720:	4293      	cmp	r3, r2
 8019722:	d90b      	bls.n	801973c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8019724:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8019728:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801972c:	d206      	bcs.n	801973c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801972e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8019732:	bf2a      	itet	cs
 8019734:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8019738:	6008      	strcc	r0, [r1, #0]
 801973a:	600b      	strcs	r3, [r1, #0]
 801973c:	6808      	ldr	r0, [r1, #0]
 801973e:	3001      	adds	r0, #1
 8019740:	d501      	bpl.n	8019746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8019742:	f7ff ffbf 	bl	80196c4 <_ZSt17__throw_bad_allocv>
 8019746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801974a:	f7ff bef6 	b.w	801953a <_Znwj>
 801974e:	bf00      	nop
 8019750:	0801d288 	.word	0x0801d288

08019754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8019754:	f850 3b08 	ldr.w	r3, [r0], #8
 8019758:	4283      	cmp	r3, r0
 801975a:	d002      	beq.n	8019762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801975c:	4618      	mov	r0, r3
 801975e:	f7ff bee8 	b.w	8019532 <_ZdlPv>
 8019762:	4770      	bx	lr

08019764 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8019764:	6840      	ldr	r0, [r0, #4]
 8019766:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801976a:	3901      	subs	r1, #1
 801976c:	1a09      	subs	r1, r1, r0
 801976e:	4291      	cmp	r1, r2
 8019770:	b508      	push	{r3, lr}
 8019772:	d202      	bcs.n	801977a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8019774:	4618      	mov	r0, r3
 8019776:	f7ff ffae 	bl	80196d6 <_ZSt20__throw_length_errorPKc>
 801977a:	bd08      	pop	{r3, pc}

0801977c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801977c:	2a01      	cmp	r2, #1
 801977e:	b510      	push	{r4, lr}
 8019780:	d102      	bne.n	8019788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8019782:	780a      	ldrb	r2, [r1, #0]
 8019784:	7002      	strb	r2, [r0, #0]
 8019786:	bd10      	pop	{r4, pc}
 8019788:	f7ff ffb0 	bl	80196ec <_ZNSt11char_traitsIcE4copyEPcPKcj>
 801978c:	e7fb      	b.n	8019786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0801978e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 801978e:	2a01      	cmp	r2, #1
 8019790:	b430      	push	{r4, r5}
 8019792:	d103      	bne.n	801979c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8019794:	780b      	ldrb	r3, [r1, #0]
 8019796:	7003      	strb	r3, [r0, #0]
 8019798:	bc30      	pop	{r4, r5}
 801979a:	4770      	bx	lr
 801979c:	2a00      	cmp	r2, #0
 801979e:	d0fb      	beq.n	8019798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80197a0:	bc30      	pop	{r4, r5}
 80197a2:	f000 ba77 	b.w	8019c94 <memmove>

080197a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80197a6:	b508      	push	{r3, lr}
 80197a8:	1a52      	subs	r2, r2, r1
 80197aa:	f7ff ffe7 	bl	801977c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80197ae:	bd08      	pop	{r3, pc}

080197b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80197b0:	b508      	push	{r3, lr}
 80197b2:	1a52      	subs	r2, r2, r1
 80197b4:	f7ff ffe2 	bl	801977c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80197b8:	bd08      	pop	{r3, pc}

080197ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80197ba:	4288      	cmp	r0, r1
 80197bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80197be:	4604      	mov	r4, r0
 80197c0:	460e      	mov	r6, r1
 80197c2:	d01e      	beq.n	8019802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 80197c4:	4603      	mov	r3, r0
 80197c6:	684d      	ldr	r5, [r1, #4]
 80197c8:	f853 2b08 	ldr.w	r2, [r3], #8
 80197cc:	429a      	cmp	r2, r3
 80197ce:	bf14      	ite	ne
 80197d0:	6882      	ldrne	r2, [r0, #8]
 80197d2:	220f      	moveq	r2, #15
 80197d4:	42aa      	cmp	r2, r5
 80197d6:	d20a      	bcs.n	80197ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 80197d8:	a901      	add	r1, sp, #4
 80197da:	9501      	str	r5, [sp, #4]
 80197dc:	f7ff ff98 	bl	8019710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80197e0:	4607      	mov	r7, r0
 80197e2:	4620      	mov	r0, r4
 80197e4:	f7ff ffb6 	bl	8019754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80197e8:	9b01      	ldr	r3, [sp, #4]
 80197ea:	6027      	str	r7, [r4, #0]
 80197ec:	60a3      	str	r3, [r4, #8]
 80197ee:	b125      	cbz	r5, 80197fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 80197f0:	6831      	ldr	r1, [r6, #0]
 80197f2:	6820      	ldr	r0, [r4, #0]
 80197f4:	462a      	mov	r2, r5
 80197f6:	f7ff ffc1 	bl	801977c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80197fa:	6823      	ldr	r3, [r4, #0]
 80197fc:	6065      	str	r5, [r4, #4]
 80197fe:	2200      	movs	r2, #0
 8019800:	555a      	strb	r2, [r3, r5]
 8019802:	b003      	add	sp, #12
 8019804:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8019806:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801980a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801980c:	461f      	mov	r7, r3
 801980e:	6843      	ldr	r3, [r0, #4]
 8019810:	eb01 0802 	add.w	r8, r1, r2
 8019814:	1ab2      	subs	r2, r6, r2
 8019816:	441a      	add	r2, r3
 8019818:	eba3 0908 	sub.w	r9, r3, r8
 801981c:	4603      	mov	r3, r0
 801981e:	9201      	str	r2, [sp, #4]
 8019820:	f853 2b08 	ldr.w	r2, [r3], #8
 8019824:	429a      	cmp	r2, r3
 8019826:	bf18      	it	ne
 8019828:	6882      	ldrne	r2, [r0, #8]
 801982a:	460d      	mov	r5, r1
 801982c:	bf08      	it	eq
 801982e:	220f      	moveq	r2, #15
 8019830:	a901      	add	r1, sp, #4
 8019832:	4604      	mov	r4, r0
 8019834:	f7ff ff6c 	bl	8019710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8019838:	4682      	mov	sl, r0
 801983a:	b11d      	cbz	r5, 8019844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 801983c:	6821      	ldr	r1, [r4, #0]
 801983e:	462a      	mov	r2, r5
 8019840:	f7ff ff9c 	bl	801977c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8019844:	b137      	cbz	r7, 8019854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8019846:	b12e      	cbz	r6, 8019854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8019848:	4632      	mov	r2, r6
 801984a:	4639      	mov	r1, r7
 801984c:	eb0a 0005 	add.w	r0, sl, r5
 8019850:	f7ff ff94 	bl	801977c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8019854:	f1b9 0f00 	cmp.w	r9, #0
 8019858:	d007      	beq.n	801986a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 801985a:	6821      	ldr	r1, [r4, #0]
 801985c:	4435      	add	r5, r6
 801985e:	464a      	mov	r2, r9
 8019860:	4441      	add	r1, r8
 8019862:	eb0a 0005 	add.w	r0, sl, r5
 8019866:	f7ff ff89 	bl	801977c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801986a:	4620      	mov	r0, r4
 801986c:	f7ff ff72 	bl	8019754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8019870:	9b01      	ldr	r3, [sp, #4]
 8019872:	f8c4 a000 	str.w	sl, [r4]
 8019876:	60a3      	str	r3, [r4, #8]
 8019878:	b002      	add	sp, #8
 801987a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801987e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 801987e:	b538      	push	{r3, r4, r5, lr}
 8019880:	4604      	mov	r4, r0
 8019882:	4615      	mov	r5, r2
 8019884:	4608      	mov	r0, r1
 8019886:	4411      	add	r1, r2
 8019888:	6862      	ldr	r2, [r4, #4]
 801988a:	1a52      	subs	r2, r2, r1
 801988c:	d005      	beq.n	801989a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 801988e:	b125      	cbz	r5, 801989a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8019890:	6823      	ldr	r3, [r4, #0]
 8019892:	4419      	add	r1, r3
 8019894:	4418      	add	r0, r3
 8019896:	f7ff ff7a 	bl	801978e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801989a:	6862      	ldr	r2, [r4, #4]
 801989c:	6823      	ldr	r3, [r4, #0]
 801989e:	1b55      	subs	r5, r2, r5
 80198a0:	2200      	movs	r2, #0
 80198a2:	6065      	str	r5, [r4, #4]
 80198a4:	555a      	strb	r2, [r3, r5]
 80198a6:	bd38      	pop	{r3, r4, r5, pc}

080198a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80198a8:	f100 0208 	add.w	r2, r0, #8
 80198ac:	6002      	str	r2, [r0, #0]
 80198ae:	2200      	movs	r2, #0
 80198b0:	6042      	str	r2, [r0, #4]
 80198b2:	7202      	strb	r2, [r0, #8]
 80198b4:	4770      	bx	lr

080198b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 80198b6:	b570      	push	{r4, r5, r6, lr}
 80198b8:	4604      	mov	r4, r0
 80198ba:	460e      	mov	r6, r1
 80198bc:	3008      	adds	r0, #8
 80198be:	6020      	str	r0, [r4, #0]
 80198c0:	f856 3b08 	ldr.w	r3, [r6], #8
 80198c4:	429e      	cmp	r6, r3
 80198c6:	460d      	mov	r5, r1
 80198c8:	d10b      	bne.n	80198e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 80198ca:	2210      	movs	r2, #16
 80198cc:	4631      	mov	r1, r6
 80198ce:	f7ff ff0d 	bl	80196ec <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80198d2:	686b      	ldr	r3, [r5, #4]
 80198d4:	6063      	str	r3, [r4, #4]
 80198d6:	2300      	movs	r3, #0
 80198d8:	602e      	str	r6, [r5, #0]
 80198da:	606b      	str	r3, [r5, #4]
 80198dc:	722b      	strb	r3, [r5, #8]
 80198de:	4620      	mov	r0, r4
 80198e0:	bd70      	pop	{r4, r5, r6, pc}
 80198e2:	6023      	str	r3, [r4, #0]
 80198e4:	688b      	ldr	r3, [r1, #8]
 80198e6:	60a3      	str	r3, [r4, #8]
 80198e8:	e7f3      	b.n	80198d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

080198ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80198ea:	b510      	push	{r4, lr}
 80198ec:	4604      	mov	r4, r0
 80198ee:	f7ff ff31 	bl	8019754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80198f2:	4620      	mov	r0, r4
 80198f4:	bd10      	pop	{r4, pc}

080198f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 80198f6:	b510      	push	{r4, lr}
 80198f8:	4604      	mov	r4, r0
 80198fa:	f7ff ff5e 	bl	80197ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80198fe:	4620      	mov	r0, r4
 8019900:	bd10      	pop	{r4, pc}

08019902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8019902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019904:	460d      	mov	r5, r1
 8019906:	f851 3b08 	ldr.w	r3, [r1], #8
 801990a:	686a      	ldr	r2, [r5, #4]
 801990c:	4299      	cmp	r1, r3
 801990e:	4604      	mov	r4, r0
 8019910:	6800      	ldr	r0, [r0, #0]
 8019912:	d10d      	bne.n	8019930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8019914:	b10a      	cbz	r2, 801991a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 8019916:	f7ff ff31 	bl	801977c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801991a:	686b      	ldr	r3, [r5, #4]
 801991c:	6822      	ldr	r2, [r4, #0]
 801991e:	6063      	str	r3, [r4, #4]
 8019920:	2100      	movs	r1, #0
 8019922:	54d1      	strb	r1, [r2, r3]
 8019924:	682a      	ldr	r2, [r5, #0]
 8019926:	2300      	movs	r3, #0
 8019928:	606b      	str	r3, [r5, #4]
 801992a:	7013      	strb	r3, [r2, #0]
 801992c:	4620      	mov	r0, r4
 801992e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019930:	e9c4 3200 	strd	r3, r2, [r4]
 8019934:	f104 0708 	add.w	r7, r4, #8
 8019938:	42b8      	cmp	r0, r7
 801993a:	68ab      	ldr	r3, [r5, #8]
 801993c:	bf18      	it	ne
 801993e:	68a6      	ldrne	r6, [r4, #8]
 8019940:	60a3      	str	r3, [r4, #8]
 8019942:	bf08      	it	eq
 8019944:	2000      	moveq	r0, #0
 8019946:	b110      	cbz	r0, 801994e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 8019948:	6028      	str	r0, [r5, #0]
 801994a:	60ae      	str	r6, [r5, #8]
 801994c:	e7ea      	b.n	8019924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 801994e:	6029      	str	r1, [r5, #0]
 8019950:	e7e8      	b.n	8019924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

08019952 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8019952:	6840      	ldr	r0, [r0, #4]
 8019954:	4770      	bx	lr

08019956 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8019956:	6840      	ldr	r0, [r0, #4]
 8019958:	4770      	bx	lr

0801995a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 801995a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801995c:	4605      	mov	r5, r0
 801995e:	6843      	ldr	r3, [r0, #4]
 8019960:	4299      	cmp	r1, r3
 8019962:	bf2c      	ite	cs
 8019964:	9101      	strcs	r1, [sp, #4]
 8019966:	9301      	strcc	r3, [sp, #4]
 8019968:	f855 1b08 	ldr.w	r1, [r5], #8
 801996c:	428d      	cmp	r5, r1
 801996e:	bf18      	it	ne
 8019970:	6882      	ldrne	r2, [r0, #8]
 8019972:	4604      	mov	r4, r0
 8019974:	9801      	ldr	r0, [sp, #4]
 8019976:	bf08      	it	eq
 8019978:	220f      	moveq	r2, #15
 801997a:	4290      	cmp	r0, r2
 801997c:	d012      	beq.n	80199a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
 801997e:	d801      	bhi.n	8019984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x2a>
 8019980:	280f      	cmp	r0, #15
 8019982:	d911      	bls.n	80199a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4e>
 8019984:	a901      	add	r1, sp, #4
 8019986:	4620      	mov	r0, r4
 8019988:	f7ff fec2 	bl	8019710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801998c:	6862      	ldr	r2, [r4, #4]
 801998e:	6821      	ldr	r1, [r4, #0]
 8019990:	3201      	adds	r2, #1
 8019992:	4605      	mov	r5, r0
 8019994:	f7ff fef2 	bl	801977c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8019998:	4620      	mov	r0, r4
 801999a:	f7ff fedb 	bl	8019754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801999e:	9b01      	ldr	r3, [sp, #4]
 80199a0:	6025      	str	r5, [r4, #0]
 80199a2:	60a3      	str	r3, [r4, #8]
 80199a4:	b003      	add	sp, #12
 80199a6:	bd30      	pop	{r4, r5, pc}
 80199a8:	428d      	cmp	r5, r1
 80199aa:	d0fb      	beq.n	80199a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
 80199ac:	1c5a      	adds	r2, r3, #1
 80199ae:	4628      	mov	r0, r5
 80199b0:	f7ff fee4 	bl	801977c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80199b4:	6820      	ldr	r0, [r4, #0]
 80199b6:	f7ff fdbc 	bl	8019532 <_ZdlPv>
 80199ba:	6025      	str	r5, [r4, #0]
 80199bc:	e7f2      	b.n	80199a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>

080199be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>:
 80199be:	6843      	ldr	r3, [r0, #4]
 80199c0:	6800      	ldr	r0, [r0, #0]
 80199c2:	3b01      	subs	r3, #1
 80199c4:	4418      	add	r0, r3
 80199c6:	4770      	bx	lr

080199c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80199c8:	4603      	mov	r3, r0
 80199ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80199cc:	f853 2b08 	ldr.w	r2, [r3], #8
 80199d0:	6846      	ldr	r6, [r0, #4]
 80199d2:	429a      	cmp	r2, r3
 80199d4:	bf18      	it	ne
 80199d6:	6883      	ldrne	r3, [r0, #8]
 80199d8:	f106 0501 	add.w	r5, r6, #1
 80199dc:	bf08      	it	eq
 80199de:	230f      	moveq	r3, #15
 80199e0:	429d      	cmp	r5, r3
 80199e2:	4604      	mov	r4, r0
 80199e4:	460f      	mov	r7, r1
 80199e6:	d906      	bls.n	80199f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 80199e8:	2301      	movs	r3, #1
 80199ea:	9300      	str	r3, [sp, #0]
 80199ec:	2300      	movs	r3, #0
 80199ee:	461a      	mov	r2, r3
 80199f0:	4631      	mov	r1, r6
 80199f2:	f7ff ff08 	bl	8019806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80199f6:	6823      	ldr	r3, [r4, #0]
 80199f8:	559f      	strb	r7, [r3, r6]
 80199fa:	6823      	ldr	r3, [r4, #0]
 80199fc:	6065      	str	r5, [r4, #4]
 80199fe:	2200      	movs	r2, #0
 8019a00:	555a      	strb	r2, [r3, r5]
 8019a02:	b003      	add	sp, #12
 8019a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019a06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>:
 8019a06:	b508      	push	{r3, lr}
 8019a08:	6841      	ldr	r1, [r0, #4]
 8019a0a:	2201      	movs	r2, #1
 8019a0c:	3901      	subs	r1, #1
 8019a0e:	f7ff ff36 	bl	801987e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 8019a12:	bd08      	pop	{r3, pc}

08019a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8019a14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019a16:	4604      	mov	r4, r0
 8019a18:	4623      	mov	r3, r4
 8019a1a:	6840      	ldr	r0, [r0, #4]
 8019a1c:	f853 6b08 	ldr.w	r6, [r3], #8
 8019a20:	429e      	cmp	r6, r3
 8019a22:	bf18      	it	ne
 8019a24:	68a3      	ldrne	r3, [r4, #8]
 8019a26:	eb00 0502 	add.w	r5, r0, r2
 8019a2a:	bf08      	it	eq
 8019a2c:	230f      	moveq	r3, #15
 8019a2e:	429d      	cmp	r5, r3
 8019a30:	d80a      	bhi.n	8019a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8019a32:	b112      	cbz	r2, 8019a3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8019a34:	4430      	add	r0, r6
 8019a36:	f7ff fea1 	bl	801977c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8019a3a:	6823      	ldr	r3, [r4, #0]
 8019a3c:	6065      	str	r5, [r4, #4]
 8019a3e:	2200      	movs	r2, #0
 8019a40:	4620      	mov	r0, r4
 8019a42:	555a      	strb	r2, [r3, r5]
 8019a44:	b002      	add	sp, #8
 8019a46:	bd70      	pop	{r4, r5, r6, pc}
 8019a48:	9200      	str	r2, [sp, #0]
 8019a4a:	460b      	mov	r3, r1
 8019a4c:	2200      	movs	r2, #0
 8019a4e:	4601      	mov	r1, r0
 8019a50:	4620      	mov	r0, r4
 8019a52:	f7ff fed8 	bl	8019806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8019a56:	e7f0      	b.n	8019a3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08019a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8019a58:	b508      	push	{r3, lr}
 8019a5a:	e9d1 1200 	ldrd	r1, r2, [r1]
 8019a5e:	f7ff ffd9 	bl	8019a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8019a62:	bd08      	pop	{r3, pc}

08019a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8019a64:	b570      	push	{r4, r5, r6, lr}
 8019a66:	4b06      	ldr	r3, [pc, #24]	; (8019a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8019a68:	4604      	mov	r4, r0
 8019a6a:	460d      	mov	r5, r1
 8019a6c:	4616      	mov	r6, r2
 8019a6e:	2100      	movs	r1, #0
 8019a70:	f7ff fe78 	bl	8019764 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8019a74:	4632      	mov	r2, r6
 8019a76:	4629      	mov	r1, r5
 8019a78:	4620      	mov	r0, r4
 8019a7a:	f7ff ffcb 	bl	8019a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8019a7e:	bd70      	pop	{r4, r5, r6, pc}
 8019a80:	0801d2a0 	.word	0x0801d2a0

08019a84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8019a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a86:	4604      	mov	r4, r0
 8019a88:	4608      	mov	r0, r1
 8019a8a:	460d      	mov	r5, r1
 8019a8c:	f7e6 fc10 	bl	80002b0 <strlen>
 8019a90:	4b06      	ldr	r3, [pc, #24]	; (8019aac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8019a92:	9001      	str	r0, [sp, #4]
 8019a94:	4602      	mov	r2, r0
 8019a96:	2100      	movs	r1, #0
 8019a98:	4620      	mov	r0, r4
 8019a9a:	f7ff fe63 	bl	8019764 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8019a9e:	9a01      	ldr	r2, [sp, #4]
 8019aa0:	4629      	mov	r1, r5
 8019aa2:	4620      	mov	r0, r4
 8019aa4:	f7ff ffb6 	bl	8019a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8019aa8:	b003      	add	sp, #12
 8019aaa:	bd30      	pop	{r4, r5, pc}
 8019aac:	0801d2a0 	.word	0x0801d2a0

08019ab0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8019ab0:	6800      	ldr	r0, [r0, #0]
 8019ab2:	4770      	bx	lr

08019ab4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 8019ab4:	b538      	push	{r3, r4, r5, lr}
 8019ab6:	6845      	ldr	r5, [r0, #4]
 8019ab8:	684c      	ldr	r4, [r1, #4]
 8019aba:	6800      	ldr	r0, [r0, #0]
 8019abc:	6809      	ldr	r1, [r1, #0]
 8019abe:	42a5      	cmp	r5, r4
 8019ac0:	462a      	mov	r2, r5
 8019ac2:	bf28      	it	cs
 8019ac4:	4622      	movcs	r2, r4
 8019ac6:	f7ff fe0c 	bl	80196e2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8019aca:	b900      	cbnz	r0, 8019ace <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 8019acc:	1b28      	subs	r0, r5, r4
 8019ace:	bd38      	pop	{r3, r4, r5, pc}

08019ad0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8019ad0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019ad2:	6846      	ldr	r6, [r0, #4]
 8019ad4:	9101      	str	r1, [sp, #4]
 8019ad6:	4605      	mov	r5, r0
 8019ad8:	4608      	mov	r0, r1
 8019ada:	f7e6 fbe9 	bl	80002b0 <strlen>
 8019ade:	4286      	cmp	r6, r0
 8019ae0:	4604      	mov	r4, r0
 8019ae2:	4632      	mov	r2, r6
 8019ae4:	9901      	ldr	r1, [sp, #4]
 8019ae6:	bf28      	it	cs
 8019ae8:	4602      	movcs	r2, r0
 8019aea:	6828      	ldr	r0, [r5, #0]
 8019aec:	f7ff fdf9 	bl	80196e2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8019af0:	b900      	cbnz	r0, 8019af4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8019af2:	1b30      	subs	r0, r6, r4
 8019af4:	b002      	add	sp, #8
 8019af6:	bd70      	pop	{r4, r5, r6, pc}

08019af8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8019af8:	6001      	str	r1, [r0, #0]
 8019afa:	4770      	bx	lr

08019afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8019afc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019afe:	4604      	mov	r4, r0
 8019b00:	4616      	mov	r6, r2
 8019b02:	460d      	mov	r5, r1
 8019b04:	b919      	cbnz	r1, 8019b0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8019b06:	b112      	cbz	r2, 8019b0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8019b08:	480d      	ldr	r0, [pc, #52]	; (8019b40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8019b0a:	f7ff fdde 	bl	80196ca <_ZSt19__throw_logic_errorPKc>
 8019b0e:	1b73      	subs	r3, r6, r5
 8019b10:	2b0f      	cmp	r3, #15
 8019b12:	9301      	str	r3, [sp, #4]
 8019b14:	d907      	bls.n	8019b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8019b16:	2200      	movs	r2, #0
 8019b18:	a901      	add	r1, sp, #4
 8019b1a:	4620      	mov	r0, r4
 8019b1c:	f7ff fdf8 	bl	8019710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8019b20:	9b01      	ldr	r3, [sp, #4]
 8019b22:	6020      	str	r0, [r4, #0]
 8019b24:	60a3      	str	r3, [r4, #8]
 8019b26:	4632      	mov	r2, r6
 8019b28:	4629      	mov	r1, r5
 8019b2a:	6820      	ldr	r0, [r4, #0]
 8019b2c:	f7ff fe3b 	bl	80197a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8019b30:	9b01      	ldr	r3, [sp, #4]
 8019b32:	6822      	ldr	r2, [r4, #0]
 8019b34:	6063      	str	r3, [r4, #4]
 8019b36:	2100      	movs	r1, #0
 8019b38:	54d1      	strb	r1, [r2, r3]
 8019b3a:	b002      	add	sp, #8
 8019b3c:	bd70      	pop	{r4, r5, r6, pc}
 8019b3e:	bf00      	nop
 8019b40:	0801d2b5 	.word	0x0801d2b5

08019b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8019b44:	b538      	push	{r3, r4, r5, lr}
 8019b46:	f100 0308 	add.w	r3, r0, #8
 8019b4a:	6003      	str	r3, [r0, #0]
 8019b4c:	e9d1 5200 	ldrd	r5, r2, [r1]
 8019b50:	4604      	mov	r4, r0
 8019b52:	f04f 0300 	mov.w	r3, #0
 8019b56:	442a      	add	r2, r5
 8019b58:	4629      	mov	r1, r5
 8019b5a:	f7ff ffcf 	bl	8019afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8019b5e:	4620      	mov	r0, r4
 8019b60:	bd38      	pop	{r3, r4, r5, pc}
	...

08019b64 <_ZSt15get_new_handlerv>:
 8019b64:	4b02      	ldr	r3, [pc, #8]	; (8019b70 <_ZSt15get_new_handlerv+0xc>)
 8019b66:	6818      	ldr	r0, [r3, #0]
 8019b68:	f3bf 8f5b 	dmb	ish
 8019b6c:	4770      	bx	lr
 8019b6e:	bf00      	nop
 8019b70:	200004c8 	.word	0x200004c8

08019b74 <abort>:
 8019b74:	b508      	push	{r3, lr}
 8019b76:	2006      	movs	r0, #6
 8019b78:	f000 f990 	bl	8019e9c <raise>
 8019b7c:	2001      	movs	r0, #1
 8019b7e:	f7fc ff95 	bl	8016aac <_exit>
	...

08019b84 <__errno>:
 8019b84:	4b01      	ldr	r3, [pc, #4]	; (8019b8c <__errno+0x8>)
 8019b86:	6818      	ldr	r0, [r3, #0]
 8019b88:	4770      	bx	lr
 8019b8a:	bf00      	nop
 8019b8c:	2000000c 	.word	0x2000000c

08019b90 <__libc_init_array>:
 8019b90:	b570      	push	{r4, r5, r6, lr}
 8019b92:	4d0d      	ldr	r5, [pc, #52]	; (8019bc8 <__libc_init_array+0x38>)
 8019b94:	4c0d      	ldr	r4, [pc, #52]	; (8019bcc <__libc_init_array+0x3c>)
 8019b96:	1b64      	subs	r4, r4, r5
 8019b98:	10a4      	asrs	r4, r4, #2
 8019b9a:	2600      	movs	r6, #0
 8019b9c:	42a6      	cmp	r6, r4
 8019b9e:	d109      	bne.n	8019bb4 <__libc_init_array+0x24>
 8019ba0:	4d0b      	ldr	r5, [pc, #44]	; (8019bd0 <__libc_init_array+0x40>)
 8019ba2:	4c0c      	ldr	r4, [pc, #48]	; (8019bd4 <__libc_init_array+0x44>)
 8019ba4:	f003 f816 	bl	801cbd4 <_init>
 8019ba8:	1b64      	subs	r4, r4, r5
 8019baa:	10a4      	asrs	r4, r4, #2
 8019bac:	2600      	movs	r6, #0
 8019bae:	42a6      	cmp	r6, r4
 8019bb0:	d105      	bne.n	8019bbe <__libc_init_array+0x2e>
 8019bb2:	bd70      	pop	{r4, r5, r6, pc}
 8019bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8019bb8:	4798      	blx	r3
 8019bba:	3601      	adds	r6, #1
 8019bbc:	e7ee      	b.n	8019b9c <__libc_init_array+0xc>
 8019bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8019bc2:	4798      	blx	r3
 8019bc4:	3601      	adds	r6, #1
 8019bc6:	e7f2      	b.n	8019bae <__libc_init_array+0x1e>
 8019bc8:	0801d744 	.word	0x0801d744
 8019bcc:	0801d744 	.word	0x0801d744
 8019bd0:	0801d744 	.word	0x0801d744
 8019bd4:	0801d768 	.word	0x0801d768

08019bd8 <isalnum>:
 8019bd8:	4b02      	ldr	r3, [pc, #8]	; (8019be4 <isalnum+0xc>)
 8019bda:	4418      	add	r0, r3
 8019bdc:	7840      	ldrb	r0, [r0, #1]
 8019bde:	f000 0007 	and.w	r0, r0, #7
 8019be2:	4770      	bx	lr
 8019be4:	0801d365 	.word	0x0801d365

08019be8 <isalpha>:
 8019be8:	4b02      	ldr	r3, [pc, #8]	; (8019bf4 <isalpha+0xc>)
 8019bea:	4418      	add	r0, r3
 8019bec:	7840      	ldrb	r0, [r0, #1]
 8019bee:	f000 0003 	and.w	r0, r0, #3
 8019bf2:	4770      	bx	lr
 8019bf4:	0801d365 	.word	0x0801d365

08019bf8 <isspace>:
 8019bf8:	4b02      	ldr	r3, [pc, #8]	; (8019c04 <isspace+0xc>)
 8019bfa:	4418      	add	r0, r3
 8019bfc:	7840      	ldrb	r0, [r0, #1]
 8019bfe:	f000 0008 	and.w	r0, r0, #8
 8019c02:	4770      	bx	lr
 8019c04:	0801d365 	.word	0x0801d365

08019c08 <__itoa>:
 8019c08:	1e93      	subs	r3, r2, #2
 8019c0a:	2b22      	cmp	r3, #34	; 0x22
 8019c0c:	b510      	push	{r4, lr}
 8019c0e:	460c      	mov	r4, r1
 8019c10:	d904      	bls.n	8019c1c <__itoa+0x14>
 8019c12:	2300      	movs	r3, #0
 8019c14:	700b      	strb	r3, [r1, #0]
 8019c16:	461c      	mov	r4, r3
 8019c18:	4620      	mov	r0, r4
 8019c1a:	bd10      	pop	{r4, pc}
 8019c1c:	2a0a      	cmp	r2, #10
 8019c1e:	d109      	bne.n	8019c34 <__itoa+0x2c>
 8019c20:	2800      	cmp	r0, #0
 8019c22:	da07      	bge.n	8019c34 <__itoa+0x2c>
 8019c24:	232d      	movs	r3, #45	; 0x2d
 8019c26:	700b      	strb	r3, [r1, #0]
 8019c28:	4240      	negs	r0, r0
 8019c2a:	2101      	movs	r1, #1
 8019c2c:	4421      	add	r1, r4
 8019c2e:	f001 f861 	bl	801acf4 <__utoa>
 8019c32:	e7f1      	b.n	8019c18 <__itoa+0x10>
 8019c34:	2100      	movs	r1, #0
 8019c36:	e7f9      	b.n	8019c2c <__itoa+0x24>

08019c38 <itoa>:
 8019c38:	f7ff bfe6 	b.w	8019c08 <__itoa>

08019c3c <malloc>:
 8019c3c:	4b02      	ldr	r3, [pc, #8]	; (8019c48 <malloc+0xc>)
 8019c3e:	4601      	mov	r1, r0
 8019c40:	6818      	ldr	r0, [r3, #0]
 8019c42:	f000 b899 	b.w	8019d78 <_malloc_r>
 8019c46:	bf00      	nop
 8019c48:	2000000c 	.word	0x2000000c

08019c4c <free>:
 8019c4c:	4b02      	ldr	r3, [pc, #8]	; (8019c58 <free+0xc>)
 8019c4e:	4601      	mov	r1, r0
 8019c50:	6818      	ldr	r0, [r3, #0]
 8019c52:	f000 b841 	b.w	8019cd8 <_free_r>
 8019c56:	bf00      	nop
 8019c58:	2000000c 	.word	0x2000000c

08019c5c <memcmp>:
 8019c5c:	b530      	push	{r4, r5, lr}
 8019c5e:	3901      	subs	r1, #1
 8019c60:	2400      	movs	r4, #0
 8019c62:	42a2      	cmp	r2, r4
 8019c64:	d101      	bne.n	8019c6a <memcmp+0xe>
 8019c66:	2000      	movs	r0, #0
 8019c68:	e005      	b.n	8019c76 <memcmp+0x1a>
 8019c6a:	5d03      	ldrb	r3, [r0, r4]
 8019c6c:	3401      	adds	r4, #1
 8019c6e:	5d0d      	ldrb	r5, [r1, r4]
 8019c70:	42ab      	cmp	r3, r5
 8019c72:	d0f6      	beq.n	8019c62 <memcmp+0x6>
 8019c74:	1b58      	subs	r0, r3, r5
 8019c76:	bd30      	pop	{r4, r5, pc}

08019c78 <memcpy>:
 8019c78:	440a      	add	r2, r1
 8019c7a:	4291      	cmp	r1, r2
 8019c7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8019c80:	d100      	bne.n	8019c84 <memcpy+0xc>
 8019c82:	4770      	bx	lr
 8019c84:	b510      	push	{r4, lr}
 8019c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019c8e:	4291      	cmp	r1, r2
 8019c90:	d1f9      	bne.n	8019c86 <memcpy+0xe>
 8019c92:	bd10      	pop	{r4, pc}

08019c94 <memmove>:
 8019c94:	4288      	cmp	r0, r1
 8019c96:	b510      	push	{r4, lr}
 8019c98:	eb01 0402 	add.w	r4, r1, r2
 8019c9c:	d902      	bls.n	8019ca4 <memmove+0x10>
 8019c9e:	4284      	cmp	r4, r0
 8019ca0:	4623      	mov	r3, r4
 8019ca2:	d807      	bhi.n	8019cb4 <memmove+0x20>
 8019ca4:	1e43      	subs	r3, r0, #1
 8019ca6:	42a1      	cmp	r1, r4
 8019ca8:	d008      	beq.n	8019cbc <memmove+0x28>
 8019caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019cae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019cb2:	e7f8      	b.n	8019ca6 <memmove+0x12>
 8019cb4:	4402      	add	r2, r0
 8019cb6:	4601      	mov	r1, r0
 8019cb8:	428a      	cmp	r2, r1
 8019cba:	d100      	bne.n	8019cbe <memmove+0x2a>
 8019cbc:	bd10      	pop	{r4, pc}
 8019cbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019cc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019cc6:	e7f7      	b.n	8019cb8 <memmove+0x24>

08019cc8 <memset>:
 8019cc8:	4402      	add	r2, r0
 8019cca:	4603      	mov	r3, r0
 8019ccc:	4293      	cmp	r3, r2
 8019cce:	d100      	bne.n	8019cd2 <memset+0xa>
 8019cd0:	4770      	bx	lr
 8019cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8019cd6:	e7f9      	b.n	8019ccc <memset+0x4>

08019cd8 <_free_r>:
 8019cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019cda:	2900      	cmp	r1, #0
 8019cdc:	d048      	beq.n	8019d70 <_free_r+0x98>
 8019cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ce2:	9001      	str	r0, [sp, #4]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	f1a1 0404 	sub.w	r4, r1, #4
 8019cea:	bfb8      	it	lt
 8019cec:	18e4      	addlt	r4, r4, r3
 8019cee:	f001 fbc5 	bl	801b47c <__malloc_lock>
 8019cf2:	4a20      	ldr	r2, [pc, #128]	; (8019d74 <_free_r+0x9c>)
 8019cf4:	9801      	ldr	r0, [sp, #4]
 8019cf6:	6813      	ldr	r3, [r2, #0]
 8019cf8:	4615      	mov	r5, r2
 8019cfa:	b933      	cbnz	r3, 8019d0a <_free_r+0x32>
 8019cfc:	6063      	str	r3, [r4, #4]
 8019cfe:	6014      	str	r4, [r2, #0]
 8019d00:	b003      	add	sp, #12
 8019d02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019d06:	f001 bbbf 	b.w	801b488 <__malloc_unlock>
 8019d0a:	42a3      	cmp	r3, r4
 8019d0c:	d90b      	bls.n	8019d26 <_free_r+0x4e>
 8019d0e:	6821      	ldr	r1, [r4, #0]
 8019d10:	1862      	adds	r2, r4, r1
 8019d12:	4293      	cmp	r3, r2
 8019d14:	bf04      	itt	eq
 8019d16:	681a      	ldreq	r2, [r3, #0]
 8019d18:	685b      	ldreq	r3, [r3, #4]
 8019d1a:	6063      	str	r3, [r4, #4]
 8019d1c:	bf04      	itt	eq
 8019d1e:	1852      	addeq	r2, r2, r1
 8019d20:	6022      	streq	r2, [r4, #0]
 8019d22:	602c      	str	r4, [r5, #0]
 8019d24:	e7ec      	b.n	8019d00 <_free_r+0x28>
 8019d26:	461a      	mov	r2, r3
 8019d28:	685b      	ldr	r3, [r3, #4]
 8019d2a:	b10b      	cbz	r3, 8019d30 <_free_r+0x58>
 8019d2c:	42a3      	cmp	r3, r4
 8019d2e:	d9fa      	bls.n	8019d26 <_free_r+0x4e>
 8019d30:	6811      	ldr	r1, [r2, #0]
 8019d32:	1855      	adds	r5, r2, r1
 8019d34:	42a5      	cmp	r5, r4
 8019d36:	d10b      	bne.n	8019d50 <_free_r+0x78>
 8019d38:	6824      	ldr	r4, [r4, #0]
 8019d3a:	4421      	add	r1, r4
 8019d3c:	1854      	adds	r4, r2, r1
 8019d3e:	42a3      	cmp	r3, r4
 8019d40:	6011      	str	r1, [r2, #0]
 8019d42:	d1dd      	bne.n	8019d00 <_free_r+0x28>
 8019d44:	681c      	ldr	r4, [r3, #0]
 8019d46:	685b      	ldr	r3, [r3, #4]
 8019d48:	6053      	str	r3, [r2, #4]
 8019d4a:	4421      	add	r1, r4
 8019d4c:	6011      	str	r1, [r2, #0]
 8019d4e:	e7d7      	b.n	8019d00 <_free_r+0x28>
 8019d50:	d902      	bls.n	8019d58 <_free_r+0x80>
 8019d52:	230c      	movs	r3, #12
 8019d54:	6003      	str	r3, [r0, #0]
 8019d56:	e7d3      	b.n	8019d00 <_free_r+0x28>
 8019d58:	6825      	ldr	r5, [r4, #0]
 8019d5a:	1961      	adds	r1, r4, r5
 8019d5c:	428b      	cmp	r3, r1
 8019d5e:	bf04      	itt	eq
 8019d60:	6819      	ldreq	r1, [r3, #0]
 8019d62:	685b      	ldreq	r3, [r3, #4]
 8019d64:	6063      	str	r3, [r4, #4]
 8019d66:	bf04      	itt	eq
 8019d68:	1949      	addeq	r1, r1, r5
 8019d6a:	6021      	streq	r1, [r4, #0]
 8019d6c:	6054      	str	r4, [r2, #4]
 8019d6e:	e7c7      	b.n	8019d00 <_free_r+0x28>
 8019d70:	b003      	add	sp, #12
 8019d72:	bd30      	pop	{r4, r5, pc}
 8019d74:	200004cc 	.word	0x200004cc

08019d78 <_malloc_r>:
 8019d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d7a:	1ccd      	adds	r5, r1, #3
 8019d7c:	f025 0503 	bic.w	r5, r5, #3
 8019d80:	3508      	adds	r5, #8
 8019d82:	2d0c      	cmp	r5, #12
 8019d84:	bf38      	it	cc
 8019d86:	250c      	movcc	r5, #12
 8019d88:	2d00      	cmp	r5, #0
 8019d8a:	4606      	mov	r6, r0
 8019d8c:	db01      	blt.n	8019d92 <_malloc_r+0x1a>
 8019d8e:	42a9      	cmp	r1, r5
 8019d90:	d903      	bls.n	8019d9a <_malloc_r+0x22>
 8019d92:	230c      	movs	r3, #12
 8019d94:	6033      	str	r3, [r6, #0]
 8019d96:	2000      	movs	r0, #0
 8019d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d9a:	f001 fb6f 	bl	801b47c <__malloc_lock>
 8019d9e:	4921      	ldr	r1, [pc, #132]	; (8019e24 <_malloc_r+0xac>)
 8019da0:	680a      	ldr	r2, [r1, #0]
 8019da2:	4614      	mov	r4, r2
 8019da4:	b99c      	cbnz	r4, 8019dce <_malloc_r+0x56>
 8019da6:	4f20      	ldr	r7, [pc, #128]	; (8019e28 <_malloc_r+0xb0>)
 8019da8:	683b      	ldr	r3, [r7, #0]
 8019daa:	b923      	cbnz	r3, 8019db6 <_malloc_r+0x3e>
 8019dac:	4621      	mov	r1, r4
 8019dae:	4630      	mov	r0, r6
 8019db0:	f000 f83c 	bl	8019e2c <_sbrk_r>
 8019db4:	6038      	str	r0, [r7, #0]
 8019db6:	4629      	mov	r1, r5
 8019db8:	4630      	mov	r0, r6
 8019dba:	f000 f837 	bl	8019e2c <_sbrk_r>
 8019dbe:	1c43      	adds	r3, r0, #1
 8019dc0:	d123      	bne.n	8019e0a <_malloc_r+0x92>
 8019dc2:	230c      	movs	r3, #12
 8019dc4:	6033      	str	r3, [r6, #0]
 8019dc6:	4630      	mov	r0, r6
 8019dc8:	f001 fb5e 	bl	801b488 <__malloc_unlock>
 8019dcc:	e7e3      	b.n	8019d96 <_malloc_r+0x1e>
 8019dce:	6823      	ldr	r3, [r4, #0]
 8019dd0:	1b5b      	subs	r3, r3, r5
 8019dd2:	d417      	bmi.n	8019e04 <_malloc_r+0x8c>
 8019dd4:	2b0b      	cmp	r3, #11
 8019dd6:	d903      	bls.n	8019de0 <_malloc_r+0x68>
 8019dd8:	6023      	str	r3, [r4, #0]
 8019dda:	441c      	add	r4, r3
 8019ddc:	6025      	str	r5, [r4, #0]
 8019dde:	e004      	b.n	8019dea <_malloc_r+0x72>
 8019de0:	6863      	ldr	r3, [r4, #4]
 8019de2:	42a2      	cmp	r2, r4
 8019de4:	bf0c      	ite	eq
 8019de6:	600b      	streq	r3, [r1, #0]
 8019de8:	6053      	strne	r3, [r2, #4]
 8019dea:	4630      	mov	r0, r6
 8019dec:	f001 fb4c 	bl	801b488 <__malloc_unlock>
 8019df0:	f104 000b 	add.w	r0, r4, #11
 8019df4:	1d23      	adds	r3, r4, #4
 8019df6:	f020 0007 	bic.w	r0, r0, #7
 8019dfa:	1ac2      	subs	r2, r0, r3
 8019dfc:	d0cc      	beq.n	8019d98 <_malloc_r+0x20>
 8019dfe:	1a1b      	subs	r3, r3, r0
 8019e00:	50a3      	str	r3, [r4, r2]
 8019e02:	e7c9      	b.n	8019d98 <_malloc_r+0x20>
 8019e04:	4622      	mov	r2, r4
 8019e06:	6864      	ldr	r4, [r4, #4]
 8019e08:	e7cc      	b.n	8019da4 <_malloc_r+0x2c>
 8019e0a:	1cc4      	adds	r4, r0, #3
 8019e0c:	f024 0403 	bic.w	r4, r4, #3
 8019e10:	42a0      	cmp	r0, r4
 8019e12:	d0e3      	beq.n	8019ddc <_malloc_r+0x64>
 8019e14:	1a21      	subs	r1, r4, r0
 8019e16:	4630      	mov	r0, r6
 8019e18:	f000 f808 	bl	8019e2c <_sbrk_r>
 8019e1c:	3001      	adds	r0, #1
 8019e1e:	d1dd      	bne.n	8019ddc <_malloc_r+0x64>
 8019e20:	e7cf      	b.n	8019dc2 <_malloc_r+0x4a>
 8019e22:	bf00      	nop
 8019e24:	200004cc 	.word	0x200004cc
 8019e28:	200004d0 	.word	0x200004d0

08019e2c <_sbrk_r>:
 8019e2c:	b538      	push	{r3, r4, r5, lr}
 8019e2e:	4d06      	ldr	r5, [pc, #24]	; (8019e48 <_sbrk_r+0x1c>)
 8019e30:	2300      	movs	r3, #0
 8019e32:	4604      	mov	r4, r0
 8019e34:	4608      	mov	r0, r1
 8019e36:	602b      	str	r3, [r5, #0]
 8019e38:	f7fc feb0 	bl	8016b9c <_sbrk>
 8019e3c:	1c43      	adds	r3, r0, #1
 8019e3e:	d102      	bne.n	8019e46 <_sbrk_r+0x1a>
 8019e40:	682b      	ldr	r3, [r5, #0]
 8019e42:	b103      	cbz	r3, 8019e46 <_sbrk_r+0x1a>
 8019e44:	6023      	str	r3, [r4, #0]
 8019e46:	bd38      	pop	{r3, r4, r5, pc}
 8019e48:	200004d8 	.word	0x200004d8

08019e4c <_raise_r>:
 8019e4c:	291f      	cmp	r1, #31
 8019e4e:	b538      	push	{r3, r4, r5, lr}
 8019e50:	4604      	mov	r4, r0
 8019e52:	460d      	mov	r5, r1
 8019e54:	d904      	bls.n	8019e60 <_raise_r+0x14>
 8019e56:	2316      	movs	r3, #22
 8019e58:	6003      	str	r3, [r0, #0]
 8019e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8019e5e:	bd38      	pop	{r3, r4, r5, pc}
 8019e60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019e62:	b112      	cbz	r2, 8019e6a <_raise_r+0x1e>
 8019e64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019e68:	b94b      	cbnz	r3, 8019e7e <_raise_r+0x32>
 8019e6a:	4620      	mov	r0, r4
 8019e6c:	f000 f830 	bl	8019ed0 <_getpid_r>
 8019e70:	462a      	mov	r2, r5
 8019e72:	4601      	mov	r1, r0
 8019e74:	4620      	mov	r0, r4
 8019e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019e7a:	f000 b817 	b.w	8019eac <_kill_r>
 8019e7e:	2b01      	cmp	r3, #1
 8019e80:	d00a      	beq.n	8019e98 <_raise_r+0x4c>
 8019e82:	1c59      	adds	r1, r3, #1
 8019e84:	d103      	bne.n	8019e8e <_raise_r+0x42>
 8019e86:	2316      	movs	r3, #22
 8019e88:	6003      	str	r3, [r0, #0]
 8019e8a:	2001      	movs	r0, #1
 8019e8c:	e7e7      	b.n	8019e5e <_raise_r+0x12>
 8019e8e:	2400      	movs	r4, #0
 8019e90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019e94:	4628      	mov	r0, r5
 8019e96:	4798      	blx	r3
 8019e98:	2000      	movs	r0, #0
 8019e9a:	e7e0      	b.n	8019e5e <_raise_r+0x12>

08019e9c <raise>:
 8019e9c:	4b02      	ldr	r3, [pc, #8]	; (8019ea8 <raise+0xc>)
 8019e9e:	4601      	mov	r1, r0
 8019ea0:	6818      	ldr	r0, [r3, #0]
 8019ea2:	f7ff bfd3 	b.w	8019e4c <_raise_r>
 8019ea6:	bf00      	nop
 8019ea8:	2000000c 	.word	0x2000000c

08019eac <_kill_r>:
 8019eac:	b538      	push	{r3, r4, r5, lr}
 8019eae:	4d07      	ldr	r5, [pc, #28]	; (8019ecc <_kill_r+0x20>)
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	4604      	mov	r4, r0
 8019eb4:	4608      	mov	r0, r1
 8019eb6:	4611      	mov	r1, r2
 8019eb8:	602b      	str	r3, [r5, #0]
 8019eba:	f7fc fde7 	bl	8016a8c <_kill>
 8019ebe:	1c43      	adds	r3, r0, #1
 8019ec0:	d102      	bne.n	8019ec8 <_kill_r+0x1c>
 8019ec2:	682b      	ldr	r3, [r5, #0]
 8019ec4:	b103      	cbz	r3, 8019ec8 <_kill_r+0x1c>
 8019ec6:	6023      	str	r3, [r4, #0]
 8019ec8:	bd38      	pop	{r3, r4, r5, pc}
 8019eca:	bf00      	nop
 8019ecc:	200004d8 	.word	0x200004d8

08019ed0 <_getpid_r>:
 8019ed0:	f7fc bdd4 	b.w	8016a7c <_getpid>

08019ed4 <sulp>:
 8019ed4:	b570      	push	{r4, r5, r6, lr}
 8019ed6:	4604      	mov	r4, r0
 8019ed8:	460d      	mov	r5, r1
 8019eda:	ec45 4b10 	vmov	d0, r4, r5
 8019ede:	4616      	mov	r6, r2
 8019ee0:	f001 fe44 	bl	801bb6c <__ulp>
 8019ee4:	ec51 0b10 	vmov	r0, r1, d0
 8019ee8:	b17e      	cbz	r6, 8019f0a <sulp+0x36>
 8019eea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019eee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	dd09      	ble.n	8019f0a <sulp+0x36>
 8019ef6:	051b      	lsls	r3, r3, #20
 8019ef8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8019efc:	2400      	movs	r4, #0
 8019efe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8019f02:	4622      	mov	r2, r4
 8019f04:	462b      	mov	r3, r5
 8019f06:	f7e6 fb97 	bl	8000638 <__aeabi_dmul>
 8019f0a:	bd70      	pop	{r4, r5, r6, pc}
 8019f0c:	0000      	movs	r0, r0
	...

08019f10 <_strtod_l>:
 8019f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f14:	b0a3      	sub	sp, #140	; 0x8c
 8019f16:	461f      	mov	r7, r3
 8019f18:	2300      	movs	r3, #0
 8019f1a:	931e      	str	r3, [sp, #120]	; 0x78
 8019f1c:	4ba4      	ldr	r3, [pc, #656]	; (801a1b0 <_strtod_l+0x2a0>)
 8019f1e:	9219      	str	r2, [sp, #100]	; 0x64
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	9307      	str	r3, [sp, #28]
 8019f24:	4604      	mov	r4, r0
 8019f26:	4618      	mov	r0, r3
 8019f28:	4688      	mov	r8, r1
 8019f2a:	f7e6 f9c1 	bl	80002b0 <strlen>
 8019f2e:	f04f 0a00 	mov.w	sl, #0
 8019f32:	4605      	mov	r5, r0
 8019f34:	f04f 0b00 	mov.w	fp, #0
 8019f38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8019f3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019f3e:	781a      	ldrb	r2, [r3, #0]
 8019f40:	2a2b      	cmp	r2, #43	; 0x2b
 8019f42:	d04c      	beq.n	8019fde <_strtod_l+0xce>
 8019f44:	d839      	bhi.n	8019fba <_strtod_l+0xaa>
 8019f46:	2a0d      	cmp	r2, #13
 8019f48:	d832      	bhi.n	8019fb0 <_strtod_l+0xa0>
 8019f4a:	2a08      	cmp	r2, #8
 8019f4c:	d832      	bhi.n	8019fb4 <_strtod_l+0xa4>
 8019f4e:	2a00      	cmp	r2, #0
 8019f50:	d03c      	beq.n	8019fcc <_strtod_l+0xbc>
 8019f52:	2300      	movs	r3, #0
 8019f54:	930e      	str	r3, [sp, #56]	; 0x38
 8019f56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8019f58:	7833      	ldrb	r3, [r6, #0]
 8019f5a:	2b30      	cmp	r3, #48	; 0x30
 8019f5c:	f040 80b4 	bne.w	801a0c8 <_strtod_l+0x1b8>
 8019f60:	7873      	ldrb	r3, [r6, #1]
 8019f62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019f66:	2b58      	cmp	r3, #88	; 0x58
 8019f68:	d16c      	bne.n	801a044 <_strtod_l+0x134>
 8019f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f6c:	9301      	str	r3, [sp, #4]
 8019f6e:	ab1e      	add	r3, sp, #120	; 0x78
 8019f70:	9702      	str	r7, [sp, #8]
 8019f72:	9300      	str	r3, [sp, #0]
 8019f74:	4a8f      	ldr	r2, [pc, #572]	; (801a1b4 <_strtod_l+0x2a4>)
 8019f76:	ab1f      	add	r3, sp, #124	; 0x7c
 8019f78:	a91d      	add	r1, sp, #116	; 0x74
 8019f7a:	4620      	mov	r0, r4
 8019f7c:	f000 ff64 	bl	801ae48 <__gethex>
 8019f80:	f010 0707 	ands.w	r7, r0, #7
 8019f84:	4605      	mov	r5, r0
 8019f86:	d005      	beq.n	8019f94 <_strtod_l+0x84>
 8019f88:	2f06      	cmp	r7, #6
 8019f8a:	d12a      	bne.n	8019fe2 <_strtod_l+0xd2>
 8019f8c:	3601      	adds	r6, #1
 8019f8e:	2300      	movs	r3, #0
 8019f90:	961d      	str	r6, [sp, #116]	; 0x74
 8019f92:	930e      	str	r3, [sp, #56]	; 0x38
 8019f94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	f040 8596 	bne.w	801aac8 <_strtod_l+0xbb8>
 8019f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f9e:	b1db      	cbz	r3, 8019fd8 <_strtod_l+0xc8>
 8019fa0:	4652      	mov	r2, sl
 8019fa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8019fa6:	ec43 2b10 	vmov	d0, r2, r3
 8019faa:	b023      	add	sp, #140	; 0x8c
 8019fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fb0:	2a20      	cmp	r2, #32
 8019fb2:	d1ce      	bne.n	8019f52 <_strtod_l+0x42>
 8019fb4:	3301      	adds	r3, #1
 8019fb6:	931d      	str	r3, [sp, #116]	; 0x74
 8019fb8:	e7c0      	b.n	8019f3c <_strtod_l+0x2c>
 8019fba:	2a2d      	cmp	r2, #45	; 0x2d
 8019fbc:	d1c9      	bne.n	8019f52 <_strtod_l+0x42>
 8019fbe:	2201      	movs	r2, #1
 8019fc0:	920e      	str	r2, [sp, #56]	; 0x38
 8019fc2:	1c5a      	adds	r2, r3, #1
 8019fc4:	921d      	str	r2, [sp, #116]	; 0x74
 8019fc6:	785b      	ldrb	r3, [r3, #1]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d1c4      	bne.n	8019f56 <_strtod_l+0x46>
 8019fcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019fce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	f040 8576 	bne.w	801aac4 <_strtod_l+0xbb4>
 8019fd8:	4652      	mov	r2, sl
 8019fda:	465b      	mov	r3, fp
 8019fdc:	e7e3      	b.n	8019fa6 <_strtod_l+0x96>
 8019fde:	2200      	movs	r2, #0
 8019fe0:	e7ee      	b.n	8019fc0 <_strtod_l+0xb0>
 8019fe2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019fe4:	b13a      	cbz	r2, 8019ff6 <_strtod_l+0xe6>
 8019fe6:	2135      	movs	r1, #53	; 0x35
 8019fe8:	a820      	add	r0, sp, #128	; 0x80
 8019fea:	f001 feca 	bl	801bd82 <__copybits>
 8019fee:	991e      	ldr	r1, [sp, #120]	; 0x78
 8019ff0:	4620      	mov	r0, r4
 8019ff2:	f001 fa8f 	bl	801b514 <_Bfree>
 8019ff6:	3f01      	subs	r7, #1
 8019ff8:	2f05      	cmp	r7, #5
 8019ffa:	d807      	bhi.n	801a00c <_strtod_l+0xfc>
 8019ffc:	e8df f007 	tbb	[pc, r7]
 801a000:	1d180b0e 	.word	0x1d180b0e
 801a004:	030e      	.short	0x030e
 801a006:	f04f 0b00 	mov.w	fp, #0
 801a00a:	46da      	mov	sl, fp
 801a00c:	0728      	lsls	r0, r5, #28
 801a00e:	d5c1      	bpl.n	8019f94 <_strtod_l+0x84>
 801a010:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a014:	e7be      	b.n	8019f94 <_strtod_l+0x84>
 801a016:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801a01a:	e7f7      	b.n	801a00c <_strtod_l+0xfc>
 801a01c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801a020:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a022:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a026:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a02a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a02e:	e7ed      	b.n	801a00c <_strtod_l+0xfc>
 801a030:	f8df b184 	ldr.w	fp, [pc, #388]	; 801a1b8 <_strtod_l+0x2a8>
 801a034:	f04f 0a00 	mov.w	sl, #0
 801a038:	e7e8      	b.n	801a00c <_strtod_l+0xfc>
 801a03a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a03e:	f04f 3aff 	mov.w	sl, #4294967295
 801a042:	e7e3      	b.n	801a00c <_strtod_l+0xfc>
 801a044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a046:	1c5a      	adds	r2, r3, #1
 801a048:	921d      	str	r2, [sp, #116]	; 0x74
 801a04a:	785b      	ldrb	r3, [r3, #1]
 801a04c:	2b30      	cmp	r3, #48	; 0x30
 801a04e:	d0f9      	beq.n	801a044 <_strtod_l+0x134>
 801a050:	2b00      	cmp	r3, #0
 801a052:	d09f      	beq.n	8019f94 <_strtod_l+0x84>
 801a054:	2301      	movs	r3, #1
 801a056:	f04f 0900 	mov.w	r9, #0
 801a05a:	9304      	str	r3, [sp, #16]
 801a05c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a05e:	930a      	str	r3, [sp, #40]	; 0x28
 801a060:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801a064:	464f      	mov	r7, r9
 801a066:	220a      	movs	r2, #10
 801a068:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a06a:	7806      	ldrb	r6, [r0, #0]
 801a06c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a070:	b2d9      	uxtb	r1, r3
 801a072:	2909      	cmp	r1, #9
 801a074:	d92a      	bls.n	801a0cc <_strtod_l+0x1bc>
 801a076:	9907      	ldr	r1, [sp, #28]
 801a078:	462a      	mov	r2, r5
 801a07a:	f001 fee3 	bl	801be44 <strncmp>
 801a07e:	b398      	cbz	r0, 801a0e8 <_strtod_l+0x1d8>
 801a080:	2000      	movs	r0, #0
 801a082:	4633      	mov	r3, r6
 801a084:	463d      	mov	r5, r7
 801a086:	9007      	str	r0, [sp, #28]
 801a088:	4602      	mov	r2, r0
 801a08a:	2b65      	cmp	r3, #101	; 0x65
 801a08c:	d001      	beq.n	801a092 <_strtod_l+0x182>
 801a08e:	2b45      	cmp	r3, #69	; 0x45
 801a090:	d118      	bne.n	801a0c4 <_strtod_l+0x1b4>
 801a092:	b91d      	cbnz	r5, 801a09c <_strtod_l+0x18c>
 801a094:	9b04      	ldr	r3, [sp, #16]
 801a096:	4303      	orrs	r3, r0
 801a098:	d098      	beq.n	8019fcc <_strtod_l+0xbc>
 801a09a:	2500      	movs	r5, #0
 801a09c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801a0a0:	f108 0301 	add.w	r3, r8, #1
 801a0a4:	931d      	str	r3, [sp, #116]	; 0x74
 801a0a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a0aa:	2b2b      	cmp	r3, #43	; 0x2b
 801a0ac:	d075      	beq.n	801a19a <_strtod_l+0x28a>
 801a0ae:	2b2d      	cmp	r3, #45	; 0x2d
 801a0b0:	d07b      	beq.n	801a1aa <_strtod_l+0x29a>
 801a0b2:	f04f 0c00 	mov.w	ip, #0
 801a0b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801a0ba:	2909      	cmp	r1, #9
 801a0bc:	f240 8082 	bls.w	801a1c4 <_strtod_l+0x2b4>
 801a0c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a0c4:	2600      	movs	r6, #0
 801a0c6:	e09d      	b.n	801a204 <_strtod_l+0x2f4>
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	e7c4      	b.n	801a056 <_strtod_l+0x146>
 801a0cc:	2f08      	cmp	r7, #8
 801a0ce:	bfd8      	it	le
 801a0d0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801a0d2:	f100 0001 	add.w	r0, r0, #1
 801a0d6:	bfda      	itte	le
 801a0d8:	fb02 3301 	mlale	r3, r2, r1, r3
 801a0dc:	9309      	strle	r3, [sp, #36]	; 0x24
 801a0de:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a0e2:	3701      	adds	r7, #1
 801a0e4:	901d      	str	r0, [sp, #116]	; 0x74
 801a0e6:	e7bf      	b.n	801a068 <_strtod_l+0x158>
 801a0e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a0ea:	195a      	adds	r2, r3, r5
 801a0ec:	921d      	str	r2, [sp, #116]	; 0x74
 801a0ee:	5d5b      	ldrb	r3, [r3, r5]
 801a0f0:	2f00      	cmp	r7, #0
 801a0f2:	d037      	beq.n	801a164 <_strtod_l+0x254>
 801a0f4:	9007      	str	r0, [sp, #28]
 801a0f6:	463d      	mov	r5, r7
 801a0f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801a0fc:	2a09      	cmp	r2, #9
 801a0fe:	d912      	bls.n	801a126 <_strtod_l+0x216>
 801a100:	2201      	movs	r2, #1
 801a102:	e7c2      	b.n	801a08a <_strtod_l+0x17a>
 801a104:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a106:	1c5a      	adds	r2, r3, #1
 801a108:	921d      	str	r2, [sp, #116]	; 0x74
 801a10a:	785b      	ldrb	r3, [r3, #1]
 801a10c:	3001      	adds	r0, #1
 801a10e:	2b30      	cmp	r3, #48	; 0x30
 801a110:	d0f8      	beq.n	801a104 <_strtod_l+0x1f4>
 801a112:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801a116:	2a08      	cmp	r2, #8
 801a118:	f200 84db 	bhi.w	801aad2 <_strtod_l+0xbc2>
 801a11c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a11e:	9007      	str	r0, [sp, #28]
 801a120:	2000      	movs	r0, #0
 801a122:	920a      	str	r2, [sp, #40]	; 0x28
 801a124:	4605      	mov	r5, r0
 801a126:	3b30      	subs	r3, #48	; 0x30
 801a128:	f100 0201 	add.w	r2, r0, #1
 801a12c:	d014      	beq.n	801a158 <_strtod_l+0x248>
 801a12e:	9907      	ldr	r1, [sp, #28]
 801a130:	4411      	add	r1, r2
 801a132:	9107      	str	r1, [sp, #28]
 801a134:	462a      	mov	r2, r5
 801a136:	eb00 0e05 	add.w	lr, r0, r5
 801a13a:	210a      	movs	r1, #10
 801a13c:	4572      	cmp	r2, lr
 801a13e:	d113      	bne.n	801a168 <_strtod_l+0x258>
 801a140:	182a      	adds	r2, r5, r0
 801a142:	2a08      	cmp	r2, #8
 801a144:	f105 0501 	add.w	r5, r5, #1
 801a148:	4405      	add	r5, r0
 801a14a:	dc1c      	bgt.n	801a186 <_strtod_l+0x276>
 801a14c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a14e:	220a      	movs	r2, #10
 801a150:	fb02 3301 	mla	r3, r2, r1, r3
 801a154:	9309      	str	r3, [sp, #36]	; 0x24
 801a156:	2200      	movs	r2, #0
 801a158:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a15a:	1c59      	adds	r1, r3, #1
 801a15c:	911d      	str	r1, [sp, #116]	; 0x74
 801a15e:	785b      	ldrb	r3, [r3, #1]
 801a160:	4610      	mov	r0, r2
 801a162:	e7c9      	b.n	801a0f8 <_strtod_l+0x1e8>
 801a164:	4638      	mov	r0, r7
 801a166:	e7d2      	b.n	801a10e <_strtod_l+0x1fe>
 801a168:	2a08      	cmp	r2, #8
 801a16a:	dc04      	bgt.n	801a176 <_strtod_l+0x266>
 801a16c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801a16e:	434e      	muls	r6, r1
 801a170:	9609      	str	r6, [sp, #36]	; 0x24
 801a172:	3201      	adds	r2, #1
 801a174:	e7e2      	b.n	801a13c <_strtod_l+0x22c>
 801a176:	f102 0c01 	add.w	ip, r2, #1
 801a17a:	f1bc 0f10 	cmp.w	ip, #16
 801a17e:	bfd8      	it	le
 801a180:	fb01 f909 	mulle.w	r9, r1, r9
 801a184:	e7f5      	b.n	801a172 <_strtod_l+0x262>
 801a186:	2d10      	cmp	r5, #16
 801a188:	bfdc      	itt	le
 801a18a:	220a      	movle	r2, #10
 801a18c:	fb02 3909 	mlale	r9, r2, r9, r3
 801a190:	e7e1      	b.n	801a156 <_strtod_l+0x246>
 801a192:	2300      	movs	r3, #0
 801a194:	9307      	str	r3, [sp, #28]
 801a196:	2201      	movs	r2, #1
 801a198:	e77c      	b.n	801a094 <_strtod_l+0x184>
 801a19a:	f04f 0c00 	mov.w	ip, #0
 801a19e:	f108 0302 	add.w	r3, r8, #2
 801a1a2:	931d      	str	r3, [sp, #116]	; 0x74
 801a1a4:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a1a8:	e785      	b.n	801a0b6 <_strtod_l+0x1a6>
 801a1aa:	f04f 0c01 	mov.w	ip, #1
 801a1ae:	e7f6      	b.n	801a19e <_strtod_l+0x28e>
 801a1b0:	0801d4e0 	.word	0x0801d4e0
 801a1b4:	0801d2f0 	.word	0x0801d2f0
 801a1b8:	7ff00000 	.word	0x7ff00000
 801a1bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a1be:	1c59      	adds	r1, r3, #1
 801a1c0:	911d      	str	r1, [sp, #116]	; 0x74
 801a1c2:	785b      	ldrb	r3, [r3, #1]
 801a1c4:	2b30      	cmp	r3, #48	; 0x30
 801a1c6:	d0f9      	beq.n	801a1bc <_strtod_l+0x2ac>
 801a1c8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801a1cc:	2908      	cmp	r1, #8
 801a1ce:	f63f af79 	bhi.w	801a0c4 <_strtod_l+0x1b4>
 801a1d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801a1d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a1d8:	9308      	str	r3, [sp, #32]
 801a1da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a1dc:	1c59      	adds	r1, r3, #1
 801a1de:	911d      	str	r1, [sp, #116]	; 0x74
 801a1e0:	785b      	ldrb	r3, [r3, #1]
 801a1e2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801a1e6:	2e09      	cmp	r6, #9
 801a1e8:	d937      	bls.n	801a25a <_strtod_l+0x34a>
 801a1ea:	9e08      	ldr	r6, [sp, #32]
 801a1ec:	1b89      	subs	r1, r1, r6
 801a1ee:	2908      	cmp	r1, #8
 801a1f0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a1f4:	dc02      	bgt.n	801a1fc <_strtod_l+0x2ec>
 801a1f6:	4576      	cmp	r6, lr
 801a1f8:	bfa8      	it	ge
 801a1fa:	4676      	movge	r6, lr
 801a1fc:	f1bc 0f00 	cmp.w	ip, #0
 801a200:	d000      	beq.n	801a204 <_strtod_l+0x2f4>
 801a202:	4276      	negs	r6, r6
 801a204:	2d00      	cmp	r5, #0
 801a206:	d14f      	bne.n	801a2a8 <_strtod_l+0x398>
 801a208:	9904      	ldr	r1, [sp, #16]
 801a20a:	4301      	orrs	r1, r0
 801a20c:	f47f aec2 	bne.w	8019f94 <_strtod_l+0x84>
 801a210:	2a00      	cmp	r2, #0
 801a212:	f47f aedb 	bne.w	8019fcc <_strtod_l+0xbc>
 801a216:	2b69      	cmp	r3, #105	; 0x69
 801a218:	d027      	beq.n	801a26a <_strtod_l+0x35a>
 801a21a:	dc24      	bgt.n	801a266 <_strtod_l+0x356>
 801a21c:	2b49      	cmp	r3, #73	; 0x49
 801a21e:	d024      	beq.n	801a26a <_strtod_l+0x35a>
 801a220:	2b4e      	cmp	r3, #78	; 0x4e
 801a222:	f47f aed3 	bne.w	8019fcc <_strtod_l+0xbc>
 801a226:	499e      	ldr	r1, [pc, #632]	; (801a4a0 <_strtod_l+0x590>)
 801a228:	a81d      	add	r0, sp, #116	; 0x74
 801a22a:	f001 f865 	bl	801b2f8 <__match>
 801a22e:	2800      	cmp	r0, #0
 801a230:	f43f aecc 	beq.w	8019fcc <_strtod_l+0xbc>
 801a234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a236:	781b      	ldrb	r3, [r3, #0]
 801a238:	2b28      	cmp	r3, #40	; 0x28
 801a23a:	d12d      	bne.n	801a298 <_strtod_l+0x388>
 801a23c:	4999      	ldr	r1, [pc, #612]	; (801a4a4 <_strtod_l+0x594>)
 801a23e:	aa20      	add	r2, sp, #128	; 0x80
 801a240:	a81d      	add	r0, sp, #116	; 0x74
 801a242:	f001 f86d 	bl	801b320 <__hexnan>
 801a246:	2805      	cmp	r0, #5
 801a248:	d126      	bne.n	801a298 <_strtod_l+0x388>
 801a24a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a24c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801a250:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a254:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a258:	e69c      	b.n	8019f94 <_strtod_l+0x84>
 801a25a:	210a      	movs	r1, #10
 801a25c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801a260:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a264:	e7b9      	b.n	801a1da <_strtod_l+0x2ca>
 801a266:	2b6e      	cmp	r3, #110	; 0x6e
 801a268:	e7db      	b.n	801a222 <_strtod_l+0x312>
 801a26a:	498f      	ldr	r1, [pc, #572]	; (801a4a8 <_strtod_l+0x598>)
 801a26c:	a81d      	add	r0, sp, #116	; 0x74
 801a26e:	f001 f843 	bl	801b2f8 <__match>
 801a272:	2800      	cmp	r0, #0
 801a274:	f43f aeaa 	beq.w	8019fcc <_strtod_l+0xbc>
 801a278:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a27a:	498c      	ldr	r1, [pc, #560]	; (801a4ac <_strtod_l+0x59c>)
 801a27c:	3b01      	subs	r3, #1
 801a27e:	a81d      	add	r0, sp, #116	; 0x74
 801a280:	931d      	str	r3, [sp, #116]	; 0x74
 801a282:	f001 f839 	bl	801b2f8 <__match>
 801a286:	b910      	cbnz	r0, 801a28e <_strtod_l+0x37e>
 801a288:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a28a:	3301      	adds	r3, #1
 801a28c:	931d      	str	r3, [sp, #116]	; 0x74
 801a28e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801a4bc <_strtod_l+0x5ac>
 801a292:	f04f 0a00 	mov.w	sl, #0
 801a296:	e67d      	b.n	8019f94 <_strtod_l+0x84>
 801a298:	4885      	ldr	r0, [pc, #532]	; (801a4b0 <_strtod_l+0x5a0>)
 801a29a:	f001 fdc5 	bl	801be28 <nan>
 801a29e:	ed8d 0b04 	vstr	d0, [sp, #16]
 801a2a2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801a2a6:	e675      	b.n	8019f94 <_strtod_l+0x84>
 801a2a8:	9b07      	ldr	r3, [sp, #28]
 801a2aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a2ac:	1af3      	subs	r3, r6, r3
 801a2ae:	2f00      	cmp	r7, #0
 801a2b0:	bf08      	it	eq
 801a2b2:	462f      	moveq	r7, r5
 801a2b4:	2d10      	cmp	r5, #16
 801a2b6:	9308      	str	r3, [sp, #32]
 801a2b8:	46a8      	mov	r8, r5
 801a2ba:	bfa8      	it	ge
 801a2bc:	f04f 0810 	movge.w	r8, #16
 801a2c0:	f7e6 f940 	bl	8000544 <__aeabi_ui2d>
 801a2c4:	2d09      	cmp	r5, #9
 801a2c6:	4682      	mov	sl, r0
 801a2c8:	468b      	mov	fp, r1
 801a2ca:	dd13      	ble.n	801a2f4 <_strtod_l+0x3e4>
 801a2cc:	4b79      	ldr	r3, [pc, #484]	; (801a4b4 <_strtod_l+0x5a4>)
 801a2ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a2d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a2d6:	f7e6 f9af 	bl	8000638 <__aeabi_dmul>
 801a2da:	4682      	mov	sl, r0
 801a2dc:	4648      	mov	r0, r9
 801a2de:	468b      	mov	fp, r1
 801a2e0:	f7e6 f930 	bl	8000544 <__aeabi_ui2d>
 801a2e4:	4602      	mov	r2, r0
 801a2e6:	460b      	mov	r3, r1
 801a2e8:	4650      	mov	r0, sl
 801a2ea:	4659      	mov	r1, fp
 801a2ec:	f7e5 ffee 	bl	80002cc <__adddf3>
 801a2f0:	4682      	mov	sl, r0
 801a2f2:	468b      	mov	fp, r1
 801a2f4:	2d0f      	cmp	r5, #15
 801a2f6:	dc38      	bgt.n	801a36a <_strtod_l+0x45a>
 801a2f8:	9b08      	ldr	r3, [sp, #32]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	f43f ae4a 	beq.w	8019f94 <_strtod_l+0x84>
 801a300:	dd24      	ble.n	801a34c <_strtod_l+0x43c>
 801a302:	2b16      	cmp	r3, #22
 801a304:	dc0b      	bgt.n	801a31e <_strtod_l+0x40e>
 801a306:	4d6b      	ldr	r5, [pc, #428]	; (801a4b4 <_strtod_l+0x5a4>)
 801a308:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801a30c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a310:	4652      	mov	r2, sl
 801a312:	465b      	mov	r3, fp
 801a314:	f7e6 f990 	bl	8000638 <__aeabi_dmul>
 801a318:	4682      	mov	sl, r0
 801a31a:	468b      	mov	fp, r1
 801a31c:	e63a      	b.n	8019f94 <_strtod_l+0x84>
 801a31e:	9a08      	ldr	r2, [sp, #32]
 801a320:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801a324:	4293      	cmp	r3, r2
 801a326:	db20      	blt.n	801a36a <_strtod_l+0x45a>
 801a328:	4c62      	ldr	r4, [pc, #392]	; (801a4b4 <_strtod_l+0x5a4>)
 801a32a:	f1c5 050f 	rsb	r5, r5, #15
 801a32e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801a332:	4652      	mov	r2, sl
 801a334:	465b      	mov	r3, fp
 801a336:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a33a:	f7e6 f97d 	bl	8000638 <__aeabi_dmul>
 801a33e:	9b08      	ldr	r3, [sp, #32]
 801a340:	1b5d      	subs	r5, r3, r5
 801a342:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a346:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a34a:	e7e3      	b.n	801a314 <_strtod_l+0x404>
 801a34c:	9b08      	ldr	r3, [sp, #32]
 801a34e:	3316      	adds	r3, #22
 801a350:	db0b      	blt.n	801a36a <_strtod_l+0x45a>
 801a352:	9b07      	ldr	r3, [sp, #28]
 801a354:	4a57      	ldr	r2, [pc, #348]	; (801a4b4 <_strtod_l+0x5a4>)
 801a356:	1b9e      	subs	r6, r3, r6
 801a358:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801a35c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a360:	4650      	mov	r0, sl
 801a362:	4659      	mov	r1, fp
 801a364:	f7e6 fa92 	bl	800088c <__aeabi_ddiv>
 801a368:	e7d6      	b.n	801a318 <_strtod_l+0x408>
 801a36a:	9b08      	ldr	r3, [sp, #32]
 801a36c:	eba5 0808 	sub.w	r8, r5, r8
 801a370:	4498      	add	r8, r3
 801a372:	f1b8 0f00 	cmp.w	r8, #0
 801a376:	dd71      	ble.n	801a45c <_strtod_l+0x54c>
 801a378:	f018 030f 	ands.w	r3, r8, #15
 801a37c:	d00a      	beq.n	801a394 <_strtod_l+0x484>
 801a37e:	494d      	ldr	r1, [pc, #308]	; (801a4b4 <_strtod_l+0x5a4>)
 801a380:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a384:	4652      	mov	r2, sl
 801a386:	465b      	mov	r3, fp
 801a388:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a38c:	f7e6 f954 	bl	8000638 <__aeabi_dmul>
 801a390:	4682      	mov	sl, r0
 801a392:	468b      	mov	fp, r1
 801a394:	f038 080f 	bics.w	r8, r8, #15
 801a398:	d04d      	beq.n	801a436 <_strtod_l+0x526>
 801a39a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801a39e:	dd22      	ble.n	801a3e6 <_strtod_l+0x4d6>
 801a3a0:	2500      	movs	r5, #0
 801a3a2:	462e      	mov	r6, r5
 801a3a4:	9509      	str	r5, [sp, #36]	; 0x24
 801a3a6:	9507      	str	r5, [sp, #28]
 801a3a8:	2322      	movs	r3, #34	; 0x22
 801a3aa:	f8df b110 	ldr.w	fp, [pc, #272]	; 801a4bc <_strtod_l+0x5ac>
 801a3ae:	6023      	str	r3, [r4, #0]
 801a3b0:	f04f 0a00 	mov.w	sl, #0
 801a3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	f43f adec 	beq.w	8019f94 <_strtod_l+0x84>
 801a3bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a3be:	4620      	mov	r0, r4
 801a3c0:	f001 f8a8 	bl	801b514 <_Bfree>
 801a3c4:	9907      	ldr	r1, [sp, #28]
 801a3c6:	4620      	mov	r0, r4
 801a3c8:	f001 f8a4 	bl	801b514 <_Bfree>
 801a3cc:	4631      	mov	r1, r6
 801a3ce:	4620      	mov	r0, r4
 801a3d0:	f001 f8a0 	bl	801b514 <_Bfree>
 801a3d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a3d6:	4620      	mov	r0, r4
 801a3d8:	f001 f89c 	bl	801b514 <_Bfree>
 801a3dc:	4629      	mov	r1, r5
 801a3de:	4620      	mov	r0, r4
 801a3e0:	f001 f898 	bl	801b514 <_Bfree>
 801a3e4:	e5d6      	b.n	8019f94 <_strtod_l+0x84>
 801a3e6:	2300      	movs	r3, #0
 801a3e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 801a3ec:	4650      	mov	r0, sl
 801a3ee:	4659      	mov	r1, fp
 801a3f0:	4699      	mov	r9, r3
 801a3f2:	f1b8 0f01 	cmp.w	r8, #1
 801a3f6:	dc21      	bgt.n	801a43c <_strtod_l+0x52c>
 801a3f8:	b10b      	cbz	r3, 801a3fe <_strtod_l+0x4ee>
 801a3fa:	4682      	mov	sl, r0
 801a3fc:	468b      	mov	fp, r1
 801a3fe:	4b2e      	ldr	r3, [pc, #184]	; (801a4b8 <_strtod_l+0x5a8>)
 801a400:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801a404:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801a408:	4652      	mov	r2, sl
 801a40a:	465b      	mov	r3, fp
 801a40c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801a410:	f7e6 f912 	bl	8000638 <__aeabi_dmul>
 801a414:	4b29      	ldr	r3, [pc, #164]	; (801a4bc <_strtod_l+0x5ac>)
 801a416:	460a      	mov	r2, r1
 801a418:	400b      	ands	r3, r1
 801a41a:	4929      	ldr	r1, [pc, #164]	; (801a4c0 <_strtod_l+0x5b0>)
 801a41c:	428b      	cmp	r3, r1
 801a41e:	4682      	mov	sl, r0
 801a420:	d8be      	bhi.n	801a3a0 <_strtod_l+0x490>
 801a422:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801a426:	428b      	cmp	r3, r1
 801a428:	bf86      	itte	hi
 801a42a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801a4c4 <_strtod_l+0x5b4>
 801a42e:	f04f 3aff 	movhi.w	sl, #4294967295
 801a432:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801a436:	2300      	movs	r3, #0
 801a438:	9304      	str	r3, [sp, #16]
 801a43a:	e081      	b.n	801a540 <_strtod_l+0x630>
 801a43c:	f018 0f01 	tst.w	r8, #1
 801a440:	d007      	beq.n	801a452 <_strtod_l+0x542>
 801a442:	4b1d      	ldr	r3, [pc, #116]	; (801a4b8 <_strtod_l+0x5a8>)
 801a444:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a44c:	f7e6 f8f4 	bl	8000638 <__aeabi_dmul>
 801a450:	2301      	movs	r3, #1
 801a452:	f109 0901 	add.w	r9, r9, #1
 801a456:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a45a:	e7ca      	b.n	801a3f2 <_strtod_l+0x4e2>
 801a45c:	d0eb      	beq.n	801a436 <_strtod_l+0x526>
 801a45e:	f1c8 0800 	rsb	r8, r8, #0
 801a462:	f018 020f 	ands.w	r2, r8, #15
 801a466:	d00a      	beq.n	801a47e <_strtod_l+0x56e>
 801a468:	4b12      	ldr	r3, [pc, #72]	; (801a4b4 <_strtod_l+0x5a4>)
 801a46a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a46e:	4650      	mov	r0, sl
 801a470:	4659      	mov	r1, fp
 801a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a476:	f7e6 fa09 	bl	800088c <__aeabi_ddiv>
 801a47a:	4682      	mov	sl, r0
 801a47c:	468b      	mov	fp, r1
 801a47e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801a482:	d0d8      	beq.n	801a436 <_strtod_l+0x526>
 801a484:	f1b8 0f1f 	cmp.w	r8, #31
 801a488:	dd1e      	ble.n	801a4c8 <_strtod_l+0x5b8>
 801a48a:	2500      	movs	r5, #0
 801a48c:	462e      	mov	r6, r5
 801a48e:	9509      	str	r5, [sp, #36]	; 0x24
 801a490:	9507      	str	r5, [sp, #28]
 801a492:	2322      	movs	r3, #34	; 0x22
 801a494:	f04f 0a00 	mov.w	sl, #0
 801a498:	f04f 0b00 	mov.w	fp, #0
 801a49c:	6023      	str	r3, [r4, #0]
 801a49e:	e789      	b.n	801a3b4 <_strtod_l+0x4a4>
 801a4a0:	0801d2ed 	.word	0x0801d2ed
 801a4a4:	0801d304 	.word	0x0801d304
 801a4a8:	0801d2e4 	.word	0x0801d2e4
 801a4ac:	0801d2e7 	.word	0x0801d2e7
 801a4b0:	0801d6a7 	.word	0x0801d6a7
 801a4b4:	0801d598 	.word	0x0801d598
 801a4b8:	0801d570 	.word	0x0801d570
 801a4bc:	7ff00000 	.word	0x7ff00000
 801a4c0:	7ca00000 	.word	0x7ca00000
 801a4c4:	7fefffff 	.word	0x7fefffff
 801a4c8:	f018 0310 	ands.w	r3, r8, #16
 801a4cc:	bf18      	it	ne
 801a4ce:	236a      	movne	r3, #106	; 0x6a
 801a4d0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801a888 <_strtod_l+0x978>
 801a4d4:	9304      	str	r3, [sp, #16]
 801a4d6:	4650      	mov	r0, sl
 801a4d8:	4659      	mov	r1, fp
 801a4da:	2300      	movs	r3, #0
 801a4dc:	f018 0f01 	tst.w	r8, #1
 801a4e0:	d004      	beq.n	801a4ec <_strtod_l+0x5dc>
 801a4e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 801a4e6:	f7e6 f8a7 	bl	8000638 <__aeabi_dmul>
 801a4ea:	2301      	movs	r3, #1
 801a4ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 801a4f0:	f109 0908 	add.w	r9, r9, #8
 801a4f4:	d1f2      	bne.n	801a4dc <_strtod_l+0x5cc>
 801a4f6:	b10b      	cbz	r3, 801a4fc <_strtod_l+0x5ec>
 801a4f8:	4682      	mov	sl, r0
 801a4fa:	468b      	mov	fp, r1
 801a4fc:	9b04      	ldr	r3, [sp, #16]
 801a4fe:	b1bb      	cbz	r3, 801a530 <_strtod_l+0x620>
 801a500:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801a504:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a508:	2b00      	cmp	r3, #0
 801a50a:	4659      	mov	r1, fp
 801a50c:	dd10      	ble.n	801a530 <_strtod_l+0x620>
 801a50e:	2b1f      	cmp	r3, #31
 801a510:	f340 8128 	ble.w	801a764 <_strtod_l+0x854>
 801a514:	2b34      	cmp	r3, #52	; 0x34
 801a516:	bfde      	ittt	le
 801a518:	3b20      	suble	r3, #32
 801a51a:	f04f 32ff 	movle.w	r2, #4294967295
 801a51e:	fa02 f303 	lslle.w	r3, r2, r3
 801a522:	f04f 0a00 	mov.w	sl, #0
 801a526:	bfcc      	ite	gt
 801a528:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801a52c:	ea03 0b01 	andle.w	fp, r3, r1
 801a530:	2200      	movs	r2, #0
 801a532:	2300      	movs	r3, #0
 801a534:	4650      	mov	r0, sl
 801a536:	4659      	mov	r1, fp
 801a538:	f7e6 fae6 	bl	8000b08 <__aeabi_dcmpeq>
 801a53c:	2800      	cmp	r0, #0
 801a53e:	d1a4      	bne.n	801a48a <_strtod_l+0x57a>
 801a540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a542:	9300      	str	r3, [sp, #0]
 801a544:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a546:	462b      	mov	r3, r5
 801a548:	463a      	mov	r2, r7
 801a54a:	4620      	mov	r0, r4
 801a54c:	f001 f84e 	bl	801b5ec <__s2b>
 801a550:	9009      	str	r0, [sp, #36]	; 0x24
 801a552:	2800      	cmp	r0, #0
 801a554:	f43f af24 	beq.w	801a3a0 <_strtod_l+0x490>
 801a558:	9b07      	ldr	r3, [sp, #28]
 801a55a:	1b9e      	subs	r6, r3, r6
 801a55c:	9b08      	ldr	r3, [sp, #32]
 801a55e:	2b00      	cmp	r3, #0
 801a560:	bfb4      	ite	lt
 801a562:	4633      	movlt	r3, r6
 801a564:	2300      	movge	r3, #0
 801a566:	9310      	str	r3, [sp, #64]	; 0x40
 801a568:	9b08      	ldr	r3, [sp, #32]
 801a56a:	2500      	movs	r5, #0
 801a56c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a570:	9318      	str	r3, [sp, #96]	; 0x60
 801a572:	462e      	mov	r6, r5
 801a574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a576:	4620      	mov	r0, r4
 801a578:	6859      	ldr	r1, [r3, #4]
 801a57a:	f000 ff8b 	bl	801b494 <_Balloc>
 801a57e:	9007      	str	r0, [sp, #28]
 801a580:	2800      	cmp	r0, #0
 801a582:	f43f af11 	beq.w	801a3a8 <_strtod_l+0x498>
 801a586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a588:	691a      	ldr	r2, [r3, #16]
 801a58a:	3202      	adds	r2, #2
 801a58c:	f103 010c 	add.w	r1, r3, #12
 801a590:	0092      	lsls	r2, r2, #2
 801a592:	300c      	adds	r0, #12
 801a594:	f7ff fb70 	bl	8019c78 <memcpy>
 801a598:	ec4b ab10 	vmov	d0, sl, fp
 801a59c:	aa20      	add	r2, sp, #128	; 0x80
 801a59e:	a91f      	add	r1, sp, #124	; 0x7c
 801a5a0:	4620      	mov	r0, r4
 801a5a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801a5a6:	f001 fb5d 	bl	801bc64 <__d2b>
 801a5aa:	901e      	str	r0, [sp, #120]	; 0x78
 801a5ac:	2800      	cmp	r0, #0
 801a5ae:	f43f aefb 	beq.w	801a3a8 <_strtod_l+0x498>
 801a5b2:	2101      	movs	r1, #1
 801a5b4:	4620      	mov	r0, r4
 801a5b6:	f001 f8b3 	bl	801b720 <__i2b>
 801a5ba:	4606      	mov	r6, r0
 801a5bc:	2800      	cmp	r0, #0
 801a5be:	f43f aef3 	beq.w	801a3a8 <_strtod_l+0x498>
 801a5c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801a5c4:	9904      	ldr	r1, [sp, #16]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	bfab      	itete	ge
 801a5ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801a5cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801a5ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801a5d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801a5d4:	bfac      	ite	ge
 801a5d6:	eb03 0902 	addge.w	r9, r3, r2
 801a5da:	1ad7      	sublt	r7, r2, r3
 801a5dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a5de:	eba3 0801 	sub.w	r8, r3, r1
 801a5e2:	4490      	add	r8, r2
 801a5e4:	4ba3      	ldr	r3, [pc, #652]	; (801a874 <_strtod_l+0x964>)
 801a5e6:	f108 38ff 	add.w	r8, r8, #4294967295
 801a5ea:	4598      	cmp	r8, r3
 801a5ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a5f0:	f280 80cc 	bge.w	801a78c <_strtod_l+0x87c>
 801a5f4:	eba3 0308 	sub.w	r3, r3, r8
 801a5f8:	2b1f      	cmp	r3, #31
 801a5fa:	eba2 0203 	sub.w	r2, r2, r3
 801a5fe:	f04f 0101 	mov.w	r1, #1
 801a602:	f300 80b6 	bgt.w	801a772 <_strtod_l+0x862>
 801a606:	fa01 f303 	lsl.w	r3, r1, r3
 801a60a:	9311      	str	r3, [sp, #68]	; 0x44
 801a60c:	2300      	movs	r3, #0
 801a60e:	930c      	str	r3, [sp, #48]	; 0x30
 801a610:	eb09 0802 	add.w	r8, r9, r2
 801a614:	9b04      	ldr	r3, [sp, #16]
 801a616:	45c1      	cmp	r9, r8
 801a618:	4417      	add	r7, r2
 801a61a:	441f      	add	r7, r3
 801a61c:	464b      	mov	r3, r9
 801a61e:	bfa8      	it	ge
 801a620:	4643      	movge	r3, r8
 801a622:	42bb      	cmp	r3, r7
 801a624:	bfa8      	it	ge
 801a626:	463b      	movge	r3, r7
 801a628:	2b00      	cmp	r3, #0
 801a62a:	bfc2      	ittt	gt
 801a62c:	eba8 0803 	subgt.w	r8, r8, r3
 801a630:	1aff      	subgt	r7, r7, r3
 801a632:	eba9 0903 	subgt.w	r9, r9, r3
 801a636:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a638:	2b00      	cmp	r3, #0
 801a63a:	dd17      	ble.n	801a66c <_strtod_l+0x75c>
 801a63c:	4631      	mov	r1, r6
 801a63e:	461a      	mov	r2, r3
 801a640:	4620      	mov	r0, r4
 801a642:	f001 f929 	bl	801b898 <__pow5mult>
 801a646:	4606      	mov	r6, r0
 801a648:	2800      	cmp	r0, #0
 801a64a:	f43f aead 	beq.w	801a3a8 <_strtod_l+0x498>
 801a64e:	4601      	mov	r1, r0
 801a650:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a652:	4620      	mov	r0, r4
 801a654:	f001 f87a 	bl	801b74c <__multiply>
 801a658:	900f      	str	r0, [sp, #60]	; 0x3c
 801a65a:	2800      	cmp	r0, #0
 801a65c:	f43f aea4 	beq.w	801a3a8 <_strtod_l+0x498>
 801a660:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a662:	4620      	mov	r0, r4
 801a664:	f000 ff56 	bl	801b514 <_Bfree>
 801a668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a66a:	931e      	str	r3, [sp, #120]	; 0x78
 801a66c:	f1b8 0f00 	cmp.w	r8, #0
 801a670:	f300 8091 	bgt.w	801a796 <_strtod_l+0x886>
 801a674:	9b08      	ldr	r3, [sp, #32]
 801a676:	2b00      	cmp	r3, #0
 801a678:	dd08      	ble.n	801a68c <_strtod_l+0x77c>
 801a67a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a67c:	9907      	ldr	r1, [sp, #28]
 801a67e:	4620      	mov	r0, r4
 801a680:	f001 f90a 	bl	801b898 <__pow5mult>
 801a684:	9007      	str	r0, [sp, #28]
 801a686:	2800      	cmp	r0, #0
 801a688:	f43f ae8e 	beq.w	801a3a8 <_strtod_l+0x498>
 801a68c:	2f00      	cmp	r7, #0
 801a68e:	dd08      	ble.n	801a6a2 <_strtod_l+0x792>
 801a690:	9907      	ldr	r1, [sp, #28]
 801a692:	463a      	mov	r2, r7
 801a694:	4620      	mov	r0, r4
 801a696:	f001 f959 	bl	801b94c <__lshift>
 801a69a:	9007      	str	r0, [sp, #28]
 801a69c:	2800      	cmp	r0, #0
 801a69e:	f43f ae83 	beq.w	801a3a8 <_strtod_l+0x498>
 801a6a2:	f1b9 0f00 	cmp.w	r9, #0
 801a6a6:	dd08      	ble.n	801a6ba <_strtod_l+0x7aa>
 801a6a8:	4631      	mov	r1, r6
 801a6aa:	464a      	mov	r2, r9
 801a6ac:	4620      	mov	r0, r4
 801a6ae:	f001 f94d 	bl	801b94c <__lshift>
 801a6b2:	4606      	mov	r6, r0
 801a6b4:	2800      	cmp	r0, #0
 801a6b6:	f43f ae77 	beq.w	801a3a8 <_strtod_l+0x498>
 801a6ba:	9a07      	ldr	r2, [sp, #28]
 801a6bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a6be:	4620      	mov	r0, r4
 801a6c0:	f001 f9cc 	bl	801ba5c <__mdiff>
 801a6c4:	4605      	mov	r5, r0
 801a6c6:	2800      	cmp	r0, #0
 801a6c8:	f43f ae6e 	beq.w	801a3a8 <_strtod_l+0x498>
 801a6cc:	68c3      	ldr	r3, [r0, #12]
 801a6ce:	930f      	str	r3, [sp, #60]	; 0x3c
 801a6d0:	2300      	movs	r3, #0
 801a6d2:	60c3      	str	r3, [r0, #12]
 801a6d4:	4631      	mov	r1, r6
 801a6d6:	f001 f9a5 	bl	801ba24 <__mcmp>
 801a6da:	2800      	cmp	r0, #0
 801a6dc:	da65      	bge.n	801a7aa <_strtod_l+0x89a>
 801a6de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a6e0:	ea53 030a 	orrs.w	r3, r3, sl
 801a6e4:	f040 8087 	bne.w	801a7f6 <_strtod_l+0x8e6>
 801a6e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	f040 8082 	bne.w	801a7f6 <_strtod_l+0x8e6>
 801a6f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a6f6:	0d1b      	lsrs	r3, r3, #20
 801a6f8:	051b      	lsls	r3, r3, #20
 801a6fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a6fe:	d97a      	bls.n	801a7f6 <_strtod_l+0x8e6>
 801a700:	696b      	ldr	r3, [r5, #20]
 801a702:	b913      	cbnz	r3, 801a70a <_strtod_l+0x7fa>
 801a704:	692b      	ldr	r3, [r5, #16]
 801a706:	2b01      	cmp	r3, #1
 801a708:	dd75      	ble.n	801a7f6 <_strtod_l+0x8e6>
 801a70a:	4629      	mov	r1, r5
 801a70c:	2201      	movs	r2, #1
 801a70e:	4620      	mov	r0, r4
 801a710:	f001 f91c 	bl	801b94c <__lshift>
 801a714:	4631      	mov	r1, r6
 801a716:	4605      	mov	r5, r0
 801a718:	f001 f984 	bl	801ba24 <__mcmp>
 801a71c:	2800      	cmp	r0, #0
 801a71e:	dd6a      	ble.n	801a7f6 <_strtod_l+0x8e6>
 801a720:	9904      	ldr	r1, [sp, #16]
 801a722:	4a55      	ldr	r2, [pc, #340]	; (801a878 <_strtod_l+0x968>)
 801a724:	465b      	mov	r3, fp
 801a726:	2900      	cmp	r1, #0
 801a728:	f000 8085 	beq.w	801a836 <_strtod_l+0x926>
 801a72c:	ea02 010b 	and.w	r1, r2, fp
 801a730:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a734:	dc7f      	bgt.n	801a836 <_strtod_l+0x926>
 801a736:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a73a:	f77f aeaa 	ble.w	801a492 <_strtod_l+0x582>
 801a73e:	4a4f      	ldr	r2, [pc, #316]	; (801a87c <_strtod_l+0x96c>)
 801a740:	2300      	movs	r3, #0
 801a742:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801a746:	4650      	mov	r0, sl
 801a748:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801a74c:	4659      	mov	r1, fp
 801a74e:	f7e5 ff73 	bl	8000638 <__aeabi_dmul>
 801a752:	460b      	mov	r3, r1
 801a754:	4303      	orrs	r3, r0
 801a756:	bf08      	it	eq
 801a758:	2322      	moveq	r3, #34	; 0x22
 801a75a:	4682      	mov	sl, r0
 801a75c:	468b      	mov	fp, r1
 801a75e:	bf08      	it	eq
 801a760:	6023      	streq	r3, [r4, #0]
 801a762:	e62b      	b.n	801a3bc <_strtod_l+0x4ac>
 801a764:	f04f 32ff 	mov.w	r2, #4294967295
 801a768:	fa02 f303 	lsl.w	r3, r2, r3
 801a76c:	ea03 0a0a 	and.w	sl, r3, sl
 801a770:	e6de      	b.n	801a530 <_strtod_l+0x620>
 801a772:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801a776:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801a77a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801a77e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801a782:	fa01 f308 	lsl.w	r3, r1, r8
 801a786:	930c      	str	r3, [sp, #48]	; 0x30
 801a788:	9111      	str	r1, [sp, #68]	; 0x44
 801a78a:	e741      	b.n	801a610 <_strtod_l+0x700>
 801a78c:	2300      	movs	r3, #0
 801a78e:	930c      	str	r3, [sp, #48]	; 0x30
 801a790:	2301      	movs	r3, #1
 801a792:	9311      	str	r3, [sp, #68]	; 0x44
 801a794:	e73c      	b.n	801a610 <_strtod_l+0x700>
 801a796:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a798:	4642      	mov	r2, r8
 801a79a:	4620      	mov	r0, r4
 801a79c:	f001 f8d6 	bl	801b94c <__lshift>
 801a7a0:	901e      	str	r0, [sp, #120]	; 0x78
 801a7a2:	2800      	cmp	r0, #0
 801a7a4:	f47f af66 	bne.w	801a674 <_strtod_l+0x764>
 801a7a8:	e5fe      	b.n	801a3a8 <_strtod_l+0x498>
 801a7aa:	465f      	mov	r7, fp
 801a7ac:	d16e      	bne.n	801a88c <_strtod_l+0x97c>
 801a7ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a7b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a7b4:	b342      	cbz	r2, 801a808 <_strtod_l+0x8f8>
 801a7b6:	4a32      	ldr	r2, [pc, #200]	; (801a880 <_strtod_l+0x970>)
 801a7b8:	4293      	cmp	r3, r2
 801a7ba:	d128      	bne.n	801a80e <_strtod_l+0x8fe>
 801a7bc:	9b04      	ldr	r3, [sp, #16]
 801a7be:	4650      	mov	r0, sl
 801a7c0:	b1eb      	cbz	r3, 801a7fe <_strtod_l+0x8ee>
 801a7c2:	4a2d      	ldr	r2, [pc, #180]	; (801a878 <_strtod_l+0x968>)
 801a7c4:	403a      	ands	r2, r7
 801a7c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801a7ca:	f04f 31ff 	mov.w	r1, #4294967295
 801a7ce:	d819      	bhi.n	801a804 <_strtod_l+0x8f4>
 801a7d0:	0d12      	lsrs	r2, r2, #20
 801a7d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801a7d6:	fa01 f303 	lsl.w	r3, r1, r3
 801a7da:	4298      	cmp	r0, r3
 801a7dc:	d117      	bne.n	801a80e <_strtod_l+0x8fe>
 801a7de:	4b29      	ldr	r3, [pc, #164]	; (801a884 <_strtod_l+0x974>)
 801a7e0:	429f      	cmp	r7, r3
 801a7e2:	d102      	bne.n	801a7ea <_strtod_l+0x8da>
 801a7e4:	3001      	adds	r0, #1
 801a7e6:	f43f addf 	beq.w	801a3a8 <_strtod_l+0x498>
 801a7ea:	4b23      	ldr	r3, [pc, #140]	; (801a878 <_strtod_l+0x968>)
 801a7ec:	403b      	ands	r3, r7
 801a7ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801a7f2:	f04f 0a00 	mov.w	sl, #0
 801a7f6:	9b04      	ldr	r3, [sp, #16]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d1a0      	bne.n	801a73e <_strtod_l+0x82e>
 801a7fc:	e5de      	b.n	801a3bc <_strtod_l+0x4ac>
 801a7fe:	f04f 33ff 	mov.w	r3, #4294967295
 801a802:	e7ea      	b.n	801a7da <_strtod_l+0x8ca>
 801a804:	460b      	mov	r3, r1
 801a806:	e7e8      	b.n	801a7da <_strtod_l+0x8ca>
 801a808:	ea53 030a 	orrs.w	r3, r3, sl
 801a80c:	d088      	beq.n	801a720 <_strtod_l+0x810>
 801a80e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a810:	b1db      	cbz	r3, 801a84a <_strtod_l+0x93a>
 801a812:	423b      	tst	r3, r7
 801a814:	d0ef      	beq.n	801a7f6 <_strtod_l+0x8e6>
 801a816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a818:	9a04      	ldr	r2, [sp, #16]
 801a81a:	4650      	mov	r0, sl
 801a81c:	4659      	mov	r1, fp
 801a81e:	b1c3      	cbz	r3, 801a852 <_strtod_l+0x942>
 801a820:	f7ff fb58 	bl	8019ed4 <sulp>
 801a824:	4602      	mov	r2, r0
 801a826:	460b      	mov	r3, r1
 801a828:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a82c:	f7e5 fd4e 	bl	80002cc <__adddf3>
 801a830:	4682      	mov	sl, r0
 801a832:	468b      	mov	fp, r1
 801a834:	e7df      	b.n	801a7f6 <_strtod_l+0x8e6>
 801a836:	4013      	ands	r3, r2
 801a838:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a83c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a840:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a844:	f04f 3aff 	mov.w	sl, #4294967295
 801a848:	e7d5      	b.n	801a7f6 <_strtod_l+0x8e6>
 801a84a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a84c:	ea13 0f0a 	tst.w	r3, sl
 801a850:	e7e0      	b.n	801a814 <_strtod_l+0x904>
 801a852:	f7ff fb3f 	bl	8019ed4 <sulp>
 801a856:	4602      	mov	r2, r0
 801a858:	460b      	mov	r3, r1
 801a85a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a85e:	f7e5 fd33 	bl	80002c8 <__aeabi_dsub>
 801a862:	2200      	movs	r2, #0
 801a864:	2300      	movs	r3, #0
 801a866:	4682      	mov	sl, r0
 801a868:	468b      	mov	fp, r1
 801a86a:	f7e6 f94d 	bl	8000b08 <__aeabi_dcmpeq>
 801a86e:	2800      	cmp	r0, #0
 801a870:	d0c1      	beq.n	801a7f6 <_strtod_l+0x8e6>
 801a872:	e60e      	b.n	801a492 <_strtod_l+0x582>
 801a874:	fffffc02 	.word	0xfffffc02
 801a878:	7ff00000 	.word	0x7ff00000
 801a87c:	39500000 	.word	0x39500000
 801a880:	000fffff 	.word	0x000fffff
 801a884:	7fefffff 	.word	0x7fefffff
 801a888:	0801d318 	.word	0x0801d318
 801a88c:	4631      	mov	r1, r6
 801a88e:	4628      	mov	r0, r5
 801a890:	f001 fa44 	bl	801bd1c <__ratio>
 801a894:	ec59 8b10 	vmov	r8, r9, d0
 801a898:	ee10 0a10 	vmov	r0, s0
 801a89c:	2200      	movs	r2, #0
 801a89e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a8a2:	4649      	mov	r1, r9
 801a8a4:	f7e6 f944 	bl	8000b30 <__aeabi_dcmple>
 801a8a8:	2800      	cmp	r0, #0
 801a8aa:	d07c      	beq.n	801a9a6 <_strtod_l+0xa96>
 801a8ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d04c      	beq.n	801a94c <_strtod_l+0xa3c>
 801a8b2:	4b95      	ldr	r3, [pc, #596]	; (801ab08 <_strtod_l+0xbf8>)
 801a8b4:	2200      	movs	r2, #0
 801a8b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801a8ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801ab08 <_strtod_l+0xbf8>
 801a8be:	f04f 0800 	mov.w	r8, #0
 801a8c2:	4b92      	ldr	r3, [pc, #584]	; (801ab0c <_strtod_l+0xbfc>)
 801a8c4:	403b      	ands	r3, r7
 801a8c6:	9311      	str	r3, [sp, #68]	; 0x44
 801a8c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a8ca:	4b91      	ldr	r3, [pc, #580]	; (801ab10 <_strtod_l+0xc00>)
 801a8cc:	429a      	cmp	r2, r3
 801a8ce:	f040 80b2 	bne.w	801aa36 <_strtod_l+0xb26>
 801a8d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a8d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a8da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801a8de:	ec4b ab10 	vmov	d0, sl, fp
 801a8e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801a8e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a8ea:	f001 f93f 	bl	801bb6c <__ulp>
 801a8ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a8f2:	ec53 2b10 	vmov	r2, r3, d0
 801a8f6:	f7e5 fe9f 	bl	8000638 <__aeabi_dmul>
 801a8fa:	4652      	mov	r2, sl
 801a8fc:	465b      	mov	r3, fp
 801a8fe:	f7e5 fce5 	bl	80002cc <__adddf3>
 801a902:	460b      	mov	r3, r1
 801a904:	4981      	ldr	r1, [pc, #516]	; (801ab0c <_strtod_l+0xbfc>)
 801a906:	4a83      	ldr	r2, [pc, #524]	; (801ab14 <_strtod_l+0xc04>)
 801a908:	4019      	ands	r1, r3
 801a90a:	4291      	cmp	r1, r2
 801a90c:	4682      	mov	sl, r0
 801a90e:	d95e      	bls.n	801a9ce <_strtod_l+0xabe>
 801a910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a912:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801a916:	4293      	cmp	r3, r2
 801a918:	d103      	bne.n	801a922 <_strtod_l+0xa12>
 801a91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a91c:	3301      	adds	r3, #1
 801a91e:	f43f ad43 	beq.w	801a3a8 <_strtod_l+0x498>
 801a922:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801ab20 <_strtod_l+0xc10>
 801a926:	f04f 3aff 	mov.w	sl, #4294967295
 801a92a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a92c:	4620      	mov	r0, r4
 801a92e:	f000 fdf1 	bl	801b514 <_Bfree>
 801a932:	9907      	ldr	r1, [sp, #28]
 801a934:	4620      	mov	r0, r4
 801a936:	f000 fded 	bl	801b514 <_Bfree>
 801a93a:	4631      	mov	r1, r6
 801a93c:	4620      	mov	r0, r4
 801a93e:	f000 fde9 	bl	801b514 <_Bfree>
 801a942:	4629      	mov	r1, r5
 801a944:	4620      	mov	r0, r4
 801a946:	f000 fde5 	bl	801b514 <_Bfree>
 801a94a:	e613      	b.n	801a574 <_strtod_l+0x664>
 801a94c:	f1ba 0f00 	cmp.w	sl, #0
 801a950:	d11b      	bne.n	801a98a <_strtod_l+0xa7a>
 801a952:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a956:	b9f3      	cbnz	r3, 801a996 <_strtod_l+0xa86>
 801a958:	4b6b      	ldr	r3, [pc, #428]	; (801ab08 <_strtod_l+0xbf8>)
 801a95a:	2200      	movs	r2, #0
 801a95c:	4640      	mov	r0, r8
 801a95e:	4649      	mov	r1, r9
 801a960:	f7e6 f8dc 	bl	8000b1c <__aeabi_dcmplt>
 801a964:	b9d0      	cbnz	r0, 801a99c <_strtod_l+0xa8c>
 801a966:	4640      	mov	r0, r8
 801a968:	4649      	mov	r1, r9
 801a96a:	4b6b      	ldr	r3, [pc, #428]	; (801ab18 <_strtod_l+0xc08>)
 801a96c:	2200      	movs	r2, #0
 801a96e:	f7e5 fe63 	bl	8000638 <__aeabi_dmul>
 801a972:	4680      	mov	r8, r0
 801a974:	4689      	mov	r9, r1
 801a976:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a97a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801a97e:	931b      	str	r3, [sp, #108]	; 0x6c
 801a980:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801a984:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801a988:	e79b      	b.n	801a8c2 <_strtod_l+0x9b2>
 801a98a:	f1ba 0f01 	cmp.w	sl, #1
 801a98e:	d102      	bne.n	801a996 <_strtod_l+0xa86>
 801a990:	2f00      	cmp	r7, #0
 801a992:	f43f ad7e 	beq.w	801a492 <_strtod_l+0x582>
 801a996:	4b61      	ldr	r3, [pc, #388]	; (801ab1c <_strtod_l+0xc0c>)
 801a998:	2200      	movs	r2, #0
 801a99a:	e78c      	b.n	801a8b6 <_strtod_l+0x9a6>
 801a99c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801ab18 <_strtod_l+0xc08>
 801a9a0:	f04f 0800 	mov.w	r8, #0
 801a9a4:	e7e7      	b.n	801a976 <_strtod_l+0xa66>
 801a9a6:	4b5c      	ldr	r3, [pc, #368]	; (801ab18 <_strtod_l+0xc08>)
 801a9a8:	4640      	mov	r0, r8
 801a9aa:	4649      	mov	r1, r9
 801a9ac:	2200      	movs	r2, #0
 801a9ae:	f7e5 fe43 	bl	8000638 <__aeabi_dmul>
 801a9b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a9b4:	4680      	mov	r8, r0
 801a9b6:	4689      	mov	r9, r1
 801a9b8:	b933      	cbnz	r3, 801a9c8 <_strtod_l+0xab8>
 801a9ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a9be:	9012      	str	r0, [sp, #72]	; 0x48
 801a9c0:	9313      	str	r3, [sp, #76]	; 0x4c
 801a9c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801a9c6:	e7dd      	b.n	801a984 <_strtod_l+0xa74>
 801a9c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801a9cc:	e7f9      	b.n	801a9c2 <_strtod_l+0xab2>
 801a9ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801a9d2:	9b04      	ldr	r3, [sp, #16]
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d1a8      	bne.n	801a92a <_strtod_l+0xa1a>
 801a9d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a9dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a9de:	0d1b      	lsrs	r3, r3, #20
 801a9e0:	051b      	lsls	r3, r3, #20
 801a9e2:	429a      	cmp	r2, r3
 801a9e4:	d1a1      	bne.n	801a92a <_strtod_l+0xa1a>
 801a9e6:	4640      	mov	r0, r8
 801a9e8:	4649      	mov	r1, r9
 801a9ea:	f7e6 f95d 	bl	8000ca8 <__aeabi_d2lz>
 801a9ee:	f7e5 fdf5 	bl	80005dc <__aeabi_l2d>
 801a9f2:	4602      	mov	r2, r0
 801a9f4:	460b      	mov	r3, r1
 801a9f6:	4640      	mov	r0, r8
 801a9f8:	4649      	mov	r1, r9
 801a9fa:	f7e5 fc65 	bl	80002c8 <__aeabi_dsub>
 801a9fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aa00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801aa04:	ea43 030a 	orr.w	r3, r3, sl
 801aa08:	4313      	orrs	r3, r2
 801aa0a:	4680      	mov	r8, r0
 801aa0c:	4689      	mov	r9, r1
 801aa0e:	d053      	beq.n	801aab8 <_strtod_l+0xba8>
 801aa10:	a335      	add	r3, pc, #212	; (adr r3, 801aae8 <_strtod_l+0xbd8>)
 801aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa16:	f7e6 f881 	bl	8000b1c <__aeabi_dcmplt>
 801aa1a:	2800      	cmp	r0, #0
 801aa1c:	f47f acce 	bne.w	801a3bc <_strtod_l+0x4ac>
 801aa20:	a333      	add	r3, pc, #204	; (adr r3, 801aaf0 <_strtod_l+0xbe0>)
 801aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa26:	4640      	mov	r0, r8
 801aa28:	4649      	mov	r1, r9
 801aa2a:	f7e6 f895 	bl	8000b58 <__aeabi_dcmpgt>
 801aa2e:	2800      	cmp	r0, #0
 801aa30:	f43f af7b 	beq.w	801a92a <_strtod_l+0xa1a>
 801aa34:	e4c2      	b.n	801a3bc <_strtod_l+0x4ac>
 801aa36:	9b04      	ldr	r3, [sp, #16]
 801aa38:	b333      	cbz	r3, 801aa88 <_strtod_l+0xb78>
 801aa3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801aa3c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801aa40:	d822      	bhi.n	801aa88 <_strtod_l+0xb78>
 801aa42:	a32d      	add	r3, pc, #180	; (adr r3, 801aaf8 <_strtod_l+0xbe8>)
 801aa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa48:	4640      	mov	r0, r8
 801aa4a:	4649      	mov	r1, r9
 801aa4c:	f7e6 f870 	bl	8000b30 <__aeabi_dcmple>
 801aa50:	b1a0      	cbz	r0, 801aa7c <_strtod_l+0xb6c>
 801aa52:	4649      	mov	r1, r9
 801aa54:	4640      	mov	r0, r8
 801aa56:	f7e6 f89f 	bl	8000b98 <__aeabi_d2uiz>
 801aa5a:	2801      	cmp	r0, #1
 801aa5c:	bf38      	it	cc
 801aa5e:	2001      	movcc	r0, #1
 801aa60:	f7e5 fd70 	bl	8000544 <__aeabi_ui2d>
 801aa64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa66:	4680      	mov	r8, r0
 801aa68:	4689      	mov	r9, r1
 801aa6a:	bb13      	cbnz	r3, 801aab2 <_strtod_l+0xba2>
 801aa6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa70:	9014      	str	r0, [sp, #80]	; 0x50
 801aa72:	9315      	str	r3, [sp, #84]	; 0x54
 801aa74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801aa78:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801aa7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aa80:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801aa84:	1a9b      	subs	r3, r3, r2
 801aa86:	930d      	str	r3, [sp, #52]	; 0x34
 801aa88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801aa8c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801aa90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801aa94:	f001 f86a 	bl	801bb6c <__ulp>
 801aa98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801aa9c:	ec53 2b10 	vmov	r2, r3, d0
 801aaa0:	f7e5 fdca 	bl	8000638 <__aeabi_dmul>
 801aaa4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801aaa8:	f7e5 fc10 	bl	80002cc <__adddf3>
 801aaac:	4682      	mov	sl, r0
 801aaae:	468b      	mov	fp, r1
 801aab0:	e78f      	b.n	801a9d2 <_strtod_l+0xac2>
 801aab2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801aab6:	e7dd      	b.n	801aa74 <_strtod_l+0xb64>
 801aab8:	a311      	add	r3, pc, #68	; (adr r3, 801ab00 <_strtod_l+0xbf0>)
 801aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aabe:	f7e6 f82d 	bl	8000b1c <__aeabi_dcmplt>
 801aac2:	e7b4      	b.n	801aa2e <_strtod_l+0xb1e>
 801aac4:	2300      	movs	r3, #0
 801aac6:	930e      	str	r3, [sp, #56]	; 0x38
 801aac8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801aaca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aacc:	6013      	str	r3, [r2, #0]
 801aace:	f7ff ba65 	b.w	8019f9c <_strtod_l+0x8c>
 801aad2:	2b65      	cmp	r3, #101	; 0x65
 801aad4:	f43f ab5d 	beq.w	801a192 <_strtod_l+0x282>
 801aad8:	2b45      	cmp	r3, #69	; 0x45
 801aada:	f43f ab5a 	beq.w	801a192 <_strtod_l+0x282>
 801aade:	2201      	movs	r2, #1
 801aae0:	f7ff bb92 	b.w	801a208 <_strtod_l+0x2f8>
 801aae4:	f3af 8000 	nop.w
 801aae8:	94a03595 	.word	0x94a03595
 801aaec:	3fdfffff 	.word	0x3fdfffff
 801aaf0:	35afe535 	.word	0x35afe535
 801aaf4:	3fe00000 	.word	0x3fe00000
 801aaf8:	ffc00000 	.word	0xffc00000
 801aafc:	41dfffff 	.word	0x41dfffff
 801ab00:	94a03595 	.word	0x94a03595
 801ab04:	3fcfffff 	.word	0x3fcfffff
 801ab08:	3ff00000 	.word	0x3ff00000
 801ab0c:	7ff00000 	.word	0x7ff00000
 801ab10:	7fe00000 	.word	0x7fe00000
 801ab14:	7c9fffff 	.word	0x7c9fffff
 801ab18:	3fe00000 	.word	0x3fe00000
 801ab1c:	bff00000 	.word	0xbff00000
 801ab20:	7fefffff 	.word	0x7fefffff

0801ab24 <strtof>:
 801ab24:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801ab28:	4e26      	ldr	r6, [pc, #152]	; (801abc4 <strtof+0xa0>)
 801ab2a:	4b27      	ldr	r3, [pc, #156]	; (801abc8 <strtof+0xa4>)
 801ab2c:	460a      	mov	r2, r1
 801ab2e:	ed2d 8b02 	vpush	{d8}
 801ab32:	4601      	mov	r1, r0
 801ab34:	6830      	ldr	r0, [r6, #0]
 801ab36:	f7ff f9eb 	bl	8019f10 <_strtod_l>
 801ab3a:	ec55 4b10 	vmov	r4, r5, d0
 801ab3e:	ee10 2a10 	vmov	r2, s0
 801ab42:	ee10 0a10 	vmov	r0, s0
 801ab46:	462b      	mov	r3, r5
 801ab48:	4629      	mov	r1, r5
 801ab4a:	f7e6 f80f 	bl	8000b6c <__aeabi_dcmpun>
 801ab4e:	b190      	cbz	r0, 801ab76 <strtof+0x52>
 801ab50:	2d00      	cmp	r5, #0
 801ab52:	481e      	ldr	r0, [pc, #120]	; (801abcc <strtof+0xa8>)
 801ab54:	da09      	bge.n	801ab6a <strtof+0x46>
 801ab56:	f001 f96f 	bl	801be38 <nanf>
 801ab5a:	eeb1 8a40 	vneg.f32	s16, s0
 801ab5e:	eeb0 0a48 	vmov.f32	s0, s16
 801ab62:	ecbd 8b02 	vpop	{d8}
 801ab66:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801ab6a:	ecbd 8b02 	vpop	{d8}
 801ab6e:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 801ab72:	f001 b961 	b.w	801be38 <nanf>
 801ab76:	4620      	mov	r0, r4
 801ab78:	4629      	mov	r1, r5
 801ab7a:	f7e6 f82d 	bl	8000bd8 <__aeabi_d2f>
 801ab7e:	ee08 0a10 	vmov	s16, r0
 801ab82:	eddf 7a13 	vldr	s15, [pc, #76]	; 801abd0 <strtof+0xac>
 801ab86:	eeb0 7ac8 	vabs.f32	s14, s16
 801ab8a:	eeb4 7a67 	vcmp.f32	s14, s15
 801ab8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab92:	dde4      	ble.n	801ab5e <strtof+0x3a>
 801ab94:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 801ab98:	4b0e      	ldr	r3, [pc, #56]	; (801abd4 <strtof+0xb0>)
 801ab9a:	f04f 32ff 	mov.w	r2, #4294967295
 801ab9e:	4620      	mov	r0, r4
 801aba0:	4649      	mov	r1, r9
 801aba2:	f7e5 ffe3 	bl	8000b6c <__aeabi_dcmpun>
 801aba6:	b940      	cbnz	r0, 801abba <strtof+0x96>
 801aba8:	4b0a      	ldr	r3, [pc, #40]	; (801abd4 <strtof+0xb0>)
 801abaa:	f04f 32ff 	mov.w	r2, #4294967295
 801abae:	4620      	mov	r0, r4
 801abb0:	4649      	mov	r1, r9
 801abb2:	f7e5 ffbd 	bl	8000b30 <__aeabi_dcmple>
 801abb6:	2800      	cmp	r0, #0
 801abb8:	d0d1      	beq.n	801ab5e <strtof+0x3a>
 801abba:	6833      	ldr	r3, [r6, #0]
 801abbc:	2222      	movs	r2, #34	; 0x22
 801abbe:	601a      	str	r2, [r3, #0]
 801abc0:	e7cd      	b.n	801ab5e <strtof+0x3a>
 801abc2:	bf00      	nop
 801abc4:	2000000c 	.word	0x2000000c
 801abc8:	20000074 	.word	0x20000074
 801abcc:	0801d6a7 	.word	0x0801d6a7
 801abd0:	7f7fffff 	.word	0x7f7fffff
 801abd4:	7fefffff 	.word	0x7fefffff

0801abd8 <_strtol_l.isra.0>:
 801abd8:	2b01      	cmp	r3, #1
 801abda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abde:	d001      	beq.n	801abe4 <_strtol_l.isra.0+0xc>
 801abe0:	2b24      	cmp	r3, #36	; 0x24
 801abe2:	d906      	bls.n	801abf2 <_strtol_l.isra.0+0x1a>
 801abe4:	f7fe ffce 	bl	8019b84 <__errno>
 801abe8:	2316      	movs	r3, #22
 801abea:	6003      	str	r3, [r0, #0]
 801abec:	2000      	movs	r0, #0
 801abee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abf2:	4f3a      	ldr	r7, [pc, #232]	; (801acdc <_strtol_l.isra.0+0x104>)
 801abf4:	468e      	mov	lr, r1
 801abf6:	4676      	mov	r6, lr
 801abf8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801abfc:	5de5      	ldrb	r5, [r4, r7]
 801abfe:	f015 0508 	ands.w	r5, r5, #8
 801ac02:	d1f8      	bne.n	801abf6 <_strtol_l.isra.0+0x1e>
 801ac04:	2c2d      	cmp	r4, #45	; 0x2d
 801ac06:	d134      	bne.n	801ac72 <_strtol_l.isra.0+0x9a>
 801ac08:	f89e 4000 	ldrb.w	r4, [lr]
 801ac0c:	f04f 0801 	mov.w	r8, #1
 801ac10:	f106 0e02 	add.w	lr, r6, #2
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d05c      	beq.n	801acd2 <_strtol_l.isra.0+0xfa>
 801ac18:	2b10      	cmp	r3, #16
 801ac1a:	d10c      	bne.n	801ac36 <_strtol_l.isra.0+0x5e>
 801ac1c:	2c30      	cmp	r4, #48	; 0x30
 801ac1e:	d10a      	bne.n	801ac36 <_strtol_l.isra.0+0x5e>
 801ac20:	f89e 4000 	ldrb.w	r4, [lr]
 801ac24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ac28:	2c58      	cmp	r4, #88	; 0x58
 801ac2a:	d14d      	bne.n	801acc8 <_strtol_l.isra.0+0xf0>
 801ac2c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801ac30:	2310      	movs	r3, #16
 801ac32:	f10e 0e02 	add.w	lr, lr, #2
 801ac36:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801ac3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ac3e:	2600      	movs	r6, #0
 801ac40:	fbbc f9f3 	udiv	r9, ip, r3
 801ac44:	4635      	mov	r5, r6
 801ac46:	fb03 ca19 	mls	sl, r3, r9, ip
 801ac4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801ac4e:	2f09      	cmp	r7, #9
 801ac50:	d818      	bhi.n	801ac84 <_strtol_l.isra.0+0xac>
 801ac52:	463c      	mov	r4, r7
 801ac54:	42a3      	cmp	r3, r4
 801ac56:	dd24      	ble.n	801aca2 <_strtol_l.isra.0+0xca>
 801ac58:	2e00      	cmp	r6, #0
 801ac5a:	db1f      	blt.n	801ac9c <_strtol_l.isra.0+0xc4>
 801ac5c:	45a9      	cmp	r9, r5
 801ac5e:	d31d      	bcc.n	801ac9c <_strtol_l.isra.0+0xc4>
 801ac60:	d101      	bne.n	801ac66 <_strtol_l.isra.0+0x8e>
 801ac62:	45a2      	cmp	sl, r4
 801ac64:	db1a      	blt.n	801ac9c <_strtol_l.isra.0+0xc4>
 801ac66:	fb05 4503 	mla	r5, r5, r3, r4
 801ac6a:	2601      	movs	r6, #1
 801ac6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ac70:	e7eb      	b.n	801ac4a <_strtol_l.isra.0+0x72>
 801ac72:	2c2b      	cmp	r4, #43	; 0x2b
 801ac74:	bf08      	it	eq
 801ac76:	f89e 4000 	ldrbeq.w	r4, [lr]
 801ac7a:	46a8      	mov	r8, r5
 801ac7c:	bf08      	it	eq
 801ac7e:	f106 0e02 	addeq.w	lr, r6, #2
 801ac82:	e7c7      	b.n	801ac14 <_strtol_l.isra.0+0x3c>
 801ac84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801ac88:	2f19      	cmp	r7, #25
 801ac8a:	d801      	bhi.n	801ac90 <_strtol_l.isra.0+0xb8>
 801ac8c:	3c37      	subs	r4, #55	; 0x37
 801ac8e:	e7e1      	b.n	801ac54 <_strtol_l.isra.0+0x7c>
 801ac90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801ac94:	2f19      	cmp	r7, #25
 801ac96:	d804      	bhi.n	801aca2 <_strtol_l.isra.0+0xca>
 801ac98:	3c57      	subs	r4, #87	; 0x57
 801ac9a:	e7db      	b.n	801ac54 <_strtol_l.isra.0+0x7c>
 801ac9c:	f04f 36ff 	mov.w	r6, #4294967295
 801aca0:	e7e4      	b.n	801ac6c <_strtol_l.isra.0+0x94>
 801aca2:	2e00      	cmp	r6, #0
 801aca4:	da05      	bge.n	801acb2 <_strtol_l.isra.0+0xda>
 801aca6:	2322      	movs	r3, #34	; 0x22
 801aca8:	6003      	str	r3, [r0, #0]
 801acaa:	4665      	mov	r5, ip
 801acac:	b942      	cbnz	r2, 801acc0 <_strtol_l.isra.0+0xe8>
 801acae:	4628      	mov	r0, r5
 801acb0:	e79d      	b.n	801abee <_strtol_l.isra.0+0x16>
 801acb2:	f1b8 0f00 	cmp.w	r8, #0
 801acb6:	d000      	beq.n	801acba <_strtol_l.isra.0+0xe2>
 801acb8:	426d      	negs	r5, r5
 801acba:	2a00      	cmp	r2, #0
 801acbc:	d0f7      	beq.n	801acae <_strtol_l.isra.0+0xd6>
 801acbe:	b10e      	cbz	r6, 801acc4 <_strtol_l.isra.0+0xec>
 801acc0:	f10e 31ff 	add.w	r1, lr, #4294967295
 801acc4:	6011      	str	r1, [r2, #0]
 801acc6:	e7f2      	b.n	801acae <_strtol_l.isra.0+0xd6>
 801acc8:	2430      	movs	r4, #48	; 0x30
 801acca:	2b00      	cmp	r3, #0
 801accc:	d1b3      	bne.n	801ac36 <_strtol_l.isra.0+0x5e>
 801acce:	2308      	movs	r3, #8
 801acd0:	e7b1      	b.n	801ac36 <_strtol_l.isra.0+0x5e>
 801acd2:	2c30      	cmp	r4, #48	; 0x30
 801acd4:	d0a4      	beq.n	801ac20 <_strtol_l.isra.0+0x48>
 801acd6:	230a      	movs	r3, #10
 801acd8:	e7ad      	b.n	801ac36 <_strtol_l.isra.0+0x5e>
 801acda:	bf00      	nop
 801acdc:	0801d366 	.word	0x0801d366

0801ace0 <strtol>:
 801ace0:	4613      	mov	r3, r2
 801ace2:	460a      	mov	r2, r1
 801ace4:	4601      	mov	r1, r0
 801ace6:	4802      	ldr	r0, [pc, #8]	; (801acf0 <strtol+0x10>)
 801ace8:	6800      	ldr	r0, [r0, #0]
 801acea:	f7ff bf75 	b.w	801abd8 <_strtol_l.isra.0>
 801acee:	bf00      	nop
 801acf0:	2000000c 	.word	0x2000000c

0801acf4 <__utoa>:
 801acf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acf6:	4c1f      	ldr	r4, [pc, #124]	; (801ad74 <__utoa+0x80>)
 801acf8:	b08b      	sub	sp, #44	; 0x2c
 801acfa:	4605      	mov	r5, r0
 801acfc:	460b      	mov	r3, r1
 801acfe:	466e      	mov	r6, sp
 801ad00:	f104 0c20 	add.w	ip, r4, #32
 801ad04:	6820      	ldr	r0, [r4, #0]
 801ad06:	6861      	ldr	r1, [r4, #4]
 801ad08:	4637      	mov	r7, r6
 801ad0a:	c703      	stmia	r7!, {r0, r1}
 801ad0c:	3408      	adds	r4, #8
 801ad0e:	4564      	cmp	r4, ip
 801ad10:	463e      	mov	r6, r7
 801ad12:	d1f7      	bne.n	801ad04 <__utoa+0x10>
 801ad14:	7921      	ldrb	r1, [r4, #4]
 801ad16:	7139      	strb	r1, [r7, #4]
 801ad18:	1e91      	subs	r1, r2, #2
 801ad1a:	6820      	ldr	r0, [r4, #0]
 801ad1c:	6038      	str	r0, [r7, #0]
 801ad1e:	2922      	cmp	r1, #34	; 0x22
 801ad20:	f04f 0100 	mov.w	r1, #0
 801ad24:	d904      	bls.n	801ad30 <__utoa+0x3c>
 801ad26:	7019      	strb	r1, [r3, #0]
 801ad28:	460b      	mov	r3, r1
 801ad2a:	4618      	mov	r0, r3
 801ad2c:	b00b      	add	sp, #44	; 0x2c
 801ad2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad30:	1e58      	subs	r0, r3, #1
 801ad32:	4684      	mov	ip, r0
 801ad34:	fbb5 f7f2 	udiv	r7, r5, r2
 801ad38:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801ad3c:	fb02 5617 	mls	r6, r2, r7, r5
 801ad40:	4476      	add	r6, lr
 801ad42:	460c      	mov	r4, r1
 801ad44:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801ad48:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801ad4c:	462e      	mov	r6, r5
 801ad4e:	42b2      	cmp	r2, r6
 801ad50:	f101 0101 	add.w	r1, r1, #1
 801ad54:	463d      	mov	r5, r7
 801ad56:	d9ed      	bls.n	801ad34 <__utoa+0x40>
 801ad58:	2200      	movs	r2, #0
 801ad5a:	545a      	strb	r2, [r3, r1]
 801ad5c:	1919      	adds	r1, r3, r4
 801ad5e:	1aa5      	subs	r5, r4, r2
 801ad60:	42aa      	cmp	r2, r5
 801ad62:	dae2      	bge.n	801ad2a <__utoa+0x36>
 801ad64:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801ad68:	780e      	ldrb	r6, [r1, #0]
 801ad6a:	7006      	strb	r6, [r0, #0]
 801ad6c:	3201      	adds	r2, #1
 801ad6e:	f801 5901 	strb.w	r5, [r1], #-1
 801ad72:	e7f4      	b.n	801ad5e <__utoa+0x6a>
 801ad74:	0801d340 	.word	0x0801d340

0801ad78 <rshift>:
 801ad78:	6903      	ldr	r3, [r0, #16]
 801ad7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ad7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad82:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ad86:	f100 0414 	add.w	r4, r0, #20
 801ad8a:	dd45      	ble.n	801ae18 <rshift+0xa0>
 801ad8c:	f011 011f 	ands.w	r1, r1, #31
 801ad90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ad94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ad98:	d10c      	bne.n	801adb4 <rshift+0x3c>
 801ad9a:	f100 0710 	add.w	r7, r0, #16
 801ad9e:	4629      	mov	r1, r5
 801ada0:	42b1      	cmp	r1, r6
 801ada2:	d334      	bcc.n	801ae0e <rshift+0x96>
 801ada4:	1a9b      	subs	r3, r3, r2
 801ada6:	009b      	lsls	r3, r3, #2
 801ada8:	1eea      	subs	r2, r5, #3
 801adaa:	4296      	cmp	r6, r2
 801adac:	bf38      	it	cc
 801adae:	2300      	movcc	r3, #0
 801adb0:	4423      	add	r3, r4
 801adb2:	e015      	b.n	801ade0 <rshift+0x68>
 801adb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801adb8:	f1c1 0820 	rsb	r8, r1, #32
 801adbc:	40cf      	lsrs	r7, r1
 801adbe:	f105 0e04 	add.w	lr, r5, #4
 801adc2:	46a1      	mov	r9, r4
 801adc4:	4576      	cmp	r6, lr
 801adc6:	46f4      	mov	ip, lr
 801adc8:	d815      	bhi.n	801adf6 <rshift+0x7e>
 801adca:	1a9b      	subs	r3, r3, r2
 801adcc:	009a      	lsls	r2, r3, #2
 801adce:	3a04      	subs	r2, #4
 801add0:	3501      	adds	r5, #1
 801add2:	42ae      	cmp	r6, r5
 801add4:	bf38      	it	cc
 801add6:	2200      	movcc	r2, #0
 801add8:	18a3      	adds	r3, r4, r2
 801adda:	50a7      	str	r7, [r4, r2]
 801addc:	b107      	cbz	r7, 801ade0 <rshift+0x68>
 801adde:	3304      	adds	r3, #4
 801ade0:	1b1a      	subs	r2, r3, r4
 801ade2:	42a3      	cmp	r3, r4
 801ade4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ade8:	bf08      	it	eq
 801adea:	2300      	moveq	r3, #0
 801adec:	6102      	str	r2, [r0, #16]
 801adee:	bf08      	it	eq
 801adf0:	6143      	streq	r3, [r0, #20]
 801adf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801adf6:	f8dc c000 	ldr.w	ip, [ip]
 801adfa:	fa0c fc08 	lsl.w	ip, ip, r8
 801adfe:	ea4c 0707 	orr.w	r7, ip, r7
 801ae02:	f849 7b04 	str.w	r7, [r9], #4
 801ae06:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ae0a:	40cf      	lsrs	r7, r1
 801ae0c:	e7da      	b.n	801adc4 <rshift+0x4c>
 801ae0e:	f851 cb04 	ldr.w	ip, [r1], #4
 801ae12:	f847 cf04 	str.w	ip, [r7, #4]!
 801ae16:	e7c3      	b.n	801ada0 <rshift+0x28>
 801ae18:	4623      	mov	r3, r4
 801ae1a:	e7e1      	b.n	801ade0 <rshift+0x68>

0801ae1c <__hexdig_fun>:
 801ae1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ae20:	2b09      	cmp	r3, #9
 801ae22:	d802      	bhi.n	801ae2a <__hexdig_fun+0xe>
 801ae24:	3820      	subs	r0, #32
 801ae26:	b2c0      	uxtb	r0, r0
 801ae28:	4770      	bx	lr
 801ae2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801ae2e:	2b05      	cmp	r3, #5
 801ae30:	d801      	bhi.n	801ae36 <__hexdig_fun+0x1a>
 801ae32:	3847      	subs	r0, #71	; 0x47
 801ae34:	e7f7      	b.n	801ae26 <__hexdig_fun+0xa>
 801ae36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801ae3a:	2b05      	cmp	r3, #5
 801ae3c:	d801      	bhi.n	801ae42 <__hexdig_fun+0x26>
 801ae3e:	3827      	subs	r0, #39	; 0x27
 801ae40:	e7f1      	b.n	801ae26 <__hexdig_fun+0xa>
 801ae42:	2000      	movs	r0, #0
 801ae44:	4770      	bx	lr
	...

0801ae48 <__gethex>:
 801ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae4c:	ed2d 8b02 	vpush	{d8}
 801ae50:	b089      	sub	sp, #36	; 0x24
 801ae52:	ee08 0a10 	vmov	s16, r0
 801ae56:	9304      	str	r3, [sp, #16]
 801ae58:	4bbc      	ldr	r3, [pc, #752]	; (801b14c <__gethex+0x304>)
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	9301      	str	r3, [sp, #4]
 801ae5e:	4618      	mov	r0, r3
 801ae60:	468b      	mov	fp, r1
 801ae62:	4690      	mov	r8, r2
 801ae64:	f7e5 fa24 	bl	80002b0 <strlen>
 801ae68:	9b01      	ldr	r3, [sp, #4]
 801ae6a:	f8db 2000 	ldr.w	r2, [fp]
 801ae6e:	4403      	add	r3, r0
 801ae70:	4682      	mov	sl, r0
 801ae72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801ae76:	9305      	str	r3, [sp, #20]
 801ae78:	1c93      	adds	r3, r2, #2
 801ae7a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801ae7e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801ae82:	32fe      	adds	r2, #254	; 0xfe
 801ae84:	18d1      	adds	r1, r2, r3
 801ae86:	461f      	mov	r7, r3
 801ae88:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ae8c:	9100      	str	r1, [sp, #0]
 801ae8e:	2830      	cmp	r0, #48	; 0x30
 801ae90:	d0f8      	beq.n	801ae84 <__gethex+0x3c>
 801ae92:	f7ff ffc3 	bl	801ae1c <__hexdig_fun>
 801ae96:	4604      	mov	r4, r0
 801ae98:	2800      	cmp	r0, #0
 801ae9a:	d13a      	bne.n	801af12 <__gethex+0xca>
 801ae9c:	9901      	ldr	r1, [sp, #4]
 801ae9e:	4652      	mov	r2, sl
 801aea0:	4638      	mov	r0, r7
 801aea2:	f000 ffcf 	bl	801be44 <strncmp>
 801aea6:	4605      	mov	r5, r0
 801aea8:	2800      	cmp	r0, #0
 801aeaa:	d168      	bne.n	801af7e <__gethex+0x136>
 801aeac:	f817 000a 	ldrb.w	r0, [r7, sl]
 801aeb0:	eb07 060a 	add.w	r6, r7, sl
 801aeb4:	f7ff ffb2 	bl	801ae1c <__hexdig_fun>
 801aeb8:	2800      	cmp	r0, #0
 801aeba:	d062      	beq.n	801af82 <__gethex+0x13a>
 801aebc:	4633      	mov	r3, r6
 801aebe:	7818      	ldrb	r0, [r3, #0]
 801aec0:	2830      	cmp	r0, #48	; 0x30
 801aec2:	461f      	mov	r7, r3
 801aec4:	f103 0301 	add.w	r3, r3, #1
 801aec8:	d0f9      	beq.n	801aebe <__gethex+0x76>
 801aeca:	f7ff ffa7 	bl	801ae1c <__hexdig_fun>
 801aece:	2301      	movs	r3, #1
 801aed0:	fab0 f480 	clz	r4, r0
 801aed4:	0964      	lsrs	r4, r4, #5
 801aed6:	4635      	mov	r5, r6
 801aed8:	9300      	str	r3, [sp, #0]
 801aeda:	463a      	mov	r2, r7
 801aedc:	4616      	mov	r6, r2
 801aede:	3201      	adds	r2, #1
 801aee0:	7830      	ldrb	r0, [r6, #0]
 801aee2:	f7ff ff9b 	bl	801ae1c <__hexdig_fun>
 801aee6:	2800      	cmp	r0, #0
 801aee8:	d1f8      	bne.n	801aedc <__gethex+0x94>
 801aeea:	9901      	ldr	r1, [sp, #4]
 801aeec:	4652      	mov	r2, sl
 801aeee:	4630      	mov	r0, r6
 801aef0:	f000 ffa8 	bl	801be44 <strncmp>
 801aef4:	b980      	cbnz	r0, 801af18 <__gethex+0xd0>
 801aef6:	b94d      	cbnz	r5, 801af0c <__gethex+0xc4>
 801aef8:	eb06 050a 	add.w	r5, r6, sl
 801aefc:	462a      	mov	r2, r5
 801aefe:	4616      	mov	r6, r2
 801af00:	3201      	adds	r2, #1
 801af02:	7830      	ldrb	r0, [r6, #0]
 801af04:	f7ff ff8a 	bl	801ae1c <__hexdig_fun>
 801af08:	2800      	cmp	r0, #0
 801af0a:	d1f8      	bne.n	801aefe <__gethex+0xb6>
 801af0c:	1bad      	subs	r5, r5, r6
 801af0e:	00ad      	lsls	r5, r5, #2
 801af10:	e004      	b.n	801af1c <__gethex+0xd4>
 801af12:	2400      	movs	r4, #0
 801af14:	4625      	mov	r5, r4
 801af16:	e7e0      	b.n	801aeda <__gethex+0x92>
 801af18:	2d00      	cmp	r5, #0
 801af1a:	d1f7      	bne.n	801af0c <__gethex+0xc4>
 801af1c:	7833      	ldrb	r3, [r6, #0]
 801af1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801af22:	2b50      	cmp	r3, #80	; 0x50
 801af24:	d13b      	bne.n	801af9e <__gethex+0x156>
 801af26:	7873      	ldrb	r3, [r6, #1]
 801af28:	2b2b      	cmp	r3, #43	; 0x2b
 801af2a:	d02c      	beq.n	801af86 <__gethex+0x13e>
 801af2c:	2b2d      	cmp	r3, #45	; 0x2d
 801af2e:	d02e      	beq.n	801af8e <__gethex+0x146>
 801af30:	1c71      	adds	r1, r6, #1
 801af32:	f04f 0900 	mov.w	r9, #0
 801af36:	7808      	ldrb	r0, [r1, #0]
 801af38:	f7ff ff70 	bl	801ae1c <__hexdig_fun>
 801af3c:	1e43      	subs	r3, r0, #1
 801af3e:	b2db      	uxtb	r3, r3
 801af40:	2b18      	cmp	r3, #24
 801af42:	d82c      	bhi.n	801af9e <__gethex+0x156>
 801af44:	f1a0 0210 	sub.w	r2, r0, #16
 801af48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801af4c:	f7ff ff66 	bl	801ae1c <__hexdig_fun>
 801af50:	1e43      	subs	r3, r0, #1
 801af52:	b2db      	uxtb	r3, r3
 801af54:	2b18      	cmp	r3, #24
 801af56:	d91d      	bls.n	801af94 <__gethex+0x14c>
 801af58:	f1b9 0f00 	cmp.w	r9, #0
 801af5c:	d000      	beq.n	801af60 <__gethex+0x118>
 801af5e:	4252      	negs	r2, r2
 801af60:	4415      	add	r5, r2
 801af62:	f8cb 1000 	str.w	r1, [fp]
 801af66:	b1e4      	cbz	r4, 801afa2 <__gethex+0x15a>
 801af68:	9b00      	ldr	r3, [sp, #0]
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	bf14      	ite	ne
 801af6e:	2700      	movne	r7, #0
 801af70:	2706      	moveq	r7, #6
 801af72:	4638      	mov	r0, r7
 801af74:	b009      	add	sp, #36	; 0x24
 801af76:	ecbd 8b02 	vpop	{d8}
 801af7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af7e:	463e      	mov	r6, r7
 801af80:	4625      	mov	r5, r4
 801af82:	2401      	movs	r4, #1
 801af84:	e7ca      	b.n	801af1c <__gethex+0xd4>
 801af86:	f04f 0900 	mov.w	r9, #0
 801af8a:	1cb1      	adds	r1, r6, #2
 801af8c:	e7d3      	b.n	801af36 <__gethex+0xee>
 801af8e:	f04f 0901 	mov.w	r9, #1
 801af92:	e7fa      	b.n	801af8a <__gethex+0x142>
 801af94:	230a      	movs	r3, #10
 801af96:	fb03 0202 	mla	r2, r3, r2, r0
 801af9a:	3a10      	subs	r2, #16
 801af9c:	e7d4      	b.n	801af48 <__gethex+0x100>
 801af9e:	4631      	mov	r1, r6
 801afa0:	e7df      	b.n	801af62 <__gethex+0x11a>
 801afa2:	1bf3      	subs	r3, r6, r7
 801afa4:	3b01      	subs	r3, #1
 801afa6:	4621      	mov	r1, r4
 801afa8:	2b07      	cmp	r3, #7
 801afaa:	dc0b      	bgt.n	801afc4 <__gethex+0x17c>
 801afac:	ee18 0a10 	vmov	r0, s16
 801afb0:	f000 fa70 	bl	801b494 <_Balloc>
 801afb4:	4604      	mov	r4, r0
 801afb6:	b940      	cbnz	r0, 801afca <__gethex+0x182>
 801afb8:	4b65      	ldr	r3, [pc, #404]	; (801b150 <__gethex+0x308>)
 801afba:	4602      	mov	r2, r0
 801afbc:	21de      	movs	r1, #222	; 0xde
 801afbe:	4865      	ldr	r0, [pc, #404]	; (801b154 <__gethex+0x30c>)
 801afc0:	f000 ff60 	bl	801be84 <__assert_func>
 801afc4:	3101      	adds	r1, #1
 801afc6:	105b      	asrs	r3, r3, #1
 801afc8:	e7ee      	b.n	801afa8 <__gethex+0x160>
 801afca:	f100 0914 	add.w	r9, r0, #20
 801afce:	f04f 0b00 	mov.w	fp, #0
 801afd2:	f1ca 0301 	rsb	r3, sl, #1
 801afd6:	f8cd 9008 	str.w	r9, [sp, #8]
 801afda:	f8cd b000 	str.w	fp, [sp]
 801afde:	9306      	str	r3, [sp, #24]
 801afe0:	42b7      	cmp	r7, r6
 801afe2:	d340      	bcc.n	801b066 <__gethex+0x21e>
 801afe4:	9802      	ldr	r0, [sp, #8]
 801afe6:	9b00      	ldr	r3, [sp, #0]
 801afe8:	f840 3b04 	str.w	r3, [r0], #4
 801afec:	eba0 0009 	sub.w	r0, r0, r9
 801aff0:	1080      	asrs	r0, r0, #2
 801aff2:	0146      	lsls	r6, r0, #5
 801aff4:	6120      	str	r0, [r4, #16]
 801aff6:	4618      	mov	r0, r3
 801aff8:	f000 fb42 	bl	801b680 <__hi0bits>
 801affc:	1a30      	subs	r0, r6, r0
 801affe:	f8d8 6000 	ldr.w	r6, [r8]
 801b002:	42b0      	cmp	r0, r6
 801b004:	dd63      	ble.n	801b0ce <__gethex+0x286>
 801b006:	1b87      	subs	r7, r0, r6
 801b008:	4639      	mov	r1, r7
 801b00a:	4620      	mov	r0, r4
 801b00c:	f000 fedc 	bl	801bdc8 <__any_on>
 801b010:	4682      	mov	sl, r0
 801b012:	b1a8      	cbz	r0, 801b040 <__gethex+0x1f8>
 801b014:	1e7b      	subs	r3, r7, #1
 801b016:	1159      	asrs	r1, r3, #5
 801b018:	f003 021f 	and.w	r2, r3, #31
 801b01c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801b020:	f04f 0a01 	mov.w	sl, #1
 801b024:	fa0a f202 	lsl.w	r2, sl, r2
 801b028:	420a      	tst	r2, r1
 801b02a:	d009      	beq.n	801b040 <__gethex+0x1f8>
 801b02c:	4553      	cmp	r3, sl
 801b02e:	dd05      	ble.n	801b03c <__gethex+0x1f4>
 801b030:	1eb9      	subs	r1, r7, #2
 801b032:	4620      	mov	r0, r4
 801b034:	f000 fec8 	bl	801bdc8 <__any_on>
 801b038:	2800      	cmp	r0, #0
 801b03a:	d145      	bne.n	801b0c8 <__gethex+0x280>
 801b03c:	f04f 0a02 	mov.w	sl, #2
 801b040:	4639      	mov	r1, r7
 801b042:	4620      	mov	r0, r4
 801b044:	f7ff fe98 	bl	801ad78 <rshift>
 801b048:	443d      	add	r5, r7
 801b04a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b04e:	42ab      	cmp	r3, r5
 801b050:	da4c      	bge.n	801b0ec <__gethex+0x2a4>
 801b052:	ee18 0a10 	vmov	r0, s16
 801b056:	4621      	mov	r1, r4
 801b058:	f000 fa5c 	bl	801b514 <_Bfree>
 801b05c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b05e:	2300      	movs	r3, #0
 801b060:	6013      	str	r3, [r2, #0]
 801b062:	27a3      	movs	r7, #163	; 0xa3
 801b064:	e785      	b.n	801af72 <__gethex+0x12a>
 801b066:	1e73      	subs	r3, r6, #1
 801b068:	9a05      	ldr	r2, [sp, #20]
 801b06a:	9303      	str	r3, [sp, #12]
 801b06c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b070:	4293      	cmp	r3, r2
 801b072:	d019      	beq.n	801b0a8 <__gethex+0x260>
 801b074:	f1bb 0f20 	cmp.w	fp, #32
 801b078:	d107      	bne.n	801b08a <__gethex+0x242>
 801b07a:	9b02      	ldr	r3, [sp, #8]
 801b07c:	9a00      	ldr	r2, [sp, #0]
 801b07e:	f843 2b04 	str.w	r2, [r3], #4
 801b082:	9302      	str	r3, [sp, #8]
 801b084:	2300      	movs	r3, #0
 801b086:	9300      	str	r3, [sp, #0]
 801b088:	469b      	mov	fp, r3
 801b08a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801b08e:	f7ff fec5 	bl	801ae1c <__hexdig_fun>
 801b092:	9b00      	ldr	r3, [sp, #0]
 801b094:	f000 000f 	and.w	r0, r0, #15
 801b098:	fa00 f00b 	lsl.w	r0, r0, fp
 801b09c:	4303      	orrs	r3, r0
 801b09e:	9300      	str	r3, [sp, #0]
 801b0a0:	f10b 0b04 	add.w	fp, fp, #4
 801b0a4:	9b03      	ldr	r3, [sp, #12]
 801b0a6:	e00d      	b.n	801b0c4 <__gethex+0x27c>
 801b0a8:	9b03      	ldr	r3, [sp, #12]
 801b0aa:	9a06      	ldr	r2, [sp, #24]
 801b0ac:	4413      	add	r3, r2
 801b0ae:	42bb      	cmp	r3, r7
 801b0b0:	d3e0      	bcc.n	801b074 <__gethex+0x22c>
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	9901      	ldr	r1, [sp, #4]
 801b0b6:	9307      	str	r3, [sp, #28]
 801b0b8:	4652      	mov	r2, sl
 801b0ba:	f000 fec3 	bl	801be44 <strncmp>
 801b0be:	9b07      	ldr	r3, [sp, #28]
 801b0c0:	2800      	cmp	r0, #0
 801b0c2:	d1d7      	bne.n	801b074 <__gethex+0x22c>
 801b0c4:	461e      	mov	r6, r3
 801b0c6:	e78b      	b.n	801afe0 <__gethex+0x198>
 801b0c8:	f04f 0a03 	mov.w	sl, #3
 801b0cc:	e7b8      	b.n	801b040 <__gethex+0x1f8>
 801b0ce:	da0a      	bge.n	801b0e6 <__gethex+0x29e>
 801b0d0:	1a37      	subs	r7, r6, r0
 801b0d2:	4621      	mov	r1, r4
 801b0d4:	ee18 0a10 	vmov	r0, s16
 801b0d8:	463a      	mov	r2, r7
 801b0da:	f000 fc37 	bl	801b94c <__lshift>
 801b0de:	1bed      	subs	r5, r5, r7
 801b0e0:	4604      	mov	r4, r0
 801b0e2:	f100 0914 	add.w	r9, r0, #20
 801b0e6:	f04f 0a00 	mov.w	sl, #0
 801b0ea:	e7ae      	b.n	801b04a <__gethex+0x202>
 801b0ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b0f0:	42a8      	cmp	r0, r5
 801b0f2:	dd72      	ble.n	801b1da <__gethex+0x392>
 801b0f4:	1b45      	subs	r5, r0, r5
 801b0f6:	42ae      	cmp	r6, r5
 801b0f8:	dc36      	bgt.n	801b168 <__gethex+0x320>
 801b0fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b0fe:	2b02      	cmp	r3, #2
 801b100:	d02a      	beq.n	801b158 <__gethex+0x310>
 801b102:	2b03      	cmp	r3, #3
 801b104:	d02c      	beq.n	801b160 <__gethex+0x318>
 801b106:	2b01      	cmp	r3, #1
 801b108:	d115      	bne.n	801b136 <__gethex+0x2ee>
 801b10a:	42ae      	cmp	r6, r5
 801b10c:	d113      	bne.n	801b136 <__gethex+0x2ee>
 801b10e:	2e01      	cmp	r6, #1
 801b110:	d10b      	bne.n	801b12a <__gethex+0x2e2>
 801b112:	9a04      	ldr	r2, [sp, #16]
 801b114:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b118:	6013      	str	r3, [r2, #0]
 801b11a:	2301      	movs	r3, #1
 801b11c:	6123      	str	r3, [r4, #16]
 801b11e:	f8c9 3000 	str.w	r3, [r9]
 801b122:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b124:	2762      	movs	r7, #98	; 0x62
 801b126:	601c      	str	r4, [r3, #0]
 801b128:	e723      	b.n	801af72 <__gethex+0x12a>
 801b12a:	1e71      	subs	r1, r6, #1
 801b12c:	4620      	mov	r0, r4
 801b12e:	f000 fe4b 	bl	801bdc8 <__any_on>
 801b132:	2800      	cmp	r0, #0
 801b134:	d1ed      	bne.n	801b112 <__gethex+0x2ca>
 801b136:	ee18 0a10 	vmov	r0, s16
 801b13a:	4621      	mov	r1, r4
 801b13c:	f000 f9ea 	bl	801b514 <_Bfree>
 801b140:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b142:	2300      	movs	r3, #0
 801b144:	6013      	str	r3, [r2, #0]
 801b146:	2750      	movs	r7, #80	; 0x50
 801b148:	e713      	b.n	801af72 <__gethex+0x12a>
 801b14a:	bf00      	nop
 801b14c:	0801d4e0 	.word	0x0801d4e0
 801b150:	0801d466 	.word	0x0801d466
 801b154:	0801d477 	.word	0x0801d477
 801b158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d1eb      	bne.n	801b136 <__gethex+0x2ee>
 801b15e:	e7d8      	b.n	801b112 <__gethex+0x2ca>
 801b160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b162:	2b00      	cmp	r3, #0
 801b164:	d1d5      	bne.n	801b112 <__gethex+0x2ca>
 801b166:	e7e6      	b.n	801b136 <__gethex+0x2ee>
 801b168:	1e6f      	subs	r7, r5, #1
 801b16a:	f1ba 0f00 	cmp.w	sl, #0
 801b16e:	d131      	bne.n	801b1d4 <__gethex+0x38c>
 801b170:	b127      	cbz	r7, 801b17c <__gethex+0x334>
 801b172:	4639      	mov	r1, r7
 801b174:	4620      	mov	r0, r4
 801b176:	f000 fe27 	bl	801bdc8 <__any_on>
 801b17a:	4682      	mov	sl, r0
 801b17c:	117b      	asrs	r3, r7, #5
 801b17e:	2101      	movs	r1, #1
 801b180:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801b184:	f007 071f 	and.w	r7, r7, #31
 801b188:	fa01 f707 	lsl.w	r7, r1, r7
 801b18c:	421f      	tst	r7, r3
 801b18e:	4629      	mov	r1, r5
 801b190:	4620      	mov	r0, r4
 801b192:	bf18      	it	ne
 801b194:	f04a 0a02 	orrne.w	sl, sl, #2
 801b198:	1b76      	subs	r6, r6, r5
 801b19a:	f7ff fded 	bl	801ad78 <rshift>
 801b19e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b1a2:	2702      	movs	r7, #2
 801b1a4:	f1ba 0f00 	cmp.w	sl, #0
 801b1a8:	d048      	beq.n	801b23c <__gethex+0x3f4>
 801b1aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b1ae:	2b02      	cmp	r3, #2
 801b1b0:	d015      	beq.n	801b1de <__gethex+0x396>
 801b1b2:	2b03      	cmp	r3, #3
 801b1b4:	d017      	beq.n	801b1e6 <__gethex+0x39e>
 801b1b6:	2b01      	cmp	r3, #1
 801b1b8:	d109      	bne.n	801b1ce <__gethex+0x386>
 801b1ba:	f01a 0f02 	tst.w	sl, #2
 801b1be:	d006      	beq.n	801b1ce <__gethex+0x386>
 801b1c0:	f8d9 0000 	ldr.w	r0, [r9]
 801b1c4:	ea4a 0a00 	orr.w	sl, sl, r0
 801b1c8:	f01a 0f01 	tst.w	sl, #1
 801b1cc:	d10e      	bne.n	801b1ec <__gethex+0x3a4>
 801b1ce:	f047 0710 	orr.w	r7, r7, #16
 801b1d2:	e033      	b.n	801b23c <__gethex+0x3f4>
 801b1d4:	f04f 0a01 	mov.w	sl, #1
 801b1d8:	e7d0      	b.n	801b17c <__gethex+0x334>
 801b1da:	2701      	movs	r7, #1
 801b1dc:	e7e2      	b.n	801b1a4 <__gethex+0x35c>
 801b1de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b1e0:	f1c3 0301 	rsb	r3, r3, #1
 801b1e4:	9315      	str	r3, [sp, #84]	; 0x54
 801b1e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d0f0      	beq.n	801b1ce <__gethex+0x386>
 801b1ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b1f0:	f104 0314 	add.w	r3, r4, #20
 801b1f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b1f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b1fc:	f04f 0c00 	mov.w	ip, #0
 801b200:	4618      	mov	r0, r3
 801b202:	f853 2b04 	ldr.w	r2, [r3], #4
 801b206:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b20a:	d01c      	beq.n	801b246 <__gethex+0x3fe>
 801b20c:	3201      	adds	r2, #1
 801b20e:	6002      	str	r2, [r0, #0]
 801b210:	2f02      	cmp	r7, #2
 801b212:	f104 0314 	add.w	r3, r4, #20
 801b216:	d13f      	bne.n	801b298 <__gethex+0x450>
 801b218:	f8d8 2000 	ldr.w	r2, [r8]
 801b21c:	3a01      	subs	r2, #1
 801b21e:	42b2      	cmp	r2, r6
 801b220:	d10a      	bne.n	801b238 <__gethex+0x3f0>
 801b222:	1171      	asrs	r1, r6, #5
 801b224:	2201      	movs	r2, #1
 801b226:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b22a:	f006 061f 	and.w	r6, r6, #31
 801b22e:	fa02 f606 	lsl.w	r6, r2, r6
 801b232:	421e      	tst	r6, r3
 801b234:	bf18      	it	ne
 801b236:	4617      	movne	r7, r2
 801b238:	f047 0720 	orr.w	r7, r7, #32
 801b23c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b23e:	601c      	str	r4, [r3, #0]
 801b240:	9b04      	ldr	r3, [sp, #16]
 801b242:	601d      	str	r5, [r3, #0]
 801b244:	e695      	b.n	801af72 <__gethex+0x12a>
 801b246:	4299      	cmp	r1, r3
 801b248:	f843 cc04 	str.w	ip, [r3, #-4]
 801b24c:	d8d8      	bhi.n	801b200 <__gethex+0x3b8>
 801b24e:	68a3      	ldr	r3, [r4, #8]
 801b250:	459b      	cmp	fp, r3
 801b252:	db19      	blt.n	801b288 <__gethex+0x440>
 801b254:	6861      	ldr	r1, [r4, #4]
 801b256:	ee18 0a10 	vmov	r0, s16
 801b25a:	3101      	adds	r1, #1
 801b25c:	f000 f91a 	bl	801b494 <_Balloc>
 801b260:	4681      	mov	r9, r0
 801b262:	b918      	cbnz	r0, 801b26c <__gethex+0x424>
 801b264:	4b1a      	ldr	r3, [pc, #104]	; (801b2d0 <__gethex+0x488>)
 801b266:	4602      	mov	r2, r0
 801b268:	2184      	movs	r1, #132	; 0x84
 801b26a:	e6a8      	b.n	801afbe <__gethex+0x176>
 801b26c:	6922      	ldr	r2, [r4, #16]
 801b26e:	3202      	adds	r2, #2
 801b270:	f104 010c 	add.w	r1, r4, #12
 801b274:	0092      	lsls	r2, r2, #2
 801b276:	300c      	adds	r0, #12
 801b278:	f7fe fcfe 	bl	8019c78 <memcpy>
 801b27c:	4621      	mov	r1, r4
 801b27e:	ee18 0a10 	vmov	r0, s16
 801b282:	f000 f947 	bl	801b514 <_Bfree>
 801b286:	464c      	mov	r4, r9
 801b288:	6923      	ldr	r3, [r4, #16]
 801b28a:	1c5a      	adds	r2, r3, #1
 801b28c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b290:	6122      	str	r2, [r4, #16]
 801b292:	2201      	movs	r2, #1
 801b294:	615a      	str	r2, [r3, #20]
 801b296:	e7bb      	b.n	801b210 <__gethex+0x3c8>
 801b298:	6922      	ldr	r2, [r4, #16]
 801b29a:	455a      	cmp	r2, fp
 801b29c:	dd0b      	ble.n	801b2b6 <__gethex+0x46e>
 801b29e:	2101      	movs	r1, #1
 801b2a0:	4620      	mov	r0, r4
 801b2a2:	f7ff fd69 	bl	801ad78 <rshift>
 801b2a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b2aa:	3501      	adds	r5, #1
 801b2ac:	42ab      	cmp	r3, r5
 801b2ae:	f6ff aed0 	blt.w	801b052 <__gethex+0x20a>
 801b2b2:	2701      	movs	r7, #1
 801b2b4:	e7c0      	b.n	801b238 <__gethex+0x3f0>
 801b2b6:	f016 061f 	ands.w	r6, r6, #31
 801b2ba:	d0fa      	beq.n	801b2b2 <__gethex+0x46a>
 801b2bc:	449a      	add	sl, r3
 801b2be:	f1c6 0620 	rsb	r6, r6, #32
 801b2c2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801b2c6:	f000 f9db 	bl	801b680 <__hi0bits>
 801b2ca:	42b0      	cmp	r0, r6
 801b2cc:	dbe7      	blt.n	801b29e <__gethex+0x456>
 801b2ce:	e7f0      	b.n	801b2b2 <__gethex+0x46a>
 801b2d0:	0801d466 	.word	0x0801d466

0801b2d4 <L_shift>:
 801b2d4:	f1c2 0208 	rsb	r2, r2, #8
 801b2d8:	0092      	lsls	r2, r2, #2
 801b2da:	b570      	push	{r4, r5, r6, lr}
 801b2dc:	f1c2 0620 	rsb	r6, r2, #32
 801b2e0:	6843      	ldr	r3, [r0, #4]
 801b2e2:	6804      	ldr	r4, [r0, #0]
 801b2e4:	fa03 f506 	lsl.w	r5, r3, r6
 801b2e8:	432c      	orrs	r4, r5
 801b2ea:	40d3      	lsrs	r3, r2
 801b2ec:	6004      	str	r4, [r0, #0]
 801b2ee:	f840 3f04 	str.w	r3, [r0, #4]!
 801b2f2:	4288      	cmp	r0, r1
 801b2f4:	d3f4      	bcc.n	801b2e0 <L_shift+0xc>
 801b2f6:	bd70      	pop	{r4, r5, r6, pc}

0801b2f8 <__match>:
 801b2f8:	b530      	push	{r4, r5, lr}
 801b2fa:	6803      	ldr	r3, [r0, #0]
 801b2fc:	3301      	adds	r3, #1
 801b2fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b302:	b914      	cbnz	r4, 801b30a <__match+0x12>
 801b304:	6003      	str	r3, [r0, #0]
 801b306:	2001      	movs	r0, #1
 801b308:	bd30      	pop	{r4, r5, pc}
 801b30a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b30e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801b312:	2d19      	cmp	r5, #25
 801b314:	bf98      	it	ls
 801b316:	3220      	addls	r2, #32
 801b318:	42a2      	cmp	r2, r4
 801b31a:	d0f0      	beq.n	801b2fe <__match+0x6>
 801b31c:	2000      	movs	r0, #0
 801b31e:	e7f3      	b.n	801b308 <__match+0x10>

0801b320 <__hexnan>:
 801b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b324:	680b      	ldr	r3, [r1, #0]
 801b326:	6801      	ldr	r1, [r0, #0]
 801b328:	115e      	asrs	r6, r3, #5
 801b32a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b32e:	f013 031f 	ands.w	r3, r3, #31
 801b332:	b087      	sub	sp, #28
 801b334:	bf18      	it	ne
 801b336:	3604      	addne	r6, #4
 801b338:	2500      	movs	r5, #0
 801b33a:	1f37      	subs	r7, r6, #4
 801b33c:	4682      	mov	sl, r0
 801b33e:	4690      	mov	r8, r2
 801b340:	9301      	str	r3, [sp, #4]
 801b342:	f846 5c04 	str.w	r5, [r6, #-4]
 801b346:	46b9      	mov	r9, r7
 801b348:	463c      	mov	r4, r7
 801b34a:	9502      	str	r5, [sp, #8]
 801b34c:	46ab      	mov	fp, r5
 801b34e:	784a      	ldrb	r2, [r1, #1]
 801b350:	1c4b      	adds	r3, r1, #1
 801b352:	9303      	str	r3, [sp, #12]
 801b354:	b342      	cbz	r2, 801b3a8 <__hexnan+0x88>
 801b356:	4610      	mov	r0, r2
 801b358:	9105      	str	r1, [sp, #20]
 801b35a:	9204      	str	r2, [sp, #16]
 801b35c:	f7ff fd5e 	bl	801ae1c <__hexdig_fun>
 801b360:	2800      	cmp	r0, #0
 801b362:	d14f      	bne.n	801b404 <__hexnan+0xe4>
 801b364:	9a04      	ldr	r2, [sp, #16]
 801b366:	9905      	ldr	r1, [sp, #20]
 801b368:	2a20      	cmp	r2, #32
 801b36a:	d818      	bhi.n	801b39e <__hexnan+0x7e>
 801b36c:	9b02      	ldr	r3, [sp, #8]
 801b36e:	459b      	cmp	fp, r3
 801b370:	dd13      	ble.n	801b39a <__hexnan+0x7a>
 801b372:	454c      	cmp	r4, r9
 801b374:	d206      	bcs.n	801b384 <__hexnan+0x64>
 801b376:	2d07      	cmp	r5, #7
 801b378:	dc04      	bgt.n	801b384 <__hexnan+0x64>
 801b37a:	462a      	mov	r2, r5
 801b37c:	4649      	mov	r1, r9
 801b37e:	4620      	mov	r0, r4
 801b380:	f7ff ffa8 	bl	801b2d4 <L_shift>
 801b384:	4544      	cmp	r4, r8
 801b386:	d950      	bls.n	801b42a <__hexnan+0x10a>
 801b388:	2300      	movs	r3, #0
 801b38a:	f1a4 0904 	sub.w	r9, r4, #4
 801b38e:	f844 3c04 	str.w	r3, [r4, #-4]
 801b392:	f8cd b008 	str.w	fp, [sp, #8]
 801b396:	464c      	mov	r4, r9
 801b398:	461d      	mov	r5, r3
 801b39a:	9903      	ldr	r1, [sp, #12]
 801b39c:	e7d7      	b.n	801b34e <__hexnan+0x2e>
 801b39e:	2a29      	cmp	r2, #41	; 0x29
 801b3a0:	d156      	bne.n	801b450 <__hexnan+0x130>
 801b3a2:	3102      	adds	r1, #2
 801b3a4:	f8ca 1000 	str.w	r1, [sl]
 801b3a8:	f1bb 0f00 	cmp.w	fp, #0
 801b3ac:	d050      	beq.n	801b450 <__hexnan+0x130>
 801b3ae:	454c      	cmp	r4, r9
 801b3b0:	d206      	bcs.n	801b3c0 <__hexnan+0xa0>
 801b3b2:	2d07      	cmp	r5, #7
 801b3b4:	dc04      	bgt.n	801b3c0 <__hexnan+0xa0>
 801b3b6:	462a      	mov	r2, r5
 801b3b8:	4649      	mov	r1, r9
 801b3ba:	4620      	mov	r0, r4
 801b3bc:	f7ff ff8a 	bl	801b2d4 <L_shift>
 801b3c0:	4544      	cmp	r4, r8
 801b3c2:	d934      	bls.n	801b42e <__hexnan+0x10e>
 801b3c4:	f1a8 0204 	sub.w	r2, r8, #4
 801b3c8:	4623      	mov	r3, r4
 801b3ca:	f853 1b04 	ldr.w	r1, [r3], #4
 801b3ce:	f842 1f04 	str.w	r1, [r2, #4]!
 801b3d2:	429f      	cmp	r7, r3
 801b3d4:	d2f9      	bcs.n	801b3ca <__hexnan+0xaa>
 801b3d6:	1b3b      	subs	r3, r7, r4
 801b3d8:	f023 0303 	bic.w	r3, r3, #3
 801b3dc:	3304      	adds	r3, #4
 801b3de:	3401      	adds	r4, #1
 801b3e0:	3e03      	subs	r6, #3
 801b3e2:	42b4      	cmp	r4, r6
 801b3e4:	bf88      	it	hi
 801b3e6:	2304      	movhi	r3, #4
 801b3e8:	4443      	add	r3, r8
 801b3ea:	2200      	movs	r2, #0
 801b3ec:	f843 2b04 	str.w	r2, [r3], #4
 801b3f0:	429f      	cmp	r7, r3
 801b3f2:	d2fb      	bcs.n	801b3ec <__hexnan+0xcc>
 801b3f4:	683b      	ldr	r3, [r7, #0]
 801b3f6:	b91b      	cbnz	r3, 801b400 <__hexnan+0xe0>
 801b3f8:	4547      	cmp	r7, r8
 801b3fa:	d127      	bne.n	801b44c <__hexnan+0x12c>
 801b3fc:	2301      	movs	r3, #1
 801b3fe:	603b      	str	r3, [r7, #0]
 801b400:	2005      	movs	r0, #5
 801b402:	e026      	b.n	801b452 <__hexnan+0x132>
 801b404:	3501      	adds	r5, #1
 801b406:	2d08      	cmp	r5, #8
 801b408:	f10b 0b01 	add.w	fp, fp, #1
 801b40c:	dd06      	ble.n	801b41c <__hexnan+0xfc>
 801b40e:	4544      	cmp	r4, r8
 801b410:	d9c3      	bls.n	801b39a <__hexnan+0x7a>
 801b412:	2300      	movs	r3, #0
 801b414:	f844 3c04 	str.w	r3, [r4, #-4]
 801b418:	2501      	movs	r5, #1
 801b41a:	3c04      	subs	r4, #4
 801b41c:	6822      	ldr	r2, [r4, #0]
 801b41e:	f000 000f 	and.w	r0, r0, #15
 801b422:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801b426:	6022      	str	r2, [r4, #0]
 801b428:	e7b7      	b.n	801b39a <__hexnan+0x7a>
 801b42a:	2508      	movs	r5, #8
 801b42c:	e7b5      	b.n	801b39a <__hexnan+0x7a>
 801b42e:	9b01      	ldr	r3, [sp, #4]
 801b430:	2b00      	cmp	r3, #0
 801b432:	d0df      	beq.n	801b3f4 <__hexnan+0xd4>
 801b434:	f04f 32ff 	mov.w	r2, #4294967295
 801b438:	f1c3 0320 	rsb	r3, r3, #32
 801b43c:	fa22 f303 	lsr.w	r3, r2, r3
 801b440:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b444:	401a      	ands	r2, r3
 801b446:	f846 2c04 	str.w	r2, [r6, #-4]
 801b44a:	e7d3      	b.n	801b3f4 <__hexnan+0xd4>
 801b44c:	3f04      	subs	r7, #4
 801b44e:	e7d1      	b.n	801b3f4 <__hexnan+0xd4>
 801b450:	2004      	movs	r0, #4
 801b452:	b007      	add	sp, #28
 801b454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b458 <__ascii_mbtowc>:
 801b458:	b082      	sub	sp, #8
 801b45a:	b901      	cbnz	r1, 801b45e <__ascii_mbtowc+0x6>
 801b45c:	a901      	add	r1, sp, #4
 801b45e:	b142      	cbz	r2, 801b472 <__ascii_mbtowc+0x1a>
 801b460:	b14b      	cbz	r3, 801b476 <__ascii_mbtowc+0x1e>
 801b462:	7813      	ldrb	r3, [r2, #0]
 801b464:	600b      	str	r3, [r1, #0]
 801b466:	7812      	ldrb	r2, [r2, #0]
 801b468:	1e10      	subs	r0, r2, #0
 801b46a:	bf18      	it	ne
 801b46c:	2001      	movne	r0, #1
 801b46e:	b002      	add	sp, #8
 801b470:	4770      	bx	lr
 801b472:	4610      	mov	r0, r2
 801b474:	e7fb      	b.n	801b46e <__ascii_mbtowc+0x16>
 801b476:	f06f 0001 	mvn.w	r0, #1
 801b47a:	e7f8      	b.n	801b46e <__ascii_mbtowc+0x16>

0801b47c <__malloc_lock>:
 801b47c:	4801      	ldr	r0, [pc, #4]	; (801b484 <__malloc_lock+0x8>)
 801b47e:	f000 bd32 	b.w	801bee6 <__retarget_lock_acquire_recursive>
 801b482:	bf00      	nop
 801b484:	200004e0 	.word	0x200004e0

0801b488 <__malloc_unlock>:
 801b488:	4801      	ldr	r0, [pc, #4]	; (801b490 <__malloc_unlock+0x8>)
 801b48a:	f000 bd2d 	b.w	801bee8 <__retarget_lock_release_recursive>
 801b48e:	bf00      	nop
 801b490:	200004e0 	.word	0x200004e0

0801b494 <_Balloc>:
 801b494:	b570      	push	{r4, r5, r6, lr}
 801b496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b498:	4604      	mov	r4, r0
 801b49a:	460d      	mov	r5, r1
 801b49c:	b976      	cbnz	r6, 801b4bc <_Balloc+0x28>
 801b49e:	2010      	movs	r0, #16
 801b4a0:	f7fe fbcc 	bl	8019c3c <malloc>
 801b4a4:	4602      	mov	r2, r0
 801b4a6:	6260      	str	r0, [r4, #36]	; 0x24
 801b4a8:	b920      	cbnz	r0, 801b4b4 <_Balloc+0x20>
 801b4aa:	4b18      	ldr	r3, [pc, #96]	; (801b50c <_Balloc+0x78>)
 801b4ac:	4818      	ldr	r0, [pc, #96]	; (801b510 <_Balloc+0x7c>)
 801b4ae:	2166      	movs	r1, #102	; 0x66
 801b4b0:	f000 fce8 	bl	801be84 <__assert_func>
 801b4b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b4b8:	6006      	str	r6, [r0, #0]
 801b4ba:	60c6      	str	r6, [r0, #12]
 801b4bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b4be:	68f3      	ldr	r3, [r6, #12]
 801b4c0:	b183      	cbz	r3, 801b4e4 <_Balloc+0x50>
 801b4c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b4c4:	68db      	ldr	r3, [r3, #12]
 801b4c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b4ca:	b9b8      	cbnz	r0, 801b4fc <_Balloc+0x68>
 801b4cc:	2101      	movs	r1, #1
 801b4ce:	fa01 f605 	lsl.w	r6, r1, r5
 801b4d2:	1d72      	adds	r2, r6, #5
 801b4d4:	0092      	lsls	r2, r2, #2
 801b4d6:	4620      	mov	r0, r4
 801b4d8:	f000 fc97 	bl	801be0a <_calloc_r>
 801b4dc:	b160      	cbz	r0, 801b4f8 <_Balloc+0x64>
 801b4de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b4e2:	e00e      	b.n	801b502 <_Balloc+0x6e>
 801b4e4:	2221      	movs	r2, #33	; 0x21
 801b4e6:	2104      	movs	r1, #4
 801b4e8:	4620      	mov	r0, r4
 801b4ea:	f000 fc8e 	bl	801be0a <_calloc_r>
 801b4ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b4f0:	60f0      	str	r0, [r6, #12]
 801b4f2:	68db      	ldr	r3, [r3, #12]
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d1e4      	bne.n	801b4c2 <_Balloc+0x2e>
 801b4f8:	2000      	movs	r0, #0
 801b4fa:	bd70      	pop	{r4, r5, r6, pc}
 801b4fc:	6802      	ldr	r2, [r0, #0]
 801b4fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b502:	2300      	movs	r3, #0
 801b504:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b508:	e7f7      	b.n	801b4fa <_Balloc+0x66>
 801b50a:	bf00      	nop
 801b50c:	0801d4f4 	.word	0x0801d4f4
 801b510:	0801d50b 	.word	0x0801d50b

0801b514 <_Bfree>:
 801b514:	b570      	push	{r4, r5, r6, lr}
 801b516:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b518:	4605      	mov	r5, r0
 801b51a:	460c      	mov	r4, r1
 801b51c:	b976      	cbnz	r6, 801b53c <_Bfree+0x28>
 801b51e:	2010      	movs	r0, #16
 801b520:	f7fe fb8c 	bl	8019c3c <malloc>
 801b524:	4602      	mov	r2, r0
 801b526:	6268      	str	r0, [r5, #36]	; 0x24
 801b528:	b920      	cbnz	r0, 801b534 <_Bfree+0x20>
 801b52a:	4b09      	ldr	r3, [pc, #36]	; (801b550 <_Bfree+0x3c>)
 801b52c:	4809      	ldr	r0, [pc, #36]	; (801b554 <_Bfree+0x40>)
 801b52e:	218a      	movs	r1, #138	; 0x8a
 801b530:	f000 fca8 	bl	801be84 <__assert_func>
 801b534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b538:	6006      	str	r6, [r0, #0]
 801b53a:	60c6      	str	r6, [r0, #12]
 801b53c:	b13c      	cbz	r4, 801b54e <_Bfree+0x3a>
 801b53e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b540:	6862      	ldr	r2, [r4, #4]
 801b542:	68db      	ldr	r3, [r3, #12]
 801b544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b548:	6021      	str	r1, [r4, #0]
 801b54a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b54e:	bd70      	pop	{r4, r5, r6, pc}
 801b550:	0801d4f4 	.word	0x0801d4f4
 801b554:	0801d50b 	.word	0x0801d50b

0801b558 <__multadd>:
 801b558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b55c:	690e      	ldr	r6, [r1, #16]
 801b55e:	4607      	mov	r7, r0
 801b560:	4698      	mov	r8, r3
 801b562:	460c      	mov	r4, r1
 801b564:	f101 0014 	add.w	r0, r1, #20
 801b568:	2300      	movs	r3, #0
 801b56a:	6805      	ldr	r5, [r0, #0]
 801b56c:	b2a9      	uxth	r1, r5
 801b56e:	fb02 8101 	mla	r1, r2, r1, r8
 801b572:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801b576:	0c2d      	lsrs	r5, r5, #16
 801b578:	fb02 c505 	mla	r5, r2, r5, ip
 801b57c:	b289      	uxth	r1, r1
 801b57e:	3301      	adds	r3, #1
 801b580:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801b584:	429e      	cmp	r6, r3
 801b586:	f840 1b04 	str.w	r1, [r0], #4
 801b58a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801b58e:	dcec      	bgt.n	801b56a <__multadd+0x12>
 801b590:	f1b8 0f00 	cmp.w	r8, #0
 801b594:	d022      	beq.n	801b5dc <__multadd+0x84>
 801b596:	68a3      	ldr	r3, [r4, #8]
 801b598:	42b3      	cmp	r3, r6
 801b59a:	dc19      	bgt.n	801b5d0 <__multadd+0x78>
 801b59c:	6861      	ldr	r1, [r4, #4]
 801b59e:	4638      	mov	r0, r7
 801b5a0:	3101      	adds	r1, #1
 801b5a2:	f7ff ff77 	bl	801b494 <_Balloc>
 801b5a6:	4605      	mov	r5, r0
 801b5a8:	b928      	cbnz	r0, 801b5b6 <__multadd+0x5e>
 801b5aa:	4602      	mov	r2, r0
 801b5ac:	4b0d      	ldr	r3, [pc, #52]	; (801b5e4 <__multadd+0x8c>)
 801b5ae:	480e      	ldr	r0, [pc, #56]	; (801b5e8 <__multadd+0x90>)
 801b5b0:	21b5      	movs	r1, #181	; 0xb5
 801b5b2:	f000 fc67 	bl	801be84 <__assert_func>
 801b5b6:	6922      	ldr	r2, [r4, #16]
 801b5b8:	3202      	adds	r2, #2
 801b5ba:	f104 010c 	add.w	r1, r4, #12
 801b5be:	0092      	lsls	r2, r2, #2
 801b5c0:	300c      	adds	r0, #12
 801b5c2:	f7fe fb59 	bl	8019c78 <memcpy>
 801b5c6:	4621      	mov	r1, r4
 801b5c8:	4638      	mov	r0, r7
 801b5ca:	f7ff ffa3 	bl	801b514 <_Bfree>
 801b5ce:	462c      	mov	r4, r5
 801b5d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801b5d4:	3601      	adds	r6, #1
 801b5d6:	f8c3 8014 	str.w	r8, [r3, #20]
 801b5da:	6126      	str	r6, [r4, #16]
 801b5dc:	4620      	mov	r0, r4
 801b5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5e2:	bf00      	nop
 801b5e4:	0801d466 	.word	0x0801d466
 801b5e8:	0801d50b 	.word	0x0801d50b

0801b5ec <__s2b>:
 801b5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b5f0:	460c      	mov	r4, r1
 801b5f2:	4615      	mov	r5, r2
 801b5f4:	461f      	mov	r7, r3
 801b5f6:	2209      	movs	r2, #9
 801b5f8:	3308      	adds	r3, #8
 801b5fa:	4606      	mov	r6, r0
 801b5fc:	fb93 f3f2 	sdiv	r3, r3, r2
 801b600:	2100      	movs	r1, #0
 801b602:	2201      	movs	r2, #1
 801b604:	429a      	cmp	r2, r3
 801b606:	db09      	blt.n	801b61c <__s2b+0x30>
 801b608:	4630      	mov	r0, r6
 801b60a:	f7ff ff43 	bl	801b494 <_Balloc>
 801b60e:	b940      	cbnz	r0, 801b622 <__s2b+0x36>
 801b610:	4602      	mov	r2, r0
 801b612:	4b19      	ldr	r3, [pc, #100]	; (801b678 <__s2b+0x8c>)
 801b614:	4819      	ldr	r0, [pc, #100]	; (801b67c <__s2b+0x90>)
 801b616:	21ce      	movs	r1, #206	; 0xce
 801b618:	f000 fc34 	bl	801be84 <__assert_func>
 801b61c:	0052      	lsls	r2, r2, #1
 801b61e:	3101      	adds	r1, #1
 801b620:	e7f0      	b.n	801b604 <__s2b+0x18>
 801b622:	9b08      	ldr	r3, [sp, #32]
 801b624:	6143      	str	r3, [r0, #20]
 801b626:	2d09      	cmp	r5, #9
 801b628:	f04f 0301 	mov.w	r3, #1
 801b62c:	6103      	str	r3, [r0, #16]
 801b62e:	dd16      	ble.n	801b65e <__s2b+0x72>
 801b630:	f104 0909 	add.w	r9, r4, #9
 801b634:	46c8      	mov	r8, r9
 801b636:	442c      	add	r4, r5
 801b638:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b63c:	4601      	mov	r1, r0
 801b63e:	3b30      	subs	r3, #48	; 0x30
 801b640:	220a      	movs	r2, #10
 801b642:	4630      	mov	r0, r6
 801b644:	f7ff ff88 	bl	801b558 <__multadd>
 801b648:	45a0      	cmp	r8, r4
 801b64a:	d1f5      	bne.n	801b638 <__s2b+0x4c>
 801b64c:	f1a5 0408 	sub.w	r4, r5, #8
 801b650:	444c      	add	r4, r9
 801b652:	1b2d      	subs	r5, r5, r4
 801b654:	1963      	adds	r3, r4, r5
 801b656:	42bb      	cmp	r3, r7
 801b658:	db04      	blt.n	801b664 <__s2b+0x78>
 801b65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b65e:	340a      	adds	r4, #10
 801b660:	2509      	movs	r5, #9
 801b662:	e7f6      	b.n	801b652 <__s2b+0x66>
 801b664:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b668:	4601      	mov	r1, r0
 801b66a:	3b30      	subs	r3, #48	; 0x30
 801b66c:	220a      	movs	r2, #10
 801b66e:	4630      	mov	r0, r6
 801b670:	f7ff ff72 	bl	801b558 <__multadd>
 801b674:	e7ee      	b.n	801b654 <__s2b+0x68>
 801b676:	bf00      	nop
 801b678:	0801d466 	.word	0x0801d466
 801b67c:	0801d50b 	.word	0x0801d50b

0801b680 <__hi0bits>:
 801b680:	0c03      	lsrs	r3, r0, #16
 801b682:	041b      	lsls	r3, r3, #16
 801b684:	b9d3      	cbnz	r3, 801b6bc <__hi0bits+0x3c>
 801b686:	0400      	lsls	r0, r0, #16
 801b688:	2310      	movs	r3, #16
 801b68a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b68e:	bf04      	itt	eq
 801b690:	0200      	lsleq	r0, r0, #8
 801b692:	3308      	addeq	r3, #8
 801b694:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b698:	bf04      	itt	eq
 801b69a:	0100      	lsleq	r0, r0, #4
 801b69c:	3304      	addeq	r3, #4
 801b69e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b6a2:	bf04      	itt	eq
 801b6a4:	0080      	lsleq	r0, r0, #2
 801b6a6:	3302      	addeq	r3, #2
 801b6a8:	2800      	cmp	r0, #0
 801b6aa:	db05      	blt.n	801b6b8 <__hi0bits+0x38>
 801b6ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b6b0:	f103 0301 	add.w	r3, r3, #1
 801b6b4:	bf08      	it	eq
 801b6b6:	2320      	moveq	r3, #32
 801b6b8:	4618      	mov	r0, r3
 801b6ba:	4770      	bx	lr
 801b6bc:	2300      	movs	r3, #0
 801b6be:	e7e4      	b.n	801b68a <__hi0bits+0xa>

0801b6c0 <__lo0bits>:
 801b6c0:	6803      	ldr	r3, [r0, #0]
 801b6c2:	f013 0207 	ands.w	r2, r3, #7
 801b6c6:	4601      	mov	r1, r0
 801b6c8:	d00b      	beq.n	801b6e2 <__lo0bits+0x22>
 801b6ca:	07da      	lsls	r2, r3, #31
 801b6cc:	d424      	bmi.n	801b718 <__lo0bits+0x58>
 801b6ce:	0798      	lsls	r0, r3, #30
 801b6d0:	bf49      	itett	mi
 801b6d2:	085b      	lsrmi	r3, r3, #1
 801b6d4:	089b      	lsrpl	r3, r3, #2
 801b6d6:	2001      	movmi	r0, #1
 801b6d8:	600b      	strmi	r3, [r1, #0]
 801b6da:	bf5c      	itt	pl
 801b6dc:	600b      	strpl	r3, [r1, #0]
 801b6de:	2002      	movpl	r0, #2
 801b6e0:	4770      	bx	lr
 801b6e2:	b298      	uxth	r0, r3
 801b6e4:	b9b0      	cbnz	r0, 801b714 <__lo0bits+0x54>
 801b6e6:	0c1b      	lsrs	r3, r3, #16
 801b6e8:	2010      	movs	r0, #16
 801b6ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 801b6ee:	bf04      	itt	eq
 801b6f0:	0a1b      	lsreq	r3, r3, #8
 801b6f2:	3008      	addeq	r0, #8
 801b6f4:	071a      	lsls	r2, r3, #28
 801b6f6:	bf04      	itt	eq
 801b6f8:	091b      	lsreq	r3, r3, #4
 801b6fa:	3004      	addeq	r0, #4
 801b6fc:	079a      	lsls	r2, r3, #30
 801b6fe:	bf04      	itt	eq
 801b700:	089b      	lsreq	r3, r3, #2
 801b702:	3002      	addeq	r0, #2
 801b704:	07da      	lsls	r2, r3, #31
 801b706:	d403      	bmi.n	801b710 <__lo0bits+0x50>
 801b708:	085b      	lsrs	r3, r3, #1
 801b70a:	f100 0001 	add.w	r0, r0, #1
 801b70e:	d005      	beq.n	801b71c <__lo0bits+0x5c>
 801b710:	600b      	str	r3, [r1, #0]
 801b712:	4770      	bx	lr
 801b714:	4610      	mov	r0, r2
 801b716:	e7e8      	b.n	801b6ea <__lo0bits+0x2a>
 801b718:	2000      	movs	r0, #0
 801b71a:	4770      	bx	lr
 801b71c:	2020      	movs	r0, #32
 801b71e:	4770      	bx	lr

0801b720 <__i2b>:
 801b720:	b510      	push	{r4, lr}
 801b722:	460c      	mov	r4, r1
 801b724:	2101      	movs	r1, #1
 801b726:	f7ff feb5 	bl	801b494 <_Balloc>
 801b72a:	4602      	mov	r2, r0
 801b72c:	b928      	cbnz	r0, 801b73a <__i2b+0x1a>
 801b72e:	4b05      	ldr	r3, [pc, #20]	; (801b744 <__i2b+0x24>)
 801b730:	4805      	ldr	r0, [pc, #20]	; (801b748 <__i2b+0x28>)
 801b732:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b736:	f000 fba5 	bl	801be84 <__assert_func>
 801b73a:	2301      	movs	r3, #1
 801b73c:	6144      	str	r4, [r0, #20]
 801b73e:	6103      	str	r3, [r0, #16]
 801b740:	bd10      	pop	{r4, pc}
 801b742:	bf00      	nop
 801b744:	0801d466 	.word	0x0801d466
 801b748:	0801d50b 	.word	0x0801d50b

0801b74c <__multiply>:
 801b74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b750:	4614      	mov	r4, r2
 801b752:	690a      	ldr	r2, [r1, #16]
 801b754:	6923      	ldr	r3, [r4, #16]
 801b756:	429a      	cmp	r2, r3
 801b758:	bfb8      	it	lt
 801b75a:	460b      	movlt	r3, r1
 801b75c:	460d      	mov	r5, r1
 801b75e:	bfbc      	itt	lt
 801b760:	4625      	movlt	r5, r4
 801b762:	461c      	movlt	r4, r3
 801b764:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801b768:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801b76c:	68ab      	ldr	r3, [r5, #8]
 801b76e:	6869      	ldr	r1, [r5, #4]
 801b770:	eb0a 0709 	add.w	r7, sl, r9
 801b774:	42bb      	cmp	r3, r7
 801b776:	b085      	sub	sp, #20
 801b778:	bfb8      	it	lt
 801b77a:	3101      	addlt	r1, #1
 801b77c:	f7ff fe8a 	bl	801b494 <_Balloc>
 801b780:	b930      	cbnz	r0, 801b790 <__multiply+0x44>
 801b782:	4602      	mov	r2, r0
 801b784:	4b42      	ldr	r3, [pc, #264]	; (801b890 <__multiply+0x144>)
 801b786:	4843      	ldr	r0, [pc, #268]	; (801b894 <__multiply+0x148>)
 801b788:	f240 115d 	movw	r1, #349	; 0x15d
 801b78c:	f000 fb7a 	bl	801be84 <__assert_func>
 801b790:	f100 0614 	add.w	r6, r0, #20
 801b794:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801b798:	4633      	mov	r3, r6
 801b79a:	2200      	movs	r2, #0
 801b79c:	4543      	cmp	r3, r8
 801b79e:	d31e      	bcc.n	801b7de <__multiply+0x92>
 801b7a0:	f105 0c14 	add.w	ip, r5, #20
 801b7a4:	f104 0314 	add.w	r3, r4, #20
 801b7a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801b7ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801b7b0:	9202      	str	r2, [sp, #8]
 801b7b2:	ebac 0205 	sub.w	r2, ip, r5
 801b7b6:	3a15      	subs	r2, #21
 801b7b8:	f022 0203 	bic.w	r2, r2, #3
 801b7bc:	3204      	adds	r2, #4
 801b7be:	f105 0115 	add.w	r1, r5, #21
 801b7c2:	458c      	cmp	ip, r1
 801b7c4:	bf38      	it	cc
 801b7c6:	2204      	movcc	r2, #4
 801b7c8:	9201      	str	r2, [sp, #4]
 801b7ca:	9a02      	ldr	r2, [sp, #8]
 801b7cc:	9303      	str	r3, [sp, #12]
 801b7ce:	429a      	cmp	r2, r3
 801b7d0:	d808      	bhi.n	801b7e4 <__multiply+0x98>
 801b7d2:	2f00      	cmp	r7, #0
 801b7d4:	dc55      	bgt.n	801b882 <__multiply+0x136>
 801b7d6:	6107      	str	r7, [r0, #16]
 801b7d8:	b005      	add	sp, #20
 801b7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7de:	f843 2b04 	str.w	r2, [r3], #4
 801b7e2:	e7db      	b.n	801b79c <__multiply+0x50>
 801b7e4:	f8b3 a000 	ldrh.w	sl, [r3]
 801b7e8:	f1ba 0f00 	cmp.w	sl, #0
 801b7ec:	d020      	beq.n	801b830 <__multiply+0xe4>
 801b7ee:	f105 0e14 	add.w	lr, r5, #20
 801b7f2:	46b1      	mov	r9, r6
 801b7f4:	2200      	movs	r2, #0
 801b7f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 801b7fa:	f8d9 b000 	ldr.w	fp, [r9]
 801b7fe:	b2a1      	uxth	r1, r4
 801b800:	fa1f fb8b 	uxth.w	fp, fp
 801b804:	fb0a b101 	mla	r1, sl, r1, fp
 801b808:	4411      	add	r1, r2
 801b80a:	f8d9 2000 	ldr.w	r2, [r9]
 801b80e:	0c24      	lsrs	r4, r4, #16
 801b810:	0c12      	lsrs	r2, r2, #16
 801b812:	fb0a 2404 	mla	r4, sl, r4, r2
 801b816:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801b81a:	b289      	uxth	r1, r1
 801b81c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801b820:	45f4      	cmp	ip, lr
 801b822:	f849 1b04 	str.w	r1, [r9], #4
 801b826:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801b82a:	d8e4      	bhi.n	801b7f6 <__multiply+0xaa>
 801b82c:	9901      	ldr	r1, [sp, #4]
 801b82e:	5072      	str	r2, [r6, r1]
 801b830:	9a03      	ldr	r2, [sp, #12]
 801b832:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b836:	3304      	adds	r3, #4
 801b838:	f1b9 0f00 	cmp.w	r9, #0
 801b83c:	d01f      	beq.n	801b87e <__multiply+0x132>
 801b83e:	6834      	ldr	r4, [r6, #0]
 801b840:	f105 0114 	add.w	r1, r5, #20
 801b844:	46b6      	mov	lr, r6
 801b846:	f04f 0a00 	mov.w	sl, #0
 801b84a:	880a      	ldrh	r2, [r1, #0]
 801b84c:	f8be b002 	ldrh.w	fp, [lr, #2]
 801b850:	fb09 b202 	mla	r2, r9, r2, fp
 801b854:	4492      	add	sl, r2
 801b856:	b2a4      	uxth	r4, r4
 801b858:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801b85c:	f84e 4b04 	str.w	r4, [lr], #4
 801b860:	f851 4b04 	ldr.w	r4, [r1], #4
 801b864:	f8be 2000 	ldrh.w	r2, [lr]
 801b868:	0c24      	lsrs	r4, r4, #16
 801b86a:	fb09 2404 	mla	r4, r9, r4, r2
 801b86e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801b872:	458c      	cmp	ip, r1
 801b874:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801b878:	d8e7      	bhi.n	801b84a <__multiply+0xfe>
 801b87a:	9a01      	ldr	r2, [sp, #4]
 801b87c:	50b4      	str	r4, [r6, r2]
 801b87e:	3604      	adds	r6, #4
 801b880:	e7a3      	b.n	801b7ca <__multiply+0x7e>
 801b882:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b886:	2b00      	cmp	r3, #0
 801b888:	d1a5      	bne.n	801b7d6 <__multiply+0x8a>
 801b88a:	3f01      	subs	r7, #1
 801b88c:	e7a1      	b.n	801b7d2 <__multiply+0x86>
 801b88e:	bf00      	nop
 801b890:	0801d466 	.word	0x0801d466
 801b894:	0801d50b 	.word	0x0801d50b

0801b898 <__pow5mult>:
 801b898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b89c:	4615      	mov	r5, r2
 801b89e:	f012 0203 	ands.w	r2, r2, #3
 801b8a2:	4606      	mov	r6, r0
 801b8a4:	460f      	mov	r7, r1
 801b8a6:	d007      	beq.n	801b8b8 <__pow5mult+0x20>
 801b8a8:	4c25      	ldr	r4, [pc, #148]	; (801b940 <__pow5mult+0xa8>)
 801b8aa:	3a01      	subs	r2, #1
 801b8ac:	2300      	movs	r3, #0
 801b8ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b8b2:	f7ff fe51 	bl	801b558 <__multadd>
 801b8b6:	4607      	mov	r7, r0
 801b8b8:	10ad      	asrs	r5, r5, #2
 801b8ba:	d03d      	beq.n	801b938 <__pow5mult+0xa0>
 801b8bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b8be:	b97c      	cbnz	r4, 801b8e0 <__pow5mult+0x48>
 801b8c0:	2010      	movs	r0, #16
 801b8c2:	f7fe f9bb 	bl	8019c3c <malloc>
 801b8c6:	4602      	mov	r2, r0
 801b8c8:	6270      	str	r0, [r6, #36]	; 0x24
 801b8ca:	b928      	cbnz	r0, 801b8d8 <__pow5mult+0x40>
 801b8cc:	4b1d      	ldr	r3, [pc, #116]	; (801b944 <__pow5mult+0xac>)
 801b8ce:	481e      	ldr	r0, [pc, #120]	; (801b948 <__pow5mult+0xb0>)
 801b8d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b8d4:	f000 fad6 	bl	801be84 <__assert_func>
 801b8d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b8dc:	6004      	str	r4, [r0, #0]
 801b8de:	60c4      	str	r4, [r0, #12]
 801b8e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b8e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b8e8:	b94c      	cbnz	r4, 801b8fe <__pow5mult+0x66>
 801b8ea:	f240 2171 	movw	r1, #625	; 0x271
 801b8ee:	4630      	mov	r0, r6
 801b8f0:	f7ff ff16 	bl	801b720 <__i2b>
 801b8f4:	2300      	movs	r3, #0
 801b8f6:	f8c8 0008 	str.w	r0, [r8, #8]
 801b8fa:	4604      	mov	r4, r0
 801b8fc:	6003      	str	r3, [r0, #0]
 801b8fe:	f04f 0900 	mov.w	r9, #0
 801b902:	07eb      	lsls	r3, r5, #31
 801b904:	d50a      	bpl.n	801b91c <__pow5mult+0x84>
 801b906:	4639      	mov	r1, r7
 801b908:	4622      	mov	r2, r4
 801b90a:	4630      	mov	r0, r6
 801b90c:	f7ff ff1e 	bl	801b74c <__multiply>
 801b910:	4639      	mov	r1, r7
 801b912:	4680      	mov	r8, r0
 801b914:	4630      	mov	r0, r6
 801b916:	f7ff fdfd 	bl	801b514 <_Bfree>
 801b91a:	4647      	mov	r7, r8
 801b91c:	106d      	asrs	r5, r5, #1
 801b91e:	d00b      	beq.n	801b938 <__pow5mult+0xa0>
 801b920:	6820      	ldr	r0, [r4, #0]
 801b922:	b938      	cbnz	r0, 801b934 <__pow5mult+0x9c>
 801b924:	4622      	mov	r2, r4
 801b926:	4621      	mov	r1, r4
 801b928:	4630      	mov	r0, r6
 801b92a:	f7ff ff0f 	bl	801b74c <__multiply>
 801b92e:	6020      	str	r0, [r4, #0]
 801b930:	f8c0 9000 	str.w	r9, [r0]
 801b934:	4604      	mov	r4, r0
 801b936:	e7e4      	b.n	801b902 <__pow5mult+0x6a>
 801b938:	4638      	mov	r0, r7
 801b93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b93e:	bf00      	nop
 801b940:	0801d660 	.word	0x0801d660
 801b944:	0801d4f4 	.word	0x0801d4f4
 801b948:	0801d50b 	.word	0x0801d50b

0801b94c <__lshift>:
 801b94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b950:	460c      	mov	r4, r1
 801b952:	6849      	ldr	r1, [r1, #4]
 801b954:	6923      	ldr	r3, [r4, #16]
 801b956:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b95a:	68a3      	ldr	r3, [r4, #8]
 801b95c:	4607      	mov	r7, r0
 801b95e:	4691      	mov	r9, r2
 801b960:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b964:	f108 0601 	add.w	r6, r8, #1
 801b968:	42b3      	cmp	r3, r6
 801b96a:	db0b      	blt.n	801b984 <__lshift+0x38>
 801b96c:	4638      	mov	r0, r7
 801b96e:	f7ff fd91 	bl	801b494 <_Balloc>
 801b972:	4605      	mov	r5, r0
 801b974:	b948      	cbnz	r0, 801b98a <__lshift+0x3e>
 801b976:	4602      	mov	r2, r0
 801b978:	4b28      	ldr	r3, [pc, #160]	; (801ba1c <__lshift+0xd0>)
 801b97a:	4829      	ldr	r0, [pc, #164]	; (801ba20 <__lshift+0xd4>)
 801b97c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b980:	f000 fa80 	bl	801be84 <__assert_func>
 801b984:	3101      	adds	r1, #1
 801b986:	005b      	lsls	r3, r3, #1
 801b988:	e7ee      	b.n	801b968 <__lshift+0x1c>
 801b98a:	2300      	movs	r3, #0
 801b98c:	f100 0114 	add.w	r1, r0, #20
 801b990:	f100 0210 	add.w	r2, r0, #16
 801b994:	4618      	mov	r0, r3
 801b996:	4553      	cmp	r3, sl
 801b998:	db33      	blt.n	801ba02 <__lshift+0xb6>
 801b99a:	6920      	ldr	r0, [r4, #16]
 801b99c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b9a0:	f104 0314 	add.w	r3, r4, #20
 801b9a4:	f019 091f 	ands.w	r9, r9, #31
 801b9a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b9ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b9b0:	d02b      	beq.n	801ba0a <__lshift+0xbe>
 801b9b2:	f1c9 0e20 	rsb	lr, r9, #32
 801b9b6:	468a      	mov	sl, r1
 801b9b8:	2200      	movs	r2, #0
 801b9ba:	6818      	ldr	r0, [r3, #0]
 801b9bc:	fa00 f009 	lsl.w	r0, r0, r9
 801b9c0:	4302      	orrs	r2, r0
 801b9c2:	f84a 2b04 	str.w	r2, [sl], #4
 801b9c6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b9ca:	459c      	cmp	ip, r3
 801b9cc:	fa22 f20e 	lsr.w	r2, r2, lr
 801b9d0:	d8f3      	bhi.n	801b9ba <__lshift+0x6e>
 801b9d2:	ebac 0304 	sub.w	r3, ip, r4
 801b9d6:	3b15      	subs	r3, #21
 801b9d8:	f023 0303 	bic.w	r3, r3, #3
 801b9dc:	3304      	adds	r3, #4
 801b9de:	f104 0015 	add.w	r0, r4, #21
 801b9e2:	4584      	cmp	ip, r0
 801b9e4:	bf38      	it	cc
 801b9e6:	2304      	movcc	r3, #4
 801b9e8:	50ca      	str	r2, [r1, r3]
 801b9ea:	b10a      	cbz	r2, 801b9f0 <__lshift+0xa4>
 801b9ec:	f108 0602 	add.w	r6, r8, #2
 801b9f0:	3e01      	subs	r6, #1
 801b9f2:	4638      	mov	r0, r7
 801b9f4:	612e      	str	r6, [r5, #16]
 801b9f6:	4621      	mov	r1, r4
 801b9f8:	f7ff fd8c 	bl	801b514 <_Bfree>
 801b9fc:	4628      	mov	r0, r5
 801b9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba02:	f842 0f04 	str.w	r0, [r2, #4]!
 801ba06:	3301      	adds	r3, #1
 801ba08:	e7c5      	b.n	801b996 <__lshift+0x4a>
 801ba0a:	3904      	subs	r1, #4
 801ba0c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ba10:	f841 2f04 	str.w	r2, [r1, #4]!
 801ba14:	459c      	cmp	ip, r3
 801ba16:	d8f9      	bhi.n	801ba0c <__lshift+0xc0>
 801ba18:	e7ea      	b.n	801b9f0 <__lshift+0xa4>
 801ba1a:	bf00      	nop
 801ba1c:	0801d466 	.word	0x0801d466
 801ba20:	0801d50b 	.word	0x0801d50b

0801ba24 <__mcmp>:
 801ba24:	b530      	push	{r4, r5, lr}
 801ba26:	6902      	ldr	r2, [r0, #16]
 801ba28:	690c      	ldr	r4, [r1, #16]
 801ba2a:	1b12      	subs	r2, r2, r4
 801ba2c:	d10e      	bne.n	801ba4c <__mcmp+0x28>
 801ba2e:	f100 0314 	add.w	r3, r0, #20
 801ba32:	3114      	adds	r1, #20
 801ba34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ba38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ba3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ba40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ba44:	42a5      	cmp	r5, r4
 801ba46:	d003      	beq.n	801ba50 <__mcmp+0x2c>
 801ba48:	d305      	bcc.n	801ba56 <__mcmp+0x32>
 801ba4a:	2201      	movs	r2, #1
 801ba4c:	4610      	mov	r0, r2
 801ba4e:	bd30      	pop	{r4, r5, pc}
 801ba50:	4283      	cmp	r3, r0
 801ba52:	d3f3      	bcc.n	801ba3c <__mcmp+0x18>
 801ba54:	e7fa      	b.n	801ba4c <__mcmp+0x28>
 801ba56:	f04f 32ff 	mov.w	r2, #4294967295
 801ba5a:	e7f7      	b.n	801ba4c <__mcmp+0x28>

0801ba5c <__mdiff>:
 801ba5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba60:	460c      	mov	r4, r1
 801ba62:	4606      	mov	r6, r0
 801ba64:	4611      	mov	r1, r2
 801ba66:	4620      	mov	r0, r4
 801ba68:	4617      	mov	r7, r2
 801ba6a:	f7ff ffdb 	bl	801ba24 <__mcmp>
 801ba6e:	1e05      	subs	r5, r0, #0
 801ba70:	d110      	bne.n	801ba94 <__mdiff+0x38>
 801ba72:	4629      	mov	r1, r5
 801ba74:	4630      	mov	r0, r6
 801ba76:	f7ff fd0d 	bl	801b494 <_Balloc>
 801ba7a:	b930      	cbnz	r0, 801ba8a <__mdiff+0x2e>
 801ba7c:	4b39      	ldr	r3, [pc, #228]	; (801bb64 <__mdiff+0x108>)
 801ba7e:	4602      	mov	r2, r0
 801ba80:	f240 2132 	movw	r1, #562	; 0x232
 801ba84:	4838      	ldr	r0, [pc, #224]	; (801bb68 <__mdiff+0x10c>)
 801ba86:	f000 f9fd 	bl	801be84 <__assert_func>
 801ba8a:	2301      	movs	r3, #1
 801ba8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ba90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba94:	bfa4      	itt	ge
 801ba96:	463b      	movge	r3, r7
 801ba98:	4627      	movge	r7, r4
 801ba9a:	4630      	mov	r0, r6
 801ba9c:	6879      	ldr	r1, [r7, #4]
 801ba9e:	bfa6      	itte	ge
 801baa0:	461c      	movge	r4, r3
 801baa2:	2500      	movge	r5, #0
 801baa4:	2501      	movlt	r5, #1
 801baa6:	f7ff fcf5 	bl	801b494 <_Balloc>
 801baaa:	b920      	cbnz	r0, 801bab6 <__mdiff+0x5a>
 801baac:	4b2d      	ldr	r3, [pc, #180]	; (801bb64 <__mdiff+0x108>)
 801baae:	4602      	mov	r2, r0
 801bab0:	f44f 7110 	mov.w	r1, #576	; 0x240
 801bab4:	e7e6      	b.n	801ba84 <__mdiff+0x28>
 801bab6:	693e      	ldr	r6, [r7, #16]
 801bab8:	60c5      	str	r5, [r0, #12]
 801baba:	6925      	ldr	r5, [r4, #16]
 801babc:	f107 0114 	add.w	r1, r7, #20
 801bac0:	f104 0914 	add.w	r9, r4, #20
 801bac4:	f100 0e14 	add.w	lr, r0, #20
 801bac8:	f107 0210 	add.w	r2, r7, #16
 801bacc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801bad0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801bad4:	46f2      	mov	sl, lr
 801bad6:	2700      	movs	r7, #0
 801bad8:	f859 3b04 	ldr.w	r3, [r9], #4
 801badc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801bae0:	fa1f f883 	uxth.w	r8, r3
 801bae4:	fa17 f78b 	uxtah	r7, r7, fp
 801bae8:	0c1b      	lsrs	r3, r3, #16
 801baea:	eba7 0808 	sub.w	r8, r7, r8
 801baee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801baf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801baf6:	fa1f f888 	uxth.w	r8, r8
 801bafa:	141f      	asrs	r7, r3, #16
 801bafc:	454d      	cmp	r5, r9
 801bafe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801bb02:	f84a 3b04 	str.w	r3, [sl], #4
 801bb06:	d8e7      	bhi.n	801bad8 <__mdiff+0x7c>
 801bb08:	1b2b      	subs	r3, r5, r4
 801bb0a:	3b15      	subs	r3, #21
 801bb0c:	f023 0303 	bic.w	r3, r3, #3
 801bb10:	3304      	adds	r3, #4
 801bb12:	3415      	adds	r4, #21
 801bb14:	42a5      	cmp	r5, r4
 801bb16:	bf38      	it	cc
 801bb18:	2304      	movcc	r3, #4
 801bb1a:	4419      	add	r1, r3
 801bb1c:	4473      	add	r3, lr
 801bb1e:	469e      	mov	lr, r3
 801bb20:	460d      	mov	r5, r1
 801bb22:	4565      	cmp	r5, ip
 801bb24:	d30e      	bcc.n	801bb44 <__mdiff+0xe8>
 801bb26:	f10c 0203 	add.w	r2, ip, #3
 801bb2a:	1a52      	subs	r2, r2, r1
 801bb2c:	f022 0203 	bic.w	r2, r2, #3
 801bb30:	3903      	subs	r1, #3
 801bb32:	458c      	cmp	ip, r1
 801bb34:	bf38      	it	cc
 801bb36:	2200      	movcc	r2, #0
 801bb38:	441a      	add	r2, r3
 801bb3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801bb3e:	b17b      	cbz	r3, 801bb60 <__mdiff+0x104>
 801bb40:	6106      	str	r6, [r0, #16]
 801bb42:	e7a5      	b.n	801ba90 <__mdiff+0x34>
 801bb44:	f855 8b04 	ldr.w	r8, [r5], #4
 801bb48:	fa17 f488 	uxtah	r4, r7, r8
 801bb4c:	1422      	asrs	r2, r4, #16
 801bb4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801bb52:	b2a4      	uxth	r4, r4
 801bb54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801bb58:	f84e 4b04 	str.w	r4, [lr], #4
 801bb5c:	1417      	asrs	r7, r2, #16
 801bb5e:	e7e0      	b.n	801bb22 <__mdiff+0xc6>
 801bb60:	3e01      	subs	r6, #1
 801bb62:	e7ea      	b.n	801bb3a <__mdiff+0xde>
 801bb64:	0801d466 	.word	0x0801d466
 801bb68:	0801d50b 	.word	0x0801d50b

0801bb6c <__ulp>:
 801bb6c:	b082      	sub	sp, #8
 801bb6e:	ed8d 0b00 	vstr	d0, [sp]
 801bb72:	9b01      	ldr	r3, [sp, #4]
 801bb74:	4912      	ldr	r1, [pc, #72]	; (801bbc0 <__ulp+0x54>)
 801bb76:	4019      	ands	r1, r3
 801bb78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801bb7c:	2900      	cmp	r1, #0
 801bb7e:	dd05      	ble.n	801bb8c <__ulp+0x20>
 801bb80:	2200      	movs	r2, #0
 801bb82:	460b      	mov	r3, r1
 801bb84:	ec43 2b10 	vmov	d0, r2, r3
 801bb88:	b002      	add	sp, #8
 801bb8a:	4770      	bx	lr
 801bb8c:	4249      	negs	r1, r1
 801bb8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801bb92:	ea4f 5021 	mov.w	r0, r1, asr #20
 801bb96:	f04f 0200 	mov.w	r2, #0
 801bb9a:	f04f 0300 	mov.w	r3, #0
 801bb9e:	da04      	bge.n	801bbaa <__ulp+0x3e>
 801bba0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801bba4:	fa41 f300 	asr.w	r3, r1, r0
 801bba8:	e7ec      	b.n	801bb84 <__ulp+0x18>
 801bbaa:	f1a0 0114 	sub.w	r1, r0, #20
 801bbae:	291e      	cmp	r1, #30
 801bbb0:	bfda      	itte	le
 801bbb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801bbb6:	fa20 f101 	lsrle.w	r1, r0, r1
 801bbba:	2101      	movgt	r1, #1
 801bbbc:	460a      	mov	r2, r1
 801bbbe:	e7e1      	b.n	801bb84 <__ulp+0x18>
 801bbc0:	7ff00000 	.word	0x7ff00000

0801bbc4 <__b2d>:
 801bbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbc6:	6905      	ldr	r5, [r0, #16]
 801bbc8:	f100 0714 	add.w	r7, r0, #20
 801bbcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801bbd0:	1f2e      	subs	r6, r5, #4
 801bbd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801bbd6:	4620      	mov	r0, r4
 801bbd8:	f7ff fd52 	bl	801b680 <__hi0bits>
 801bbdc:	f1c0 0320 	rsb	r3, r0, #32
 801bbe0:	280a      	cmp	r0, #10
 801bbe2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801bc60 <__b2d+0x9c>
 801bbe6:	600b      	str	r3, [r1, #0]
 801bbe8:	dc14      	bgt.n	801bc14 <__b2d+0x50>
 801bbea:	f1c0 0e0b 	rsb	lr, r0, #11
 801bbee:	fa24 f10e 	lsr.w	r1, r4, lr
 801bbf2:	42b7      	cmp	r7, r6
 801bbf4:	ea41 030c 	orr.w	r3, r1, ip
 801bbf8:	bf34      	ite	cc
 801bbfa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801bbfe:	2100      	movcs	r1, #0
 801bc00:	3015      	adds	r0, #21
 801bc02:	fa04 f000 	lsl.w	r0, r4, r0
 801bc06:	fa21 f10e 	lsr.w	r1, r1, lr
 801bc0a:	ea40 0201 	orr.w	r2, r0, r1
 801bc0e:	ec43 2b10 	vmov	d0, r2, r3
 801bc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc14:	42b7      	cmp	r7, r6
 801bc16:	bf3a      	itte	cc
 801bc18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801bc1c:	f1a5 0608 	subcc.w	r6, r5, #8
 801bc20:	2100      	movcs	r1, #0
 801bc22:	380b      	subs	r0, #11
 801bc24:	d017      	beq.n	801bc56 <__b2d+0x92>
 801bc26:	f1c0 0c20 	rsb	ip, r0, #32
 801bc2a:	fa04 f500 	lsl.w	r5, r4, r0
 801bc2e:	42be      	cmp	r6, r7
 801bc30:	fa21 f40c 	lsr.w	r4, r1, ip
 801bc34:	ea45 0504 	orr.w	r5, r5, r4
 801bc38:	bf8c      	ite	hi
 801bc3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801bc3e:	2400      	movls	r4, #0
 801bc40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801bc44:	fa01 f000 	lsl.w	r0, r1, r0
 801bc48:	fa24 f40c 	lsr.w	r4, r4, ip
 801bc4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801bc50:	ea40 0204 	orr.w	r2, r0, r4
 801bc54:	e7db      	b.n	801bc0e <__b2d+0x4a>
 801bc56:	ea44 030c 	orr.w	r3, r4, ip
 801bc5a:	460a      	mov	r2, r1
 801bc5c:	e7d7      	b.n	801bc0e <__b2d+0x4a>
 801bc5e:	bf00      	nop
 801bc60:	3ff00000 	.word	0x3ff00000

0801bc64 <__d2b>:
 801bc64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bc68:	4689      	mov	r9, r1
 801bc6a:	2101      	movs	r1, #1
 801bc6c:	ec57 6b10 	vmov	r6, r7, d0
 801bc70:	4690      	mov	r8, r2
 801bc72:	f7ff fc0f 	bl	801b494 <_Balloc>
 801bc76:	4604      	mov	r4, r0
 801bc78:	b930      	cbnz	r0, 801bc88 <__d2b+0x24>
 801bc7a:	4602      	mov	r2, r0
 801bc7c:	4b25      	ldr	r3, [pc, #148]	; (801bd14 <__d2b+0xb0>)
 801bc7e:	4826      	ldr	r0, [pc, #152]	; (801bd18 <__d2b+0xb4>)
 801bc80:	f240 310a 	movw	r1, #778	; 0x30a
 801bc84:	f000 f8fe 	bl	801be84 <__assert_func>
 801bc88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801bc8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801bc90:	bb35      	cbnz	r5, 801bce0 <__d2b+0x7c>
 801bc92:	2e00      	cmp	r6, #0
 801bc94:	9301      	str	r3, [sp, #4]
 801bc96:	d028      	beq.n	801bcea <__d2b+0x86>
 801bc98:	4668      	mov	r0, sp
 801bc9a:	9600      	str	r6, [sp, #0]
 801bc9c:	f7ff fd10 	bl	801b6c0 <__lo0bits>
 801bca0:	9900      	ldr	r1, [sp, #0]
 801bca2:	b300      	cbz	r0, 801bce6 <__d2b+0x82>
 801bca4:	9a01      	ldr	r2, [sp, #4]
 801bca6:	f1c0 0320 	rsb	r3, r0, #32
 801bcaa:	fa02 f303 	lsl.w	r3, r2, r3
 801bcae:	430b      	orrs	r3, r1
 801bcb0:	40c2      	lsrs	r2, r0
 801bcb2:	6163      	str	r3, [r4, #20]
 801bcb4:	9201      	str	r2, [sp, #4]
 801bcb6:	9b01      	ldr	r3, [sp, #4]
 801bcb8:	61a3      	str	r3, [r4, #24]
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	bf14      	ite	ne
 801bcbe:	2202      	movne	r2, #2
 801bcc0:	2201      	moveq	r2, #1
 801bcc2:	6122      	str	r2, [r4, #16]
 801bcc4:	b1d5      	cbz	r5, 801bcfc <__d2b+0x98>
 801bcc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801bcca:	4405      	add	r5, r0
 801bccc:	f8c9 5000 	str.w	r5, [r9]
 801bcd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801bcd4:	f8c8 0000 	str.w	r0, [r8]
 801bcd8:	4620      	mov	r0, r4
 801bcda:	b003      	add	sp, #12
 801bcdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bce4:	e7d5      	b.n	801bc92 <__d2b+0x2e>
 801bce6:	6161      	str	r1, [r4, #20]
 801bce8:	e7e5      	b.n	801bcb6 <__d2b+0x52>
 801bcea:	a801      	add	r0, sp, #4
 801bcec:	f7ff fce8 	bl	801b6c0 <__lo0bits>
 801bcf0:	9b01      	ldr	r3, [sp, #4]
 801bcf2:	6163      	str	r3, [r4, #20]
 801bcf4:	2201      	movs	r2, #1
 801bcf6:	6122      	str	r2, [r4, #16]
 801bcf8:	3020      	adds	r0, #32
 801bcfa:	e7e3      	b.n	801bcc4 <__d2b+0x60>
 801bcfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bd00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801bd04:	f8c9 0000 	str.w	r0, [r9]
 801bd08:	6918      	ldr	r0, [r3, #16]
 801bd0a:	f7ff fcb9 	bl	801b680 <__hi0bits>
 801bd0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801bd12:	e7df      	b.n	801bcd4 <__d2b+0x70>
 801bd14:	0801d466 	.word	0x0801d466
 801bd18:	0801d50b 	.word	0x0801d50b

0801bd1c <__ratio>:
 801bd1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd20:	4688      	mov	r8, r1
 801bd22:	4669      	mov	r1, sp
 801bd24:	4681      	mov	r9, r0
 801bd26:	f7ff ff4d 	bl	801bbc4 <__b2d>
 801bd2a:	a901      	add	r1, sp, #4
 801bd2c:	4640      	mov	r0, r8
 801bd2e:	ec55 4b10 	vmov	r4, r5, d0
 801bd32:	f7ff ff47 	bl	801bbc4 <__b2d>
 801bd36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bd3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801bd3e:	eba3 0c02 	sub.w	ip, r3, r2
 801bd42:	e9dd 3200 	ldrd	r3, r2, [sp]
 801bd46:	1a9b      	subs	r3, r3, r2
 801bd48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801bd4c:	ec51 0b10 	vmov	r0, r1, d0
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	bfd6      	itet	le
 801bd54:	460a      	movle	r2, r1
 801bd56:	462a      	movgt	r2, r5
 801bd58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801bd5c:	468b      	mov	fp, r1
 801bd5e:	462f      	mov	r7, r5
 801bd60:	bfd4      	ite	le
 801bd62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801bd66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801bd6a:	4620      	mov	r0, r4
 801bd6c:	ee10 2a10 	vmov	r2, s0
 801bd70:	465b      	mov	r3, fp
 801bd72:	4639      	mov	r1, r7
 801bd74:	f7e4 fd8a 	bl	800088c <__aeabi_ddiv>
 801bd78:	ec41 0b10 	vmov	d0, r0, r1
 801bd7c:	b003      	add	sp, #12
 801bd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bd82 <__copybits>:
 801bd82:	3901      	subs	r1, #1
 801bd84:	b570      	push	{r4, r5, r6, lr}
 801bd86:	1149      	asrs	r1, r1, #5
 801bd88:	6914      	ldr	r4, [r2, #16]
 801bd8a:	3101      	adds	r1, #1
 801bd8c:	f102 0314 	add.w	r3, r2, #20
 801bd90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bd94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801bd98:	1f05      	subs	r5, r0, #4
 801bd9a:	42a3      	cmp	r3, r4
 801bd9c:	d30c      	bcc.n	801bdb8 <__copybits+0x36>
 801bd9e:	1aa3      	subs	r3, r4, r2
 801bda0:	3b11      	subs	r3, #17
 801bda2:	f023 0303 	bic.w	r3, r3, #3
 801bda6:	3211      	adds	r2, #17
 801bda8:	42a2      	cmp	r2, r4
 801bdaa:	bf88      	it	hi
 801bdac:	2300      	movhi	r3, #0
 801bdae:	4418      	add	r0, r3
 801bdb0:	2300      	movs	r3, #0
 801bdb2:	4288      	cmp	r0, r1
 801bdb4:	d305      	bcc.n	801bdc2 <__copybits+0x40>
 801bdb6:	bd70      	pop	{r4, r5, r6, pc}
 801bdb8:	f853 6b04 	ldr.w	r6, [r3], #4
 801bdbc:	f845 6f04 	str.w	r6, [r5, #4]!
 801bdc0:	e7eb      	b.n	801bd9a <__copybits+0x18>
 801bdc2:	f840 3b04 	str.w	r3, [r0], #4
 801bdc6:	e7f4      	b.n	801bdb2 <__copybits+0x30>

0801bdc8 <__any_on>:
 801bdc8:	f100 0214 	add.w	r2, r0, #20
 801bdcc:	6900      	ldr	r0, [r0, #16]
 801bdce:	114b      	asrs	r3, r1, #5
 801bdd0:	4298      	cmp	r0, r3
 801bdd2:	b510      	push	{r4, lr}
 801bdd4:	db11      	blt.n	801bdfa <__any_on+0x32>
 801bdd6:	dd0a      	ble.n	801bdee <__any_on+0x26>
 801bdd8:	f011 011f 	ands.w	r1, r1, #31
 801bddc:	d007      	beq.n	801bdee <__any_on+0x26>
 801bdde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bde2:	fa24 f001 	lsr.w	r0, r4, r1
 801bde6:	fa00 f101 	lsl.w	r1, r0, r1
 801bdea:	428c      	cmp	r4, r1
 801bdec:	d10b      	bne.n	801be06 <__any_on+0x3e>
 801bdee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bdf2:	4293      	cmp	r3, r2
 801bdf4:	d803      	bhi.n	801bdfe <__any_on+0x36>
 801bdf6:	2000      	movs	r0, #0
 801bdf8:	bd10      	pop	{r4, pc}
 801bdfa:	4603      	mov	r3, r0
 801bdfc:	e7f7      	b.n	801bdee <__any_on+0x26>
 801bdfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801be02:	2900      	cmp	r1, #0
 801be04:	d0f5      	beq.n	801bdf2 <__any_on+0x2a>
 801be06:	2001      	movs	r0, #1
 801be08:	e7f6      	b.n	801bdf8 <__any_on+0x30>

0801be0a <_calloc_r>:
 801be0a:	b513      	push	{r0, r1, r4, lr}
 801be0c:	434a      	muls	r2, r1
 801be0e:	4611      	mov	r1, r2
 801be10:	9201      	str	r2, [sp, #4]
 801be12:	f7fd ffb1 	bl	8019d78 <_malloc_r>
 801be16:	4604      	mov	r4, r0
 801be18:	b118      	cbz	r0, 801be22 <_calloc_r+0x18>
 801be1a:	9a01      	ldr	r2, [sp, #4]
 801be1c:	2100      	movs	r1, #0
 801be1e:	f7fd ff53 	bl	8019cc8 <memset>
 801be22:	4620      	mov	r0, r4
 801be24:	b002      	add	sp, #8
 801be26:	bd10      	pop	{r4, pc}

0801be28 <nan>:
 801be28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801be30 <nan+0x8>
 801be2c:	4770      	bx	lr
 801be2e:	bf00      	nop
 801be30:	00000000 	.word	0x00000000
 801be34:	7ff80000 	.word	0x7ff80000

0801be38 <nanf>:
 801be38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801be40 <nanf+0x8>
 801be3c:	4770      	bx	lr
 801be3e:	bf00      	nop
 801be40:	7fc00000 	.word	0x7fc00000

0801be44 <strncmp>:
 801be44:	b510      	push	{r4, lr}
 801be46:	b16a      	cbz	r2, 801be64 <strncmp+0x20>
 801be48:	3901      	subs	r1, #1
 801be4a:	1884      	adds	r4, r0, r2
 801be4c:	f810 3b01 	ldrb.w	r3, [r0], #1
 801be50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801be54:	4293      	cmp	r3, r2
 801be56:	d103      	bne.n	801be60 <strncmp+0x1c>
 801be58:	42a0      	cmp	r0, r4
 801be5a:	d001      	beq.n	801be60 <strncmp+0x1c>
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d1f5      	bne.n	801be4c <strncmp+0x8>
 801be60:	1a98      	subs	r0, r3, r2
 801be62:	bd10      	pop	{r4, pc}
 801be64:	4610      	mov	r0, r2
 801be66:	e7fc      	b.n	801be62 <strncmp+0x1e>

0801be68 <__ascii_wctomb>:
 801be68:	b149      	cbz	r1, 801be7e <__ascii_wctomb+0x16>
 801be6a:	2aff      	cmp	r2, #255	; 0xff
 801be6c:	bf85      	ittet	hi
 801be6e:	238a      	movhi	r3, #138	; 0x8a
 801be70:	6003      	strhi	r3, [r0, #0]
 801be72:	700a      	strbls	r2, [r1, #0]
 801be74:	f04f 30ff 	movhi.w	r0, #4294967295
 801be78:	bf98      	it	ls
 801be7a:	2001      	movls	r0, #1
 801be7c:	4770      	bx	lr
 801be7e:	4608      	mov	r0, r1
 801be80:	4770      	bx	lr
	...

0801be84 <__assert_func>:
 801be84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801be86:	4614      	mov	r4, r2
 801be88:	461a      	mov	r2, r3
 801be8a:	4b09      	ldr	r3, [pc, #36]	; (801beb0 <__assert_func+0x2c>)
 801be8c:	681b      	ldr	r3, [r3, #0]
 801be8e:	4605      	mov	r5, r0
 801be90:	68d8      	ldr	r0, [r3, #12]
 801be92:	b14c      	cbz	r4, 801bea8 <__assert_func+0x24>
 801be94:	4b07      	ldr	r3, [pc, #28]	; (801beb4 <__assert_func+0x30>)
 801be96:	9100      	str	r1, [sp, #0]
 801be98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801be9c:	4906      	ldr	r1, [pc, #24]	; (801beb8 <__assert_func+0x34>)
 801be9e:	462b      	mov	r3, r5
 801bea0:	f000 f80e 	bl	801bec0 <fiprintf>
 801bea4:	f7fd fe66 	bl	8019b74 <abort>
 801bea8:	4b04      	ldr	r3, [pc, #16]	; (801bebc <__assert_func+0x38>)
 801beaa:	461c      	mov	r4, r3
 801beac:	e7f3      	b.n	801be96 <__assert_func+0x12>
 801beae:	bf00      	nop
 801beb0:	2000000c 	.word	0x2000000c
 801beb4:	0801d66c 	.word	0x0801d66c
 801beb8:	0801d679 	.word	0x0801d679
 801bebc:	0801d6a7 	.word	0x0801d6a7

0801bec0 <fiprintf>:
 801bec0:	b40e      	push	{r1, r2, r3}
 801bec2:	b503      	push	{r0, r1, lr}
 801bec4:	4601      	mov	r1, r0
 801bec6:	ab03      	add	r3, sp, #12
 801bec8:	4805      	ldr	r0, [pc, #20]	; (801bee0 <fiprintf+0x20>)
 801beca:	f853 2b04 	ldr.w	r2, [r3], #4
 801bece:	6800      	ldr	r0, [r0, #0]
 801bed0:	9301      	str	r3, [sp, #4]
 801bed2:	f000 f833 	bl	801bf3c <_vfiprintf_r>
 801bed6:	b002      	add	sp, #8
 801bed8:	f85d eb04 	ldr.w	lr, [sp], #4
 801bedc:	b003      	add	sp, #12
 801bede:	4770      	bx	lr
 801bee0:	2000000c 	.word	0x2000000c

0801bee4 <__retarget_lock_init_recursive>:
 801bee4:	4770      	bx	lr

0801bee6 <__retarget_lock_acquire_recursive>:
 801bee6:	4770      	bx	lr

0801bee8 <__retarget_lock_release_recursive>:
 801bee8:	4770      	bx	lr

0801beea <__sfputc_r>:
 801beea:	6893      	ldr	r3, [r2, #8]
 801beec:	3b01      	subs	r3, #1
 801beee:	2b00      	cmp	r3, #0
 801bef0:	b410      	push	{r4}
 801bef2:	6093      	str	r3, [r2, #8]
 801bef4:	da08      	bge.n	801bf08 <__sfputc_r+0x1e>
 801bef6:	6994      	ldr	r4, [r2, #24]
 801bef8:	42a3      	cmp	r3, r4
 801befa:	db01      	blt.n	801bf00 <__sfputc_r+0x16>
 801befc:	290a      	cmp	r1, #10
 801befe:	d103      	bne.n	801bf08 <__sfputc_r+0x1e>
 801bf00:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf04:	f000 bade 	b.w	801c4c4 <__swbuf_r>
 801bf08:	6813      	ldr	r3, [r2, #0]
 801bf0a:	1c58      	adds	r0, r3, #1
 801bf0c:	6010      	str	r0, [r2, #0]
 801bf0e:	7019      	strb	r1, [r3, #0]
 801bf10:	4608      	mov	r0, r1
 801bf12:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf16:	4770      	bx	lr

0801bf18 <__sfputs_r>:
 801bf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf1a:	4606      	mov	r6, r0
 801bf1c:	460f      	mov	r7, r1
 801bf1e:	4614      	mov	r4, r2
 801bf20:	18d5      	adds	r5, r2, r3
 801bf22:	42ac      	cmp	r4, r5
 801bf24:	d101      	bne.n	801bf2a <__sfputs_r+0x12>
 801bf26:	2000      	movs	r0, #0
 801bf28:	e007      	b.n	801bf3a <__sfputs_r+0x22>
 801bf2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf2e:	463a      	mov	r2, r7
 801bf30:	4630      	mov	r0, r6
 801bf32:	f7ff ffda 	bl	801beea <__sfputc_r>
 801bf36:	1c43      	adds	r3, r0, #1
 801bf38:	d1f3      	bne.n	801bf22 <__sfputs_r+0xa>
 801bf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bf3c <_vfiprintf_r>:
 801bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf40:	460d      	mov	r5, r1
 801bf42:	b09d      	sub	sp, #116	; 0x74
 801bf44:	4614      	mov	r4, r2
 801bf46:	4698      	mov	r8, r3
 801bf48:	4606      	mov	r6, r0
 801bf4a:	b118      	cbz	r0, 801bf54 <_vfiprintf_r+0x18>
 801bf4c:	6983      	ldr	r3, [r0, #24]
 801bf4e:	b90b      	cbnz	r3, 801bf54 <_vfiprintf_r+0x18>
 801bf50:	f000 fc92 	bl	801c878 <__sinit>
 801bf54:	4b89      	ldr	r3, [pc, #548]	; (801c17c <_vfiprintf_r+0x240>)
 801bf56:	429d      	cmp	r5, r3
 801bf58:	d11b      	bne.n	801bf92 <_vfiprintf_r+0x56>
 801bf5a:	6875      	ldr	r5, [r6, #4]
 801bf5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bf5e:	07d9      	lsls	r1, r3, #31
 801bf60:	d405      	bmi.n	801bf6e <_vfiprintf_r+0x32>
 801bf62:	89ab      	ldrh	r3, [r5, #12]
 801bf64:	059a      	lsls	r2, r3, #22
 801bf66:	d402      	bmi.n	801bf6e <_vfiprintf_r+0x32>
 801bf68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bf6a:	f7ff ffbc 	bl	801bee6 <__retarget_lock_acquire_recursive>
 801bf6e:	89ab      	ldrh	r3, [r5, #12]
 801bf70:	071b      	lsls	r3, r3, #28
 801bf72:	d501      	bpl.n	801bf78 <_vfiprintf_r+0x3c>
 801bf74:	692b      	ldr	r3, [r5, #16]
 801bf76:	b9eb      	cbnz	r3, 801bfb4 <_vfiprintf_r+0x78>
 801bf78:	4629      	mov	r1, r5
 801bf7a:	4630      	mov	r0, r6
 801bf7c:	f000 faf4 	bl	801c568 <__swsetup_r>
 801bf80:	b1c0      	cbz	r0, 801bfb4 <_vfiprintf_r+0x78>
 801bf82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bf84:	07dc      	lsls	r4, r3, #31
 801bf86:	d50e      	bpl.n	801bfa6 <_vfiprintf_r+0x6a>
 801bf88:	f04f 30ff 	mov.w	r0, #4294967295
 801bf8c:	b01d      	add	sp, #116	; 0x74
 801bf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf92:	4b7b      	ldr	r3, [pc, #492]	; (801c180 <_vfiprintf_r+0x244>)
 801bf94:	429d      	cmp	r5, r3
 801bf96:	d101      	bne.n	801bf9c <_vfiprintf_r+0x60>
 801bf98:	68b5      	ldr	r5, [r6, #8]
 801bf9a:	e7df      	b.n	801bf5c <_vfiprintf_r+0x20>
 801bf9c:	4b79      	ldr	r3, [pc, #484]	; (801c184 <_vfiprintf_r+0x248>)
 801bf9e:	429d      	cmp	r5, r3
 801bfa0:	bf08      	it	eq
 801bfa2:	68f5      	ldreq	r5, [r6, #12]
 801bfa4:	e7da      	b.n	801bf5c <_vfiprintf_r+0x20>
 801bfa6:	89ab      	ldrh	r3, [r5, #12]
 801bfa8:	0598      	lsls	r0, r3, #22
 801bfaa:	d4ed      	bmi.n	801bf88 <_vfiprintf_r+0x4c>
 801bfac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bfae:	f7ff ff9b 	bl	801bee8 <__retarget_lock_release_recursive>
 801bfb2:	e7e9      	b.n	801bf88 <_vfiprintf_r+0x4c>
 801bfb4:	2300      	movs	r3, #0
 801bfb6:	9309      	str	r3, [sp, #36]	; 0x24
 801bfb8:	2320      	movs	r3, #32
 801bfba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bfbe:	f8cd 800c 	str.w	r8, [sp, #12]
 801bfc2:	2330      	movs	r3, #48	; 0x30
 801bfc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c188 <_vfiprintf_r+0x24c>
 801bfc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bfcc:	f04f 0901 	mov.w	r9, #1
 801bfd0:	4623      	mov	r3, r4
 801bfd2:	469a      	mov	sl, r3
 801bfd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bfd8:	b10a      	cbz	r2, 801bfde <_vfiprintf_r+0xa2>
 801bfda:	2a25      	cmp	r2, #37	; 0x25
 801bfdc:	d1f9      	bne.n	801bfd2 <_vfiprintf_r+0x96>
 801bfde:	ebba 0b04 	subs.w	fp, sl, r4
 801bfe2:	d00b      	beq.n	801bffc <_vfiprintf_r+0xc0>
 801bfe4:	465b      	mov	r3, fp
 801bfe6:	4622      	mov	r2, r4
 801bfe8:	4629      	mov	r1, r5
 801bfea:	4630      	mov	r0, r6
 801bfec:	f7ff ff94 	bl	801bf18 <__sfputs_r>
 801bff0:	3001      	adds	r0, #1
 801bff2:	f000 80aa 	beq.w	801c14a <_vfiprintf_r+0x20e>
 801bff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bff8:	445a      	add	r2, fp
 801bffa:	9209      	str	r2, [sp, #36]	; 0x24
 801bffc:	f89a 3000 	ldrb.w	r3, [sl]
 801c000:	2b00      	cmp	r3, #0
 801c002:	f000 80a2 	beq.w	801c14a <_vfiprintf_r+0x20e>
 801c006:	2300      	movs	r3, #0
 801c008:	f04f 32ff 	mov.w	r2, #4294967295
 801c00c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c010:	f10a 0a01 	add.w	sl, sl, #1
 801c014:	9304      	str	r3, [sp, #16]
 801c016:	9307      	str	r3, [sp, #28]
 801c018:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c01c:	931a      	str	r3, [sp, #104]	; 0x68
 801c01e:	4654      	mov	r4, sl
 801c020:	2205      	movs	r2, #5
 801c022:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c026:	4858      	ldr	r0, [pc, #352]	; (801c188 <_vfiprintf_r+0x24c>)
 801c028:	f7e4 f8f2 	bl	8000210 <memchr>
 801c02c:	9a04      	ldr	r2, [sp, #16]
 801c02e:	b9d8      	cbnz	r0, 801c068 <_vfiprintf_r+0x12c>
 801c030:	06d1      	lsls	r1, r2, #27
 801c032:	bf44      	itt	mi
 801c034:	2320      	movmi	r3, #32
 801c036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c03a:	0713      	lsls	r3, r2, #28
 801c03c:	bf44      	itt	mi
 801c03e:	232b      	movmi	r3, #43	; 0x2b
 801c040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c044:	f89a 3000 	ldrb.w	r3, [sl]
 801c048:	2b2a      	cmp	r3, #42	; 0x2a
 801c04a:	d015      	beq.n	801c078 <_vfiprintf_r+0x13c>
 801c04c:	9a07      	ldr	r2, [sp, #28]
 801c04e:	4654      	mov	r4, sl
 801c050:	2000      	movs	r0, #0
 801c052:	f04f 0c0a 	mov.w	ip, #10
 801c056:	4621      	mov	r1, r4
 801c058:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c05c:	3b30      	subs	r3, #48	; 0x30
 801c05e:	2b09      	cmp	r3, #9
 801c060:	d94e      	bls.n	801c100 <_vfiprintf_r+0x1c4>
 801c062:	b1b0      	cbz	r0, 801c092 <_vfiprintf_r+0x156>
 801c064:	9207      	str	r2, [sp, #28]
 801c066:	e014      	b.n	801c092 <_vfiprintf_r+0x156>
 801c068:	eba0 0308 	sub.w	r3, r0, r8
 801c06c:	fa09 f303 	lsl.w	r3, r9, r3
 801c070:	4313      	orrs	r3, r2
 801c072:	9304      	str	r3, [sp, #16]
 801c074:	46a2      	mov	sl, r4
 801c076:	e7d2      	b.n	801c01e <_vfiprintf_r+0xe2>
 801c078:	9b03      	ldr	r3, [sp, #12]
 801c07a:	1d19      	adds	r1, r3, #4
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	9103      	str	r1, [sp, #12]
 801c080:	2b00      	cmp	r3, #0
 801c082:	bfbb      	ittet	lt
 801c084:	425b      	neglt	r3, r3
 801c086:	f042 0202 	orrlt.w	r2, r2, #2
 801c08a:	9307      	strge	r3, [sp, #28]
 801c08c:	9307      	strlt	r3, [sp, #28]
 801c08e:	bfb8      	it	lt
 801c090:	9204      	strlt	r2, [sp, #16]
 801c092:	7823      	ldrb	r3, [r4, #0]
 801c094:	2b2e      	cmp	r3, #46	; 0x2e
 801c096:	d10c      	bne.n	801c0b2 <_vfiprintf_r+0x176>
 801c098:	7863      	ldrb	r3, [r4, #1]
 801c09a:	2b2a      	cmp	r3, #42	; 0x2a
 801c09c:	d135      	bne.n	801c10a <_vfiprintf_r+0x1ce>
 801c09e:	9b03      	ldr	r3, [sp, #12]
 801c0a0:	1d1a      	adds	r2, r3, #4
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	9203      	str	r2, [sp, #12]
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	bfb8      	it	lt
 801c0aa:	f04f 33ff 	movlt.w	r3, #4294967295
 801c0ae:	3402      	adds	r4, #2
 801c0b0:	9305      	str	r3, [sp, #20]
 801c0b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c198 <_vfiprintf_r+0x25c>
 801c0b6:	7821      	ldrb	r1, [r4, #0]
 801c0b8:	2203      	movs	r2, #3
 801c0ba:	4650      	mov	r0, sl
 801c0bc:	f7e4 f8a8 	bl	8000210 <memchr>
 801c0c0:	b140      	cbz	r0, 801c0d4 <_vfiprintf_r+0x198>
 801c0c2:	2340      	movs	r3, #64	; 0x40
 801c0c4:	eba0 000a 	sub.w	r0, r0, sl
 801c0c8:	fa03 f000 	lsl.w	r0, r3, r0
 801c0cc:	9b04      	ldr	r3, [sp, #16]
 801c0ce:	4303      	orrs	r3, r0
 801c0d0:	3401      	adds	r4, #1
 801c0d2:	9304      	str	r3, [sp, #16]
 801c0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c0d8:	482c      	ldr	r0, [pc, #176]	; (801c18c <_vfiprintf_r+0x250>)
 801c0da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c0de:	2206      	movs	r2, #6
 801c0e0:	f7e4 f896 	bl	8000210 <memchr>
 801c0e4:	2800      	cmp	r0, #0
 801c0e6:	d03f      	beq.n	801c168 <_vfiprintf_r+0x22c>
 801c0e8:	4b29      	ldr	r3, [pc, #164]	; (801c190 <_vfiprintf_r+0x254>)
 801c0ea:	bb1b      	cbnz	r3, 801c134 <_vfiprintf_r+0x1f8>
 801c0ec:	9b03      	ldr	r3, [sp, #12]
 801c0ee:	3307      	adds	r3, #7
 801c0f0:	f023 0307 	bic.w	r3, r3, #7
 801c0f4:	3308      	adds	r3, #8
 801c0f6:	9303      	str	r3, [sp, #12]
 801c0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0fa:	443b      	add	r3, r7
 801c0fc:	9309      	str	r3, [sp, #36]	; 0x24
 801c0fe:	e767      	b.n	801bfd0 <_vfiprintf_r+0x94>
 801c100:	fb0c 3202 	mla	r2, ip, r2, r3
 801c104:	460c      	mov	r4, r1
 801c106:	2001      	movs	r0, #1
 801c108:	e7a5      	b.n	801c056 <_vfiprintf_r+0x11a>
 801c10a:	2300      	movs	r3, #0
 801c10c:	3401      	adds	r4, #1
 801c10e:	9305      	str	r3, [sp, #20]
 801c110:	4619      	mov	r1, r3
 801c112:	f04f 0c0a 	mov.w	ip, #10
 801c116:	4620      	mov	r0, r4
 801c118:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c11c:	3a30      	subs	r2, #48	; 0x30
 801c11e:	2a09      	cmp	r2, #9
 801c120:	d903      	bls.n	801c12a <_vfiprintf_r+0x1ee>
 801c122:	2b00      	cmp	r3, #0
 801c124:	d0c5      	beq.n	801c0b2 <_vfiprintf_r+0x176>
 801c126:	9105      	str	r1, [sp, #20]
 801c128:	e7c3      	b.n	801c0b2 <_vfiprintf_r+0x176>
 801c12a:	fb0c 2101 	mla	r1, ip, r1, r2
 801c12e:	4604      	mov	r4, r0
 801c130:	2301      	movs	r3, #1
 801c132:	e7f0      	b.n	801c116 <_vfiprintf_r+0x1da>
 801c134:	ab03      	add	r3, sp, #12
 801c136:	9300      	str	r3, [sp, #0]
 801c138:	462a      	mov	r2, r5
 801c13a:	4b16      	ldr	r3, [pc, #88]	; (801c194 <_vfiprintf_r+0x258>)
 801c13c:	a904      	add	r1, sp, #16
 801c13e:	4630      	mov	r0, r6
 801c140:	f3af 8000 	nop.w
 801c144:	4607      	mov	r7, r0
 801c146:	1c78      	adds	r0, r7, #1
 801c148:	d1d6      	bne.n	801c0f8 <_vfiprintf_r+0x1bc>
 801c14a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c14c:	07d9      	lsls	r1, r3, #31
 801c14e:	d405      	bmi.n	801c15c <_vfiprintf_r+0x220>
 801c150:	89ab      	ldrh	r3, [r5, #12]
 801c152:	059a      	lsls	r2, r3, #22
 801c154:	d402      	bmi.n	801c15c <_vfiprintf_r+0x220>
 801c156:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c158:	f7ff fec6 	bl	801bee8 <__retarget_lock_release_recursive>
 801c15c:	89ab      	ldrh	r3, [r5, #12]
 801c15e:	065b      	lsls	r3, r3, #25
 801c160:	f53f af12 	bmi.w	801bf88 <_vfiprintf_r+0x4c>
 801c164:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c166:	e711      	b.n	801bf8c <_vfiprintf_r+0x50>
 801c168:	ab03      	add	r3, sp, #12
 801c16a:	9300      	str	r3, [sp, #0]
 801c16c:	462a      	mov	r2, r5
 801c16e:	4b09      	ldr	r3, [pc, #36]	; (801c194 <_vfiprintf_r+0x258>)
 801c170:	a904      	add	r1, sp, #16
 801c172:	4630      	mov	r0, r6
 801c174:	f000 f880 	bl	801c278 <_printf_i>
 801c178:	e7e4      	b.n	801c144 <_vfiprintf_r+0x208>
 801c17a:	bf00      	nop
 801c17c:	0801d6fc 	.word	0x0801d6fc
 801c180:	0801d71c 	.word	0x0801d71c
 801c184:	0801d6dc 	.word	0x0801d6dc
 801c188:	0801d6a8 	.word	0x0801d6a8
 801c18c:	0801d6b2 	.word	0x0801d6b2
 801c190:	00000000 	.word	0x00000000
 801c194:	0801bf19 	.word	0x0801bf19
 801c198:	0801d6ae 	.word	0x0801d6ae

0801c19c <_printf_common>:
 801c19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1a0:	4616      	mov	r6, r2
 801c1a2:	4699      	mov	r9, r3
 801c1a4:	688a      	ldr	r2, [r1, #8]
 801c1a6:	690b      	ldr	r3, [r1, #16]
 801c1a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c1ac:	4293      	cmp	r3, r2
 801c1ae:	bfb8      	it	lt
 801c1b0:	4613      	movlt	r3, r2
 801c1b2:	6033      	str	r3, [r6, #0]
 801c1b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c1b8:	4607      	mov	r7, r0
 801c1ba:	460c      	mov	r4, r1
 801c1bc:	b10a      	cbz	r2, 801c1c2 <_printf_common+0x26>
 801c1be:	3301      	adds	r3, #1
 801c1c0:	6033      	str	r3, [r6, #0]
 801c1c2:	6823      	ldr	r3, [r4, #0]
 801c1c4:	0699      	lsls	r1, r3, #26
 801c1c6:	bf42      	ittt	mi
 801c1c8:	6833      	ldrmi	r3, [r6, #0]
 801c1ca:	3302      	addmi	r3, #2
 801c1cc:	6033      	strmi	r3, [r6, #0]
 801c1ce:	6825      	ldr	r5, [r4, #0]
 801c1d0:	f015 0506 	ands.w	r5, r5, #6
 801c1d4:	d106      	bne.n	801c1e4 <_printf_common+0x48>
 801c1d6:	f104 0a19 	add.w	sl, r4, #25
 801c1da:	68e3      	ldr	r3, [r4, #12]
 801c1dc:	6832      	ldr	r2, [r6, #0]
 801c1de:	1a9b      	subs	r3, r3, r2
 801c1e0:	42ab      	cmp	r3, r5
 801c1e2:	dc26      	bgt.n	801c232 <_printf_common+0x96>
 801c1e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c1e8:	1e13      	subs	r3, r2, #0
 801c1ea:	6822      	ldr	r2, [r4, #0]
 801c1ec:	bf18      	it	ne
 801c1ee:	2301      	movne	r3, #1
 801c1f0:	0692      	lsls	r2, r2, #26
 801c1f2:	d42b      	bmi.n	801c24c <_printf_common+0xb0>
 801c1f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c1f8:	4649      	mov	r1, r9
 801c1fa:	4638      	mov	r0, r7
 801c1fc:	47c0      	blx	r8
 801c1fe:	3001      	adds	r0, #1
 801c200:	d01e      	beq.n	801c240 <_printf_common+0xa4>
 801c202:	6823      	ldr	r3, [r4, #0]
 801c204:	68e5      	ldr	r5, [r4, #12]
 801c206:	6832      	ldr	r2, [r6, #0]
 801c208:	f003 0306 	and.w	r3, r3, #6
 801c20c:	2b04      	cmp	r3, #4
 801c20e:	bf08      	it	eq
 801c210:	1aad      	subeq	r5, r5, r2
 801c212:	68a3      	ldr	r3, [r4, #8]
 801c214:	6922      	ldr	r2, [r4, #16]
 801c216:	bf0c      	ite	eq
 801c218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c21c:	2500      	movne	r5, #0
 801c21e:	4293      	cmp	r3, r2
 801c220:	bfc4      	itt	gt
 801c222:	1a9b      	subgt	r3, r3, r2
 801c224:	18ed      	addgt	r5, r5, r3
 801c226:	2600      	movs	r6, #0
 801c228:	341a      	adds	r4, #26
 801c22a:	42b5      	cmp	r5, r6
 801c22c:	d11a      	bne.n	801c264 <_printf_common+0xc8>
 801c22e:	2000      	movs	r0, #0
 801c230:	e008      	b.n	801c244 <_printf_common+0xa8>
 801c232:	2301      	movs	r3, #1
 801c234:	4652      	mov	r2, sl
 801c236:	4649      	mov	r1, r9
 801c238:	4638      	mov	r0, r7
 801c23a:	47c0      	blx	r8
 801c23c:	3001      	adds	r0, #1
 801c23e:	d103      	bne.n	801c248 <_printf_common+0xac>
 801c240:	f04f 30ff 	mov.w	r0, #4294967295
 801c244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c248:	3501      	adds	r5, #1
 801c24a:	e7c6      	b.n	801c1da <_printf_common+0x3e>
 801c24c:	18e1      	adds	r1, r4, r3
 801c24e:	1c5a      	adds	r2, r3, #1
 801c250:	2030      	movs	r0, #48	; 0x30
 801c252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c256:	4422      	add	r2, r4
 801c258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c25c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c260:	3302      	adds	r3, #2
 801c262:	e7c7      	b.n	801c1f4 <_printf_common+0x58>
 801c264:	2301      	movs	r3, #1
 801c266:	4622      	mov	r2, r4
 801c268:	4649      	mov	r1, r9
 801c26a:	4638      	mov	r0, r7
 801c26c:	47c0      	blx	r8
 801c26e:	3001      	adds	r0, #1
 801c270:	d0e6      	beq.n	801c240 <_printf_common+0xa4>
 801c272:	3601      	adds	r6, #1
 801c274:	e7d9      	b.n	801c22a <_printf_common+0x8e>
	...

0801c278 <_printf_i>:
 801c278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c27c:	460c      	mov	r4, r1
 801c27e:	4691      	mov	r9, r2
 801c280:	7e27      	ldrb	r7, [r4, #24]
 801c282:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c284:	2f78      	cmp	r7, #120	; 0x78
 801c286:	4680      	mov	r8, r0
 801c288:	469a      	mov	sl, r3
 801c28a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c28e:	d807      	bhi.n	801c2a0 <_printf_i+0x28>
 801c290:	2f62      	cmp	r7, #98	; 0x62
 801c292:	d80a      	bhi.n	801c2aa <_printf_i+0x32>
 801c294:	2f00      	cmp	r7, #0
 801c296:	f000 80d8 	beq.w	801c44a <_printf_i+0x1d2>
 801c29a:	2f58      	cmp	r7, #88	; 0x58
 801c29c:	f000 80a3 	beq.w	801c3e6 <_printf_i+0x16e>
 801c2a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c2a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c2a8:	e03a      	b.n	801c320 <_printf_i+0xa8>
 801c2aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c2ae:	2b15      	cmp	r3, #21
 801c2b0:	d8f6      	bhi.n	801c2a0 <_printf_i+0x28>
 801c2b2:	a001      	add	r0, pc, #4	; (adr r0, 801c2b8 <_printf_i+0x40>)
 801c2b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c2b8:	0801c311 	.word	0x0801c311
 801c2bc:	0801c325 	.word	0x0801c325
 801c2c0:	0801c2a1 	.word	0x0801c2a1
 801c2c4:	0801c2a1 	.word	0x0801c2a1
 801c2c8:	0801c2a1 	.word	0x0801c2a1
 801c2cc:	0801c2a1 	.word	0x0801c2a1
 801c2d0:	0801c325 	.word	0x0801c325
 801c2d4:	0801c2a1 	.word	0x0801c2a1
 801c2d8:	0801c2a1 	.word	0x0801c2a1
 801c2dc:	0801c2a1 	.word	0x0801c2a1
 801c2e0:	0801c2a1 	.word	0x0801c2a1
 801c2e4:	0801c431 	.word	0x0801c431
 801c2e8:	0801c355 	.word	0x0801c355
 801c2ec:	0801c413 	.word	0x0801c413
 801c2f0:	0801c2a1 	.word	0x0801c2a1
 801c2f4:	0801c2a1 	.word	0x0801c2a1
 801c2f8:	0801c453 	.word	0x0801c453
 801c2fc:	0801c2a1 	.word	0x0801c2a1
 801c300:	0801c355 	.word	0x0801c355
 801c304:	0801c2a1 	.word	0x0801c2a1
 801c308:	0801c2a1 	.word	0x0801c2a1
 801c30c:	0801c41b 	.word	0x0801c41b
 801c310:	680b      	ldr	r3, [r1, #0]
 801c312:	1d1a      	adds	r2, r3, #4
 801c314:	681b      	ldr	r3, [r3, #0]
 801c316:	600a      	str	r2, [r1, #0]
 801c318:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c31c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c320:	2301      	movs	r3, #1
 801c322:	e0a3      	b.n	801c46c <_printf_i+0x1f4>
 801c324:	6825      	ldr	r5, [r4, #0]
 801c326:	6808      	ldr	r0, [r1, #0]
 801c328:	062e      	lsls	r6, r5, #24
 801c32a:	f100 0304 	add.w	r3, r0, #4
 801c32e:	d50a      	bpl.n	801c346 <_printf_i+0xce>
 801c330:	6805      	ldr	r5, [r0, #0]
 801c332:	600b      	str	r3, [r1, #0]
 801c334:	2d00      	cmp	r5, #0
 801c336:	da03      	bge.n	801c340 <_printf_i+0xc8>
 801c338:	232d      	movs	r3, #45	; 0x2d
 801c33a:	426d      	negs	r5, r5
 801c33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c340:	485e      	ldr	r0, [pc, #376]	; (801c4bc <_printf_i+0x244>)
 801c342:	230a      	movs	r3, #10
 801c344:	e019      	b.n	801c37a <_printf_i+0x102>
 801c346:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c34a:	6805      	ldr	r5, [r0, #0]
 801c34c:	600b      	str	r3, [r1, #0]
 801c34e:	bf18      	it	ne
 801c350:	b22d      	sxthne	r5, r5
 801c352:	e7ef      	b.n	801c334 <_printf_i+0xbc>
 801c354:	680b      	ldr	r3, [r1, #0]
 801c356:	6825      	ldr	r5, [r4, #0]
 801c358:	1d18      	adds	r0, r3, #4
 801c35a:	6008      	str	r0, [r1, #0]
 801c35c:	0628      	lsls	r0, r5, #24
 801c35e:	d501      	bpl.n	801c364 <_printf_i+0xec>
 801c360:	681d      	ldr	r5, [r3, #0]
 801c362:	e002      	b.n	801c36a <_printf_i+0xf2>
 801c364:	0669      	lsls	r1, r5, #25
 801c366:	d5fb      	bpl.n	801c360 <_printf_i+0xe8>
 801c368:	881d      	ldrh	r5, [r3, #0]
 801c36a:	4854      	ldr	r0, [pc, #336]	; (801c4bc <_printf_i+0x244>)
 801c36c:	2f6f      	cmp	r7, #111	; 0x6f
 801c36e:	bf0c      	ite	eq
 801c370:	2308      	moveq	r3, #8
 801c372:	230a      	movne	r3, #10
 801c374:	2100      	movs	r1, #0
 801c376:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c37a:	6866      	ldr	r6, [r4, #4]
 801c37c:	60a6      	str	r6, [r4, #8]
 801c37e:	2e00      	cmp	r6, #0
 801c380:	bfa2      	ittt	ge
 801c382:	6821      	ldrge	r1, [r4, #0]
 801c384:	f021 0104 	bicge.w	r1, r1, #4
 801c388:	6021      	strge	r1, [r4, #0]
 801c38a:	b90d      	cbnz	r5, 801c390 <_printf_i+0x118>
 801c38c:	2e00      	cmp	r6, #0
 801c38e:	d04d      	beq.n	801c42c <_printf_i+0x1b4>
 801c390:	4616      	mov	r6, r2
 801c392:	fbb5 f1f3 	udiv	r1, r5, r3
 801c396:	fb03 5711 	mls	r7, r3, r1, r5
 801c39a:	5dc7      	ldrb	r7, [r0, r7]
 801c39c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c3a0:	462f      	mov	r7, r5
 801c3a2:	42bb      	cmp	r3, r7
 801c3a4:	460d      	mov	r5, r1
 801c3a6:	d9f4      	bls.n	801c392 <_printf_i+0x11a>
 801c3a8:	2b08      	cmp	r3, #8
 801c3aa:	d10b      	bne.n	801c3c4 <_printf_i+0x14c>
 801c3ac:	6823      	ldr	r3, [r4, #0]
 801c3ae:	07df      	lsls	r7, r3, #31
 801c3b0:	d508      	bpl.n	801c3c4 <_printf_i+0x14c>
 801c3b2:	6923      	ldr	r3, [r4, #16]
 801c3b4:	6861      	ldr	r1, [r4, #4]
 801c3b6:	4299      	cmp	r1, r3
 801c3b8:	bfde      	ittt	le
 801c3ba:	2330      	movle	r3, #48	; 0x30
 801c3bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c3c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c3c4:	1b92      	subs	r2, r2, r6
 801c3c6:	6122      	str	r2, [r4, #16]
 801c3c8:	f8cd a000 	str.w	sl, [sp]
 801c3cc:	464b      	mov	r3, r9
 801c3ce:	aa03      	add	r2, sp, #12
 801c3d0:	4621      	mov	r1, r4
 801c3d2:	4640      	mov	r0, r8
 801c3d4:	f7ff fee2 	bl	801c19c <_printf_common>
 801c3d8:	3001      	adds	r0, #1
 801c3da:	d14c      	bne.n	801c476 <_printf_i+0x1fe>
 801c3dc:	f04f 30ff 	mov.w	r0, #4294967295
 801c3e0:	b004      	add	sp, #16
 801c3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c3e6:	4835      	ldr	r0, [pc, #212]	; (801c4bc <_printf_i+0x244>)
 801c3e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c3ec:	6823      	ldr	r3, [r4, #0]
 801c3ee:	680e      	ldr	r6, [r1, #0]
 801c3f0:	061f      	lsls	r7, r3, #24
 801c3f2:	f856 5b04 	ldr.w	r5, [r6], #4
 801c3f6:	600e      	str	r6, [r1, #0]
 801c3f8:	d514      	bpl.n	801c424 <_printf_i+0x1ac>
 801c3fa:	07d9      	lsls	r1, r3, #31
 801c3fc:	bf44      	itt	mi
 801c3fe:	f043 0320 	orrmi.w	r3, r3, #32
 801c402:	6023      	strmi	r3, [r4, #0]
 801c404:	b91d      	cbnz	r5, 801c40e <_printf_i+0x196>
 801c406:	6823      	ldr	r3, [r4, #0]
 801c408:	f023 0320 	bic.w	r3, r3, #32
 801c40c:	6023      	str	r3, [r4, #0]
 801c40e:	2310      	movs	r3, #16
 801c410:	e7b0      	b.n	801c374 <_printf_i+0xfc>
 801c412:	6823      	ldr	r3, [r4, #0]
 801c414:	f043 0320 	orr.w	r3, r3, #32
 801c418:	6023      	str	r3, [r4, #0]
 801c41a:	2378      	movs	r3, #120	; 0x78
 801c41c:	4828      	ldr	r0, [pc, #160]	; (801c4c0 <_printf_i+0x248>)
 801c41e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c422:	e7e3      	b.n	801c3ec <_printf_i+0x174>
 801c424:	065e      	lsls	r6, r3, #25
 801c426:	bf48      	it	mi
 801c428:	b2ad      	uxthmi	r5, r5
 801c42a:	e7e6      	b.n	801c3fa <_printf_i+0x182>
 801c42c:	4616      	mov	r6, r2
 801c42e:	e7bb      	b.n	801c3a8 <_printf_i+0x130>
 801c430:	680b      	ldr	r3, [r1, #0]
 801c432:	6826      	ldr	r6, [r4, #0]
 801c434:	6960      	ldr	r0, [r4, #20]
 801c436:	1d1d      	adds	r5, r3, #4
 801c438:	600d      	str	r5, [r1, #0]
 801c43a:	0635      	lsls	r5, r6, #24
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	d501      	bpl.n	801c444 <_printf_i+0x1cc>
 801c440:	6018      	str	r0, [r3, #0]
 801c442:	e002      	b.n	801c44a <_printf_i+0x1d2>
 801c444:	0671      	lsls	r1, r6, #25
 801c446:	d5fb      	bpl.n	801c440 <_printf_i+0x1c8>
 801c448:	8018      	strh	r0, [r3, #0]
 801c44a:	2300      	movs	r3, #0
 801c44c:	6123      	str	r3, [r4, #16]
 801c44e:	4616      	mov	r6, r2
 801c450:	e7ba      	b.n	801c3c8 <_printf_i+0x150>
 801c452:	680b      	ldr	r3, [r1, #0]
 801c454:	1d1a      	adds	r2, r3, #4
 801c456:	600a      	str	r2, [r1, #0]
 801c458:	681e      	ldr	r6, [r3, #0]
 801c45a:	6862      	ldr	r2, [r4, #4]
 801c45c:	2100      	movs	r1, #0
 801c45e:	4630      	mov	r0, r6
 801c460:	f7e3 fed6 	bl	8000210 <memchr>
 801c464:	b108      	cbz	r0, 801c46a <_printf_i+0x1f2>
 801c466:	1b80      	subs	r0, r0, r6
 801c468:	6060      	str	r0, [r4, #4]
 801c46a:	6863      	ldr	r3, [r4, #4]
 801c46c:	6123      	str	r3, [r4, #16]
 801c46e:	2300      	movs	r3, #0
 801c470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c474:	e7a8      	b.n	801c3c8 <_printf_i+0x150>
 801c476:	6923      	ldr	r3, [r4, #16]
 801c478:	4632      	mov	r2, r6
 801c47a:	4649      	mov	r1, r9
 801c47c:	4640      	mov	r0, r8
 801c47e:	47d0      	blx	sl
 801c480:	3001      	adds	r0, #1
 801c482:	d0ab      	beq.n	801c3dc <_printf_i+0x164>
 801c484:	6823      	ldr	r3, [r4, #0]
 801c486:	079b      	lsls	r3, r3, #30
 801c488:	d413      	bmi.n	801c4b2 <_printf_i+0x23a>
 801c48a:	68e0      	ldr	r0, [r4, #12]
 801c48c:	9b03      	ldr	r3, [sp, #12]
 801c48e:	4298      	cmp	r0, r3
 801c490:	bfb8      	it	lt
 801c492:	4618      	movlt	r0, r3
 801c494:	e7a4      	b.n	801c3e0 <_printf_i+0x168>
 801c496:	2301      	movs	r3, #1
 801c498:	4632      	mov	r2, r6
 801c49a:	4649      	mov	r1, r9
 801c49c:	4640      	mov	r0, r8
 801c49e:	47d0      	blx	sl
 801c4a0:	3001      	adds	r0, #1
 801c4a2:	d09b      	beq.n	801c3dc <_printf_i+0x164>
 801c4a4:	3501      	adds	r5, #1
 801c4a6:	68e3      	ldr	r3, [r4, #12]
 801c4a8:	9903      	ldr	r1, [sp, #12]
 801c4aa:	1a5b      	subs	r3, r3, r1
 801c4ac:	42ab      	cmp	r3, r5
 801c4ae:	dcf2      	bgt.n	801c496 <_printf_i+0x21e>
 801c4b0:	e7eb      	b.n	801c48a <_printf_i+0x212>
 801c4b2:	2500      	movs	r5, #0
 801c4b4:	f104 0619 	add.w	r6, r4, #25
 801c4b8:	e7f5      	b.n	801c4a6 <_printf_i+0x22e>
 801c4ba:	bf00      	nop
 801c4bc:	0801d6b9 	.word	0x0801d6b9
 801c4c0:	0801d6ca 	.word	0x0801d6ca

0801c4c4 <__swbuf_r>:
 801c4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4c6:	460e      	mov	r6, r1
 801c4c8:	4614      	mov	r4, r2
 801c4ca:	4605      	mov	r5, r0
 801c4cc:	b118      	cbz	r0, 801c4d6 <__swbuf_r+0x12>
 801c4ce:	6983      	ldr	r3, [r0, #24]
 801c4d0:	b90b      	cbnz	r3, 801c4d6 <__swbuf_r+0x12>
 801c4d2:	f000 f9d1 	bl	801c878 <__sinit>
 801c4d6:	4b21      	ldr	r3, [pc, #132]	; (801c55c <__swbuf_r+0x98>)
 801c4d8:	429c      	cmp	r4, r3
 801c4da:	d12b      	bne.n	801c534 <__swbuf_r+0x70>
 801c4dc:	686c      	ldr	r4, [r5, #4]
 801c4de:	69a3      	ldr	r3, [r4, #24]
 801c4e0:	60a3      	str	r3, [r4, #8]
 801c4e2:	89a3      	ldrh	r3, [r4, #12]
 801c4e4:	071a      	lsls	r2, r3, #28
 801c4e6:	d52f      	bpl.n	801c548 <__swbuf_r+0x84>
 801c4e8:	6923      	ldr	r3, [r4, #16]
 801c4ea:	b36b      	cbz	r3, 801c548 <__swbuf_r+0x84>
 801c4ec:	6923      	ldr	r3, [r4, #16]
 801c4ee:	6820      	ldr	r0, [r4, #0]
 801c4f0:	1ac0      	subs	r0, r0, r3
 801c4f2:	6963      	ldr	r3, [r4, #20]
 801c4f4:	b2f6      	uxtb	r6, r6
 801c4f6:	4283      	cmp	r3, r0
 801c4f8:	4637      	mov	r7, r6
 801c4fa:	dc04      	bgt.n	801c506 <__swbuf_r+0x42>
 801c4fc:	4621      	mov	r1, r4
 801c4fe:	4628      	mov	r0, r5
 801c500:	f000 f926 	bl	801c750 <_fflush_r>
 801c504:	bb30      	cbnz	r0, 801c554 <__swbuf_r+0x90>
 801c506:	68a3      	ldr	r3, [r4, #8]
 801c508:	3b01      	subs	r3, #1
 801c50a:	60a3      	str	r3, [r4, #8]
 801c50c:	6823      	ldr	r3, [r4, #0]
 801c50e:	1c5a      	adds	r2, r3, #1
 801c510:	6022      	str	r2, [r4, #0]
 801c512:	701e      	strb	r6, [r3, #0]
 801c514:	6963      	ldr	r3, [r4, #20]
 801c516:	3001      	adds	r0, #1
 801c518:	4283      	cmp	r3, r0
 801c51a:	d004      	beq.n	801c526 <__swbuf_r+0x62>
 801c51c:	89a3      	ldrh	r3, [r4, #12]
 801c51e:	07db      	lsls	r3, r3, #31
 801c520:	d506      	bpl.n	801c530 <__swbuf_r+0x6c>
 801c522:	2e0a      	cmp	r6, #10
 801c524:	d104      	bne.n	801c530 <__swbuf_r+0x6c>
 801c526:	4621      	mov	r1, r4
 801c528:	4628      	mov	r0, r5
 801c52a:	f000 f911 	bl	801c750 <_fflush_r>
 801c52e:	b988      	cbnz	r0, 801c554 <__swbuf_r+0x90>
 801c530:	4638      	mov	r0, r7
 801c532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c534:	4b0a      	ldr	r3, [pc, #40]	; (801c560 <__swbuf_r+0x9c>)
 801c536:	429c      	cmp	r4, r3
 801c538:	d101      	bne.n	801c53e <__swbuf_r+0x7a>
 801c53a:	68ac      	ldr	r4, [r5, #8]
 801c53c:	e7cf      	b.n	801c4de <__swbuf_r+0x1a>
 801c53e:	4b09      	ldr	r3, [pc, #36]	; (801c564 <__swbuf_r+0xa0>)
 801c540:	429c      	cmp	r4, r3
 801c542:	bf08      	it	eq
 801c544:	68ec      	ldreq	r4, [r5, #12]
 801c546:	e7ca      	b.n	801c4de <__swbuf_r+0x1a>
 801c548:	4621      	mov	r1, r4
 801c54a:	4628      	mov	r0, r5
 801c54c:	f000 f80c 	bl	801c568 <__swsetup_r>
 801c550:	2800      	cmp	r0, #0
 801c552:	d0cb      	beq.n	801c4ec <__swbuf_r+0x28>
 801c554:	f04f 37ff 	mov.w	r7, #4294967295
 801c558:	e7ea      	b.n	801c530 <__swbuf_r+0x6c>
 801c55a:	bf00      	nop
 801c55c:	0801d6fc 	.word	0x0801d6fc
 801c560:	0801d71c 	.word	0x0801d71c
 801c564:	0801d6dc 	.word	0x0801d6dc

0801c568 <__swsetup_r>:
 801c568:	4b32      	ldr	r3, [pc, #200]	; (801c634 <__swsetup_r+0xcc>)
 801c56a:	b570      	push	{r4, r5, r6, lr}
 801c56c:	681d      	ldr	r5, [r3, #0]
 801c56e:	4606      	mov	r6, r0
 801c570:	460c      	mov	r4, r1
 801c572:	b125      	cbz	r5, 801c57e <__swsetup_r+0x16>
 801c574:	69ab      	ldr	r3, [r5, #24]
 801c576:	b913      	cbnz	r3, 801c57e <__swsetup_r+0x16>
 801c578:	4628      	mov	r0, r5
 801c57a:	f000 f97d 	bl	801c878 <__sinit>
 801c57e:	4b2e      	ldr	r3, [pc, #184]	; (801c638 <__swsetup_r+0xd0>)
 801c580:	429c      	cmp	r4, r3
 801c582:	d10f      	bne.n	801c5a4 <__swsetup_r+0x3c>
 801c584:	686c      	ldr	r4, [r5, #4]
 801c586:	89a3      	ldrh	r3, [r4, #12]
 801c588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c58c:	0719      	lsls	r1, r3, #28
 801c58e:	d42c      	bmi.n	801c5ea <__swsetup_r+0x82>
 801c590:	06dd      	lsls	r5, r3, #27
 801c592:	d411      	bmi.n	801c5b8 <__swsetup_r+0x50>
 801c594:	2309      	movs	r3, #9
 801c596:	6033      	str	r3, [r6, #0]
 801c598:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c59c:	81a3      	strh	r3, [r4, #12]
 801c59e:	f04f 30ff 	mov.w	r0, #4294967295
 801c5a2:	e03e      	b.n	801c622 <__swsetup_r+0xba>
 801c5a4:	4b25      	ldr	r3, [pc, #148]	; (801c63c <__swsetup_r+0xd4>)
 801c5a6:	429c      	cmp	r4, r3
 801c5a8:	d101      	bne.n	801c5ae <__swsetup_r+0x46>
 801c5aa:	68ac      	ldr	r4, [r5, #8]
 801c5ac:	e7eb      	b.n	801c586 <__swsetup_r+0x1e>
 801c5ae:	4b24      	ldr	r3, [pc, #144]	; (801c640 <__swsetup_r+0xd8>)
 801c5b0:	429c      	cmp	r4, r3
 801c5b2:	bf08      	it	eq
 801c5b4:	68ec      	ldreq	r4, [r5, #12]
 801c5b6:	e7e6      	b.n	801c586 <__swsetup_r+0x1e>
 801c5b8:	0758      	lsls	r0, r3, #29
 801c5ba:	d512      	bpl.n	801c5e2 <__swsetup_r+0x7a>
 801c5bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c5be:	b141      	cbz	r1, 801c5d2 <__swsetup_r+0x6a>
 801c5c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c5c4:	4299      	cmp	r1, r3
 801c5c6:	d002      	beq.n	801c5ce <__swsetup_r+0x66>
 801c5c8:	4630      	mov	r0, r6
 801c5ca:	f7fd fb85 	bl	8019cd8 <_free_r>
 801c5ce:	2300      	movs	r3, #0
 801c5d0:	6363      	str	r3, [r4, #52]	; 0x34
 801c5d2:	89a3      	ldrh	r3, [r4, #12]
 801c5d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c5d8:	81a3      	strh	r3, [r4, #12]
 801c5da:	2300      	movs	r3, #0
 801c5dc:	6063      	str	r3, [r4, #4]
 801c5de:	6923      	ldr	r3, [r4, #16]
 801c5e0:	6023      	str	r3, [r4, #0]
 801c5e2:	89a3      	ldrh	r3, [r4, #12]
 801c5e4:	f043 0308 	orr.w	r3, r3, #8
 801c5e8:	81a3      	strh	r3, [r4, #12]
 801c5ea:	6923      	ldr	r3, [r4, #16]
 801c5ec:	b94b      	cbnz	r3, 801c602 <__swsetup_r+0x9a>
 801c5ee:	89a3      	ldrh	r3, [r4, #12]
 801c5f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c5f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c5f8:	d003      	beq.n	801c602 <__swsetup_r+0x9a>
 801c5fa:	4621      	mov	r1, r4
 801c5fc:	4630      	mov	r0, r6
 801c5fe:	f000 f9fd 	bl	801c9fc <__smakebuf_r>
 801c602:	89a0      	ldrh	r0, [r4, #12]
 801c604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c608:	f010 0301 	ands.w	r3, r0, #1
 801c60c:	d00a      	beq.n	801c624 <__swsetup_r+0xbc>
 801c60e:	2300      	movs	r3, #0
 801c610:	60a3      	str	r3, [r4, #8]
 801c612:	6963      	ldr	r3, [r4, #20]
 801c614:	425b      	negs	r3, r3
 801c616:	61a3      	str	r3, [r4, #24]
 801c618:	6923      	ldr	r3, [r4, #16]
 801c61a:	b943      	cbnz	r3, 801c62e <__swsetup_r+0xc6>
 801c61c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c620:	d1ba      	bne.n	801c598 <__swsetup_r+0x30>
 801c622:	bd70      	pop	{r4, r5, r6, pc}
 801c624:	0781      	lsls	r1, r0, #30
 801c626:	bf58      	it	pl
 801c628:	6963      	ldrpl	r3, [r4, #20]
 801c62a:	60a3      	str	r3, [r4, #8]
 801c62c:	e7f4      	b.n	801c618 <__swsetup_r+0xb0>
 801c62e:	2000      	movs	r0, #0
 801c630:	e7f7      	b.n	801c622 <__swsetup_r+0xba>
 801c632:	bf00      	nop
 801c634:	2000000c 	.word	0x2000000c
 801c638:	0801d6fc 	.word	0x0801d6fc
 801c63c:	0801d71c 	.word	0x0801d71c
 801c640:	0801d6dc 	.word	0x0801d6dc

0801c644 <__sflush_r>:
 801c644:	898a      	ldrh	r2, [r1, #12]
 801c646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c64a:	4605      	mov	r5, r0
 801c64c:	0710      	lsls	r0, r2, #28
 801c64e:	460c      	mov	r4, r1
 801c650:	d458      	bmi.n	801c704 <__sflush_r+0xc0>
 801c652:	684b      	ldr	r3, [r1, #4]
 801c654:	2b00      	cmp	r3, #0
 801c656:	dc05      	bgt.n	801c664 <__sflush_r+0x20>
 801c658:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	dc02      	bgt.n	801c664 <__sflush_r+0x20>
 801c65e:	2000      	movs	r0, #0
 801c660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c666:	2e00      	cmp	r6, #0
 801c668:	d0f9      	beq.n	801c65e <__sflush_r+0x1a>
 801c66a:	2300      	movs	r3, #0
 801c66c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c670:	682f      	ldr	r7, [r5, #0]
 801c672:	602b      	str	r3, [r5, #0]
 801c674:	d032      	beq.n	801c6dc <__sflush_r+0x98>
 801c676:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c678:	89a3      	ldrh	r3, [r4, #12]
 801c67a:	075a      	lsls	r2, r3, #29
 801c67c:	d505      	bpl.n	801c68a <__sflush_r+0x46>
 801c67e:	6863      	ldr	r3, [r4, #4]
 801c680:	1ac0      	subs	r0, r0, r3
 801c682:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c684:	b10b      	cbz	r3, 801c68a <__sflush_r+0x46>
 801c686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c688:	1ac0      	subs	r0, r0, r3
 801c68a:	2300      	movs	r3, #0
 801c68c:	4602      	mov	r2, r0
 801c68e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c690:	6a21      	ldr	r1, [r4, #32]
 801c692:	4628      	mov	r0, r5
 801c694:	47b0      	blx	r6
 801c696:	1c43      	adds	r3, r0, #1
 801c698:	89a3      	ldrh	r3, [r4, #12]
 801c69a:	d106      	bne.n	801c6aa <__sflush_r+0x66>
 801c69c:	6829      	ldr	r1, [r5, #0]
 801c69e:	291d      	cmp	r1, #29
 801c6a0:	d82c      	bhi.n	801c6fc <__sflush_r+0xb8>
 801c6a2:	4a2a      	ldr	r2, [pc, #168]	; (801c74c <__sflush_r+0x108>)
 801c6a4:	40ca      	lsrs	r2, r1
 801c6a6:	07d6      	lsls	r6, r2, #31
 801c6a8:	d528      	bpl.n	801c6fc <__sflush_r+0xb8>
 801c6aa:	2200      	movs	r2, #0
 801c6ac:	6062      	str	r2, [r4, #4]
 801c6ae:	04d9      	lsls	r1, r3, #19
 801c6b0:	6922      	ldr	r2, [r4, #16]
 801c6b2:	6022      	str	r2, [r4, #0]
 801c6b4:	d504      	bpl.n	801c6c0 <__sflush_r+0x7c>
 801c6b6:	1c42      	adds	r2, r0, #1
 801c6b8:	d101      	bne.n	801c6be <__sflush_r+0x7a>
 801c6ba:	682b      	ldr	r3, [r5, #0]
 801c6bc:	b903      	cbnz	r3, 801c6c0 <__sflush_r+0x7c>
 801c6be:	6560      	str	r0, [r4, #84]	; 0x54
 801c6c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c6c2:	602f      	str	r7, [r5, #0]
 801c6c4:	2900      	cmp	r1, #0
 801c6c6:	d0ca      	beq.n	801c65e <__sflush_r+0x1a>
 801c6c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c6cc:	4299      	cmp	r1, r3
 801c6ce:	d002      	beq.n	801c6d6 <__sflush_r+0x92>
 801c6d0:	4628      	mov	r0, r5
 801c6d2:	f7fd fb01 	bl	8019cd8 <_free_r>
 801c6d6:	2000      	movs	r0, #0
 801c6d8:	6360      	str	r0, [r4, #52]	; 0x34
 801c6da:	e7c1      	b.n	801c660 <__sflush_r+0x1c>
 801c6dc:	6a21      	ldr	r1, [r4, #32]
 801c6de:	2301      	movs	r3, #1
 801c6e0:	4628      	mov	r0, r5
 801c6e2:	47b0      	blx	r6
 801c6e4:	1c41      	adds	r1, r0, #1
 801c6e6:	d1c7      	bne.n	801c678 <__sflush_r+0x34>
 801c6e8:	682b      	ldr	r3, [r5, #0]
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	d0c4      	beq.n	801c678 <__sflush_r+0x34>
 801c6ee:	2b1d      	cmp	r3, #29
 801c6f0:	d001      	beq.n	801c6f6 <__sflush_r+0xb2>
 801c6f2:	2b16      	cmp	r3, #22
 801c6f4:	d101      	bne.n	801c6fa <__sflush_r+0xb6>
 801c6f6:	602f      	str	r7, [r5, #0]
 801c6f8:	e7b1      	b.n	801c65e <__sflush_r+0x1a>
 801c6fa:	89a3      	ldrh	r3, [r4, #12]
 801c6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c700:	81a3      	strh	r3, [r4, #12]
 801c702:	e7ad      	b.n	801c660 <__sflush_r+0x1c>
 801c704:	690f      	ldr	r7, [r1, #16]
 801c706:	2f00      	cmp	r7, #0
 801c708:	d0a9      	beq.n	801c65e <__sflush_r+0x1a>
 801c70a:	0793      	lsls	r3, r2, #30
 801c70c:	680e      	ldr	r6, [r1, #0]
 801c70e:	bf08      	it	eq
 801c710:	694b      	ldreq	r3, [r1, #20]
 801c712:	600f      	str	r7, [r1, #0]
 801c714:	bf18      	it	ne
 801c716:	2300      	movne	r3, #0
 801c718:	eba6 0807 	sub.w	r8, r6, r7
 801c71c:	608b      	str	r3, [r1, #8]
 801c71e:	f1b8 0f00 	cmp.w	r8, #0
 801c722:	dd9c      	ble.n	801c65e <__sflush_r+0x1a>
 801c724:	6a21      	ldr	r1, [r4, #32]
 801c726:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c728:	4643      	mov	r3, r8
 801c72a:	463a      	mov	r2, r7
 801c72c:	4628      	mov	r0, r5
 801c72e:	47b0      	blx	r6
 801c730:	2800      	cmp	r0, #0
 801c732:	dc06      	bgt.n	801c742 <__sflush_r+0xfe>
 801c734:	89a3      	ldrh	r3, [r4, #12]
 801c736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c73a:	81a3      	strh	r3, [r4, #12]
 801c73c:	f04f 30ff 	mov.w	r0, #4294967295
 801c740:	e78e      	b.n	801c660 <__sflush_r+0x1c>
 801c742:	4407      	add	r7, r0
 801c744:	eba8 0800 	sub.w	r8, r8, r0
 801c748:	e7e9      	b.n	801c71e <__sflush_r+0xda>
 801c74a:	bf00      	nop
 801c74c:	20400001 	.word	0x20400001

0801c750 <_fflush_r>:
 801c750:	b538      	push	{r3, r4, r5, lr}
 801c752:	690b      	ldr	r3, [r1, #16]
 801c754:	4605      	mov	r5, r0
 801c756:	460c      	mov	r4, r1
 801c758:	b913      	cbnz	r3, 801c760 <_fflush_r+0x10>
 801c75a:	2500      	movs	r5, #0
 801c75c:	4628      	mov	r0, r5
 801c75e:	bd38      	pop	{r3, r4, r5, pc}
 801c760:	b118      	cbz	r0, 801c76a <_fflush_r+0x1a>
 801c762:	6983      	ldr	r3, [r0, #24]
 801c764:	b90b      	cbnz	r3, 801c76a <_fflush_r+0x1a>
 801c766:	f000 f887 	bl	801c878 <__sinit>
 801c76a:	4b14      	ldr	r3, [pc, #80]	; (801c7bc <_fflush_r+0x6c>)
 801c76c:	429c      	cmp	r4, r3
 801c76e:	d11b      	bne.n	801c7a8 <_fflush_r+0x58>
 801c770:	686c      	ldr	r4, [r5, #4]
 801c772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c776:	2b00      	cmp	r3, #0
 801c778:	d0ef      	beq.n	801c75a <_fflush_r+0xa>
 801c77a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c77c:	07d0      	lsls	r0, r2, #31
 801c77e:	d404      	bmi.n	801c78a <_fflush_r+0x3a>
 801c780:	0599      	lsls	r1, r3, #22
 801c782:	d402      	bmi.n	801c78a <_fflush_r+0x3a>
 801c784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c786:	f7ff fbae 	bl	801bee6 <__retarget_lock_acquire_recursive>
 801c78a:	4628      	mov	r0, r5
 801c78c:	4621      	mov	r1, r4
 801c78e:	f7ff ff59 	bl	801c644 <__sflush_r>
 801c792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c794:	07da      	lsls	r2, r3, #31
 801c796:	4605      	mov	r5, r0
 801c798:	d4e0      	bmi.n	801c75c <_fflush_r+0xc>
 801c79a:	89a3      	ldrh	r3, [r4, #12]
 801c79c:	059b      	lsls	r3, r3, #22
 801c79e:	d4dd      	bmi.n	801c75c <_fflush_r+0xc>
 801c7a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c7a2:	f7ff fba1 	bl	801bee8 <__retarget_lock_release_recursive>
 801c7a6:	e7d9      	b.n	801c75c <_fflush_r+0xc>
 801c7a8:	4b05      	ldr	r3, [pc, #20]	; (801c7c0 <_fflush_r+0x70>)
 801c7aa:	429c      	cmp	r4, r3
 801c7ac:	d101      	bne.n	801c7b2 <_fflush_r+0x62>
 801c7ae:	68ac      	ldr	r4, [r5, #8]
 801c7b0:	e7df      	b.n	801c772 <_fflush_r+0x22>
 801c7b2:	4b04      	ldr	r3, [pc, #16]	; (801c7c4 <_fflush_r+0x74>)
 801c7b4:	429c      	cmp	r4, r3
 801c7b6:	bf08      	it	eq
 801c7b8:	68ec      	ldreq	r4, [r5, #12]
 801c7ba:	e7da      	b.n	801c772 <_fflush_r+0x22>
 801c7bc:	0801d6fc 	.word	0x0801d6fc
 801c7c0:	0801d71c 	.word	0x0801d71c
 801c7c4:	0801d6dc 	.word	0x0801d6dc

0801c7c8 <std>:
 801c7c8:	2300      	movs	r3, #0
 801c7ca:	b510      	push	{r4, lr}
 801c7cc:	4604      	mov	r4, r0
 801c7ce:	e9c0 3300 	strd	r3, r3, [r0]
 801c7d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c7d6:	6083      	str	r3, [r0, #8]
 801c7d8:	8181      	strh	r1, [r0, #12]
 801c7da:	6643      	str	r3, [r0, #100]	; 0x64
 801c7dc:	81c2      	strh	r2, [r0, #14]
 801c7de:	6183      	str	r3, [r0, #24]
 801c7e0:	4619      	mov	r1, r3
 801c7e2:	2208      	movs	r2, #8
 801c7e4:	305c      	adds	r0, #92	; 0x5c
 801c7e6:	f7fd fa6f 	bl	8019cc8 <memset>
 801c7ea:	4b05      	ldr	r3, [pc, #20]	; (801c800 <std+0x38>)
 801c7ec:	6263      	str	r3, [r4, #36]	; 0x24
 801c7ee:	4b05      	ldr	r3, [pc, #20]	; (801c804 <std+0x3c>)
 801c7f0:	62a3      	str	r3, [r4, #40]	; 0x28
 801c7f2:	4b05      	ldr	r3, [pc, #20]	; (801c808 <std+0x40>)
 801c7f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c7f6:	4b05      	ldr	r3, [pc, #20]	; (801c80c <std+0x44>)
 801c7f8:	6224      	str	r4, [r4, #32]
 801c7fa:	6323      	str	r3, [r4, #48]	; 0x30
 801c7fc:	bd10      	pop	{r4, pc}
 801c7fe:	bf00      	nop
 801c800:	0801ca7d 	.word	0x0801ca7d
 801c804:	0801ca9f 	.word	0x0801ca9f
 801c808:	0801cad7 	.word	0x0801cad7
 801c80c:	0801cafb 	.word	0x0801cafb

0801c810 <_cleanup_r>:
 801c810:	4901      	ldr	r1, [pc, #4]	; (801c818 <_cleanup_r+0x8>)
 801c812:	f000 b8af 	b.w	801c974 <_fwalk_reent>
 801c816:	bf00      	nop
 801c818:	0801c751 	.word	0x0801c751

0801c81c <__sfmoreglue>:
 801c81c:	b570      	push	{r4, r5, r6, lr}
 801c81e:	1e4a      	subs	r2, r1, #1
 801c820:	2568      	movs	r5, #104	; 0x68
 801c822:	4355      	muls	r5, r2
 801c824:	460e      	mov	r6, r1
 801c826:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c82a:	f7fd faa5 	bl	8019d78 <_malloc_r>
 801c82e:	4604      	mov	r4, r0
 801c830:	b140      	cbz	r0, 801c844 <__sfmoreglue+0x28>
 801c832:	2100      	movs	r1, #0
 801c834:	e9c0 1600 	strd	r1, r6, [r0]
 801c838:	300c      	adds	r0, #12
 801c83a:	60a0      	str	r0, [r4, #8]
 801c83c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c840:	f7fd fa42 	bl	8019cc8 <memset>
 801c844:	4620      	mov	r0, r4
 801c846:	bd70      	pop	{r4, r5, r6, pc}

0801c848 <__sfp_lock_acquire>:
 801c848:	4801      	ldr	r0, [pc, #4]	; (801c850 <__sfp_lock_acquire+0x8>)
 801c84a:	f7ff bb4c 	b.w	801bee6 <__retarget_lock_acquire_recursive>
 801c84e:	bf00      	nop
 801c850:	200004e4 	.word	0x200004e4

0801c854 <__sfp_lock_release>:
 801c854:	4801      	ldr	r0, [pc, #4]	; (801c85c <__sfp_lock_release+0x8>)
 801c856:	f7ff bb47 	b.w	801bee8 <__retarget_lock_release_recursive>
 801c85a:	bf00      	nop
 801c85c:	200004e4 	.word	0x200004e4

0801c860 <__sinit_lock_acquire>:
 801c860:	4801      	ldr	r0, [pc, #4]	; (801c868 <__sinit_lock_acquire+0x8>)
 801c862:	f7ff bb40 	b.w	801bee6 <__retarget_lock_acquire_recursive>
 801c866:	bf00      	nop
 801c868:	200004df 	.word	0x200004df

0801c86c <__sinit_lock_release>:
 801c86c:	4801      	ldr	r0, [pc, #4]	; (801c874 <__sinit_lock_release+0x8>)
 801c86e:	f7ff bb3b 	b.w	801bee8 <__retarget_lock_release_recursive>
 801c872:	bf00      	nop
 801c874:	200004df 	.word	0x200004df

0801c878 <__sinit>:
 801c878:	b510      	push	{r4, lr}
 801c87a:	4604      	mov	r4, r0
 801c87c:	f7ff fff0 	bl	801c860 <__sinit_lock_acquire>
 801c880:	69a3      	ldr	r3, [r4, #24]
 801c882:	b11b      	cbz	r3, 801c88c <__sinit+0x14>
 801c884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c888:	f7ff bff0 	b.w	801c86c <__sinit_lock_release>
 801c88c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c890:	6523      	str	r3, [r4, #80]	; 0x50
 801c892:	4b13      	ldr	r3, [pc, #76]	; (801c8e0 <__sinit+0x68>)
 801c894:	4a13      	ldr	r2, [pc, #76]	; (801c8e4 <__sinit+0x6c>)
 801c896:	681b      	ldr	r3, [r3, #0]
 801c898:	62a2      	str	r2, [r4, #40]	; 0x28
 801c89a:	42a3      	cmp	r3, r4
 801c89c:	bf04      	itt	eq
 801c89e:	2301      	moveq	r3, #1
 801c8a0:	61a3      	streq	r3, [r4, #24]
 801c8a2:	4620      	mov	r0, r4
 801c8a4:	f000 f820 	bl	801c8e8 <__sfp>
 801c8a8:	6060      	str	r0, [r4, #4]
 801c8aa:	4620      	mov	r0, r4
 801c8ac:	f000 f81c 	bl	801c8e8 <__sfp>
 801c8b0:	60a0      	str	r0, [r4, #8]
 801c8b2:	4620      	mov	r0, r4
 801c8b4:	f000 f818 	bl	801c8e8 <__sfp>
 801c8b8:	2200      	movs	r2, #0
 801c8ba:	60e0      	str	r0, [r4, #12]
 801c8bc:	2104      	movs	r1, #4
 801c8be:	6860      	ldr	r0, [r4, #4]
 801c8c0:	f7ff ff82 	bl	801c7c8 <std>
 801c8c4:	68a0      	ldr	r0, [r4, #8]
 801c8c6:	2201      	movs	r2, #1
 801c8c8:	2109      	movs	r1, #9
 801c8ca:	f7ff ff7d 	bl	801c7c8 <std>
 801c8ce:	68e0      	ldr	r0, [r4, #12]
 801c8d0:	2202      	movs	r2, #2
 801c8d2:	2112      	movs	r1, #18
 801c8d4:	f7ff ff78 	bl	801c7c8 <std>
 801c8d8:	2301      	movs	r3, #1
 801c8da:	61a3      	str	r3, [r4, #24]
 801c8dc:	e7d2      	b.n	801c884 <__sinit+0xc>
 801c8de:	bf00      	nop
 801c8e0:	0801d2e0 	.word	0x0801d2e0
 801c8e4:	0801c811 	.word	0x0801c811

0801c8e8 <__sfp>:
 801c8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8ea:	4607      	mov	r7, r0
 801c8ec:	f7ff ffac 	bl	801c848 <__sfp_lock_acquire>
 801c8f0:	4b1e      	ldr	r3, [pc, #120]	; (801c96c <__sfp+0x84>)
 801c8f2:	681e      	ldr	r6, [r3, #0]
 801c8f4:	69b3      	ldr	r3, [r6, #24]
 801c8f6:	b913      	cbnz	r3, 801c8fe <__sfp+0x16>
 801c8f8:	4630      	mov	r0, r6
 801c8fa:	f7ff ffbd 	bl	801c878 <__sinit>
 801c8fe:	3648      	adds	r6, #72	; 0x48
 801c900:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c904:	3b01      	subs	r3, #1
 801c906:	d503      	bpl.n	801c910 <__sfp+0x28>
 801c908:	6833      	ldr	r3, [r6, #0]
 801c90a:	b30b      	cbz	r3, 801c950 <__sfp+0x68>
 801c90c:	6836      	ldr	r6, [r6, #0]
 801c90e:	e7f7      	b.n	801c900 <__sfp+0x18>
 801c910:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c914:	b9d5      	cbnz	r5, 801c94c <__sfp+0x64>
 801c916:	4b16      	ldr	r3, [pc, #88]	; (801c970 <__sfp+0x88>)
 801c918:	60e3      	str	r3, [r4, #12]
 801c91a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c91e:	6665      	str	r5, [r4, #100]	; 0x64
 801c920:	f7ff fae0 	bl	801bee4 <__retarget_lock_init_recursive>
 801c924:	f7ff ff96 	bl	801c854 <__sfp_lock_release>
 801c928:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c92c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c930:	6025      	str	r5, [r4, #0]
 801c932:	61a5      	str	r5, [r4, #24]
 801c934:	2208      	movs	r2, #8
 801c936:	4629      	mov	r1, r5
 801c938:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c93c:	f7fd f9c4 	bl	8019cc8 <memset>
 801c940:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c944:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c948:	4620      	mov	r0, r4
 801c94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c94c:	3468      	adds	r4, #104	; 0x68
 801c94e:	e7d9      	b.n	801c904 <__sfp+0x1c>
 801c950:	2104      	movs	r1, #4
 801c952:	4638      	mov	r0, r7
 801c954:	f7ff ff62 	bl	801c81c <__sfmoreglue>
 801c958:	4604      	mov	r4, r0
 801c95a:	6030      	str	r0, [r6, #0]
 801c95c:	2800      	cmp	r0, #0
 801c95e:	d1d5      	bne.n	801c90c <__sfp+0x24>
 801c960:	f7ff ff78 	bl	801c854 <__sfp_lock_release>
 801c964:	230c      	movs	r3, #12
 801c966:	603b      	str	r3, [r7, #0]
 801c968:	e7ee      	b.n	801c948 <__sfp+0x60>
 801c96a:	bf00      	nop
 801c96c:	0801d2e0 	.word	0x0801d2e0
 801c970:	ffff0001 	.word	0xffff0001

0801c974 <_fwalk_reent>:
 801c974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c978:	4606      	mov	r6, r0
 801c97a:	4688      	mov	r8, r1
 801c97c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c980:	2700      	movs	r7, #0
 801c982:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c986:	f1b9 0901 	subs.w	r9, r9, #1
 801c98a:	d505      	bpl.n	801c998 <_fwalk_reent+0x24>
 801c98c:	6824      	ldr	r4, [r4, #0]
 801c98e:	2c00      	cmp	r4, #0
 801c990:	d1f7      	bne.n	801c982 <_fwalk_reent+0xe>
 801c992:	4638      	mov	r0, r7
 801c994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c998:	89ab      	ldrh	r3, [r5, #12]
 801c99a:	2b01      	cmp	r3, #1
 801c99c:	d907      	bls.n	801c9ae <_fwalk_reent+0x3a>
 801c99e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c9a2:	3301      	adds	r3, #1
 801c9a4:	d003      	beq.n	801c9ae <_fwalk_reent+0x3a>
 801c9a6:	4629      	mov	r1, r5
 801c9a8:	4630      	mov	r0, r6
 801c9aa:	47c0      	blx	r8
 801c9ac:	4307      	orrs	r7, r0
 801c9ae:	3568      	adds	r5, #104	; 0x68
 801c9b0:	e7e9      	b.n	801c986 <_fwalk_reent+0x12>

0801c9b2 <__swhatbuf_r>:
 801c9b2:	b570      	push	{r4, r5, r6, lr}
 801c9b4:	460e      	mov	r6, r1
 801c9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c9ba:	2900      	cmp	r1, #0
 801c9bc:	b096      	sub	sp, #88	; 0x58
 801c9be:	4614      	mov	r4, r2
 801c9c0:	461d      	mov	r5, r3
 801c9c2:	da07      	bge.n	801c9d4 <__swhatbuf_r+0x22>
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	602b      	str	r3, [r5, #0]
 801c9c8:	89b3      	ldrh	r3, [r6, #12]
 801c9ca:	061a      	lsls	r2, r3, #24
 801c9cc:	d410      	bmi.n	801c9f0 <__swhatbuf_r+0x3e>
 801c9ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c9d2:	e00e      	b.n	801c9f2 <__swhatbuf_r+0x40>
 801c9d4:	466a      	mov	r2, sp
 801c9d6:	f000 f8b7 	bl	801cb48 <_fstat_r>
 801c9da:	2800      	cmp	r0, #0
 801c9dc:	dbf2      	blt.n	801c9c4 <__swhatbuf_r+0x12>
 801c9de:	9a01      	ldr	r2, [sp, #4]
 801c9e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c9e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c9e8:	425a      	negs	r2, r3
 801c9ea:	415a      	adcs	r2, r3
 801c9ec:	602a      	str	r2, [r5, #0]
 801c9ee:	e7ee      	b.n	801c9ce <__swhatbuf_r+0x1c>
 801c9f0:	2340      	movs	r3, #64	; 0x40
 801c9f2:	2000      	movs	r0, #0
 801c9f4:	6023      	str	r3, [r4, #0]
 801c9f6:	b016      	add	sp, #88	; 0x58
 801c9f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c9fc <__smakebuf_r>:
 801c9fc:	898b      	ldrh	r3, [r1, #12]
 801c9fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ca00:	079d      	lsls	r5, r3, #30
 801ca02:	4606      	mov	r6, r0
 801ca04:	460c      	mov	r4, r1
 801ca06:	d507      	bpl.n	801ca18 <__smakebuf_r+0x1c>
 801ca08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ca0c:	6023      	str	r3, [r4, #0]
 801ca0e:	6123      	str	r3, [r4, #16]
 801ca10:	2301      	movs	r3, #1
 801ca12:	6163      	str	r3, [r4, #20]
 801ca14:	b002      	add	sp, #8
 801ca16:	bd70      	pop	{r4, r5, r6, pc}
 801ca18:	ab01      	add	r3, sp, #4
 801ca1a:	466a      	mov	r2, sp
 801ca1c:	f7ff ffc9 	bl	801c9b2 <__swhatbuf_r>
 801ca20:	9900      	ldr	r1, [sp, #0]
 801ca22:	4605      	mov	r5, r0
 801ca24:	4630      	mov	r0, r6
 801ca26:	f7fd f9a7 	bl	8019d78 <_malloc_r>
 801ca2a:	b948      	cbnz	r0, 801ca40 <__smakebuf_r+0x44>
 801ca2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca30:	059a      	lsls	r2, r3, #22
 801ca32:	d4ef      	bmi.n	801ca14 <__smakebuf_r+0x18>
 801ca34:	f023 0303 	bic.w	r3, r3, #3
 801ca38:	f043 0302 	orr.w	r3, r3, #2
 801ca3c:	81a3      	strh	r3, [r4, #12]
 801ca3e:	e7e3      	b.n	801ca08 <__smakebuf_r+0xc>
 801ca40:	4b0d      	ldr	r3, [pc, #52]	; (801ca78 <__smakebuf_r+0x7c>)
 801ca42:	62b3      	str	r3, [r6, #40]	; 0x28
 801ca44:	89a3      	ldrh	r3, [r4, #12]
 801ca46:	6020      	str	r0, [r4, #0]
 801ca48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ca4c:	81a3      	strh	r3, [r4, #12]
 801ca4e:	9b00      	ldr	r3, [sp, #0]
 801ca50:	6163      	str	r3, [r4, #20]
 801ca52:	9b01      	ldr	r3, [sp, #4]
 801ca54:	6120      	str	r0, [r4, #16]
 801ca56:	b15b      	cbz	r3, 801ca70 <__smakebuf_r+0x74>
 801ca58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ca5c:	4630      	mov	r0, r6
 801ca5e:	f000 f885 	bl	801cb6c <_isatty_r>
 801ca62:	b128      	cbz	r0, 801ca70 <__smakebuf_r+0x74>
 801ca64:	89a3      	ldrh	r3, [r4, #12]
 801ca66:	f023 0303 	bic.w	r3, r3, #3
 801ca6a:	f043 0301 	orr.w	r3, r3, #1
 801ca6e:	81a3      	strh	r3, [r4, #12]
 801ca70:	89a0      	ldrh	r0, [r4, #12]
 801ca72:	4305      	orrs	r5, r0
 801ca74:	81a5      	strh	r5, [r4, #12]
 801ca76:	e7cd      	b.n	801ca14 <__smakebuf_r+0x18>
 801ca78:	0801c811 	.word	0x0801c811

0801ca7c <__sread>:
 801ca7c:	b510      	push	{r4, lr}
 801ca7e:	460c      	mov	r4, r1
 801ca80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca84:	f000 f894 	bl	801cbb0 <_read_r>
 801ca88:	2800      	cmp	r0, #0
 801ca8a:	bfab      	itete	ge
 801ca8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ca8e:	89a3      	ldrhlt	r3, [r4, #12]
 801ca90:	181b      	addge	r3, r3, r0
 801ca92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ca96:	bfac      	ite	ge
 801ca98:	6563      	strge	r3, [r4, #84]	; 0x54
 801ca9a:	81a3      	strhlt	r3, [r4, #12]
 801ca9c:	bd10      	pop	{r4, pc}

0801ca9e <__swrite>:
 801ca9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801caa2:	461f      	mov	r7, r3
 801caa4:	898b      	ldrh	r3, [r1, #12]
 801caa6:	05db      	lsls	r3, r3, #23
 801caa8:	4605      	mov	r5, r0
 801caaa:	460c      	mov	r4, r1
 801caac:	4616      	mov	r6, r2
 801caae:	d505      	bpl.n	801cabc <__swrite+0x1e>
 801cab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cab4:	2302      	movs	r3, #2
 801cab6:	2200      	movs	r2, #0
 801cab8:	f000 f868 	bl	801cb8c <_lseek_r>
 801cabc:	89a3      	ldrh	r3, [r4, #12]
 801cabe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cac6:	81a3      	strh	r3, [r4, #12]
 801cac8:	4632      	mov	r2, r6
 801caca:	463b      	mov	r3, r7
 801cacc:	4628      	mov	r0, r5
 801cace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cad2:	f000 b817 	b.w	801cb04 <_write_r>

0801cad6 <__sseek>:
 801cad6:	b510      	push	{r4, lr}
 801cad8:	460c      	mov	r4, r1
 801cada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cade:	f000 f855 	bl	801cb8c <_lseek_r>
 801cae2:	1c43      	adds	r3, r0, #1
 801cae4:	89a3      	ldrh	r3, [r4, #12]
 801cae6:	bf15      	itete	ne
 801cae8:	6560      	strne	r0, [r4, #84]	; 0x54
 801caea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801caee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801caf2:	81a3      	strheq	r3, [r4, #12]
 801caf4:	bf18      	it	ne
 801caf6:	81a3      	strhne	r3, [r4, #12]
 801caf8:	bd10      	pop	{r4, pc}

0801cafa <__sclose>:
 801cafa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cafe:	f000 b813 	b.w	801cb28 <_close_r>
	...

0801cb04 <_write_r>:
 801cb04:	b538      	push	{r3, r4, r5, lr}
 801cb06:	4d07      	ldr	r5, [pc, #28]	; (801cb24 <_write_r+0x20>)
 801cb08:	4604      	mov	r4, r0
 801cb0a:	4608      	mov	r0, r1
 801cb0c:	4611      	mov	r1, r2
 801cb0e:	2200      	movs	r2, #0
 801cb10:	602a      	str	r2, [r5, #0]
 801cb12:	461a      	mov	r2, r3
 801cb14:	f7f9 fff1 	bl	8016afa <_write>
 801cb18:	1c43      	adds	r3, r0, #1
 801cb1a:	d102      	bne.n	801cb22 <_write_r+0x1e>
 801cb1c:	682b      	ldr	r3, [r5, #0]
 801cb1e:	b103      	cbz	r3, 801cb22 <_write_r+0x1e>
 801cb20:	6023      	str	r3, [r4, #0]
 801cb22:	bd38      	pop	{r3, r4, r5, pc}
 801cb24:	200004d8 	.word	0x200004d8

0801cb28 <_close_r>:
 801cb28:	b538      	push	{r3, r4, r5, lr}
 801cb2a:	4d06      	ldr	r5, [pc, #24]	; (801cb44 <_close_r+0x1c>)
 801cb2c:	2300      	movs	r3, #0
 801cb2e:	4604      	mov	r4, r0
 801cb30:	4608      	mov	r0, r1
 801cb32:	602b      	str	r3, [r5, #0]
 801cb34:	f7f9 fffd 	bl	8016b32 <_close>
 801cb38:	1c43      	adds	r3, r0, #1
 801cb3a:	d102      	bne.n	801cb42 <_close_r+0x1a>
 801cb3c:	682b      	ldr	r3, [r5, #0]
 801cb3e:	b103      	cbz	r3, 801cb42 <_close_r+0x1a>
 801cb40:	6023      	str	r3, [r4, #0]
 801cb42:	bd38      	pop	{r3, r4, r5, pc}
 801cb44:	200004d8 	.word	0x200004d8

0801cb48 <_fstat_r>:
 801cb48:	b538      	push	{r3, r4, r5, lr}
 801cb4a:	4d07      	ldr	r5, [pc, #28]	; (801cb68 <_fstat_r+0x20>)
 801cb4c:	2300      	movs	r3, #0
 801cb4e:	4604      	mov	r4, r0
 801cb50:	4608      	mov	r0, r1
 801cb52:	4611      	mov	r1, r2
 801cb54:	602b      	str	r3, [r5, #0]
 801cb56:	f7f9 fff8 	bl	8016b4a <_fstat>
 801cb5a:	1c43      	adds	r3, r0, #1
 801cb5c:	d102      	bne.n	801cb64 <_fstat_r+0x1c>
 801cb5e:	682b      	ldr	r3, [r5, #0]
 801cb60:	b103      	cbz	r3, 801cb64 <_fstat_r+0x1c>
 801cb62:	6023      	str	r3, [r4, #0]
 801cb64:	bd38      	pop	{r3, r4, r5, pc}
 801cb66:	bf00      	nop
 801cb68:	200004d8 	.word	0x200004d8

0801cb6c <_isatty_r>:
 801cb6c:	b538      	push	{r3, r4, r5, lr}
 801cb6e:	4d06      	ldr	r5, [pc, #24]	; (801cb88 <_isatty_r+0x1c>)
 801cb70:	2300      	movs	r3, #0
 801cb72:	4604      	mov	r4, r0
 801cb74:	4608      	mov	r0, r1
 801cb76:	602b      	str	r3, [r5, #0]
 801cb78:	f7f9 fff7 	bl	8016b6a <_isatty>
 801cb7c:	1c43      	adds	r3, r0, #1
 801cb7e:	d102      	bne.n	801cb86 <_isatty_r+0x1a>
 801cb80:	682b      	ldr	r3, [r5, #0]
 801cb82:	b103      	cbz	r3, 801cb86 <_isatty_r+0x1a>
 801cb84:	6023      	str	r3, [r4, #0]
 801cb86:	bd38      	pop	{r3, r4, r5, pc}
 801cb88:	200004d8 	.word	0x200004d8

0801cb8c <_lseek_r>:
 801cb8c:	b538      	push	{r3, r4, r5, lr}
 801cb8e:	4d07      	ldr	r5, [pc, #28]	; (801cbac <_lseek_r+0x20>)
 801cb90:	4604      	mov	r4, r0
 801cb92:	4608      	mov	r0, r1
 801cb94:	4611      	mov	r1, r2
 801cb96:	2200      	movs	r2, #0
 801cb98:	602a      	str	r2, [r5, #0]
 801cb9a:	461a      	mov	r2, r3
 801cb9c:	f7f9 fff0 	bl	8016b80 <_lseek>
 801cba0:	1c43      	adds	r3, r0, #1
 801cba2:	d102      	bne.n	801cbaa <_lseek_r+0x1e>
 801cba4:	682b      	ldr	r3, [r5, #0]
 801cba6:	b103      	cbz	r3, 801cbaa <_lseek_r+0x1e>
 801cba8:	6023      	str	r3, [r4, #0]
 801cbaa:	bd38      	pop	{r3, r4, r5, pc}
 801cbac:	200004d8 	.word	0x200004d8

0801cbb0 <_read_r>:
 801cbb0:	b538      	push	{r3, r4, r5, lr}
 801cbb2:	4d07      	ldr	r5, [pc, #28]	; (801cbd0 <_read_r+0x20>)
 801cbb4:	4604      	mov	r4, r0
 801cbb6:	4608      	mov	r0, r1
 801cbb8:	4611      	mov	r1, r2
 801cbba:	2200      	movs	r2, #0
 801cbbc:	602a      	str	r2, [r5, #0]
 801cbbe:	461a      	mov	r2, r3
 801cbc0:	f7f9 ff7e 	bl	8016ac0 <_read>
 801cbc4:	1c43      	adds	r3, r0, #1
 801cbc6:	d102      	bne.n	801cbce <_read_r+0x1e>
 801cbc8:	682b      	ldr	r3, [r5, #0]
 801cbca:	b103      	cbz	r3, 801cbce <_read_r+0x1e>
 801cbcc:	6023      	str	r3, [r4, #0]
 801cbce:	bd38      	pop	{r3, r4, r5, pc}
 801cbd0:	200004d8 	.word	0x200004d8

0801cbd4 <_init>:
 801cbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbd6:	bf00      	nop
 801cbd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbda:	bc08      	pop	{r3}
 801cbdc:	469e      	mov	lr, r3
 801cbde:	4770      	bx	lr

0801cbe0 <_fini>:
 801cbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbe2:	bf00      	nop
 801cbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbe6:	bc08      	pop	{r3}
 801cbe8:	469e      	mov	lr, r3
 801cbea:	4770      	bx	lr
