
Interpreter746.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cbc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b20  08009e84  08009e84  00019e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9a4  0800a9a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9a4  0800a9a4  0001a9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9ac  0800a9ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000003c  0800a9ac  0800a9ac  0001a9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000003c  0800a9e8  0800a9e8  0001a9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800aa24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  20000074  0800aa98  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  0800aa98  000205d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   002eceac  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00010514  00000000  00000000  0030cf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 0000f918  00000000  00000000  0031d468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000f790  00000000  00000000  0032cd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000315f1  00000000  00000000  0033c510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005dd98  00000000  00000000  0036db01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001f4390  00000000  00000000  003cb899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  005bfc29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0004b994  00000000  00000000  005bfc7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000074 	.word	0x20000074
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009e6c 	.word	0x08009e6c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000078 	.word	0x20000078
 8000204:	08009e6c 	.word	0x08009e6c

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	60fb      	str	r3, [r7, #12]
      return __builtin_is_constant_evaluated();
 800051c:	2300      	movs	r3, #0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
 800051e:	2b00      	cmp	r3, #0
 8000520:	d004      	beq.n	800052c <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 f930 	bl	8000788 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8000528:	4603      	mov	r3, r0
 800052a:	e004      	b.n	8000536 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff fe6b 	bl	8000208 <strlen>
 8000532:	4603      	mov	r3, r0
 8000534:	bf00      	nop
      }
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	6039      	str	r1, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8000556:	b580      	push	{r7, lr}
 8000558:	b082      	sub	sp, #8
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f000 f805 	bl	8000574 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4618      	mov	r0, r3
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2200      	movs	r2, #0
 8000580:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
    }
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>:
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<typename _T1, typename _T2>
    struct pair
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f009 f99b 	bl	80098fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80005dc:	68fc      	ldr	r4, [r7, #12]
 80005de:	68b8      	ldr	r0, [r7, #8]
 80005e0:	f000 f93a 	bl	8000858 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80005e4:	4605      	mov	r5, r0
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4618      	mov	r0, r3
 80005ec:	f009 f80f 	bl	800960e <_ZNSaIcEC1Ev>
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	461a      	mov	r2, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	4620      	mov	r0, r4
 80005fa:	f000 f938 	bl	800086e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4618      	mov	r0, r3
 8000604:	f009 f804 	bl	8009610 <_ZNSaIcED1Ev>
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ffc9 	bl	80005a0 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 800060e:	4603      	mov	r3, r0
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	761a      	strb	r2, [r3, #24]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bdb0      	pop	{r4, r5, r7, pc}

08000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800062c:	68fc      	ldr	r4, [r7, #12]
 800062e:	68b8      	ldr	r0, [r7, #8]
 8000630:	f000 f943 	bl	80008ba <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8000634:	4605      	mov	r5, r0
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4618      	mov	r0, r3
 800063c:	f008 ffe7 	bl	800960e <_ZNSaIcEC1Ev>
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	461a      	mov	r2, r3
 8000646:	4629      	mov	r1, r5
 8000648:	4620      	mov	r0, r4
 800064a:	f000 f910 	bl	800086e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4618      	mov	r0, r3
 8000654:	f008 ffdc 	bl	8009610 <_ZNSaIcED1Ev>
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ffa1 	bl	80005a0 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 800065e:	4603      	mov	r3, r0
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	761a      	strb	r2, [r3, #24]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	4618      	mov	r0, r3
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bdb0      	pop	{r4, r5, r7, pc}

08000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800067c:	68fc      	ldr	r4, [r7, #12]
 800067e:	68b8      	ldr	r0, [r7, #8]
 8000680:	f000 f926 	bl	80008d0 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8000684:	4605      	mov	r5, r0
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4618      	mov	r0, r3
 800068c:	f008 ffbf 	bl	800960e <_ZNSaIcEC1Ev>
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	461a      	mov	r2, r3
 8000696:	4629      	mov	r1, r5
 8000698:	4620      	mov	r0, r4
 800069a:	f000 f8e8 	bl	800086e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4618      	mov	r0, r3
 80006a4:	f008 ffb4 	bl	8009610 <_ZNSaIcED1Ev>
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ff79 	bl	80005a0 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 80006ae:	4603      	mov	r3, r0
 80006b0:	781a      	ldrb	r2, [r3, #0]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	761a      	strb	r2, [r3, #24]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4618      	mov	r0, r3
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bdb0      	pop	{r4, r5, r7, pc}

080006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80006cc:	68fc      	ldr	r4, [r7, #12]
 80006ce:	68b8      	ldr	r0, [r7, #8]
 80006d0:	f000 f909 	bl	80008e6 <_ZSt7forwardIRA3_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80006d4:	4605      	mov	r5, r0
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4618      	mov	r0, r3
 80006dc:	f008 ff97 	bl	800960e <_ZNSaIcEC1Ev>
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	461a      	mov	r2, r3
 80006e6:	4629      	mov	r1, r5
 80006e8:	4620      	mov	r0, r4
 80006ea:	f000 f8c0 	bl	800086e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4618      	mov	r0, r3
 80006f4:	f008 ff8c 	bl	8009610 <_ZNSaIcED1Ev>
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff51 	bl	80005a0 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 80006fe:	4603      	mov	r3, r0
 8000700:	781a      	ldrb	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	761a      	strb	r2, [r3, #24]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bdb0      	pop	{r4, r5, r7, pc}

08000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800071c:	68fc      	ldr	r4, [r7, #12]
 800071e:	68b8      	ldr	r0, [r7, #8]
 8000720:	f000 f8ec 	bl	80008fc <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8000724:	4605      	mov	r5, r0
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4618      	mov	r0, r3
 800072c:	f008 ff6f 	bl	800960e <_ZNSaIcEC1Ev>
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	461a      	mov	r2, r3
 8000736:	4629      	mov	r1, r5
 8000738:	4620      	mov	r0, r4
 800073a:	f000 f898 	bl	800086e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4618      	mov	r0, r3
 8000744:	f008 ff64 	bl	8009610 <_ZNSaIcED1Ev>
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ff29 	bl	80005a0 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 800074e:	4603      	mov	r3, r0
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	761a      	strb	r2, [r3, #24]
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	4618      	mov	r0, r3
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bdb0      	pop	{r4, r5, r7, pc}

08000760 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	bf0c      	ite	eq
 8000776:	2301      	moveq	r3, #1
 8000778:	2300      	movne	r3, #0
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4618      	mov	r0, r3
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	4413      	add	r3, r2
 800079a:	2200      	movs	r2, #0
 800079c:	72fa      	strb	r2, [r7, #11]
 800079e:	f107 020b 	add.w	r2, r7, #11
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffdb 	bl	8000760 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f083 0301 	eor.w	r3, r3, #1
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d003      	beq.n	80007be <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x36>
        ++__i;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3301      	adds	r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80007bc:	e7ea      	b.n	8000794 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xc>
      return __i;
 80007be:	68fb      	ldr	r3, [r7, #12]
    }
 80007c0:	4618      	mov	r0, r3
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f000 f93d 	bl	8000a50 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1Ev>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 f93c 	bl	8000a66 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEED1Ev>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
       *  Create a %map consisting of copies of the elements in the
       *  initializer_list @a __l.
       *  This is linear in N if the range is already sorted, and NlogN
       *  otherwise (where N is @a __l.size()).
       */
      map(initializer_list<value_type> __l,
 80007f8:	b5b0      	push	{r4, r5, r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	1d38      	adds	r0, r7, #4
 8000802:	e880 0006 	stmia.w	r0, {r1, r2}
 8000806:	603b      	str	r3, [r7, #0]
	  const _Compare& __comp = _Compare(),
	  const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
 8000808:	68fc      	ldr	r4, [r7, #12]
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f933 	bl	8000a7c <_ZNSaISt4pairIKc10token_typeEEC1ERKS3_>
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	461a      	mov	r2, r3
 800081c:	6839      	ldr	r1, [r7, #0]
 800081e:	4620      	mov	r0, r4
 8000820:	f000 f946 	bl	8000ab0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ffd9 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800082e:	68fc      	ldr	r4, [r7, #12]
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f96f 	bl	8000b16 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>
 8000838:	4605      	mov	r5, r0
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f976 	bl	8000b2e <_ZNKSt16initializer_listISt4pairIKc10token_typeEE3endEv>
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	4629      	mov	r1, r5
 8000848:	4620      	mov	r0, r4
 800084a:	f000 f982 	bl	8000b52 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	4618      	mov	r0, r3
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bdb0      	pop	{r4, r5, r7, pc}

08000858 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 800086e:	b590      	push	{r4, r7, lr}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 800087a:	68fc      	ldr	r4, [r7, #12]
 800087c:	68f8      	ldr	r0, [r7, #12]
 800087e:	f008 ff90 	bl	80097a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000882:	4603      	mov	r3, r0
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	4619      	mov	r1, r3
 8000888:	4620      	mov	r0, r4
 800088a:	f009 f8e0 	bl	8009a4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d006      	beq.n	80008a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x34>
 8000894:	68b8      	ldr	r0, [r7, #8]
 8000896:	f7ff fe3b 	bl	8000510 <_ZNSt11char_traitsIcE6lengthEPKc>
 800089a:	4602      	mov	r2, r0
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4413      	add	r3, r2
 80008a0:	e001      	b.n	80008a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x38>
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	461a      	mov	r2, r3
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f000 f8c1 	bl	8000a32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4618      	mov	r0, r3
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd90      	pop	{r4, r7, pc}

080008ba <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <_ZSt7forwardIRA3_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f945 	bl	8000baa <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f000 f944 	bl	8000bc0 <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>:
      map(initializer_list<value_type> __l,
 8000942:	b5b0      	push	{r4, r5, r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	1d38      	adds	r0, r7, #4
 800094c:	e880 0006 	stmia.w	r0, {r1, r2}
 8000950:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8000952:	68fc      	ldr	r4, [r7, #12]
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f93b 	bl	8000bd6 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKS9_>
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	461a      	mov	r2, r3
 8000966:	6839      	ldr	r1, [r7, #0]
 8000968:	4620      	mov	r0, r4
 800096a:	f000 f94e 	bl	8000c0a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1ERKSD_RKSE_>
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ffd9 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8000978:	68fc      	ldr	r4, [r7, #12]
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4618      	mov	r0, r3
 800097e:	f000 f977 	bl	8000c70 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>
 8000982:	4605      	mov	r5, r0
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f97e 	bl	8000c88 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE3endEv>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	4629      	mov	r1, r5
 8000992:	4620      	mov	r0, r4
 8000994:	f000 f98d 	bl	8000cb2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4618      	mov	r0, r3
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bdb0      	pop	{r4, r5, r7, pc}

080009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 f9ad 	bl	8000d0a <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1Ev>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 f9ac 	bl	8000d20 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEED1Ev>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
      map(initializer_list<value_type> __l,
 80009d2:	b5b0      	push	{r4, r5, r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	1d38      	adds	r0, r7, #4
 80009dc:	e880 0006 	stmia.w	r0, {r1, r2}
 80009e0:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 80009e2:	68fc      	ldr	r4, [r7, #12]
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f9a3 	bl	8000d36 <_ZNSaISt4pairIKc12double_tokenEEC1ERKS3_>
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	461a      	mov	r2, r3
 80009f6:	6839      	ldr	r1, [r7, #0]
 80009f8:	4620      	mov	r0, r4
 80009fa:	f000 f9b6 	bl	8000d6a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ffd9 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8000a08:	68fc      	ldr	r4, [r7, #12]
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 f9df 	bl	8000dd0 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>
 8000a12:	4605      	mov	r5, r0
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f9e6 	bl	8000de8 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE3endEv>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4629      	mov	r1, r5
 8000a22:	4620      	mov	r0, r4
 8000a24:	f000 f9f4 	bl	8000e10 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bdb0      	pop	{r4, r5, r7, pc}

08000a32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f000 fa10 	bl	8000e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>
        }
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_ZNSaISt4pairIKc10token_typeEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8000a86:	6839      	ldr	r1, [r7, #0]
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f9fe 	bl	8000e8a <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1ERKS5_>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f000 fa0b 	bl	8000ebc <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree() { }
#else
      _Rb_tree() = default;
#endif

      _Rb_tree(const _Compare& __comp,
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
	       const allocator_type& __a = allocator_type())
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8000abc:	68fc      	ldr	r4, [r7, #12]
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f9ec 	bl	8000ea2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1IS3_EERKSaIT_E>
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	461a      	mov	r2, r3
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	f000 f9fe 	bl	8000ed4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f9ed 	bl	8000ebc <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	371c      	adds	r7, #28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}

08000aec <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 fa29 	bl	8000f4c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4619      	mov	r1, r3
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 fa05 	bl	8000f0e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ffc6 	bl	8000a98 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <_ZNKSt16initializer_listISt4pairIKc10token_typeEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8000b2e:	b590      	push	{r4, r7, lr}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ffed 	bl	8000b16 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 fa10 	bl	8000f64 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE4sizeEv>
 8000b44:	4603      	mov	r3, r0
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4423      	add	r3, r4
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd90      	pop	{r4, r7, pc}

08000b52 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	using __same_value_type
	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;

      template<typename _InputIterator>
	__enable_if_t<__same_value_type<_InputIterator>::value>
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b088      	sub	sp, #32
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
	{
	  _Alloc_node __an(*this);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	68f9      	ldr	r1, [r7, #12]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fa09 	bl	8000f7c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d017      	beq.n	8000ba2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f000 fa11 	bl	8000f9a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	61fb      	str	r3, [r7, #28]
 8000b7c:	f107 021c 	add.w	r2, r7, #28
 8000b80:	f107 0318 	add.w	r3, r7, #24
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fa18 	bl	8000fbc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	69b9      	ldr	r1, [r7, #24]
 8000b94:	68f8      	ldr	r0, [r7, #12]
 8000b96:	f000 fa21 	bl	8000fdc <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	e7e3      	b.n	8000b6a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 8000ba2:	bf00      	nop
 8000ba4:	3720      	adds	r7, #32
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKS9_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8000be0:	6839      	ldr	r1, [r7, #0]
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 fa2d 	bl	8001042 <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSB_>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 fa3a 	bl	8001074 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1ERKSD_RKSE_>:
      _Rb_tree(const _Compare& __comp,
 8000c0a:	b590      	push	{r4, r7, lr}
 8000c0c:	b087      	sub	sp, #28
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	60f8      	str	r0, [r7, #12]
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8000c16:	68fc      	ldr	r4, [r7, #12]
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fa1b 	bl	800105a <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1IS9_EERKSaIT_E>
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	461a      	mov	r2, r3
 8000c2a:	68b9      	ldr	r1, [r7, #8]
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f000 fa2d 	bl	800108c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fa1c 	bl	8001074 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	371c      	adds	r7, #28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd90      	pop	{r4, r7, pc}

08000c46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 fa58 	bl	8001104 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4619      	mov	r1, r3
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f000 fa34 	bl	80010c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ffc6 	bl	8000bf2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ffed 	bl	8000c70 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>
 8000c96:	4604      	mov	r4, r0
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f000 fa3f 	bl	800111c <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE4sizeEv>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	1a9b      	subs	r3, r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4423      	add	r3, r4
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd90      	pop	{r4, r7, pc}

08000cb2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b088      	sub	sp, #32
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	68f9      	ldr	r1, [r7, #12]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fa35 	bl	8001134 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>
	  for (; __first != __last; ++__first)
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d017      	beq.n	8000d02 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f000 fa3d 	bl	8001152 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	61fb      	str	r3, [r7, #28]
 8000cdc:	f107 021c 	add.w	r2, r7, #28
 8000ce0:	f107 0318 	add.w	r3, r7, #24
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fa44 	bl	8001174 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSt17_Rb_tree_iteratorIS9_E>
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	69b9      	ldr	r1, [r7, #24]
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f000 fa4d 	bl	8001194 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	331c      	adds	r3, #28
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	e7e3      	b.n	8000cca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x18>
	}
 8000d02:	bf00      	nop
 8000d04:	3720      	adds	r7, #32
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_ZNSaISt4pairIKc12double_tokenEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8000d40:	6839      	ldr	r1, [r7, #0]
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 fa59 	bl	80011fa <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1ERKS5_>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 fa66 	bl	800122c <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree(const _Compare& __comp,
 8000d6a:	b590      	push	{r4, r7, lr}
 8000d6c:	b087      	sub	sp, #28
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8000d76:	68fc      	ldr	r4, [r7, #12]
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fa47 	bl	8001212 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1IS3_EERKSaIT_E>
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	461a      	mov	r2, r3
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f000 fa59 	bl	8001244 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fa48 	bl	800122c <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	371c      	adds	r7, #28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd90      	pop	{r4, r7, pc}

08000da6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 fa84 	bl	80012bc <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4619      	mov	r1, r3
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 fa60 	bl	800127e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ffc6 	bl	8000d52 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ffed 	bl	8000dd0 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>
 8000df6:	4604      	mov	r4, r0
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 fa6b 	bl	80012d4 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE4sizeEv>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	4613      	mov	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4413      	add	r3, r2
 8000e06:	4423      	add	r3, r4
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd90      	pop	{r4, r7, pc}

08000e10 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fa62 	bl	80012ec <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d017      	beq.n	8000e60 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f000 fa6a 	bl	800130a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8000e36:	4603      	mov	r3, r0
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	f107 021c 	add.w	r2, r7, #28
 8000e3e:	f107 0318 	add.w	r3, r7, #24
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fa71 	bl	800132c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	69b9      	ldr	r1, [r7, #24]
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f000 fa7a 	bl	800134c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	3303      	adds	r3, #3
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	e7e3      	b.n	8000e28 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8000e76:	4623      	mov	r3, r4
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	68b9      	ldr	r1, [r7, #8]
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f000 faad 	bl	80013dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
	}
 8000e82:	bf00      	nop
 8000e84:	371c      	adds	r7, #28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd90      	pop	{r4, r7, pc}

08000e8a <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	6039      	str	r1, [r7, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 fadd 	bl	800146c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1Ev>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 fadc 	bl	8001482 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 fad9 	bl	8001498 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEEONSt16remove_referenceIT_E4typeEOS9_>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4619      	mov	r1, r3
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f000 fadf 	bl	80014ae <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS5_>
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fae8 	bl	80014ca <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	3304      	adds	r3, #4
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fb29 	bl	8000556 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d012      	beq.n	8000f44 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8000f1e:	6838      	ldr	r0, [r7, #0]
 8000f20:	f000 fadf 	bl	80014e2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4619      	mov	r1, r3
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fff0 	bl	8000f0e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 8000f2e:	6838      	ldr	r0, [r7, #0]
 8000f30:	f000 fae3 	bl	80014fa <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000f34:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000f36:	6839      	ldr	r1, [r7, #0]
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 faea 	bl	8001512 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000f42:	e7e9      	b.n	8000f18 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
	}
    }
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	1d1a      	adds	r2, r3, #4
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fac1 	bl	8001534 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
    template<typename _Arg, typename _NodeGen>
#else
    template<typename _NodeGen>
#endif
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000fdc:	b5b0      	push	{r4, r5, r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
			const _Val& __v,
#endif
			_NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8000fea:	f107 0318 	add.w	r3, r7, #24
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fbd1 	bl	8001798 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 8000ff6:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 8000ff8:	f107 0010 	add.w	r0, r7, #16
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	68f9      	ldr	r1, [r7, #12]
 8001000:	f000 faa7 	bl	8001552 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>

      if (__res.second)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00f      	beq.n	800102a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
			  _GLIBCXX_FORWARD(_Arg, __v),
			  __node_gen);
 800100a:	693c      	ldr	r4, [r7, #16]
 800100c:	697d      	ldr	r5, [r7, #20]
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fbce 	bl	80017b0 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001014:	4602      	mov	r2, r0
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	4613      	mov	r3, r2
 800101c:	462a      	mov	r2, r5
 800101e:	4621      	mov	r1, r4
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f000 fbd0 	bl	80017c6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 8001026:	4603      	mov	r3, r0
 8001028:	e007      	b.n	800103a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fa7e 	bl	8001534 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8001038:	69fb      	ldr	r3, [r7, #28]
    }
 800103a:	4618      	mov	r0, r3
 800103c:	3720      	adds	r7, #32
 800103e:	46bd      	mov	sp, r7
 8001040:	bdb0      	pop	{r4, r5, r7, pc}

08001042 <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSB_>:
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1IS9_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 fbf7 	bl	8001858 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1Ev>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 fbf6 	bl	800186e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 fbf3 	bl	8001884 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEEONSt16remove_referenceIT_E4typeEOSF_>
 800109e:	4603      	mov	r3, r0
 80010a0:	4619      	mov	r1, r3
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 fbf9 	bl	800189a <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSB_>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	68b9      	ldr	r1, [r7, #8]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fc02 	bl	80018b6 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_>
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3304      	adds	r3, #4
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa4d 	bl	8000556 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d012      	beq.n	80010fc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x36>
	  _M_erase(_S_right(__x));
 80010d6:	6838      	ldr	r0, [r7, #0]
 80010d8:	f000 fbf9 	bl	80018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 80010dc:	4603      	mov	r3, r0
 80010de:	4619      	mov	r1, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff fff0 	bl	80010c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
	  _Link_type __y = _S_left(__x);
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f000 fbfd 	bl	80018e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 80010ec:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80010ee:	6839      	ldr	r1, [r7, #0]
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 fc04 	bl	80018fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>
	  __x = __y;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80010fa:	e7e9      	b.n	80010d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0xa>
    }
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE4sizeEv>:
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>:
	_Alloc_node(_Rb_tree& __t)
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	1d1a      	adds	r2, r3, #4
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fbdb 	bl	8001920 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSt17_Rb_tree_iteratorIS9_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af02      	add	r7, sp, #8
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 fceb 	bl	8001b84 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 80011ae:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 80011b0:	f107 0010 	add.w	r0, r7, #16
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	68f9      	ldr	r1, [r7, #12]
 80011b8:	f000 fbc1 	bl	800193e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_>
      if (__res.second)
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00f      	beq.n	80011e2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x4e>
			  __node_gen);
 80011c2:	693c      	ldr	r4, [r7, #16]
 80011c4:	697d      	ldr	r5, [r7, #20]
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fce8 	bl	8001b9c <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 80011cc:	4602      	mov	r2, r0
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	4613      	mov	r3, r2
 80011d4:	462a      	mov	r2, r5
 80011d6:	4621      	mov	r1, r4
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f000 fcea 	bl	8001bb2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>
 80011de:	4603      	mov	r3, r0
 80011e0:	e007      	b.n	80011f2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x5e>
      return iterator(__res.first);
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fb98 	bl	8001920 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 80011f0:	69fb      	ldr	r3, [r7, #28]
    }
 80011f2:	4618      	mov	r0, r3
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bdb0      	pop	{r4, r5, r7, pc}

080011fa <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1ERKS5_>:
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 fd11 	bl	8001c44 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1Ev>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 fd10 	bl	8001c5a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fd0d 	bl	8001c70 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEEONSt16remove_referenceIT_E4typeEOS9_>
 8001256:	4603      	mov	r3, r0
 8001258:	4619      	mov	r1, r3
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 fd13 	bl	8001c86 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS5_>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f930 	bl	80014ca <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3304      	adds	r3, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f971 	bl	8000556 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d012      	beq.n	80012b4 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 800128e:	6838      	ldr	r0, [r7, #0]
 8001290:	f000 fd07 	bl	8001ca2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001294:	4603      	mov	r3, r0
 8001296:	4619      	mov	r1, r3
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fff0 	bl	800127e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 800129e:	6838      	ldr	r0, [r7, #0]
 80012a0:	f000 fd0b 	bl	8001cba <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 80012a4:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80012a6:	6839      	ldr	r1, [r7, #0]
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 fd12 	bl	8001cd2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80012b2:	e7e9      	b.n	8001288 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE4sizeEv>:
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800130a:	b580      	push	{r7, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	1d1a      	adds	r2, r3, #4
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fce9 	bl	8001cf4 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af02      	add	r7, sp, #8
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800135a:	f107 0318 	add.w	r3, r7, #24
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fdf9 	bl	8001f58 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 8001366:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 8001368:	f107 0010 	add.w	r0, r7, #16
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	68f9      	ldr	r1, [r7, #12]
 8001370:	f000 fccf 	bl	8001d12 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>
      if (__res.second)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00f      	beq.n	800139a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
			  __node_gen);
 800137a:	693c      	ldr	r4, [r7, #16]
 800137c:	697d      	ldr	r5, [r7, #20]
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 fdf6 	bl	8001f70 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001384:	4602      	mov	r2, r0
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	4613      	mov	r3, r2
 800138c:	462a      	mov	r2, r5
 800138e:	4621      	mov	r1, r4
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f000 fdf8 	bl	8001f86 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 8001396:	4603      	mov	r3, r0
 8001398:	e007      	b.n	80013aa <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fca6 	bl	8001cf4 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 80013a8:	69fb      	ldr	r3, [r7, #28]
    }
 80013aa:	4618      	mov	r0, r3
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bdb0      	pop	{r4, r5, r7, pc}

080013b2 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80013b2:	b5b0      	push	{r4, r5, r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80013bc:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fe39 	bl	8002038 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80013c6:	462a      	mov	r2, r5
 80013c8:	6839      	ldr	r1, [r7, #0]
 80013ca:	4620      	mov	r0, r4
 80013cc:	f000 fe3e 	bl	800204c <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80013d0:	4603      	mov	r3, r0
    }
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080013dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80013ea:	68b8      	ldr	r0, [r7, #8]
 80013ec:	f000 fe14 	bl	8002018 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d001      	beq.n	8001402 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x28>
 8001402:	2300      	movs	r3, #0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8001408:	4817      	ldr	r0, [pc, #92]	; (8001468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8c>)
 800140a:	f008 f9b7 	bl	800977c <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	68b8      	ldr	r0, [r7, #8]
 8001412:	f7ff ffce 	bl	80013b2 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8001416:	4603      	mov	r3, r0
 8001418:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d910      	bls.n	8001442 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	4619      	mov	r1, r3
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f008 f9c3 	bl	80097b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800142e:	4603      	mov	r3, r0
 8001430:	4619      	mov	r1, r3
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f008 f9b1 	bl	800979a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	4619      	mov	r1, r3
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f008 f9b2 	bl	80097a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f008 f9ab 	bl	800979e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001448:	4603      	mov	r3, r0
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	4618      	mov	r0, r3
 8001450:	f008 fa0c 	bl	800986c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	4619      	mov	r1, r3
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f008 f9a6 	bl	80097aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	08009ec4 	.word	0x08009ec4

0800146c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80014b8:	6839      	ldr	r1, [r7, #0]
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fdd5 	bl	800206a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS7_>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	6039      	str	r1, [r7, #0]
      { }
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800151c:	6839      	ldr	r1, [r7, #0]
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fdaf 	bl	8002082 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 8001524:	6839      	ldr	r1, [r7, #0]
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 fdc0 	bl	80020ac <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001552:	b590      	push	{r4, r7, lr}
 8001554:	b08d      	sub	sp, #52	; 0x34
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fdb4 	bl	80020d0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEE13_M_const_castEv>
 8001568:	4603      	mov	r3, r0
 800156a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800156c:	69bc      	ldr	r4, [r7, #24]
 800156e:	68b8      	ldr	r0, [r7, #8]
 8001570:	f000 fdbf 	bl	80020f2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8001574:	4603      	mov	r3, r0
 8001576:	429c      	cmp	r4, r3
 8001578:	bf0c      	ite	eq
 800157a:	2301      	moveq	r3, #1
 800157c:	2300      	movne	r3, #0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d030      	beq.n	80015e6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	f000 fdc0 	bl	800210a <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>
 800158a:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8001590:	68bc      	ldr	r4, [r7, #8]
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f000 fdc5 	bl	8002122 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8001598:	4603      	mov	r3, r0
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fdcc 	bl	800213a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80015a2:	4603      	mov	r3, r0
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	4619      	mov	r1, r3
 80015a8:	4620      	mov	r0, r4
 80015aa:	f000 fdd2 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 80015b8:	2300      	movs	r3, #0
	  if (size() > 0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00c      	beq.n	80015d8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	68b8      	ldr	r0, [r7, #8]
 80015c4:	f000 fdad 	bl	8002122 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	4619      	mov	r1, r3
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 fdd3 	bl	800217c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80015d6:	e0db      	b.n	8001790 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fde2 	bl	80021a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 80015e4:	e0d4      	b.n	8001790 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80015e6:	68bc      	ldr	r4, [r7, #8]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fda5 	bl	800213a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	6839      	ldr	r1, [r7, #0]
 80015f6:	4620      	mov	r0, r4
 80015f8:	f000 fdab 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d057      	beq.n	80016b2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8001606:	69bc      	ldr	r4, [r7, #24]
 8001608:	68b8      	ldr	r0, [r7, #8]
 800160a:	f000 fe52 	bl	80022b2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 800160e:	4603      	mov	r3, r0
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	429c      	cmp	r4, r3
 8001614:	bf0c      	ite	eq
 8001616:	2301      	moveq	r3, #1
 8001618:	2300      	movne	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00d      	beq.n	800163c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8001620:	68b8      	ldr	r0, [r7, #8]
 8001622:	f000 fe46 	bl	80022b2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8001626:	4604      	mov	r4, r0
 8001628:	68b8      	ldr	r0, [r7, #8]
 800162a:	f000 fe42 	bl	80022b2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	4621      	mov	r1, r4
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 fe48 	bl	80022ca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800163a:	e0a9      	b.n	8001790 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800163c:	68bc      	ldr	r4, [r7, #8]
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fe5a 	bl	80022fc <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>
 8001648:	4603      	mov	r3, r0
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fd74 	bl	800213a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001652:	4603      	mov	r3, r0
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	4619      	mov	r1, r3
 8001658:	4620      	mov	r0, r4
 800165a:	f000 fd7a 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d01f      	beq.n	80016a4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff3b 	bl	80014e2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf0c      	ite	eq
 8001672:	2301      	moveq	r3, #1
 8001674:	2300      	movne	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00a      	beq.n	8001692 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
 8001680:	f107 0214 	add.w	r2, r7, #20
 8001684:	f107 0320 	add.w	r3, r7, #32
 8001688:	4619      	mov	r1, r3
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 fd76 	bl	800217c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8001690:	e07e      	b.n	8001790 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8001692:	f107 0218 	add.w	r2, r7, #24
 8001696:	f107 0318 	add.w	r3, r7, #24
 800169a:	4619      	mov	r1, r3
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 fe14 	bl	80022ca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80016a2:	e075      	b.n	8001790 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fd7c 	bl	80021a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 80016b0:	e06e      	b.n	8001790 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80016b2:	68bc      	ldr	r4, [r7, #8]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fd3f 	bl	800213a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80016bc:	4603      	mov	r3, r0
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4620      	mov	r0, r4
 80016c4:	f000 fd45 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d056      	beq.n	800177c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80016d2:	69bc      	ldr	r4, [r7, #24]
 80016d4:	68b8      	ldr	r0, [r7, #8]
 80016d6:	f000 fd24 	bl	8002122 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80016da:	4603      	mov	r3, r0
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	429c      	cmp	r4, r3
 80016e0:	bf0c      	ite	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	2300      	movne	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00c      	beq.n	8001706 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
 80016f0:	68b8      	ldr	r0, [r7, #8]
 80016f2:	f000 fd16 	bl	8002122 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80016f6:	4602      	mov	r2, r0
 80016f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fc:	4619      	mov	r1, r3
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 fd3c 	bl	800217c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8001704:	e044      	b.n	8001790 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8001706:	68bc      	ldr	r4, [r7, #8]
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fe06 	bl	800231e <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEppEv>
 8001712:	4603      	mov	r3, r0
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fd0f 	bl	800213a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	6839      	ldr	r1, [r7, #0]
 8001722:	4620      	mov	r0, r4
 8001724:	f000 fd15 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d01f      	beq.n	800176e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fed6 	bl	80014e2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	bf0c      	ite	eq
 800173c:	2301      	moveq	r3, #1
 800173e:	2300      	movne	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00a      	beq.n	800175c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8001746:	2300      	movs	r3, #0
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
 800174a:	f107 0218 	add.w	r2, r7, #24
 800174e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001752:	4619      	mov	r1, r3
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f000 fd11 	bl	800217c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800175a:	e019      	b.n	8001790 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800175c:	f107 0210 	add.w	r2, r7, #16
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 fdaf 	bl	80022ca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800176c:	e010      	b.n	8001790 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	68b9      	ldr	r1, [r7, #8]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fd17 	bl	80021a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 800177a:	e009      	b.n	8001790 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001780:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001784:	f107 0318 	add.w	r3, r7, #24
 8001788:	4619      	mov	r1, r3
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 fdd8 	bl	8002340 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	3734      	adds	r7, #52	; 0x34
 8001794:	46bd      	mov	sp, r7
 8001796:	bd90      	pop	{r4, r7, pc}

08001798 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80017c6:	b5b0      	push	{r4, r5, r7, lr}
 80017c8:	b088      	sub	sp, #32
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d11a      	bne.n	8001810 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 fc89 	bl	80020f2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 80017e0:	4602      	mov	r2, r0
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d013      	beq.n	8001810 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80017e8:	68fc      	ldr	r4, [r7, #12]
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	6839      	ldr	r1, [r7, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ffd1 	bl	8001798 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 80017f6:	4605      	mov	r5, r0
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fc9e 	bl	800213a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	4629      	mov	r1, r5
 8001804:	4620      	mov	r0, r4
 8001806:	f000 fca4 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 8001814:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8001816:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8001818:	6838      	ldr	r0, [r7, #0]
 800181a:	f7ff ffc9 	bl	80017b0 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 800181e:	4603      	mov	r3, r0
 8001820:	4619      	mov	r1, r3
 8001822:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001824:	f000 fda2 	bl	800236c <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 8001828:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800182e:	7ff8      	ldrb	r0, [r7, #31]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	69b9      	ldr	r1, [r7, #24]
 8001834:	f007 ff43 	bl	80096be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	69b9      	ldr	r1, [r7, #24]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fe73 	bl	8001534 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 800184e:	697b      	ldr	r3, [r7, #20]
      }
 8001850:	4618      	mov	r0, r3
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bdb0      	pop	{r4, r5, r7, pc}

08001858 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSB_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80018a4:	6839      	ldr	r1, [r7, #0]
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fd74 	bl	8002394 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSD_>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
      { }
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001908:	6839      	ldr	r1, [r7, #0]
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 fd4e 	bl	80023ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>
	_M_put_node(__p);
 8001910:	6839      	ldr	r1, [r7, #0]
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fd5f 	bl	80023d6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>
      }
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800193e:	b590      	push	{r4, r7, lr}
 8001940:	b08d      	sub	sp, #52	; 0x34
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4618      	mov	r0, r3
 8001950:	f000 fd53 	bl	80023fa <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE13_M_const_castEv>
 8001954:	4603      	mov	r3, r0
 8001956:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8001958:	69bc      	ldr	r4, [r7, #24]
 800195a:	68b8      	ldr	r0, [r7, #8]
 800195c:	f000 fd5e 	bl	800241c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8001960:	4603      	mov	r3, r0
 8001962:	429c      	cmp	r4, r3
 8001964:	bf0c      	ite	eq
 8001966:	2301      	moveq	r3, #1
 8001968:	2300      	movne	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d030      	beq.n	80019d2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x94>
	  if (size() > 0
 8001970:	68b8      	ldr	r0, [r7, #8]
 8001972:	f000 fd5f 	bl	8002434 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>
 8001976:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x66>
 800197c:	68bc      	ldr	r4, [r7, #8]
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f000 fd64 	bl	800244c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 8001984:	4603      	mov	r3, r0
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fd6b 	bl	8002464 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800198e:	4603      	mov	r3, r0
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	4620      	mov	r0, r4
 8001996:	f000 fd71 	bl	800247c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x66>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x68>
 80019a4:	2300      	movs	r3, #0
	  if (size() > 0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00c      	beq.n	80019c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x86>
	    return _Res(0, _M_rightmost());
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	68b8      	ldr	r0, [r7, #8]
 80019b0:	f000 fd4c 	bl	800244c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 fbdd 	bl	800217c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80019c2:	e0db      	b.n	8001b7c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fd65 	bl	800249a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 80019d0:	e0d4      	b.n	8001b7c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80019d2:	68bc      	ldr	r4, [r7, #8]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fd44 	bl	8002464 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	6839      	ldr	r1, [r7, #0]
 80019e2:	4620      	mov	r0, r4
 80019e4:	f000 fd4a 	bl	800247c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d057      	beq.n	8001a9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x160>
	  iterator __before = __pos;
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80019f2:	69bc      	ldr	r4, [r7, #24]
 80019f4:	68b8      	ldr	r0, [r7, #8]
 80019f6:	f000 fdd5 	bl	80025a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 80019fa:	4603      	mov	r3, r0
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	429c      	cmp	r4, r3
 8001a00:	bf0c      	ite	eq
 8001a02:	2301      	moveq	r3, #1
 8001a04:	2300      	movne	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00d      	beq.n	8001a28 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8001a0c:	68b8      	ldr	r0, [r7, #8]
 8001a0e:	f000 fdc9 	bl	80025a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 8001a12:	4604      	mov	r4, r0
 8001a14:	68b8      	ldr	r0, [r7, #8]
 8001a16:	f000 fdc5 	bl	80025a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4621      	mov	r1, r4
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 fc52 	bl	80022ca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001a26:	e0a9      	b.n	8001b7c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8001a28:	68bc      	ldr	r4, [r7, #8]
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fdc4 	bl	80025bc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>
 8001a34:	4603      	mov	r3, r0
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 fd13 	bl	8002464 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	4619      	mov	r1, r3
 8001a44:	4620      	mov	r0, r4
 8001a46:	f000 fd19 	bl	800247c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01f      	beq.n	8001a90 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff3b 	bl	80018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	bf0c      	ite	eq
 8001a5e:	2301      	moveq	r3, #1
 8001a60:	2300      	movne	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00a      	beq.n	8001a7e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x140>
		return _Res(0, __before._M_node);
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
 8001a6c:	f107 0214 	add.w	r2, r7, #20
 8001a70:	f107 0320 	add.w	r3, r7, #32
 8001a74:	4619      	mov	r1, r3
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 fb80 	bl	800217c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8001a7c:	e07e      	b.n	8001b7c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8001a7e:	f107 0218 	add.w	r2, r7, #24
 8001a82:	f107 0318 	add.w	r3, r7, #24
 8001a86:	4619      	mov	r1, r3
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 fc1e 	bl	80022ca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001a8e:	e075      	b.n	8001b7c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fcff 	bl	800249a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 8001a9c:	e06e      	b.n	8001b7c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8001a9e:	68bc      	ldr	r4, [r7, #8]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 fcde 	bl	8002464 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f000 fce4 	bl	800247c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d056      	beq.n	8001b68 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x22a>
	  iterator __after = __pos;
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001abe:	69bc      	ldr	r4, [r7, #24]
 8001ac0:	68b8      	ldr	r0, [r7, #8]
 8001ac2:	f000 fcc3 	bl	800244c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	429c      	cmp	r4, r3
 8001acc:	bf0c      	ite	eq
 8001ace:	2301      	moveq	r3, #1
 8001ad0:	2300      	movne	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00c      	beq.n	8001af2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x1b4>
	    return _Res(0, _M_rightmost());
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
 8001adc:	68b8      	ldr	r0, [r7, #8]
 8001ade:	f000 fcb5 	bl	800244c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae8:	4619      	mov	r1, r3
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fb46 	bl	800217c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8001af0:	e044      	b.n	8001b7c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8001af2:	68bc      	ldr	r4, [r7, #8]
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 fd70 	bl	80025de <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEppEv>
 8001afe:	4603      	mov	r3, r0
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fcae 	bl	8002464 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	6839      	ldr	r1, [r7, #0]
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f000 fcb4 	bl	800247c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01f      	beq.n	8001b5a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fed6 	bl	80018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf0c      	ite	eq
 8001b28:	2301      	moveq	r3, #1
 8001b2a:	2300      	movne	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00a      	beq.n	8001b48 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x20a>
		return _Res(0, __pos._M_node);
 8001b32:	2300      	movs	r3, #0
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b36:	f107 0218 	add.w	r2, r7, #24
 8001b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3e:	4619      	mov	r1, r3
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 fb1b 	bl	800217c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8001b46:	e019      	b.n	8001b7c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8001b48:	f107 0210 	add.w	r2, r7, #16
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	4619      	mov	r1, r3
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 fbb9 	bl	80022ca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001b58:	e010      	b.n	8001b7c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fc9a 	bl	800249a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 8001b66:	e009      	b.n	8001b7c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	return _Res(__pos._M_node, 0);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b6c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	4619      	mov	r1, r3
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 fbe2 	bl	8002340 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	3734      	adds	r7, #52	; 0x34
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}

08001b84 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>:
      operator()(const _Pair& __x) const
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001bb2:	b5b0      	push	{r4, r5, r7, lr}
 8001bb4:	b088      	sub	sp, #32
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d11a      	bne.n	8001bfc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fc28 	bl	800241c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d013      	beq.n	8001bfc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8001bd4:	68fc      	ldr	r4, [r7, #12]
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	6839      	ldr	r1, [r7, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ffd1 	bl	8001b84 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 8001be2:	4605      	mov	r5, r0
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fc3d 	bl	8002464 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	4629      	mov	r1, r5
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f000 fc43 	bl	800247c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4e>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x50>
 8001c00:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8001c02:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8001c04:	6838      	ldr	r0, [r7, #0]
 8001c06:	f7ff ffc9 	bl	8001b9c <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c10:	f000 fcf6 	bl	8002600 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>
 8001c14:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001c1a:	7ff8      	ldrb	r0, [r7, #31]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	69b9      	ldr	r1, [r7, #24]
 8001c20:	f007 fd4d 	bl	80096be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	69b9      	ldr	r1, [r7, #24]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fe73 	bl	8001920 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8001c3a:	697b      	ldr	r3, [r7, #20]
      }
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bdb0      	pop	{r4, r5, r7, pc}

08001c44 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001c90:	6839      	ldr	r1, [r7, #0]
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 fcc8 	bl	8002628 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS7_>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 fcae 	bl	8002640 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 8001ce4:	6839      	ldr	r1, [r7, #0]
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fcbf 	bl	800266a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d12:	b590      	push	{r4, r7, lr}
 8001d14:	b08d      	sub	sp, #52	; 0x34
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fcb3 	bl	800268e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEE13_M_const_castEv>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8001d2c:	69bc      	ldr	r4, [r7, #24]
 8001d2e:	68b8      	ldr	r0, [r7, #8]
 8001d30:	f000 fcbe 	bl	80026b0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8001d34:	4603      	mov	r3, r0
 8001d36:	429c      	cmp	r4, r3
 8001d38:	bf0c      	ite	eq
 8001d3a:	2301      	moveq	r3, #1
 8001d3c:	2300      	movne	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d030      	beq.n	8001da6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 8001d44:	68b8      	ldr	r0, [r7, #8]
 8001d46:	f000 fcbf 	bl	80026c8 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>
 8001d4a:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8001d50:	68bc      	ldr	r4, [r7, #8]
 8001d52:	68b8      	ldr	r0, [r7, #8]
 8001d54:	f000 fcc4 	bl	80026e0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 fccb 	bl	80026f8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001d62:	4603      	mov	r3, r0
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	4619      	mov	r1, r3
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f000 f9f2 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 8001d78:	2300      	movs	r3, #0
	  if (size() > 0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00c      	beq.n	8001d98 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	68b8      	ldr	r0, [r7, #8]
 8001d84:	f000 fcac 	bl	80026e0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f9f3 	bl	800217c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8001d96:	e0db      	b.n	8001f50 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fcb6 	bl	8002710 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8001da4:	e0d4      	b.n	8001f50 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001da6:	68bc      	ldr	r4, [r7, #8]
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fca4 	bl	80026f8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	6839      	ldr	r1, [r7, #0]
 8001db6:	4620      	mov	r0, r4
 8001db8:	f000 f9cb 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d057      	beq.n	8001e72 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8001dc6:	69bc      	ldr	r4, [r7, #24]
 8001dc8:	68b8      	ldr	r0, [r7, #8]
 8001dca:	f000 fd26 	bl	800281a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	429c      	cmp	r4, r3
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2301      	moveq	r3, #1
 8001dd8:	2300      	movne	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00d      	beq.n	8001dfc <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8001de0:	68b8      	ldr	r0, [r7, #8]
 8001de2:	f000 fd1a 	bl	800281a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8001de6:	4604      	mov	r4, r0
 8001de8:	68b8      	ldr	r0, [r7, #8]
 8001dea:	f000 fd16 	bl	800281a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461a      	mov	r2, r3
 8001df2:	4621      	mov	r1, r4
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fa68 	bl	80022ca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001dfa:	e0a9      	b.n	8001f50 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8001dfc:	68bc      	ldr	r4, [r7, #8]
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fd15 	bl	8002832 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fc73 	bl	80026f8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001e12:	4603      	mov	r3, r0
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	4619      	mov	r1, r3
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f000 f99a 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01f      	beq.n	8001e64 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff3b 	bl	8001ca2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bf0c      	ite	eq
 8001e32:	2301      	moveq	r3, #1
 8001e34:	2300      	movne	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00a      	beq.n	8001e52 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	f107 0214 	add.w	r2, r7, #20
 8001e44:	f107 0320 	add.w	r3, r7, #32
 8001e48:	4619      	mov	r1, r3
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 f996 	bl	800217c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8001e50:	e07e      	b.n	8001f50 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8001e52:	f107 0218 	add.w	r2, r7, #24
 8001e56:	f107 0318 	add.w	r3, r7, #24
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 fa34 	bl	80022ca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001e62:	e075      	b.n	8001f50 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fc50 	bl	8002710 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8001e70:	e06e      	b.n	8001f50 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8001e72:	68bc      	ldr	r4, [r7, #8]
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fc3e 	bl	80026f8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	4620      	mov	r0, r4
 8001e84:	f000 f965 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d056      	beq.n	8001f3c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001e92:	69bc      	ldr	r4, [r7, #24]
 8001e94:	68b8      	ldr	r0, [r7, #8]
 8001e96:	f000 fc23 	bl	80026e0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	429c      	cmp	r4, r3
 8001ea0:	bf0c      	ite	eq
 8001ea2:	2301      	moveq	r3, #1
 8001ea4:	2300      	movne	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00c      	beq.n	8001ec6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb0:	68b8      	ldr	r0, [r7, #8]
 8001eb2:	f000 fc15 	bl	80026e0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f95c 	bl	800217c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8001ec4:	e044      	b.n	8001f50 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8001ec6:	68bc      	ldr	r4, [r7, #8]
 8001ec8:	f107 0310 	add.w	r3, r7, #16
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fcc1 	bl	8002854 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEppEv>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 fc0e 	bl	80026f8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	6839      	ldr	r1, [r7, #0]
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f000 f935 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01f      	beq.n	8001f2e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fed6 	bl	8001ca2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8001f06:	2300      	movs	r3, #0
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f0a:	f107 0218 	add.w	r2, r7, #24
 8001f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f12:	4619      	mov	r1, r3
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 f931 	bl	800217c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8001f1a:	e019      	b.n	8001f50 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8001f1c:	f107 0210 	add.w	r2, r7, #16
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	4619      	mov	r1, r3
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f9cf 	bl	80022ca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001f2c:	e010      	b.n	8001f50 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	68b9      	ldr	r1, [r7, #8]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 fbeb 	bl	8002710 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8001f3a:	e009      	b.n	8001f50 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f40:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001f44:	f107 0318 	add.w	r3, r7, #24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f9f8 	bl	8002340 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	3734      	adds	r7, #52	; 0x34
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd90      	pop	{r4, r7, pc}

08001f58 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>:
      operator()(const _Pair& __x) const
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001f86:	b5b0      	push	{r4, r5, r7, lr}
 8001f88:	b088      	sub	sp, #32
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d11a      	bne.n	8001fd0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 fb88 	bl	80026b0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8001fa8:	68fc      	ldr	r4, [r7, #12]
 8001faa:	f107 0310 	add.w	r3, r7, #16
 8001fae:	6839      	ldr	r1, [r7, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ffd1 	bl	8001f58 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 8001fb6:	4605      	mov	r5, r0
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fb9d 	bl	80026f8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f000 f8c4 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 8001fd4:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8001fd6:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8001fd8:	6838      	ldr	r0, [r7, #0]
 8001fda:	f7ff ffc9 	bl	8001f70 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fe4:	f000 fc47 	bl	8002876 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 8001fe8:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001fee:	7ff8      	ldrb	r0, [r7, #31]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	69b9      	ldr	r1, [r7, #24]
 8001ff4:	f007 fb63 	bl	80096be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	69b9      	ldr	r1, [r7, #24]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fe73 	bl	8001cf4 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 800200e:	697b      	ldr	r3, [r7, #20]
      }
 8002010:	4618      	mov	r0, r3
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bdb0      	pop	{r4, r5, r7, pc}

08002018 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf0c      	ite	eq
 8002026:	2301      	moveq	r3, #1
 8002028:	2300      	movne	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
    }
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002082:	b590      	push	{r4, r7, lr}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fc06 	bl	800289e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8002092:	4604      	mov	r4, r0
 8002094:	6838      	ldr	r0, [r7, #0]
 8002096:	f000 fc0d 	bl	80028b4 <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 800209a:	4603      	mov	r3, r0
 800209c:	4619      	mov	r1, r3
 800209e:	4620      	mov	r0, r4
 80020a0:	f000 fc16 	bl	80028d0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE7destroyIS4_EEvRS6_PT_>
      }
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}

080020ac <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fbf1 	bl	800289e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 80020bc:	4603      	mov	r3, r0
 80020be:	2201      	movs	r2, #1
 80020c0:	6839      	ldr	r1, [r7, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fc11 	bl	80028ea <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE10deallocateERS6_PS5_j>
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	f107 030c 	add.w	r3, r7, #12
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fa26 	bl	8001534 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3310      	adds	r3, #16
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fbe0 	bl	8002908 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8002148:	4603      	mov	r3, r0
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <_ZNKSt4lessIcEclERKcS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	bf34      	ite	cc
 800216a:	2301      	movcc	r3, #1
 800216c:	2300      	movcs	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 fbcc 	bl	800292e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002196:	4603      	mov	r3, r0
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b08b      	sub	sp, #44	; 0x2c
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80021b4:	68b8      	ldr	r0, [r7, #8]
 80021b6:	f7fe fec9 	bl	8000f4c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 80021ba:	4603      	mov	r3, r0
 80021bc:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80021be:	68b8      	ldr	r0, [r7, #8]
 80021c0:	f7ff ff97 	bl	80020f2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 80021c4:	4603      	mov	r3, r0
 80021c6:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80021d8:	68bc      	ldr	r4, [r7, #8]
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fb93 	bl	8002908 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4620      	mov	r0, r4
 80021ea:	f7ff ffb2 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80021f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff f97b 	bl	80014fa <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002204:	4603      	mov	r3, r0
 8002206:	e004      	b.n	8002212 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f969 	bl	80014e2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002210:	4603      	mov	r3, r0
 8002212:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8002214:	e7db      	b.n	80021ce <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff f988 	bl	8001534 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8002224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01d      	beq.n	8002268 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 800222c:	68b8      	ldr	r0, [r7, #8]
 800222e:	f000 fb89 	bl	8002944 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>
 8002232:	4603      	mov	r3, r0
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	f107 021c 	add.w	r2, r7, #28
 800223a:	f107 0310 	add.w	r3, r7, #16
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fb90 	bl	8002966 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc10token_typeEES6_>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 800224c:	f107 0214 	add.w	r2, r7, #20
 8002250:	f107 0318 	add.w	r3, r7, #24
 8002254:	4619      	mov	r1, r3
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fb99 	bl	800298e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>
 800225c:	e025      	b.n	80022aa <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 800225e:	f107 0310 	add.w	r3, r7, #16
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f84a 	bl	80022fc <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8002268:	68bc      	ldr	r4, [r7, #8]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff64 	bl	800213a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002272:	4603      	mov	r3, r0
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	4619      	mov	r1, r3
 8002278:	4620      	mov	r0, r4
 800227a:	f7ff ff6a 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8002284:	f107 0214 	add.w	r2, r7, #20
 8002288:	f107 0318 	add.w	r3, r7, #24
 800228c:	4619      	mov	r1, r3
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fb7d 	bl	800298e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>
 8002294:	e009      	b.n	80022aa <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
 800229a:	f107 0220 	add.w	r2, r7, #32
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	4619      	mov	r1, r3
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f84b 	bl	8002340 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	372c      	adds	r7, #44	; 0x2c
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd90      	pop	{r4, r7, pc}

080022b2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	330c      	adds	r3, #12
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80022d6:	68b8      	ldr	r0, [r7, #8]
 80022d8:	f000 fb29 	bl	800292e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80022dc:	4603      	mov	r3, r0
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 fb22 	bl	800292e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80022ea:	4603      	mov	r3, r0
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f007 f9d6 	bl	80096ba <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800230e:	4602      	mov	r2, r0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	601a      	str	r2, [r3, #0]
	return *this;
 8002314:	687b      	ldr	r3, [r7, #4]
      }
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f007 f9b2 	bl	8009694 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8002330:	4602      	mov	r2, r0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	601a      	str	r2, [r3, #0]
	return *this;
 8002336:	687b      	ldr	r3, [r7, #4]
      }
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 800234c:	68b8      	ldr	r0, [r7, #8]
 800234e:	f000 faee 	bl	800292e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002352:	4603      	mov	r3, r0
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681c      	ldr	r4, [r3, #0]
 800237a:	6838      	ldr	r0, [r7, #0]
 800237c:	f7ff fa18 	bl	80017b0 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002380:	4603      	mov	r3, r0
 8002382:	4619      	mov	r1, r3
 8002384:	4620      	mov	r0, r4
 8002386:	f000 fb1b 	bl	80029c0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 800238a:	4603      	mov	r3, r0
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}

08002394 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSD_>:
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80023ac:	b590      	push	{r4, r7, lr}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fb19 	bl	80029ee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 80023bc:	4604      	mov	r4, r0
 80023be:	6838      	ldr	r0, [r7, #0]
 80023c0:	f000 fb20 	bl	8002a04 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4619      	mov	r1, r3
 80023c8:	4620      	mov	r0, r4
 80023ca:	f000 fb29 	bl	8002a20 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE7destroyISA_EEvRSC_PT_>
      }
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd90      	pop	{r4, r7, pc}

080023d6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fb04 	bl	80029ee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2201      	movs	r2, #1
 80023ea:	6839      	ldr	r1, [r7, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fb24 	bl	8002a3a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE10deallocateERSC_PSB_j>
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fa87 	bl	8001920 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3310      	adds	r3, #16
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 faf3 	bl	8002a58 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8002472:	4603      	mov	r3, r0
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	68b8      	ldr	r0, [r7, #8]
 800248c:	f000 faf7 	bl	8002a7e <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 8002490:	4603      	mov	r3, r0
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800249a:	b590      	push	{r4, r7, lr}
 800249c:	b08b      	sub	sp, #44	; 0x2c
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80024a6:	68b8      	ldr	r0, [r7, #8]
 80024a8:	f7fe fe2c 	bl	8001104 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 80024ac:	4603      	mov	r3, r0
 80024ae:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80024b0:	68b8      	ldr	r0, [r7, #8]
 80024b2:	f7ff ffb3 	bl	800241c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 80024b6:	4603      	mov	r3, r0
 80024b8:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d020      	beq.n	8002508 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6e>
	  __y = __x;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80024ca:	68bc      	ldr	r4, [r7, #8]
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fac2 	bl	8002a58 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461a      	mov	r2, r3
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4620      	mov	r0, r4
 80024dc:	f7ff ffce 	bl	800247c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80024e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x60>
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff f9f8 	bl	80018e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 80024f6:	4603      	mov	r3, r0
 80024f8:	e004      	b.n	8002504 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6a>
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff f9e6 	bl	80018ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002502:	4603      	mov	r3, r0
 8002504:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8002506:	e7db      	b.n	80024c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x26>
      iterator __j = iterator(__y);
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	f107 0310 	add.w	r3, r7, #16
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fa05 	bl	8001920 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8002516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800251a:	2b00      	cmp	r3, #0
 800251c:	d01d      	beq.n	800255a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 800251e:	68b8      	ldr	r0, [r7, #8]
 8002520:	f000 fabd 	bl	8002a9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>
 8002524:	4603      	mov	r3, r0
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	f107 021c 	add.w	r2, r7, #28
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f000 fac4 	bl	8002ac0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 800253e:	f107 0214 	add.w	r2, r7, #20
 8002542:	f107 0318 	add.w	r3, r7, #24
 8002546:	4619      	mov	r1, r3
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 facd 	bl	8002ae8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>
 800254e:	e025      	b.n	800259c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4618      	mov	r0, r3
 8002556:	f000 f831 	bl	80025bc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800255a:	68bc      	ldr	r4, [r7, #8]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ff80 	bl	8002464 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002564:	4603      	mov	r3, r0
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	4619      	mov	r1, r3
 800256a:	4620      	mov	r0, r4
 800256c:	f7ff ff86 	bl	800247c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 8002576:	f107 0214 	add.w	r2, r7, #20
 800257a:	f107 0318 	add.w	r3, r7, #24
 800257e:	4619      	mov	r1, r3
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fab1 	bl	8002ae8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>
 8002586:	e009      	b.n	800259c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	f107 0220 	add.w	r2, r7, #32
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	4619      	mov	r1, r3
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f7ff fed2 	bl	8002340 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	372c      	adds	r7, #44	; 0x2c
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd90      	pop	{r4, r7, pc}

080025a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	330c      	adds	r3, #12
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f007 f876 	bl	80096ba <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	601a      	str	r2, [r3, #0]
	return *this;
 80025d4:	687b      	ldr	r3, [r7, #4]
      }
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f007 f852 	bl	8009694 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80025f0:	4602      	mov	r2, r0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	601a      	str	r2, [r3, #0]
	return *this;
 80025f6:	687b      	ldr	r3, [r7, #4]
      }
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>:
	  operator()(_Arg&& __arg) const
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681c      	ldr	r4, [r3, #0]
 800260e:	6838      	ldr	r0, [r7, #0]
 8002610:	f7ff fac4 	bl	8001b9c <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8002614:	4603      	mov	r3, r0
 8002616:	4619      	mov	r1, r3
 8002618:	4620      	mov	r0, r4
 800261a:	f000 fa7e 	bl	8002b1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>
 800261e:	4603      	mov	r3, r0
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bd90      	pop	{r4, r7, pc}

08002628 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS7_>:
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fa7c 	bl	8002b48 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8002650:	4604      	mov	r4, r0
 8002652:	6838      	ldr	r0, [r7, #0]
 8002654:	f000 fa83 	bl	8002b5e <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 8002658:	4603      	mov	r3, r0
 800265a:	4619      	mov	r1, r3
 800265c:	4620      	mov	r0, r4
 800265e:	f000 fa8c 	bl	8002b7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE7destroyIS4_EEvRS6_PT_>
      }
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bd90      	pop	{r4, r7, pc}

0800266a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fa67 	bl	8002b48 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 800267a:	4603      	mov	r3, r0
 800267c:	2201      	movs	r2, #1
 800267e:	6839      	ldr	r1, [r7, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fa87 	bl	8002b94 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE10deallocateERS6_PS5_j>
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	f107 030c 	add.w	r3, r7, #12
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fb27 	bl	8001cf4 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3304      	adds	r3, #4
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3310      	adds	r3, #16
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fa56 	bl	8002bb2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8002706:	4603      	mov	r3, r0
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b08b      	sub	sp, #44	; 0x2c
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800271c:	68b8      	ldr	r0, [r7, #8]
 800271e:	f7fe fdcd 	bl	80012bc <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8002722:	4603      	mov	r3, r0
 8002724:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8002726:	68b8      	ldr	r0, [r7, #8]
 8002728:	f7ff ffc2 	bl	80026b0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 800272c:	4603      	mov	r3, r0
 800272e:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8002740:	68bc      	ldr	r4, [r7, #8]
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fa34 	bl	8002bb2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800274a:	4603      	mov	r3, r0
 800274c:	461a      	mov	r2, r3
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4620      	mov	r0, r4
 8002752:	f7ff fcfe 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 8002756:	4603      	mov	r3, r0
 8002758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800275c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff faa7 	bl	8001cba <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800276c:	4603      	mov	r3, r0
 800276e:	e004      	b.n	800277a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fa95 	bl	8001ca2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002778:	4603      	mov	r3, r0
 800277a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800277c:	e7db      	b.n	8002736 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	f107 0310 	add.w	r3, r7, #16
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fab4 	bl	8001cf4 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800278c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01d      	beq.n	80027d0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8002794:	68b8      	ldr	r0, [r7, #8]
 8002796:	f000 fa1f 	bl	8002bd8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>
 800279a:	4603      	mov	r3, r0
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	f107 021c 	add.w	r2, r7, #28
 80027a2:	f107 0310 	add.w	r3, r7, #16
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fa26 	bl	8002bfa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEES6_>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 80027b4:	f107 0214 	add.w	r2, r7, #20
 80027b8:	f107 0318 	add.w	r3, r7, #24
 80027bc:	4619      	mov	r1, r3
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fa2f 	bl	8002c22 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>
 80027c4:	e025      	b.n	8002812 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 80027c6:	f107 0310 	add.w	r3, r7, #16
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f831 	bl	8002832 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80027d0:	68bc      	ldr	r4, [r7, #8]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff8f 	bl	80026f8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80027da:	4603      	mov	r3, r0
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4619      	mov	r1, r3
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7ff fcb6 	bl	8002152 <_ZNKSt4lessIcEclERKcS2_>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 80027ec:	f107 0214 	add.w	r2, r7, #20
 80027f0:	f107 0318 	add.w	r3, r7, #24
 80027f4:	4619      	mov	r1, r3
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fa13 	bl	8002c22 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>
 80027fc:	e009      	b.n	8002812 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
 8002802:	f107 0220 	add.w	r2, r7, #32
 8002806:	f107 0310 	add.w	r3, r7, #16
 800280a:	4619      	mov	r1, r3
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f7ff fd97 	bl	8002340 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	372c      	adds	r7, #44	; 0x2c
 8002816:	46bd      	mov	sp, r7
 8002818:	bd90      	pop	{r4, r7, pc}

0800281a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	330c      	adds	r3, #12
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f006 ff3b 	bl	80096ba <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8002844:	4602      	mov	r2, r0
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	601a      	str	r2, [r3, #0]
	return *this;
 800284a:	687b      	ldr	r3, [r7, #4]
      }
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f006 ff17 	bl	8009694 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8002866:	4602      	mov	r2, r0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	601a      	str	r2, [r3, #0]
	return *this;
 800286c:	687b      	ldr	r3, [r7, #4]
      }
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 8002876:	b590      	push	{r4, r7, lr}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681c      	ldr	r4, [r3, #0]
 8002884:	6838      	ldr	r0, [r7, #0]
 8002886:	f7ff fb73 	bl	8001f70 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 800288a:	4603      	mov	r3, r0
 800288c:	4619      	mov	r1, r3
 800288e:	4620      	mov	r0, r4
 8002890:	f000 f9e0 	bl	8002c54 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 8002894:	4603      	mov	r3, r0
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bd90      	pop	{r4, r7, pc}

0800289e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>:
      _M_valptr()
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3310      	adds	r3, #16
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 f9de 	bl	8002c82 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE7destroyIS4_EEvRS6_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 80028da:	6839      	ldr	r1, [r7, #0]
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f9dc 	bl	8002c9a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE7destroyIS5_EEvPT_>
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f9d8 	bl	8002cb0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE10deallocateEPS6_j>
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f9d9 	bl	8002cc8 <_ZNKSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 8002916:	4602      	mov	r2, r0
 8002918:	f107 030c 	add.w	r3, r7, #12
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe ff3a 	bl	8001798 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 8002924:	4603      	mov	r3, r0
      }
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fdec 	bl	8001534 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc10token_typeEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800299a:	68b8      	ldr	r0, [r7, #8]
 800299c:	f000 f9a2 	bl	8002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc10token_typeEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80029a0:	4603      	mov	r3, r0
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ffc0 	bl	800292e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80029ae:	4603      	mov	r3, r0
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f995 	bl	8002cfa <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>
 80029d0:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80029d2:	6838      	ldr	r0, [r7, #0]
 80029d4:	f7fe feec 	bl	80017b0 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	68f9      	ldr	r1, [r7, #12]
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f99c 	bl	8002d1c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 80029e4:	68fb      	ldr	r3, [r7, #12]
	}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>:
      _M_valptr()
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3310      	adds	r3, #16
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 f9a3 	bl	8002d5c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE7destroyISA_EEvRSC_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8002a2a:	6839      	ldr	r1, [r7, #0]
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f9a1 	bl	8002d74 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE7destroyISB_EEvPT_>
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f99e 	bl	8002d8c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE10deallocateEPSC_j>
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>:
      _S_key(_Const_Link_type __x)
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f99f 	bl	8002da4 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 8002a66:	4602      	mov	r2, r0
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f888 	bl	8001b84 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 8002a74:	4603      	mov	r3, r0
      }
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 8002a88:	6839      	ldr	r1, [r7, #0]
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f006 ffd1 	bl	8009a32 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8002a90:	4603      	mov	r3, r0
 8002a92:	0fdb      	lsrs	r3, r3, #31
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe ff35 	bl	8001920 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	bf0c      	ite	eq
 8002ad6:	2301      	moveq	r3, #1
 8002ad8:	2300      	movne	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002af4:	68b8      	ldr	r0, [r7, #8]
 8002af6:	f000 f963 	bl	8002dc0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEOT_RNSt16remove_referenceISE_E4typeE>
 8002afa:	4603      	mov	r3, r0
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ff13 	bl	800292e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f956 	bl	8002dd6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>
 8002b2a:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8002b2c:	6838      	ldr	r0, [r7, #0]
 8002b2e:	f7ff f835 	bl	8001b9c <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	68f9      	ldr	r1, [r7, #12]
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f95d 	bl	8002df8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>
	  return __tmp;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
	}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>:
      _M_valptr()
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3310      	adds	r3, #16
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f964 	bl	8002e38 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>
 8002b70:	4603      	mov	r3, r0
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8002b84:	6839      	ldr	r1, [r7, #0]
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f962 	bl	8002e50 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE7destroyIS5_EEvPT_>
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f95e 	bl	8002e66 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE10deallocateEPS6_j>
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f95f 	bl	8002e7e <_ZNKSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f107 030c 	add.w	r3, r7, #12
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff f9c5 	bl	8001f58 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 8002bce:	4603      	mov	r3, r0
      }
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	f107 030c 	add.w	r3, r7, #12
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff f882 	bl	8001cf4 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	bf0c      	ite	eq
 8002c10:	2301      	moveq	r3, #1
 8002c12:	2300      	movne	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002c2e:	68b8      	ldr	r0, [r7, #8]
 8002c30:	f000 f933 	bl	8002e9a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002c34:	4603      	mov	r3, r0
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff fe76 	bl	800292e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002c42:	4603      	mov	r3, r0
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f926 	bl	8002eb0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>
 8002c64:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8002c66:	6838      	ldr	r0, [r7, #0]
 8002c68:	f7ff f982 	bl	8001f70 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68f9      	ldr	r1, [r7, #12]
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f92d 	bl	8002ed2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 8002c78:	68fb      	ldr	r3, [r7, #12]
	}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f941 	bl	8002f12 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE7destroyIS5_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002cbc:	68b8      	ldr	r0, [r7, #8]
 8002cbe:	f006 fc84 	bl	80095ca <_ZdlPv>
      }
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_ZNKSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>:
      _M_valptr() const
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3310      	adds	r3, #16
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 f927 	bl	8002f28 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc10token_typeEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff fdcb 	bl	800289e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 f917 	bl	8002f40 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE8allocateERS6_j>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8002d1c:	b5b0      	push	{r4, r5, r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	2014      	movs	r0, #20
 8002d2e:	f7fd fc06 	bl	800053e <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f7ff fdb3 	bl	800289e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8002d38:	4604      	mov	r4, r0
 8002d3a:	68b8      	ldr	r0, [r7, #8]
 8002d3c:	f7ff fdba 	bl	80028b4 <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 8002d40:	4605      	mov	r5, r0
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fe fd34 	bl	80017b0 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f000 f905 	bl	8002f5e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bdb0      	pop	{r4, r5, r7, pc}

08002d5c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>:
      _M_ptr() noexcept
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f90d 	bl	8002f84 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE7destroyISB_EEvPT_>:
	destroy(_Up* __p)
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8002d7e:	6838      	ldr	r0, [r7, #0]
 8002d80:	f7fd fc19 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE10deallocateEPSC_j>:
      deallocate(pointer __p, size_type)
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002d98:	68b8      	ldr	r0, [r7, #8]
 8002d9a:	f006 fc16 	bl	80095ca <_ZdlPv>
      }
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>:
      _M_valptr() const
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3310      	adds	r3, #16
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 f8f2 	bl	8002f9a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>
 8002db6:	4603      	mov	r3, r0
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>:
      _M_get_node()
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff fe05 	bl	80029ee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2101      	movs	r1, #1
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f8e2 	bl	8002fb2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE8allocateERSC_j>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4619      	mov	r1, r3
 8002e08:	202c      	movs	r0, #44	; 0x2c
 8002e0a:	f7fd fb98 	bl	800053e <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7ff fded 	bl	80029ee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8002e14:	4604      	mov	r4, r0
 8002e16:	68b8      	ldr	r0, [r7, #8]
 8002e18:	f7ff fdf4 	bl	8002a04 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 8002e1c:	4605      	mov	r5, r0
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fe febc 	bl	8001b9c <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8002e24:	4603      	mov	r3, r0
 8002e26:	461a      	mov	r2, r3
 8002e28:	4629      	mov	r1, r5
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f000 f8d0 	bl	8002fd0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>
	}
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bdb0      	pop	{r4, r5, r7, pc}

08002e38 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>:
      _M_ptr() noexcept
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f8d8 	bl	8002ff6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>
 8002e46:	4603      	mov	r3, r0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE7destroyIS5_EEvPT_>:
	destroy(_Up* __p)
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002e72:	68b8      	ldr	r0, [r7, #8]
 8002e74:	f006 fba9 	bl	80095ca <_ZdlPv>
      }
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <_ZNKSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>:
      _M_valptr() const
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3310      	adds	r3, #16
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f8be 	bl	800300c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>
 8002e90:	4603      	mov	r3, r0
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff fe45 	bl	8002b48 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f8ae 	bl	8003024 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE8allocateERS6_j>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8002ed2:	b5b0      	push	{r4, r5, r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	2014      	movs	r0, #20
 8002ee4:	f7fd fb2b 	bl	800053e <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f7ff fe2d 	bl	8002b48 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8002eee:	4604      	mov	r4, r0
 8002ef0:	68b8      	ldr	r0, [r7, #8]
 8002ef2:	f7ff fe34 	bl	8002b5e <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 8002ef6:	4605      	mov	r5, r0
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff f839 	bl	8001f70 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002efe:	4603      	mov	r3, r0
 8002f00:	461a      	mov	r2, r3
 8002f02:	4629      	mov	r1, r5
 8002f04:	4620      	mov	r0, r4
 8002f06:	f000 f89c 	bl	8003042 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bdb0      	pop	{r4, r5, r7, pc}

08002f12 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>:
      _M_addr() noexcept
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f899 	bl	8003068 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>
 8002f36:	4603      	mov	r3, r0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	6839      	ldr	r1, [r7, #0]
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f895 	bl	800307e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fe fc20 	bl	80017b0 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002f70:	4603      	mov	r3, r0
 8002f72:	461a      	mov	r2, r3
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f8a3 	bl	80030c2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>:
      _M_addr() noexcept
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f8a5 	bl	80030f2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	6839      	ldr	r1, [r7, #0]
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f8a1 	bl	8003108 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7fe fddd 	bl	8001b9c <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f8c2 	bl	8003172 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE9constructISB_JRKSB_EEEvPT_DpOT0_>
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>:
      _M_addr() noexcept
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f8c4 	bl	80031a2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>
 800301a:	4603      	mov	r3, r0
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800302e:	2200      	movs	r2, #0
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f8c0 	bl	80031b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv>
 8003038:	4603      	mov	r3, r0
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fe ff8e 	bl	8001f70 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f8ce 	bl	80031fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>:
      _M_addr() const noexcept
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800307e:	b580      	push	{r7, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f8d0 	bl	8003230 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4293      	cmp	r3, r2
 8003096:	bf8c      	ite	hi
 8003098:	2301      	movhi	r3, #1
 800309a:	2300      	movls	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80030a2:	f006 fb68 	bl	8009776 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f006 fa9b 	bl	80095ec <_Znwj>
 80030b6:	4603      	mov	r3, r0
 80030b8:	bf00      	nop
      }
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80030c2:	b590      	push	{r4, r7, lr}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fe fb6e 	bl	80017b0 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 80030d4:	4604      	mov	r4, r0
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	4619      	mov	r1, r3
 80030da:	2002      	movs	r0, #2
 80030dc:	f7fd fa2f 	bl	800053e <_ZnwjPv>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	4623      	mov	r3, r4
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	8013      	strh	r3, [r2, #0]
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd90      	pop	{r4, r7, pc}

080030f2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>:
      _M_addr() const noexcept
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f899 	bl	800324c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv>
 800311a:	4602      	mov	r2, r0
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4293      	cmp	r3, r2
 8003120:	bf8c      	ite	hi
 8003122:	2301      	movhi	r3, #1
 8003124:	2300      	movls	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800312c:	f006 fb23 	bl	8009776 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	222c      	movs	r2, #44	; 0x2c
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	4618      	mov	r0, r3
 800313a:	f006 fa57 	bl	80095ec <_Znwj>
 800313e:	4603      	mov	r3, r0
 8003140:	bf00      	nop
      }
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1ERKS8_>:
      constexpr pair(const pair&) = default;
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f006 fc79 	bl	8009a52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	7e1a      	ldrb	r2, [r3, #24]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	761a      	strb	r2, [r3, #24]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE9constructISB_JRKSB_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003172:	b590      	push	{r4, r7, lr}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fe fd0c 	bl	8001b9c <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8003184:	4604      	mov	r4, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	4619      	mov	r1, r3
 800318a:	201c      	movs	r0, #28
 800318c:	f7fd f9d7 	bl	800053e <_ZnwjPv>
 8003190:	4603      	mov	r3, r0
 8003192:	4621      	mov	r1, r4
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ffd8 	bl	800314a <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1ERKS8_>
 800319a:	bf00      	nop
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd90      	pop	{r4, r7, pc}

080031a2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>:
      _M_addr() const noexcept
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f84f 	bl	8003268 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv>
 80031ca:	4602      	mov	r2, r0
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4293      	cmp	r3, r2
 80031d0:	bf8c      	ite	hi
 80031d2:	2301      	movhi	r3, #1
 80031d4:	2300      	movls	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80031dc:	f006 facb 	bl	8009776 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f006 f9fe 	bl	80095ec <_Znwj>
 80031f0:	4603      	mov	r3, r0
 80031f2:	bf00      	nop
      }
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7fe feb1 	bl	8001f70 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 800320e:	4604      	mov	r4, r0
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4619      	mov	r1, r3
 8003214:	2003      	movs	r0, #3
 8003216:	f7fd f992 	bl	800053e <_ZnwjPv>
 800321a:	4603      	mov	r3, r0
 800321c:	4622      	mov	r2, r4
 800321e:	8811      	ldrh	r1, [r2, #0]
 8003220:	7892      	ldrb	r2, [r2, #2]
 8003222:	8019      	strh	r1, [r3, #0]
 8003224:	709a      	strb	r2, [r3, #2]
 8003226:	bf00      	nop
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	bd90      	pop	{r4, r7, pc}
	...

08003230 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv+0x18>)
      }
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	06666666 	.word	0x06666666

0800324c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv+0x18>)
      }
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	02e8ba2e 	.word	0x02e8ba2e

08003268 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv+0x18>)
      }
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	06666666 	.word	0x06666666

08003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd fd89 	bl	8000da6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>:
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd fccc 	bl	8000c46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>:
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd fc12 	bl	8000aec <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <_Z41__static_initialization_and_destruction_0ii>:
	if(p)
	{
		execute(p->finish);
	}
	Transmitter::report_error("aborted by user");
}
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b0e7      	sub	sp, #412	; 0x19c
 80032d8:	af02      	add	r7, sp, #8
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	6018      	str	r0, [r3, #0]
 80032de:	463b      	mov	r3, r7
 80032e0:	6019      	str	r1, [r3, #0]
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	f040 819d 	bne.w	8003626 <_Z41__static_initialization_and_destruction_0ii+0x352>
 80032ec:	463b      	mov	r3, r7
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032f4:	4293      	cmp	r3, r2
 80032f6:	f040 8196 	bne.w	8003626 <_Z41__static_initialization_and_destruction_0ii+0x352>
	{'^', TOKEN_POWER},
	{'%', TOKEN_MODULO},
	{'(', TOKEN_LEFT_BRACKET},
	{')', TOKEN_RIGHT_BRACKET},
	{'\0', TOKEN_END_OF_FILE},
};
 80032fa:	f107 0314 	add.w	r3, r7, #20
 80032fe:	4618      	mov	r0, r3
 8003300:	2322      	movs	r3, #34	; 0x22
 8003302:	461a      	mov	r2, r3
 8003304:	2100      	movs	r1, #0
 8003306:	f006 fc39 	bl	8009b7c <memset>
 800330a:	f107 0314 	add.w	r3, r7, #20
 800330e:	223a      	movs	r2, #58	; 0x3a
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	f107 0314 	add.w	r3, r7, #20
 8003316:	2201      	movs	r2, #1
 8003318:	705a      	strb	r2, [r3, #1]
 800331a:	f107 0314 	add.w	r3, r7, #20
 800331e:	220a      	movs	r2, #10
 8003320:	709a      	strb	r2, [r3, #2]
 8003322:	f107 0314 	add.w	r3, r7, #20
 8003326:	220a      	movs	r2, #10
 8003328:	70da      	strb	r2, [r3, #3]
 800332a:	f107 0314 	add.w	r3, r7, #20
 800332e:	222c      	movs	r2, #44	; 0x2c
 8003330:	711a      	strb	r2, [r3, #4]
 8003332:	f107 0314 	add.w	r3, r7, #20
 8003336:	220c      	movs	r2, #12
 8003338:	715a      	strb	r2, [r3, #5]
 800333a:	f107 0314 	add.w	r3, r7, #20
 800333e:	222e      	movs	r2, #46	; 0x2e
 8003340:	719a      	strb	r2, [r3, #6]
 8003342:	f107 0314 	add.w	r3, r7, #20
 8003346:	220b      	movs	r2, #11
 8003348:	71da      	strb	r2, [r3, #7]
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	225b      	movs	r2, #91	; 0x5b
 8003350:	721a      	strb	r2, [r3, #8]
 8003352:	f107 0314 	add.w	r3, r7, #20
 8003356:	220d      	movs	r2, #13
 8003358:	725a      	strb	r2, [r3, #9]
 800335a:	f107 0314 	add.w	r3, r7, #20
 800335e:	225d      	movs	r2, #93	; 0x5d
 8003360:	729a      	strb	r2, [r3, #10]
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	220e      	movs	r2, #14
 8003368:	72da      	strb	r2, [r3, #11]
 800336a:	f107 0314 	add.w	r3, r7, #20
 800336e:	227c      	movs	r2, #124	; 0x7c
 8003370:	731a      	strb	r2, [r3, #12]
 8003372:	f107 0314 	add.w	r3, r7, #20
 8003376:	2215      	movs	r2, #21
 8003378:	735a      	strb	r2, [r3, #13]
 800337a:	f107 0314 	add.w	r3, r7, #20
 800337e:	2226      	movs	r2, #38	; 0x26
 8003380:	739a      	strb	r2, [r3, #14]
 8003382:	f107 0314 	add.w	r3, r7, #20
 8003386:	2216      	movs	r2, #22
 8003388:	73da      	strb	r2, [r3, #15]
 800338a:	f107 0314 	add.w	r3, r7, #20
 800338e:	222b      	movs	r2, #43	; 0x2b
 8003390:	741a      	strb	r2, [r3, #16]
 8003392:	f107 0314 	add.w	r3, r7, #20
 8003396:	221f      	movs	r2, #31
 8003398:	745a      	strb	r2, [r3, #17]
 800339a:	f107 0314 	add.w	r3, r7, #20
 800339e:	222d      	movs	r2, #45	; 0x2d
 80033a0:	749a      	strb	r2, [r3, #18]
 80033a2:	f107 0314 	add.w	r3, r7, #20
 80033a6:	2220      	movs	r2, #32
 80033a8:	74da      	strb	r2, [r3, #19]
 80033aa:	f107 0314 	add.w	r3, r7, #20
 80033ae:	222a      	movs	r2, #42	; 0x2a
 80033b0:	751a      	strb	r2, [r3, #20]
 80033b2:	f107 0314 	add.w	r3, r7, #20
 80033b6:	2221      	movs	r2, #33	; 0x21
 80033b8:	755a      	strb	r2, [r3, #21]
 80033ba:	f107 0314 	add.w	r3, r7, #20
 80033be:	222f      	movs	r2, #47	; 0x2f
 80033c0:	759a      	strb	r2, [r3, #22]
 80033c2:	f107 0314 	add.w	r3, r7, #20
 80033c6:	2222      	movs	r2, #34	; 0x22
 80033c8:	75da      	strb	r2, [r3, #23]
 80033ca:	f107 0314 	add.w	r3, r7, #20
 80033ce:	225e      	movs	r2, #94	; 0x5e
 80033d0:	761a      	strb	r2, [r3, #24]
 80033d2:	f107 0314 	add.w	r3, r7, #20
 80033d6:	2223      	movs	r2, #35	; 0x23
 80033d8:	765a      	strb	r2, [r3, #25]
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	2225      	movs	r2, #37	; 0x25
 80033e0:	769a      	strb	r2, [r3, #26]
 80033e2:	f107 0314 	add.w	r3, r7, #20
 80033e6:	2224      	movs	r2, #36	; 0x24
 80033e8:	76da      	strb	r2, [r3, #27]
 80033ea:	f107 0314 	add.w	r3, r7, #20
 80033ee:	2228      	movs	r2, #40	; 0x28
 80033f0:	771a      	strb	r2, [r3, #28]
 80033f2:	f107 0314 	add.w	r3, r7, #20
 80033f6:	2226      	movs	r2, #38	; 0x26
 80033f8:	775a      	strb	r2, [r3, #29]
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	2229      	movs	r2, #41	; 0x29
 8003400:	779a      	strb	r2, [r3, #30]
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	2227      	movs	r2, #39	; 0x27
 8003408:	77da      	strb	r2, [r3, #31]
 800340a:	f107 0314 	add.w	r3, r7, #20
 800340e:	2225      	movs	r2, #37	; 0x25
 8003410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003414:	f107 030c 	add.w	r3, r7, #12
 8003418:	f107 0214 	add.w	r2, r7, #20
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f107 030c 	add.w	r3, r7, #12
 8003422:	2211      	movs	r2, #17
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd f9cc 	bl	80007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8003430:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003434:	f107 020c 	add.w	r2, r7, #12
 8003438:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	460b      	mov	r3, r1
 8003440:	ca06      	ldmia	r2, {r1, r2}
 8003442:	4885      	ldr	r0, [pc, #532]	; (8003658 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8003444:	f7fd f9d8 	bl	80007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8003448:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd f9c7 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>

static const std::map<std::string, token_type> token_strings
{
	{"true", TOKEN_TRUE},
 8003452:	2305      	movs	r3, #5
 8003454:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
	{"if", TOKEN_IF},
	{"elseif", TOKEN_ELSEIF},
	{"else", TOKEN_ELSE},
	{"while", TOKEN_WHILE},
	{"end", TOKEN_END},
};
 8003458:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 800345c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003460:	497e      	ldr	r1, [pc, #504]	; (800365c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd f8b4 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8003468:	2306      	movs	r3, #6
 800346a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 800346e:	f207 1263 	addw	r2, r7, #355	; 0x163
 8003472:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003476:	331c      	adds	r3, #28
 8003478:	4979      	ldr	r1, [pc, #484]	; (8003660 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd f8d0 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8003480:	2307      	movs	r3, #7
 8003482:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8003486:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800348a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800348e:	3338      	adds	r3, #56	; 0x38
 8003490:	4974      	ldr	r1, [pc, #464]	; (8003664 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd f8c4 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8003498:	2308      	movs	r3, #8
 800349a:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 800349e:	f207 1265 	addw	r2, r7, #357	; 0x165
 80034a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034a6:	3354      	adds	r3, #84	; 0x54
 80034a8:	496f      	ldr	r1, [pc, #444]	; (8003668 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd f890 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 80034b0:	2309      	movs	r3, #9
 80034b2:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 80034b6:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 80034ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034be:	3370      	adds	r3, #112	; 0x70
 80034c0:	496a      	ldr	r1, [pc, #424]	; (800366c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd f8d4 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 80034c8:	2310      	movs	r3, #16
 80034ca:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 80034ce:	f207 1267 	addw	r2, r7, #359	; 0x167
 80034d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034d6:	338c      	adds	r3, #140	; 0x8c
 80034d8:	4965      	ldr	r1, [pc, #404]	; (8003670 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd f8f0 	bl	80006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 80034e0:	2311      	movs	r3, #17
 80034e2:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 80034e6:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80034ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034ee:	33a8      	adds	r3, #168	; 0xa8
 80034f0:	4960      	ldr	r1, [pc, #384]	; (8003674 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd f8bc 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 80034f8:	2312      	movs	r3, #18
 80034fa:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 80034fe:	f207 1269 	addw	r2, r7, #361	; 0x169
 8003502:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003506:	33c4      	adds	r3, #196	; 0xc4
 8003508:	495b      	ldr	r1, [pc, #364]	; (8003678 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd f860 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8003510:	2313      	movs	r3, #19
 8003512:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8003516:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800351a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800351e:	33e0      	adds	r3, #224	; 0xe0
 8003520:	4956      	ldr	r1, [pc, #344]	; (800367c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd f87c 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8003528:	2314      	movs	r3, #20
 800352a:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 800352e:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8003532:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003536:	33fc      	adds	r3, #252	; 0xfc
 8003538:	4951      	ldr	r1, [pc, #324]	; (8003680 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd f8e8 	bl	8000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8003540:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003544:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800354e:	220a      	movs	r2, #10
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd f9db 	bl	8000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 800355c:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8003560:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003564:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	460b      	mov	r3, r1
 800356c:	ca06      	ldmia	r2, {r1, r2}
 800356e:	4845      	ldr	r0, [pc, #276]	; (8003684 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8003570:	f7fd f9e7 	bl	8000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8003574:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003578:	4618      	mov	r0, r3
 800357a:	f7fd f9d6 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800357e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8003582:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8003586:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800358a:	429c      	cmp	r4, r3
 800358c:	d004      	beq.n	8003598 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 800358e:	3c1c      	subs	r4, #28
 8003590:	4620      	mov	r0, r4
 8003592:	f7fd f810 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8003596:	e7f6      	b.n	8003586 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
{
	{'<', {TOKEN_SMALLER_THAN, TOKEN_SMALLER_OR_EQUAL}},
	{'>', {TOKEN_GREATER_THAN, TOKEN_GREATER_OR_EQUAL}},
	{'=', {TOKEN_ASSIGN, TOKEN_EQUALS}},
	{'!', {TOKEN_EXCLAMATION, TOKEN_NOT_EQUAL}},
};
 8003598:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	233c      	movs	r3, #60	; 0x3c
 80035a6:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80035aa:	231b      	movs	r3, #27
 80035ac:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80035b0:	231c      	movs	r3, #28
 80035b2:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80035b6:	233e      	movs	r3, #62	; 0x3e
 80035b8:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80035bc:	2319      	movs	r3, #25
 80035be:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 80035c2:	231a      	movs	r3, #26
 80035c4:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 80035c8:	233d      	movs	r3, #61	; 0x3d
 80035ca:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 80035ce:	2318      	movs	r3, #24
 80035d0:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 80035d4:	231d      	movs	r3, #29
 80035d6:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80035da:	2321      	movs	r3, #33	; 0x21
 80035dc:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80035e0:	2317      	movs	r3, #23
 80035e2:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80035e6:	231e      	movs	r3, #30
 80035e8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80035ec:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80035f0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80035f4:	2304      	movs	r3, #4
 80035f6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80035fa:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fd f9cf 	bl	80009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8003604:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003608:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8003614:	ca06      	ldmia	r2, {r1, r2}
 8003616:	481c      	ldr	r0, [pc, #112]	; (8003688 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8003618:	f7fd f9db 	bl	80009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800361c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8003620:	4618      	mov	r0, r3
 8003622:	f7fd f9ca 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10e      	bne.n	800364c <_Z41__static_initialization_and_destruction_0ii+0x378>
 800362e:	463b      	mov	r3, r7
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003636:	4293      	cmp	r3, r2
 8003638:	d108      	bne.n	800364c <_Z41__static_initialization_and_destruction_0ii+0x378>
 800363a:	4813      	ldr	r0, [pc, #76]	; (8003688 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800363c:	f7ff fe22 	bl	8003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8003640:	4810      	ldr	r0, [pc, #64]	; (8003684 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8003642:	f7ff fe2c 	bl	800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8003646:	4804      	ldr	r0, [pc, #16]	; (8003658 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8003648:	f7ff fe36 	bl	80032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 800364c:	bf00      	nop
 800364e:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8003652:	46bd      	mov	sp, r7
 8003654:	bd90      	pop	{r4, r7, pc}
 8003656:	bf00      	nop
 8003658:	20000090 	.word	0x20000090
 800365c:	08009ef0 	.word	0x08009ef0
 8003660:	08009ef8 	.word	0x08009ef8
 8003664:	08009f00 	.word	0x08009f00
 8003668:	08009f08 	.word	0x08009f08
 800366c:	08009f10 	.word	0x08009f10
 8003670:	08009f18 	.word	0x08009f18
 8003674:	08009f1c 	.word	0x08009f1c
 8003678:	08009f24 	.word	0x08009f24
 800367c:	08009f2c 	.word	0x08009f2c
 8003680:	08009f34 	.word	0x08009f34
 8003684:	200000a8 	.word	0x200000a8
 8003688:	200000c0 	.word	0x200000c0

0800368c <_GLOBAL__sub_I__ZN8ExecutorC2Ev>:
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
 8003690:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003694:	2001      	movs	r0, #1
 8003696:	f7ff fe1d 	bl	80032d4 <_Z41__static_initialization_and_destruction_0ii>
 800369a:	bd80      	pop	{r7, pc}

0800369c <_GLOBAL__sub_D__ZN8ExecutorC2Ev>:
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
 80036a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036a4:	2000      	movs	r0, #0
 80036a6:	f7ff fe15 	bl	80032d4 <_Z41__static_initialization_and_destruction_0ii>
 80036aa:	bd80      	pop	{r7, pc}

080036ac <_Z41__static_initialization_and_destruction_0ii>:
{
	for(And_expression* exp : and_exps)
	{
		delete exp;
	}
}
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b0e7      	sub	sp, #412	; 0x19c
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	1d3b      	adds	r3, r7, #4
 80036b4:	6018      	str	r0, [r3, #0]
 80036b6:	463b      	mov	r3, r7
 80036b8:	6019      	str	r1, [r3, #0]
 80036ba:	1d3b      	adds	r3, r7, #4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	f040 819d 	bne.w	80039fe <_Z41__static_initialization_and_destruction_0ii+0x352>
 80036c4:	463b      	mov	r3, r7
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036cc:	4293      	cmp	r3, r2
 80036ce:	f040 8196 	bne.w	80039fe <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 80036d2:	f107 0314 	add.w	r3, r7, #20
 80036d6:	4618      	mov	r0, r3
 80036d8:	2322      	movs	r3, #34	; 0x22
 80036da:	461a      	mov	r2, r3
 80036dc:	2100      	movs	r1, #0
 80036de:	f006 fa4d 	bl	8009b7c <memset>
 80036e2:	f107 0314 	add.w	r3, r7, #20
 80036e6:	223a      	movs	r2, #58	; 0x3a
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	f107 0314 	add.w	r3, r7, #20
 80036ee:	2201      	movs	r2, #1
 80036f0:	705a      	strb	r2, [r3, #1]
 80036f2:	f107 0314 	add.w	r3, r7, #20
 80036f6:	220a      	movs	r2, #10
 80036f8:	709a      	strb	r2, [r3, #2]
 80036fa:	f107 0314 	add.w	r3, r7, #20
 80036fe:	220a      	movs	r2, #10
 8003700:	70da      	strb	r2, [r3, #3]
 8003702:	f107 0314 	add.w	r3, r7, #20
 8003706:	222c      	movs	r2, #44	; 0x2c
 8003708:	711a      	strb	r2, [r3, #4]
 800370a:	f107 0314 	add.w	r3, r7, #20
 800370e:	220c      	movs	r2, #12
 8003710:	715a      	strb	r2, [r3, #5]
 8003712:	f107 0314 	add.w	r3, r7, #20
 8003716:	222e      	movs	r2, #46	; 0x2e
 8003718:	719a      	strb	r2, [r3, #6]
 800371a:	f107 0314 	add.w	r3, r7, #20
 800371e:	220b      	movs	r2, #11
 8003720:	71da      	strb	r2, [r3, #7]
 8003722:	f107 0314 	add.w	r3, r7, #20
 8003726:	225b      	movs	r2, #91	; 0x5b
 8003728:	721a      	strb	r2, [r3, #8]
 800372a:	f107 0314 	add.w	r3, r7, #20
 800372e:	220d      	movs	r2, #13
 8003730:	725a      	strb	r2, [r3, #9]
 8003732:	f107 0314 	add.w	r3, r7, #20
 8003736:	225d      	movs	r2, #93	; 0x5d
 8003738:	729a      	strb	r2, [r3, #10]
 800373a:	f107 0314 	add.w	r3, r7, #20
 800373e:	220e      	movs	r2, #14
 8003740:	72da      	strb	r2, [r3, #11]
 8003742:	f107 0314 	add.w	r3, r7, #20
 8003746:	227c      	movs	r2, #124	; 0x7c
 8003748:	731a      	strb	r2, [r3, #12]
 800374a:	f107 0314 	add.w	r3, r7, #20
 800374e:	2215      	movs	r2, #21
 8003750:	735a      	strb	r2, [r3, #13]
 8003752:	f107 0314 	add.w	r3, r7, #20
 8003756:	2226      	movs	r2, #38	; 0x26
 8003758:	739a      	strb	r2, [r3, #14]
 800375a:	f107 0314 	add.w	r3, r7, #20
 800375e:	2216      	movs	r2, #22
 8003760:	73da      	strb	r2, [r3, #15]
 8003762:	f107 0314 	add.w	r3, r7, #20
 8003766:	222b      	movs	r2, #43	; 0x2b
 8003768:	741a      	strb	r2, [r3, #16]
 800376a:	f107 0314 	add.w	r3, r7, #20
 800376e:	221f      	movs	r2, #31
 8003770:	745a      	strb	r2, [r3, #17]
 8003772:	f107 0314 	add.w	r3, r7, #20
 8003776:	222d      	movs	r2, #45	; 0x2d
 8003778:	749a      	strb	r2, [r3, #18]
 800377a:	f107 0314 	add.w	r3, r7, #20
 800377e:	2220      	movs	r2, #32
 8003780:	74da      	strb	r2, [r3, #19]
 8003782:	f107 0314 	add.w	r3, r7, #20
 8003786:	222a      	movs	r2, #42	; 0x2a
 8003788:	751a      	strb	r2, [r3, #20]
 800378a:	f107 0314 	add.w	r3, r7, #20
 800378e:	2221      	movs	r2, #33	; 0x21
 8003790:	755a      	strb	r2, [r3, #21]
 8003792:	f107 0314 	add.w	r3, r7, #20
 8003796:	222f      	movs	r2, #47	; 0x2f
 8003798:	759a      	strb	r2, [r3, #22]
 800379a:	f107 0314 	add.w	r3, r7, #20
 800379e:	2222      	movs	r2, #34	; 0x22
 80037a0:	75da      	strb	r2, [r3, #23]
 80037a2:	f107 0314 	add.w	r3, r7, #20
 80037a6:	225e      	movs	r2, #94	; 0x5e
 80037a8:	761a      	strb	r2, [r3, #24]
 80037aa:	f107 0314 	add.w	r3, r7, #20
 80037ae:	2223      	movs	r2, #35	; 0x23
 80037b0:	765a      	strb	r2, [r3, #25]
 80037b2:	f107 0314 	add.w	r3, r7, #20
 80037b6:	2225      	movs	r2, #37	; 0x25
 80037b8:	769a      	strb	r2, [r3, #26]
 80037ba:	f107 0314 	add.w	r3, r7, #20
 80037be:	2224      	movs	r2, #36	; 0x24
 80037c0:	76da      	strb	r2, [r3, #27]
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	2228      	movs	r2, #40	; 0x28
 80037c8:	771a      	strb	r2, [r3, #28]
 80037ca:	f107 0314 	add.w	r3, r7, #20
 80037ce:	2226      	movs	r2, #38	; 0x26
 80037d0:	775a      	strb	r2, [r3, #29]
 80037d2:	f107 0314 	add.w	r3, r7, #20
 80037d6:	2229      	movs	r2, #41	; 0x29
 80037d8:	779a      	strb	r2, [r3, #30]
 80037da:	f107 0314 	add.w	r3, r7, #20
 80037de:	2227      	movs	r2, #39	; 0x27
 80037e0:	77da      	strb	r2, [r3, #31]
 80037e2:	f107 0314 	add.w	r3, r7, #20
 80037e6:	2225      	movs	r2, #37	; 0x25
 80037e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	f107 0214 	add.w	r2, r7, #20
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	f107 030c 	add.w	r3, r7, #12
 80037fa:	2211      	movs	r2, #17
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc ffe0 	bl	80007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8003808:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800380c:	f107 020c 	add.w	r2, r7, #12
 8003810:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	460b      	mov	r3, r1
 8003818:	ca06      	ldmia	r2, {r1, r2}
 800381a:	4885      	ldr	r0, [pc, #532]	; (8003a30 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800381c:	f7fc ffec 	bl	80007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8003820:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003824:	4618      	mov	r0, r3
 8003826:	f7fc ffdb 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 800382a:	2305      	movs	r3, #5
 800382c:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8003830:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8003834:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003838:	497e      	ldr	r1, [pc, #504]	; (8003a34 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800383a:	4618      	mov	r0, r3
 800383c:	f7fc fec8 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8003840:	2306      	movs	r3, #6
 8003842:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8003846:	f207 1263 	addw	r2, r7, #355	; 0x163
 800384a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800384e:	331c      	adds	r3, #28
 8003850:	4979      	ldr	r1, [pc, #484]	; (8003a38 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8003852:	4618      	mov	r0, r3
 8003854:	f7fc fee4 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8003858:	2307      	movs	r3, #7
 800385a:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 800385e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8003862:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003866:	3338      	adds	r3, #56	; 0x38
 8003868:	4974      	ldr	r1, [pc, #464]	; (8003a3c <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800386a:	4618      	mov	r0, r3
 800386c:	f7fc fed8 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8003870:	2308      	movs	r3, #8
 8003872:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8003876:	f207 1265 	addw	r2, r7, #357	; 0x165
 800387a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800387e:	3354      	adds	r3, #84	; 0x54
 8003880:	496f      	ldr	r1, [pc, #444]	; (8003a40 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8003882:	4618      	mov	r0, r3
 8003884:	f7fc fea4 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8003888:	2309      	movs	r3, #9
 800388a:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800388e:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8003892:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003896:	3370      	adds	r3, #112	; 0x70
 8003898:	496a      	ldr	r1, [pc, #424]	; (8003a44 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800389a:	4618      	mov	r0, r3
 800389c:	f7fc fee8 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 80038a0:	2310      	movs	r3, #16
 80038a2:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 80038a6:	f207 1267 	addw	r2, r7, #359	; 0x167
 80038aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038ae:	338c      	adds	r3, #140	; 0x8c
 80038b0:	4965      	ldr	r1, [pc, #404]	; (8003a48 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fc ff04 	bl	80006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 80038b8:	2311      	movs	r3, #17
 80038ba:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 80038be:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80038c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038c6:	33a8      	adds	r3, #168	; 0xa8
 80038c8:	4960      	ldr	r1, [pc, #384]	; (8003a4c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fc fed0 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 80038d0:	2312      	movs	r3, #18
 80038d2:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 80038d6:	f207 1269 	addw	r2, r7, #361	; 0x169
 80038da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038de:	33c4      	adds	r3, #196	; 0xc4
 80038e0:	495b      	ldr	r1, [pc, #364]	; (8003a50 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fc fe74 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 80038e8:	2313      	movs	r3, #19
 80038ea:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 80038ee:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 80038f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038f6:	33e0      	adds	r3, #224	; 0xe0
 80038f8:	4956      	ldr	r1, [pc, #344]	; (8003a54 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fc fe90 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8003900:	2314      	movs	r3, #20
 8003902:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8003906:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800390a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800390e:	33fc      	adds	r3, #252	; 0xfc
 8003910:	4951      	ldr	r1, [pc, #324]	; (8003a58 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8003912:	4618      	mov	r0, r3
 8003914:	f7fc fefc 	bl	8000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8003918:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800391c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003926:	220a      	movs	r2, #10
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc ffef 	bl	8000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8003934:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8003938:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800393c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	460b      	mov	r3, r1
 8003944:	ca06      	ldmia	r2, {r1, r2}
 8003946:	4845      	ldr	r0, [pc, #276]	; (8003a5c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8003948:	f7fc fffb 	bl	8000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 800394c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003950:	4618      	mov	r0, r3
 8003952:	f7fc ffea 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8003956:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800395a:	f504 748c 	add.w	r4, r4, #280	; 0x118
 800395e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003962:	429c      	cmp	r4, r3
 8003964:	d004      	beq.n	8003970 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8003966:	3c1c      	subs	r4, #28
 8003968:	4620      	mov	r0, r4
 800396a:	f7fc fe24 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 800396e:	e7f6      	b.n	800395e <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8003970:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	233c      	movs	r3, #60	; 0x3c
 800397e:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8003982:	231b      	movs	r3, #27
 8003984:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8003988:	231c      	movs	r3, #28
 800398a:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800398e:	233e      	movs	r3, #62	; 0x3e
 8003990:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8003994:	2319      	movs	r3, #25
 8003996:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800399a:	231a      	movs	r3, #26
 800399c:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 80039a0:	233d      	movs	r3, #61	; 0x3d
 80039a2:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 80039a6:	2318      	movs	r3, #24
 80039a8:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 80039ac:	231d      	movs	r3, #29
 80039ae:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80039b2:	2321      	movs	r3, #33	; 0x21
 80039b4:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80039b8:	2317      	movs	r3, #23
 80039ba:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80039be:	231e      	movs	r3, #30
 80039c0:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80039c4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80039c8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80039cc:	2304      	movs	r3, #4
 80039ce:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80039d2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fc ffe3 	bl	80009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 80039dc:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80039e0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	4613      	mov	r3, r2
 80039e8:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 80039ec:	ca06      	ldmia	r2, {r1, r2}
 80039ee:	481c      	ldr	r0, [pc, #112]	; (8003a60 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80039f0:	f7fc ffef 	bl	80009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80039f4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fc ffde 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 80039fe:	1d3b      	adds	r3, r7, #4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10e      	bne.n	8003a24 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8003a06:	463b      	mov	r3, r7
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d108      	bne.n	8003a24 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8003a12:	4813      	ldr	r0, [pc, #76]	; (8003a60 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8003a14:	f7ff fc36 	bl	8003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8003a18:	4810      	ldr	r0, [pc, #64]	; (8003a5c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8003a1a:	f7ff fc40 	bl	800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8003a1e:	4804      	ldr	r0, [pc, #16]	; (8003a30 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8003a20:	f7ff fc4a 	bl	80032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8003a24:	bf00      	nop
 8003a26:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd90      	pop	{r4, r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200000d8 	.word	0x200000d8
 8003a34:	08009f78 	.word	0x08009f78
 8003a38:	08009f80 	.word	0x08009f80
 8003a3c:	08009f88 	.word	0x08009f88
 8003a40:	08009f90 	.word	0x08009f90
 8003a44:	08009f98 	.word	0x08009f98
 8003a48:	08009fa0 	.word	0x08009fa0
 8003a4c:	08009fa4 	.word	0x08009fa4
 8003a50:	08009fac 	.word	0x08009fac
 8003a54:	08009fb4 	.word	0x08009fb4
 8003a58:	08009fbc 	.word	0x08009fbc
 8003a5c:	200000f0 	.word	0x200000f0
 8003a60:	20000108 	.word	0x20000108

08003a64 <_GLOBAL__sub_I__ZN17Primal_expressionD2Ev>:
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f7ff fe1d 	bl	80036ac <_Z41__static_initialization_and_destruction_0ii>
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <_GLOBAL__sub_D__ZN17Primal_expressionD2Ev>:
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	f7ff fe15 	bl	80036ac <_Z41__static_initialization_and_destruction_0ii>
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return s[evaluate(var->index)];
	}

	return s;
}
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b0e7      	sub	sp, #412	; 0x19c
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	6018      	str	r0, [r3, #0]
 8003a8e:	463b      	mov	r3, r7
 8003a90:	6019      	str	r1, [r3, #0]
 8003a92:	1d3b      	adds	r3, r7, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	f040 819d 	bne.w	8003dd6 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8003a9c:	463b      	mov	r3, r7
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	f040 8196 	bne.w	8003dd6 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8003aaa:	f107 0314 	add.w	r3, r7, #20
 8003aae:	4618      	mov	r0, r3
 8003ab0:	2322      	movs	r3, #34	; 0x22
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f006 f861 	bl	8009b7c <memset>
 8003aba:	f107 0314 	add.w	r3, r7, #20
 8003abe:	223a      	movs	r2, #58	; 0x3a
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	f107 0314 	add.w	r3, r7, #20
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	705a      	strb	r2, [r3, #1]
 8003aca:	f107 0314 	add.w	r3, r7, #20
 8003ace:	220a      	movs	r2, #10
 8003ad0:	709a      	strb	r2, [r3, #2]
 8003ad2:	f107 0314 	add.w	r3, r7, #20
 8003ad6:	220a      	movs	r2, #10
 8003ad8:	70da      	strb	r2, [r3, #3]
 8003ada:	f107 0314 	add.w	r3, r7, #20
 8003ade:	222c      	movs	r2, #44	; 0x2c
 8003ae0:	711a      	strb	r2, [r3, #4]
 8003ae2:	f107 0314 	add.w	r3, r7, #20
 8003ae6:	220c      	movs	r2, #12
 8003ae8:	715a      	strb	r2, [r3, #5]
 8003aea:	f107 0314 	add.w	r3, r7, #20
 8003aee:	222e      	movs	r2, #46	; 0x2e
 8003af0:	719a      	strb	r2, [r3, #6]
 8003af2:	f107 0314 	add.w	r3, r7, #20
 8003af6:	220b      	movs	r2, #11
 8003af8:	71da      	strb	r2, [r3, #7]
 8003afa:	f107 0314 	add.w	r3, r7, #20
 8003afe:	225b      	movs	r2, #91	; 0x5b
 8003b00:	721a      	strb	r2, [r3, #8]
 8003b02:	f107 0314 	add.w	r3, r7, #20
 8003b06:	220d      	movs	r2, #13
 8003b08:	725a      	strb	r2, [r3, #9]
 8003b0a:	f107 0314 	add.w	r3, r7, #20
 8003b0e:	225d      	movs	r2, #93	; 0x5d
 8003b10:	729a      	strb	r2, [r3, #10]
 8003b12:	f107 0314 	add.w	r3, r7, #20
 8003b16:	220e      	movs	r2, #14
 8003b18:	72da      	strb	r2, [r3, #11]
 8003b1a:	f107 0314 	add.w	r3, r7, #20
 8003b1e:	227c      	movs	r2, #124	; 0x7c
 8003b20:	731a      	strb	r2, [r3, #12]
 8003b22:	f107 0314 	add.w	r3, r7, #20
 8003b26:	2215      	movs	r2, #21
 8003b28:	735a      	strb	r2, [r3, #13]
 8003b2a:	f107 0314 	add.w	r3, r7, #20
 8003b2e:	2226      	movs	r2, #38	; 0x26
 8003b30:	739a      	strb	r2, [r3, #14]
 8003b32:	f107 0314 	add.w	r3, r7, #20
 8003b36:	2216      	movs	r2, #22
 8003b38:	73da      	strb	r2, [r3, #15]
 8003b3a:	f107 0314 	add.w	r3, r7, #20
 8003b3e:	222b      	movs	r2, #43	; 0x2b
 8003b40:	741a      	strb	r2, [r3, #16]
 8003b42:	f107 0314 	add.w	r3, r7, #20
 8003b46:	221f      	movs	r2, #31
 8003b48:	745a      	strb	r2, [r3, #17]
 8003b4a:	f107 0314 	add.w	r3, r7, #20
 8003b4e:	222d      	movs	r2, #45	; 0x2d
 8003b50:	749a      	strb	r2, [r3, #18]
 8003b52:	f107 0314 	add.w	r3, r7, #20
 8003b56:	2220      	movs	r2, #32
 8003b58:	74da      	strb	r2, [r3, #19]
 8003b5a:	f107 0314 	add.w	r3, r7, #20
 8003b5e:	222a      	movs	r2, #42	; 0x2a
 8003b60:	751a      	strb	r2, [r3, #20]
 8003b62:	f107 0314 	add.w	r3, r7, #20
 8003b66:	2221      	movs	r2, #33	; 0x21
 8003b68:	755a      	strb	r2, [r3, #21]
 8003b6a:	f107 0314 	add.w	r3, r7, #20
 8003b6e:	222f      	movs	r2, #47	; 0x2f
 8003b70:	759a      	strb	r2, [r3, #22]
 8003b72:	f107 0314 	add.w	r3, r7, #20
 8003b76:	2222      	movs	r2, #34	; 0x22
 8003b78:	75da      	strb	r2, [r3, #23]
 8003b7a:	f107 0314 	add.w	r3, r7, #20
 8003b7e:	225e      	movs	r2, #94	; 0x5e
 8003b80:	761a      	strb	r2, [r3, #24]
 8003b82:	f107 0314 	add.w	r3, r7, #20
 8003b86:	2223      	movs	r2, #35	; 0x23
 8003b88:	765a      	strb	r2, [r3, #25]
 8003b8a:	f107 0314 	add.w	r3, r7, #20
 8003b8e:	2225      	movs	r2, #37	; 0x25
 8003b90:	769a      	strb	r2, [r3, #26]
 8003b92:	f107 0314 	add.w	r3, r7, #20
 8003b96:	2224      	movs	r2, #36	; 0x24
 8003b98:	76da      	strb	r2, [r3, #27]
 8003b9a:	f107 0314 	add.w	r3, r7, #20
 8003b9e:	2228      	movs	r2, #40	; 0x28
 8003ba0:	771a      	strb	r2, [r3, #28]
 8003ba2:	f107 0314 	add.w	r3, r7, #20
 8003ba6:	2226      	movs	r2, #38	; 0x26
 8003ba8:	775a      	strb	r2, [r3, #29]
 8003baa:	f107 0314 	add.w	r3, r7, #20
 8003bae:	2229      	movs	r2, #41	; 0x29
 8003bb0:	779a      	strb	r2, [r3, #30]
 8003bb2:	f107 0314 	add.w	r3, r7, #20
 8003bb6:	2227      	movs	r2, #39	; 0x27
 8003bb8:	77da      	strb	r2, [r3, #31]
 8003bba:	f107 0314 	add.w	r3, r7, #20
 8003bbe:	2225      	movs	r2, #37	; 0x25
 8003bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003bc4:	f107 030c 	add.w	r3, r7, #12
 8003bc8:	f107 0214 	add.w	r2, r7, #20
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	f107 030c 	add.w	r3, r7, #12
 8003bd2:	2211      	movs	r2, #17
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fc fdf4 	bl	80007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8003be0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003be4:	f107 020c 	add.w	r2, r7, #12
 8003be8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	ca06      	ldmia	r2, {r1, r2}
 8003bf2:	4885      	ldr	r0, [pc, #532]	; (8003e08 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8003bf4:	f7fc fe00 	bl	80007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8003bf8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fc fdef 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8003c02:	2305      	movs	r3, #5
 8003c04:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8003c08:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8003c0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c10:	497e      	ldr	r1, [pc, #504]	; (8003e0c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fc fcdc 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8003c18:	2306      	movs	r3, #6
 8003c1a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8003c1e:	f207 1263 	addw	r2, r7, #355	; 0x163
 8003c22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c26:	331c      	adds	r3, #28
 8003c28:	4979      	ldr	r1, [pc, #484]	; (8003e10 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fc fcf8 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8003c30:	2307      	movs	r3, #7
 8003c32:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8003c36:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8003c3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c3e:	3338      	adds	r3, #56	; 0x38
 8003c40:	4974      	ldr	r1, [pc, #464]	; (8003e14 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fc fcec 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8003c48:	2308      	movs	r3, #8
 8003c4a:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8003c4e:	f207 1265 	addw	r2, r7, #357	; 0x165
 8003c52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c56:	3354      	adds	r3, #84	; 0x54
 8003c58:	496f      	ldr	r1, [pc, #444]	; (8003e18 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fc fcb8 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8003c60:	2309      	movs	r3, #9
 8003c62:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8003c66:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8003c6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c6e:	3370      	adds	r3, #112	; 0x70
 8003c70:	496a      	ldr	r1, [pc, #424]	; (8003e1c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc fcfc 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8003c78:	2310      	movs	r3, #16
 8003c7a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8003c7e:	f207 1267 	addw	r2, r7, #359	; 0x167
 8003c82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c86:	338c      	adds	r3, #140	; 0x8c
 8003c88:	4965      	ldr	r1, [pc, #404]	; (8003e20 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fc fd18 	bl	80006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8003c90:	2311      	movs	r3, #17
 8003c92:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8003c96:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8003c9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c9e:	33a8      	adds	r3, #168	; 0xa8
 8003ca0:	4960      	ldr	r1, [pc, #384]	; (8003e24 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fc fce4 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8003ca8:	2312      	movs	r3, #18
 8003caa:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8003cae:	f207 1269 	addw	r2, r7, #361	; 0x169
 8003cb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cb6:	33c4      	adds	r3, #196	; 0xc4
 8003cb8:	495b      	ldr	r1, [pc, #364]	; (8003e28 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fc fc88 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8003cc0:	2313      	movs	r3, #19
 8003cc2:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8003cc6:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8003cca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cce:	33e0      	adds	r3, #224	; 0xe0
 8003cd0:	4956      	ldr	r1, [pc, #344]	; (8003e2c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fc fca4 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8003cd8:	2314      	movs	r3, #20
 8003cda:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8003cde:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8003ce2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ce6:	33fc      	adds	r3, #252	; 0xfc
 8003ce8:	4951      	ldr	r1, [pc, #324]	; (8003e30 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fd10 	bl	8000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8003cf0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cf4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cfe:	220a      	movs	r2, #10
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fc fe03 	bl	8000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8003d0c:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8003d10:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003d14:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	ca06      	ldmia	r2, {r1, r2}
 8003d1e:	4845      	ldr	r0, [pc, #276]	; (8003e34 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8003d20:	f7fc fe0f 	bl	8000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8003d24:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fc fdfe 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8003d2e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8003d32:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8003d36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d3a:	429c      	cmp	r4, r3
 8003d3c:	d004      	beq.n	8003d48 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8003d3e:	3c1c      	subs	r4, #28
 8003d40:	4620      	mov	r0, r4
 8003d42:	f7fc fc38 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8003d46:	e7f6      	b.n	8003d36 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8003d48:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	233c      	movs	r3, #60	; 0x3c
 8003d56:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8003d5a:	231b      	movs	r3, #27
 8003d5c:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8003d60:	231c      	movs	r3, #28
 8003d62:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8003d66:	233e      	movs	r3, #62	; 0x3e
 8003d68:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8003d6c:	2319      	movs	r3, #25
 8003d6e:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8003d72:	231a      	movs	r3, #26
 8003d74:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8003d78:	233d      	movs	r3, #61	; 0x3d
 8003d7a:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8003d7e:	2318      	movs	r3, #24
 8003d80:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8003d84:	231d      	movs	r3, #29
 8003d86:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8003d8a:	2321      	movs	r3, #33	; 0x21
 8003d8c:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8003d90:	2317      	movs	r3, #23
 8003d92:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8003d96:	231e      	movs	r3, #30
 8003d98:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8003d9c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8003da0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003da4:	2304      	movs	r3, #4
 8003da6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8003daa:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fc fdf7 	bl	80009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8003db4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003db8:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8003dc4:	ca06      	ldmia	r2, {r1, r2}
 8003dc6:	481c      	ldr	r0, [pc, #112]	; (8003e38 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8003dc8:	f7fc fe03 	bl	80009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8003dcc:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fc fdf2 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10e      	bne.n	8003dfc <_Z41__static_initialization_and_destruction_0ii+0x378>
 8003dde:	463b      	mov	r3, r7
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d108      	bne.n	8003dfc <_Z41__static_initialization_and_destruction_0ii+0x378>
 8003dea:	4813      	ldr	r0, [pc, #76]	; (8003e38 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8003dec:	f7ff fa4a 	bl	8003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8003df0:	4810      	ldr	r0, [pc, #64]	; (8003e34 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8003df2:	f7ff fa54 	bl	800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8003df6:	4804      	ldr	r0, [pc, #16]	; (8003e08 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8003df8:	f7ff fa5e 	bl	80032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8003dfc:	bf00      	nop
 8003dfe:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd90      	pop	{r4, r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000120 	.word	0x20000120
 8003e0c:	0800a028 	.word	0x0800a028
 8003e10:	0800a030 	.word	0x0800a030
 8003e14:	0800a038 	.word	0x0800a038
 8003e18:	0800a040 	.word	0x0800a040
 8003e1c:	0800a048 	.word	0x0800a048
 8003e20:	0800a050 	.word	0x0800a050
 8003e24:	0800a054 	.word	0x0800a054
 8003e28:	0800a05c 	.word	0x0800a05c
 8003e2c:	0800a064 	.word	0x0800a064
 8003e30:	0800a06c 	.word	0x0800a06c
 8003e34:	20000138 	.word	0x20000138
 8003e38:	20000150 	.word	0x20000150

08003e3c <_GLOBAL__sub_I__ZN21Expression_calculatorC2Ev>:
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e44:	2001      	movs	r0, #1
 8003e46:	f7ff fe1d 	bl	8003a84 <_Z41__static_initialization_and_destruction_0ii>
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <_GLOBAL__sub_D__ZN21Expression_calculatorC2Ev>:
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e54:	2000      	movs	r0, #0
 8003e56:	f7ff fe15 	bl	8003a84 <_Z41__static_initialization_and_destruction_0ii>
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <_Z41__static_initialization_and_destruction_0ii>:
	else
	{
		Transmitter::report_error(std::string("function " + fcall->id + " not found"));
		return {};
	}
}
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b0e7      	sub	sp, #412	; 0x19c
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	1d3b      	adds	r3, r7, #4
 8003e64:	6018      	str	r0, [r3, #0]
 8003e66:	463b      	mov	r3, r7
 8003e68:	6019      	str	r1, [r3, #0]
 8003e6a:	1d3b      	adds	r3, r7, #4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	f040 819d 	bne.w	80041ae <_Z41__static_initialization_and_destruction_0ii+0x352>
 8003e74:	463b      	mov	r3, r7
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	f040 8196 	bne.w	80041ae <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8003e82:	f107 0314 	add.w	r3, r7, #20
 8003e86:	4618      	mov	r0, r3
 8003e88:	2322      	movs	r3, #34	; 0x22
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	f005 fe75 	bl	8009b7c <memset>
 8003e92:	f107 0314 	add.w	r3, r7, #20
 8003e96:	223a      	movs	r2, #58	; 0x3a
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	f107 0314 	add.w	r3, r7, #20
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	705a      	strb	r2, [r3, #1]
 8003ea2:	f107 0314 	add.w	r3, r7, #20
 8003ea6:	220a      	movs	r2, #10
 8003ea8:	709a      	strb	r2, [r3, #2]
 8003eaa:	f107 0314 	add.w	r3, r7, #20
 8003eae:	220a      	movs	r2, #10
 8003eb0:	70da      	strb	r2, [r3, #3]
 8003eb2:	f107 0314 	add.w	r3, r7, #20
 8003eb6:	222c      	movs	r2, #44	; 0x2c
 8003eb8:	711a      	strb	r2, [r3, #4]
 8003eba:	f107 0314 	add.w	r3, r7, #20
 8003ebe:	220c      	movs	r2, #12
 8003ec0:	715a      	strb	r2, [r3, #5]
 8003ec2:	f107 0314 	add.w	r3, r7, #20
 8003ec6:	222e      	movs	r2, #46	; 0x2e
 8003ec8:	719a      	strb	r2, [r3, #6]
 8003eca:	f107 0314 	add.w	r3, r7, #20
 8003ece:	220b      	movs	r2, #11
 8003ed0:	71da      	strb	r2, [r3, #7]
 8003ed2:	f107 0314 	add.w	r3, r7, #20
 8003ed6:	225b      	movs	r2, #91	; 0x5b
 8003ed8:	721a      	strb	r2, [r3, #8]
 8003eda:	f107 0314 	add.w	r3, r7, #20
 8003ede:	220d      	movs	r2, #13
 8003ee0:	725a      	strb	r2, [r3, #9]
 8003ee2:	f107 0314 	add.w	r3, r7, #20
 8003ee6:	225d      	movs	r2, #93	; 0x5d
 8003ee8:	729a      	strb	r2, [r3, #10]
 8003eea:	f107 0314 	add.w	r3, r7, #20
 8003eee:	220e      	movs	r2, #14
 8003ef0:	72da      	strb	r2, [r3, #11]
 8003ef2:	f107 0314 	add.w	r3, r7, #20
 8003ef6:	227c      	movs	r2, #124	; 0x7c
 8003ef8:	731a      	strb	r2, [r3, #12]
 8003efa:	f107 0314 	add.w	r3, r7, #20
 8003efe:	2215      	movs	r2, #21
 8003f00:	735a      	strb	r2, [r3, #13]
 8003f02:	f107 0314 	add.w	r3, r7, #20
 8003f06:	2226      	movs	r2, #38	; 0x26
 8003f08:	739a      	strb	r2, [r3, #14]
 8003f0a:	f107 0314 	add.w	r3, r7, #20
 8003f0e:	2216      	movs	r2, #22
 8003f10:	73da      	strb	r2, [r3, #15]
 8003f12:	f107 0314 	add.w	r3, r7, #20
 8003f16:	222b      	movs	r2, #43	; 0x2b
 8003f18:	741a      	strb	r2, [r3, #16]
 8003f1a:	f107 0314 	add.w	r3, r7, #20
 8003f1e:	221f      	movs	r2, #31
 8003f20:	745a      	strb	r2, [r3, #17]
 8003f22:	f107 0314 	add.w	r3, r7, #20
 8003f26:	222d      	movs	r2, #45	; 0x2d
 8003f28:	749a      	strb	r2, [r3, #18]
 8003f2a:	f107 0314 	add.w	r3, r7, #20
 8003f2e:	2220      	movs	r2, #32
 8003f30:	74da      	strb	r2, [r3, #19]
 8003f32:	f107 0314 	add.w	r3, r7, #20
 8003f36:	222a      	movs	r2, #42	; 0x2a
 8003f38:	751a      	strb	r2, [r3, #20]
 8003f3a:	f107 0314 	add.w	r3, r7, #20
 8003f3e:	2221      	movs	r2, #33	; 0x21
 8003f40:	755a      	strb	r2, [r3, #21]
 8003f42:	f107 0314 	add.w	r3, r7, #20
 8003f46:	222f      	movs	r2, #47	; 0x2f
 8003f48:	759a      	strb	r2, [r3, #22]
 8003f4a:	f107 0314 	add.w	r3, r7, #20
 8003f4e:	2222      	movs	r2, #34	; 0x22
 8003f50:	75da      	strb	r2, [r3, #23]
 8003f52:	f107 0314 	add.w	r3, r7, #20
 8003f56:	225e      	movs	r2, #94	; 0x5e
 8003f58:	761a      	strb	r2, [r3, #24]
 8003f5a:	f107 0314 	add.w	r3, r7, #20
 8003f5e:	2223      	movs	r2, #35	; 0x23
 8003f60:	765a      	strb	r2, [r3, #25]
 8003f62:	f107 0314 	add.w	r3, r7, #20
 8003f66:	2225      	movs	r2, #37	; 0x25
 8003f68:	769a      	strb	r2, [r3, #26]
 8003f6a:	f107 0314 	add.w	r3, r7, #20
 8003f6e:	2224      	movs	r2, #36	; 0x24
 8003f70:	76da      	strb	r2, [r3, #27]
 8003f72:	f107 0314 	add.w	r3, r7, #20
 8003f76:	2228      	movs	r2, #40	; 0x28
 8003f78:	771a      	strb	r2, [r3, #28]
 8003f7a:	f107 0314 	add.w	r3, r7, #20
 8003f7e:	2226      	movs	r2, #38	; 0x26
 8003f80:	775a      	strb	r2, [r3, #29]
 8003f82:	f107 0314 	add.w	r3, r7, #20
 8003f86:	2229      	movs	r2, #41	; 0x29
 8003f88:	779a      	strb	r2, [r3, #30]
 8003f8a:	f107 0314 	add.w	r3, r7, #20
 8003f8e:	2227      	movs	r2, #39	; 0x27
 8003f90:	77da      	strb	r2, [r3, #31]
 8003f92:	f107 0314 	add.w	r3, r7, #20
 8003f96:	2225      	movs	r2, #37	; 0x25
 8003f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003f9c:	f107 030c 	add.w	r3, r7, #12
 8003fa0:	f107 0214 	add.w	r2, r7, #20
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	f107 030c 	add.w	r3, r7, #12
 8003faa:	2211      	movs	r2, #17
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc fc08 	bl	80007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8003fb8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003fbc:	f107 020c 	add.w	r2, r7, #12
 8003fc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	ca06      	ldmia	r2, {r1, r2}
 8003fca:	4885      	ldr	r0, [pc, #532]	; (80041e0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8003fcc:	f7fc fc14 	bl	80007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8003fd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fc fc03 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8003fda:	2305      	movs	r3, #5
 8003fdc:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8003fe0:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8003fe4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fe8:	497e      	ldr	r1, [pc, #504]	; (80041e4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc faf0 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8003ff0:	2306      	movs	r3, #6
 8003ff2:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8003ff6:	f207 1263 	addw	r2, r7, #355	; 0x163
 8003ffa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ffe:	331c      	adds	r3, #28
 8004000:	4979      	ldr	r1, [pc, #484]	; (80041e8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc fb0c 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8004008:	2307      	movs	r3, #7
 800400a:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 800400e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8004012:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004016:	3338      	adds	r3, #56	; 0x38
 8004018:	4974      	ldr	r1, [pc, #464]	; (80041ec <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800401a:	4618      	mov	r0, r3
 800401c:	f7fc fb00 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8004020:	2308      	movs	r3, #8
 8004022:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8004026:	f207 1265 	addw	r2, r7, #357	; 0x165
 800402a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800402e:	3354      	adds	r3, #84	; 0x54
 8004030:	496f      	ldr	r1, [pc, #444]	; (80041f0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8004032:	4618      	mov	r0, r3
 8004034:	f7fc facc 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8004038:	2309      	movs	r3, #9
 800403a:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800403e:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8004042:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004046:	3370      	adds	r3, #112	; 0x70
 8004048:	496a      	ldr	r1, [pc, #424]	; (80041f4 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800404a:	4618      	mov	r0, r3
 800404c:	f7fc fb10 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8004050:	2310      	movs	r3, #16
 8004052:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8004056:	f207 1267 	addw	r2, r7, #359	; 0x167
 800405a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800405e:	338c      	adds	r3, #140	; 0x8c
 8004060:	4965      	ldr	r1, [pc, #404]	; (80041f8 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8004062:	4618      	mov	r0, r3
 8004064:	f7fc fb2c 	bl	80006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8004068:	2311      	movs	r3, #17
 800406a:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800406e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8004072:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004076:	33a8      	adds	r3, #168	; 0xa8
 8004078:	4960      	ldr	r1, [pc, #384]	; (80041fc <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800407a:	4618      	mov	r0, r3
 800407c:	f7fc faf8 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8004080:	2312      	movs	r3, #18
 8004082:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8004086:	f207 1269 	addw	r2, r7, #361	; 0x169
 800408a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800408e:	33c4      	adds	r3, #196	; 0xc4
 8004090:	495b      	ldr	r1, [pc, #364]	; (8004200 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc fa9c 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8004098:	2313      	movs	r3, #19
 800409a:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800409e:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 80040a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040a6:	33e0      	adds	r3, #224	; 0xe0
 80040a8:	4956      	ldr	r1, [pc, #344]	; (8004204 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc fab8 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 80040b0:	2314      	movs	r3, #20
 80040b2:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 80040b6:	f207 126b 	addw	r2, r7, #363	; 0x16b
 80040ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040be:	33fc      	adds	r3, #252	; 0xfc
 80040c0:	4951      	ldr	r1, [pc, #324]	; (8004208 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fc fb24 	bl	8000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 80040c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040d6:	220a      	movs	r2, #10
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fc fc17 	bl	8000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80040e4:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80040e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80040ec:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	460b      	mov	r3, r1
 80040f4:	ca06      	ldmia	r2, {r1, r2}
 80040f6:	4845      	ldr	r0, [pc, #276]	; (800420c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80040f8:	f7fc fc23 	bl	8000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80040fc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004100:	4618      	mov	r0, r3
 8004102:	f7fc fc12 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8004106:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800410a:	f504 748c 	add.w	r4, r4, #280	; 0x118
 800410e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004112:	429c      	cmp	r4, r3
 8004114:	d004      	beq.n	8004120 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8004116:	3c1c      	subs	r4, #28
 8004118:	4620      	mov	r0, r4
 800411a:	f7fc fa4c 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 800411e:	e7f6      	b.n	800410e <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8004120:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	233c      	movs	r3, #60	; 0x3c
 800412e:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8004132:	231b      	movs	r3, #27
 8004134:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8004138:	231c      	movs	r3, #28
 800413a:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800413e:	233e      	movs	r3, #62	; 0x3e
 8004140:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8004144:	2319      	movs	r3, #25
 8004146:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800414a:	231a      	movs	r3, #26
 800414c:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8004150:	233d      	movs	r3, #61	; 0x3d
 8004152:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8004156:	2318      	movs	r3, #24
 8004158:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 800415c:	231d      	movs	r3, #29
 800415e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8004162:	2321      	movs	r3, #33	; 0x21
 8004164:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8004168:	2317      	movs	r3, #23
 800416a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800416e:	231e      	movs	r3, #30
 8004170:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8004174:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004178:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800417c:	2304      	movs	r3, #4
 800417e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004182:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004186:	4618      	mov	r0, r3
 8004188:	f7fc fc0b 	bl	80009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 800418c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8004190:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	4613      	mov	r3, r2
 8004198:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 800419c:	ca06      	ldmia	r2, {r1, r2}
 800419e:	481c      	ldr	r0, [pc, #112]	; (8004210 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80041a0:	f7fc fc17 	bl	80009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80041a4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fc fc06 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 80041ae:	1d3b      	adds	r3, r7, #4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10e      	bne.n	80041d4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80041b6:	463b      	mov	r3, r7
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041be:	4293      	cmp	r3, r2
 80041c0:	d108      	bne.n	80041d4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80041c2:	4813      	ldr	r0, [pc, #76]	; (8004210 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80041c4:	f7ff f85e 	bl	8003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 80041c8:	4810      	ldr	r0, [pc, #64]	; (800420c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80041ca:	f7ff f868 	bl	800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 80041ce:	4804      	ldr	r0, [pc, #16]	; (80041e0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80041d0:	f7ff f872 	bl	80032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80041d4:	bf00      	nop
 80041d6:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd90      	pop	{r4, r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000168 	.word	0x20000168
 80041e4:	0800a0b4 	.word	0x0800a0b4
 80041e8:	0800a0bc 	.word	0x0800a0bc
 80041ec:	0800a0c4 	.word	0x0800a0c4
 80041f0:	0800a0cc 	.word	0x0800a0cc
 80041f4:	0800a0d4 	.word	0x0800a0d4
 80041f8:	0800a0dc 	.word	0x0800a0dc
 80041fc:	0800a0e0 	.word	0x0800a0e0
 8004200:	0800a0e8 	.word	0x0800a0e8
 8004204:	0800a0f0 	.word	0x0800a0f0
 8004208:	0800a0f8 	.word	0x0800a0f8
 800420c:	20000180 	.word	0x20000180
 8004210:	20000198 	.word	0x20000198

08004214 <_GLOBAL__sub_I__ZN16Function_handler12run_functionEP13Function_call>:
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
 8004218:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800421c:	2001      	movs	r0, #1
 800421e:	f7ff fe1d 	bl	8003e5c <_Z41__static_initialization_and_destruction_0ii>
 8004222:	bd80      	pop	{r7, pc}

08004224 <_GLOBAL__sub_D__ZN16Function_handler12run_functionEP13Function_call>:
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
 8004228:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800422c:	2000      	movs	r0, #0
 800422e:	f7ff fe15 	bl	8003e5c <_Z41__static_initialization_and_destruction_0ii>
 8004232:	bd80      	pop	{r7, pc}

08004234 <_Z41__static_initialization_and_destruction_0ii>:
	while (is_invalid_char())
	{
		skip_comment();
		skip_whitespace();
	}
}
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b0e7      	sub	sp, #412	; 0x19c
 8004238:	af02      	add	r7, sp, #8
 800423a:	1d3b      	adds	r3, r7, #4
 800423c:	6018      	str	r0, [r3, #0]
 800423e:	463b      	mov	r3, r7
 8004240:	6019      	str	r1, [r3, #0]
 8004242:	1d3b      	adds	r3, r7, #4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b01      	cmp	r3, #1
 8004248:	f040 819d 	bne.w	8004586 <_Z41__static_initialization_and_destruction_0ii+0x352>
 800424c:	463b      	mov	r3, r7
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004254:	4293      	cmp	r3, r2
 8004256:	f040 8196 	bne.w	8004586 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 800425a:	f107 0314 	add.w	r3, r7, #20
 800425e:	4618      	mov	r0, r3
 8004260:	2322      	movs	r3, #34	; 0x22
 8004262:	461a      	mov	r2, r3
 8004264:	2100      	movs	r1, #0
 8004266:	f005 fc89 	bl	8009b7c <memset>
 800426a:	f107 0314 	add.w	r3, r7, #20
 800426e:	223a      	movs	r2, #58	; 0x3a
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	f107 0314 	add.w	r3, r7, #20
 8004276:	2201      	movs	r2, #1
 8004278:	705a      	strb	r2, [r3, #1]
 800427a:	f107 0314 	add.w	r3, r7, #20
 800427e:	220a      	movs	r2, #10
 8004280:	709a      	strb	r2, [r3, #2]
 8004282:	f107 0314 	add.w	r3, r7, #20
 8004286:	220a      	movs	r2, #10
 8004288:	70da      	strb	r2, [r3, #3]
 800428a:	f107 0314 	add.w	r3, r7, #20
 800428e:	222c      	movs	r2, #44	; 0x2c
 8004290:	711a      	strb	r2, [r3, #4]
 8004292:	f107 0314 	add.w	r3, r7, #20
 8004296:	220c      	movs	r2, #12
 8004298:	715a      	strb	r2, [r3, #5]
 800429a:	f107 0314 	add.w	r3, r7, #20
 800429e:	222e      	movs	r2, #46	; 0x2e
 80042a0:	719a      	strb	r2, [r3, #6]
 80042a2:	f107 0314 	add.w	r3, r7, #20
 80042a6:	220b      	movs	r2, #11
 80042a8:	71da      	strb	r2, [r3, #7]
 80042aa:	f107 0314 	add.w	r3, r7, #20
 80042ae:	225b      	movs	r2, #91	; 0x5b
 80042b0:	721a      	strb	r2, [r3, #8]
 80042b2:	f107 0314 	add.w	r3, r7, #20
 80042b6:	220d      	movs	r2, #13
 80042b8:	725a      	strb	r2, [r3, #9]
 80042ba:	f107 0314 	add.w	r3, r7, #20
 80042be:	225d      	movs	r2, #93	; 0x5d
 80042c0:	729a      	strb	r2, [r3, #10]
 80042c2:	f107 0314 	add.w	r3, r7, #20
 80042c6:	220e      	movs	r2, #14
 80042c8:	72da      	strb	r2, [r3, #11]
 80042ca:	f107 0314 	add.w	r3, r7, #20
 80042ce:	227c      	movs	r2, #124	; 0x7c
 80042d0:	731a      	strb	r2, [r3, #12]
 80042d2:	f107 0314 	add.w	r3, r7, #20
 80042d6:	2215      	movs	r2, #21
 80042d8:	735a      	strb	r2, [r3, #13]
 80042da:	f107 0314 	add.w	r3, r7, #20
 80042de:	2226      	movs	r2, #38	; 0x26
 80042e0:	739a      	strb	r2, [r3, #14]
 80042e2:	f107 0314 	add.w	r3, r7, #20
 80042e6:	2216      	movs	r2, #22
 80042e8:	73da      	strb	r2, [r3, #15]
 80042ea:	f107 0314 	add.w	r3, r7, #20
 80042ee:	222b      	movs	r2, #43	; 0x2b
 80042f0:	741a      	strb	r2, [r3, #16]
 80042f2:	f107 0314 	add.w	r3, r7, #20
 80042f6:	221f      	movs	r2, #31
 80042f8:	745a      	strb	r2, [r3, #17]
 80042fa:	f107 0314 	add.w	r3, r7, #20
 80042fe:	222d      	movs	r2, #45	; 0x2d
 8004300:	749a      	strb	r2, [r3, #18]
 8004302:	f107 0314 	add.w	r3, r7, #20
 8004306:	2220      	movs	r2, #32
 8004308:	74da      	strb	r2, [r3, #19]
 800430a:	f107 0314 	add.w	r3, r7, #20
 800430e:	222a      	movs	r2, #42	; 0x2a
 8004310:	751a      	strb	r2, [r3, #20]
 8004312:	f107 0314 	add.w	r3, r7, #20
 8004316:	2221      	movs	r2, #33	; 0x21
 8004318:	755a      	strb	r2, [r3, #21]
 800431a:	f107 0314 	add.w	r3, r7, #20
 800431e:	222f      	movs	r2, #47	; 0x2f
 8004320:	759a      	strb	r2, [r3, #22]
 8004322:	f107 0314 	add.w	r3, r7, #20
 8004326:	2222      	movs	r2, #34	; 0x22
 8004328:	75da      	strb	r2, [r3, #23]
 800432a:	f107 0314 	add.w	r3, r7, #20
 800432e:	225e      	movs	r2, #94	; 0x5e
 8004330:	761a      	strb	r2, [r3, #24]
 8004332:	f107 0314 	add.w	r3, r7, #20
 8004336:	2223      	movs	r2, #35	; 0x23
 8004338:	765a      	strb	r2, [r3, #25]
 800433a:	f107 0314 	add.w	r3, r7, #20
 800433e:	2225      	movs	r2, #37	; 0x25
 8004340:	769a      	strb	r2, [r3, #26]
 8004342:	f107 0314 	add.w	r3, r7, #20
 8004346:	2224      	movs	r2, #36	; 0x24
 8004348:	76da      	strb	r2, [r3, #27]
 800434a:	f107 0314 	add.w	r3, r7, #20
 800434e:	2228      	movs	r2, #40	; 0x28
 8004350:	771a      	strb	r2, [r3, #28]
 8004352:	f107 0314 	add.w	r3, r7, #20
 8004356:	2226      	movs	r2, #38	; 0x26
 8004358:	775a      	strb	r2, [r3, #29]
 800435a:	f107 0314 	add.w	r3, r7, #20
 800435e:	2229      	movs	r2, #41	; 0x29
 8004360:	779a      	strb	r2, [r3, #30]
 8004362:	f107 0314 	add.w	r3, r7, #20
 8004366:	2227      	movs	r2, #39	; 0x27
 8004368:	77da      	strb	r2, [r3, #31]
 800436a:	f107 0314 	add.w	r3, r7, #20
 800436e:	2225      	movs	r2, #37	; 0x25
 8004370:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004374:	f107 030c 	add.w	r3, r7, #12
 8004378:	f107 0214 	add.w	r2, r7, #20
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	f107 030c 	add.w	r3, r7, #12
 8004382:	2211      	movs	r2, #17
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800438a:	4618      	mov	r0, r3
 800438c:	f7fc fa1c 	bl	80007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8004390:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004394:	f107 020c 	add.w	r2, r7, #12
 8004398:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	460b      	mov	r3, r1
 80043a0:	ca06      	ldmia	r2, {r1, r2}
 80043a2:	4885      	ldr	r0, [pc, #532]	; (80045b8 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80043a4:	f7fc fa28 	bl	80007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80043a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fc fa17 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 80043b2:	2305      	movs	r3, #5
 80043b4:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80043b8:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80043bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043c0:	497e      	ldr	r1, [pc, #504]	; (80045bc <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fc f904 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80043c8:	2306      	movs	r3, #6
 80043ca:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80043ce:	f207 1263 	addw	r2, r7, #355	; 0x163
 80043d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043d6:	331c      	adds	r3, #28
 80043d8:	4979      	ldr	r1, [pc, #484]	; (80045c0 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc f920 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80043e0:	2307      	movs	r3, #7
 80043e2:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80043e6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80043ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043ee:	3338      	adds	r3, #56	; 0x38
 80043f0:	4974      	ldr	r1, [pc, #464]	; (80045c4 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fc f914 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80043f8:	2308      	movs	r3, #8
 80043fa:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80043fe:	f207 1265 	addw	r2, r7, #357	; 0x165
 8004402:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004406:	3354      	adds	r3, #84	; 0x54
 8004408:	496f      	ldr	r1, [pc, #444]	; (80045c8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800440a:	4618      	mov	r0, r3
 800440c:	f7fc f8e0 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8004410:	2309      	movs	r3, #9
 8004412:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8004416:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 800441a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800441e:	3370      	adds	r3, #112	; 0x70
 8004420:	496a      	ldr	r1, [pc, #424]	; (80045cc <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8004422:	4618      	mov	r0, r3
 8004424:	f7fc f924 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8004428:	2310      	movs	r3, #16
 800442a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 800442e:	f207 1267 	addw	r2, r7, #359	; 0x167
 8004432:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004436:	338c      	adds	r3, #140	; 0x8c
 8004438:	4965      	ldr	r1, [pc, #404]	; (80045d0 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800443a:	4618      	mov	r0, r3
 800443c:	f7fc f940 	bl	80006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8004440:	2311      	movs	r3, #17
 8004442:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8004446:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800444a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800444e:	33a8      	adds	r3, #168	; 0xa8
 8004450:	4960      	ldr	r1, [pc, #384]	; (80045d4 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8004452:	4618      	mov	r0, r3
 8004454:	f7fc f90c 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8004458:	2312      	movs	r3, #18
 800445a:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 800445e:	f207 1269 	addw	r2, r7, #361	; 0x169
 8004462:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004466:	33c4      	adds	r3, #196	; 0xc4
 8004468:	495b      	ldr	r1, [pc, #364]	; (80045d8 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800446a:	4618      	mov	r0, r3
 800446c:	f7fc f8b0 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8004470:	2313      	movs	r3, #19
 8004472:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8004476:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800447a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800447e:	33e0      	adds	r3, #224	; 0xe0
 8004480:	4956      	ldr	r1, [pc, #344]	; (80045dc <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8004482:	4618      	mov	r0, r3
 8004484:	f7fc f8cc 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8004488:	2314      	movs	r3, #20
 800448a:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 800448e:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8004492:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004496:	33fc      	adds	r3, #252	; 0xfc
 8004498:	4951      	ldr	r1, [pc, #324]	; (80045e0 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800449a:	4618      	mov	r0, r3
 800449c:	f7fc f938 	bl	8000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 80044a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044ae:	220a      	movs	r2, #10
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fc fa2b 	bl	8000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80044bc:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80044c0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80044c4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	460b      	mov	r3, r1
 80044cc:	ca06      	ldmia	r2, {r1, r2}
 80044ce:	4845      	ldr	r0, [pc, #276]	; (80045e4 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80044d0:	f7fc fa37 	bl	8000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80044d4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fc fa26 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80044de:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80044e2:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80044e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044ea:	429c      	cmp	r4, r3
 80044ec:	d004      	beq.n	80044f8 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 80044ee:	3c1c      	subs	r4, #28
 80044f0:	4620      	mov	r0, r4
 80044f2:	f7fc f860 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80044f6:	e7f6      	b.n	80044e6 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80044f8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	233c      	movs	r3, #60	; 0x3c
 8004506:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 800450a:	231b      	movs	r3, #27
 800450c:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8004510:	231c      	movs	r3, #28
 8004512:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8004516:	233e      	movs	r3, #62	; 0x3e
 8004518:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 800451c:	2319      	movs	r3, #25
 800451e:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8004522:	231a      	movs	r3, #26
 8004524:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8004528:	233d      	movs	r3, #61	; 0x3d
 800452a:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 800452e:	2318      	movs	r3, #24
 8004530:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8004534:	231d      	movs	r3, #29
 8004536:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800453a:	2321      	movs	r3, #33	; 0x21
 800453c:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8004540:	2317      	movs	r3, #23
 8004542:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8004546:	231e      	movs	r3, #30
 8004548:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 800454c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004550:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004554:	2304      	movs	r3, #4
 8004556:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800455a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800455e:	4618      	mov	r0, r3
 8004560:	f7fc fa1f 	bl	80009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8004564:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8004568:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	4613      	mov	r3, r2
 8004570:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8004574:	ca06      	ldmia	r2, {r1, r2}
 8004576:	481c      	ldr	r0, [pc, #112]	; (80045e8 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8004578:	f7fc fa2b 	bl	80009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800457c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004580:	4618      	mov	r0, r3
 8004582:	f7fc fa1a 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8004586:	1d3b      	adds	r3, r7, #4
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10e      	bne.n	80045ac <_Z41__static_initialization_and_destruction_0ii+0x378>
 800458e:	463b      	mov	r3, r7
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004596:	4293      	cmp	r3, r2
 8004598:	d108      	bne.n	80045ac <_Z41__static_initialization_and_destruction_0ii+0x378>
 800459a:	4813      	ldr	r0, [pc, #76]	; (80045e8 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800459c:	f7fe fe72 	bl	8003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 80045a0:	4810      	ldr	r0, [pc, #64]	; (80045e4 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80045a2:	f7fe fe7c 	bl	800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 80045a6:	4804      	ldr	r0, [pc, #16]	; (80045b8 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80045a8:	f7fe fe86 	bl	80032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80045ac:	bf00      	nop
 80045ae:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd90      	pop	{r4, r7, pc}
 80045b6:	bf00      	nop
 80045b8:	200001b0 	.word	0x200001b0
 80045bc:	0800a14c 	.word	0x0800a14c
 80045c0:	0800a154 	.word	0x0800a154
 80045c4:	0800a15c 	.word	0x0800a15c
 80045c8:	0800a164 	.word	0x0800a164
 80045cc:	0800a16c 	.word	0x0800a16c
 80045d0:	0800a174 	.word	0x0800a174
 80045d4:	0800a178 	.word	0x0800a178
 80045d8:	0800a180 	.word	0x0800a180
 80045dc:	0800a188 	.word	0x0800a188
 80045e0:	0800a190 	.word	0x0800a190
 80045e4:	200001c8 	.word	0x200001c8
 80045e8:	200001e0 	.word	0x200001e0

080045ec <_GLOBAL__sub_I__ZN5LexerC2Ev>:
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80045f4:	2001      	movs	r0, #1
 80045f6:	f7ff fe1d 	bl	8004234 <_Z41__static_initialization_and_destruction_0ii>
 80045fa:	bd80      	pop	{r7, pc}

080045fc <_GLOBAL__sub_D__ZN5LexerC2Ev>:
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
 8004600:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004604:	2000      	movs	r0, #0
 8004606:	f7ff fe15 	bl	8004234 <_Z41__static_initialization_and_destruction_0ii>
 800460a:	bd80      	pop	{r7, pc}

0800460c <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 800460c:	b5b0      	push	{r4, r5, r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8004616:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004618:	1d3b      	adds	r3, r7, #4
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f862 	bl	80046e4 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8004620:	462a      	mov	r2, r5
 8004622:	6839      	ldr	r1, [r7, #0]
 8004624:	4620      	mov	r0, r4
 8004626:	f000 f867 	bl	80046f8 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800462a:	4603      	mov	r3, r0
    }
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bdb0      	pop	{r4, r5, r7, pc}

08004634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	703b      	strb	r3, [r7, #0]
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8004642:	68b8      	ldr	r0, [r7, #8]
 8004644:	f000 f83e 	bl	80046c4 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d005      	beq.n	800465a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	429a      	cmp	r2, r3
 8004654:	d001      	beq.n	800465a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800465a:	2300      	movs	r3, #0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8004660:	4817      	ldr	r0, [pc, #92]	; (80046c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8004662:	f005 f88b 	bl	800977c <_ZSt19__throw_logic_errorPKc>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	68b8      	ldr	r0, [r7, #8]
 800466a:	f7ff ffcf 	bl	800460c <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800466e:	4603      	mov	r3, r0
 8004670:	617b      	str	r3, [r7, #20]
	if (__dnew > size_type(_S_local_capacity))
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b0f      	cmp	r3, #15
 8004676:	d910      	bls.n	800469a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	    _M_data(_M_create(__dnew, size_type(0)));
 8004678:	f107 0314 	add.w	r3, r7, #20
 800467c:	2200      	movs	r2, #0
 800467e:	4619      	mov	r1, r3
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f005 f897 	bl	80097b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004686:	4603      	mov	r3, r0
 8004688:	4619      	mov	r1, r3
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f005 f885 	bl	800979a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4619      	mov	r1, r3
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f005 f886 	bl	80097a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f005 f87f 	bl	800979e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80046a0:	4603      	mov	r3, r0
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f005 f8db 	bl	8009862 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	4619      	mov	r1, r3
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f005 f87a 	bl	80097aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80046b6:	bf00      	nop
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	0800a1f0 	.word	0x0800a1f0

080046c4 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:
    __is_null_pointer(_Type* __ptr)
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
    }
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <_Z41__static_initialization_and_destruction_0ii>:
	method_pointer method = search->second;

	Symbol& var = Variable_handler::get_instance().get_symbol(*mcall->vector);

	method(var, mcall->call->arguments);
}
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b0e7      	sub	sp, #412	; 0x19c
 800471c:	af02      	add	r7, sp, #8
 800471e:	1d3b      	adds	r3, r7, #4
 8004720:	6018      	str	r0, [r3, #0]
 8004722:	463b      	mov	r3, r7
 8004724:	6019      	str	r1, [r3, #0]
 8004726:	1d3b      	adds	r3, r7, #4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b01      	cmp	r3, #1
 800472c:	f040 819d 	bne.w	8004a6a <_Z41__static_initialization_and_destruction_0ii+0x352>
 8004730:	463b      	mov	r3, r7
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004738:	4293      	cmp	r3, r2
 800473a:	f040 8196 	bne.w	8004a6a <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 800473e:	f107 0314 	add.w	r3, r7, #20
 8004742:	4618      	mov	r0, r3
 8004744:	2322      	movs	r3, #34	; 0x22
 8004746:	461a      	mov	r2, r3
 8004748:	2100      	movs	r1, #0
 800474a:	f005 fa17 	bl	8009b7c <memset>
 800474e:	f107 0314 	add.w	r3, r7, #20
 8004752:	223a      	movs	r2, #58	; 0x3a
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	f107 0314 	add.w	r3, r7, #20
 800475a:	2201      	movs	r2, #1
 800475c:	705a      	strb	r2, [r3, #1]
 800475e:	f107 0314 	add.w	r3, r7, #20
 8004762:	220a      	movs	r2, #10
 8004764:	709a      	strb	r2, [r3, #2]
 8004766:	f107 0314 	add.w	r3, r7, #20
 800476a:	220a      	movs	r2, #10
 800476c:	70da      	strb	r2, [r3, #3]
 800476e:	f107 0314 	add.w	r3, r7, #20
 8004772:	222c      	movs	r2, #44	; 0x2c
 8004774:	711a      	strb	r2, [r3, #4]
 8004776:	f107 0314 	add.w	r3, r7, #20
 800477a:	220c      	movs	r2, #12
 800477c:	715a      	strb	r2, [r3, #5]
 800477e:	f107 0314 	add.w	r3, r7, #20
 8004782:	222e      	movs	r2, #46	; 0x2e
 8004784:	719a      	strb	r2, [r3, #6]
 8004786:	f107 0314 	add.w	r3, r7, #20
 800478a:	220b      	movs	r2, #11
 800478c:	71da      	strb	r2, [r3, #7]
 800478e:	f107 0314 	add.w	r3, r7, #20
 8004792:	225b      	movs	r2, #91	; 0x5b
 8004794:	721a      	strb	r2, [r3, #8]
 8004796:	f107 0314 	add.w	r3, r7, #20
 800479a:	220d      	movs	r2, #13
 800479c:	725a      	strb	r2, [r3, #9]
 800479e:	f107 0314 	add.w	r3, r7, #20
 80047a2:	225d      	movs	r2, #93	; 0x5d
 80047a4:	729a      	strb	r2, [r3, #10]
 80047a6:	f107 0314 	add.w	r3, r7, #20
 80047aa:	220e      	movs	r2, #14
 80047ac:	72da      	strb	r2, [r3, #11]
 80047ae:	f107 0314 	add.w	r3, r7, #20
 80047b2:	227c      	movs	r2, #124	; 0x7c
 80047b4:	731a      	strb	r2, [r3, #12]
 80047b6:	f107 0314 	add.w	r3, r7, #20
 80047ba:	2215      	movs	r2, #21
 80047bc:	735a      	strb	r2, [r3, #13]
 80047be:	f107 0314 	add.w	r3, r7, #20
 80047c2:	2226      	movs	r2, #38	; 0x26
 80047c4:	739a      	strb	r2, [r3, #14]
 80047c6:	f107 0314 	add.w	r3, r7, #20
 80047ca:	2216      	movs	r2, #22
 80047cc:	73da      	strb	r2, [r3, #15]
 80047ce:	f107 0314 	add.w	r3, r7, #20
 80047d2:	222b      	movs	r2, #43	; 0x2b
 80047d4:	741a      	strb	r2, [r3, #16]
 80047d6:	f107 0314 	add.w	r3, r7, #20
 80047da:	221f      	movs	r2, #31
 80047dc:	745a      	strb	r2, [r3, #17]
 80047de:	f107 0314 	add.w	r3, r7, #20
 80047e2:	222d      	movs	r2, #45	; 0x2d
 80047e4:	749a      	strb	r2, [r3, #18]
 80047e6:	f107 0314 	add.w	r3, r7, #20
 80047ea:	2220      	movs	r2, #32
 80047ec:	74da      	strb	r2, [r3, #19]
 80047ee:	f107 0314 	add.w	r3, r7, #20
 80047f2:	222a      	movs	r2, #42	; 0x2a
 80047f4:	751a      	strb	r2, [r3, #20]
 80047f6:	f107 0314 	add.w	r3, r7, #20
 80047fa:	2221      	movs	r2, #33	; 0x21
 80047fc:	755a      	strb	r2, [r3, #21]
 80047fe:	f107 0314 	add.w	r3, r7, #20
 8004802:	222f      	movs	r2, #47	; 0x2f
 8004804:	759a      	strb	r2, [r3, #22]
 8004806:	f107 0314 	add.w	r3, r7, #20
 800480a:	2222      	movs	r2, #34	; 0x22
 800480c:	75da      	strb	r2, [r3, #23]
 800480e:	f107 0314 	add.w	r3, r7, #20
 8004812:	225e      	movs	r2, #94	; 0x5e
 8004814:	761a      	strb	r2, [r3, #24]
 8004816:	f107 0314 	add.w	r3, r7, #20
 800481a:	2223      	movs	r2, #35	; 0x23
 800481c:	765a      	strb	r2, [r3, #25]
 800481e:	f107 0314 	add.w	r3, r7, #20
 8004822:	2225      	movs	r2, #37	; 0x25
 8004824:	769a      	strb	r2, [r3, #26]
 8004826:	f107 0314 	add.w	r3, r7, #20
 800482a:	2224      	movs	r2, #36	; 0x24
 800482c:	76da      	strb	r2, [r3, #27]
 800482e:	f107 0314 	add.w	r3, r7, #20
 8004832:	2228      	movs	r2, #40	; 0x28
 8004834:	771a      	strb	r2, [r3, #28]
 8004836:	f107 0314 	add.w	r3, r7, #20
 800483a:	2226      	movs	r2, #38	; 0x26
 800483c:	775a      	strb	r2, [r3, #29]
 800483e:	f107 0314 	add.w	r3, r7, #20
 8004842:	2229      	movs	r2, #41	; 0x29
 8004844:	779a      	strb	r2, [r3, #30]
 8004846:	f107 0314 	add.w	r3, r7, #20
 800484a:	2227      	movs	r2, #39	; 0x27
 800484c:	77da      	strb	r2, [r3, #31]
 800484e:	f107 0314 	add.w	r3, r7, #20
 8004852:	2225      	movs	r2, #37	; 0x25
 8004854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004858:	f107 030c 	add.w	r3, r7, #12
 800485c:	f107 0214 	add.w	r2, r7, #20
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	f107 030c 	add.w	r3, r7, #12
 8004866:	2211      	movs	r2, #17
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800486e:	4618      	mov	r0, r3
 8004870:	f7fb ffaa 	bl	80007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8004874:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004878:	f107 020c 	add.w	r2, r7, #12
 800487c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	460b      	mov	r3, r1
 8004884:	ca06      	ldmia	r2, {r1, r2}
 8004886:	4885      	ldr	r0, [pc, #532]	; (8004a9c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8004888:	f7fb ffb6 	bl	80007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800488c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004890:	4618      	mov	r0, r3
 8004892:	f7fb ffa5 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8004896:	2305      	movs	r3, #5
 8004898:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 800489c:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80048a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048a4:	497e      	ldr	r1, [pc, #504]	; (8004aa0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fb fe92 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80048ac:	2306      	movs	r3, #6
 80048ae:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80048b2:	f207 1263 	addw	r2, r7, #355	; 0x163
 80048b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048ba:	331c      	adds	r3, #28
 80048bc:	4979      	ldr	r1, [pc, #484]	; (8004aa4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fb feae 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80048c4:	2307      	movs	r3, #7
 80048c6:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80048ca:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80048ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048d2:	3338      	adds	r3, #56	; 0x38
 80048d4:	4974      	ldr	r1, [pc, #464]	; (8004aa8 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fb fea2 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80048dc:	2308      	movs	r3, #8
 80048de:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80048e2:	f207 1265 	addw	r2, r7, #357	; 0x165
 80048e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048ea:	3354      	adds	r3, #84	; 0x54
 80048ec:	496f      	ldr	r1, [pc, #444]	; (8004aac <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fb fe6e 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 80048f4:	2309      	movs	r3, #9
 80048f6:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 80048fa:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 80048fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004902:	3370      	adds	r3, #112	; 0x70
 8004904:	496a      	ldr	r1, [pc, #424]	; (8004ab0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8004906:	4618      	mov	r0, r3
 8004908:	f7fb feb2 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 800490c:	2310      	movs	r3, #16
 800490e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8004912:	f207 1267 	addw	r2, r7, #359	; 0x167
 8004916:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800491a:	338c      	adds	r3, #140	; 0x8c
 800491c:	4965      	ldr	r1, [pc, #404]	; (8004ab4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800491e:	4618      	mov	r0, r3
 8004920:	f7fb fece 	bl	80006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8004924:	2311      	movs	r3, #17
 8004926:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800492a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800492e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004932:	33a8      	adds	r3, #168	; 0xa8
 8004934:	4960      	ldr	r1, [pc, #384]	; (8004ab8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8004936:	4618      	mov	r0, r3
 8004938:	f7fb fe9a 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 800493c:	2312      	movs	r3, #18
 800493e:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8004942:	f207 1269 	addw	r2, r7, #361	; 0x169
 8004946:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800494a:	33c4      	adds	r3, #196	; 0xc4
 800494c:	495b      	ldr	r1, [pc, #364]	; (8004abc <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800494e:	4618      	mov	r0, r3
 8004950:	f7fb fe3e 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8004954:	2313      	movs	r3, #19
 8004956:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800495a:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800495e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004962:	33e0      	adds	r3, #224	; 0xe0
 8004964:	4956      	ldr	r1, [pc, #344]	; (8004ac0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8004966:	4618      	mov	r0, r3
 8004968:	f7fb fe5a 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 800496c:	2314      	movs	r3, #20
 800496e:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8004972:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8004976:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800497a:	33fc      	adds	r3, #252	; 0xfc
 800497c:	4951      	ldr	r1, [pc, #324]	; (8004ac4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800497e:	4618      	mov	r0, r3
 8004980:	f7fb fec6 	bl	8000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8004984:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004988:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004992:	220a      	movs	r2, #10
 8004994:	605a      	str	r2, [r3, #4]
 8004996:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800499a:	4618      	mov	r0, r3
 800499c:	f7fb ffb9 	bl	8000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80049a0:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80049a4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80049a8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	460b      	mov	r3, r1
 80049b0:	ca06      	ldmia	r2, {r1, r2}
 80049b2:	4845      	ldr	r0, [pc, #276]	; (8004ac8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80049b4:	f7fb ffc5 	bl	8000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80049b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fb ffb4 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80049c2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80049c6:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80049ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049ce:	429c      	cmp	r4, r3
 80049d0:	d004      	beq.n	80049dc <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 80049d2:	3c1c      	subs	r4, #28
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7fb fdee 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80049da:	e7f6      	b.n	80049ca <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80049dc:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	605a      	str	r2, [r3, #4]
 80049e6:	609a      	str	r2, [r3, #8]
 80049e8:	233c      	movs	r3, #60	; 0x3c
 80049ea:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80049ee:	231b      	movs	r3, #27
 80049f0:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80049f4:	231c      	movs	r3, #28
 80049f6:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80049fa:	233e      	movs	r3, #62	; 0x3e
 80049fc:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8004a00:	2319      	movs	r3, #25
 8004a02:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8004a06:	231a      	movs	r3, #26
 8004a08:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8004a0c:	233d      	movs	r3, #61	; 0x3d
 8004a0e:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8004a12:	2318      	movs	r3, #24
 8004a14:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8004a18:	231d      	movs	r3, #29
 8004a1a:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8004a1e:	2321      	movs	r3, #33	; 0x21
 8004a20:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8004a24:	2317      	movs	r3, #23
 8004a26:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8004a2a:	231e      	movs	r3, #30
 8004a2c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8004a30:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004a34:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004a38:	2304      	movs	r3, #4
 8004a3a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004a3e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fb ffad 	bl	80009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8004a48:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8004a4c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	4613      	mov	r3, r2
 8004a54:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8004a58:	ca06      	ldmia	r2, {r1, r2}
 8004a5a:	481c      	ldr	r0, [pc, #112]	; (8004acc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8004a5c:	f7fb ffb9 	bl	80009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8004a60:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fb ffa8 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8004a6a:	1d3b      	adds	r3, r7, #4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10e      	bne.n	8004a90 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8004a72:	463b      	mov	r3, r7
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d108      	bne.n	8004a90 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8004a7e:	4813      	ldr	r0, [pc, #76]	; (8004acc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8004a80:	f7fe fc00 	bl	8003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8004a84:	4810      	ldr	r0, [pc, #64]	; (8004ac8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8004a86:	f7fe fc0a 	bl	800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8004a8a:	4804      	ldr	r0, [pc, #16]	; (8004a9c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8004a8c:	f7fe fc14 	bl	80032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8004a90:	bf00      	nop
 8004a92:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd90      	pop	{r4, r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	200001f8 	.word	0x200001f8
 8004aa0:	0800a21c 	.word	0x0800a21c
 8004aa4:	0800a224 	.word	0x0800a224
 8004aa8:	0800a22c 	.word	0x0800a22c
 8004aac:	0800a234 	.word	0x0800a234
 8004ab0:	0800a23c 	.word	0x0800a23c
 8004ab4:	0800a244 	.word	0x0800a244
 8004ab8:	0800a248 	.word	0x0800a248
 8004abc:	0800a250 	.word	0x0800a250
 8004ac0:	0800a258 	.word	0x0800a258
 8004ac4:	0800a260 	.word	0x0800a260
 8004ac8:	20000210 	.word	0x20000210
 8004acc:	20000228 	.word	0x20000228

08004ad0 <_GLOBAL__sub_I__ZN14Method_handlerC2Ev>:
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ad8:	2001      	movs	r0, #1
 8004ada:	f7ff fe1d 	bl	8004718 <_Z41__static_initialization_and_destruction_0ii>
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <_GLOBAL__sub_D__ZN14Method_handlerC2Ev>:
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ae8:	2000      	movs	r0, #0
 8004aea:	f7ff fe15 	bl	8004718 <_Z41__static_initialization_and_destruction_0ii>
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <_Z41__static_initialization_and_destruction_0ii>:
	Par.parse_setup(Prog);
	Par.parse_loop(Prog);
	Par.parse_finish(Prog);
	Par.assert_token(TOKEN_END_OF_FILE, "end of file");
	return Prog;
}
 8004af0:	b590      	push	{r4, r7, lr}
 8004af2:	b0e7      	sub	sp, #412	; 0x19c
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	1d3b      	adds	r3, r7, #4
 8004af8:	6018      	str	r0, [r3, #0]
 8004afa:	463b      	mov	r3, r7
 8004afc:	6019      	str	r1, [r3, #0]
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	f040 819d 	bne.w	8004e42 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8004b08:	463b      	mov	r3, r7
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b10:	4293      	cmp	r3, r2
 8004b12:	f040 8196 	bne.w	8004e42 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8004b16:	f107 0314 	add.w	r3, r7, #20
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	2322      	movs	r3, #34	; 0x22
 8004b1e:	461a      	mov	r2, r3
 8004b20:	2100      	movs	r1, #0
 8004b22:	f005 f82b 	bl	8009b7c <memset>
 8004b26:	f107 0314 	add.w	r3, r7, #20
 8004b2a:	223a      	movs	r2, #58	; 0x3a
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	f107 0314 	add.w	r3, r7, #20
 8004b32:	2201      	movs	r2, #1
 8004b34:	705a      	strb	r2, [r3, #1]
 8004b36:	f107 0314 	add.w	r3, r7, #20
 8004b3a:	220a      	movs	r2, #10
 8004b3c:	709a      	strb	r2, [r3, #2]
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	220a      	movs	r2, #10
 8004b44:	70da      	strb	r2, [r3, #3]
 8004b46:	f107 0314 	add.w	r3, r7, #20
 8004b4a:	222c      	movs	r2, #44	; 0x2c
 8004b4c:	711a      	strb	r2, [r3, #4]
 8004b4e:	f107 0314 	add.w	r3, r7, #20
 8004b52:	220c      	movs	r2, #12
 8004b54:	715a      	strb	r2, [r3, #5]
 8004b56:	f107 0314 	add.w	r3, r7, #20
 8004b5a:	222e      	movs	r2, #46	; 0x2e
 8004b5c:	719a      	strb	r2, [r3, #6]
 8004b5e:	f107 0314 	add.w	r3, r7, #20
 8004b62:	220b      	movs	r2, #11
 8004b64:	71da      	strb	r2, [r3, #7]
 8004b66:	f107 0314 	add.w	r3, r7, #20
 8004b6a:	225b      	movs	r2, #91	; 0x5b
 8004b6c:	721a      	strb	r2, [r3, #8]
 8004b6e:	f107 0314 	add.w	r3, r7, #20
 8004b72:	220d      	movs	r2, #13
 8004b74:	725a      	strb	r2, [r3, #9]
 8004b76:	f107 0314 	add.w	r3, r7, #20
 8004b7a:	225d      	movs	r2, #93	; 0x5d
 8004b7c:	729a      	strb	r2, [r3, #10]
 8004b7e:	f107 0314 	add.w	r3, r7, #20
 8004b82:	220e      	movs	r2, #14
 8004b84:	72da      	strb	r2, [r3, #11]
 8004b86:	f107 0314 	add.w	r3, r7, #20
 8004b8a:	227c      	movs	r2, #124	; 0x7c
 8004b8c:	731a      	strb	r2, [r3, #12]
 8004b8e:	f107 0314 	add.w	r3, r7, #20
 8004b92:	2215      	movs	r2, #21
 8004b94:	735a      	strb	r2, [r3, #13]
 8004b96:	f107 0314 	add.w	r3, r7, #20
 8004b9a:	2226      	movs	r2, #38	; 0x26
 8004b9c:	739a      	strb	r2, [r3, #14]
 8004b9e:	f107 0314 	add.w	r3, r7, #20
 8004ba2:	2216      	movs	r2, #22
 8004ba4:	73da      	strb	r2, [r3, #15]
 8004ba6:	f107 0314 	add.w	r3, r7, #20
 8004baa:	222b      	movs	r2, #43	; 0x2b
 8004bac:	741a      	strb	r2, [r3, #16]
 8004bae:	f107 0314 	add.w	r3, r7, #20
 8004bb2:	221f      	movs	r2, #31
 8004bb4:	745a      	strb	r2, [r3, #17]
 8004bb6:	f107 0314 	add.w	r3, r7, #20
 8004bba:	222d      	movs	r2, #45	; 0x2d
 8004bbc:	749a      	strb	r2, [r3, #18]
 8004bbe:	f107 0314 	add.w	r3, r7, #20
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	74da      	strb	r2, [r3, #19]
 8004bc6:	f107 0314 	add.w	r3, r7, #20
 8004bca:	222a      	movs	r2, #42	; 0x2a
 8004bcc:	751a      	strb	r2, [r3, #20]
 8004bce:	f107 0314 	add.w	r3, r7, #20
 8004bd2:	2221      	movs	r2, #33	; 0x21
 8004bd4:	755a      	strb	r2, [r3, #21]
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	222f      	movs	r2, #47	; 0x2f
 8004bdc:	759a      	strb	r2, [r3, #22]
 8004bde:	f107 0314 	add.w	r3, r7, #20
 8004be2:	2222      	movs	r2, #34	; 0x22
 8004be4:	75da      	strb	r2, [r3, #23]
 8004be6:	f107 0314 	add.w	r3, r7, #20
 8004bea:	225e      	movs	r2, #94	; 0x5e
 8004bec:	761a      	strb	r2, [r3, #24]
 8004bee:	f107 0314 	add.w	r3, r7, #20
 8004bf2:	2223      	movs	r2, #35	; 0x23
 8004bf4:	765a      	strb	r2, [r3, #25]
 8004bf6:	f107 0314 	add.w	r3, r7, #20
 8004bfa:	2225      	movs	r2, #37	; 0x25
 8004bfc:	769a      	strb	r2, [r3, #26]
 8004bfe:	f107 0314 	add.w	r3, r7, #20
 8004c02:	2224      	movs	r2, #36	; 0x24
 8004c04:	76da      	strb	r2, [r3, #27]
 8004c06:	f107 0314 	add.w	r3, r7, #20
 8004c0a:	2228      	movs	r2, #40	; 0x28
 8004c0c:	771a      	strb	r2, [r3, #28]
 8004c0e:	f107 0314 	add.w	r3, r7, #20
 8004c12:	2226      	movs	r2, #38	; 0x26
 8004c14:	775a      	strb	r2, [r3, #29]
 8004c16:	f107 0314 	add.w	r3, r7, #20
 8004c1a:	2229      	movs	r2, #41	; 0x29
 8004c1c:	779a      	strb	r2, [r3, #30]
 8004c1e:	f107 0314 	add.w	r3, r7, #20
 8004c22:	2227      	movs	r2, #39	; 0x27
 8004c24:	77da      	strb	r2, [r3, #31]
 8004c26:	f107 0314 	add.w	r3, r7, #20
 8004c2a:	2225      	movs	r2, #37	; 0x25
 8004c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004c30:	f107 030c 	add.w	r3, r7, #12
 8004c34:	f107 0214 	add.w	r2, r7, #20
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	f107 030c 	add.w	r3, r7, #12
 8004c3e:	2211      	movs	r2, #17
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fb fdbe 	bl	80007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8004c4c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004c50:	f107 020c 	add.w	r2, r7, #12
 8004c54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	ca06      	ldmia	r2, {r1, r2}
 8004c5e:	4885      	ldr	r0, [pc, #532]	; (8004e74 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8004c60:	f7fb fdca 	bl	80007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8004c64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fb fdb9 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8004c6e:	2305      	movs	r3, #5
 8004c70:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8004c74:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8004c78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c7c:	497e      	ldr	r1, [pc, #504]	; (8004e78 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fb fca6 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8004c84:	2306      	movs	r3, #6
 8004c86:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8004c8a:	f207 1263 	addw	r2, r7, #355	; 0x163
 8004c8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c92:	331c      	adds	r3, #28
 8004c94:	4979      	ldr	r1, [pc, #484]	; (8004e7c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fb fcc2 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8004c9c:	2307      	movs	r3, #7
 8004c9e:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8004ca2:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8004ca6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004caa:	3338      	adds	r3, #56	; 0x38
 8004cac:	4974      	ldr	r1, [pc, #464]	; (8004e80 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fb fcb6 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8004cba:	f207 1265 	addw	r2, r7, #357	; 0x165
 8004cbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cc2:	3354      	adds	r3, #84	; 0x54
 8004cc4:	496f      	ldr	r1, [pc, #444]	; (8004e84 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fb fc82 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8004ccc:	2309      	movs	r3, #9
 8004cce:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8004cd2:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8004cd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cda:	3370      	adds	r3, #112	; 0x70
 8004cdc:	496a      	ldr	r1, [pc, #424]	; (8004e88 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fb fcc6 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8004cea:	f207 1267 	addw	r2, r7, #359	; 0x167
 8004cee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cf2:	338c      	adds	r3, #140	; 0x8c
 8004cf4:	4965      	ldr	r1, [pc, #404]	; (8004e8c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fb fce2 	bl	80006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8004cfc:	2311      	movs	r3, #17
 8004cfe:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8004d02:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8004d06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d0a:	33a8      	adds	r3, #168	; 0xa8
 8004d0c:	4960      	ldr	r1, [pc, #384]	; (8004e90 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fb fcae 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8004d14:	2312      	movs	r3, #18
 8004d16:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8004d1a:	f207 1269 	addw	r2, r7, #361	; 0x169
 8004d1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d22:	33c4      	adds	r3, #196	; 0xc4
 8004d24:	495b      	ldr	r1, [pc, #364]	; (8004e94 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fb fc52 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8004d2c:	2313      	movs	r3, #19
 8004d2e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8004d32:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8004d36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d3a:	33e0      	adds	r3, #224	; 0xe0
 8004d3c:	4956      	ldr	r1, [pc, #344]	; (8004e98 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fb fc6e 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8004d44:	2314      	movs	r3, #20
 8004d46:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8004d4a:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8004d4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d52:	33fc      	adds	r3, #252	; 0xfc
 8004d54:	4951      	ldr	r1, [pc, #324]	; (8004e9c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fb fcda 	bl	8000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8004d5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d6a:	220a      	movs	r2, #10
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fb fdcd 	bl	8000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8004d78:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8004d7c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004d80:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	460b      	mov	r3, r1
 8004d88:	ca06      	ldmia	r2, {r1, r2}
 8004d8a:	4845      	ldr	r0, [pc, #276]	; (8004ea0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8004d8c:	f7fb fdd9 	bl	8000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8004d90:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fb fdc8 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8004d9a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8004d9e:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8004da2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004da6:	429c      	cmp	r4, r3
 8004da8:	d004      	beq.n	8004db4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8004daa:	3c1c      	subs	r4, #28
 8004dac:	4620      	mov	r0, r4
 8004dae:	f7fb fc02 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8004db2:	e7f6      	b.n	8004da2 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8004db4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	609a      	str	r2, [r3, #8]
 8004dc0:	233c      	movs	r3, #60	; 0x3c
 8004dc2:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8004dc6:	231b      	movs	r3, #27
 8004dc8:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8004dcc:	231c      	movs	r3, #28
 8004dce:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8004dd2:	233e      	movs	r3, #62	; 0x3e
 8004dd4:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8004dd8:	2319      	movs	r3, #25
 8004dda:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8004dde:	231a      	movs	r3, #26
 8004de0:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8004de4:	233d      	movs	r3, #61	; 0x3d
 8004de6:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8004dea:	2318      	movs	r3, #24
 8004dec:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8004df0:	231d      	movs	r3, #29
 8004df2:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8004df6:	2321      	movs	r3, #33	; 0x21
 8004df8:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8004dfc:	2317      	movs	r3, #23
 8004dfe:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8004e02:	231e      	movs	r3, #30
 8004e04:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8004e08:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004e0c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004e10:	2304      	movs	r3, #4
 8004e12:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004e16:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fb fdc1 	bl	80009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8004e20:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8004e24:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8004e30:	ca06      	ldmia	r2, {r1, r2}
 8004e32:	481c      	ldr	r0, [pc, #112]	; (8004ea4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8004e34:	f7fb fdcd 	bl	80009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8004e38:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fb fdbc 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8004e42:	1d3b      	adds	r3, r7, #4
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10e      	bne.n	8004e68 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8004e4a:	463b      	mov	r3, r7
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d108      	bne.n	8004e68 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8004e56:	4813      	ldr	r0, [pc, #76]	; (8004ea4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8004e58:	f7fe fa14 	bl	8003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8004e5c:	4810      	ldr	r0, [pc, #64]	; (8004ea0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8004e5e:	f7fe fa1e 	bl	800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8004e62:	4804      	ldr	r0, [pc, #16]	; (8004e74 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8004e64:	f7fe fa28 	bl	80032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8004e68:	bf00      	nop
 8004e6a:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd90      	pop	{r4, r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000240 	.word	0x20000240
 8004e78:	0800a468 	.word	0x0800a468
 8004e7c:	0800a470 	.word	0x0800a470
 8004e80:	0800a478 	.word	0x0800a478
 8004e84:	0800a480 	.word	0x0800a480
 8004e88:	0800a488 	.word	0x0800a488
 8004e8c:	0800a490 	.word	0x0800a490
 8004e90:	0800a494 	.word	0x0800a494
 8004e94:	0800a49c 	.word	0x0800a49c
 8004e98:	0800a4a4 	.word	0x0800a4a4
 8004e9c:	0800a4ac 	.word	0x0800a4ac
 8004ea0:	20000258 	.word	0x20000258
 8004ea4:	20000270 	.word	0x20000270

08004ea8 <_GLOBAL__sub_I__ZN7ProgramD2Ev>:
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004eb0:	2001      	movs	r0, #1
 8004eb2:	f7ff fe1d 	bl	8004af0 <_Z41__static_initialization_and_destruction_0ii>
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <_GLOBAL__sub_D__ZN7ProgramD2Ev>:
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	f7ff fe15 	bl	8004af0 <_Z41__static_initialization_and_destruction_0ii>
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <_Z41__static_initialization_and_destruction_0ii>:
}

Variable::~Variable()
{
	delete index;
}
 8004ec8:	b590      	push	{r4, r7, lr}
 8004eca:	b0e7      	sub	sp, #412	; 0x19c
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	6018      	str	r0, [r3, #0]
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	6019      	str	r1, [r3, #0]
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	f040 819d 	bne.w	800521a <_Z41__static_initialization_and_destruction_0ii+0x352>
 8004ee0:	463b      	mov	r3, r7
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	f040 8196 	bne.w	800521a <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8004eee:	f107 0314 	add.w	r3, r7, #20
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	2322      	movs	r3, #34	; 0x22
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	2100      	movs	r1, #0
 8004efa:	f004 fe3f 	bl	8009b7c <memset>
 8004efe:	f107 0314 	add.w	r3, r7, #20
 8004f02:	223a      	movs	r2, #58	; 0x3a
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	f107 0314 	add.w	r3, r7, #20
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	705a      	strb	r2, [r3, #1]
 8004f0e:	f107 0314 	add.w	r3, r7, #20
 8004f12:	220a      	movs	r2, #10
 8004f14:	709a      	strb	r2, [r3, #2]
 8004f16:	f107 0314 	add.w	r3, r7, #20
 8004f1a:	220a      	movs	r2, #10
 8004f1c:	70da      	strb	r2, [r3, #3]
 8004f1e:	f107 0314 	add.w	r3, r7, #20
 8004f22:	222c      	movs	r2, #44	; 0x2c
 8004f24:	711a      	strb	r2, [r3, #4]
 8004f26:	f107 0314 	add.w	r3, r7, #20
 8004f2a:	220c      	movs	r2, #12
 8004f2c:	715a      	strb	r2, [r3, #5]
 8004f2e:	f107 0314 	add.w	r3, r7, #20
 8004f32:	222e      	movs	r2, #46	; 0x2e
 8004f34:	719a      	strb	r2, [r3, #6]
 8004f36:	f107 0314 	add.w	r3, r7, #20
 8004f3a:	220b      	movs	r2, #11
 8004f3c:	71da      	strb	r2, [r3, #7]
 8004f3e:	f107 0314 	add.w	r3, r7, #20
 8004f42:	225b      	movs	r2, #91	; 0x5b
 8004f44:	721a      	strb	r2, [r3, #8]
 8004f46:	f107 0314 	add.w	r3, r7, #20
 8004f4a:	220d      	movs	r2, #13
 8004f4c:	725a      	strb	r2, [r3, #9]
 8004f4e:	f107 0314 	add.w	r3, r7, #20
 8004f52:	225d      	movs	r2, #93	; 0x5d
 8004f54:	729a      	strb	r2, [r3, #10]
 8004f56:	f107 0314 	add.w	r3, r7, #20
 8004f5a:	220e      	movs	r2, #14
 8004f5c:	72da      	strb	r2, [r3, #11]
 8004f5e:	f107 0314 	add.w	r3, r7, #20
 8004f62:	227c      	movs	r2, #124	; 0x7c
 8004f64:	731a      	strb	r2, [r3, #12]
 8004f66:	f107 0314 	add.w	r3, r7, #20
 8004f6a:	2215      	movs	r2, #21
 8004f6c:	735a      	strb	r2, [r3, #13]
 8004f6e:	f107 0314 	add.w	r3, r7, #20
 8004f72:	2226      	movs	r2, #38	; 0x26
 8004f74:	739a      	strb	r2, [r3, #14]
 8004f76:	f107 0314 	add.w	r3, r7, #20
 8004f7a:	2216      	movs	r2, #22
 8004f7c:	73da      	strb	r2, [r3, #15]
 8004f7e:	f107 0314 	add.w	r3, r7, #20
 8004f82:	222b      	movs	r2, #43	; 0x2b
 8004f84:	741a      	strb	r2, [r3, #16]
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	221f      	movs	r2, #31
 8004f8c:	745a      	strb	r2, [r3, #17]
 8004f8e:	f107 0314 	add.w	r3, r7, #20
 8004f92:	222d      	movs	r2, #45	; 0x2d
 8004f94:	749a      	strb	r2, [r3, #18]
 8004f96:	f107 0314 	add.w	r3, r7, #20
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	74da      	strb	r2, [r3, #19]
 8004f9e:	f107 0314 	add.w	r3, r7, #20
 8004fa2:	222a      	movs	r2, #42	; 0x2a
 8004fa4:	751a      	strb	r2, [r3, #20]
 8004fa6:	f107 0314 	add.w	r3, r7, #20
 8004faa:	2221      	movs	r2, #33	; 0x21
 8004fac:	755a      	strb	r2, [r3, #21]
 8004fae:	f107 0314 	add.w	r3, r7, #20
 8004fb2:	222f      	movs	r2, #47	; 0x2f
 8004fb4:	759a      	strb	r2, [r3, #22]
 8004fb6:	f107 0314 	add.w	r3, r7, #20
 8004fba:	2222      	movs	r2, #34	; 0x22
 8004fbc:	75da      	strb	r2, [r3, #23]
 8004fbe:	f107 0314 	add.w	r3, r7, #20
 8004fc2:	225e      	movs	r2, #94	; 0x5e
 8004fc4:	761a      	strb	r2, [r3, #24]
 8004fc6:	f107 0314 	add.w	r3, r7, #20
 8004fca:	2223      	movs	r2, #35	; 0x23
 8004fcc:	765a      	strb	r2, [r3, #25]
 8004fce:	f107 0314 	add.w	r3, r7, #20
 8004fd2:	2225      	movs	r2, #37	; 0x25
 8004fd4:	769a      	strb	r2, [r3, #26]
 8004fd6:	f107 0314 	add.w	r3, r7, #20
 8004fda:	2224      	movs	r2, #36	; 0x24
 8004fdc:	76da      	strb	r2, [r3, #27]
 8004fde:	f107 0314 	add.w	r3, r7, #20
 8004fe2:	2228      	movs	r2, #40	; 0x28
 8004fe4:	771a      	strb	r2, [r3, #28]
 8004fe6:	f107 0314 	add.w	r3, r7, #20
 8004fea:	2226      	movs	r2, #38	; 0x26
 8004fec:	775a      	strb	r2, [r3, #29]
 8004fee:	f107 0314 	add.w	r3, r7, #20
 8004ff2:	2229      	movs	r2, #41	; 0x29
 8004ff4:	779a      	strb	r2, [r3, #30]
 8004ff6:	f107 0314 	add.w	r3, r7, #20
 8004ffa:	2227      	movs	r2, #39	; 0x27
 8004ffc:	77da      	strb	r2, [r3, #31]
 8004ffe:	f107 0314 	add.w	r3, r7, #20
 8005002:	2225      	movs	r2, #37	; 0x25
 8005004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005008:	f107 030c 	add.w	r3, r7, #12
 800500c:	f107 0214 	add.w	r2, r7, #20
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	f107 030c 	add.w	r3, r7, #12
 8005016:	2211      	movs	r2, #17
 8005018:	605a      	str	r2, [r3, #4]
 800501a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800501e:	4618      	mov	r0, r3
 8005020:	f7fb fbd2 	bl	80007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8005024:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005028:	f107 020c 	add.w	r2, r7, #12
 800502c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	460b      	mov	r3, r1
 8005034:	ca06      	ldmia	r2, {r1, r2}
 8005036:	4885      	ldr	r0, [pc, #532]	; (800524c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8005038:	f7fb fbde 	bl	80007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800503c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005040:	4618      	mov	r0, r3
 8005042:	f7fb fbcd 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8005046:	2305      	movs	r3, #5
 8005048:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 800504c:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8005050:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005054:	497e      	ldr	r1, [pc, #504]	; (8005250 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8005056:	4618      	mov	r0, r3
 8005058:	f7fb faba 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 800505c:	2306      	movs	r3, #6
 800505e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8005062:	f207 1263 	addw	r2, r7, #355	; 0x163
 8005066:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800506a:	331c      	adds	r3, #28
 800506c:	4979      	ldr	r1, [pc, #484]	; (8005254 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800506e:	4618      	mov	r0, r3
 8005070:	f7fb fad6 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8005074:	2307      	movs	r3, #7
 8005076:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 800507a:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800507e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005082:	3338      	adds	r3, #56	; 0x38
 8005084:	4974      	ldr	r1, [pc, #464]	; (8005258 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8005086:	4618      	mov	r0, r3
 8005088:	f7fb faca 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 800508c:	2308      	movs	r3, #8
 800508e:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8005092:	f207 1265 	addw	r2, r7, #357	; 0x165
 8005096:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800509a:	3354      	adds	r3, #84	; 0x54
 800509c:	496f      	ldr	r1, [pc, #444]	; (800525c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fb fa96 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 80050a4:	2309      	movs	r3, #9
 80050a6:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 80050aa:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 80050ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050b2:	3370      	adds	r3, #112	; 0x70
 80050b4:	496a      	ldr	r1, [pc, #424]	; (8005260 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fb fada 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 80050bc:	2310      	movs	r3, #16
 80050be:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 80050c2:	f207 1267 	addw	r2, r7, #359	; 0x167
 80050c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050ca:	338c      	adds	r3, #140	; 0x8c
 80050cc:	4965      	ldr	r1, [pc, #404]	; (8005264 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fb faf6 	bl	80006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 80050d4:	2311      	movs	r3, #17
 80050d6:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 80050da:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80050de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050e2:	33a8      	adds	r3, #168	; 0xa8
 80050e4:	4960      	ldr	r1, [pc, #384]	; (8005268 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fb fac2 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 80050ec:	2312      	movs	r3, #18
 80050ee:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 80050f2:	f207 1269 	addw	r2, r7, #361	; 0x169
 80050f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050fa:	33c4      	adds	r3, #196	; 0xc4
 80050fc:	495b      	ldr	r1, [pc, #364]	; (800526c <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fb fa66 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8005104:	2313      	movs	r3, #19
 8005106:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800510a:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800510e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005112:	33e0      	adds	r3, #224	; 0xe0
 8005114:	4956      	ldr	r1, [pc, #344]	; (8005270 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8005116:	4618      	mov	r0, r3
 8005118:	f7fb fa82 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 800511c:	2314      	movs	r3, #20
 800511e:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8005122:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8005126:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800512a:	33fc      	adds	r3, #252	; 0xfc
 800512c:	4951      	ldr	r1, [pc, #324]	; (8005274 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800512e:	4618      	mov	r0, r3
 8005130:	f7fb faee 	bl	8000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8005134:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005138:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005142:	220a      	movs	r2, #10
 8005144:	605a      	str	r2, [r3, #4]
 8005146:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800514a:	4618      	mov	r0, r3
 800514c:	f7fb fbe1 	bl	8000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8005150:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8005154:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005158:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	460b      	mov	r3, r1
 8005160:	ca06      	ldmia	r2, {r1, r2}
 8005162:	4845      	ldr	r0, [pc, #276]	; (8005278 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8005164:	f7fb fbed 	bl	8000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8005168:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800516c:	4618      	mov	r0, r3
 800516e:	f7fb fbdc 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8005172:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8005176:	f504 748c 	add.w	r4, r4, #280	; 0x118
 800517a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800517e:	429c      	cmp	r4, r3
 8005180:	d004      	beq.n	800518c <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8005182:	3c1c      	subs	r4, #28
 8005184:	4620      	mov	r0, r4
 8005186:	f7fb fa16 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 800518a:	e7f6      	b.n	800517a <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 800518c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	605a      	str	r2, [r3, #4]
 8005196:	609a      	str	r2, [r3, #8]
 8005198:	233c      	movs	r3, #60	; 0x3c
 800519a:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 800519e:	231b      	movs	r3, #27
 80051a0:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80051a4:	231c      	movs	r3, #28
 80051a6:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80051aa:	233e      	movs	r3, #62	; 0x3e
 80051ac:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80051b0:	2319      	movs	r3, #25
 80051b2:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 80051b6:	231a      	movs	r3, #26
 80051b8:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 80051bc:	233d      	movs	r3, #61	; 0x3d
 80051be:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 80051c2:	2318      	movs	r3, #24
 80051c4:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 80051c8:	231d      	movs	r3, #29
 80051ca:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80051ce:	2321      	movs	r3, #33	; 0x21
 80051d0:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80051d4:	2317      	movs	r3, #23
 80051d6:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80051da:	231e      	movs	r3, #30
 80051dc:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80051e0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80051e4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80051e8:	2304      	movs	r3, #4
 80051ea:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80051ee:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fb fbd5 	bl	80009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 80051f8:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80051fc:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	4613      	mov	r3, r2
 8005204:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8005208:	ca06      	ldmia	r2, {r1, r2}
 800520a:	481c      	ldr	r0, [pc, #112]	; (800527c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800520c:	f7fb fbe1 	bl	80009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8005210:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005214:	4618      	mov	r0, r3
 8005216:	f7fb fbd0 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 800521a:	1d3b      	adds	r3, r7, #4
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10e      	bne.n	8005240 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8005222:	463b      	mov	r3, r7
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800522a:	4293      	cmp	r3, r2
 800522c:	d108      	bne.n	8005240 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800522e:	4813      	ldr	r0, [pc, #76]	; (800527c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8005230:	f7fe f828 	bl	8003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8005234:	4810      	ldr	r0, [pc, #64]	; (8005278 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8005236:	f7fe f832 	bl	800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800523a:	4804      	ldr	r0, [pc, #16]	; (800524c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800523c:	f7fe f83c 	bl	80032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8005240:	bf00      	nop
 8005242:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8005246:	46bd      	mov	sp, r7
 8005248:	bd90      	pop	{r4, r7, pc}
 800524a:	bf00      	nop
 800524c:	20000288 	.word	0x20000288
 8005250:	0800a4f0 	.word	0x0800a4f0
 8005254:	0800a4f8 	.word	0x0800a4f8
 8005258:	0800a500 	.word	0x0800a500
 800525c:	0800a508 	.word	0x0800a508
 8005260:	0800a510 	.word	0x0800a510
 8005264:	0800a518 	.word	0x0800a518
 8005268:	0800a51c 	.word	0x0800a51c
 800526c:	0800a524 	.word	0x0800a524
 8005270:	0800a52c 	.word	0x0800a52c
 8005274:	0800a534 	.word	0x0800a534
 8005278:	200002a0 	.word	0x200002a0
 800527c:	200002b8 	.word	0x200002b8

08005280 <_GLOBAL__sub_I__ZN4BodyD2Ev>:
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
 8005284:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005288:	2001      	movs	r0, #1
 800528a:	f7ff fe1d 	bl	8004ec8 <_Z41__static_initialization_and_destruction_0ii>
 800528e:	bd80      	pop	{r7, pc}

08005290 <_GLOBAL__sub_D__ZN4BodyD2Ev>:
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
 8005294:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005298:	2000      	movs	r0, #0
 800529a:	f7ff fe15 	bl	8004ec8 <_Z41__static_initialization_and_destruction_0ii>
 800529e:	bd80      	pop	{r7, pc}

080052a0 <__tcf_0>:
	}
}

void Transmitter::send_result(bool fin)
{
	static std::string res;
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	4801      	ldr	r0, [pc, #4]	; (80052ac <__tcf_0+0xc>)
 80052a6:	f004 fb29 	bl	80098fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000318 	.word	0x20000318

080052b0 <_ZN11Transmitter11send_resultEb>:
{
 80052b0:	b590      	push	{r4, r7, lr}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	71fb      	strb	r3, [r7, #7]
	static std::string res;
 80052ba:	4b1f      	ldr	r3, [pc, #124]	; (8005338 <_ZN11Transmitter11send_resultEb+0x88>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	f3bf 8f5b 	dmb	ish
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf0c      	ite	eq
 80052cc:	2301      	moveq	r3, #1
 80052ce:	2300      	movne	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d013      	beq.n	80052fe <_ZN11Transmitter11send_resultEb+0x4e>
 80052d6:	4818      	ldr	r0, [pc, #96]	; (8005338 <_ZN11Transmitter11send_resultEb+0x88>)
 80052d8:	f004 f979 	bl	80095ce <__cxa_guard_acquire>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	bf14      	ite	ne
 80052e2:	2301      	movne	r3, #1
 80052e4:	2300      	moveq	r3, #0
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <_ZN11Transmitter11send_resultEb+0x4e>
 80052ec:	4813      	ldr	r0, [pc, #76]	; (800533c <_ZN11Transmitter11send_resultEb+0x8c>)
 80052ee:	f004 fafe 	bl	80098ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80052f2:	4811      	ldr	r0, [pc, #68]	; (8005338 <_ZN11Transmitter11send_resultEb+0x88>)
 80052f4:	f004 f977 	bl	80095e6 <__cxa_guard_release>
 80052f8:	4811      	ldr	r0, [pc, #68]	; (8005340 <_ZN11Transmitter11send_resultEb+0x90>)
 80052fa:	f004 fbc8 	bl	8009a8e <atexit>
    res = "x=12.2;y=56;P=2;I=1;D=0.05;\n";
 80052fe:	4911      	ldr	r1, [pc, #68]	; (8005344 <_ZN11Transmitter11send_resultEb+0x94>)
 8005300:	480e      	ldr	r0, [pc, #56]	; (800533c <_ZN11Transmitter11send_resultEb+0x8c>)
 8005302:	f004 fb90 	bl	8009a26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
    if(fin)
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <_ZN11Transmitter11send_resultEb+0x64>
    {
    	res = "fin\n";
 800530c:	490e      	ldr	r1, [pc, #56]	; (8005348 <_ZN11Transmitter11send_resultEb+0x98>)
 800530e:	480b      	ldr	r0, [pc, #44]	; (800533c <_ZN11Transmitter11send_resultEb+0x8c>)
 8005310:	f004 fb89 	bl	8009a26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
    }
	HAL_UART_Transmit(&huart1, (uint8_t*)res.c_str(), res.length(), 100);
 8005314:	4809      	ldr	r0, [pc, #36]	; (800533c <_ZN11Transmitter11send_resultEb+0x8c>)
 8005316:	f004 fb8a 	bl	8009a2e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800531a:	4604      	mov	r4, r0
 800531c:	4807      	ldr	r0, [pc, #28]	; (800533c <_ZN11Transmitter11send_resultEb+0x8c>)
 800531e:	f004 faf3 	bl	8009908 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005322:	4603      	mov	r3, r0
 8005324:	b29a      	uxth	r2, r3
 8005326:	2364      	movs	r3, #100	; 0x64
 8005328:	4621      	mov	r1, r4
 800532a:	4808      	ldr	r0, [pc, #32]	; (800534c <_ZN11Transmitter11send_resultEb+0x9c>)
 800532c:	f003 fa9c 	bl	8008868 <HAL_UART_Transmit>
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	bd90      	pop	{r4, r7, pc}
 8005338:	20000330 	.word	0x20000330
 800533c:	20000318 	.word	0x20000318
 8005340:	080052a1 	.word	0x080052a1
 8005344:	0800a55c 	.word	0x0800a55c
 8005348:	0800a57c 	.word	0x0800a57c
 800534c:	2000040c 	.word	0x2000040c

08005350 <_Z41__static_initialization_and_destruction_0ii>:
 8005350:	b590      	push	{r4, r7, lr}
 8005352:	b0e7      	sub	sp, #412	; 0x19c
 8005354:	af02      	add	r7, sp, #8
 8005356:	1d3b      	adds	r3, r7, #4
 8005358:	6018      	str	r0, [r3, #0]
 800535a:	463b      	mov	r3, r7
 800535c:	6019      	str	r1, [r3, #0]
 800535e:	1d3b      	adds	r3, r7, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b01      	cmp	r3, #1
 8005364:	f040 819d 	bne.w	80056a2 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8005368:	463b      	mov	r3, r7
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005370:	4293      	cmp	r3, r2
 8005372:	f040 8196 	bne.w	80056a2 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8005376:	f107 0314 	add.w	r3, r7, #20
 800537a:	4618      	mov	r0, r3
 800537c:	2322      	movs	r3, #34	; 0x22
 800537e:	461a      	mov	r2, r3
 8005380:	2100      	movs	r1, #0
 8005382:	f004 fbfb 	bl	8009b7c <memset>
 8005386:	f107 0314 	add.w	r3, r7, #20
 800538a:	223a      	movs	r2, #58	; 0x3a
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	f107 0314 	add.w	r3, r7, #20
 8005392:	2201      	movs	r2, #1
 8005394:	705a      	strb	r2, [r3, #1]
 8005396:	f107 0314 	add.w	r3, r7, #20
 800539a:	220a      	movs	r2, #10
 800539c:	709a      	strb	r2, [r3, #2]
 800539e:	f107 0314 	add.w	r3, r7, #20
 80053a2:	220a      	movs	r2, #10
 80053a4:	70da      	strb	r2, [r3, #3]
 80053a6:	f107 0314 	add.w	r3, r7, #20
 80053aa:	222c      	movs	r2, #44	; 0x2c
 80053ac:	711a      	strb	r2, [r3, #4]
 80053ae:	f107 0314 	add.w	r3, r7, #20
 80053b2:	220c      	movs	r2, #12
 80053b4:	715a      	strb	r2, [r3, #5]
 80053b6:	f107 0314 	add.w	r3, r7, #20
 80053ba:	222e      	movs	r2, #46	; 0x2e
 80053bc:	719a      	strb	r2, [r3, #6]
 80053be:	f107 0314 	add.w	r3, r7, #20
 80053c2:	220b      	movs	r2, #11
 80053c4:	71da      	strb	r2, [r3, #7]
 80053c6:	f107 0314 	add.w	r3, r7, #20
 80053ca:	225b      	movs	r2, #91	; 0x5b
 80053cc:	721a      	strb	r2, [r3, #8]
 80053ce:	f107 0314 	add.w	r3, r7, #20
 80053d2:	220d      	movs	r2, #13
 80053d4:	725a      	strb	r2, [r3, #9]
 80053d6:	f107 0314 	add.w	r3, r7, #20
 80053da:	225d      	movs	r2, #93	; 0x5d
 80053dc:	729a      	strb	r2, [r3, #10]
 80053de:	f107 0314 	add.w	r3, r7, #20
 80053e2:	220e      	movs	r2, #14
 80053e4:	72da      	strb	r2, [r3, #11]
 80053e6:	f107 0314 	add.w	r3, r7, #20
 80053ea:	227c      	movs	r2, #124	; 0x7c
 80053ec:	731a      	strb	r2, [r3, #12]
 80053ee:	f107 0314 	add.w	r3, r7, #20
 80053f2:	2215      	movs	r2, #21
 80053f4:	735a      	strb	r2, [r3, #13]
 80053f6:	f107 0314 	add.w	r3, r7, #20
 80053fa:	2226      	movs	r2, #38	; 0x26
 80053fc:	739a      	strb	r2, [r3, #14]
 80053fe:	f107 0314 	add.w	r3, r7, #20
 8005402:	2216      	movs	r2, #22
 8005404:	73da      	strb	r2, [r3, #15]
 8005406:	f107 0314 	add.w	r3, r7, #20
 800540a:	222b      	movs	r2, #43	; 0x2b
 800540c:	741a      	strb	r2, [r3, #16]
 800540e:	f107 0314 	add.w	r3, r7, #20
 8005412:	221f      	movs	r2, #31
 8005414:	745a      	strb	r2, [r3, #17]
 8005416:	f107 0314 	add.w	r3, r7, #20
 800541a:	222d      	movs	r2, #45	; 0x2d
 800541c:	749a      	strb	r2, [r3, #18]
 800541e:	f107 0314 	add.w	r3, r7, #20
 8005422:	2220      	movs	r2, #32
 8005424:	74da      	strb	r2, [r3, #19]
 8005426:	f107 0314 	add.w	r3, r7, #20
 800542a:	222a      	movs	r2, #42	; 0x2a
 800542c:	751a      	strb	r2, [r3, #20]
 800542e:	f107 0314 	add.w	r3, r7, #20
 8005432:	2221      	movs	r2, #33	; 0x21
 8005434:	755a      	strb	r2, [r3, #21]
 8005436:	f107 0314 	add.w	r3, r7, #20
 800543a:	222f      	movs	r2, #47	; 0x2f
 800543c:	759a      	strb	r2, [r3, #22]
 800543e:	f107 0314 	add.w	r3, r7, #20
 8005442:	2222      	movs	r2, #34	; 0x22
 8005444:	75da      	strb	r2, [r3, #23]
 8005446:	f107 0314 	add.w	r3, r7, #20
 800544a:	225e      	movs	r2, #94	; 0x5e
 800544c:	761a      	strb	r2, [r3, #24]
 800544e:	f107 0314 	add.w	r3, r7, #20
 8005452:	2223      	movs	r2, #35	; 0x23
 8005454:	765a      	strb	r2, [r3, #25]
 8005456:	f107 0314 	add.w	r3, r7, #20
 800545a:	2225      	movs	r2, #37	; 0x25
 800545c:	769a      	strb	r2, [r3, #26]
 800545e:	f107 0314 	add.w	r3, r7, #20
 8005462:	2224      	movs	r2, #36	; 0x24
 8005464:	76da      	strb	r2, [r3, #27]
 8005466:	f107 0314 	add.w	r3, r7, #20
 800546a:	2228      	movs	r2, #40	; 0x28
 800546c:	771a      	strb	r2, [r3, #28]
 800546e:	f107 0314 	add.w	r3, r7, #20
 8005472:	2226      	movs	r2, #38	; 0x26
 8005474:	775a      	strb	r2, [r3, #29]
 8005476:	f107 0314 	add.w	r3, r7, #20
 800547a:	2229      	movs	r2, #41	; 0x29
 800547c:	779a      	strb	r2, [r3, #30]
 800547e:	f107 0314 	add.w	r3, r7, #20
 8005482:	2227      	movs	r2, #39	; 0x27
 8005484:	77da      	strb	r2, [r3, #31]
 8005486:	f107 0314 	add.w	r3, r7, #20
 800548a:	2225      	movs	r2, #37	; 0x25
 800548c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005490:	f107 030c 	add.w	r3, r7, #12
 8005494:	f107 0214 	add.w	r2, r7, #20
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	f107 030c 	add.w	r3, r7, #12
 800549e:	2211      	movs	r2, #17
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fb f98e 	bl	80007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 80054ac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80054b0:	f107 020c 	add.w	r2, r7, #12
 80054b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	460b      	mov	r3, r1
 80054bc:	ca06      	ldmia	r2, {r1, r2}
 80054be:	4885      	ldr	r0, [pc, #532]	; (80056d4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80054c0:	f7fb f99a 	bl	80007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80054c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fb f989 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 80054ce:	2305      	movs	r3, #5
 80054d0:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80054d4:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80054d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80054dc:	497e      	ldr	r1, [pc, #504]	; (80056d8 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fb f876 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80054e4:	2306      	movs	r3, #6
 80054e6:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80054ea:	f207 1263 	addw	r2, r7, #355	; 0x163
 80054ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80054f2:	331c      	adds	r3, #28
 80054f4:	4979      	ldr	r1, [pc, #484]	; (80056dc <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fb f892 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80054fc:	2307      	movs	r3, #7
 80054fe:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8005502:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8005506:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800550a:	3338      	adds	r3, #56	; 0x38
 800550c:	4974      	ldr	r1, [pc, #464]	; (80056e0 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800550e:	4618      	mov	r0, r3
 8005510:	f7fb f886 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8005514:	2308      	movs	r3, #8
 8005516:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 800551a:	f207 1265 	addw	r2, r7, #357	; 0x165
 800551e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005522:	3354      	adds	r3, #84	; 0x54
 8005524:	496f      	ldr	r1, [pc, #444]	; (80056e4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8005526:	4618      	mov	r0, r3
 8005528:	f7fb f852 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 800552c:	2309      	movs	r3, #9
 800552e:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8005532:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8005536:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800553a:	3370      	adds	r3, #112	; 0x70
 800553c:	496a      	ldr	r1, [pc, #424]	; (80056e8 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800553e:	4618      	mov	r0, r3
 8005540:	f7fb f896 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8005544:	2310      	movs	r3, #16
 8005546:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 800554a:	f207 1267 	addw	r2, r7, #359	; 0x167
 800554e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005552:	338c      	adds	r3, #140	; 0x8c
 8005554:	4965      	ldr	r1, [pc, #404]	; (80056ec <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8005556:	4618      	mov	r0, r3
 8005558:	f7fb f8b2 	bl	80006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 800555c:	2311      	movs	r3, #17
 800555e:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8005562:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005566:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800556a:	33a8      	adds	r3, #168	; 0xa8
 800556c:	4960      	ldr	r1, [pc, #384]	; (80056f0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800556e:	4618      	mov	r0, r3
 8005570:	f7fb f87e 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8005574:	2312      	movs	r3, #18
 8005576:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 800557a:	f207 1269 	addw	r2, r7, #361	; 0x169
 800557e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005582:	33c4      	adds	r3, #196	; 0xc4
 8005584:	495b      	ldr	r1, [pc, #364]	; (80056f4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8005586:	4618      	mov	r0, r3
 8005588:	f7fb f822 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 800558c:	2313      	movs	r3, #19
 800558e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8005592:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8005596:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800559a:	33e0      	adds	r3, #224	; 0xe0
 800559c:	4956      	ldr	r1, [pc, #344]	; (80056f8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fb f83e 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 80055a4:	2314      	movs	r3, #20
 80055a6:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 80055aa:	f207 126b 	addw	r2, r7, #363	; 0x16b
 80055ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80055b2:	33fc      	adds	r3, #252	; 0xfc
 80055b4:	4951      	ldr	r1, [pc, #324]	; (80056fc <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fb f8aa 	bl	8000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 80055bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055ca:	220a      	movs	r2, #10
 80055cc:	605a      	str	r2, [r3, #4]
 80055ce:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fb f99d 	bl	8000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80055d8:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80055dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80055e0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	460b      	mov	r3, r1
 80055e8:	ca06      	ldmia	r2, {r1, r2}
 80055ea:	4845      	ldr	r0, [pc, #276]	; (8005700 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80055ec:	f7fb f9a9 	bl	8000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80055f0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fb f998 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80055fa:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80055fe:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8005602:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005606:	429c      	cmp	r4, r3
 8005608:	d004      	beq.n	8005614 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 800560a:	3c1c      	subs	r4, #28
 800560c:	4620      	mov	r0, r4
 800560e:	f7fa ffd2 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8005612:	e7f6      	b.n	8005602 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8005614:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	605a      	str	r2, [r3, #4]
 800561e:	609a      	str	r2, [r3, #8]
 8005620:	233c      	movs	r3, #60	; 0x3c
 8005622:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8005626:	231b      	movs	r3, #27
 8005628:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 800562c:	231c      	movs	r3, #28
 800562e:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8005632:	233e      	movs	r3, #62	; 0x3e
 8005634:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8005638:	2319      	movs	r3, #25
 800563a:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800563e:	231a      	movs	r3, #26
 8005640:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8005644:	233d      	movs	r3, #61	; 0x3d
 8005646:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 800564a:	2318      	movs	r3, #24
 800564c:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8005650:	231d      	movs	r3, #29
 8005652:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8005656:	2321      	movs	r3, #33	; 0x21
 8005658:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 800565c:	2317      	movs	r3, #23
 800565e:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8005662:	231e      	movs	r3, #30
 8005664:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8005668:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800566c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005670:	2304      	movs	r3, #4
 8005672:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005676:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800567a:	4618      	mov	r0, r3
 800567c:	f7fb f991 	bl	80009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8005680:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8005684:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	4613      	mov	r3, r2
 800568c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8005690:	ca06      	ldmia	r2, {r1, r2}
 8005692:	481c      	ldr	r0, [pc, #112]	; (8005704 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8005694:	f7fb f99d 	bl	80009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8005698:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800569c:	4618      	mov	r0, r3
 800569e:	f7fb f98c 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 80056a2:	1d3b      	adds	r3, r7, #4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10e      	bne.n	80056c8 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80056aa:	463b      	mov	r3, r7
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d108      	bne.n	80056c8 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80056b6:	4813      	ldr	r0, [pc, #76]	; (8005704 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80056b8:	f7fd fde4 	bl	8003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 80056bc:	4810      	ldr	r0, [pc, #64]	; (8005700 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80056be:	f7fd fdee 	bl	800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 80056c2:	4804      	ldr	r0, [pc, #16]	; (80056d4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80056c4:	f7fd fdf8 	bl	80032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80056c8:	bf00      	nop
 80056ca:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd90      	pop	{r4, r7, pc}
 80056d2:	bf00      	nop
 80056d4:	200002d0 	.word	0x200002d0
 80056d8:	0800a5b0 	.word	0x0800a5b0
 80056dc:	0800a5b8 	.word	0x0800a5b8
 80056e0:	0800a5c0 	.word	0x0800a5c0
 80056e4:	0800a5c8 	.word	0x0800a5c8
 80056e8:	0800a5d0 	.word	0x0800a5d0
 80056ec:	0800a5d8 	.word	0x0800a5d8
 80056f0:	0800a5dc 	.word	0x0800a5dc
 80056f4:	0800a5e4 	.word	0x0800a5e4
 80056f8:	0800a5ec 	.word	0x0800a5ec
 80056fc:	0800a5f4 	.word	0x0800a5f4
 8005700:	200002e8 	.word	0x200002e8
 8005704:	20000300 	.word	0x20000300

08005708 <_GLOBAL__sub_I__ZN11Transmitter13get_rx_bufferEv>:
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
 800570c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005710:	2001      	movs	r0, #1
 8005712:	f7ff fe1d 	bl	8005350 <_Z41__static_initialization_and_destruction_0ii>
 8005716:	bd80      	pop	{r7, pc}

08005718 <_GLOBAL__sub_D__ZN11Transmitter13get_rx_bufferEv>:
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
 800571c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005720:	2000      	movs	r0, #0
 8005722:	f7ff fe15 	bl	8005350 <_Z41__static_initialization_and_destruction_0ii>
 8005726:	bd80      	pop	{r7, pc}

08005728 <_Z41__static_initialization_and_destruction_0ii>:
		return get_par(var.id);
	case VARIABLE_LOCAL:
		break;
	}
	return get_local(var.id);
}
 8005728:	b590      	push	{r4, r7, lr}
 800572a:	b0e7      	sub	sp, #412	; 0x19c
 800572c:	af02      	add	r7, sp, #8
 800572e:	1d3b      	adds	r3, r7, #4
 8005730:	6018      	str	r0, [r3, #0]
 8005732:	463b      	mov	r3, r7
 8005734:	6019      	str	r1, [r3, #0]
 8005736:	1d3b      	adds	r3, r7, #4
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b01      	cmp	r3, #1
 800573c:	f040 819d 	bne.w	8005a7a <_Z41__static_initialization_and_destruction_0ii+0x352>
 8005740:	463b      	mov	r3, r7
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005748:	4293      	cmp	r3, r2
 800574a:	f040 8196 	bne.w	8005a7a <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 800574e:	f107 0314 	add.w	r3, r7, #20
 8005752:	4618      	mov	r0, r3
 8005754:	2322      	movs	r3, #34	; 0x22
 8005756:	461a      	mov	r2, r3
 8005758:	2100      	movs	r1, #0
 800575a:	f004 fa0f 	bl	8009b7c <memset>
 800575e:	f107 0314 	add.w	r3, r7, #20
 8005762:	223a      	movs	r2, #58	; 0x3a
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	f107 0314 	add.w	r3, r7, #20
 800576a:	2201      	movs	r2, #1
 800576c:	705a      	strb	r2, [r3, #1]
 800576e:	f107 0314 	add.w	r3, r7, #20
 8005772:	220a      	movs	r2, #10
 8005774:	709a      	strb	r2, [r3, #2]
 8005776:	f107 0314 	add.w	r3, r7, #20
 800577a:	220a      	movs	r2, #10
 800577c:	70da      	strb	r2, [r3, #3]
 800577e:	f107 0314 	add.w	r3, r7, #20
 8005782:	222c      	movs	r2, #44	; 0x2c
 8005784:	711a      	strb	r2, [r3, #4]
 8005786:	f107 0314 	add.w	r3, r7, #20
 800578a:	220c      	movs	r2, #12
 800578c:	715a      	strb	r2, [r3, #5]
 800578e:	f107 0314 	add.w	r3, r7, #20
 8005792:	222e      	movs	r2, #46	; 0x2e
 8005794:	719a      	strb	r2, [r3, #6]
 8005796:	f107 0314 	add.w	r3, r7, #20
 800579a:	220b      	movs	r2, #11
 800579c:	71da      	strb	r2, [r3, #7]
 800579e:	f107 0314 	add.w	r3, r7, #20
 80057a2:	225b      	movs	r2, #91	; 0x5b
 80057a4:	721a      	strb	r2, [r3, #8]
 80057a6:	f107 0314 	add.w	r3, r7, #20
 80057aa:	220d      	movs	r2, #13
 80057ac:	725a      	strb	r2, [r3, #9]
 80057ae:	f107 0314 	add.w	r3, r7, #20
 80057b2:	225d      	movs	r2, #93	; 0x5d
 80057b4:	729a      	strb	r2, [r3, #10]
 80057b6:	f107 0314 	add.w	r3, r7, #20
 80057ba:	220e      	movs	r2, #14
 80057bc:	72da      	strb	r2, [r3, #11]
 80057be:	f107 0314 	add.w	r3, r7, #20
 80057c2:	227c      	movs	r2, #124	; 0x7c
 80057c4:	731a      	strb	r2, [r3, #12]
 80057c6:	f107 0314 	add.w	r3, r7, #20
 80057ca:	2215      	movs	r2, #21
 80057cc:	735a      	strb	r2, [r3, #13]
 80057ce:	f107 0314 	add.w	r3, r7, #20
 80057d2:	2226      	movs	r2, #38	; 0x26
 80057d4:	739a      	strb	r2, [r3, #14]
 80057d6:	f107 0314 	add.w	r3, r7, #20
 80057da:	2216      	movs	r2, #22
 80057dc:	73da      	strb	r2, [r3, #15]
 80057de:	f107 0314 	add.w	r3, r7, #20
 80057e2:	222b      	movs	r2, #43	; 0x2b
 80057e4:	741a      	strb	r2, [r3, #16]
 80057e6:	f107 0314 	add.w	r3, r7, #20
 80057ea:	221f      	movs	r2, #31
 80057ec:	745a      	strb	r2, [r3, #17]
 80057ee:	f107 0314 	add.w	r3, r7, #20
 80057f2:	222d      	movs	r2, #45	; 0x2d
 80057f4:	749a      	strb	r2, [r3, #18]
 80057f6:	f107 0314 	add.w	r3, r7, #20
 80057fa:	2220      	movs	r2, #32
 80057fc:	74da      	strb	r2, [r3, #19]
 80057fe:	f107 0314 	add.w	r3, r7, #20
 8005802:	222a      	movs	r2, #42	; 0x2a
 8005804:	751a      	strb	r2, [r3, #20]
 8005806:	f107 0314 	add.w	r3, r7, #20
 800580a:	2221      	movs	r2, #33	; 0x21
 800580c:	755a      	strb	r2, [r3, #21]
 800580e:	f107 0314 	add.w	r3, r7, #20
 8005812:	222f      	movs	r2, #47	; 0x2f
 8005814:	759a      	strb	r2, [r3, #22]
 8005816:	f107 0314 	add.w	r3, r7, #20
 800581a:	2222      	movs	r2, #34	; 0x22
 800581c:	75da      	strb	r2, [r3, #23]
 800581e:	f107 0314 	add.w	r3, r7, #20
 8005822:	225e      	movs	r2, #94	; 0x5e
 8005824:	761a      	strb	r2, [r3, #24]
 8005826:	f107 0314 	add.w	r3, r7, #20
 800582a:	2223      	movs	r2, #35	; 0x23
 800582c:	765a      	strb	r2, [r3, #25]
 800582e:	f107 0314 	add.w	r3, r7, #20
 8005832:	2225      	movs	r2, #37	; 0x25
 8005834:	769a      	strb	r2, [r3, #26]
 8005836:	f107 0314 	add.w	r3, r7, #20
 800583a:	2224      	movs	r2, #36	; 0x24
 800583c:	76da      	strb	r2, [r3, #27]
 800583e:	f107 0314 	add.w	r3, r7, #20
 8005842:	2228      	movs	r2, #40	; 0x28
 8005844:	771a      	strb	r2, [r3, #28]
 8005846:	f107 0314 	add.w	r3, r7, #20
 800584a:	2226      	movs	r2, #38	; 0x26
 800584c:	775a      	strb	r2, [r3, #29]
 800584e:	f107 0314 	add.w	r3, r7, #20
 8005852:	2229      	movs	r2, #41	; 0x29
 8005854:	779a      	strb	r2, [r3, #30]
 8005856:	f107 0314 	add.w	r3, r7, #20
 800585a:	2227      	movs	r2, #39	; 0x27
 800585c:	77da      	strb	r2, [r3, #31]
 800585e:	f107 0314 	add.w	r3, r7, #20
 8005862:	2225      	movs	r2, #37	; 0x25
 8005864:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005868:	f107 030c 	add.w	r3, r7, #12
 800586c:	f107 0214 	add.w	r2, r7, #20
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	f107 030c 	add.w	r3, r7, #12
 8005876:	2211      	movs	r2, #17
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800587e:	4618      	mov	r0, r3
 8005880:	f7fa ffa2 	bl	80007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8005884:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005888:	f107 020c 	add.w	r2, r7, #12
 800588c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	460b      	mov	r3, r1
 8005894:	ca06      	ldmia	r2, {r1, r2}
 8005896:	4885      	ldr	r0, [pc, #532]	; (8005aac <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8005898:	f7fa ffae 	bl	80007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800589c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fa ff9d 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 80058a6:	2305      	movs	r3, #5
 80058a8:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80058ac:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80058b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058b4:	497e      	ldr	r1, [pc, #504]	; (8005ab0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fa fe8a 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80058bc:	2306      	movs	r3, #6
 80058be:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80058c2:	f207 1263 	addw	r2, r7, #355	; 0x163
 80058c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058ca:	331c      	adds	r3, #28
 80058cc:	4979      	ldr	r1, [pc, #484]	; (8005ab4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fa fea6 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80058d4:	2307      	movs	r3, #7
 80058d6:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80058da:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80058de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058e2:	3338      	adds	r3, #56	; 0x38
 80058e4:	4974      	ldr	r1, [pc, #464]	; (8005ab8 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fa fe9a 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80058ec:	2308      	movs	r3, #8
 80058ee:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80058f2:	f207 1265 	addw	r2, r7, #357	; 0x165
 80058f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058fa:	3354      	adds	r3, #84	; 0x54
 80058fc:	496f      	ldr	r1, [pc, #444]	; (8005abc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fa fe66 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8005904:	2309      	movs	r3, #9
 8005906:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800590a:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 800590e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005912:	3370      	adds	r3, #112	; 0x70
 8005914:	496a      	ldr	r1, [pc, #424]	; (8005ac0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8005916:	4618      	mov	r0, r3
 8005918:	f7fa feaa 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 800591c:	2310      	movs	r3, #16
 800591e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8005922:	f207 1267 	addw	r2, r7, #359	; 0x167
 8005926:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800592a:	338c      	adds	r3, #140	; 0x8c
 800592c:	4965      	ldr	r1, [pc, #404]	; (8005ac4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800592e:	4618      	mov	r0, r3
 8005930:	f7fa fec6 	bl	80006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8005934:	2311      	movs	r3, #17
 8005936:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800593a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800593e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005942:	33a8      	adds	r3, #168	; 0xa8
 8005944:	4960      	ldr	r1, [pc, #384]	; (8005ac8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8005946:	4618      	mov	r0, r3
 8005948:	f7fa fe92 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 800594c:	2312      	movs	r3, #18
 800594e:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8005952:	f207 1269 	addw	r2, r7, #361	; 0x169
 8005956:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800595a:	33c4      	adds	r3, #196	; 0xc4
 800595c:	495b      	ldr	r1, [pc, #364]	; (8005acc <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800595e:	4618      	mov	r0, r3
 8005960:	f7fa fe36 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8005964:	2313      	movs	r3, #19
 8005966:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800596a:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800596e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005972:	33e0      	adds	r3, #224	; 0xe0
 8005974:	4956      	ldr	r1, [pc, #344]	; (8005ad0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8005976:	4618      	mov	r0, r3
 8005978:	f7fa fe52 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 800597c:	2314      	movs	r3, #20
 800597e:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8005982:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8005986:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800598a:	33fc      	adds	r3, #252	; 0xfc
 800598c:	4951      	ldr	r1, [pc, #324]	; (8005ad4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800598e:	4618      	mov	r0, r3
 8005990:	f7fa febe 	bl	8000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8005994:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005998:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80059a2:	220a      	movs	r2, #10
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fa ffb1 	bl	8000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80059b0:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80059b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80059b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	460b      	mov	r3, r1
 80059c0:	ca06      	ldmia	r2, {r1, r2}
 80059c2:	4845      	ldr	r0, [pc, #276]	; (8005ad8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80059c4:	f7fa ffbd 	bl	8000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80059c8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fa ffac 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80059d2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80059d6:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80059da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059de:	429c      	cmp	r4, r3
 80059e0:	d004      	beq.n	80059ec <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 80059e2:	3c1c      	subs	r4, #28
 80059e4:	4620      	mov	r0, r4
 80059e6:	f7fa fde6 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80059ea:	e7f6      	b.n	80059da <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80059ec:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	609a      	str	r2, [r3, #8]
 80059f8:	233c      	movs	r3, #60	; 0x3c
 80059fa:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80059fe:	231b      	movs	r3, #27
 8005a00:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8005a04:	231c      	movs	r3, #28
 8005a06:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8005a0a:	233e      	movs	r3, #62	; 0x3e
 8005a0c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8005a10:	2319      	movs	r3, #25
 8005a12:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8005a16:	231a      	movs	r3, #26
 8005a18:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8005a1c:	233d      	movs	r3, #61	; 0x3d
 8005a1e:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8005a22:	2318      	movs	r3, #24
 8005a24:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8005a28:	231d      	movs	r3, #29
 8005a2a:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8005a2e:	2321      	movs	r3, #33	; 0x21
 8005a30:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8005a34:	2317      	movs	r3, #23
 8005a36:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8005a3a:	231e      	movs	r3, #30
 8005a3c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8005a40:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005a44:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005a48:	2304      	movs	r3, #4
 8005a4a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005a4e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fa ffa5 	bl	80009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8005a58:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8005a5c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	4613      	mov	r3, r2
 8005a64:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8005a68:	ca06      	ldmia	r2, {r1, r2}
 8005a6a:	481c      	ldr	r0, [pc, #112]	; (8005adc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8005a6c:	f7fa ffb1 	bl	80009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8005a70:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fa ffa0 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8005a7a:	1d3b      	adds	r3, r7, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10e      	bne.n	8005aa0 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8005a82:	463b      	mov	r3, r7
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d108      	bne.n	8005aa0 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8005a8e:	4813      	ldr	r0, [pc, #76]	; (8005adc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8005a90:	f7fd fbf8 	bl	8003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8005a94:	4810      	ldr	r0, [pc, #64]	; (8005ad8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8005a96:	f7fd fc02 	bl	800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8005a9a:	4804      	ldr	r0, [pc, #16]	; (8005aac <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8005a9c:	f7fd fc0c 	bl	80032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8005aa0:	bf00      	nop
 8005aa2:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd90      	pop	{r4, r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	20000334 	.word	0x20000334
 8005ab0:	0800a640 	.word	0x0800a640
 8005ab4:	0800a648 	.word	0x0800a648
 8005ab8:	0800a650 	.word	0x0800a650
 8005abc:	0800a658 	.word	0x0800a658
 8005ac0:	0800a660 	.word	0x0800a660
 8005ac4:	0800a668 	.word	0x0800a668
 8005ac8:	0800a66c 	.word	0x0800a66c
 8005acc:	0800a674 	.word	0x0800a674
 8005ad0:	0800a67c 	.word	0x0800a67c
 8005ad4:	0800a684 	.word	0x0800a684
 8005ad8:	2000034c 	.word	0x2000034c
 8005adc:	20000364 	.word	0x20000364

08005ae0 <_GLOBAL__sub_I__ZN16Variable_handler12get_instanceEv>:
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ae8:	2001      	movs	r0, #1
 8005aea:	f7ff fe1d 	bl	8005728 <_Z41__static_initialization_and_destruction_0ii>
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <_GLOBAL__sub_D__ZN16Variable_handler12get_instanceEv>:
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005af8:	2000      	movs	r0, #0
 8005afa:	f7ff fe15 	bl	8005728 <_Z41__static_initialization_and_destruction_0ii>
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <_Z41__static_initialization_and_destruction_0ii>:
	{
		get_next_token();
		exp->and_exps.push_back(parse_and_expression());
	}
	return exp;
}
 8005b00:	b590      	push	{r4, r7, lr}
 8005b02:	b0e7      	sub	sp, #412	; 0x19c
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	1d3b      	adds	r3, r7, #4
 8005b08:	6018      	str	r0, [r3, #0]
 8005b0a:	463b      	mov	r3, r7
 8005b0c:	6019      	str	r1, [r3, #0]
 8005b0e:	1d3b      	adds	r3, r7, #4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	f040 819d 	bne.w	8005e52 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8005b18:	463b      	mov	r3, r7
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b20:	4293      	cmp	r3, r2
 8005b22:	f040 8196 	bne.w	8005e52 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8005b26:	f107 0314 	add.w	r3, r7, #20
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	2322      	movs	r3, #34	; 0x22
 8005b2e:	461a      	mov	r2, r3
 8005b30:	2100      	movs	r1, #0
 8005b32:	f004 f823 	bl	8009b7c <memset>
 8005b36:	f107 0314 	add.w	r3, r7, #20
 8005b3a:	223a      	movs	r2, #58	; 0x3a
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	f107 0314 	add.w	r3, r7, #20
 8005b42:	2201      	movs	r2, #1
 8005b44:	705a      	strb	r2, [r3, #1]
 8005b46:	f107 0314 	add.w	r3, r7, #20
 8005b4a:	220a      	movs	r2, #10
 8005b4c:	709a      	strb	r2, [r3, #2]
 8005b4e:	f107 0314 	add.w	r3, r7, #20
 8005b52:	220a      	movs	r2, #10
 8005b54:	70da      	strb	r2, [r3, #3]
 8005b56:	f107 0314 	add.w	r3, r7, #20
 8005b5a:	222c      	movs	r2, #44	; 0x2c
 8005b5c:	711a      	strb	r2, [r3, #4]
 8005b5e:	f107 0314 	add.w	r3, r7, #20
 8005b62:	220c      	movs	r2, #12
 8005b64:	715a      	strb	r2, [r3, #5]
 8005b66:	f107 0314 	add.w	r3, r7, #20
 8005b6a:	222e      	movs	r2, #46	; 0x2e
 8005b6c:	719a      	strb	r2, [r3, #6]
 8005b6e:	f107 0314 	add.w	r3, r7, #20
 8005b72:	220b      	movs	r2, #11
 8005b74:	71da      	strb	r2, [r3, #7]
 8005b76:	f107 0314 	add.w	r3, r7, #20
 8005b7a:	225b      	movs	r2, #91	; 0x5b
 8005b7c:	721a      	strb	r2, [r3, #8]
 8005b7e:	f107 0314 	add.w	r3, r7, #20
 8005b82:	220d      	movs	r2, #13
 8005b84:	725a      	strb	r2, [r3, #9]
 8005b86:	f107 0314 	add.w	r3, r7, #20
 8005b8a:	225d      	movs	r2, #93	; 0x5d
 8005b8c:	729a      	strb	r2, [r3, #10]
 8005b8e:	f107 0314 	add.w	r3, r7, #20
 8005b92:	220e      	movs	r2, #14
 8005b94:	72da      	strb	r2, [r3, #11]
 8005b96:	f107 0314 	add.w	r3, r7, #20
 8005b9a:	227c      	movs	r2, #124	; 0x7c
 8005b9c:	731a      	strb	r2, [r3, #12]
 8005b9e:	f107 0314 	add.w	r3, r7, #20
 8005ba2:	2215      	movs	r2, #21
 8005ba4:	735a      	strb	r2, [r3, #13]
 8005ba6:	f107 0314 	add.w	r3, r7, #20
 8005baa:	2226      	movs	r2, #38	; 0x26
 8005bac:	739a      	strb	r2, [r3, #14]
 8005bae:	f107 0314 	add.w	r3, r7, #20
 8005bb2:	2216      	movs	r2, #22
 8005bb4:	73da      	strb	r2, [r3, #15]
 8005bb6:	f107 0314 	add.w	r3, r7, #20
 8005bba:	222b      	movs	r2, #43	; 0x2b
 8005bbc:	741a      	strb	r2, [r3, #16]
 8005bbe:	f107 0314 	add.w	r3, r7, #20
 8005bc2:	221f      	movs	r2, #31
 8005bc4:	745a      	strb	r2, [r3, #17]
 8005bc6:	f107 0314 	add.w	r3, r7, #20
 8005bca:	222d      	movs	r2, #45	; 0x2d
 8005bcc:	749a      	strb	r2, [r3, #18]
 8005bce:	f107 0314 	add.w	r3, r7, #20
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	74da      	strb	r2, [r3, #19]
 8005bd6:	f107 0314 	add.w	r3, r7, #20
 8005bda:	222a      	movs	r2, #42	; 0x2a
 8005bdc:	751a      	strb	r2, [r3, #20]
 8005bde:	f107 0314 	add.w	r3, r7, #20
 8005be2:	2221      	movs	r2, #33	; 0x21
 8005be4:	755a      	strb	r2, [r3, #21]
 8005be6:	f107 0314 	add.w	r3, r7, #20
 8005bea:	222f      	movs	r2, #47	; 0x2f
 8005bec:	759a      	strb	r2, [r3, #22]
 8005bee:	f107 0314 	add.w	r3, r7, #20
 8005bf2:	2222      	movs	r2, #34	; 0x22
 8005bf4:	75da      	strb	r2, [r3, #23]
 8005bf6:	f107 0314 	add.w	r3, r7, #20
 8005bfa:	225e      	movs	r2, #94	; 0x5e
 8005bfc:	761a      	strb	r2, [r3, #24]
 8005bfe:	f107 0314 	add.w	r3, r7, #20
 8005c02:	2223      	movs	r2, #35	; 0x23
 8005c04:	765a      	strb	r2, [r3, #25]
 8005c06:	f107 0314 	add.w	r3, r7, #20
 8005c0a:	2225      	movs	r2, #37	; 0x25
 8005c0c:	769a      	strb	r2, [r3, #26]
 8005c0e:	f107 0314 	add.w	r3, r7, #20
 8005c12:	2224      	movs	r2, #36	; 0x24
 8005c14:	76da      	strb	r2, [r3, #27]
 8005c16:	f107 0314 	add.w	r3, r7, #20
 8005c1a:	2228      	movs	r2, #40	; 0x28
 8005c1c:	771a      	strb	r2, [r3, #28]
 8005c1e:	f107 0314 	add.w	r3, r7, #20
 8005c22:	2226      	movs	r2, #38	; 0x26
 8005c24:	775a      	strb	r2, [r3, #29]
 8005c26:	f107 0314 	add.w	r3, r7, #20
 8005c2a:	2229      	movs	r2, #41	; 0x29
 8005c2c:	779a      	strb	r2, [r3, #30]
 8005c2e:	f107 0314 	add.w	r3, r7, #20
 8005c32:	2227      	movs	r2, #39	; 0x27
 8005c34:	77da      	strb	r2, [r3, #31]
 8005c36:	f107 0314 	add.w	r3, r7, #20
 8005c3a:	2225      	movs	r2, #37	; 0x25
 8005c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005c40:	f107 030c 	add.w	r3, r7, #12
 8005c44:	f107 0214 	add.w	r2, r7, #20
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	f107 030c 	add.w	r3, r7, #12
 8005c4e:	2211      	movs	r2, #17
 8005c50:	605a      	str	r2, [r3, #4]
 8005c52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fa fdb6 	bl	80007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8005c5c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005c60:	f107 020c 	add.w	r2, r7, #12
 8005c64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	ca06      	ldmia	r2, {r1, r2}
 8005c6e:	4885      	ldr	r0, [pc, #532]	; (8005e84 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8005c70:	f7fa fdc2 	bl	80007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8005c74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fa fdb1 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8005c7e:	2305      	movs	r3, #5
 8005c80:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8005c84:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8005c88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005c8c:	497e      	ldr	r1, [pc, #504]	; (8005e88 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fa fc9e 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8005c94:	2306      	movs	r3, #6
 8005c96:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8005c9a:	f207 1263 	addw	r2, r7, #355	; 0x163
 8005c9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ca2:	331c      	adds	r3, #28
 8005ca4:	4979      	ldr	r1, [pc, #484]	; (8005e8c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fa fcba 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8005cac:	2307      	movs	r3, #7
 8005cae:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8005cb2:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8005cb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005cba:	3338      	adds	r3, #56	; 0x38
 8005cbc:	4974      	ldr	r1, [pc, #464]	; (8005e90 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fa fcae 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8005cc4:	2308      	movs	r3, #8
 8005cc6:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8005cca:	f207 1265 	addw	r2, r7, #357	; 0x165
 8005cce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005cd2:	3354      	adds	r3, #84	; 0x54
 8005cd4:	496f      	ldr	r1, [pc, #444]	; (8005e94 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fa fc7a 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8005cdc:	2309      	movs	r3, #9
 8005cde:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8005ce2:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8005ce6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005cea:	3370      	adds	r3, #112	; 0x70
 8005cec:	496a      	ldr	r1, [pc, #424]	; (8005e98 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fa fcbe 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8005cfa:	f207 1267 	addw	r2, r7, #359	; 0x167
 8005cfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d02:	338c      	adds	r3, #140	; 0x8c
 8005d04:	4965      	ldr	r1, [pc, #404]	; (8005e9c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fa fcda 	bl	80006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8005d0c:	2311      	movs	r3, #17
 8005d0e:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8005d12:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005d16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d1a:	33a8      	adds	r3, #168	; 0xa8
 8005d1c:	4960      	ldr	r1, [pc, #384]	; (8005ea0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fa fca6 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8005d24:	2312      	movs	r3, #18
 8005d26:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8005d2a:	f207 1269 	addw	r2, r7, #361	; 0x169
 8005d2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d32:	33c4      	adds	r3, #196	; 0xc4
 8005d34:	495b      	ldr	r1, [pc, #364]	; (8005ea4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fa fc4a 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8005d3c:	2313      	movs	r3, #19
 8005d3e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8005d42:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8005d46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d4a:	33e0      	adds	r3, #224	; 0xe0
 8005d4c:	4956      	ldr	r1, [pc, #344]	; (8005ea8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fa fc66 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8005d54:	2314      	movs	r3, #20
 8005d56:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8005d5a:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8005d5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d62:	33fc      	adds	r3, #252	; 0xfc
 8005d64:	4951      	ldr	r1, [pc, #324]	; (8005eac <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fa fcd2 	bl	8000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8005d6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d7a:	220a      	movs	r2, #10
 8005d7c:	605a      	str	r2, [r3, #4]
 8005d7e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fa fdc5 	bl	8000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8005d88:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8005d8c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005d90:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	460b      	mov	r3, r1
 8005d98:	ca06      	ldmia	r2, {r1, r2}
 8005d9a:	4845      	ldr	r0, [pc, #276]	; (8005eb0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8005d9c:	f7fa fdd1 	bl	8000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8005da0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fa fdc0 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8005daa:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8005dae:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8005db2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005db6:	429c      	cmp	r4, r3
 8005db8:	d004      	beq.n	8005dc4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8005dba:	3c1c      	subs	r4, #28
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f7fa fbfa 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8005dc2:	e7f6      	b.n	8005db2 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8005dc4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	609a      	str	r2, [r3, #8]
 8005dd0:	233c      	movs	r3, #60	; 0x3c
 8005dd2:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8005dd6:	231b      	movs	r3, #27
 8005dd8:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8005ddc:	231c      	movs	r3, #28
 8005dde:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8005de2:	233e      	movs	r3, #62	; 0x3e
 8005de4:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8005de8:	2319      	movs	r3, #25
 8005dea:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8005dee:	231a      	movs	r3, #26
 8005df0:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8005df4:	233d      	movs	r3, #61	; 0x3d
 8005df6:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8005dfa:	2318      	movs	r3, #24
 8005dfc:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8005e00:	231d      	movs	r3, #29
 8005e02:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8005e06:	2321      	movs	r3, #33	; 0x21
 8005e08:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8005e0c:	2317      	movs	r3, #23
 8005e0e:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8005e12:	231e      	movs	r3, #30
 8005e14:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8005e18:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005e1c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005e20:	2304      	movs	r3, #4
 8005e22:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005e26:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fa fdb9 	bl	80009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8005e30:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8005e34:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8005e40:	ca06      	ldmia	r2, {r1, r2}
 8005e42:	481c      	ldr	r0, [pc, #112]	; (8005eb4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8005e44:	f7fa fdc5 	bl	80009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8005e48:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fa fdb4 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8005e52:	1d3b      	adds	r3, r7, #4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10e      	bne.n	8005e78 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8005e5a:	463b      	mov	r3, r7
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d108      	bne.n	8005e78 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8005e66:	4813      	ldr	r0, [pc, #76]	; (8005eb4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8005e68:	f7fd fa0c 	bl	8003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8005e6c:	4810      	ldr	r0, [pc, #64]	; (8005eb0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8005e6e:	f7fd fa16 	bl	800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8005e72:	4804      	ldr	r0, [pc, #16]	; (8005e84 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8005e74:	f7fd fa20 	bl	80032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8005e78:	bf00      	nop
 8005e7a:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd90      	pop	{r4, r7, pc}
 8005e82:	bf00      	nop
 8005e84:	2000037c 	.word	0x2000037c
 8005e88:	0800a700 	.word	0x0800a700
 8005e8c:	0800a708 	.word	0x0800a708
 8005e90:	0800a710 	.word	0x0800a710
 8005e94:	0800a718 	.word	0x0800a718
 8005e98:	0800a720 	.word	0x0800a720
 8005e9c:	0800a728 	.word	0x0800a728
 8005ea0:	0800a72c 	.word	0x0800a72c
 8005ea4:	0800a734 	.word	0x0800a734
 8005ea8:	0800a73c 	.word	0x0800a73c
 8005eac:	0800a744 	.word	0x0800a744
 8005eb0:	20000394 	.word	0x20000394
 8005eb4:	200003ac 	.word	0x200003ac

08005eb8 <_GLOBAL__sub_I__ZN6Parser31parse_variable_or_function_callEP17Primal_expression>:
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	f7ff fe1d 	bl	8005b00 <_Z41__static_initialization_and_destruction_0ii>
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <_GLOBAL__sub_D__ZN6Parser31parse_variable_or_function_callEP17Primal_expression>:
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	f7ff fe15 	bl	8005b00 <_Z41__static_initialization_and_destruction_0ii>
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005edc:	f001 f80f 	bl	8006efe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ee0:	f000 f80a 	bl	8005ef8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005ee4:	f000 f8e0 	bl	80060a8 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8005ee8:	f000 f8aa 	bl	8006040 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  my_main_run(&huart1);
 8005eec:	4801      	ldr	r0, [pc, #4]	; (8005ef4 <main+0x1c>)
 8005eee:	f000 fae5 	bl	80064bc <_Z11my_main_runP20__UART_HandleTypeDef>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005ef2:	e7fe      	b.n	8005ef2 <main+0x1a>
 8005ef4:	2000040c 	.word	0x2000040c

08005ef8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b0b4      	sub	sp, #208	; 0xd0
 8005efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005efe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f02:	2230      	movs	r2, #48	; 0x30
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f003 fe38 	bl	8009b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f0c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	609a      	str	r2, [r3, #8]
 8005f18:	60da      	str	r2, [r3, #12]
 8005f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f1c:	f107 0308 	add.w	r3, r7, #8
 8005f20:	2284      	movs	r2, #132	; 0x84
 8005f22:	2100      	movs	r1, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f003 fe29 	bl	8009b7c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f2a:	4b43      	ldr	r3, [pc, #268]	; (8006038 <_Z18SystemClock_Configv+0x140>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	4a42      	ldr	r2, [pc, #264]	; (8006038 <_Z18SystemClock_Configv+0x140>)
 8005f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f34:	6413      	str	r3, [r2, #64]	; 0x40
 8005f36:	4b40      	ldr	r3, [pc, #256]	; (8006038 <_Z18SystemClock_Configv+0x140>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f3e:	607b      	str	r3, [r7, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f42:	4b3e      	ldr	r3, [pc, #248]	; (800603c <_Z18SystemClock_Configv+0x144>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a3d      	ldr	r2, [pc, #244]	; (800603c <_Z18SystemClock_Configv+0x144>)
 8005f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	4b3b      	ldr	r3, [pc, #236]	; (800603c <_Z18SystemClock_Configv+0x144>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005f60:	2301      	movs	r3, #1
 8005f62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005f66:	2310      	movs	r3, #16
 8005f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005f72:	2300      	movs	r3, #0
 8005f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005f78:	2308      	movs	r3, #8
 8005f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8005f7e:	23d8      	movs	r3, #216	; 0xd8
 8005f80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005f84:	2302      	movs	r3, #2
 8005f86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f90:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 fbaf 	bl	80076f8 <HAL_RCC_OscConfig>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	bf14      	ite	ne
 8005fa0:	2301      	movne	r3, #1
 8005fa2:	2300      	moveq	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8005faa:	f000 f895 	bl	80060d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005fae:	f001 fb53 	bl	8007658 <HAL_PWREx_EnableOverDrive>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	bf14      	ite	ne
 8005fb8:	2301      	movne	r3, #1
 8005fba:	2300      	moveq	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 8005fc2:	f000 f889 	bl	80060d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005fc6:	230f      	movs	r3, #15
 8005fc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005fd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005fe8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005fec:	2107      	movs	r1, #7
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 fe26 	bl	8007c40 <HAL_RCC_ClockConfig>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	bf14      	ite	ne
 8005ffa:	2301      	movne	r3, #1
 8005ffc:	2300      	moveq	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <_Z18SystemClock_Configv+0x110>
  {
    Error_Handler();
 8006004:	f000 f868 	bl	80060d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006008:	2340      	movs	r3, #64	; 0x40
 800600a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800600c:	2300      	movs	r3, #0
 800600e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006010:	f107 0308 	add.w	r3, r7, #8
 8006014:	4618      	mov	r0, r3
 8006016:	f001 ffe9 	bl	8007fec <HAL_RCCEx_PeriphCLKConfig>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	bf14      	ite	ne
 8006020:	2301      	movne	r3, #1
 8006022:	2300      	moveq	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <_Z18SystemClock_Configv+0x136>
  {
    Error_Handler();
 800602a:	f000 f855 	bl	80060d8 <Error_Handler>
  }
}
 800602e:	bf00      	nop
 8006030:	37d0      	adds	r7, #208	; 0xd0
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40023800 	.word	0x40023800
 800603c:	40007000 	.word	0x40007000

08006040 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006044:	4b16      	ldr	r3, [pc, #88]	; (80060a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8006046:	4a17      	ldr	r2, [pc, #92]	; (80060a4 <_ZL19MX_USART1_UART_Initv+0x64>)
 8006048:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800604a:	4b15      	ldr	r3, [pc, #84]	; (80060a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800604c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006050:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006052:	4b13      	ldr	r3, [pc, #76]	; (80060a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8006054:	2200      	movs	r2, #0
 8006056:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006058:	4b11      	ldr	r3, [pc, #68]	; (80060a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800605a:	2200      	movs	r2, #0
 800605c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800605e:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8006060:	2200      	movs	r2, #0
 8006062:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006064:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8006066:	220c      	movs	r2, #12
 8006068:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800606a:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800606c:	2200      	movs	r2, #0
 800606e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006070:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8006072:	2200      	movs	r2, #0
 8006074:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8006078:	2200      	movs	r2, #0
 800607a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800607c:	4b08      	ldr	r3, [pc, #32]	; (80060a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800607e:	2200      	movs	r2, #0
 8006080:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006082:	4807      	ldr	r0, [pc, #28]	; (80060a0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8006084:	f002 fba2 	bl	80087cc <HAL_UART_Init>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	bf14      	ite	ne
 800608e:	2301      	movne	r3, #1
 8006090:	2300      	moveq	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8006098:	f000 f81e 	bl	80060d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800609c:	bf00      	nop
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	2000040c 	.word	0x2000040c
 80060a4:	40011000 	.word	0x40011000

080060a8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060ae:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <_ZL12MX_GPIO_Initv+0x2c>)
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	4a08      	ldr	r2, [pc, #32]	; (80060d4 <_ZL12MX_GPIO_Initv+0x2c>)
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	6313      	str	r3, [r2, #48]	; 0x30
 80060ba:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <_ZL12MX_GPIO_Initv+0x2c>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	607b      	str	r3, [r7, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]

}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40023800 	.word	0x40023800

080060d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80060dc:	b672      	cpsid	i
}
 80060de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80060e0:	e7fe      	b.n	80060e0 <Error_Handler+0x8>
	...

080060e4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80060e4:	b590      	push	{r4, r7, lr}
 80060e6:	b0e7      	sub	sp, #412	; 0x19c
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	1d3b      	adds	r3, r7, #4
 80060ec:	6018      	str	r0, [r3, #0]
 80060ee:	463b      	mov	r3, r7
 80060f0:	6019      	str	r1, [r3, #0]
 80060f2:	1d3b      	adds	r3, r7, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	f040 819d 	bne.w	8006436 <_Z41__static_initialization_and_destruction_0ii+0x352>
 80060fc:	463b      	mov	r3, r7
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006104:	4293      	cmp	r3, r2
 8006106:	f040 8196 	bne.w	8006436 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 800610a:	f107 0314 	add.w	r3, r7, #20
 800610e:	4618      	mov	r0, r3
 8006110:	2322      	movs	r3, #34	; 0x22
 8006112:	461a      	mov	r2, r3
 8006114:	2100      	movs	r1, #0
 8006116:	f003 fd31 	bl	8009b7c <memset>
 800611a:	f107 0314 	add.w	r3, r7, #20
 800611e:	223a      	movs	r2, #58	; 0x3a
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	f107 0314 	add.w	r3, r7, #20
 8006126:	2201      	movs	r2, #1
 8006128:	705a      	strb	r2, [r3, #1]
 800612a:	f107 0314 	add.w	r3, r7, #20
 800612e:	220a      	movs	r2, #10
 8006130:	709a      	strb	r2, [r3, #2]
 8006132:	f107 0314 	add.w	r3, r7, #20
 8006136:	220a      	movs	r2, #10
 8006138:	70da      	strb	r2, [r3, #3]
 800613a:	f107 0314 	add.w	r3, r7, #20
 800613e:	222c      	movs	r2, #44	; 0x2c
 8006140:	711a      	strb	r2, [r3, #4]
 8006142:	f107 0314 	add.w	r3, r7, #20
 8006146:	220c      	movs	r2, #12
 8006148:	715a      	strb	r2, [r3, #5]
 800614a:	f107 0314 	add.w	r3, r7, #20
 800614e:	222e      	movs	r2, #46	; 0x2e
 8006150:	719a      	strb	r2, [r3, #6]
 8006152:	f107 0314 	add.w	r3, r7, #20
 8006156:	220b      	movs	r2, #11
 8006158:	71da      	strb	r2, [r3, #7]
 800615a:	f107 0314 	add.w	r3, r7, #20
 800615e:	225b      	movs	r2, #91	; 0x5b
 8006160:	721a      	strb	r2, [r3, #8]
 8006162:	f107 0314 	add.w	r3, r7, #20
 8006166:	220d      	movs	r2, #13
 8006168:	725a      	strb	r2, [r3, #9]
 800616a:	f107 0314 	add.w	r3, r7, #20
 800616e:	225d      	movs	r2, #93	; 0x5d
 8006170:	729a      	strb	r2, [r3, #10]
 8006172:	f107 0314 	add.w	r3, r7, #20
 8006176:	220e      	movs	r2, #14
 8006178:	72da      	strb	r2, [r3, #11]
 800617a:	f107 0314 	add.w	r3, r7, #20
 800617e:	227c      	movs	r2, #124	; 0x7c
 8006180:	731a      	strb	r2, [r3, #12]
 8006182:	f107 0314 	add.w	r3, r7, #20
 8006186:	2215      	movs	r2, #21
 8006188:	735a      	strb	r2, [r3, #13]
 800618a:	f107 0314 	add.w	r3, r7, #20
 800618e:	2226      	movs	r2, #38	; 0x26
 8006190:	739a      	strb	r2, [r3, #14]
 8006192:	f107 0314 	add.w	r3, r7, #20
 8006196:	2216      	movs	r2, #22
 8006198:	73da      	strb	r2, [r3, #15]
 800619a:	f107 0314 	add.w	r3, r7, #20
 800619e:	222b      	movs	r2, #43	; 0x2b
 80061a0:	741a      	strb	r2, [r3, #16]
 80061a2:	f107 0314 	add.w	r3, r7, #20
 80061a6:	221f      	movs	r2, #31
 80061a8:	745a      	strb	r2, [r3, #17]
 80061aa:	f107 0314 	add.w	r3, r7, #20
 80061ae:	222d      	movs	r2, #45	; 0x2d
 80061b0:	749a      	strb	r2, [r3, #18]
 80061b2:	f107 0314 	add.w	r3, r7, #20
 80061b6:	2220      	movs	r2, #32
 80061b8:	74da      	strb	r2, [r3, #19]
 80061ba:	f107 0314 	add.w	r3, r7, #20
 80061be:	222a      	movs	r2, #42	; 0x2a
 80061c0:	751a      	strb	r2, [r3, #20]
 80061c2:	f107 0314 	add.w	r3, r7, #20
 80061c6:	2221      	movs	r2, #33	; 0x21
 80061c8:	755a      	strb	r2, [r3, #21]
 80061ca:	f107 0314 	add.w	r3, r7, #20
 80061ce:	222f      	movs	r2, #47	; 0x2f
 80061d0:	759a      	strb	r2, [r3, #22]
 80061d2:	f107 0314 	add.w	r3, r7, #20
 80061d6:	2222      	movs	r2, #34	; 0x22
 80061d8:	75da      	strb	r2, [r3, #23]
 80061da:	f107 0314 	add.w	r3, r7, #20
 80061de:	225e      	movs	r2, #94	; 0x5e
 80061e0:	761a      	strb	r2, [r3, #24]
 80061e2:	f107 0314 	add.w	r3, r7, #20
 80061e6:	2223      	movs	r2, #35	; 0x23
 80061e8:	765a      	strb	r2, [r3, #25]
 80061ea:	f107 0314 	add.w	r3, r7, #20
 80061ee:	2225      	movs	r2, #37	; 0x25
 80061f0:	769a      	strb	r2, [r3, #26]
 80061f2:	f107 0314 	add.w	r3, r7, #20
 80061f6:	2224      	movs	r2, #36	; 0x24
 80061f8:	76da      	strb	r2, [r3, #27]
 80061fa:	f107 0314 	add.w	r3, r7, #20
 80061fe:	2228      	movs	r2, #40	; 0x28
 8006200:	771a      	strb	r2, [r3, #28]
 8006202:	f107 0314 	add.w	r3, r7, #20
 8006206:	2226      	movs	r2, #38	; 0x26
 8006208:	775a      	strb	r2, [r3, #29]
 800620a:	f107 0314 	add.w	r3, r7, #20
 800620e:	2229      	movs	r2, #41	; 0x29
 8006210:	779a      	strb	r2, [r3, #30]
 8006212:	f107 0314 	add.w	r3, r7, #20
 8006216:	2227      	movs	r2, #39	; 0x27
 8006218:	77da      	strb	r2, [r3, #31]
 800621a:	f107 0314 	add.w	r3, r7, #20
 800621e:	2225      	movs	r2, #37	; 0x25
 8006220:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006224:	f107 030c 	add.w	r3, r7, #12
 8006228:	f107 0214 	add.w	r2, r7, #20
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	f107 030c 	add.w	r3, r7, #12
 8006232:	2211      	movs	r2, #17
 8006234:	605a      	str	r2, [r3, #4]
 8006236:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800623a:	4618      	mov	r0, r3
 800623c:	f7fa fac4 	bl	80007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8006240:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006244:	f107 020c 	add.w	r2, r7, #12
 8006248:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	460b      	mov	r3, r1
 8006250:	ca06      	ldmia	r2, {r1, r2}
 8006252:	4885      	ldr	r0, [pc, #532]	; (8006468 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006254:	f7fa fad0 	bl	80007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8006258:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800625c:	4618      	mov	r0, r3
 800625e:	f7fa fabf 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8006262:	2305      	movs	r3, #5
 8006264:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8006268:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 800626c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006270:	497e      	ldr	r1, [pc, #504]	; (800646c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8006272:	4618      	mov	r0, r3
 8006274:	f7fa f9ac 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8006278:	2306      	movs	r3, #6
 800627a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 800627e:	f207 1263 	addw	r2, r7, #355	; 0x163
 8006282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006286:	331c      	adds	r3, #28
 8006288:	4979      	ldr	r1, [pc, #484]	; (8006470 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800628a:	4618      	mov	r0, r3
 800628c:	f7fa f9c8 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8006290:	2307      	movs	r3, #7
 8006292:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8006296:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800629a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800629e:	3338      	adds	r3, #56	; 0x38
 80062a0:	4974      	ldr	r1, [pc, #464]	; (8006474 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fa f9bc 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80062a8:	2308      	movs	r3, #8
 80062aa:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80062ae:	f207 1265 	addw	r2, r7, #357	; 0x165
 80062b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062b6:	3354      	adds	r3, #84	; 0x54
 80062b8:	496f      	ldr	r1, [pc, #444]	; (8006478 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fa f988 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 80062c0:	2309      	movs	r3, #9
 80062c2:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 80062c6:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 80062ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062ce:	3370      	adds	r3, #112	; 0x70
 80062d0:	496a      	ldr	r1, [pc, #424]	; (800647c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fa f9cc 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 80062d8:	2310      	movs	r3, #16
 80062da:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 80062de:	f207 1267 	addw	r2, r7, #359	; 0x167
 80062e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062e6:	338c      	adds	r3, #140	; 0x8c
 80062e8:	4965      	ldr	r1, [pc, #404]	; (8006480 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fa f9e8 	bl	80006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 80062f0:	2311      	movs	r3, #17
 80062f2:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 80062f6:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80062fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062fe:	33a8      	adds	r3, #168	; 0xa8
 8006300:	4960      	ldr	r1, [pc, #384]	; (8006484 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8006302:	4618      	mov	r0, r3
 8006304:	f7fa f9b4 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8006308:	2312      	movs	r3, #18
 800630a:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 800630e:	f207 1269 	addw	r2, r7, #361	; 0x169
 8006312:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006316:	33c4      	adds	r3, #196	; 0xc4
 8006318:	495b      	ldr	r1, [pc, #364]	; (8006488 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800631a:	4618      	mov	r0, r3
 800631c:	f7fa f958 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8006320:	2313      	movs	r3, #19
 8006322:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8006326:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800632a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800632e:	33e0      	adds	r3, #224	; 0xe0
 8006330:	4956      	ldr	r1, [pc, #344]	; (800648c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8006332:	4618      	mov	r0, r3
 8006334:	f7fa f974 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8006338:	2314      	movs	r3, #20
 800633a:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 800633e:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8006342:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006346:	33fc      	adds	r3, #252	; 0xfc
 8006348:	4951      	ldr	r1, [pc, #324]	; (8006490 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800634a:	4618      	mov	r0, r3
 800634c:	f7fa f9e0 	bl	8000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8006350:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006354:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800635e:	220a      	movs	r2, #10
 8006360:	605a      	str	r2, [r3, #4]
 8006362:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006366:	4618      	mov	r0, r3
 8006368:	f7fa fad3 	bl	8000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 800636c:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8006370:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006374:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	460b      	mov	r3, r1
 800637c:	ca06      	ldmia	r2, {r1, r2}
 800637e:	4845      	ldr	r0, [pc, #276]	; (8006494 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8006380:	f7fa fadf 	bl	8000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8006384:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006388:	4618      	mov	r0, r3
 800638a:	f7fa face 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800638e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8006392:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8006396:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800639a:	429c      	cmp	r4, r3
 800639c:	d004      	beq.n	80063a8 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 800639e:	3c1c      	subs	r4, #28
 80063a0:	4620      	mov	r0, r4
 80063a2:	f7fa f908 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80063a6:	e7f6      	b.n	8006396 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80063a8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	605a      	str	r2, [r3, #4]
 80063b2:	609a      	str	r2, [r3, #8]
 80063b4:	233c      	movs	r3, #60	; 0x3c
 80063b6:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80063ba:	231b      	movs	r3, #27
 80063bc:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80063c0:	231c      	movs	r3, #28
 80063c2:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80063c6:	233e      	movs	r3, #62	; 0x3e
 80063c8:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80063cc:	2319      	movs	r3, #25
 80063ce:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 80063d2:	231a      	movs	r3, #26
 80063d4:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 80063d8:	233d      	movs	r3, #61	; 0x3d
 80063da:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 80063de:	2318      	movs	r3, #24
 80063e0:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 80063e4:	231d      	movs	r3, #29
 80063e6:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80063ea:	2321      	movs	r3, #33	; 0x21
 80063ec:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80063f0:	2317      	movs	r3, #23
 80063f2:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80063f6:	231e      	movs	r3, #30
 80063f8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80063fc:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8006400:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006404:	2304      	movs	r3, #4
 8006406:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800640a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800640e:	4618      	mov	r0, r3
 8006410:	f7fa fac7 	bl	80009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8006414:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8006418:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	4613      	mov	r3, r2
 8006420:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8006424:	ca06      	ldmia	r2, {r1, r2}
 8006426:	481c      	ldr	r0, [pc, #112]	; (8006498 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8006428:	f7fa fad3 	bl	80009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800642c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006430:	4618      	mov	r0, r3
 8006432:	f7fa fac2 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10e      	bne.n	800645c <_Z41__static_initialization_and_destruction_0ii+0x378>
 800643e:	463b      	mov	r3, r7
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006446:	4293      	cmp	r3, r2
 8006448:	d108      	bne.n	800645c <_Z41__static_initialization_and_destruction_0ii+0x378>
 800644a:	4813      	ldr	r0, [pc, #76]	; (8006498 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800644c:	f7fc ff1a 	bl	8003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8006450:	4810      	ldr	r0, [pc, #64]	; (8006494 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8006452:	f7fc ff24 	bl	800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8006456:	4804      	ldr	r0, [pc, #16]	; (8006468 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006458:	f7fc ff2e 	bl	80032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 800645c:	bf00      	nop
 800645e:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006462:	46bd      	mov	sp, r7
 8006464:	bd90      	pop	{r4, r7, pc}
 8006466:	bf00      	nop
 8006468:	200003c4 	.word	0x200003c4
 800646c:	0800a774 	.word	0x0800a774
 8006470:	0800a77c 	.word	0x0800a77c
 8006474:	0800a784 	.word	0x0800a784
 8006478:	0800a78c 	.word	0x0800a78c
 800647c:	0800a794 	.word	0x0800a794
 8006480:	0800a79c 	.word	0x0800a79c
 8006484:	0800a7a0 	.word	0x0800a7a0
 8006488:	0800a7a8 	.word	0x0800a7a8
 800648c:	0800a7b0 	.word	0x0800a7b0
 8006490:	0800a7b8 	.word	0x0800a7b8
 8006494:	200003dc 	.word	0x200003dc
 8006498:	200003f4 	.word	0x200003f4

0800649c <_GLOBAL__sub_I_huart1>:
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
 80064a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064a4:	2001      	movs	r0, #1
 80064a6:	f7ff fe1d 	bl	80060e4 <_Z41__static_initialization_and_destruction_0ii>
 80064aa:	bd80      	pop	{r7, pc}

080064ac <_GLOBAL__sub_D_huart1>:
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064b4:	2000      	movs	r0, #0
 80064b6:	f7ff fe15 	bl	80060e4 <_Z41__static_initialization_and_destruction_0ii>
 80064ba:	bd80      	pop	{r7, pc}

080064bc <_Z11my_main_runP20__UART_HandleTypeDef>:
#include "my_main.h"

// main function called after setup from CUBEMX
void my_main_run(UART_HandleTypeDef* huart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	Transmitter::send_result();
 80064c4:	2000      	movs	r0, #0
 80064c6:	f7fe fef3 	bl	80052b0 <_ZN11Transmitter11send_resultEb>
	Transmitter::send_result();
 80064ca:	2000      	movs	r0, #0
 80064cc:	f7fe fef0 	bl	80052b0 <_ZN11Transmitter11send_resultEb>
	Transmitter::send_result();
 80064d0:	2000      	movs	r0, #0
 80064d2:	f7fe feed 	bl	80052b0 <_ZN11Transmitter11send_resultEb>
	Transmitter::send_result(true);
 80064d6:	2001      	movs	r0, #1
 80064d8:	f7fe feea 	bl	80052b0 <_ZN11Transmitter11send_resultEb>
		Transmitter::start_listening();
		Executor::get_instance().execute(P);
	}


	for(;;)
 80064dc:	e7fe      	b.n	80064dc <_Z11my_main_runP20__UART_HandleTypeDef+0x20>
	...

080064e0 <_Z41__static_initialization_and_destruction_0ii>:
	{

	}
}
 80064e0:	b590      	push	{r4, r7, lr}
 80064e2:	b0e7      	sub	sp, #412	; 0x19c
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	1d3b      	adds	r3, r7, #4
 80064e8:	6018      	str	r0, [r3, #0]
 80064ea:	463b      	mov	r3, r7
 80064ec:	6019      	str	r1, [r3, #0]
 80064ee:	1d3b      	adds	r3, r7, #4
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	f040 819d 	bne.w	8006832 <_Z41__static_initialization_and_destruction_0ii+0x352>
 80064f8:	463b      	mov	r3, r7
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006500:	4293      	cmp	r3, r2
 8006502:	f040 8196 	bne.w	8006832 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8006506:	f107 0314 	add.w	r3, r7, #20
 800650a:	4618      	mov	r0, r3
 800650c:	2322      	movs	r3, #34	; 0x22
 800650e:	461a      	mov	r2, r3
 8006510:	2100      	movs	r1, #0
 8006512:	f003 fb33 	bl	8009b7c <memset>
 8006516:	f107 0314 	add.w	r3, r7, #20
 800651a:	223a      	movs	r2, #58	; 0x3a
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	f107 0314 	add.w	r3, r7, #20
 8006522:	2201      	movs	r2, #1
 8006524:	705a      	strb	r2, [r3, #1]
 8006526:	f107 0314 	add.w	r3, r7, #20
 800652a:	220a      	movs	r2, #10
 800652c:	709a      	strb	r2, [r3, #2]
 800652e:	f107 0314 	add.w	r3, r7, #20
 8006532:	220a      	movs	r2, #10
 8006534:	70da      	strb	r2, [r3, #3]
 8006536:	f107 0314 	add.w	r3, r7, #20
 800653a:	222c      	movs	r2, #44	; 0x2c
 800653c:	711a      	strb	r2, [r3, #4]
 800653e:	f107 0314 	add.w	r3, r7, #20
 8006542:	220c      	movs	r2, #12
 8006544:	715a      	strb	r2, [r3, #5]
 8006546:	f107 0314 	add.w	r3, r7, #20
 800654a:	222e      	movs	r2, #46	; 0x2e
 800654c:	719a      	strb	r2, [r3, #6]
 800654e:	f107 0314 	add.w	r3, r7, #20
 8006552:	220b      	movs	r2, #11
 8006554:	71da      	strb	r2, [r3, #7]
 8006556:	f107 0314 	add.w	r3, r7, #20
 800655a:	225b      	movs	r2, #91	; 0x5b
 800655c:	721a      	strb	r2, [r3, #8]
 800655e:	f107 0314 	add.w	r3, r7, #20
 8006562:	220d      	movs	r2, #13
 8006564:	725a      	strb	r2, [r3, #9]
 8006566:	f107 0314 	add.w	r3, r7, #20
 800656a:	225d      	movs	r2, #93	; 0x5d
 800656c:	729a      	strb	r2, [r3, #10]
 800656e:	f107 0314 	add.w	r3, r7, #20
 8006572:	220e      	movs	r2, #14
 8006574:	72da      	strb	r2, [r3, #11]
 8006576:	f107 0314 	add.w	r3, r7, #20
 800657a:	227c      	movs	r2, #124	; 0x7c
 800657c:	731a      	strb	r2, [r3, #12]
 800657e:	f107 0314 	add.w	r3, r7, #20
 8006582:	2215      	movs	r2, #21
 8006584:	735a      	strb	r2, [r3, #13]
 8006586:	f107 0314 	add.w	r3, r7, #20
 800658a:	2226      	movs	r2, #38	; 0x26
 800658c:	739a      	strb	r2, [r3, #14]
 800658e:	f107 0314 	add.w	r3, r7, #20
 8006592:	2216      	movs	r2, #22
 8006594:	73da      	strb	r2, [r3, #15]
 8006596:	f107 0314 	add.w	r3, r7, #20
 800659a:	222b      	movs	r2, #43	; 0x2b
 800659c:	741a      	strb	r2, [r3, #16]
 800659e:	f107 0314 	add.w	r3, r7, #20
 80065a2:	221f      	movs	r2, #31
 80065a4:	745a      	strb	r2, [r3, #17]
 80065a6:	f107 0314 	add.w	r3, r7, #20
 80065aa:	222d      	movs	r2, #45	; 0x2d
 80065ac:	749a      	strb	r2, [r3, #18]
 80065ae:	f107 0314 	add.w	r3, r7, #20
 80065b2:	2220      	movs	r2, #32
 80065b4:	74da      	strb	r2, [r3, #19]
 80065b6:	f107 0314 	add.w	r3, r7, #20
 80065ba:	222a      	movs	r2, #42	; 0x2a
 80065bc:	751a      	strb	r2, [r3, #20]
 80065be:	f107 0314 	add.w	r3, r7, #20
 80065c2:	2221      	movs	r2, #33	; 0x21
 80065c4:	755a      	strb	r2, [r3, #21]
 80065c6:	f107 0314 	add.w	r3, r7, #20
 80065ca:	222f      	movs	r2, #47	; 0x2f
 80065cc:	759a      	strb	r2, [r3, #22]
 80065ce:	f107 0314 	add.w	r3, r7, #20
 80065d2:	2222      	movs	r2, #34	; 0x22
 80065d4:	75da      	strb	r2, [r3, #23]
 80065d6:	f107 0314 	add.w	r3, r7, #20
 80065da:	225e      	movs	r2, #94	; 0x5e
 80065dc:	761a      	strb	r2, [r3, #24]
 80065de:	f107 0314 	add.w	r3, r7, #20
 80065e2:	2223      	movs	r2, #35	; 0x23
 80065e4:	765a      	strb	r2, [r3, #25]
 80065e6:	f107 0314 	add.w	r3, r7, #20
 80065ea:	2225      	movs	r2, #37	; 0x25
 80065ec:	769a      	strb	r2, [r3, #26]
 80065ee:	f107 0314 	add.w	r3, r7, #20
 80065f2:	2224      	movs	r2, #36	; 0x24
 80065f4:	76da      	strb	r2, [r3, #27]
 80065f6:	f107 0314 	add.w	r3, r7, #20
 80065fa:	2228      	movs	r2, #40	; 0x28
 80065fc:	771a      	strb	r2, [r3, #28]
 80065fe:	f107 0314 	add.w	r3, r7, #20
 8006602:	2226      	movs	r2, #38	; 0x26
 8006604:	775a      	strb	r2, [r3, #29]
 8006606:	f107 0314 	add.w	r3, r7, #20
 800660a:	2229      	movs	r2, #41	; 0x29
 800660c:	779a      	strb	r2, [r3, #30]
 800660e:	f107 0314 	add.w	r3, r7, #20
 8006612:	2227      	movs	r2, #39	; 0x27
 8006614:	77da      	strb	r2, [r3, #31]
 8006616:	f107 0314 	add.w	r3, r7, #20
 800661a:	2225      	movs	r2, #37	; 0x25
 800661c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006620:	f107 030c 	add.w	r3, r7, #12
 8006624:	f107 0214 	add.w	r2, r7, #20
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	f107 030c 	add.w	r3, r7, #12
 800662e:	2211      	movs	r2, #17
 8006630:	605a      	str	r2, [r3, #4]
 8006632:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006636:	4618      	mov	r0, r3
 8006638:	f7fa f8c6 	bl	80007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 800663c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006640:	f107 020c 	add.w	r2, r7, #12
 8006644:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	460b      	mov	r3, r1
 800664c:	ca06      	ldmia	r2, {r1, r2}
 800664e:	4885      	ldr	r0, [pc, #532]	; (8006864 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006650:	f7fa f8d2 	bl	80007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8006654:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006658:	4618      	mov	r0, r3
 800665a:	f7fa f8c1 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 800665e:	2305      	movs	r3, #5
 8006660:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8006664:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8006668:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800666c:	497e      	ldr	r1, [pc, #504]	; (8006868 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800666e:	4618      	mov	r0, r3
 8006670:	f7f9 ffae 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8006674:	2306      	movs	r3, #6
 8006676:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 800667a:	f207 1263 	addw	r2, r7, #355	; 0x163
 800667e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006682:	331c      	adds	r3, #28
 8006684:	4979      	ldr	r1, [pc, #484]	; (800686c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8006686:	4618      	mov	r0, r3
 8006688:	f7f9 ffca 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 800668c:	2307      	movs	r3, #7
 800668e:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8006692:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8006696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800669a:	3338      	adds	r3, #56	; 0x38
 800669c:	4974      	ldr	r1, [pc, #464]	; (8006870 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800669e:	4618      	mov	r0, r3
 80066a0:	f7f9 ffbe 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80066a4:	2308      	movs	r3, #8
 80066a6:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80066aa:	f207 1265 	addw	r2, r7, #357	; 0x165
 80066ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80066b2:	3354      	adds	r3, #84	; 0x54
 80066b4:	496f      	ldr	r1, [pc, #444]	; (8006874 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7f9 ff8a 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 80066bc:	2309      	movs	r3, #9
 80066be:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 80066c2:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 80066c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80066ca:	3370      	adds	r3, #112	; 0x70
 80066cc:	496a      	ldr	r1, [pc, #424]	; (8006878 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7f9 ffce 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 80066d4:	2310      	movs	r3, #16
 80066d6:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 80066da:	f207 1267 	addw	r2, r7, #359	; 0x167
 80066de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80066e2:	338c      	adds	r3, #140	; 0x8c
 80066e4:	4965      	ldr	r1, [pc, #404]	; (800687c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7f9 ffea 	bl	80006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 80066ec:	2311      	movs	r3, #17
 80066ee:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 80066f2:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80066f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80066fa:	33a8      	adds	r3, #168	; 0xa8
 80066fc:	4960      	ldr	r1, [pc, #384]	; (8006880 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80066fe:	4618      	mov	r0, r3
 8006700:	f7f9 ffb6 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8006704:	2312      	movs	r3, #18
 8006706:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 800670a:	f207 1269 	addw	r2, r7, #361	; 0x169
 800670e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006712:	33c4      	adds	r3, #196	; 0xc4
 8006714:	495b      	ldr	r1, [pc, #364]	; (8006884 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8006716:	4618      	mov	r0, r3
 8006718:	f7f9 ff5a 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 800671c:	2313      	movs	r3, #19
 800671e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8006722:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8006726:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800672a:	33e0      	adds	r3, #224	; 0xe0
 800672c:	4956      	ldr	r1, [pc, #344]	; (8006888 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800672e:	4618      	mov	r0, r3
 8006730:	f7f9 ff76 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8006734:	2314      	movs	r3, #20
 8006736:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 800673a:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800673e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006742:	33fc      	adds	r3, #252	; 0xfc
 8006744:	4951      	ldr	r1, [pc, #324]	; (800688c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8006746:	4618      	mov	r0, r3
 8006748:	f7f9 ffe2 	bl	8000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 800674c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006750:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800675a:	220a      	movs	r2, #10
 800675c:	605a      	str	r2, [r3, #4]
 800675e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006762:	4618      	mov	r0, r3
 8006764:	f7fa f8d5 	bl	8000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8006768:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800676c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006770:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	460b      	mov	r3, r1
 8006778:	ca06      	ldmia	r2, {r1, r2}
 800677a:	4845      	ldr	r0, [pc, #276]	; (8006890 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800677c:	f7fa f8e1 	bl	8000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8006780:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006784:	4618      	mov	r0, r3
 8006786:	f7fa f8d0 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800678a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800678e:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8006792:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006796:	429c      	cmp	r4, r3
 8006798:	d004      	beq.n	80067a4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 800679a:	3c1c      	subs	r4, #28
 800679c:	4620      	mov	r0, r4
 800679e:	f7f9 ff0a 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80067a2:	e7f6      	b.n	8006792 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80067a4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	605a      	str	r2, [r3, #4]
 80067ae:	609a      	str	r2, [r3, #8]
 80067b0:	233c      	movs	r3, #60	; 0x3c
 80067b2:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80067b6:	231b      	movs	r3, #27
 80067b8:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80067bc:	231c      	movs	r3, #28
 80067be:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80067c2:	233e      	movs	r3, #62	; 0x3e
 80067c4:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80067c8:	2319      	movs	r3, #25
 80067ca:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 80067ce:	231a      	movs	r3, #26
 80067d0:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 80067d4:	233d      	movs	r3, #61	; 0x3d
 80067d6:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 80067da:	2318      	movs	r3, #24
 80067dc:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 80067e0:	231d      	movs	r3, #29
 80067e2:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80067e6:	2321      	movs	r3, #33	; 0x21
 80067e8:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80067ec:	2317      	movs	r3, #23
 80067ee:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80067f2:	231e      	movs	r3, #30
 80067f4:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80067f8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80067fc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006800:	2304      	movs	r3, #4
 8006802:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8006806:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800680a:	4618      	mov	r0, r3
 800680c:	f7fa f8c9 	bl	80009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8006810:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8006814:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	4613      	mov	r3, r2
 800681c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8006820:	ca06      	ldmia	r2, {r1, r2}
 8006822:	481c      	ldr	r0, [pc, #112]	; (8006894 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8006824:	f7fa f8d5 	bl	80009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8006828:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800682c:	4618      	mov	r0, r3
 800682e:	f7fa f8c4 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8006832:	1d3b      	adds	r3, r7, #4
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10e      	bne.n	8006858 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800683a:	463b      	mov	r3, r7
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006842:	4293      	cmp	r3, r2
 8006844:	d108      	bne.n	8006858 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8006846:	4813      	ldr	r0, [pc, #76]	; (8006894 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8006848:	f7fc fd1c 	bl	8003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 800684c:	4810      	ldr	r0, [pc, #64]	; (8006890 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800684e:	f7fc fd26 	bl	800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8006852:	4804      	ldr	r0, [pc, #16]	; (8006864 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006854:	f7fc fd30 	bl	80032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8006858:	bf00      	nop
 800685a:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800685e:	46bd      	mov	sp, r7
 8006860:	bd90      	pop	{r4, r7, pc}
 8006862:	bf00      	nop
 8006864:	20000490 	.word	0x20000490
 8006868:	0800a7e8 	.word	0x0800a7e8
 800686c:	0800a7f0 	.word	0x0800a7f0
 8006870:	0800a7f8 	.word	0x0800a7f8
 8006874:	0800a800 	.word	0x0800a800
 8006878:	0800a808 	.word	0x0800a808
 800687c:	0800a810 	.word	0x0800a810
 8006880:	0800a814 	.word	0x0800a814
 8006884:	0800a81c 	.word	0x0800a81c
 8006888:	0800a824 	.word	0x0800a824
 800688c:	0800a82c 	.word	0x0800a82c
 8006890:	200004a8 	.word	0x200004a8
 8006894:	200004c0 	.word	0x200004c0

08006898 <_GLOBAL__sub_I__Z11my_main_runP20__UART_HandleTypeDef>:
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
 800689c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80068a0:	2001      	movs	r0, #1
 80068a2:	f7ff fe1d 	bl	80064e0 <_Z41__static_initialization_and_destruction_0ii>
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <_GLOBAL__sub_D__Z11my_main_runP20__UART_HandleTypeDef>:
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80068b0:	2000      	movs	r0, #0
 80068b2:	f7ff fe15 	bl	80064e0 <_Z41__static_initialization_and_destruction_0ii>
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80068be:	4b0f      	ldr	r3, [pc, #60]	; (80068fc <HAL_MspInit+0x44>)
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	4a0e      	ldr	r2, [pc, #56]	; (80068fc <HAL_MspInit+0x44>)
 80068c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c8:	6413      	str	r3, [r2, #64]	; 0x40
 80068ca:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <HAL_MspInit+0x44>)
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d2:	607b      	str	r3, [r7, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068d6:	4b09      	ldr	r3, [pc, #36]	; (80068fc <HAL_MspInit+0x44>)
 80068d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068da:	4a08      	ldr	r2, [pc, #32]	; (80068fc <HAL_MspInit+0x44>)
 80068dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068e0:	6453      	str	r3, [r2, #68]	; 0x44
 80068e2:	4b06      	ldr	r3, [pc, #24]	; (80068fc <HAL_MspInit+0x44>)
 80068e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ea:	603b      	str	r3, [r7, #0]
 80068ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	40023800 	.word	0x40023800

08006900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	; 0x28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006908:	f107 0314 	add.w	r3, r7, #20
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	605a      	str	r2, [r3, #4]
 8006912:	609a      	str	r2, [r3, #8]
 8006914:	60da      	str	r2, [r3, #12]
 8006916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1b      	ldr	r2, [pc, #108]	; (800698c <HAL_UART_MspInit+0x8c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d130      	bne.n	8006984 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006922:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <HAL_UART_MspInit+0x90>)
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	4a1a      	ldr	r2, [pc, #104]	; (8006990 <HAL_UART_MspInit+0x90>)
 8006928:	f043 0310 	orr.w	r3, r3, #16
 800692c:	6453      	str	r3, [r2, #68]	; 0x44
 800692e:	4b18      	ldr	r3, [pc, #96]	; (8006990 <HAL_UART_MspInit+0x90>)
 8006930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006932:	f003 0310 	and.w	r3, r3, #16
 8006936:	613b      	str	r3, [r7, #16]
 8006938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800693a:	4b15      	ldr	r3, [pc, #84]	; (8006990 <HAL_UART_MspInit+0x90>)
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	4a14      	ldr	r2, [pc, #80]	; (8006990 <HAL_UART_MspInit+0x90>)
 8006940:	f043 0301 	orr.w	r3, r3, #1
 8006944:	6313      	str	r3, [r2, #48]	; 0x30
 8006946:	4b12      	ldr	r3, [pc, #72]	; (8006990 <HAL_UART_MspInit+0x90>)
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006952:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006958:	2302      	movs	r3, #2
 800695a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800695c:	2300      	movs	r3, #0
 800695e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006960:	2303      	movs	r3, #3
 8006962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006964:	2307      	movs	r3, #7
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006968:	f107 0314 	add.w	r3, r7, #20
 800696c:	4619      	mov	r1, r3
 800696e:	4809      	ldr	r0, [pc, #36]	; (8006994 <HAL_UART_MspInit+0x94>)
 8006970:	f000 fcc6 	bl	8007300 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006974:	2200      	movs	r2, #0
 8006976:	2100      	movs	r1, #0
 8006978:	2025      	movs	r0, #37	; 0x25
 800697a:	f000 fbf8 	bl	800716e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800697e:	2025      	movs	r0, #37	; 0x25
 8006980:	f000 fc11 	bl	80071a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006984:	bf00      	nop
 8006986:	3728      	adds	r7, #40	; 0x28
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40011000 	.word	0x40011000
 8006990:	40023800 	.word	0x40023800
 8006994:	40020000 	.word	0x40020000

08006998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800699c:	e7fe      	b.n	800699c <NMI_Handler+0x4>

0800699e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800699e:	b480      	push	{r7}
 80069a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069a2:	e7fe      	b.n	80069a2 <HardFault_Handler+0x4>

080069a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069a8:	e7fe      	b.n	80069a8 <MemManage_Handler+0x4>

080069aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069aa:	b480      	push	{r7}
 80069ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069ae:	e7fe      	b.n	80069ae <BusFault_Handler+0x4>

080069b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069b4:	e7fe      	b.n	80069b4 <UsageFault_Handler+0x4>

080069b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069b6:	b480      	push	{r7}
 80069b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069ba:	bf00      	nop
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80069c8:	bf00      	nop
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069d2:	b480      	push	{r7}
 80069d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069d6:	bf00      	nop
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80069e4:	f000 fac8 	bl	8006f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069e8:	bf00      	nop
 80069ea:	bd80      	pop	{r7, pc}

080069ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80069f0:	4802      	ldr	r0, [pc, #8]	; (80069fc <USART1_IRQHandler+0x10>)
 80069f2:	f001 ffcd 	bl	8008990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80069f6:	bf00      	nop
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	2000040c 	.word	0x2000040c

08006a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
	return 1;
 8006a04:	2301      	movs	r3, #1
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <_kill>:

int _kill(int pid, int sig)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006a1a:	f003 f83f 	bl	8009a9c <__errno>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2216      	movs	r2, #22
 8006a22:	601a      	str	r2, [r3, #0]
	return -1;
 8006a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <_exit>:

void _exit (int status)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006a38:	f04f 31ff 	mov.w	r1, #4294967295
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff ffe7 	bl	8006a10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006a42:	e7fe      	b.n	8006a42 <_exit+0x12>

08006a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a4c:	4a14      	ldr	r2, [pc, #80]	; (8006aa0 <_sbrk+0x5c>)
 8006a4e:	4b15      	ldr	r3, [pc, #84]	; (8006aa4 <_sbrk+0x60>)
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a58:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <_sbrk+0x64>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a60:	4b11      	ldr	r3, [pc, #68]	; (8006aa8 <_sbrk+0x64>)
 8006a62:	4a12      	ldr	r2, [pc, #72]	; (8006aac <_sbrk+0x68>)
 8006a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a66:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <_sbrk+0x64>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d207      	bcs.n	8006a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a74:	f003 f812 	bl	8009a9c <__errno>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	220c      	movs	r2, #12
 8006a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a82:	e009      	b.n	8006a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a84:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <_sbrk+0x64>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a8a:	4b07      	ldr	r3, [pc, #28]	; (8006aa8 <_sbrk+0x64>)
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4413      	add	r3, r2
 8006a92:	4a05      	ldr	r2, [pc, #20]	; (8006aa8 <_sbrk+0x64>)
 8006a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a96:	68fb      	ldr	r3, [r7, #12]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20050000 	.word	0x20050000
 8006aa4:	00000400 	.word	0x00000400
 8006aa8:	200004d8 	.word	0x200004d8
 8006aac:	200005d8 	.word	0x200005d8

08006ab0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006ab4:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <SystemInit+0x20>)
 8006ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aba:	4a05      	ldr	r2, [pc, #20]	; (8006ad0 <SystemInit+0x20>)
 8006abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006ac4:	bf00      	nop
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	e000ed00 	.word	0xe000ed00

08006ad4 <_Z41__static_initialization_and_destruction_0ii>:

	ADD_PAR(Yzad);
	ADD_PAR(P);
	ADD_PAR(I);
	ADD_PAR(D);
}
 8006ad4:	b590      	push	{r4, r7, lr}
 8006ad6:	b0e7      	sub	sp, #412	; 0x19c
 8006ad8:	af02      	add	r7, sp, #8
 8006ada:	1d3b      	adds	r3, r7, #4
 8006adc:	6018      	str	r0, [r3, #0]
 8006ade:	463b      	mov	r3, r7
 8006ae0:	6019      	str	r1, [r3, #0]
 8006ae2:	1d3b      	adds	r3, r7, #4
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	f040 819d 	bne.w	8006e26 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8006aec:	463b      	mov	r3, r7
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006af4:	4293      	cmp	r3, r2
 8006af6:	f040 8196 	bne.w	8006e26 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8006afa:	f107 0314 	add.w	r3, r7, #20
 8006afe:	4618      	mov	r0, r3
 8006b00:	2322      	movs	r3, #34	; 0x22
 8006b02:	461a      	mov	r2, r3
 8006b04:	2100      	movs	r1, #0
 8006b06:	f003 f839 	bl	8009b7c <memset>
 8006b0a:	f107 0314 	add.w	r3, r7, #20
 8006b0e:	223a      	movs	r2, #58	; 0x3a
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	f107 0314 	add.w	r3, r7, #20
 8006b16:	2201      	movs	r2, #1
 8006b18:	705a      	strb	r2, [r3, #1]
 8006b1a:	f107 0314 	add.w	r3, r7, #20
 8006b1e:	220a      	movs	r2, #10
 8006b20:	709a      	strb	r2, [r3, #2]
 8006b22:	f107 0314 	add.w	r3, r7, #20
 8006b26:	220a      	movs	r2, #10
 8006b28:	70da      	strb	r2, [r3, #3]
 8006b2a:	f107 0314 	add.w	r3, r7, #20
 8006b2e:	222c      	movs	r2, #44	; 0x2c
 8006b30:	711a      	strb	r2, [r3, #4]
 8006b32:	f107 0314 	add.w	r3, r7, #20
 8006b36:	220c      	movs	r2, #12
 8006b38:	715a      	strb	r2, [r3, #5]
 8006b3a:	f107 0314 	add.w	r3, r7, #20
 8006b3e:	222e      	movs	r2, #46	; 0x2e
 8006b40:	719a      	strb	r2, [r3, #6]
 8006b42:	f107 0314 	add.w	r3, r7, #20
 8006b46:	220b      	movs	r2, #11
 8006b48:	71da      	strb	r2, [r3, #7]
 8006b4a:	f107 0314 	add.w	r3, r7, #20
 8006b4e:	225b      	movs	r2, #91	; 0x5b
 8006b50:	721a      	strb	r2, [r3, #8]
 8006b52:	f107 0314 	add.w	r3, r7, #20
 8006b56:	220d      	movs	r2, #13
 8006b58:	725a      	strb	r2, [r3, #9]
 8006b5a:	f107 0314 	add.w	r3, r7, #20
 8006b5e:	225d      	movs	r2, #93	; 0x5d
 8006b60:	729a      	strb	r2, [r3, #10]
 8006b62:	f107 0314 	add.w	r3, r7, #20
 8006b66:	220e      	movs	r2, #14
 8006b68:	72da      	strb	r2, [r3, #11]
 8006b6a:	f107 0314 	add.w	r3, r7, #20
 8006b6e:	227c      	movs	r2, #124	; 0x7c
 8006b70:	731a      	strb	r2, [r3, #12]
 8006b72:	f107 0314 	add.w	r3, r7, #20
 8006b76:	2215      	movs	r2, #21
 8006b78:	735a      	strb	r2, [r3, #13]
 8006b7a:	f107 0314 	add.w	r3, r7, #20
 8006b7e:	2226      	movs	r2, #38	; 0x26
 8006b80:	739a      	strb	r2, [r3, #14]
 8006b82:	f107 0314 	add.w	r3, r7, #20
 8006b86:	2216      	movs	r2, #22
 8006b88:	73da      	strb	r2, [r3, #15]
 8006b8a:	f107 0314 	add.w	r3, r7, #20
 8006b8e:	222b      	movs	r2, #43	; 0x2b
 8006b90:	741a      	strb	r2, [r3, #16]
 8006b92:	f107 0314 	add.w	r3, r7, #20
 8006b96:	221f      	movs	r2, #31
 8006b98:	745a      	strb	r2, [r3, #17]
 8006b9a:	f107 0314 	add.w	r3, r7, #20
 8006b9e:	222d      	movs	r2, #45	; 0x2d
 8006ba0:	749a      	strb	r2, [r3, #18]
 8006ba2:	f107 0314 	add.w	r3, r7, #20
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	74da      	strb	r2, [r3, #19]
 8006baa:	f107 0314 	add.w	r3, r7, #20
 8006bae:	222a      	movs	r2, #42	; 0x2a
 8006bb0:	751a      	strb	r2, [r3, #20]
 8006bb2:	f107 0314 	add.w	r3, r7, #20
 8006bb6:	2221      	movs	r2, #33	; 0x21
 8006bb8:	755a      	strb	r2, [r3, #21]
 8006bba:	f107 0314 	add.w	r3, r7, #20
 8006bbe:	222f      	movs	r2, #47	; 0x2f
 8006bc0:	759a      	strb	r2, [r3, #22]
 8006bc2:	f107 0314 	add.w	r3, r7, #20
 8006bc6:	2222      	movs	r2, #34	; 0x22
 8006bc8:	75da      	strb	r2, [r3, #23]
 8006bca:	f107 0314 	add.w	r3, r7, #20
 8006bce:	225e      	movs	r2, #94	; 0x5e
 8006bd0:	761a      	strb	r2, [r3, #24]
 8006bd2:	f107 0314 	add.w	r3, r7, #20
 8006bd6:	2223      	movs	r2, #35	; 0x23
 8006bd8:	765a      	strb	r2, [r3, #25]
 8006bda:	f107 0314 	add.w	r3, r7, #20
 8006bde:	2225      	movs	r2, #37	; 0x25
 8006be0:	769a      	strb	r2, [r3, #26]
 8006be2:	f107 0314 	add.w	r3, r7, #20
 8006be6:	2224      	movs	r2, #36	; 0x24
 8006be8:	76da      	strb	r2, [r3, #27]
 8006bea:	f107 0314 	add.w	r3, r7, #20
 8006bee:	2228      	movs	r2, #40	; 0x28
 8006bf0:	771a      	strb	r2, [r3, #28]
 8006bf2:	f107 0314 	add.w	r3, r7, #20
 8006bf6:	2226      	movs	r2, #38	; 0x26
 8006bf8:	775a      	strb	r2, [r3, #29]
 8006bfa:	f107 0314 	add.w	r3, r7, #20
 8006bfe:	2229      	movs	r2, #41	; 0x29
 8006c00:	779a      	strb	r2, [r3, #30]
 8006c02:	f107 0314 	add.w	r3, r7, #20
 8006c06:	2227      	movs	r2, #39	; 0x27
 8006c08:	77da      	strb	r2, [r3, #31]
 8006c0a:	f107 0314 	add.w	r3, r7, #20
 8006c0e:	2225      	movs	r2, #37	; 0x25
 8006c10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006c14:	f107 030c 	add.w	r3, r7, #12
 8006c18:	f107 0214 	add.w	r2, r7, #20
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	f107 030c 	add.w	r3, r7, #12
 8006c22:	2211      	movs	r2, #17
 8006c24:	605a      	str	r2, [r3, #4]
 8006c26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7f9 fdcc 	bl	80007c8 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8006c30:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006c34:	f107 020c 	add.w	r2, r7, #12
 8006c38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	ca06      	ldmia	r2, {r1, r2}
 8006c42:	4885      	ldr	r0, [pc, #532]	; (8006e58 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006c44:	f7f9 fdd8 	bl	80007f8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8006c48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7f9 fdc7 	bl	80007e0 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8006c52:	2305      	movs	r3, #5
 8006c54:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8006c58:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8006c5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c60:	497e      	ldr	r1, [pc, #504]	; (8006e5c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7f9 fcb4 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8006c68:	2306      	movs	r3, #6
 8006c6a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8006c6e:	f207 1263 	addw	r2, r7, #355	; 0x163
 8006c72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c76:	331c      	adds	r3, #28
 8006c78:	4979      	ldr	r1, [pc, #484]	; (8006e60 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7f9 fcd0 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8006c80:	2307      	movs	r3, #7
 8006c82:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8006c86:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8006c8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c8e:	3338      	adds	r3, #56	; 0x38
 8006c90:	4974      	ldr	r1, [pc, #464]	; (8006e64 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7f9 fcc4 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8006c98:	2308      	movs	r3, #8
 8006c9a:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8006c9e:	f207 1265 	addw	r2, r7, #357	; 0x165
 8006ca2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006ca6:	3354      	adds	r3, #84	; 0x54
 8006ca8:	496f      	ldr	r1, [pc, #444]	; (8006e68 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7f9 fc90 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8006cb0:	2309      	movs	r3, #9
 8006cb2:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8006cb6:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8006cba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006cbe:	3370      	adds	r3, #112	; 0x70
 8006cc0:	496a      	ldr	r1, [pc, #424]	; (8006e6c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7f9 fcd4 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8006cc8:	2310      	movs	r3, #16
 8006cca:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8006cce:	f207 1267 	addw	r2, r7, #359	; 0x167
 8006cd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006cd6:	338c      	adds	r3, #140	; 0x8c
 8006cd8:	4965      	ldr	r1, [pc, #404]	; (8006e70 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7f9 fcf0 	bl	80006c0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8006ce0:	2311      	movs	r3, #17
 8006ce2:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8006ce6:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8006cea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006cee:	33a8      	adds	r3, #168	; 0xa8
 8006cf0:	4960      	ldr	r1, [pc, #384]	; (8006e74 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7f9 fcbc 	bl	8000670 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8006cf8:	2312      	movs	r3, #18
 8006cfa:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8006cfe:	f207 1269 	addw	r2, r7, #361	; 0x169
 8006d02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006d06:	33c4      	adds	r3, #196	; 0xc4
 8006d08:	495b      	ldr	r1, [pc, #364]	; (8006e78 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7f9 fc60 	bl	80005d0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8006d10:	2313      	movs	r3, #19
 8006d12:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8006d16:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8006d1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006d1e:	33e0      	adds	r3, #224	; 0xe0
 8006d20:	4956      	ldr	r1, [pc, #344]	; (8006e7c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7f9 fc7c 	bl	8000620 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8006d28:	2314      	movs	r3, #20
 8006d2a:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8006d2e:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8006d32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006d36:	33fc      	adds	r3, #252	; 0xfc
 8006d38:	4951      	ldr	r1, [pc, #324]	; (8006e80 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7f9 fce8 	bl	8000710 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8006d40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d4e:	220a      	movs	r2, #10
 8006d50:	605a      	str	r2, [r3, #4]
 8006d52:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7f9 fddb 	bl	8000912 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8006d5c:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8006d60:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006d64:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	ca06      	ldmia	r2, {r1, r2}
 8006d6e:	4845      	ldr	r0, [pc, #276]	; (8006e84 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8006d70:	f7f9 fde7 	bl	8000942 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8006d74:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7f9 fdd6 	bl	800092a <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8006d7e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8006d82:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8006d86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006d8a:	429c      	cmp	r4, r3
 8006d8c:	d004      	beq.n	8006d98 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8006d8e:	3c1c      	subs	r4, #28
 8006d90:	4620      	mov	r0, r4
 8006d92:	f7f9 fc10 	bl	80005b6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8006d96:	e7f6      	b.n	8006d86 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8006d98:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	605a      	str	r2, [r3, #4]
 8006da2:	609a      	str	r2, [r3, #8]
 8006da4:	233c      	movs	r3, #60	; 0x3c
 8006da6:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8006daa:	231b      	movs	r3, #27
 8006dac:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8006db0:	231c      	movs	r3, #28
 8006db2:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8006db6:	233e      	movs	r3, #62	; 0x3e
 8006db8:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8006dbc:	2319      	movs	r3, #25
 8006dbe:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8006dc2:	231a      	movs	r3, #26
 8006dc4:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8006dc8:	233d      	movs	r3, #61	; 0x3d
 8006dca:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8006dce:	2318      	movs	r3, #24
 8006dd0:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8006dd4:	231d      	movs	r3, #29
 8006dd6:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8006dda:	2321      	movs	r3, #33	; 0x21
 8006ddc:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8006de0:	2317      	movs	r3, #23
 8006de2:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8006de6:	231e      	movs	r3, #30
 8006de8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8006dec:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8006df0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006df4:	2304      	movs	r3, #4
 8006df6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8006dfa:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7f9 fdcf 	bl	80009a2 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8006e04:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8006e08:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8006e14:	ca06      	ldmia	r2, {r1, r2}
 8006e16:	481c      	ldr	r0, [pc, #112]	; (8006e88 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8006e18:	f7f9 fddb 	bl	80009d2 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8006e1c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7f9 fdca 	bl	80009ba <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8006e26:	1d3b      	adds	r3, r7, #4
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10e      	bne.n	8006e4c <_Z41__static_initialization_and_destruction_0ii+0x378>
 8006e2e:	463b      	mov	r3, r7
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d108      	bne.n	8006e4c <_Z41__static_initialization_and_destruction_0ii+0x378>
 8006e3a:	4813      	ldr	r0, [pc, #76]	; (8006e88 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8006e3c:	f7fc fa22 	bl	8003284 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8006e40:	4810      	ldr	r0, [pc, #64]	; (8006e84 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8006e42:	f7fc fa2c 	bl	800329e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8006e46:	4804      	ldr	r0, [pc, #16]	; (8006e58 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006e48:	f7fc fa36 	bl	80032b8 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8006e4c:	bf00      	nop
 8006e4e:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd90      	pop	{r4, r7, pc}
 8006e56:	bf00      	nop
 8006e58:	200004dc 	.word	0x200004dc
 8006e5c:	0800a8b0 	.word	0x0800a8b0
 8006e60:	0800a8b8 	.word	0x0800a8b8
 8006e64:	0800a8c0 	.word	0x0800a8c0
 8006e68:	0800a8c8 	.word	0x0800a8c8
 8006e6c:	0800a8d0 	.word	0x0800a8d0
 8006e70:	0800a8d8 	.word	0x0800a8d8
 8006e74:	0800a8dc 	.word	0x0800a8dc
 8006e78:	0800a8e4 	.word	0x0800a8e4
 8006e7c:	0800a8ec 	.word	0x0800a8ec
 8006e80:	0800a8f4 	.word	0x0800a8f4
 8006e84:	200004f4 	.word	0x200004f4
 8006e88:	2000050c 	.word	0x2000050c

08006e8c <_GLOBAL__sub_I__ZN16Function_handlerC2Ev>:
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006e94:	2001      	movs	r0, #1
 8006e96:	f7ff fe1d 	bl	8006ad4 <_Z41__static_initialization_and_destruction_0ii>
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <_GLOBAL__sub_D__ZN16Function_handlerC2Ev>:
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	f7ff fe15 	bl	8006ad4 <_Z41__static_initialization_and_destruction_0ii>
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ee4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006eb0:	480d      	ldr	r0, [pc, #52]	; (8006ee8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006eb2:	490e      	ldr	r1, [pc, #56]	; (8006eec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006eb4:	4a0e      	ldr	r2, [pc, #56]	; (8006ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006eb8:	e002      	b.n	8006ec0 <LoopCopyDataInit>

08006eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ebe:	3304      	adds	r3, #4

08006ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ec4:	d3f9      	bcc.n	8006eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ec6:	4a0b      	ldr	r2, [pc, #44]	; (8006ef4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006ec8:	4c0b      	ldr	r4, [pc, #44]	; (8006ef8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ecc:	e001      	b.n	8006ed2 <LoopFillZerobss>

08006ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ed0:	3204      	adds	r2, #4

08006ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ed4:	d3fb      	bcc.n	8006ece <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006ed6:	f7ff fdeb 	bl	8006ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006eda:	f002 fde5 	bl	8009aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ede:	f7fe fffb 	bl	8005ed8 <main>
  bx  lr    
 8006ee2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006ee4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006eec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8006ef0:	0800aa24 	.word	0x0800aa24
  ldr r2, =_sbss
 8006ef4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8006ef8:	200005d4 	.word	0x200005d4

08006efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006efc:	e7fe      	b.n	8006efc <ADC_IRQHandler>

08006efe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f02:	2003      	movs	r0, #3
 8006f04:	f000 f928 	bl	8007158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f08:	200f      	movs	r0, #15
 8006f0a:	f000 f805 	bl	8006f18 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006f0e:	f7ff fcd3 	bl	80068b8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006f20:	4b12      	ldr	r3, [pc, #72]	; (8006f6c <HAL_InitTick+0x54>)
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <HAL_InitTick+0x58>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f943 	bl	80071c2 <HAL_SYSTICK_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e00e      	b.n	8006f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b0f      	cmp	r3, #15
 8006f4a:	d80a      	bhi.n	8006f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	f04f 30ff 	mov.w	r0, #4294967295
 8006f54:	f000 f90b 	bl	800716e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f58:	4a06      	ldr	r2, [pc, #24]	; (8006f74 <HAL_InitTick+0x5c>)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e000      	b.n	8006f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	20000000 	.word	0x20000000
 8006f70:	20000008 	.word	0x20000008
 8006f74:	20000004 	.word	0x20000004

08006f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f7c:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <HAL_IncTick+0x20>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <HAL_IncTick+0x24>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4413      	add	r3, r2
 8006f88:	4a04      	ldr	r2, [pc, #16]	; (8006f9c <HAL_IncTick+0x24>)
 8006f8a:	6013      	str	r3, [r2, #0]
}
 8006f8c:	bf00      	nop
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	20000008 	.word	0x20000008
 8006f9c:	200005c0 	.word	0x200005c0

08006fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8006fa4:	4b03      	ldr	r3, [pc, #12]	; (8006fb4 <HAL_GetTick+0x14>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	200005c0 	.word	0x200005c0

08006fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <__NVIC_SetPriorityGrouping+0x40>)
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006fe0:	4b06      	ldr	r3, [pc, #24]	; (8006ffc <__NVIC_SetPriorityGrouping+0x44>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fe6:	4a04      	ldr	r2, [pc, #16]	; (8006ff8 <__NVIC_SetPriorityGrouping+0x40>)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	60d3      	str	r3, [r2, #12]
}
 8006fec:	bf00      	nop
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	e000ed00 	.word	0xe000ed00
 8006ffc:	05fa0000 	.word	0x05fa0000

08007000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007004:	4b04      	ldr	r3, [pc, #16]	; (8007018 <__NVIC_GetPriorityGrouping+0x18>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	0a1b      	lsrs	r3, r3, #8
 800700a:	f003 0307 	and.w	r3, r3, #7
}
 800700e:	4618      	mov	r0, r3
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	e000ed00 	.word	0xe000ed00

0800701c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	4603      	mov	r3, r0
 8007024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800702a:	2b00      	cmp	r3, #0
 800702c:	db0b      	blt.n	8007046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	f003 021f 	and.w	r2, r3, #31
 8007034:	4907      	ldr	r1, [pc, #28]	; (8007054 <__NVIC_EnableIRQ+0x38>)
 8007036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800703a:	095b      	lsrs	r3, r3, #5
 800703c:	2001      	movs	r0, #1
 800703e:	fa00 f202 	lsl.w	r2, r0, r2
 8007042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	e000e100 	.word	0xe000e100

08007058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	6039      	str	r1, [r7, #0]
 8007062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007068:	2b00      	cmp	r3, #0
 800706a:	db0a      	blt.n	8007082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	b2da      	uxtb	r2, r3
 8007070:	490c      	ldr	r1, [pc, #48]	; (80070a4 <__NVIC_SetPriority+0x4c>)
 8007072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007076:	0112      	lsls	r2, r2, #4
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	440b      	add	r3, r1
 800707c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007080:	e00a      	b.n	8007098 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	b2da      	uxtb	r2, r3
 8007086:	4908      	ldr	r1, [pc, #32]	; (80070a8 <__NVIC_SetPriority+0x50>)
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	3b04      	subs	r3, #4
 8007090:	0112      	lsls	r2, r2, #4
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	440b      	add	r3, r1
 8007096:	761a      	strb	r2, [r3, #24]
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	e000e100 	.word	0xe000e100
 80070a8:	e000ed00 	.word	0xe000ed00

080070ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b089      	sub	sp, #36	; 0x24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f1c3 0307 	rsb	r3, r3, #7
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	bf28      	it	cs
 80070ca:	2304      	movcs	r3, #4
 80070cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	3304      	adds	r3, #4
 80070d2:	2b06      	cmp	r3, #6
 80070d4:	d902      	bls.n	80070dc <NVIC_EncodePriority+0x30>
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	3b03      	subs	r3, #3
 80070da:	e000      	b.n	80070de <NVIC_EncodePriority+0x32>
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070e0:	f04f 32ff 	mov.w	r2, #4294967295
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ea:	43da      	mvns	r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	401a      	ands	r2, r3
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070f4:	f04f 31ff 	mov.w	r1, #4294967295
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	fa01 f303 	lsl.w	r3, r1, r3
 80070fe:	43d9      	mvns	r1, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007104:	4313      	orrs	r3, r2
         );
}
 8007106:	4618      	mov	r0, r3
 8007108:	3724      	adds	r7, #36	; 0x24
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3b01      	subs	r3, #1
 8007120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007124:	d301      	bcc.n	800712a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007126:	2301      	movs	r3, #1
 8007128:	e00f      	b.n	800714a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800712a:	4a0a      	ldr	r2, [pc, #40]	; (8007154 <SysTick_Config+0x40>)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3b01      	subs	r3, #1
 8007130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007132:	210f      	movs	r1, #15
 8007134:	f04f 30ff 	mov.w	r0, #4294967295
 8007138:	f7ff ff8e 	bl	8007058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800713c:	4b05      	ldr	r3, [pc, #20]	; (8007154 <SysTick_Config+0x40>)
 800713e:	2200      	movs	r2, #0
 8007140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007142:	4b04      	ldr	r3, [pc, #16]	; (8007154 <SysTick_Config+0x40>)
 8007144:	2207      	movs	r2, #7
 8007146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	e000e010 	.word	0xe000e010

08007158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff ff29 	bl	8006fb8 <__NVIC_SetPriorityGrouping>
}
 8007166:	bf00      	nop
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800716e:	b580      	push	{r7, lr}
 8007170:	b086      	sub	sp, #24
 8007172:	af00      	add	r7, sp, #0
 8007174:	4603      	mov	r3, r0
 8007176:	60b9      	str	r1, [r7, #8]
 8007178:	607a      	str	r2, [r7, #4]
 800717a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007180:	f7ff ff3e 	bl	8007000 <__NVIC_GetPriorityGrouping>
 8007184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	68b9      	ldr	r1, [r7, #8]
 800718a:	6978      	ldr	r0, [r7, #20]
 800718c:	f7ff ff8e 	bl	80070ac <NVIC_EncodePriority>
 8007190:	4602      	mov	r2, r0
 8007192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007196:	4611      	mov	r1, r2
 8007198:	4618      	mov	r0, r3
 800719a:	f7ff ff5d 	bl	8007058 <__NVIC_SetPriority>
}
 800719e:	bf00      	nop
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	4603      	mov	r3, r0
 80071ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff ff31 	bl	800701c <__NVIC_EnableIRQ>
}
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff ffa2 	bl	8007114 <SysTick_Config>
 80071d0:	4603      	mov	r3, r0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80071e8:	f7ff feda 	bl	8006fa0 <HAL_GetTick>
 80071ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d008      	beq.n	800720c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2280      	movs	r2, #128	; 0x80
 80071fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e052      	b.n	80072b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0216 	bic.w	r2, r2, #22
 800721a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695a      	ldr	r2, [r3, #20]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800722a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	2b00      	cmp	r3, #0
 8007232:	d103      	bne.n	800723c <HAL_DMA_Abort+0x62>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007238:	2b00      	cmp	r3, #0
 800723a:	d007      	beq.n	800724c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0208 	bic.w	r2, r2, #8
 800724a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0201 	bic.w	r2, r2, #1
 800725a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800725c:	e013      	b.n	8007286 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800725e:	f7ff fe9f 	bl	8006fa0 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b05      	cmp	r3, #5
 800726a:	d90c      	bls.n	8007286 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2203      	movs	r2, #3
 800727e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e015      	b.n	80072b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e4      	bne.n	800725e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007298:	223f      	movs	r2, #63	; 0x3f
 800729a:	409a      	lsls	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d004      	beq.n	80072d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2280      	movs	r2, #128	; 0x80
 80072d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e00c      	b.n	80072f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2205      	movs	r2, #5
 80072dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0201 	bic.w	r2, r2, #1
 80072ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
	...

08007300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007300:	b480      	push	{r7}
 8007302:	b089      	sub	sp, #36	; 0x24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800730a:	2300      	movs	r3, #0
 800730c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800730e:	2300      	movs	r3, #0
 8007310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007312:	2300      	movs	r3, #0
 8007314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007316:	2300      	movs	r3, #0
 8007318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800731a:	2300      	movs	r3, #0
 800731c:	61fb      	str	r3, [r7, #28]
 800731e:	e175      	b.n	800760c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007320:	2201      	movs	r2, #1
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	fa02 f303 	lsl.w	r3, r2, r3
 8007328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	4013      	ands	r3, r2
 8007332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	429a      	cmp	r2, r3
 800733a:	f040 8164 	bne.w	8007606 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d00b      	beq.n	800735e <HAL_GPIO_Init+0x5e>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2b02      	cmp	r3, #2
 800734c:	d007      	beq.n	800735e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007352:	2b11      	cmp	r3, #17
 8007354:	d003      	beq.n	800735e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b12      	cmp	r3, #18
 800735c:	d130      	bne.n	80073c0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	2203      	movs	r2, #3
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	43db      	mvns	r3, r3
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	4013      	ands	r3, r2
 8007374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	fa02 f303 	lsl.w	r3, r2, r3
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	4313      	orrs	r3, r2
 8007386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007394:	2201      	movs	r2, #1
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	43db      	mvns	r3, r3
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	4013      	ands	r3, r2
 80073a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	091b      	lsrs	r3, r3, #4
 80073aa:	f003 0201 	and.w	r2, r3, #1
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	2203      	movs	r2, #3
 80073cc:	fa02 f303 	lsl.w	r3, r2, r3
 80073d0:	43db      	mvns	r3, r3
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	4013      	ands	r3, r2
 80073d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	fa02 f303 	lsl.w	r3, r2, r3
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d003      	beq.n	8007400 <HAL_GPIO_Init+0x100>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	2b12      	cmp	r3, #18
 80073fe:	d123      	bne.n	8007448 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	08da      	lsrs	r2, r3, #3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	3208      	adds	r2, #8
 8007408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	f003 0307 	and.w	r3, r3, #7
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	220f      	movs	r2, #15
 8007418:	fa02 f303 	lsl.w	r3, r2, r3
 800741c:	43db      	mvns	r3, r3
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	4013      	ands	r3, r2
 8007422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	691a      	ldr	r2, [r3, #16]
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	fa02 f303 	lsl.w	r3, r2, r3
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	4313      	orrs	r3, r2
 8007438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	08da      	lsrs	r2, r3, #3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3208      	adds	r2, #8
 8007442:	69b9      	ldr	r1, [r7, #24]
 8007444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	2203      	movs	r2, #3
 8007454:	fa02 f303 	lsl.w	r3, r2, r3
 8007458:	43db      	mvns	r3, r3
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	4013      	ands	r3, r2
 800745e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f003 0203 	and.w	r2, r3, #3
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	fa02 f303 	lsl.w	r3, r2, r3
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	4313      	orrs	r3, r2
 8007474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 80be 	beq.w	8007606 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800748a:	4b66      	ldr	r3, [pc, #408]	; (8007624 <HAL_GPIO_Init+0x324>)
 800748c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748e:	4a65      	ldr	r2, [pc, #404]	; (8007624 <HAL_GPIO_Init+0x324>)
 8007490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007494:	6453      	str	r3, [r2, #68]	; 0x44
 8007496:	4b63      	ldr	r3, [pc, #396]	; (8007624 <HAL_GPIO_Init+0x324>)
 8007498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80074a2:	4a61      	ldr	r2, [pc, #388]	; (8007628 <HAL_GPIO_Init+0x328>)
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	089b      	lsrs	r3, r3, #2
 80074a8:	3302      	adds	r3, #2
 80074aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	220f      	movs	r2, #15
 80074ba:	fa02 f303 	lsl.w	r3, r2, r3
 80074be:	43db      	mvns	r3, r3
 80074c0:	69ba      	ldr	r2, [r7, #24]
 80074c2:	4013      	ands	r3, r2
 80074c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a58      	ldr	r2, [pc, #352]	; (800762c <HAL_GPIO_Init+0x32c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d037      	beq.n	800753e <HAL_GPIO_Init+0x23e>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a57      	ldr	r2, [pc, #348]	; (8007630 <HAL_GPIO_Init+0x330>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d031      	beq.n	800753a <HAL_GPIO_Init+0x23a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a56      	ldr	r2, [pc, #344]	; (8007634 <HAL_GPIO_Init+0x334>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d02b      	beq.n	8007536 <HAL_GPIO_Init+0x236>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a55      	ldr	r2, [pc, #340]	; (8007638 <HAL_GPIO_Init+0x338>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d025      	beq.n	8007532 <HAL_GPIO_Init+0x232>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a54      	ldr	r2, [pc, #336]	; (800763c <HAL_GPIO_Init+0x33c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d01f      	beq.n	800752e <HAL_GPIO_Init+0x22e>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a53      	ldr	r2, [pc, #332]	; (8007640 <HAL_GPIO_Init+0x340>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d019      	beq.n	800752a <HAL_GPIO_Init+0x22a>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a52      	ldr	r2, [pc, #328]	; (8007644 <HAL_GPIO_Init+0x344>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d013      	beq.n	8007526 <HAL_GPIO_Init+0x226>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a51      	ldr	r2, [pc, #324]	; (8007648 <HAL_GPIO_Init+0x348>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00d      	beq.n	8007522 <HAL_GPIO_Init+0x222>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a50      	ldr	r2, [pc, #320]	; (800764c <HAL_GPIO_Init+0x34c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d007      	beq.n	800751e <HAL_GPIO_Init+0x21e>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a4f      	ldr	r2, [pc, #316]	; (8007650 <HAL_GPIO_Init+0x350>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d101      	bne.n	800751a <HAL_GPIO_Init+0x21a>
 8007516:	2309      	movs	r3, #9
 8007518:	e012      	b.n	8007540 <HAL_GPIO_Init+0x240>
 800751a:	230a      	movs	r3, #10
 800751c:	e010      	b.n	8007540 <HAL_GPIO_Init+0x240>
 800751e:	2308      	movs	r3, #8
 8007520:	e00e      	b.n	8007540 <HAL_GPIO_Init+0x240>
 8007522:	2307      	movs	r3, #7
 8007524:	e00c      	b.n	8007540 <HAL_GPIO_Init+0x240>
 8007526:	2306      	movs	r3, #6
 8007528:	e00a      	b.n	8007540 <HAL_GPIO_Init+0x240>
 800752a:	2305      	movs	r3, #5
 800752c:	e008      	b.n	8007540 <HAL_GPIO_Init+0x240>
 800752e:	2304      	movs	r3, #4
 8007530:	e006      	b.n	8007540 <HAL_GPIO_Init+0x240>
 8007532:	2303      	movs	r3, #3
 8007534:	e004      	b.n	8007540 <HAL_GPIO_Init+0x240>
 8007536:	2302      	movs	r3, #2
 8007538:	e002      	b.n	8007540 <HAL_GPIO_Init+0x240>
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <HAL_GPIO_Init+0x240>
 800753e:	2300      	movs	r3, #0
 8007540:	69fa      	ldr	r2, [r7, #28]
 8007542:	f002 0203 	and.w	r2, r2, #3
 8007546:	0092      	lsls	r2, r2, #2
 8007548:	4093      	lsls	r3, r2
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	4313      	orrs	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007550:	4935      	ldr	r1, [pc, #212]	; (8007628 <HAL_GPIO_Init+0x328>)
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	089b      	lsrs	r3, r3, #2
 8007556:	3302      	adds	r3, #2
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800755e:	4b3d      	ldr	r3, [pc, #244]	; (8007654 <HAL_GPIO_Init+0x354>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	43db      	mvns	r3, r3
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	4013      	ands	r3, r2
 800756c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007582:	4a34      	ldr	r2, [pc, #208]	; (8007654 <HAL_GPIO_Init+0x354>)
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007588:	4b32      	ldr	r3, [pc, #200]	; (8007654 <HAL_GPIO_Init+0x354>)
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	43db      	mvns	r3, r3
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	4013      	ands	r3, r2
 8007596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80075ac:	4a29      	ldr	r2, [pc, #164]	; (8007654 <HAL_GPIO_Init+0x354>)
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80075b2:	4b28      	ldr	r3, [pc, #160]	; (8007654 <HAL_GPIO_Init+0x354>)
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	43db      	mvns	r3, r3
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	4013      	ands	r3, r2
 80075c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80075d6:	4a1f      	ldr	r2, [pc, #124]	; (8007654 <HAL_GPIO_Init+0x354>)
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80075dc:	4b1d      	ldr	r3, [pc, #116]	; (8007654 <HAL_GPIO_Init+0x354>)
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	43db      	mvns	r3, r3
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	4013      	ands	r3, r2
 80075ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007600:	4a14      	ldr	r2, [pc, #80]	; (8007654 <HAL_GPIO_Init+0x354>)
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	3301      	adds	r3, #1
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	2b0f      	cmp	r3, #15
 8007610:	f67f ae86 	bls.w	8007320 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	3724      	adds	r7, #36	; 0x24
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	40023800 	.word	0x40023800
 8007628:	40013800 	.word	0x40013800
 800762c:	40020000 	.word	0x40020000
 8007630:	40020400 	.word	0x40020400
 8007634:	40020800 	.word	0x40020800
 8007638:	40020c00 	.word	0x40020c00
 800763c:	40021000 	.word	0x40021000
 8007640:	40021400 	.word	0x40021400
 8007644:	40021800 	.word	0x40021800
 8007648:	40021c00 	.word	0x40021c00
 800764c:	40022000 	.word	0x40022000
 8007650:	40022400 	.word	0x40022400
 8007654:	40013c00 	.word	0x40013c00

08007658 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007662:	4b23      	ldr	r3, [pc, #140]	; (80076f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	4a22      	ldr	r2, [pc, #136]	; (80076f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800766c:	6413      	str	r3, [r2, #64]	; 0x40
 800766e:	4b20      	ldr	r3, [pc, #128]	; (80076f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800767a:	4b1e      	ldr	r3, [pc, #120]	; (80076f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a1d      	ldr	r2, [pc, #116]	; (80076f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007684:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007686:	f7ff fc8b 	bl	8006fa0 <HAL_GetTick>
 800768a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800768c:	e009      	b.n	80076a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800768e:	f7ff fc87 	bl	8006fa0 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800769c:	d901      	bls.n	80076a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e022      	b.n	80076e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80076a2:	4b14      	ldr	r3, [pc, #80]	; (80076f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ae:	d1ee      	bne.n	800768e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80076b0:	4b10      	ldr	r3, [pc, #64]	; (80076f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a0f      	ldr	r2, [pc, #60]	; (80076f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076bc:	f7ff fc70 	bl	8006fa0 <HAL_GetTick>
 80076c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80076c2:	e009      	b.n	80076d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80076c4:	f7ff fc6c 	bl	8006fa0 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076d2:	d901      	bls.n	80076d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e007      	b.n	80076e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80076d8:	4b06      	ldr	r3, [pc, #24]	; (80076f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076e4:	d1ee      	bne.n	80076c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	40023800 	.word	0x40023800
 80076f4:	40007000 	.word	0x40007000

080076f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007700:	2300      	movs	r3, #0
 8007702:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e291      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 8087 	beq.w	800782a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800771c:	4b96      	ldr	r3, [pc, #600]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f003 030c 	and.w	r3, r3, #12
 8007724:	2b04      	cmp	r3, #4
 8007726:	d00c      	beq.n	8007742 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007728:	4b93      	ldr	r3, [pc, #588]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f003 030c 	and.w	r3, r3, #12
 8007730:	2b08      	cmp	r3, #8
 8007732:	d112      	bne.n	800775a <HAL_RCC_OscConfig+0x62>
 8007734:	4b90      	ldr	r3, [pc, #576]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800773c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007740:	d10b      	bne.n	800775a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007742:	4b8d      	ldr	r3, [pc, #564]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d06c      	beq.n	8007828 <HAL_RCC_OscConfig+0x130>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d168      	bne.n	8007828 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e26b      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007762:	d106      	bne.n	8007772 <HAL_RCC_OscConfig+0x7a>
 8007764:	4b84      	ldr	r3, [pc, #528]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a83      	ldr	r2, [pc, #524]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 800776a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	e02e      	b.n	80077d0 <HAL_RCC_OscConfig+0xd8>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10c      	bne.n	8007794 <HAL_RCC_OscConfig+0x9c>
 800777a:	4b7f      	ldr	r3, [pc, #508]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a7e      	ldr	r2, [pc, #504]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	4b7c      	ldr	r3, [pc, #496]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a7b      	ldr	r2, [pc, #492]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 800778c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	e01d      	b.n	80077d0 <HAL_RCC_OscConfig+0xd8>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800779c:	d10c      	bne.n	80077b8 <HAL_RCC_OscConfig+0xc0>
 800779e:	4b76      	ldr	r3, [pc, #472]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a75      	ldr	r2, [pc, #468]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 80077a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	4b73      	ldr	r3, [pc, #460]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a72      	ldr	r2, [pc, #456]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 80077b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	e00b      	b.n	80077d0 <HAL_RCC_OscConfig+0xd8>
 80077b8:	4b6f      	ldr	r3, [pc, #444]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a6e      	ldr	r2, [pc, #440]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 80077be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	4b6c      	ldr	r3, [pc, #432]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a6b      	ldr	r2, [pc, #428]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 80077ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d013      	beq.n	8007800 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d8:	f7ff fbe2 	bl	8006fa0 <HAL_GetTick>
 80077dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077de:	e008      	b.n	80077f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077e0:	f7ff fbde 	bl	8006fa0 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b64      	cmp	r3, #100	; 0x64
 80077ec:	d901      	bls.n	80077f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e21f      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077f2:	4b61      	ldr	r3, [pc, #388]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0f0      	beq.n	80077e0 <HAL_RCC_OscConfig+0xe8>
 80077fe:	e014      	b.n	800782a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007800:	f7ff fbce 	bl	8006fa0 <HAL_GetTick>
 8007804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007808:	f7ff fbca 	bl	8006fa0 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b64      	cmp	r3, #100	; 0x64
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e20b      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800781a:	4b57      	ldr	r3, [pc, #348]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1f0      	bne.n	8007808 <HAL_RCC_OscConfig+0x110>
 8007826:	e000      	b.n	800782a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d069      	beq.n	800790a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007836:	4b50      	ldr	r3, [pc, #320]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 030c 	and.w	r3, r3, #12
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00b      	beq.n	800785a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007842:	4b4d      	ldr	r3, [pc, #308]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f003 030c 	and.w	r3, r3, #12
 800784a:	2b08      	cmp	r3, #8
 800784c:	d11c      	bne.n	8007888 <HAL_RCC_OscConfig+0x190>
 800784e:	4b4a      	ldr	r3, [pc, #296]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d116      	bne.n	8007888 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800785a:	4b47      	ldr	r3, [pc, #284]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d005      	beq.n	8007872 <HAL_RCC_OscConfig+0x17a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d001      	beq.n	8007872 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e1df      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007872:	4b41      	ldr	r3, [pc, #260]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	493d      	ldr	r1, [pc, #244]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007882:	4313      	orrs	r3, r2
 8007884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007886:	e040      	b.n	800790a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d023      	beq.n	80078d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007890:	4b39      	ldr	r3, [pc, #228]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a38      	ldr	r2, [pc, #224]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007896:	f043 0301 	orr.w	r3, r3, #1
 800789a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789c:	f7ff fb80 	bl	8006fa0 <HAL_GetTick>
 80078a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078a2:	e008      	b.n	80078b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078a4:	f7ff fb7c 	bl	8006fa0 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e1bd      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078b6:	4b30      	ldr	r3, [pc, #192]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0f0      	beq.n	80078a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078c2:	4b2d      	ldr	r3, [pc, #180]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	4929      	ldr	r1, [pc, #164]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	600b      	str	r3, [r1, #0]
 80078d6:	e018      	b.n	800790a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078d8:	4b27      	ldr	r3, [pc, #156]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a26      	ldr	r2, [pc, #152]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 80078de:	f023 0301 	bic.w	r3, r3, #1
 80078e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e4:	f7ff fb5c 	bl	8006fa0 <HAL_GetTick>
 80078e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ea:	e008      	b.n	80078fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078ec:	f7ff fb58 	bl	8006fa0 <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e199      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078fe:	4b1e      	ldr	r3, [pc, #120]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1f0      	bne.n	80078ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0308 	and.w	r3, r3, #8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d038      	beq.n	8007988 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d019      	beq.n	8007952 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800791e:	4b16      	ldr	r3, [pc, #88]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007922:	4a15      	ldr	r2, [pc, #84]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007924:	f043 0301 	orr.w	r3, r3, #1
 8007928:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800792a:	f7ff fb39 	bl	8006fa0 <HAL_GetTick>
 800792e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007930:	e008      	b.n	8007944 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007932:	f7ff fb35 	bl	8006fa0 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d901      	bls.n	8007944 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e176      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007944:	4b0c      	ldr	r3, [pc, #48]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0f0      	beq.n	8007932 <HAL_RCC_OscConfig+0x23a>
 8007950:	e01a      	b.n	8007988 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007952:	4b09      	ldr	r3, [pc, #36]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007956:	4a08      	ldr	r2, [pc, #32]	; (8007978 <HAL_RCC_OscConfig+0x280>)
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800795e:	f7ff fb1f 	bl	8006fa0 <HAL_GetTick>
 8007962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007964:	e00a      	b.n	800797c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007966:	f7ff fb1b 	bl	8006fa0 <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d903      	bls.n	800797c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e15c      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
 8007978:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800797c:	4b91      	ldr	r3, [pc, #580]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 800797e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1ee      	bne.n	8007966 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 80a4 	beq.w	8007ade <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007996:	4b8b      	ldr	r3, [pc, #556]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10d      	bne.n	80079be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80079a2:	4b88      	ldr	r3, [pc, #544]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	4a87      	ldr	r2, [pc, #540]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 80079a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ac:	6413      	str	r3, [r2, #64]	; 0x40
 80079ae:	4b85      	ldr	r3, [pc, #532]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b6:	60bb      	str	r3, [r7, #8]
 80079b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079ba:	2301      	movs	r3, #1
 80079bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079be:	4b82      	ldr	r3, [pc, #520]	; (8007bc8 <HAL_RCC_OscConfig+0x4d0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d118      	bne.n	80079fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80079ca:	4b7f      	ldr	r3, [pc, #508]	; (8007bc8 <HAL_RCC_OscConfig+0x4d0>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a7e      	ldr	r2, [pc, #504]	; (8007bc8 <HAL_RCC_OscConfig+0x4d0>)
 80079d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079d6:	f7ff fae3 	bl	8006fa0 <HAL_GetTick>
 80079da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079dc:	e008      	b.n	80079f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079de:	f7ff fadf 	bl	8006fa0 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b64      	cmp	r3, #100	; 0x64
 80079ea:	d901      	bls.n	80079f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e120      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079f0:	4b75      	ldr	r3, [pc, #468]	; (8007bc8 <HAL_RCC_OscConfig+0x4d0>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0f0      	beq.n	80079de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d106      	bne.n	8007a12 <HAL_RCC_OscConfig+0x31a>
 8007a04:	4b6f      	ldr	r3, [pc, #444]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a08:	4a6e      	ldr	r2, [pc, #440]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a0a:	f043 0301 	orr.w	r3, r3, #1
 8007a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a10:	e02d      	b.n	8007a6e <HAL_RCC_OscConfig+0x376>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10c      	bne.n	8007a34 <HAL_RCC_OscConfig+0x33c>
 8007a1a:	4b6a      	ldr	r3, [pc, #424]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1e:	4a69      	ldr	r2, [pc, #420]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a20:	f023 0301 	bic.w	r3, r3, #1
 8007a24:	6713      	str	r3, [r2, #112]	; 0x70
 8007a26:	4b67      	ldr	r3, [pc, #412]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2a:	4a66      	ldr	r2, [pc, #408]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a2c:	f023 0304 	bic.w	r3, r3, #4
 8007a30:	6713      	str	r3, [r2, #112]	; 0x70
 8007a32:	e01c      	b.n	8007a6e <HAL_RCC_OscConfig+0x376>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	2b05      	cmp	r3, #5
 8007a3a:	d10c      	bne.n	8007a56 <HAL_RCC_OscConfig+0x35e>
 8007a3c:	4b61      	ldr	r3, [pc, #388]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a40:	4a60      	ldr	r2, [pc, #384]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a42:	f043 0304 	orr.w	r3, r3, #4
 8007a46:	6713      	str	r3, [r2, #112]	; 0x70
 8007a48:	4b5e      	ldr	r3, [pc, #376]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4c:	4a5d      	ldr	r2, [pc, #372]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a4e:	f043 0301 	orr.w	r3, r3, #1
 8007a52:	6713      	str	r3, [r2, #112]	; 0x70
 8007a54:	e00b      	b.n	8007a6e <HAL_RCC_OscConfig+0x376>
 8007a56:	4b5b      	ldr	r3, [pc, #364]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5a:	4a5a      	ldr	r2, [pc, #360]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a5c:	f023 0301 	bic.w	r3, r3, #1
 8007a60:	6713      	str	r3, [r2, #112]	; 0x70
 8007a62:	4b58      	ldr	r3, [pc, #352]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a66:	4a57      	ldr	r2, [pc, #348]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a68:	f023 0304 	bic.w	r3, r3, #4
 8007a6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d015      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a76:	f7ff fa93 	bl	8006fa0 <HAL_GetTick>
 8007a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a7c:	e00a      	b.n	8007a94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a7e:	f7ff fa8f 	bl	8006fa0 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e0ce      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a94:	4b4b      	ldr	r3, [pc, #300]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0ee      	beq.n	8007a7e <HAL_RCC_OscConfig+0x386>
 8007aa0:	e014      	b.n	8007acc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aa2:	f7ff fa7d 	bl	8006fa0 <HAL_GetTick>
 8007aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aa8:	e00a      	b.n	8007ac0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aaa:	f7ff fa79 	bl	8006fa0 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e0b8      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ac0:	4b40      	ldr	r3, [pc, #256]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1ee      	bne.n	8007aaa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d105      	bne.n	8007ade <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ad2:	4b3c      	ldr	r3, [pc, #240]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	4a3b      	ldr	r2, [pc, #236]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007adc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80a4 	beq.w	8007c30 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ae8:	4b36      	ldr	r3, [pc, #216]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f003 030c 	and.w	r3, r3, #12
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d06b      	beq.n	8007bcc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d149      	bne.n	8007b90 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007afc:	4b31      	ldr	r3, [pc, #196]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a30      	ldr	r2, [pc, #192]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b08:	f7ff fa4a 	bl	8006fa0 <HAL_GetTick>
 8007b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b0e:	e008      	b.n	8007b22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b10:	f7ff fa46 	bl	8006fa0 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d901      	bls.n	8007b22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e087      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b22:	4b28      	ldr	r3, [pc, #160]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1f0      	bne.n	8007b10 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	69da      	ldr	r2, [r3, #28]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	431a      	orrs	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	019b      	lsls	r3, r3, #6
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b44:	085b      	lsrs	r3, r3, #1
 8007b46:	3b01      	subs	r3, #1
 8007b48:	041b      	lsls	r3, r3, #16
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	061b      	lsls	r3, r3, #24
 8007b52:	4313      	orrs	r3, r2
 8007b54:	4a1b      	ldr	r2, [pc, #108]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007b56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b5a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b5c:	4b19      	ldr	r3, [pc, #100]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a18      	ldr	r2, [pc, #96]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b68:	f7ff fa1a 	bl	8006fa0 <HAL_GetTick>
 8007b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b6e:	e008      	b.n	8007b82 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b70:	f7ff fa16 	bl	8006fa0 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e057      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b82:	4b10      	ldr	r3, [pc, #64]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0f0      	beq.n	8007b70 <HAL_RCC_OscConfig+0x478>
 8007b8e:	e04f      	b.n	8007c30 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b90:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a0b      	ldr	r2, [pc, #44]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9c:	f7ff fa00 	bl	8006fa0 <HAL_GetTick>
 8007ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ba4:	f7ff f9fc 	bl	8006fa0 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e03d      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bb6:	4b03      	ldr	r3, [pc, #12]	; (8007bc4 <HAL_RCC_OscConfig+0x4cc>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f0      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x4ac>
 8007bc2:	e035      	b.n	8007c30 <HAL_RCC_OscConfig+0x538>
 8007bc4:	40023800 	.word	0x40023800
 8007bc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007bcc:	4b1b      	ldr	r3, [pc, #108]	; (8007c3c <HAL_RCC_OscConfig+0x544>)
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d028      	beq.n	8007c2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d121      	bne.n	8007c2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d11a      	bne.n	8007c2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d111      	bne.n	8007c2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c12:	085b      	lsrs	r3, r3, #1
 8007c14:	3b01      	subs	r3, #1
 8007c16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d107      	bne.n	8007c2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d001      	beq.n	8007c30 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e000      	b.n	8007c32 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	40023800 	.word	0x40023800

08007c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e0d0      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c58:	4b6a      	ldr	r3, [pc, #424]	; (8007e04 <HAL_RCC_ClockConfig+0x1c4>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 030f 	and.w	r3, r3, #15
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d910      	bls.n	8007c88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c66:	4b67      	ldr	r3, [pc, #412]	; (8007e04 <HAL_RCC_ClockConfig+0x1c4>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f023 020f 	bic.w	r2, r3, #15
 8007c6e:	4965      	ldr	r1, [pc, #404]	; (8007e04 <HAL_RCC_ClockConfig+0x1c4>)
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c76:	4b63      	ldr	r3, [pc, #396]	; (8007e04 <HAL_RCC_ClockConfig+0x1c4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 030f 	and.w	r3, r3, #15
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d001      	beq.n	8007c88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e0b8      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d020      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ca0:	4b59      	ldr	r3, [pc, #356]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	4a58      	ldr	r2, [pc, #352]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007ca6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007caa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0308 	and.w	r3, r3, #8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cb8:	4b53      	ldr	r3, [pc, #332]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	4a52      	ldr	r2, [pc, #328]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007cbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cc4:	4b50      	ldr	r3, [pc, #320]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	494d      	ldr	r1, [pc, #308]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d040      	beq.n	8007d64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d107      	bne.n	8007cfa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cea:	4b47      	ldr	r3, [pc, #284]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d115      	bne.n	8007d22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e07f      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d107      	bne.n	8007d12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d02:	4b41      	ldr	r3, [pc, #260]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e073      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d12:	4b3d      	ldr	r3, [pc, #244]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e06b      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d22:	4b39      	ldr	r3, [pc, #228]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f023 0203 	bic.w	r2, r3, #3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	4936      	ldr	r1, [pc, #216]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d34:	f7ff f934 	bl	8006fa0 <HAL_GetTick>
 8007d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d3a:	e00a      	b.n	8007d52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d3c:	f7ff f930 	bl	8006fa0 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e053      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d52:	4b2d      	ldr	r3, [pc, #180]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 020c 	and.w	r2, r3, #12
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d1eb      	bne.n	8007d3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d64:	4b27      	ldr	r3, [pc, #156]	; (8007e04 <HAL_RCC_ClockConfig+0x1c4>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 030f 	and.w	r3, r3, #15
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d210      	bcs.n	8007d94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d72:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <HAL_RCC_ClockConfig+0x1c4>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f023 020f 	bic.w	r2, r3, #15
 8007d7a:	4922      	ldr	r1, [pc, #136]	; (8007e04 <HAL_RCC_ClockConfig+0x1c4>)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d82:	4b20      	ldr	r3, [pc, #128]	; (8007e04 <HAL_RCC_ClockConfig+0x1c4>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 030f 	and.w	r3, r3, #15
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d001      	beq.n	8007d94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e032      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d008      	beq.n	8007db2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007da0:	4b19      	ldr	r3, [pc, #100]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	4916      	ldr	r1, [pc, #88]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007dbe:	4b12      	ldr	r3, [pc, #72]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	490e      	ldr	r1, [pc, #56]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007dd2:	f000 f821 	bl	8007e18 <HAL_RCC_GetSysClockFreq>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	091b      	lsrs	r3, r3, #4
 8007dde:	f003 030f 	and.w	r3, r3, #15
 8007de2:	490a      	ldr	r1, [pc, #40]	; (8007e0c <HAL_RCC_ClockConfig+0x1cc>)
 8007de4:	5ccb      	ldrb	r3, [r1, r3]
 8007de6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dea:	4a09      	ldr	r2, [pc, #36]	; (8007e10 <HAL_RCC_ClockConfig+0x1d0>)
 8007dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <HAL_RCC_ClockConfig+0x1d4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff f890 	bl	8006f18 <HAL_InitTick>

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	40023c00 	.word	0x40023c00
 8007e08:	40023800 	.word	0x40023800
 8007e0c:	0800a8f8 	.word	0x0800a8f8
 8007e10:	20000000 	.word	0x20000000
 8007e14:	20000004 	.word	0x20000004

08007e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e18:	b5b0      	push	{r4, r5, r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007e1e:	2100      	movs	r1, #0
 8007e20:	6079      	str	r1, [r7, #4]
 8007e22:	2100      	movs	r1, #0
 8007e24:	60f9      	str	r1, [r7, #12]
 8007e26:	2100      	movs	r1, #0
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e2e:	4952      	ldr	r1, [pc, #328]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x160>)
 8007e30:	6889      	ldr	r1, [r1, #8]
 8007e32:	f001 010c 	and.w	r1, r1, #12
 8007e36:	2908      	cmp	r1, #8
 8007e38:	d00d      	beq.n	8007e56 <HAL_RCC_GetSysClockFreq+0x3e>
 8007e3a:	2908      	cmp	r1, #8
 8007e3c:	f200 8094 	bhi.w	8007f68 <HAL_RCC_GetSysClockFreq+0x150>
 8007e40:	2900      	cmp	r1, #0
 8007e42:	d002      	beq.n	8007e4a <HAL_RCC_GetSysClockFreq+0x32>
 8007e44:	2904      	cmp	r1, #4
 8007e46:	d003      	beq.n	8007e50 <HAL_RCC_GetSysClockFreq+0x38>
 8007e48:	e08e      	b.n	8007f68 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e4a:	4b4c      	ldr	r3, [pc, #304]	; (8007f7c <HAL_RCC_GetSysClockFreq+0x164>)
 8007e4c:	60bb      	str	r3, [r7, #8]
      break;
 8007e4e:	e08e      	b.n	8007f6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e50:	4b4b      	ldr	r3, [pc, #300]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x168>)
 8007e52:	60bb      	str	r3, [r7, #8]
      break;
 8007e54:	e08b      	b.n	8007f6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e56:	4948      	ldr	r1, [pc, #288]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x160>)
 8007e58:	6849      	ldr	r1, [r1, #4]
 8007e5a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007e5e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007e60:	4945      	ldr	r1, [pc, #276]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x160>)
 8007e62:	6849      	ldr	r1, [r1, #4]
 8007e64:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007e68:	2900      	cmp	r1, #0
 8007e6a:	d024      	beq.n	8007eb6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e6c:	4942      	ldr	r1, [pc, #264]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x160>)
 8007e6e:	6849      	ldr	r1, [r1, #4]
 8007e70:	0989      	lsrs	r1, r1, #6
 8007e72:	4608      	mov	r0, r1
 8007e74:	f04f 0100 	mov.w	r1, #0
 8007e78:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007e7c:	f04f 0500 	mov.w	r5, #0
 8007e80:	ea00 0204 	and.w	r2, r0, r4
 8007e84:	ea01 0305 	and.w	r3, r1, r5
 8007e88:	493d      	ldr	r1, [pc, #244]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x168>)
 8007e8a:	fb01 f003 	mul.w	r0, r1, r3
 8007e8e:	2100      	movs	r1, #0
 8007e90:	fb01 f102 	mul.w	r1, r1, r2
 8007e94:	1844      	adds	r4, r0, r1
 8007e96:	493a      	ldr	r1, [pc, #232]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x168>)
 8007e98:	fba2 0101 	umull	r0, r1, r2, r1
 8007e9c:	1863      	adds	r3, r4, r1
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f04f 0300 	mov.w	r3, #0
 8007ea8:	f7f8 f9b6 	bl	8000218 <__aeabi_uldivmod>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e04a      	b.n	8007f4c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eb6:	4b30      	ldr	r3, [pc, #192]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x160>)
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	099b      	lsrs	r3, r3, #6
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	f04f 0300 	mov.w	r3, #0
 8007ec2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007ec6:	f04f 0100 	mov.w	r1, #0
 8007eca:	ea02 0400 	and.w	r4, r2, r0
 8007ece:	ea03 0501 	and.w	r5, r3, r1
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	f04f 0300 	mov.w	r3, #0
 8007ede:	014b      	lsls	r3, r1, #5
 8007ee0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ee4:	0142      	lsls	r2, r0, #5
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	4619      	mov	r1, r3
 8007eea:	1b00      	subs	r0, r0, r4
 8007eec:	eb61 0105 	sbc.w	r1, r1, r5
 8007ef0:	f04f 0200 	mov.w	r2, #0
 8007ef4:	f04f 0300 	mov.w	r3, #0
 8007ef8:	018b      	lsls	r3, r1, #6
 8007efa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007efe:	0182      	lsls	r2, r0, #6
 8007f00:	1a12      	subs	r2, r2, r0
 8007f02:	eb63 0301 	sbc.w	r3, r3, r1
 8007f06:	f04f 0000 	mov.w	r0, #0
 8007f0a:	f04f 0100 	mov.w	r1, #0
 8007f0e:	00d9      	lsls	r1, r3, #3
 8007f10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f14:	00d0      	lsls	r0, r2, #3
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	1912      	adds	r2, r2, r4
 8007f1c:	eb45 0303 	adc.w	r3, r5, r3
 8007f20:	f04f 0000 	mov.w	r0, #0
 8007f24:	f04f 0100 	mov.w	r1, #0
 8007f28:	0299      	lsls	r1, r3, #10
 8007f2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007f2e:	0290      	lsls	r0, r2, #10
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4610      	mov	r0, r2
 8007f36:	4619      	mov	r1, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	f7f8 f96a 	bl	8000218 <__aeabi_uldivmod>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4613      	mov	r3, r2
 8007f4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007f4c:	4b0a      	ldr	r3, [pc, #40]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x160>)
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	0c1b      	lsrs	r3, r3, #16
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	3301      	adds	r3, #1
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f64:	60bb      	str	r3, [r7, #8]
      break;
 8007f66:	e002      	b.n	8007f6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f68:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <HAL_RCC_GetSysClockFreq+0x164>)
 8007f6a:	60bb      	str	r3, [r7, #8]
      break;
 8007f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bdb0      	pop	{r4, r5, r7, pc}
 8007f78:	40023800 	.word	0x40023800
 8007f7c:	00f42400 	.word	0x00f42400
 8007f80:	017d7840 	.word	0x017d7840

08007f84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f84:	b480      	push	{r7}
 8007f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f88:	4b03      	ldr	r3, [pc, #12]	; (8007f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	20000000 	.word	0x20000000

08007f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007fa0:	f7ff fff0 	bl	8007f84 <HAL_RCC_GetHCLKFreq>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	0a9b      	lsrs	r3, r3, #10
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	4903      	ldr	r1, [pc, #12]	; (8007fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fb2:	5ccb      	ldrb	r3, [r1, r3]
 8007fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	40023800 	.word	0x40023800
 8007fc0:	0800a908 	.word	0x0800a908

08007fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007fc8:	f7ff ffdc 	bl	8007f84 <HAL_RCC_GetHCLKFreq>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	0b5b      	lsrs	r3, r3, #13
 8007fd4:	f003 0307 	and.w	r3, r3, #7
 8007fd8:	4903      	ldr	r1, [pc, #12]	; (8007fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fda:	5ccb      	ldrb	r3, [r1, r3]
 8007fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	0800a908 	.word	0x0800a908

08007fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b088      	sub	sp, #32
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d012      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008014:	4b69      	ldr	r3, [pc, #420]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	4a68      	ldr	r2, [pc, #416]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800801a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800801e:	6093      	str	r3, [r2, #8]
 8008020:	4b66      	ldr	r3, [pc, #408]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008028:	4964      	ldr	r1, [pc, #400]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800802a:	4313      	orrs	r3, r2
 800802c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008036:	2301      	movs	r3, #1
 8008038:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d017      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008046:	4b5d      	ldr	r3, [pc, #372]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800804c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008054:	4959      	ldr	r1, [pc, #356]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008064:	d101      	bne.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008066:	2301      	movs	r3, #1
 8008068:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008072:	2301      	movs	r3, #1
 8008074:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d017      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008082:	4b4e      	ldr	r3, [pc, #312]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008088:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008090:	494a      	ldr	r1, [pc, #296]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008092:	4313      	orrs	r3, r2
 8008094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080a0:	d101      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80080a2:	2301      	movs	r3, #1
 80080a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80080ae:	2301      	movs	r3, #1
 80080b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80080be:	2301      	movs	r3, #1
 80080c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 808b 	beq.w	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80080d0:	4b3a      	ldr	r3, [pc, #232]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	4a39      	ldr	r2, [pc, #228]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080da:	6413      	str	r3, [r2, #64]	; 0x40
 80080dc:	4b37      	ldr	r3, [pc, #220]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080e4:	60bb      	str	r3, [r7, #8]
 80080e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80080e8:	4b35      	ldr	r3, [pc, #212]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a34      	ldr	r2, [pc, #208]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080f4:	f7fe ff54 	bl	8006fa0 <HAL_GetTick>
 80080f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80080fa:	e008      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080fc:	f7fe ff50 	bl	8006fa0 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b64      	cmp	r3, #100	; 0x64
 8008108:	d901      	bls.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e357      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800810e:	4b2c      	ldr	r3, [pc, #176]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0f0      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800811a:	4b28      	ldr	r3, [pc, #160]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800811c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008122:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d035      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	429a      	cmp	r2, r3
 8008136:	d02e      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008138:	4b20      	ldr	r3, [pc, #128]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800813a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008140:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008142:	4b1e      	ldr	r3, [pc, #120]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008146:	4a1d      	ldr	r2, [pc, #116]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800814c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800814e:	4b1b      	ldr	r3, [pc, #108]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008152:	4a1a      	ldr	r2, [pc, #104]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008158:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800815a:	4a18      	ldr	r2, [pc, #96]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008160:	4b16      	ldr	r3, [pc, #88]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b01      	cmp	r3, #1
 800816a:	d114      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800816c:	f7fe ff18 	bl	8006fa0 <HAL_GetTick>
 8008170:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008172:	e00a      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008174:	f7fe ff14 	bl	8006fa0 <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008182:	4293      	cmp	r3, r2
 8008184:	d901      	bls.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e319      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800818a:	4b0c      	ldr	r3, [pc, #48]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800818c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0ee      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800819e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081a2:	d111      	bne.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80081a4:	4b05      	ldr	r3, [pc, #20]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80081b0:	4b04      	ldr	r3, [pc, #16]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80081b2:	400b      	ands	r3, r1
 80081b4:	4901      	ldr	r1, [pc, #4]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	608b      	str	r3, [r1, #8]
 80081ba:	e00b      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80081bc:	40023800 	.word	0x40023800
 80081c0:	40007000 	.word	0x40007000
 80081c4:	0ffffcff 	.word	0x0ffffcff
 80081c8:	4bb1      	ldr	r3, [pc, #708]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	4ab0      	ldr	r2, [pc, #704]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80081ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80081d2:	6093      	str	r3, [r2, #8]
 80081d4:	4bae      	ldr	r3, [pc, #696]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80081d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081e0:	49ab      	ldr	r1, [pc, #684]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0310 	and.w	r3, r3, #16
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d010      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081f2:	4ba7      	ldr	r3, [pc, #668]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80081f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f8:	4aa5      	ldr	r2, [pc, #660]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80081fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008202:	4ba3      	ldr	r3, [pc, #652]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008204:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	49a0      	ldr	r1, [pc, #640]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800820e:	4313      	orrs	r3, r2
 8008210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00a      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008220:	4b9b      	ldr	r3, [pc, #620]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008226:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800822e:	4998      	ldr	r1, [pc, #608]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008230:	4313      	orrs	r3, r2
 8008232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008242:	4b93      	ldr	r3, [pc, #588]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008248:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008250:	498f      	ldr	r1, [pc, #572]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008252:	4313      	orrs	r3, r2
 8008254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00a      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008264:	4b8a      	ldr	r3, [pc, #552]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800826a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008272:	4987      	ldr	r1, [pc, #540]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008274:	4313      	orrs	r3, r2
 8008276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008286:	4b82      	ldr	r3, [pc, #520]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800828c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008294:	497e      	ldr	r1, [pc, #504]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008296:	4313      	orrs	r3, r2
 8008298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00a      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082a8:	4b79      	ldr	r3, [pc, #484]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80082aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ae:	f023 0203 	bic.w	r2, r3, #3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b6:	4976      	ldr	r1, [pc, #472]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00a      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082ca:	4b71      	ldr	r3, [pc, #452]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80082cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d0:	f023 020c 	bic.w	r2, r3, #12
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d8:	496d      	ldr	r1, [pc, #436]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00a      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80082ec:	4b68      	ldr	r3, [pc, #416]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80082ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082fa:	4965      	ldr	r1, [pc, #404]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00a      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800830e:	4b60      	ldr	r3, [pc, #384]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008314:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800831c:	495c      	ldr	r1, [pc, #368]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800831e:	4313      	orrs	r3, r2
 8008320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00a      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008330:	4b57      	ldr	r3, [pc, #348]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833e:	4954      	ldr	r1, [pc, #336]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008340:	4313      	orrs	r3, r2
 8008342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00a      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008352:	4b4f      	ldr	r3, [pc, #316]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008358:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008360:	494b      	ldr	r1, [pc, #300]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008362:	4313      	orrs	r3, r2
 8008364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00a      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008374:	4b46      	ldr	r3, [pc, #280]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800837a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008382:	4943      	ldr	r1, [pc, #268]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008384:	4313      	orrs	r3, r2
 8008386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00a      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008396:	4b3e      	ldr	r3, [pc, #248]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800839c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a4:	493a      	ldr	r1, [pc, #232]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00a      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80083b8:	4b35      	ldr	r3, [pc, #212]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80083ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083c6:	4932      	ldr	r1, [pc, #200]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d011      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80083da:	4b2d      	ldr	r3, [pc, #180]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80083dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083e8:	4929      	ldr	r1, [pc, #164]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083f8:	d101      	bne.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80083fa:	2301      	movs	r3, #1
 80083fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0308 	and.w	r3, r3, #8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800840a:	2301      	movs	r3, #1
 800840c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800841a:	4b1d      	ldr	r3, [pc, #116]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800841c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008420:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008428:	4919      	ldr	r1, [pc, #100]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800842a:	4313      	orrs	r3, r2
 800842c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00b      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800843c:	4b14      	ldr	r3, [pc, #80]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800843e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008442:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800844c:	4910      	ldr	r1, [pc, #64]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800844e:	4313      	orrs	r3, r2
 8008450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d006      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 80d9 	beq.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008468:	4b09      	ldr	r3, [pc, #36]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a08      	ldr	r2, [pc, #32]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800846e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008472:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008474:	f7fe fd94 	bl	8006fa0 <HAL_GetTick>
 8008478:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800847a:	e00b      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800847c:	f7fe fd90 	bl	8006fa0 <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	2b64      	cmp	r3, #100	; 0x64
 8008488:	d904      	bls.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e197      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800848e:	bf00      	nop
 8008490:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008494:	4b6c      	ldr	r3, [pc, #432]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1ed      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d021      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d11d      	bne.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80084b4:	4b64      	ldr	r3, [pc, #400]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ba:	0c1b      	lsrs	r3, r3, #16
 80084bc:	f003 0303 	and.w	r3, r3, #3
 80084c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80084c2:	4b61      	ldr	r3, [pc, #388]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084c8:	0e1b      	lsrs	r3, r3, #24
 80084ca:	f003 030f 	and.w	r3, r3, #15
 80084ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	019a      	lsls	r2, r3, #6
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	041b      	lsls	r3, r3, #16
 80084da:	431a      	orrs	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	061b      	lsls	r3, r3, #24
 80084e0:	431a      	orrs	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	071b      	lsls	r3, r3, #28
 80084e8:	4957      	ldr	r1, [pc, #348]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d004      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008504:	d00a      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800850e:	2b00      	cmp	r3, #0
 8008510:	d02e      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800851a:	d129      	bne.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800851c:	4b4a      	ldr	r3, [pc, #296]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800851e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008522:	0c1b      	lsrs	r3, r3, #16
 8008524:	f003 0303 	and.w	r3, r3, #3
 8008528:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800852a:	4b47      	ldr	r3, [pc, #284]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800852c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008530:	0f1b      	lsrs	r3, r3, #28
 8008532:	f003 0307 	and.w	r3, r3, #7
 8008536:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	019a      	lsls	r2, r3, #6
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	041b      	lsls	r3, r3, #16
 8008542:	431a      	orrs	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	061b      	lsls	r3, r3, #24
 800854a:	431a      	orrs	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	071b      	lsls	r3, r3, #28
 8008550:	493d      	ldr	r1, [pc, #244]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008552:	4313      	orrs	r3, r2
 8008554:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008558:	4b3b      	ldr	r3, [pc, #236]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800855a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800855e:	f023 021f 	bic.w	r2, r3, #31
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	3b01      	subs	r3, #1
 8008568:	4937      	ldr	r1, [pc, #220]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800856a:	4313      	orrs	r3, r2
 800856c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d01d      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800857c:	4b32      	ldr	r3, [pc, #200]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800857e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008582:	0e1b      	lsrs	r3, r3, #24
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800858a:	4b2f      	ldr	r3, [pc, #188]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800858c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008590:	0f1b      	lsrs	r3, r3, #28
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	019a      	lsls	r2, r3, #6
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	041b      	lsls	r3, r3, #16
 80085a4:	431a      	orrs	r2, r3
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	061b      	lsls	r3, r3, #24
 80085aa:	431a      	orrs	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	071b      	lsls	r3, r3, #28
 80085b0:	4925      	ldr	r1, [pc, #148]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d011      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	019a      	lsls	r2, r3, #6
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	041b      	lsls	r3, r3, #16
 80085d0:	431a      	orrs	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	061b      	lsls	r3, r3, #24
 80085d8:	431a      	orrs	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	071b      	lsls	r3, r3, #28
 80085e0:	4919      	ldr	r1, [pc, #100]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80085e8:	4b17      	ldr	r3, [pc, #92]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a16      	ldr	r2, [pc, #88]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085f4:	f7fe fcd4 	bl	8006fa0 <HAL_GetTick>
 80085f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085fa:	e008      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80085fc:	f7fe fcd0 	bl	8006fa0 <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	2b64      	cmp	r3, #100	; 0x64
 8008608:	d901      	bls.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e0d7      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800860e:	4b0e      	ldr	r3, [pc, #56]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0f0      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	2b01      	cmp	r3, #1
 800861e:	f040 80cd 	bne.w	80087bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008622:	4b09      	ldr	r3, [pc, #36]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a08      	ldr	r2, [pc, #32]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800862c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800862e:	f7fe fcb7 	bl	8006fa0 <HAL_GetTick>
 8008632:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008634:	e00a      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008636:	f7fe fcb3 	bl	8006fa0 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b64      	cmp	r3, #100	; 0x64
 8008642:	d903      	bls.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e0ba      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008648:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800864c:	4b5e      	ldr	r3, [pc, #376]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008658:	d0ed      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008676:	2b00      	cmp	r3, #0
 8008678:	d02e      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	2b00      	cmp	r3, #0
 8008680:	d12a      	bne.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008682:	4b51      	ldr	r3, [pc, #324]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008688:	0c1b      	lsrs	r3, r3, #16
 800868a:	f003 0303 	and.w	r3, r3, #3
 800868e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008690:	4b4d      	ldr	r3, [pc, #308]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008696:	0f1b      	lsrs	r3, r3, #28
 8008698:	f003 0307 	and.w	r3, r3, #7
 800869c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	019a      	lsls	r2, r3, #6
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	041b      	lsls	r3, r3, #16
 80086a8:	431a      	orrs	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	061b      	lsls	r3, r3, #24
 80086b0:	431a      	orrs	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	071b      	lsls	r3, r3, #28
 80086b6:	4944      	ldr	r1, [pc, #272]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80086be:	4b42      	ldr	r3, [pc, #264]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086cc:	3b01      	subs	r3, #1
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	493d      	ldr	r1, [pc, #244]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d022      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086ec:	d11d      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80086ee:	4b36      	ldr	r3, [pc, #216]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f4:	0e1b      	lsrs	r3, r3, #24
 80086f6:	f003 030f 	and.w	r3, r3, #15
 80086fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80086fc:	4b32      	ldr	r3, [pc, #200]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008702:	0f1b      	lsrs	r3, r3, #28
 8008704:	f003 0307 	and.w	r3, r3, #7
 8008708:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	019a      	lsls	r2, r3, #6
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	041b      	lsls	r3, r3, #16
 8008716:	431a      	orrs	r2, r3
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	061b      	lsls	r3, r3, #24
 800871c:	431a      	orrs	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	071b      	lsls	r3, r3, #28
 8008722:	4929      	ldr	r1, [pc, #164]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008724:	4313      	orrs	r3, r2
 8008726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0308 	and.w	r3, r3, #8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d028      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008736:	4b24      	ldr	r3, [pc, #144]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800873c:	0e1b      	lsrs	r3, r3, #24
 800873e:	f003 030f 	and.w	r3, r3, #15
 8008742:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008744:	4b20      	ldr	r3, [pc, #128]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800874a:	0c1b      	lsrs	r3, r3, #16
 800874c:	f003 0303 	and.w	r3, r3, #3
 8008750:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	019a      	lsls	r2, r3, #6
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	041b      	lsls	r3, r3, #16
 800875c:	431a      	orrs	r2, r3
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	061b      	lsls	r3, r3, #24
 8008762:	431a      	orrs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	071b      	lsls	r3, r3, #28
 800876a:	4917      	ldr	r1, [pc, #92]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800876c:	4313      	orrs	r3, r2
 800876e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008772:	4b15      	ldr	r3, [pc, #84]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008778:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008780:	4911      	ldr	r1, [pc, #68]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008782:	4313      	orrs	r3, r2
 8008784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008788:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a0e      	ldr	r2, [pc, #56]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800878e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008794:	f7fe fc04 	bl	8006fa0 <HAL_GetTick>
 8008798:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800879a:	e008      	b.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800879c:	f7fe fc00 	bl	8006fa0 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	2b64      	cmp	r3, #100	; 0x64
 80087a8:	d901      	bls.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e007      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80087ae:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087ba:	d1ef      	bne.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3720      	adds	r7, #32
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	40023800 	.word	0x40023800

080087cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e040      	b.n	8008860 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d106      	bne.n	80087f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7fe f886 	bl	8006900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2224      	movs	r2, #36	; 0x24
 80087f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 0201 	bic.w	r2, r2, #1
 8008808:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 facc 	bl	8008da8 <UART_SetConfig>
 8008810:	4603      	mov	r3, r0
 8008812:	2b01      	cmp	r3, #1
 8008814:	d101      	bne.n	800881a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e022      	b.n	8008860 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fd22 	bl	800926c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689a      	ldr	r2, [r3, #8]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f042 0201 	orr.w	r2, r2, #1
 8008856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fda9 	bl	80093b0 <UART_CheckIdleState>
 800885e:	4603      	mov	r3, r0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b08a      	sub	sp, #40	; 0x28
 800886c:	af02      	add	r7, sp, #8
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	4613      	mov	r3, r2
 8008876:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800887c:	2b20      	cmp	r3, #32
 800887e:	f040 8081 	bne.w	8008984 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <HAL_UART_Transmit+0x26>
 8008888:	88fb      	ldrh	r3, [r7, #6]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e079      	b.n	8008986 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008898:	2b01      	cmp	r3, #1
 800889a:	d101      	bne.n	80088a0 <HAL_UART_Transmit+0x38>
 800889c:	2302      	movs	r3, #2
 800889e:	e072      	b.n	8008986 <HAL_UART_Transmit+0x11e>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2221      	movs	r2, #33	; 0x21
 80088b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088b6:	f7fe fb73 	bl	8006fa0 <HAL_GetTick>
 80088ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	88fa      	ldrh	r2, [r7, #6]
 80088c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	88fa      	ldrh	r2, [r7, #6]
 80088c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d4:	d108      	bne.n	80088e8 <HAL_UART_Transmit+0x80>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d104      	bne.n	80088e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80088de:	2300      	movs	r3, #0
 80088e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	61bb      	str	r3, [r7, #24]
 80088e6:	e003      	b.n	80088f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088ec:	2300      	movs	r3, #0
 80088ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80088f8:	e02c      	b.n	8008954 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2200      	movs	r2, #0
 8008902:	2180      	movs	r1, #128	; 0x80
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 fd86 	bl	8009416 <UART_WaitOnFlagUntilTimeout>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e038      	b.n	8008986 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10b      	bne.n	8008932 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008928:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	3302      	adds	r3, #2
 800892e:	61bb      	str	r3, [r7, #24]
 8008930:	e007      	b.n	8008942 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	781a      	ldrb	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	3301      	adds	r3, #1
 8008940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008948:	b29b      	uxth	r3, r3
 800894a:	3b01      	subs	r3, #1
 800894c:	b29a      	uxth	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800895a:	b29b      	uxth	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1cc      	bne.n	80088fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	2200      	movs	r2, #0
 8008968:	2140      	movs	r1, #64	; 0x40
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 fd53 	bl	8009416 <UART_WaitOnFlagUntilTimeout>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e005      	b.n	8008986 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2220      	movs	r2, #32
 800897e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	e000      	b.n	8008986 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008984:	2302      	movs	r3, #2
  }
}
 8008986:	4618      	mov	r0, r3
 8008988:	3720      	adds	r7, #32
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80089b0:	69fa      	ldr	r2, [r7, #28]
 80089b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80089b6:	4013      	ands	r3, r2
 80089b8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d113      	bne.n	80089e8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f003 0320 	and.w	r3, r3, #32
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00e      	beq.n	80089e8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	f003 0320 	and.w	r3, r3, #32
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d009      	beq.n	80089e8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 81b9 	beq.w	8008d50 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	4798      	blx	r3
      }
      return;
 80089e6:	e1b3      	b.n	8008d50 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 80e3 	beq.w	8008bb6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d105      	bne.n	8008a06 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	4ba5      	ldr	r3, [pc, #660]	; (8008c94 <HAL_UART_IRQHandler+0x304>)
 80089fe:	4013      	ands	r3, r2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 80d8 	beq.w	8008bb6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d010      	beq.n	8008a32 <HAL_UART_IRQHandler+0xa2>
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00b      	beq.n	8008a32 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a28:	f043 0201 	orr.w	r2, r3, #1
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d010      	beq.n	8008a5e <HAL_UART_IRQHandler+0xce>
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00b      	beq.n	8008a5e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a54:	f043 0204 	orr.w	r2, r3, #4
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	f003 0304 	and.w	r3, r3, #4
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d010      	beq.n	8008a8a <HAL_UART_IRQHandler+0xfa>
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00b      	beq.n	8008a8a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2204      	movs	r2, #4
 8008a78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a80:	f043 0202 	orr.w	r2, r3, #2
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	f003 0308 	and.w	r3, r3, #8
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d015      	beq.n	8008ac0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	f003 0320 	and.w	r3, r3, #32
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d104      	bne.n	8008aa8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00b      	beq.n	8008ac0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2208      	movs	r2, #8
 8008aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ab6:	f043 0208 	orr.w	r2, r3, #8
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d011      	beq.n	8008aee <HAL_UART_IRQHandler+0x15e>
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00c      	beq.n	8008aee <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008adc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ae4:	f043 0220 	orr.w	r2, r3, #32
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 812d 	beq.w	8008d54 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	f003 0320 	and.w	r3, r3, #32
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00c      	beq.n	8008b1e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	f003 0320 	and.w	r3, r3, #32
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d007      	beq.n	8008b1e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d003      	beq.n	8008b1e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b24:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b30:	2b40      	cmp	r3, #64	; 0x40
 8008b32:	d004      	beq.n	8008b3e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d031      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fce5 	bl	800950e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4e:	2b40      	cmp	r3, #64	; 0x40
 8008b50:	d123      	bne.n	8008b9a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b60:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d013      	beq.n	8008b92 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b6e:	4a4a      	ldr	r2, [pc, #296]	; (8008c98 <HAL_UART_IRQHandler+0x308>)
 8008b70:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fe fb9f 	bl	80072ba <HAL_DMA_Abort_IT>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d017      	beq.n	8008bb2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b90:	e00f      	b.n	8008bb2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f8f2 	bl	8008d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b98:	e00b      	b.n	8008bb2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f8ee 	bl	8008d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ba0:	e007      	b.n	8008bb2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f8ea 	bl	8008d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008bb0:	e0d0      	b.n	8008d54 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb2:	bf00      	nop
    return;
 8008bb4:	e0ce      	b.n	8008d54 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	f040 80a7 	bne.w	8008d0e <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	f003 0310 	and.w	r3, r3, #16
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 80a1 	beq.w	8008d0e <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	f003 0310 	and.w	r3, r3, #16
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 809b 	beq.w	8008d0e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2210      	movs	r2, #16
 8008bde:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bea:	2b40      	cmp	r3, #64	; 0x40
 8008bec:	d156      	bne.n	8008c9c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8008bf8:	893b      	ldrh	r3, [r7, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 80ac 	beq.w	8008d58 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c06:	893a      	ldrh	r2, [r7, #8]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	f080 80a5 	bcs.w	8008d58 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	893a      	ldrh	r2, [r7, #8]
 8008c12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1a:	69db      	ldr	r3, [r3, #28]
 8008c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c20:	d02a      	beq.n	8008c78 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c30:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689a      	ldr	r2, [r3, #8]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f022 0201 	bic.w	r2, r2, #1
 8008c40:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c50:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2220      	movs	r2, #32
 8008c56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 0210 	bic.w	r2, r2, #16
 8008c6c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe fab1 	bl	80071da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f87f 	bl	8008d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c92:	e061      	b.n	8008d58 <HAL_UART_IRQHandler+0x3c8>
 8008c94:	04000120 	.word	0x04000120
 8008c98:	0800956d 	.word	0x0800956d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d050      	beq.n	8008d5c <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8008cba:	897b      	ldrh	r3, [r7, #10]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d04d      	beq.n	8008d5c <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008cce:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689a      	ldr	r2, [r3, #8]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0201 	bic.w	r2, r2, #1
 8008cde:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f022 0210 	bic.w	r2, r2, #16
 8008d00:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d02:	897b      	ldrh	r3, [r7, #10]
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f842 	bl	8008d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d0c:	e026      	b.n	8008d5c <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00d      	beq.n	8008d34 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d008      	beq.n	8008d34 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d01a      	beq.n	8008d60 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
    }
    return;
 8008d32:	e015      	b.n	8008d60 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d011      	beq.n	8008d62 <HAL_UART_IRQHandler+0x3d2>
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00c      	beq.n	8008d62 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fc25 	bl	8009598 <UART_EndTransmit_IT>
    return;
 8008d4e:	e008      	b.n	8008d62 <HAL_UART_IRQHandler+0x3d2>
      return;
 8008d50:	bf00      	nop
 8008d52:	e006      	b.n	8008d62 <HAL_UART_IRQHandler+0x3d2>
    return;
 8008d54:	bf00      	nop
 8008d56:	e004      	b.n	8008d62 <HAL_UART_IRQHandler+0x3d2>
      return;
 8008d58:	bf00      	nop
 8008d5a:	e002      	b.n	8008d62 <HAL_UART_IRQHandler+0x3d2>
      return;
 8008d5c:	bf00      	nop
 8008d5e:	e000      	b.n	8008d62 <HAL_UART_IRQHandler+0x3d2>
    return;
 8008d60:	bf00      	nop
  }

}
 8008d62:	3720      	adds	r7, #32
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b088      	sub	sp, #32
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	689a      	ldr	r2, [r3, #8]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	4ba7      	ldr	r3, [pc, #668]	; (8009070 <UART_SetConfig+0x2c8>)
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	6812      	ldr	r2, [r2, #0]
 8008dda:	6979      	ldr	r1, [r7, #20]
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68da      	ldr	r2, [r3, #12]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	430a      	orrs	r2, r1
 8008df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a1b      	ldr	r3, [r3, #32]
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a95      	ldr	r2, [pc, #596]	; (8009074 <UART_SetConfig+0x2cc>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d120      	bne.n	8008e66 <UART_SetConfig+0xbe>
 8008e24:	4b94      	ldr	r3, [pc, #592]	; (8009078 <UART_SetConfig+0x2d0>)
 8008e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e2a:	f003 0303 	and.w	r3, r3, #3
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d816      	bhi.n	8008e60 <UART_SetConfig+0xb8>
 8008e32:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <UART_SetConfig+0x90>)
 8008e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e38:	08008e49 	.word	0x08008e49
 8008e3c:	08008e55 	.word	0x08008e55
 8008e40:	08008e4f 	.word	0x08008e4f
 8008e44:	08008e5b 	.word	0x08008e5b
 8008e48:	2301      	movs	r3, #1
 8008e4a:	77fb      	strb	r3, [r7, #31]
 8008e4c:	e14f      	b.n	80090ee <UART_SetConfig+0x346>
 8008e4e:	2302      	movs	r3, #2
 8008e50:	77fb      	strb	r3, [r7, #31]
 8008e52:	e14c      	b.n	80090ee <UART_SetConfig+0x346>
 8008e54:	2304      	movs	r3, #4
 8008e56:	77fb      	strb	r3, [r7, #31]
 8008e58:	e149      	b.n	80090ee <UART_SetConfig+0x346>
 8008e5a:	2308      	movs	r3, #8
 8008e5c:	77fb      	strb	r3, [r7, #31]
 8008e5e:	e146      	b.n	80090ee <UART_SetConfig+0x346>
 8008e60:	2310      	movs	r3, #16
 8008e62:	77fb      	strb	r3, [r7, #31]
 8008e64:	e143      	b.n	80090ee <UART_SetConfig+0x346>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a84      	ldr	r2, [pc, #528]	; (800907c <UART_SetConfig+0x2d4>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d132      	bne.n	8008ed6 <UART_SetConfig+0x12e>
 8008e70:	4b81      	ldr	r3, [pc, #516]	; (8009078 <UART_SetConfig+0x2d0>)
 8008e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e76:	f003 030c 	and.w	r3, r3, #12
 8008e7a:	2b0c      	cmp	r3, #12
 8008e7c:	d828      	bhi.n	8008ed0 <UART_SetConfig+0x128>
 8008e7e:	a201      	add	r2, pc, #4	; (adr r2, 8008e84 <UART_SetConfig+0xdc>)
 8008e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e84:	08008eb9 	.word	0x08008eb9
 8008e88:	08008ed1 	.word	0x08008ed1
 8008e8c:	08008ed1 	.word	0x08008ed1
 8008e90:	08008ed1 	.word	0x08008ed1
 8008e94:	08008ec5 	.word	0x08008ec5
 8008e98:	08008ed1 	.word	0x08008ed1
 8008e9c:	08008ed1 	.word	0x08008ed1
 8008ea0:	08008ed1 	.word	0x08008ed1
 8008ea4:	08008ebf 	.word	0x08008ebf
 8008ea8:	08008ed1 	.word	0x08008ed1
 8008eac:	08008ed1 	.word	0x08008ed1
 8008eb0:	08008ed1 	.word	0x08008ed1
 8008eb4:	08008ecb 	.word	0x08008ecb
 8008eb8:	2300      	movs	r3, #0
 8008eba:	77fb      	strb	r3, [r7, #31]
 8008ebc:	e117      	b.n	80090ee <UART_SetConfig+0x346>
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	77fb      	strb	r3, [r7, #31]
 8008ec2:	e114      	b.n	80090ee <UART_SetConfig+0x346>
 8008ec4:	2304      	movs	r3, #4
 8008ec6:	77fb      	strb	r3, [r7, #31]
 8008ec8:	e111      	b.n	80090ee <UART_SetConfig+0x346>
 8008eca:	2308      	movs	r3, #8
 8008ecc:	77fb      	strb	r3, [r7, #31]
 8008ece:	e10e      	b.n	80090ee <UART_SetConfig+0x346>
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	77fb      	strb	r3, [r7, #31]
 8008ed4:	e10b      	b.n	80090ee <UART_SetConfig+0x346>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a69      	ldr	r2, [pc, #420]	; (8009080 <UART_SetConfig+0x2d8>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d120      	bne.n	8008f22 <UART_SetConfig+0x17a>
 8008ee0:	4b65      	ldr	r3, [pc, #404]	; (8009078 <UART_SetConfig+0x2d0>)
 8008ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008eea:	2b30      	cmp	r3, #48	; 0x30
 8008eec:	d013      	beq.n	8008f16 <UART_SetConfig+0x16e>
 8008eee:	2b30      	cmp	r3, #48	; 0x30
 8008ef0:	d814      	bhi.n	8008f1c <UART_SetConfig+0x174>
 8008ef2:	2b20      	cmp	r3, #32
 8008ef4:	d009      	beq.n	8008f0a <UART_SetConfig+0x162>
 8008ef6:	2b20      	cmp	r3, #32
 8008ef8:	d810      	bhi.n	8008f1c <UART_SetConfig+0x174>
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d002      	beq.n	8008f04 <UART_SetConfig+0x15c>
 8008efe:	2b10      	cmp	r3, #16
 8008f00:	d006      	beq.n	8008f10 <UART_SetConfig+0x168>
 8008f02:	e00b      	b.n	8008f1c <UART_SetConfig+0x174>
 8008f04:	2300      	movs	r3, #0
 8008f06:	77fb      	strb	r3, [r7, #31]
 8008f08:	e0f1      	b.n	80090ee <UART_SetConfig+0x346>
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	77fb      	strb	r3, [r7, #31]
 8008f0e:	e0ee      	b.n	80090ee <UART_SetConfig+0x346>
 8008f10:	2304      	movs	r3, #4
 8008f12:	77fb      	strb	r3, [r7, #31]
 8008f14:	e0eb      	b.n	80090ee <UART_SetConfig+0x346>
 8008f16:	2308      	movs	r3, #8
 8008f18:	77fb      	strb	r3, [r7, #31]
 8008f1a:	e0e8      	b.n	80090ee <UART_SetConfig+0x346>
 8008f1c:	2310      	movs	r3, #16
 8008f1e:	77fb      	strb	r3, [r7, #31]
 8008f20:	e0e5      	b.n	80090ee <UART_SetConfig+0x346>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a57      	ldr	r2, [pc, #348]	; (8009084 <UART_SetConfig+0x2dc>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d120      	bne.n	8008f6e <UART_SetConfig+0x1c6>
 8008f2c:	4b52      	ldr	r3, [pc, #328]	; (8009078 <UART_SetConfig+0x2d0>)
 8008f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008f36:	2bc0      	cmp	r3, #192	; 0xc0
 8008f38:	d013      	beq.n	8008f62 <UART_SetConfig+0x1ba>
 8008f3a:	2bc0      	cmp	r3, #192	; 0xc0
 8008f3c:	d814      	bhi.n	8008f68 <UART_SetConfig+0x1c0>
 8008f3e:	2b80      	cmp	r3, #128	; 0x80
 8008f40:	d009      	beq.n	8008f56 <UART_SetConfig+0x1ae>
 8008f42:	2b80      	cmp	r3, #128	; 0x80
 8008f44:	d810      	bhi.n	8008f68 <UART_SetConfig+0x1c0>
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d002      	beq.n	8008f50 <UART_SetConfig+0x1a8>
 8008f4a:	2b40      	cmp	r3, #64	; 0x40
 8008f4c:	d006      	beq.n	8008f5c <UART_SetConfig+0x1b4>
 8008f4e:	e00b      	b.n	8008f68 <UART_SetConfig+0x1c0>
 8008f50:	2300      	movs	r3, #0
 8008f52:	77fb      	strb	r3, [r7, #31]
 8008f54:	e0cb      	b.n	80090ee <UART_SetConfig+0x346>
 8008f56:	2302      	movs	r3, #2
 8008f58:	77fb      	strb	r3, [r7, #31]
 8008f5a:	e0c8      	b.n	80090ee <UART_SetConfig+0x346>
 8008f5c:	2304      	movs	r3, #4
 8008f5e:	77fb      	strb	r3, [r7, #31]
 8008f60:	e0c5      	b.n	80090ee <UART_SetConfig+0x346>
 8008f62:	2308      	movs	r3, #8
 8008f64:	77fb      	strb	r3, [r7, #31]
 8008f66:	e0c2      	b.n	80090ee <UART_SetConfig+0x346>
 8008f68:	2310      	movs	r3, #16
 8008f6a:	77fb      	strb	r3, [r7, #31]
 8008f6c:	e0bf      	b.n	80090ee <UART_SetConfig+0x346>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a45      	ldr	r2, [pc, #276]	; (8009088 <UART_SetConfig+0x2e0>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d125      	bne.n	8008fc4 <UART_SetConfig+0x21c>
 8008f78:	4b3f      	ldr	r3, [pc, #252]	; (8009078 <UART_SetConfig+0x2d0>)
 8008f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f86:	d017      	beq.n	8008fb8 <UART_SetConfig+0x210>
 8008f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f8c:	d817      	bhi.n	8008fbe <UART_SetConfig+0x216>
 8008f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f92:	d00b      	beq.n	8008fac <UART_SetConfig+0x204>
 8008f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f98:	d811      	bhi.n	8008fbe <UART_SetConfig+0x216>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d003      	beq.n	8008fa6 <UART_SetConfig+0x1fe>
 8008f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fa2:	d006      	beq.n	8008fb2 <UART_SetConfig+0x20a>
 8008fa4:	e00b      	b.n	8008fbe <UART_SetConfig+0x216>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	77fb      	strb	r3, [r7, #31]
 8008faa:	e0a0      	b.n	80090ee <UART_SetConfig+0x346>
 8008fac:	2302      	movs	r3, #2
 8008fae:	77fb      	strb	r3, [r7, #31]
 8008fb0:	e09d      	b.n	80090ee <UART_SetConfig+0x346>
 8008fb2:	2304      	movs	r3, #4
 8008fb4:	77fb      	strb	r3, [r7, #31]
 8008fb6:	e09a      	b.n	80090ee <UART_SetConfig+0x346>
 8008fb8:	2308      	movs	r3, #8
 8008fba:	77fb      	strb	r3, [r7, #31]
 8008fbc:	e097      	b.n	80090ee <UART_SetConfig+0x346>
 8008fbe:	2310      	movs	r3, #16
 8008fc0:	77fb      	strb	r3, [r7, #31]
 8008fc2:	e094      	b.n	80090ee <UART_SetConfig+0x346>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a30      	ldr	r2, [pc, #192]	; (800908c <UART_SetConfig+0x2e4>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d125      	bne.n	800901a <UART_SetConfig+0x272>
 8008fce:	4b2a      	ldr	r3, [pc, #168]	; (8009078 <UART_SetConfig+0x2d0>)
 8008fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008fd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008fdc:	d017      	beq.n	800900e <UART_SetConfig+0x266>
 8008fde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008fe2:	d817      	bhi.n	8009014 <UART_SetConfig+0x26c>
 8008fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fe8:	d00b      	beq.n	8009002 <UART_SetConfig+0x25a>
 8008fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fee:	d811      	bhi.n	8009014 <UART_SetConfig+0x26c>
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d003      	beq.n	8008ffc <UART_SetConfig+0x254>
 8008ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ff8:	d006      	beq.n	8009008 <UART_SetConfig+0x260>
 8008ffa:	e00b      	b.n	8009014 <UART_SetConfig+0x26c>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	77fb      	strb	r3, [r7, #31]
 8009000:	e075      	b.n	80090ee <UART_SetConfig+0x346>
 8009002:	2302      	movs	r3, #2
 8009004:	77fb      	strb	r3, [r7, #31]
 8009006:	e072      	b.n	80090ee <UART_SetConfig+0x346>
 8009008:	2304      	movs	r3, #4
 800900a:	77fb      	strb	r3, [r7, #31]
 800900c:	e06f      	b.n	80090ee <UART_SetConfig+0x346>
 800900e:	2308      	movs	r3, #8
 8009010:	77fb      	strb	r3, [r7, #31]
 8009012:	e06c      	b.n	80090ee <UART_SetConfig+0x346>
 8009014:	2310      	movs	r3, #16
 8009016:	77fb      	strb	r3, [r7, #31]
 8009018:	e069      	b.n	80090ee <UART_SetConfig+0x346>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a1c      	ldr	r2, [pc, #112]	; (8009090 <UART_SetConfig+0x2e8>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d137      	bne.n	8009094 <UART_SetConfig+0x2ec>
 8009024:	4b14      	ldr	r3, [pc, #80]	; (8009078 <UART_SetConfig+0x2d0>)
 8009026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800902a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800902e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009032:	d017      	beq.n	8009064 <UART_SetConfig+0x2bc>
 8009034:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009038:	d817      	bhi.n	800906a <UART_SetConfig+0x2c2>
 800903a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800903e:	d00b      	beq.n	8009058 <UART_SetConfig+0x2b0>
 8009040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009044:	d811      	bhi.n	800906a <UART_SetConfig+0x2c2>
 8009046:	2b00      	cmp	r3, #0
 8009048:	d003      	beq.n	8009052 <UART_SetConfig+0x2aa>
 800904a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800904e:	d006      	beq.n	800905e <UART_SetConfig+0x2b6>
 8009050:	e00b      	b.n	800906a <UART_SetConfig+0x2c2>
 8009052:	2300      	movs	r3, #0
 8009054:	77fb      	strb	r3, [r7, #31]
 8009056:	e04a      	b.n	80090ee <UART_SetConfig+0x346>
 8009058:	2302      	movs	r3, #2
 800905a:	77fb      	strb	r3, [r7, #31]
 800905c:	e047      	b.n	80090ee <UART_SetConfig+0x346>
 800905e:	2304      	movs	r3, #4
 8009060:	77fb      	strb	r3, [r7, #31]
 8009062:	e044      	b.n	80090ee <UART_SetConfig+0x346>
 8009064:	2308      	movs	r3, #8
 8009066:	77fb      	strb	r3, [r7, #31]
 8009068:	e041      	b.n	80090ee <UART_SetConfig+0x346>
 800906a:	2310      	movs	r3, #16
 800906c:	77fb      	strb	r3, [r7, #31]
 800906e:	e03e      	b.n	80090ee <UART_SetConfig+0x346>
 8009070:	efff69f3 	.word	0xefff69f3
 8009074:	40011000 	.word	0x40011000
 8009078:	40023800 	.word	0x40023800
 800907c:	40004400 	.word	0x40004400
 8009080:	40004800 	.word	0x40004800
 8009084:	40004c00 	.word	0x40004c00
 8009088:	40005000 	.word	0x40005000
 800908c:	40011400 	.word	0x40011400
 8009090:	40007800 	.word	0x40007800
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a71      	ldr	r2, [pc, #452]	; (8009260 <UART_SetConfig+0x4b8>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d125      	bne.n	80090ea <UART_SetConfig+0x342>
 800909e:	4b71      	ldr	r3, [pc, #452]	; (8009264 <UART_SetConfig+0x4bc>)
 80090a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80090a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80090ac:	d017      	beq.n	80090de <UART_SetConfig+0x336>
 80090ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80090b2:	d817      	bhi.n	80090e4 <UART_SetConfig+0x33c>
 80090b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090b8:	d00b      	beq.n	80090d2 <UART_SetConfig+0x32a>
 80090ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090be:	d811      	bhi.n	80090e4 <UART_SetConfig+0x33c>
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d003      	beq.n	80090cc <UART_SetConfig+0x324>
 80090c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090c8:	d006      	beq.n	80090d8 <UART_SetConfig+0x330>
 80090ca:	e00b      	b.n	80090e4 <UART_SetConfig+0x33c>
 80090cc:	2300      	movs	r3, #0
 80090ce:	77fb      	strb	r3, [r7, #31]
 80090d0:	e00d      	b.n	80090ee <UART_SetConfig+0x346>
 80090d2:	2302      	movs	r3, #2
 80090d4:	77fb      	strb	r3, [r7, #31]
 80090d6:	e00a      	b.n	80090ee <UART_SetConfig+0x346>
 80090d8:	2304      	movs	r3, #4
 80090da:	77fb      	strb	r3, [r7, #31]
 80090dc:	e007      	b.n	80090ee <UART_SetConfig+0x346>
 80090de:	2308      	movs	r3, #8
 80090e0:	77fb      	strb	r3, [r7, #31]
 80090e2:	e004      	b.n	80090ee <UART_SetConfig+0x346>
 80090e4:	2310      	movs	r3, #16
 80090e6:	77fb      	strb	r3, [r7, #31]
 80090e8:	e001      	b.n	80090ee <UART_SetConfig+0x346>
 80090ea:	2310      	movs	r3, #16
 80090ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090f6:	d15b      	bne.n	80091b0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80090f8:	7ffb      	ldrb	r3, [r7, #31]
 80090fa:	2b08      	cmp	r3, #8
 80090fc:	d827      	bhi.n	800914e <UART_SetConfig+0x3a6>
 80090fe:	a201      	add	r2, pc, #4	; (adr r2, 8009104 <UART_SetConfig+0x35c>)
 8009100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009104:	08009129 	.word	0x08009129
 8009108:	08009131 	.word	0x08009131
 800910c:	08009139 	.word	0x08009139
 8009110:	0800914f 	.word	0x0800914f
 8009114:	0800913f 	.word	0x0800913f
 8009118:	0800914f 	.word	0x0800914f
 800911c:	0800914f 	.word	0x0800914f
 8009120:	0800914f 	.word	0x0800914f
 8009124:	08009147 	.word	0x08009147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009128:	f7fe ff38 	bl	8007f9c <HAL_RCC_GetPCLK1Freq>
 800912c:	61b8      	str	r0, [r7, #24]
        break;
 800912e:	e013      	b.n	8009158 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009130:	f7fe ff48 	bl	8007fc4 <HAL_RCC_GetPCLK2Freq>
 8009134:	61b8      	str	r0, [r7, #24]
        break;
 8009136:	e00f      	b.n	8009158 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009138:	4b4b      	ldr	r3, [pc, #300]	; (8009268 <UART_SetConfig+0x4c0>)
 800913a:	61bb      	str	r3, [r7, #24]
        break;
 800913c:	e00c      	b.n	8009158 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800913e:	f7fe fe6b 	bl	8007e18 <HAL_RCC_GetSysClockFreq>
 8009142:	61b8      	str	r0, [r7, #24]
        break;
 8009144:	e008      	b.n	8009158 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800914a:	61bb      	str	r3, [r7, #24]
        break;
 800914c:	e004      	b.n	8009158 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800914e:	2300      	movs	r3, #0
 8009150:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	77bb      	strb	r3, [r7, #30]
        break;
 8009156:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d074      	beq.n	8009248 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	005a      	lsls	r2, r3, #1
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	085b      	lsrs	r3, r3, #1
 8009168:	441a      	add	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009172:	b29b      	uxth	r3, r3
 8009174:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	2b0f      	cmp	r3, #15
 800917a:	d916      	bls.n	80091aa <UART_SetConfig+0x402>
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009182:	d212      	bcs.n	80091aa <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	b29b      	uxth	r3, r3
 8009188:	f023 030f 	bic.w	r3, r3, #15
 800918c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	085b      	lsrs	r3, r3, #1
 8009192:	b29b      	uxth	r3, r3
 8009194:	f003 0307 	and.w	r3, r3, #7
 8009198:	b29a      	uxth	r2, r3
 800919a:	89fb      	ldrh	r3, [r7, #14]
 800919c:	4313      	orrs	r3, r2
 800919e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	89fa      	ldrh	r2, [r7, #14]
 80091a6:	60da      	str	r2, [r3, #12]
 80091a8:	e04e      	b.n	8009248 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	77bb      	strb	r3, [r7, #30]
 80091ae:	e04b      	b.n	8009248 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091b0:	7ffb      	ldrb	r3, [r7, #31]
 80091b2:	2b08      	cmp	r3, #8
 80091b4:	d827      	bhi.n	8009206 <UART_SetConfig+0x45e>
 80091b6:	a201      	add	r2, pc, #4	; (adr r2, 80091bc <UART_SetConfig+0x414>)
 80091b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091bc:	080091e1 	.word	0x080091e1
 80091c0:	080091e9 	.word	0x080091e9
 80091c4:	080091f1 	.word	0x080091f1
 80091c8:	08009207 	.word	0x08009207
 80091cc:	080091f7 	.word	0x080091f7
 80091d0:	08009207 	.word	0x08009207
 80091d4:	08009207 	.word	0x08009207
 80091d8:	08009207 	.word	0x08009207
 80091dc:	080091ff 	.word	0x080091ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091e0:	f7fe fedc 	bl	8007f9c <HAL_RCC_GetPCLK1Freq>
 80091e4:	61b8      	str	r0, [r7, #24]
        break;
 80091e6:	e013      	b.n	8009210 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091e8:	f7fe feec 	bl	8007fc4 <HAL_RCC_GetPCLK2Freq>
 80091ec:	61b8      	str	r0, [r7, #24]
        break;
 80091ee:	e00f      	b.n	8009210 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091f0:	4b1d      	ldr	r3, [pc, #116]	; (8009268 <UART_SetConfig+0x4c0>)
 80091f2:	61bb      	str	r3, [r7, #24]
        break;
 80091f4:	e00c      	b.n	8009210 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091f6:	f7fe fe0f 	bl	8007e18 <HAL_RCC_GetSysClockFreq>
 80091fa:	61b8      	str	r0, [r7, #24]
        break;
 80091fc:	e008      	b.n	8009210 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009202:	61bb      	str	r3, [r7, #24]
        break;
 8009204:	e004      	b.n	8009210 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	77bb      	strb	r3, [r7, #30]
        break;
 800920e:	bf00      	nop
    }

    if (pclk != 0U)
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d018      	beq.n	8009248 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	085a      	lsrs	r2, r3, #1
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	441a      	add	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	fbb2 f3f3 	udiv	r3, r2, r3
 8009228:	b29b      	uxth	r3, r3
 800922a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	2b0f      	cmp	r3, #15
 8009230:	d908      	bls.n	8009244 <UART_SetConfig+0x49c>
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009238:	d204      	bcs.n	8009244 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	60da      	str	r2, [r3, #12]
 8009242:	e001      	b.n	8009248 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009254:	7fbb      	ldrb	r3, [r7, #30]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3720      	adds	r7, #32
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	40007c00 	.word	0x40007c00
 8009264:	40023800 	.word	0x40023800
 8009268:	00f42400 	.word	0x00f42400

0800926c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00a      	beq.n	8009296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	f003 0304 	and.w	r3, r3, #4
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00a      	beq.n	80092da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	f003 0310 	and.w	r3, r3, #16
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01a      	beq.n	8009382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800936a:	d10a      	bne.n	8009382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	605a      	str	r2, [r3, #4]
  }
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093c0:	f7fd fdee 	bl	8006fa0 <HAL_GetTick>
 80093c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0308 	and.w	r3, r3, #8
 80093d0:	2b08      	cmp	r3, #8
 80093d2:	d10e      	bne.n	80093f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f817 	bl	8009416 <UART_WaitOnFlagUntilTimeout>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e00d      	b.n	800940e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2220      	movs	r2, #32
 80093f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2220      	movs	r2, #32
 80093fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b084      	sub	sp, #16
 800941a:	af00      	add	r7, sp, #0
 800941c:	60f8      	str	r0, [r7, #12]
 800941e:	60b9      	str	r1, [r7, #8]
 8009420:	603b      	str	r3, [r7, #0]
 8009422:	4613      	mov	r3, r2
 8009424:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009426:	e05e      	b.n	80094e6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942e:	d05a      	beq.n	80094e6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009430:	f7fd fdb6 	bl	8006fa0 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	69ba      	ldr	r2, [r7, #24]
 800943c:	429a      	cmp	r2, r3
 800943e:	d302      	bcc.n	8009446 <UART_WaitOnFlagUntilTimeout+0x30>
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d11b      	bne.n	800947e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009454:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 0201 	bic.w	r2, r2, #1
 8009464:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2220      	movs	r2, #32
 800946a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2220      	movs	r2, #32
 8009470:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e043      	b.n	8009506 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0304 	and.w	r3, r3, #4
 8009488:	2b00      	cmp	r3, #0
 800948a:	d02c      	beq.n	80094e6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800949a:	d124      	bne.n	80094e6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80094b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f022 0201 	bic.w	r2, r2, #1
 80094c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2220      	movs	r2, #32
 80094ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2220      	movs	r2, #32
 80094d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e00f      	b.n	8009506 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	69da      	ldr	r2, [r3, #28]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	4013      	ands	r3, r2
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	bf0c      	ite	eq
 80094f6:	2301      	moveq	r3, #1
 80094f8:	2300      	movne	r3, #0
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	461a      	mov	r2, r3
 80094fe:	79fb      	ldrb	r3, [r7, #7]
 8009500:	429a      	cmp	r2, r3
 8009502:	d091      	beq.n	8009428 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800950e:	b480      	push	{r7}
 8009510:	b083      	sub	sp, #12
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009524:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f022 0201 	bic.w	r2, r2, #1
 8009534:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800953a:	2b01      	cmp	r3, #1
 800953c:	d107      	bne.n	800954e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f022 0210 	bic.w	r2, r2, #16
 800954c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2220      	movs	r2, #32
 8009552:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f7ff fbf6 	bl	8008d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009590:	bf00      	nop
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095ae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2220      	movs	r2, #32
 80095b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff fbd3 	bl	8008d68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095c2:	bf00      	nop
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <_ZdlPv>:
 80095ca:	f000 ba99 	b.w	8009b00 <free>

080095ce <__cxa_guard_acquire>:
 80095ce:	6803      	ldr	r3, [r0, #0]
 80095d0:	07db      	lsls	r3, r3, #31
 80095d2:	d406      	bmi.n	80095e2 <__cxa_guard_acquire+0x14>
 80095d4:	7843      	ldrb	r3, [r0, #1]
 80095d6:	b103      	cbz	r3, 80095da <__cxa_guard_acquire+0xc>
 80095d8:	deff      	udf	#255	; 0xff
 80095da:	2301      	movs	r3, #1
 80095dc:	7043      	strb	r3, [r0, #1]
 80095de:	4618      	mov	r0, r3
 80095e0:	4770      	bx	lr
 80095e2:	2000      	movs	r0, #0
 80095e4:	4770      	bx	lr

080095e6 <__cxa_guard_release>:
 80095e6:	2301      	movs	r3, #1
 80095e8:	6003      	str	r3, [r0, #0]
 80095ea:	4770      	bx	lr

080095ec <_Znwj>:
 80095ec:	2801      	cmp	r0, #1
 80095ee:	bf38      	it	cc
 80095f0:	2001      	movcc	r0, #1
 80095f2:	b510      	push	{r4, lr}
 80095f4:	4604      	mov	r4, r0
 80095f6:	4620      	mov	r0, r4
 80095f8:	f000 fa7a 	bl	8009af0 <malloc>
 80095fc:	b930      	cbnz	r0, 800960c <_Znwj+0x20>
 80095fe:	f000 fa37 	bl	8009a70 <_ZSt15get_new_handlerv>
 8009602:	b908      	cbnz	r0, 8009608 <_Znwj+0x1c>
 8009604:	f000 fa3c 	bl	8009a80 <abort>
 8009608:	4780      	blx	r0
 800960a:	e7f4      	b.n	80095f6 <_Znwj+0xa>
 800960c:	bd10      	pop	{r4, pc}

0800960e <_ZNSaIcEC1Ev>:
 800960e:	4770      	bx	lr

08009610 <_ZNSaIcED1Ev>:
 8009610:	4770      	bx	lr

08009612 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8009612:	68c3      	ldr	r3, [r0, #12]
 8009614:	689a      	ldr	r2, [r3, #8]
 8009616:	60c2      	str	r2, [r0, #12]
 8009618:	b510      	push	{r4, lr}
 800961a:	b102      	cbz	r2, 800961e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 800961c:	6050      	str	r0, [r2, #4]
 800961e:	6842      	ldr	r2, [r0, #4]
 8009620:	605a      	str	r2, [r3, #4]
 8009622:	680c      	ldr	r4, [r1, #0]
 8009624:	4284      	cmp	r4, r0
 8009626:	d103      	bne.n	8009630 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8009628:	600b      	str	r3, [r1, #0]
 800962a:	6098      	str	r0, [r3, #8]
 800962c:	6043      	str	r3, [r0, #4]
 800962e:	bd10      	pop	{r4, pc}
 8009630:	6891      	ldr	r1, [r2, #8]
 8009632:	4281      	cmp	r1, r0
 8009634:	bf0c      	ite	eq
 8009636:	6093      	streq	r3, [r2, #8]
 8009638:	60d3      	strne	r3, [r2, #12]
 800963a:	e7f6      	b.n	800962a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0800963c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 800963c:	6883      	ldr	r3, [r0, #8]
 800963e:	68da      	ldr	r2, [r3, #12]
 8009640:	6082      	str	r2, [r0, #8]
 8009642:	b510      	push	{r4, lr}
 8009644:	b102      	cbz	r2, 8009648 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8009646:	6050      	str	r0, [r2, #4]
 8009648:	6842      	ldr	r2, [r0, #4]
 800964a:	605a      	str	r2, [r3, #4]
 800964c:	680c      	ldr	r4, [r1, #0]
 800964e:	4284      	cmp	r4, r0
 8009650:	d103      	bne.n	800965a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8009652:	600b      	str	r3, [r1, #0]
 8009654:	60d8      	str	r0, [r3, #12]
 8009656:	6043      	str	r3, [r0, #4]
 8009658:	bd10      	pop	{r4, pc}
 800965a:	68d1      	ldr	r1, [r2, #12]
 800965c:	4281      	cmp	r1, r0
 800965e:	bf0c      	ite	eq
 8009660:	60d3      	streq	r3, [r2, #12]
 8009662:	6093      	strne	r3, [r2, #8]
 8009664:	e7f6      	b.n	8009654 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08009666 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8009666:	7803      	ldrb	r3, [r0, #0]
 8009668:	b933      	cbnz	r3, 8009678 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800966a:	6843      	ldr	r3, [r0, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	4283      	cmp	r3, r0
 8009670:	d102      	bne.n	8009678 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	4618      	mov	r0, r3
 8009676:	4770      	bx	lr
 8009678:	6882      	ldr	r2, [r0, #8]
 800967a:	b122      	cbz	r2, 8009686 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 800967c:	4613      	mov	r3, r2
 800967e:	68d2      	ldr	r2, [r2, #12]
 8009680:	2a00      	cmp	r2, #0
 8009682:	d1fb      	bne.n	800967c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8009684:	e7f6      	b.n	8009674 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8009686:	6843      	ldr	r3, [r0, #4]
 8009688:	689a      	ldr	r2, [r3, #8]
 800968a:	4282      	cmp	r2, r0
 800968c:	d1f2      	bne.n	8009674 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 800968e:	4618      	mov	r0, r3
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	e7f9      	b.n	8009688 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08009694 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8009694:	68c3      	ldr	r3, [r0, #12]
 8009696:	b123      	cbz	r3, 80096a2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8009698:	4618      	mov	r0, r3
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1fb      	bne.n	8009698 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80096a0:	4770      	bx	lr
 80096a2:	6843      	ldr	r3, [r0, #4]
 80096a4:	68da      	ldr	r2, [r3, #12]
 80096a6:	4282      	cmp	r2, r0
 80096a8:	d102      	bne.n	80096b0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 80096aa:	4618      	mov	r0, r3
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	e7f9      	b.n	80096a4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80096b0:	68c2      	ldr	r2, [r0, #12]
 80096b2:	4293      	cmp	r3, r2
 80096b4:	bf18      	it	ne
 80096b6:	4618      	movne	r0, r3
 80096b8:	4770      	bx	lr

080096ba <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80096ba:	f7ff bfd4 	b.w	8009666 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080096be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80096be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096c2:	461e      	mov	r6, r3
 80096c4:	f103 0804 	add.w	r8, r3, #4
 80096c8:	2300      	movs	r3, #0
 80096ca:	e9c1 3302 	strd	r3, r3, [r1, #8]
 80096ce:	460c      	mov	r4, r1
 80096d0:	604a      	str	r2, [r1, #4]
 80096d2:	700b      	strb	r3, [r1, #0]
 80096d4:	b300      	cbz	r0, 8009718 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 80096d6:	4296      	cmp	r6, r2
 80096d8:	6091      	str	r1, [r2, #8]
 80096da:	d118      	bne.n	800970e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 80096dc:	6071      	str	r1, [r6, #4]
 80096de:	60f4      	str	r4, [r6, #12]
 80096e0:	2701      	movs	r7, #1
 80096e2:	f04f 0900 	mov.w	r9, #0
 80096e6:	6873      	ldr	r3, [r6, #4]
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	d03f      	beq.n	800976c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80096ec:	6860      	ldr	r0, [r4, #4]
 80096ee:	7802      	ldrb	r2, [r0, #0]
 80096f0:	2a00      	cmp	r2, #0
 80096f2:	d13c      	bne.n	800976e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 80096f4:	6845      	ldr	r5, [r0, #4]
 80096f6:	68ab      	ldr	r3, [r5, #8]
 80096f8:	4298      	cmp	r0, r3
 80096fa:	d123      	bne.n	8009744 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 80096fc:	68eb      	ldr	r3, [r5, #12]
 80096fe:	b183      	cbz	r3, 8009722 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8009700:	781a      	ldrb	r2, [r3, #0]
 8009702:	b972      	cbnz	r2, 8009722 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8009704:	7007      	strb	r7, [r0, #0]
 8009706:	701f      	strb	r7, [r3, #0]
 8009708:	702a      	strb	r2, [r5, #0]
 800970a:	462c      	mov	r4, r5
 800970c:	e7eb      	b.n	80096e6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 800970e:	68b3      	ldr	r3, [r6, #8]
 8009710:	4293      	cmp	r3, r2
 8009712:	d1e5      	bne.n	80096e0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8009714:	60b1      	str	r1, [r6, #8]
 8009716:	e7e3      	b.n	80096e0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8009718:	60d1      	str	r1, [r2, #12]
 800971a:	68f3      	ldr	r3, [r6, #12]
 800971c:	4293      	cmp	r3, r2
 800971e:	d1df      	bne.n	80096e0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8009720:	e7dd      	b.n	80096de <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8009722:	68c3      	ldr	r3, [r0, #12]
 8009724:	42a3      	cmp	r3, r4
 8009726:	d103      	bne.n	8009730 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8009728:	4641      	mov	r1, r8
 800972a:	f7ff ff72 	bl	8009612 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800972e:	4604      	mov	r4, r0
 8009730:	6863      	ldr	r3, [r4, #4]
 8009732:	4641      	mov	r1, r8
 8009734:	701f      	strb	r7, [r3, #0]
 8009736:	4628      	mov	r0, r5
 8009738:	f885 9000 	strb.w	r9, [r5]
 800973c:	f7ff ff7e 	bl	800963c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8009740:	4625      	mov	r5, r4
 8009742:	e7e2      	b.n	800970a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8009744:	b113      	cbz	r3, 800974c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8009746:	781a      	ldrb	r2, [r3, #0]
 8009748:	2a00      	cmp	r2, #0
 800974a:	d0db      	beq.n	8009704 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 800974c:	6883      	ldr	r3, [r0, #8]
 800974e:	42a3      	cmp	r3, r4
 8009750:	d103      	bne.n	800975a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8009752:	4641      	mov	r1, r8
 8009754:	f7ff ff72 	bl	800963c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8009758:	4604      	mov	r4, r0
 800975a:	6863      	ldr	r3, [r4, #4]
 800975c:	4641      	mov	r1, r8
 800975e:	701f      	strb	r7, [r3, #0]
 8009760:	4628      	mov	r0, r5
 8009762:	f885 9000 	strb.w	r9, [r5]
 8009766:	f7ff ff54 	bl	8009612 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800976a:	e7e9      	b.n	8009740 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 800976c:	4623      	mov	r3, r4
 800976e:	2201      	movs	r2, #1
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009776 <_ZSt17__throw_bad_allocv>:
 8009776:	b508      	push	{r3, lr}
 8009778:	f000 f982 	bl	8009a80 <abort>

0800977c <_ZSt19__throw_logic_errorPKc>:
 800977c:	b508      	push	{r3, lr}
 800977e:	f000 f97f 	bl	8009a80 <abort>

08009782 <_ZSt20__throw_length_errorPKc>:
 8009782:	b508      	push	{r3, lr}
 8009784:	f000 f97c 	bl	8009a80 <abort>

08009788 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8009788:	b10a      	cbz	r2, 800978e <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800978a:	f000 b9c1 	b.w	8009b10 <memcmp>
 800978e:	4610      	mov	r0, r2
 8009790:	4770      	bx	lr

08009792 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8009792:	b10a      	cbz	r2, 8009798 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8009794:	f000 b9ca 	b.w	8009b2c <memcpy>
 8009798:	4770      	bx	lr

0800979a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800979a:	6001      	str	r1, [r0, #0]
 800979c:	4770      	bx	lr

0800979e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800979e:	6800      	ldr	r0, [r0, #0]
 80097a0:	4770      	bx	lr

080097a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80097a2:	3008      	adds	r0, #8
 80097a4:	4770      	bx	lr

080097a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80097a6:	6081      	str	r1, [r0, #8]
 80097a8:	4770      	bx	lr

080097aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80097aa:	6803      	ldr	r3, [r0, #0]
 80097ac:	6041      	str	r1, [r0, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	545a      	strb	r2, [r3, r1]
 80097b2:	4770      	bx	lr

080097b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80097b4:	b508      	push	{r3, lr}
 80097b6:	680b      	ldr	r3, [r1, #0]
 80097b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097bc:	d302      	bcc.n	80097c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80097be:	480d      	ldr	r0, [pc, #52]	; (80097f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80097c0:	f7ff ffdf 	bl	8009782 <_ZSt20__throw_length_errorPKc>
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d90b      	bls.n	80097e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80097c8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80097cc:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80097d0:	d206      	bcs.n	80097e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80097d2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80097d6:	bf2a      	itet	cs
 80097d8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80097dc:	6008      	strcc	r0, [r1, #0]
 80097de:	600b      	strcs	r3, [r1, #0]
 80097e0:	6808      	ldr	r0, [r1, #0]
 80097e2:	3001      	adds	r0, #1
 80097e4:	d501      	bpl.n	80097ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80097e6:	f7ff ffc6 	bl	8009776 <_ZSt17__throw_bad_allocv>
 80097ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80097ee:	f7ff befd 	b.w	80095ec <_Znwj>
 80097f2:	bf00      	nop
 80097f4:	0800a910 	.word	0x0800a910

080097f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80097f8:	f850 3b08 	ldr.w	r3, [r0], #8
 80097fc:	4283      	cmp	r3, r0
 80097fe:	d002      	beq.n	8009806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8009800:	4618      	mov	r0, r3
 8009802:	f7ff bee2 	b.w	80095ca <_ZdlPv>
 8009806:	4770      	bx	lr

08009808 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8009808:	6840      	ldr	r0, [r0, #4]
 800980a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800980e:	3901      	subs	r1, #1
 8009810:	1a09      	subs	r1, r1, r0
 8009812:	4291      	cmp	r1, r2
 8009814:	b508      	push	{r3, lr}
 8009816:	d202      	bcs.n	800981e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8009818:	4618      	mov	r0, r3
 800981a:	f7ff ffb2 	bl	8009782 <_ZSt20__throw_length_errorPKc>
 800981e:	bd08      	pop	{r3, pc}

08009820 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8009820:	6803      	ldr	r3, [r0, #0]
 8009822:	428b      	cmp	r3, r1
 8009824:	d806      	bhi.n	8009834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8009826:	6840      	ldr	r0, [r0, #4]
 8009828:	4418      	add	r0, r3
 800982a:	4281      	cmp	r1, r0
 800982c:	bf94      	ite	ls
 800982e:	2000      	movls	r0, #0
 8009830:	2001      	movhi	r0, #1
 8009832:	4770      	bx	lr
 8009834:	2001      	movs	r0, #1
 8009836:	4770      	bx	lr

08009838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8009838:	2a01      	cmp	r2, #1
 800983a:	b510      	push	{r4, lr}
 800983c:	d102      	bne.n	8009844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800983e:	780a      	ldrb	r2, [r1, #0]
 8009840:	7002      	strb	r2, [r0, #0]
 8009842:	bd10      	pop	{r4, pc}
 8009844:	f7ff ffa5 	bl	8009792 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8009848:	e7fb      	b.n	8009842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800984a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800984a:	2a01      	cmp	r2, #1
 800984c:	b430      	push	{r4, r5}
 800984e:	d103      	bne.n	8009858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8009850:	780b      	ldrb	r3, [r1, #0]
 8009852:	7003      	strb	r3, [r0, #0]
 8009854:	bc30      	pop	{r4, r5}
 8009856:	4770      	bx	lr
 8009858:	2a00      	cmp	r2, #0
 800985a:	d0fb      	beq.n	8009854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800985c:	bc30      	pop	{r4, r5}
 800985e:	f000 b973 	b.w	8009b48 <memmove>

08009862 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8009862:	b508      	push	{r3, lr}
 8009864:	1a52      	subs	r2, r2, r1
 8009866:	f7ff ffe7 	bl	8009838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800986a:	bd08      	pop	{r3, pc}

0800986c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800986c:	b508      	push	{r3, lr}
 800986e:	1a52      	subs	r2, r2, r1
 8009870:	f7ff ffe2 	bl	8009838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009874:	bd08      	pop	{r3, pc}

08009876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8009876:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800987a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800987c:	461f      	mov	r7, r3
 800987e:	6843      	ldr	r3, [r0, #4]
 8009880:	eb01 0802 	add.w	r8, r1, r2
 8009884:	1ab2      	subs	r2, r6, r2
 8009886:	441a      	add	r2, r3
 8009888:	eba3 0908 	sub.w	r9, r3, r8
 800988c:	4603      	mov	r3, r0
 800988e:	9201      	str	r2, [sp, #4]
 8009890:	f853 2b08 	ldr.w	r2, [r3], #8
 8009894:	429a      	cmp	r2, r3
 8009896:	bf18      	it	ne
 8009898:	6882      	ldrne	r2, [r0, #8]
 800989a:	460d      	mov	r5, r1
 800989c:	bf08      	it	eq
 800989e:	220f      	moveq	r2, #15
 80098a0:	a901      	add	r1, sp, #4
 80098a2:	4604      	mov	r4, r0
 80098a4:	f7ff ff86 	bl	80097b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80098a8:	4682      	mov	sl, r0
 80098aa:	b11d      	cbz	r5, 80098b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80098ac:	6821      	ldr	r1, [r4, #0]
 80098ae:	462a      	mov	r2, r5
 80098b0:	f7ff ffc2 	bl	8009838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80098b4:	b137      	cbz	r7, 80098c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80098b6:	b12e      	cbz	r6, 80098c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80098b8:	4632      	mov	r2, r6
 80098ba:	4639      	mov	r1, r7
 80098bc:	eb0a 0005 	add.w	r0, sl, r5
 80098c0:	f7ff ffba 	bl	8009838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80098c4:	f1b9 0f00 	cmp.w	r9, #0
 80098c8:	d007      	beq.n	80098da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 80098ca:	6821      	ldr	r1, [r4, #0]
 80098cc:	4435      	add	r5, r6
 80098ce:	464a      	mov	r2, r9
 80098d0:	4441      	add	r1, r8
 80098d2:	eb0a 0005 	add.w	r0, sl, r5
 80098d6:	f7ff ffaf 	bl	8009838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80098da:	4620      	mov	r0, r4
 80098dc:	f7ff ff8c 	bl	80097f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80098e0:	9b01      	ldr	r3, [sp, #4]
 80098e2:	f8c4 a000 	str.w	sl, [r4]
 80098e6:	60a3      	str	r3, [r4, #8]
 80098e8:	b002      	add	sp, #8
 80098ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080098ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80098ee:	f100 0208 	add.w	r2, r0, #8
 80098f2:	6002      	str	r2, [r0, #0]
 80098f4:	2200      	movs	r2, #0
 80098f6:	6042      	str	r2, [r0, #4]
 80098f8:	7202      	strb	r2, [r0, #8]
 80098fa:	4770      	bx	lr

080098fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80098fc:	b510      	push	{r4, lr}
 80098fe:	4604      	mov	r4, r0
 8009900:	f7ff ff7a 	bl	80097f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009904:	4620      	mov	r0, r4
 8009906:	bd10      	pop	{r4, pc}

08009908 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8009908:	6840      	ldr	r0, [r0, #4]
 800990a:	4770      	bx	lr

0800990c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800990c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009910:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009912:	4614      	mov	r4, r2
 8009914:	4680      	mov	r8, r0
 8009916:	462a      	mov	r2, r5
 8009918:	4689      	mov	r9, r1
 800991a:	461f      	mov	r7, r3
 800991c:	4621      	mov	r1, r4
 800991e:	4b39      	ldr	r3, [pc, #228]	; (8009a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 8009920:	f7ff ff72 	bl	8009808 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8009924:	4642      	mov	r2, r8
 8009926:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800992a:	f852 6b08 	ldr.w	r6, [r2], #8
 800992e:	4296      	cmp	r6, r2
 8009930:	bf18      	it	ne
 8009932:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8009936:	eba5 0b04 	sub.w	fp, r5, r4
 800993a:	eb03 0a0b 	add.w	sl, r3, fp
 800993e:	bf08      	it	eq
 8009940:	220f      	moveq	r2, #15
 8009942:	4552      	cmp	r2, sl
 8009944:	d351      	bcc.n	80099ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8009946:	444e      	add	r6, r9
 8009948:	4639      	mov	r1, r7
 800994a:	44a1      	add	r9, r4
 800994c:	4640      	mov	r0, r8
 800994e:	eba3 0909 	sub.w	r9, r3, r9
 8009952:	f7ff ff65 	bl	8009820 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8009956:	b180      	cbz	r0, 800997a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8009958:	f1b9 0f00 	cmp.w	r9, #0
 800995c:	d006      	beq.n	800996c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800995e:	42ac      	cmp	r4, r5
 8009960:	d004      	beq.n	800996c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8009962:	464a      	mov	r2, r9
 8009964:	1931      	adds	r1, r6, r4
 8009966:	1970      	adds	r0, r6, r5
 8009968:	f7ff ff6f 	bl	800984a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800996c:	b315      	cbz	r5, 80099b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800996e:	462a      	mov	r2, r5
 8009970:	4639      	mov	r1, r7
 8009972:	4630      	mov	r0, r6
 8009974:	f7ff ff60 	bl	8009838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009978:	e01c      	b.n	80099b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800997a:	b135      	cbz	r5, 800998a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800997c:	42ac      	cmp	r4, r5
 800997e:	d33c      	bcc.n	80099fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8009980:	462a      	mov	r2, r5
 8009982:	4639      	mov	r1, r7
 8009984:	4630      	mov	r0, r6
 8009986:	f7ff ff60 	bl	800984a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800998a:	f1b9 0f00 	cmp.w	r9, #0
 800998e:	d011      	beq.n	80099b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009990:	42ac      	cmp	r4, r5
 8009992:	d00f      	beq.n	80099b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009994:	464a      	mov	r2, r9
 8009996:	1931      	adds	r1, r6, r4
 8009998:	1970      	adds	r0, r6, r5
 800999a:	f7ff ff56 	bl	800984a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800999e:	42ac      	cmp	r4, r5
 80099a0:	d208      	bcs.n	80099b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80099a2:	4434      	add	r4, r6
 80099a4:	197b      	adds	r3, r7, r5
 80099a6:	429c      	cmp	r4, r3
 80099a8:	d30f      	bcc.n	80099ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 80099aa:	462a      	mov	r2, r5
 80099ac:	4639      	mov	r1, r7
 80099ae:	4630      	mov	r0, r6
 80099b0:	f7ff ff4b 	bl	800984a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80099b4:	f8d8 3000 	ldr.w	r3, [r8]
 80099b8:	f8c8 a004 	str.w	sl, [r8, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	4640      	mov	r0, r8
 80099c0:	f803 200a 	strb.w	r2, [r3, sl]
 80099c4:	b003      	add	sp, #12
 80099c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ca:	42bc      	cmp	r4, r7
 80099cc:	d803      	bhi.n	80099d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 80099ce:	462a      	mov	r2, r5
 80099d0:	eb07 010b 	add.w	r1, r7, fp
 80099d4:	e7cd      	b.n	8009972 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 80099d6:	1be4      	subs	r4, r4, r7
 80099d8:	4622      	mov	r2, r4
 80099da:	4639      	mov	r1, r7
 80099dc:	4630      	mov	r0, r6
 80099de:	f7ff ff34 	bl	800984a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80099e2:	1b2a      	subs	r2, r5, r4
 80099e4:	1971      	adds	r1, r6, r5
 80099e6:	1930      	adds	r0, r6, r4
 80099e8:	e7c4      	b.n	8009974 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80099ea:	9500      	str	r5, [sp, #0]
 80099ec:	463b      	mov	r3, r7
 80099ee:	4622      	mov	r2, r4
 80099f0:	4649      	mov	r1, r9
 80099f2:	4640      	mov	r0, r8
 80099f4:	f7ff ff3f 	bl	8009876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80099f8:	e7dc      	b.n	80099b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80099fa:	f1b9 0f00 	cmp.w	r9, #0
 80099fe:	d0d0      	beq.n	80099a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8009a00:	e7c8      	b.n	8009994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8009a02:	bf00      	nop
 8009a04:	0800a928 	.word	0x0800a928

08009a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8009a08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	9103      	str	r1, [sp, #12]
 8009a10:	f7f6 fbfa 	bl	8000208 <strlen>
 8009a14:	9b03      	ldr	r3, [sp, #12]
 8009a16:	9000      	str	r0, [sp, #0]
 8009a18:	6862      	ldr	r2, [r4, #4]
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f7ff ff75 	bl	800990c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8009a22:	b004      	add	sp, #16
 8009a24:	bd10      	pop	{r4, pc}

08009a26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8009a26:	b508      	push	{r3, lr}
 8009a28:	f7ff ffee 	bl	8009a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8009a2c:	bd08      	pop	{r3, pc}

08009a2e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8009a2e:	6800      	ldr	r0, [r0, #0]
 8009a30:	4770      	bx	lr

08009a32 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 8009a32:	b538      	push	{r3, r4, r5, lr}
 8009a34:	6845      	ldr	r5, [r0, #4]
 8009a36:	684c      	ldr	r4, [r1, #4]
 8009a38:	6800      	ldr	r0, [r0, #0]
 8009a3a:	6809      	ldr	r1, [r1, #0]
 8009a3c:	42a5      	cmp	r5, r4
 8009a3e:	462a      	mov	r2, r5
 8009a40:	bf28      	it	cs
 8009a42:	4622      	movcs	r2, r4
 8009a44:	f7ff fea0 	bl	8009788 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8009a48:	b900      	cbnz	r0, 8009a4c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 8009a4a:	1b28      	subs	r0, r5, r4
 8009a4c:	bd38      	pop	{r3, r4, r5, pc}

08009a4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8009a4e:	6001      	str	r1, [r0, #0]
 8009a50:	4770      	bx	lr

08009a52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8009a52:	b538      	push	{r3, r4, r5, lr}
 8009a54:	f100 0308 	add.w	r3, r0, #8
 8009a58:	6003      	str	r3, [r0, #0]
 8009a5a:	e9d1 5200 	ldrd	r5, r2, [r1]
 8009a5e:	4604      	mov	r4, r0
 8009a60:	f04f 0300 	mov.w	r3, #0
 8009a64:	442a      	add	r2, r5
 8009a66:	4629      	mov	r1, r5
 8009a68:	f7fa fde4 	bl	8004634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}

08009a70 <_ZSt15get_new_handlerv>:
 8009a70:	4b02      	ldr	r3, [pc, #8]	; (8009a7c <_ZSt15get_new_handlerv+0xc>)
 8009a72:	6818      	ldr	r0, [r3, #0]
 8009a74:	f3bf 8f5b 	dmb	ish
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	20000524 	.word	0x20000524

08009a80 <abort>:
 8009a80:	b508      	push	{r3, lr}
 8009a82:	2006      	movs	r0, #6
 8009a84:	f000 f964 	bl	8009d50 <raise>
 8009a88:	2001      	movs	r0, #1
 8009a8a:	f7fc ffd1 	bl	8006a30 <_exit>

08009a8e <atexit>:
 8009a8e:	2300      	movs	r3, #0
 8009a90:	4601      	mov	r1, r0
 8009a92:	461a      	mov	r2, r3
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 b977 	b.w	8009d88 <__register_exitproc>
	...

08009a9c <__errno>:
 8009a9c:	4b01      	ldr	r3, [pc, #4]	; (8009aa4 <__errno+0x8>)
 8009a9e:	6818      	ldr	r0, [r3, #0]
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	2000000c 	.word	0x2000000c

08009aa8 <__libc_init_array>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	4d0d      	ldr	r5, [pc, #52]	; (8009ae0 <__libc_init_array+0x38>)
 8009aac:	4c0d      	ldr	r4, [pc, #52]	; (8009ae4 <__libc_init_array+0x3c>)
 8009aae:	1b64      	subs	r4, r4, r5
 8009ab0:	10a4      	asrs	r4, r4, #2
 8009ab2:	2600      	movs	r6, #0
 8009ab4:	42a6      	cmp	r6, r4
 8009ab6:	d109      	bne.n	8009acc <__libc_init_array+0x24>
 8009ab8:	4d0b      	ldr	r5, [pc, #44]	; (8009ae8 <__libc_init_array+0x40>)
 8009aba:	4c0c      	ldr	r4, [pc, #48]	; (8009aec <__libc_init_array+0x44>)
 8009abc:	f000 f9d6 	bl	8009e6c <_init>
 8009ac0:	1b64      	subs	r4, r4, r5
 8009ac2:	10a4      	asrs	r4, r4, #2
 8009ac4:	2600      	movs	r6, #0
 8009ac6:	42a6      	cmp	r6, r4
 8009ac8:	d105      	bne.n	8009ad6 <__libc_init_array+0x2e>
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
 8009acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ad0:	4798      	blx	r3
 8009ad2:	3601      	adds	r6, #1
 8009ad4:	e7ee      	b.n	8009ab4 <__libc_init_array+0xc>
 8009ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ada:	4798      	blx	r3
 8009adc:	3601      	adds	r6, #1
 8009ade:	e7f2      	b.n	8009ac6 <__libc_init_array+0x1e>
 8009ae0:	0800a9ac 	.word	0x0800a9ac
 8009ae4:	0800a9ac 	.word	0x0800a9ac
 8009ae8:	0800a9ac 	.word	0x0800a9ac
 8009aec:	0800a9e8 	.word	0x0800a9e8

08009af0 <malloc>:
 8009af0:	4b02      	ldr	r3, [pc, #8]	; (8009afc <malloc+0xc>)
 8009af2:	4601      	mov	r1, r0
 8009af4:	6818      	ldr	r0, [r3, #0]
 8009af6:	f000 b899 	b.w	8009c2c <_malloc_r>
 8009afa:	bf00      	nop
 8009afc:	2000000c 	.word	0x2000000c

08009b00 <free>:
 8009b00:	4b02      	ldr	r3, [pc, #8]	; (8009b0c <free+0xc>)
 8009b02:	4601      	mov	r1, r0
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	f000 b841 	b.w	8009b8c <_free_r>
 8009b0a:	bf00      	nop
 8009b0c:	2000000c 	.word	0x2000000c

08009b10 <memcmp>:
 8009b10:	b530      	push	{r4, r5, lr}
 8009b12:	3901      	subs	r1, #1
 8009b14:	2400      	movs	r4, #0
 8009b16:	42a2      	cmp	r2, r4
 8009b18:	d101      	bne.n	8009b1e <memcmp+0xe>
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	e005      	b.n	8009b2a <memcmp+0x1a>
 8009b1e:	5d03      	ldrb	r3, [r0, r4]
 8009b20:	3401      	adds	r4, #1
 8009b22:	5d0d      	ldrb	r5, [r1, r4]
 8009b24:	42ab      	cmp	r3, r5
 8009b26:	d0f6      	beq.n	8009b16 <memcmp+0x6>
 8009b28:	1b58      	subs	r0, r3, r5
 8009b2a:	bd30      	pop	{r4, r5, pc}

08009b2c <memcpy>:
 8009b2c:	440a      	add	r2, r1
 8009b2e:	4291      	cmp	r1, r2
 8009b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b34:	d100      	bne.n	8009b38 <memcpy+0xc>
 8009b36:	4770      	bx	lr
 8009b38:	b510      	push	{r4, lr}
 8009b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b42:	4291      	cmp	r1, r2
 8009b44:	d1f9      	bne.n	8009b3a <memcpy+0xe>
 8009b46:	bd10      	pop	{r4, pc}

08009b48 <memmove>:
 8009b48:	4288      	cmp	r0, r1
 8009b4a:	b510      	push	{r4, lr}
 8009b4c:	eb01 0402 	add.w	r4, r1, r2
 8009b50:	d902      	bls.n	8009b58 <memmove+0x10>
 8009b52:	4284      	cmp	r4, r0
 8009b54:	4623      	mov	r3, r4
 8009b56:	d807      	bhi.n	8009b68 <memmove+0x20>
 8009b58:	1e43      	subs	r3, r0, #1
 8009b5a:	42a1      	cmp	r1, r4
 8009b5c:	d008      	beq.n	8009b70 <memmove+0x28>
 8009b5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b66:	e7f8      	b.n	8009b5a <memmove+0x12>
 8009b68:	4402      	add	r2, r0
 8009b6a:	4601      	mov	r1, r0
 8009b6c:	428a      	cmp	r2, r1
 8009b6e:	d100      	bne.n	8009b72 <memmove+0x2a>
 8009b70:	bd10      	pop	{r4, pc}
 8009b72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b7a:	e7f7      	b.n	8009b6c <memmove+0x24>

08009b7c <memset>:
 8009b7c:	4402      	add	r2, r0
 8009b7e:	4603      	mov	r3, r0
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d100      	bne.n	8009b86 <memset+0xa>
 8009b84:	4770      	bx	lr
 8009b86:	f803 1b01 	strb.w	r1, [r3], #1
 8009b8a:	e7f9      	b.n	8009b80 <memset+0x4>

08009b8c <_free_r>:
 8009b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b8e:	2900      	cmp	r1, #0
 8009b90:	d048      	beq.n	8009c24 <_free_r+0x98>
 8009b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b96:	9001      	str	r0, [sp, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b9e:	bfb8      	it	lt
 8009ba0:	18e4      	addlt	r4, r4, r3
 8009ba2:	f000 f957 	bl	8009e54 <__malloc_lock>
 8009ba6:	4a20      	ldr	r2, [pc, #128]	; (8009c28 <_free_r+0x9c>)
 8009ba8:	9801      	ldr	r0, [sp, #4]
 8009baa:	6813      	ldr	r3, [r2, #0]
 8009bac:	4615      	mov	r5, r2
 8009bae:	b933      	cbnz	r3, 8009bbe <_free_r+0x32>
 8009bb0:	6063      	str	r3, [r4, #4]
 8009bb2:	6014      	str	r4, [r2, #0]
 8009bb4:	b003      	add	sp, #12
 8009bb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bba:	f000 b951 	b.w	8009e60 <__malloc_unlock>
 8009bbe:	42a3      	cmp	r3, r4
 8009bc0:	d90b      	bls.n	8009bda <_free_r+0x4e>
 8009bc2:	6821      	ldr	r1, [r4, #0]
 8009bc4:	1862      	adds	r2, r4, r1
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	bf04      	itt	eq
 8009bca:	681a      	ldreq	r2, [r3, #0]
 8009bcc:	685b      	ldreq	r3, [r3, #4]
 8009bce:	6063      	str	r3, [r4, #4]
 8009bd0:	bf04      	itt	eq
 8009bd2:	1852      	addeq	r2, r2, r1
 8009bd4:	6022      	streq	r2, [r4, #0]
 8009bd6:	602c      	str	r4, [r5, #0]
 8009bd8:	e7ec      	b.n	8009bb4 <_free_r+0x28>
 8009bda:	461a      	mov	r2, r3
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	b10b      	cbz	r3, 8009be4 <_free_r+0x58>
 8009be0:	42a3      	cmp	r3, r4
 8009be2:	d9fa      	bls.n	8009bda <_free_r+0x4e>
 8009be4:	6811      	ldr	r1, [r2, #0]
 8009be6:	1855      	adds	r5, r2, r1
 8009be8:	42a5      	cmp	r5, r4
 8009bea:	d10b      	bne.n	8009c04 <_free_r+0x78>
 8009bec:	6824      	ldr	r4, [r4, #0]
 8009bee:	4421      	add	r1, r4
 8009bf0:	1854      	adds	r4, r2, r1
 8009bf2:	42a3      	cmp	r3, r4
 8009bf4:	6011      	str	r1, [r2, #0]
 8009bf6:	d1dd      	bne.n	8009bb4 <_free_r+0x28>
 8009bf8:	681c      	ldr	r4, [r3, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	6053      	str	r3, [r2, #4]
 8009bfe:	4421      	add	r1, r4
 8009c00:	6011      	str	r1, [r2, #0]
 8009c02:	e7d7      	b.n	8009bb4 <_free_r+0x28>
 8009c04:	d902      	bls.n	8009c0c <_free_r+0x80>
 8009c06:	230c      	movs	r3, #12
 8009c08:	6003      	str	r3, [r0, #0]
 8009c0a:	e7d3      	b.n	8009bb4 <_free_r+0x28>
 8009c0c:	6825      	ldr	r5, [r4, #0]
 8009c0e:	1961      	adds	r1, r4, r5
 8009c10:	428b      	cmp	r3, r1
 8009c12:	bf04      	itt	eq
 8009c14:	6819      	ldreq	r1, [r3, #0]
 8009c16:	685b      	ldreq	r3, [r3, #4]
 8009c18:	6063      	str	r3, [r4, #4]
 8009c1a:	bf04      	itt	eq
 8009c1c:	1949      	addeq	r1, r1, r5
 8009c1e:	6021      	streq	r1, [r4, #0]
 8009c20:	6054      	str	r4, [r2, #4]
 8009c22:	e7c7      	b.n	8009bb4 <_free_r+0x28>
 8009c24:	b003      	add	sp, #12
 8009c26:	bd30      	pop	{r4, r5, pc}
 8009c28:	20000528 	.word	0x20000528

08009c2c <_malloc_r>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	1ccd      	adds	r5, r1, #3
 8009c30:	f025 0503 	bic.w	r5, r5, #3
 8009c34:	3508      	adds	r5, #8
 8009c36:	2d0c      	cmp	r5, #12
 8009c38:	bf38      	it	cc
 8009c3a:	250c      	movcc	r5, #12
 8009c3c:	2d00      	cmp	r5, #0
 8009c3e:	4606      	mov	r6, r0
 8009c40:	db01      	blt.n	8009c46 <_malloc_r+0x1a>
 8009c42:	42a9      	cmp	r1, r5
 8009c44:	d903      	bls.n	8009c4e <_malloc_r+0x22>
 8009c46:	230c      	movs	r3, #12
 8009c48:	6033      	str	r3, [r6, #0]
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c4e:	f000 f901 	bl	8009e54 <__malloc_lock>
 8009c52:	4921      	ldr	r1, [pc, #132]	; (8009cd8 <_malloc_r+0xac>)
 8009c54:	680a      	ldr	r2, [r1, #0]
 8009c56:	4614      	mov	r4, r2
 8009c58:	b99c      	cbnz	r4, 8009c82 <_malloc_r+0x56>
 8009c5a:	4f20      	ldr	r7, [pc, #128]	; (8009cdc <_malloc_r+0xb0>)
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	b923      	cbnz	r3, 8009c6a <_malloc_r+0x3e>
 8009c60:	4621      	mov	r1, r4
 8009c62:	4630      	mov	r0, r6
 8009c64:	f000 f83c 	bl	8009ce0 <_sbrk_r>
 8009c68:	6038      	str	r0, [r7, #0]
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	f000 f837 	bl	8009ce0 <_sbrk_r>
 8009c72:	1c43      	adds	r3, r0, #1
 8009c74:	d123      	bne.n	8009cbe <_malloc_r+0x92>
 8009c76:	230c      	movs	r3, #12
 8009c78:	6033      	str	r3, [r6, #0]
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	f000 f8f0 	bl	8009e60 <__malloc_unlock>
 8009c80:	e7e3      	b.n	8009c4a <_malloc_r+0x1e>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	1b5b      	subs	r3, r3, r5
 8009c86:	d417      	bmi.n	8009cb8 <_malloc_r+0x8c>
 8009c88:	2b0b      	cmp	r3, #11
 8009c8a:	d903      	bls.n	8009c94 <_malloc_r+0x68>
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	441c      	add	r4, r3
 8009c90:	6025      	str	r5, [r4, #0]
 8009c92:	e004      	b.n	8009c9e <_malloc_r+0x72>
 8009c94:	6863      	ldr	r3, [r4, #4]
 8009c96:	42a2      	cmp	r2, r4
 8009c98:	bf0c      	ite	eq
 8009c9a:	600b      	streq	r3, [r1, #0]
 8009c9c:	6053      	strne	r3, [r2, #4]
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f000 f8de 	bl	8009e60 <__malloc_unlock>
 8009ca4:	f104 000b 	add.w	r0, r4, #11
 8009ca8:	1d23      	adds	r3, r4, #4
 8009caa:	f020 0007 	bic.w	r0, r0, #7
 8009cae:	1ac2      	subs	r2, r0, r3
 8009cb0:	d0cc      	beq.n	8009c4c <_malloc_r+0x20>
 8009cb2:	1a1b      	subs	r3, r3, r0
 8009cb4:	50a3      	str	r3, [r4, r2]
 8009cb6:	e7c9      	b.n	8009c4c <_malloc_r+0x20>
 8009cb8:	4622      	mov	r2, r4
 8009cba:	6864      	ldr	r4, [r4, #4]
 8009cbc:	e7cc      	b.n	8009c58 <_malloc_r+0x2c>
 8009cbe:	1cc4      	adds	r4, r0, #3
 8009cc0:	f024 0403 	bic.w	r4, r4, #3
 8009cc4:	42a0      	cmp	r0, r4
 8009cc6:	d0e3      	beq.n	8009c90 <_malloc_r+0x64>
 8009cc8:	1a21      	subs	r1, r4, r0
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f000 f808 	bl	8009ce0 <_sbrk_r>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d1dd      	bne.n	8009c90 <_malloc_r+0x64>
 8009cd4:	e7cf      	b.n	8009c76 <_malloc_r+0x4a>
 8009cd6:	bf00      	nop
 8009cd8:	20000528 	.word	0x20000528
 8009cdc:	2000052c 	.word	0x2000052c

08009ce0 <_sbrk_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4d06      	ldr	r5, [pc, #24]	; (8009cfc <_sbrk_r+0x1c>)
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	4608      	mov	r0, r1
 8009cea:	602b      	str	r3, [r5, #0]
 8009cec:	f7fc feaa 	bl	8006a44 <_sbrk>
 8009cf0:	1c43      	adds	r3, r0, #1
 8009cf2:	d102      	bne.n	8009cfa <_sbrk_r+0x1a>
 8009cf4:	682b      	ldr	r3, [r5, #0]
 8009cf6:	b103      	cbz	r3, 8009cfa <_sbrk_r+0x1a>
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	bd38      	pop	{r3, r4, r5, pc}
 8009cfc:	200005d0 	.word	0x200005d0

08009d00 <_raise_r>:
 8009d00:	291f      	cmp	r1, #31
 8009d02:	b538      	push	{r3, r4, r5, lr}
 8009d04:	4604      	mov	r4, r0
 8009d06:	460d      	mov	r5, r1
 8009d08:	d904      	bls.n	8009d14 <_raise_r+0x14>
 8009d0a:	2316      	movs	r3, #22
 8009d0c:	6003      	str	r3, [r0, #0]
 8009d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d16:	b112      	cbz	r2, 8009d1e <_raise_r+0x1e>
 8009d18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d1c:	b94b      	cbnz	r3, 8009d32 <_raise_r+0x32>
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f000 f830 	bl	8009d84 <_getpid_r>
 8009d24:	462a      	mov	r2, r5
 8009d26:	4601      	mov	r1, r0
 8009d28:	4620      	mov	r0, r4
 8009d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d2e:	f000 b817 	b.w	8009d60 <_kill_r>
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d00a      	beq.n	8009d4c <_raise_r+0x4c>
 8009d36:	1c59      	adds	r1, r3, #1
 8009d38:	d103      	bne.n	8009d42 <_raise_r+0x42>
 8009d3a:	2316      	movs	r3, #22
 8009d3c:	6003      	str	r3, [r0, #0]
 8009d3e:	2001      	movs	r0, #1
 8009d40:	e7e7      	b.n	8009d12 <_raise_r+0x12>
 8009d42:	2400      	movs	r4, #0
 8009d44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d48:	4628      	mov	r0, r5
 8009d4a:	4798      	blx	r3
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	e7e0      	b.n	8009d12 <_raise_r+0x12>

08009d50 <raise>:
 8009d50:	4b02      	ldr	r3, [pc, #8]	; (8009d5c <raise+0xc>)
 8009d52:	4601      	mov	r1, r0
 8009d54:	6818      	ldr	r0, [r3, #0]
 8009d56:	f7ff bfd3 	b.w	8009d00 <_raise_r>
 8009d5a:	bf00      	nop
 8009d5c:	2000000c 	.word	0x2000000c

08009d60 <_kill_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4d07      	ldr	r5, [pc, #28]	; (8009d80 <_kill_r+0x20>)
 8009d64:	2300      	movs	r3, #0
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	602b      	str	r3, [r5, #0]
 8009d6e:	f7fc fe4f 	bl	8006a10 <_kill>
 8009d72:	1c43      	adds	r3, r0, #1
 8009d74:	d102      	bne.n	8009d7c <_kill_r+0x1c>
 8009d76:	682b      	ldr	r3, [r5, #0]
 8009d78:	b103      	cbz	r3, 8009d7c <_kill_r+0x1c>
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	bd38      	pop	{r3, r4, r5, pc}
 8009d7e:	bf00      	nop
 8009d80:	200005d0 	.word	0x200005d0

08009d84 <_getpid_r>:
 8009d84:	f7fc be3c 	b.w	8006a00 <_getpid>

08009d88 <__register_exitproc>:
 8009d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8009e48 <__register_exitproc+0xc0>
 8009d90:	4606      	mov	r6, r0
 8009d92:	f8d8 0000 	ldr.w	r0, [r8]
 8009d96:	461f      	mov	r7, r3
 8009d98:	460d      	mov	r5, r1
 8009d9a:	4691      	mov	r9, r2
 8009d9c:	f000 f856 	bl	8009e4c <__retarget_lock_acquire_recursive>
 8009da0:	4b25      	ldr	r3, [pc, #148]	; (8009e38 <__register_exitproc+0xb0>)
 8009da2:	681c      	ldr	r4, [r3, #0]
 8009da4:	b934      	cbnz	r4, 8009db4 <__register_exitproc+0x2c>
 8009da6:	4c25      	ldr	r4, [pc, #148]	; (8009e3c <__register_exitproc+0xb4>)
 8009da8:	601c      	str	r4, [r3, #0]
 8009daa:	4b25      	ldr	r3, [pc, #148]	; (8009e40 <__register_exitproc+0xb8>)
 8009dac:	b113      	cbz	r3, 8009db4 <__register_exitproc+0x2c>
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8009db4:	6863      	ldr	r3, [r4, #4]
 8009db6:	2b1f      	cmp	r3, #31
 8009db8:	dd07      	ble.n	8009dca <__register_exitproc+0x42>
 8009dba:	f8d8 0000 	ldr.w	r0, [r8]
 8009dbe:	f000 f847 	bl	8009e50 <__retarget_lock_release_recursive>
 8009dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dca:	b34e      	cbz	r6, 8009e20 <__register_exitproc+0x98>
 8009dcc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8009dd0:	b988      	cbnz	r0, 8009df6 <__register_exitproc+0x6e>
 8009dd2:	4b1c      	ldr	r3, [pc, #112]	; (8009e44 <__register_exitproc+0xbc>)
 8009dd4:	b923      	cbnz	r3, 8009de0 <__register_exitproc+0x58>
 8009dd6:	f8d8 0000 	ldr.w	r0, [r8]
 8009dda:	f000 f838 	bl	8009e4e <__retarget_lock_release>
 8009dde:	e7f0      	b.n	8009dc2 <__register_exitproc+0x3a>
 8009de0:	f44f 7084 	mov.w	r0, #264	; 0x108
 8009de4:	f7ff fe84 	bl	8009af0 <malloc>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d0f4      	beq.n	8009dd6 <__register_exitproc+0x4e>
 8009dec:	2300      	movs	r3, #0
 8009dee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8009df2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8009df6:	6863      	ldr	r3, [r4, #4]
 8009df8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	409a      	lsls	r2, r3
 8009e00:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8009e04:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	2e02      	cmp	r6, #2
 8009e0c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8009e10:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8009e14:	bf02      	ittt	eq
 8009e16:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8009e1a:	431a      	orreq	r2, r3
 8009e1c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8009e20:	6863      	ldr	r3, [r4, #4]
 8009e22:	f8d8 0000 	ldr.w	r0, [r8]
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	3302      	adds	r3, #2
 8009e2a:	6062      	str	r2, [r4, #4]
 8009e2c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8009e30:	f000 f80e 	bl	8009e50 <__retarget_lock_release_recursive>
 8009e34:	2000      	movs	r0, #0
 8009e36:	e7c6      	b.n	8009dc6 <__register_exitproc+0x3e>
 8009e38:	200005bc 	.word	0x200005bc
 8009e3c:	20000530 	.word	0x20000530
 8009e40:	00000000 	.word	0x00000000
 8009e44:	08009af1 	.word	0x08009af1
 8009e48:	20000070 	.word	0x20000070

08009e4c <__retarget_lock_acquire_recursive>:
 8009e4c:	4770      	bx	lr

08009e4e <__retarget_lock_release>:
 8009e4e:	4770      	bx	lr

08009e50 <__retarget_lock_release_recursive>:
 8009e50:	4770      	bx	lr
	...

08009e54 <__malloc_lock>:
 8009e54:	4801      	ldr	r0, [pc, #4]	; (8009e5c <__malloc_lock+0x8>)
 8009e56:	f7ff bff9 	b.w	8009e4c <__retarget_lock_acquire_recursive>
 8009e5a:	bf00      	nop
 8009e5c:	200005c4 	.word	0x200005c4

08009e60 <__malloc_unlock>:
 8009e60:	4801      	ldr	r0, [pc, #4]	; (8009e68 <__malloc_unlock+0x8>)
 8009e62:	f7ff bff5 	b.w	8009e50 <__retarget_lock_release_recursive>
 8009e66:	bf00      	nop
 8009e68:	200005c4 	.word	0x200005c4

08009e6c <_init>:
 8009e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6e:	bf00      	nop
 8009e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e72:	bc08      	pop	{r3}
 8009e74:	469e      	mov	lr, r3
 8009e76:	4770      	bx	lr

08009e78 <_fini>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	bf00      	nop
 8009e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7e:	bc08      	pop	{r3}
 8009e80:	469e      	mov	lr, r3
 8009e82:	4770      	bx	lr
