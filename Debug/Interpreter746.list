
Interpreter746.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019c4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b44  08019e20  08019e20  00029e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a964  0801a964  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801a964  0801a964  0002a964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a96c  0801a96c  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  0801a96c  0801a96c  0002a96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000024  0801a990  0801a990  0002a990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801a9b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001e0  0801ab94  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0801ab94  000304e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0018b1d9  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000adfe  00000000  00000000  001bb3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000086e8  00000000  00000000  001c61e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000085a0  00000000  00000000  001ce8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e138  00000000  00000000  001d6e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039aa3  00000000  00000000  00204fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f478  00000000  00000000  0023ea4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  003bdec3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0002a4e4  00000000  00000000  003bdf18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019e04 	.word	0x08019e04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08019e04 	.word	0x08019e04

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9a4 	b.w	8000fd8 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff33 	bl	8000b1c <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fca9 	bl	8000638 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc2a 	bl	8000544 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fca0 	bl	8000638 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fae2 	bl	80002c8 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	468c      	mov	ip, r1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 8083 	bne.w	8000e2a <__udivmoddi4+0x116>
 8000d24:	428a      	cmp	r2, r1
 8000d26:	4617      	mov	r7, r2
 8000d28:	d947      	bls.n	8000dba <__udivmoddi4+0xa6>
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	b142      	cbz	r2, 8000d42 <__udivmoddi4+0x2e>
 8000d30:	f1c2 0020 	rsb	r0, r2, #32
 8000d34:	fa24 f000 	lsr.w	r0, r4, r0
 8000d38:	4091      	lsls	r1, r2
 8000d3a:	4097      	lsls	r7, r2
 8000d3c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d40:	4094      	lsls	r4, r2
 8000d42:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d46:	0c23      	lsrs	r3, r4, #16
 8000d48:	fbbc f6f8 	udiv	r6, ip, r8
 8000d4c:	fa1f fe87 	uxth.w	lr, r7
 8000d50:	fb08 c116 	mls	r1, r8, r6, ip
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f10e 	mul.w	r1, r6, lr
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x60>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d66:	f080 8119 	bcs.w	8000f9c <__udivmoddi4+0x288>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 8116 	bls.w	8000f9c <__udivmoddi4+0x288>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d909      	bls.n	8000da0 <__udivmoddi4+0x8c>
 8000d8c:	193c      	adds	r4, r7, r4
 8000d8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d92:	f080 8105 	bcs.w	8000fa0 <__udivmoddi4+0x28c>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f240 8102 	bls.w	8000fa0 <__udivmoddi4+0x28c>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	443c      	add	r4, r7
 8000da0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da4:	eba4 040e 	sub.w	r4, r4, lr
 8000da8:	2600      	movs	r6, #0
 8000daa:	b11d      	cbz	r5, 8000db4 <__udivmoddi4+0xa0>
 8000dac:	40d4      	lsrs	r4, r2
 8000dae:	2300      	movs	r3, #0
 8000db0:	e9c5 4300 	strd	r4, r3, [r5]
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xaa>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f282 	clz	r2, r2
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d150      	bne.n	8000e68 <__udivmoddi4+0x154>
 8000dc6:	1bcb      	subs	r3, r1, r7
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	fa1f f887 	uxth.w	r8, r7
 8000dd0:	2601      	movs	r6, #1
 8000dd2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dd6:	0c21      	lsrs	r1, r4, #16
 8000dd8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ddc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de0:	fb08 f30c 	mul.w	r3, r8, ip
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0xe4>
 8000de8:	1879      	adds	r1, r7, r1
 8000dea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0xe2>
 8000df0:	428b      	cmp	r3, r1
 8000df2:	f200 80e9 	bhi.w	8000fc8 <__udivmoddi4+0x2b4>
 8000df6:	4684      	mov	ip, r0
 8000df8:	1ac9      	subs	r1, r1, r3
 8000dfa:	b2a3      	uxth	r3, r4
 8000dfc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e00:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e04:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e08:	fb08 f800 	mul.w	r8, r8, r0
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	d907      	bls.n	8000e20 <__udivmoddi4+0x10c>
 8000e10:	193c      	adds	r4, r7, r4
 8000e12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x10a>
 8000e18:	45a0      	cmp	r8, r4
 8000e1a:	f200 80d9 	bhi.w	8000fd0 <__udivmoddi4+0x2bc>
 8000e1e:	4618      	mov	r0, r3
 8000e20:	eba4 0408 	sub.w	r4, r4, r8
 8000e24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e28:	e7bf      	b.n	8000daa <__udivmoddi4+0x96>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d909      	bls.n	8000e42 <__udivmoddi4+0x12e>
 8000e2e:	2d00      	cmp	r5, #0
 8000e30:	f000 80b1 	beq.w	8000f96 <__udivmoddi4+0x282>
 8000e34:	2600      	movs	r6, #0
 8000e36:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	fab3 f683 	clz	r6, r3
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	d14a      	bne.n	8000ee0 <__udivmoddi4+0x1cc>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d302      	bcc.n	8000e54 <__udivmoddi4+0x140>
 8000e4e:	4282      	cmp	r2, r0
 8000e50:	f200 80b8 	bhi.w	8000fc4 <__udivmoddi4+0x2b0>
 8000e54:	1a84      	subs	r4, r0, r2
 8000e56:	eb61 0103 	sbc.w	r1, r1, r3
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	468c      	mov	ip, r1
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	d0a8      	beq.n	8000db4 <__udivmoddi4+0xa0>
 8000e62:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e70:	4097      	lsls	r7, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e7a:	40d9      	lsrs	r1, r3
 8000e7c:	4330      	orrs	r0, r6
 8000e7e:	0c03      	lsrs	r3, r0, #16
 8000e80:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e84:	fa1f f887 	uxth.w	r8, r7
 8000e88:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e90:	fb06 f108 	mul.w	r1, r6, r8
 8000e94:	4299      	cmp	r1, r3
 8000e96:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9a:	d909      	bls.n	8000eb0 <__udivmoddi4+0x19c>
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ea2:	f080 808d 	bcs.w	8000fc0 <__udivmoddi4+0x2ac>
 8000ea6:	4299      	cmp	r1, r3
 8000ea8:	f240 808a 	bls.w	8000fc0 <__udivmoddi4+0x2ac>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	443b      	add	r3, r7
 8000eb0:	1a5b      	subs	r3, r3, r1
 8000eb2:	b281      	uxth	r1, r0
 8000eb4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec0:	fb00 f308 	mul.w	r3, r0, r8
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d907      	bls.n	8000ed8 <__udivmoddi4+0x1c4>
 8000ec8:	1879      	adds	r1, r7, r1
 8000eca:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ece:	d273      	bcs.n	8000fb8 <__udivmoddi4+0x2a4>
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	d971      	bls.n	8000fb8 <__udivmoddi4+0x2a4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4439      	add	r1, r7
 8000ed8:	1acb      	subs	r3, r1, r3
 8000eda:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ede:	e778      	b.n	8000dd2 <__udivmoddi4+0xbe>
 8000ee0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ee4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ee8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eec:	431c      	orrs	r4, r3
 8000eee:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ef2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ef6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000efa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000efe:	431f      	orrs	r7, r3
 8000f00:	0c3b      	lsrs	r3, r7, #16
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fa1f f884 	uxth.w	r8, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f12:	fb09 fa08 	mul.w	sl, r9, r8
 8000f16:	458a      	cmp	sl, r1
 8000f18:	fa02 f206 	lsl.w	r2, r2, r6
 8000f1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x220>
 8000f22:	1861      	adds	r1, r4, r1
 8000f24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f28:	d248      	bcs.n	8000fbc <__udivmoddi4+0x2a8>
 8000f2a:	458a      	cmp	sl, r1
 8000f2c:	d946      	bls.n	8000fbc <__udivmoddi4+0x2a8>
 8000f2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f32:	4421      	add	r1, r4
 8000f34:	eba1 010a 	sub.w	r1, r1, sl
 8000f38:	b2bf      	uxth	r7, r7
 8000f3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f42:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f46:	fb00 f808 	mul.w	r8, r0, r8
 8000f4a:	45b8      	cmp	r8, r7
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x24a>
 8000f4e:	19e7      	adds	r7, r4, r7
 8000f50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f54:	d22e      	bcs.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f56:	45b8      	cmp	r8, r7
 8000f58:	d92c      	bls.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	4427      	add	r7, r4
 8000f5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f62:	eba7 0708 	sub.w	r7, r7, r8
 8000f66:	fba0 8902 	umull	r8, r9, r0, r2
 8000f6a:	454f      	cmp	r7, r9
 8000f6c:	46c6      	mov	lr, r8
 8000f6e:	4649      	mov	r1, r9
 8000f70:	d31a      	bcc.n	8000fa8 <__udivmoddi4+0x294>
 8000f72:	d017      	beq.n	8000fa4 <__udivmoddi4+0x290>
 8000f74:	b15d      	cbz	r5, 8000f8e <__udivmoddi4+0x27a>
 8000f76:	ebb3 020e 	subs.w	r2, r3, lr
 8000f7a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f7e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f82:	40f2      	lsrs	r2, r6
 8000f84:	ea4c 0202 	orr.w	r2, ip, r2
 8000f88:	40f7      	lsrs	r7, r6
 8000f8a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f8e:	2600      	movs	r6, #0
 8000f90:	4631      	mov	r1, r6
 8000f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f96:	462e      	mov	r6, r5
 8000f98:	4628      	mov	r0, r5
 8000f9a:	e70b      	b.n	8000db4 <__udivmoddi4+0xa0>
 8000f9c:	4606      	mov	r6, r0
 8000f9e:	e6e9      	b.n	8000d74 <__udivmoddi4+0x60>
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	e6fd      	b.n	8000da0 <__udivmoddi4+0x8c>
 8000fa4:	4543      	cmp	r3, r8
 8000fa6:	d2e5      	bcs.n	8000f74 <__udivmoddi4+0x260>
 8000fa8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fac:	eb69 0104 	sbc.w	r1, r9, r4
 8000fb0:	3801      	subs	r0, #1
 8000fb2:	e7df      	b.n	8000f74 <__udivmoddi4+0x260>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e7d2      	b.n	8000f5e <__udivmoddi4+0x24a>
 8000fb8:	4660      	mov	r0, ip
 8000fba:	e78d      	b.n	8000ed8 <__udivmoddi4+0x1c4>
 8000fbc:	4681      	mov	r9, r0
 8000fbe:	e7b9      	b.n	8000f34 <__udivmoddi4+0x220>
 8000fc0:	4666      	mov	r6, ip
 8000fc2:	e775      	b.n	8000eb0 <__udivmoddi4+0x19c>
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	e74a      	b.n	8000e5e <__udivmoddi4+0x14a>
 8000fc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fcc:	4439      	add	r1, r7
 8000fce:	e713      	b.n	8000df8 <__udivmoddi4+0xe4>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	443c      	add	r4, r7
 8000fd4:	e724      	b.n	8000e20 <__udivmoddi4+0x10c>
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_ZSt26__throw_bad_variant_accessPKc>:
    friend void __throw_bad_variant_access(const char* __what);
  };

  inline void
  __throw_bad_variant_access(const char* __what)
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	f015 fed4 	bl	8016da8 <abort>

08001000 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	60fb      	str	r3, [r7, #12]
      return __builtin_is_constant_evaluated();
 800100c:	2300      	movs	r3, #0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
 800100e:	2b00      	cmp	r3, #0
 8001010:	d004      	beq.n	800101c <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 fb4b 	bl	80016ae <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8001018:	4603      	mov	r3, r0
 800101a:	e004      	b.n	8001026 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff f947 	bl	80002b0 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	bf00      	nop
      }
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f805 	bl	800104c <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
    }
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>:
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<typename _T1, typename _T2>
    struct pair
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	f015 fd40 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80010b4:	68fc      	ldr	r4, [r7, #12]
 80010b6:	68b8      	ldr	r0, [r7, #8]
 80010b8:	f000 fb61 	bl	800177e <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80010bc:	4605      	mov	r5, r0
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4618      	mov	r0, r3
 80010c4:	f015 fb64 	bl	8016790 <_ZNSaIcEC1Ev>
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	461a      	mov	r2, r3
 80010ce:	4629      	mov	r1, r5
 80010d0:	4620      	mov	r0, r4
 80010d2:	f000 fb5f 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4618      	mov	r0, r3
 80010dc:	f015 fb59 	bl	8016792 <_ZNSaIcED1Ev>
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffc9 	bl	8001078 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 80010e6:	4603      	mov	r3, r0
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	761a      	strb	r2, [r3, #24]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bdb0      	pop	{r4, r5, r7, pc}

080010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001104:	68fc      	ldr	r4, [r7, #12]
 8001106:	68b8      	ldr	r0, [r7, #8]
 8001108:	f000 fb6a 	bl	80017e0 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800110c:	4605      	mov	r5, r0
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4618      	mov	r0, r3
 8001114:	f015 fb3c 	bl	8016790 <_ZNSaIcEC1Ev>
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	461a      	mov	r2, r3
 800111e:	4629      	mov	r1, r5
 8001120:	4620      	mov	r0, r4
 8001122:	f000 fb37 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4618      	mov	r0, r3
 800112c:	f015 fb31 	bl	8016792 <_ZNSaIcED1Ev>
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ffa1 	bl	8001078 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 8001136:	4603      	mov	r3, r0
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	761a      	strb	r2, [r3, #24]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bdb0      	pop	{r4, r5, r7, pc}

08001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001154:	68fc      	ldr	r4, [r7, #12]
 8001156:	68b8      	ldr	r0, [r7, #8]
 8001158:	f000 fb4d 	bl	80017f6 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800115c:	4605      	mov	r5, r0
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4618      	mov	r0, r3
 8001164:	f015 fb14 	bl	8016790 <_ZNSaIcEC1Ev>
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	461a      	mov	r2, r3
 800116e:	4629      	mov	r1, r5
 8001170:	4620      	mov	r0, r4
 8001172:	f000 fb0f 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4618      	mov	r0, r3
 800117c:	f015 fb09 	bl	8016792 <_ZNSaIcED1Ev>
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff79 	bl	8001078 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 8001186:	4603      	mov	r3, r0
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	761a      	strb	r2, [r3, #24]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bdb0      	pop	{r4, r5, r7, pc}

08001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80011a4:	68fc      	ldr	r4, [r7, #12]
 80011a6:	68b8      	ldr	r0, [r7, #8]
 80011a8:	f000 fb30 	bl	800180c <_ZSt7forwardIRA3_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80011ac:	4605      	mov	r5, r0
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4618      	mov	r0, r3
 80011b4:	f015 faec 	bl	8016790 <_ZNSaIcEC1Ev>
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	461a      	mov	r2, r3
 80011be:	4629      	mov	r1, r5
 80011c0:	4620      	mov	r0, r4
 80011c2:	f000 fae7 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4618      	mov	r0, r3
 80011cc:	f015 fae1 	bl	8016792 <_ZNSaIcED1Ev>
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff51 	bl	8001078 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 80011d6:	4603      	mov	r3, r0
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	761a      	strb	r2, [r3, #24]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bdb0      	pop	{r4, r5, r7, pc}

080011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80011f4:	68fc      	ldr	r4, [r7, #12]
 80011f6:	68b8      	ldr	r0, [r7, #8]
 80011f8:	f000 fb13 	bl	8001822 <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80011fc:	4605      	mov	r5, r0
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4618      	mov	r0, r3
 8001204:	f015 fac4 	bl	8016790 <_ZNSaIcEC1Ev>
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	461a      	mov	r2, r3
 800120e:	4629      	mov	r1, r5
 8001210:	4620      	mov	r0, r4
 8001212:	f000 fabf 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4618      	mov	r0, r3
 800121c:	f015 fab9 	bl	8016792 <_ZNSaIcED1Ev>
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff29 	bl	8001078 <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 8001226:	4603      	mov	r3, r0
 8001228:	781a      	ldrb	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	761a      	strb	r2, [r3, #24]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bdb0      	pop	{r4, r5, r7, pc}

08001238 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fb88 	bl	8001958 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ffeb 	bl	8001238 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ffeb 	bl	8001252 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Move_assign_base : _Copy_assign_alias<_Types...>
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ffeb 	bl	800126c <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Variant_base : _Move_assign_alias<_Types...>
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ffeb 	bl	8001286 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
      variant() = default;
      variant(const variant& __rhs) = default;
      variant(variant&&) = default;
      variant& operator=(const variant&) = default;
      variant& operator=(variant&&) = default;
      ~variant() = default;
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ffeb 	bl	80012a0 <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_ZN17Primal_expressionD1Ev>:
#include <Expression.h>

Primal_expression::~Primal_expression()
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
{
	if(std::holds_alternative<Variable*>(content))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3304      	adds	r3, #4
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fb58 	bl	8001996 <_ZSt17holds_alternativeIP8VariableJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_P13Function_callEEbRKSt7variantIJDpT0_EE>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d010      	beq.n	800130e <_ZN17Primal_expressionD1Ev+0x3a>
	{
		delete std::get<Variable*>(content);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3304      	adds	r3, #4
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fb61 	bl	80019b8 <_ZSt3getIP8VariableJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_P13Function_callEERT_RSt7variantIJDpT0_EE>
 80012f6:	4603      	mov	r3, r0
 80012f8:	681c      	ldr	r4, [r3, #0]
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d01f      	beq.n	800133e <_ZN17Primal_expressionD1Ev+0x6a>
 80012fe:	4620      	mov	r0, r4
 8001300:	f00d f90b 	bl	800e51a <_ZN8VariableD1Ev>
 8001304:	2120      	movs	r1, #32
 8001306:	4620      	mov	r0, r4
 8001308:	f015 fa2f 	bl	801676a <_ZdlPvj>
 800130c:	e017      	b.n	800133e <_ZN17Primal_expressionD1Ev+0x6a>
	}
	else if(std::holds_alternative<Function_call*>(content))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3304      	adds	r3, #4
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fb5c 	bl	80019d0 <_ZSt17holds_alternativeIP13Function_callJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableS1_EEbRKSt7variantIJDpT0_EE>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00f      	beq.n	800133e <_ZN17Primal_expressionD1Ev+0x6a>
	{
		delete std::get<Function_call*>(content);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3304      	adds	r3, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f000 fb65 	bl	80019f2 <_ZSt3getIP13Function_callJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableS1_EERT_RSt7variantIJDpT0_EE>
 8001328:	4603      	mov	r3, r0
 800132a:	681c      	ldr	r4, [r3, #0]
 800132c:	2c00      	cmp	r4, #0
 800132e:	d006      	beq.n	800133e <_ZN17Primal_expressionD1Ev+0x6a>
 8001330:	4620      	mov	r0, r4
 8001332:	f00d f891 	bl	800e458 <_ZN13Function_callD1Ev>
 8001336:	2124      	movs	r1, #36	; 0x24
 8001338:	4620      	mov	r0, r4
 800133a:	f015 fa16 	bl	801676a <_ZdlPvj>
Primal_expression::~Primal_expression()
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3304      	adds	r3, #4
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ffb9 	bl	80012ba <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
	}
}
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}

08001352 <_ZN19Priority_expressionD1Ev>:

Priority_expression::~Priority_expression()
 8001352:	b590      	push	{r4, r7, lr}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
{
	if(std::holds_alternative<Expression*>(exp))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fb67 	bl	8001a30 <_ZSt17holds_alternativeIP10ExpressionJP17Primal_expressionS1_EEbRKSt7variantIJDpT0_EE>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00f      	beq.n	8001388 <_ZN19Priority_expressionD1Ev+0x36>
	{
		delete std::get<Expression*>(exp);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fb71 	bl	8001a52 <_ZSt3getIP10ExpressionJP17Primal_expressionS1_EERT_RSt7variantIJDpT0_EE>
 8001370:	4603      	mov	r3, r0
 8001372:	681c      	ldr	r4, [r3, #0]
 8001374:	2c00      	cmp	r4, #0
 8001376:	d016      	beq.n	80013a6 <_ZN19Priority_expressionD1Ev+0x54>
 8001378:	4620      	mov	r0, r4
 800137a:	f000 f948 	bl	800160e <_ZN10ExpressionD1Ev>
 800137e:	210c      	movs	r1, #12
 8001380:	4620      	mov	r0, r4
 8001382:	f015 f9f2 	bl	801676a <_ZdlPvj>
 8001386:	e00e      	b.n	80013a6 <_ZN19Priority_expressionD1Ev+0x54>
	}
	else
	{
		delete std::get<Primal_expression*>(exp);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fb6d 	bl	8001a6a <_ZSt3getIP17Primal_expressionJS1_P10ExpressionEERT_RSt7variantIJDpT0_EE>
 8001390:	4603      	mov	r3, r0
 8001392:	681c      	ldr	r4, [r3, #0]
 8001394:	2c00      	cmp	r4, #0
 8001396:	d006      	beq.n	80013a6 <_ZN19Priority_expressionD1Ev+0x54>
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff ff9b 	bl	80012d4 <_ZN17Primal_expressionD1Ev>
 800139e:	2120      	movs	r1, #32
 80013a0:	4620      	mov	r0, r4
 80013a2:	f015 f9e2 	bl	801676a <_ZdlPvj>
	}
}
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <_ZN16Unary_expressionD1Ev>:

Unary_expression::~Unary_expression()
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
{
	delete prior_exp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681c      	ldr	r4, [r3, #0]
 80013bc:	2c00      	cmp	r4, #0
 80013be:	d006      	beq.n	80013ce <_ZN16Unary_expressionD1Ev+0x1e>
 80013c0:	4620      	mov	r0, r4
 80013c2:	f7ff ffc6 	bl	8001352 <_ZN19Priority_expressionD1Ev>
 80013c6:	2108      	movs	r1, #8
 80013c8:	4620      	mov	r0, r4
 80013ca:	f015 f9ce 	bl	801676a <_ZdlPvj>
}
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd90      	pop	{r4, r7, pc}

080013d8 <_ZN16Power_expressionD1Ev>:

Power_expression::~Power_expression()
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
{
	delete left_un_exp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681c      	ldr	r4, [r3, #0]
 80013e4:	2c00      	cmp	r4, #0
 80013e6:	d006      	beq.n	80013f6 <_ZN16Power_expressionD1Ev+0x1e>
 80013e8:	4620      	mov	r0, r4
 80013ea:	f7ff ffe1 	bl	80013b0 <_ZN16Unary_expressionD1Ev>
 80013ee:	2108      	movs	r1, #8
 80013f0:	4620      	mov	r0, r4
 80013f2:	f015 f9ba 	bl	801676a <_ZdlPvj>
	delete right_un_exp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685c      	ldr	r4, [r3, #4]
 80013fa:	2c00      	cmp	r4, #0
 80013fc:	d006      	beq.n	800140c <_ZN16Power_expressionD1Ev+0x34>
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff ffd6 	bl	80013b0 <_ZN16Unary_expressionD1Ev>
 8001404:	2108      	movs	r1, #8
 8001406:	4620      	mov	r0, r4
 8001408:	f015 f9af 	bl	801676a <_ZdlPvj>
}
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}

08001416 <_ZN19Multiply_expressionD1Ev>:

Multiply_expression::~Multiply_expression()
 8001416:	b590      	push	{r4, r7, lr}
 8001418:	b087      	sub	sp, #28
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
{
	for(Power_expression* exp : pow_exps)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f000 fb63 	bl	8001aee <_ZNSt6vectorIP16Power_expressionSaIS1_EE5beginEv>
 8001428:	4603      	mov	r3, r0
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	6978      	ldr	r0, [r7, #20]
 800142e:	f000 fb6e 	bl	8001b0e <_ZNSt6vectorIP16Power_expressionSaIS1_EE3endEv>
 8001432:	4603      	mov	r3, r0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	f107 0208 	add.w	r2, r7, #8
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fb75 	bl	8001b30 <_ZN9__gnu_cxxneIPP16Power_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d017      	beq.n	800147c <_ZN19Multiply_expressionD1Ev+0x66>
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fb95 	bl	8001b80 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 8001456:	4603      	mov	r3, r0
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	613b      	str	r3, [r7, #16]
	{
		delete exp;
 800145c:	693c      	ldr	r4, [r7, #16]
 800145e:	2c00      	cmp	r4, #0
 8001460:	d006      	beq.n	8001470 <_ZN19Multiply_expressionD1Ev+0x5a>
 8001462:	4620      	mov	r0, r4
 8001464:	f7ff ffb8 	bl	80013d8 <_ZN16Power_expressionD1Ev>
 8001468:	2108      	movs	r1, #8
 800146a:	4620      	mov	r0, r4
 800146c:	f015 f97d 	bl	801676a <_ZdlPvj>
	for(Power_expression* exp : pow_exps)
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fb73 	bl	8001b60 <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEppEv>
 800147a:	e7dc      	b.n	8001436 <_ZN19Multiply_expressionD1Ev+0x20>
Multiply_expression::~Multiply_expression()
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	330c      	adds	r3, #12
 8001480:	4618      	mov	r0, r3
 8001482:	f000 fb19 	bl	8001ab8 <_ZNSt6vectorI13mult_operatorSaIS0_EED1Ev>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fafa 	bl	8001a82 <_ZNSt6vectorIP16Power_expressionSaIS1_EED1Ev>
	}
}
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4618      	mov	r0, r3
 8001492:	371c      	adds	r7, #28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd90      	pop	{r4, r7, pc}

08001498 <_ZN14Sum_expressionD1Ev>:

Sum_expression::~Sum_expression()
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
{
	for(Multiply_expression* exp : mult_exps)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	6978      	ldr	r0, [r7, #20]
 80014a6:	f000 fbad 	bl	8001c04 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE5beginEv>
 80014aa:	4603      	mov	r3, r0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f000 fbb8 	bl	8001c24 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE3endEv>
 80014b4:	4603      	mov	r3, r0
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	f107 0208 	add.w	r2, r7, #8
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 fbbf 	bl	8001c46 <_ZN9__gnu_cxxneIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d017      	beq.n	80014fe <_ZN14Sum_expressionD1Ev+0x66>
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fbdf 	bl	8001c96 <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 80014d8:	4603      	mov	r3, r0
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	613b      	str	r3, [r7, #16]
	{
		delete exp;
 80014de:	693c      	ldr	r4, [r7, #16]
 80014e0:	2c00      	cmp	r4, #0
 80014e2:	d006      	beq.n	80014f2 <_ZN14Sum_expressionD1Ev+0x5a>
 80014e4:	4620      	mov	r0, r4
 80014e6:	f7ff ff96 	bl	8001416 <_ZN19Multiply_expressionD1Ev>
 80014ea:	2118      	movs	r1, #24
 80014ec:	4620      	mov	r0, r4
 80014ee:	f015 f93c 	bl	801676a <_ZdlPvj>
	for(Multiply_expression* exp : mult_exps)
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fbbd 	bl	8001c76 <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEppEv>
 80014fc:	e7dc      	b.n	80014b8 <_ZN14Sum_expressionD1Ev+0x20>
Sum_expression::~Sum_expression()
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	330c      	adds	r3, #12
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fb63 	bl	8001bce <_ZNSt6vectorI12sum_operatorSaIS0_EED1Ev>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fb44 	bl	8001b98 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EED1Ev>
	}
}
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4618      	mov	r0, r3
 8001514:	371c      	adds	r7, #28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}

0800151a <_ZN19Relation_expressionD1Ev>:

Relation_expression::~Relation_expression()
 800151a:	b590      	push	{r4, r7, lr}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
{
	delete left_sum_exp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681c      	ldr	r4, [r3, #0]
 8001526:	2c00      	cmp	r4, #0
 8001528:	d006      	beq.n	8001538 <_ZN19Relation_expressionD1Ev+0x1e>
 800152a:	4620      	mov	r0, r4
 800152c:	f7ff ffb4 	bl	8001498 <_ZN14Sum_expressionD1Ev>
 8001530:	2118      	movs	r1, #24
 8001532:	4620      	mov	r0, r4
 8001534:	f015 f919 	bl	801676a <_ZdlPvj>
	delete right_sum_exp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685c      	ldr	r4, [r3, #4]
 800153c:	2c00      	cmp	r4, #0
 800153e:	d006      	beq.n	800154e <_ZN19Relation_expressionD1Ev+0x34>
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff ffa9 	bl	8001498 <_ZN14Sum_expressionD1Ev>
 8001546:	2118      	movs	r1, #24
 8001548:	4620      	mov	r0, r4
 800154a:	f015 f90e 	bl	801676a <_ZdlPvj>
}
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bd90      	pop	{r4, r7, pc}

08001558 <_ZN18Compare_expressionD1Ev>:

Compare_expression::~Compare_expression()
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
{
	delete left_rel_exp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681c      	ldr	r4, [r3, #0]
 8001564:	2c00      	cmp	r4, #0
 8001566:	d006      	beq.n	8001576 <_ZN18Compare_expressionD1Ev+0x1e>
 8001568:	4620      	mov	r0, r4
 800156a:	f7ff ffd6 	bl	800151a <_ZN19Relation_expressionD1Ev>
 800156e:	210c      	movs	r1, #12
 8001570:	4620      	mov	r0, r4
 8001572:	f015 f8fa 	bl	801676a <_ZdlPvj>
	delete right_rel_exp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685c      	ldr	r4, [r3, #4]
 800157a:	2c00      	cmp	r4, #0
 800157c:	d006      	beq.n	800158c <_ZN18Compare_expressionD1Ev+0x34>
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff ffcb 	bl	800151a <_ZN19Relation_expressionD1Ev>
 8001584:	210c      	movs	r1, #12
 8001586:	4620      	mov	r0, r4
 8001588:	f015 f8ef 	bl	801676a <_ZdlPvj>
}
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}

08001596 <_ZN14And_expressionD1Ev>:

And_expression::~And_expression()
 8001596:	b590      	push	{r4, r7, lr}
 8001598:	b087      	sub	sp, #28
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
{
	for(Compare_expression* exp : comp_exps)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f000 fb9e 	bl	8001ce4 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE5beginEv>
 80015a8:	4603      	mov	r3, r0
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	6978      	ldr	r0, [r7, #20]
 80015ae:	f000 fba9 	bl	8001d04 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE3endEv>
 80015b2:	4603      	mov	r3, r0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	f107 0208 	add.w	r2, r7, #8
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fbb0 	bl	8001d26 <_ZN9__gnu_cxxneIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d017      	beq.n	80015fc <_ZN14And_expressionD1Ev+0x66>
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fbd0 	bl	8001d76 <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 80015d6:	4603      	mov	r3, r0
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	613b      	str	r3, [r7, #16]
	{
		delete exp;
 80015dc:	693c      	ldr	r4, [r7, #16]
 80015de:	2c00      	cmp	r4, #0
 80015e0:	d006      	beq.n	80015f0 <_ZN14And_expressionD1Ev+0x5a>
 80015e2:	4620      	mov	r0, r4
 80015e4:	f7ff ffb8 	bl	8001558 <_ZN18Compare_expressionD1Ev>
 80015e8:	210c      	movs	r1, #12
 80015ea:	4620      	mov	r0, r4
 80015ec:	f015 f8bd 	bl	801676a <_ZdlPvj>
	for(Compare_expression* exp : comp_exps)
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fbae 	bl	8001d56 <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEppEv>
 80015fa:	e7dc      	b.n	80015b6 <_ZN14And_expressionD1Ev+0x20>
And_expression::~And_expression()
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fb55 	bl	8001cae <_ZNSt6vectorIP18Compare_expressionSaIS1_EED1Ev>
	}
}
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}

0800160e <_ZN10ExpressionD1Ev>:

Expression::~Expression()
 800160e:	b590      	push	{r4, r7, lr}
 8001610:	b087      	sub	sp, #28
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
{
	for(And_expression* exp : and_exps)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f000 fbd2 	bl	8001dc4 <_ZNSt6vectorIP14And_expressionSaIS1_EE5beginEv>
 8001620:	4603      	mov	r3, r0
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	6978      	ldr	r0, [r7, #20]
 8001626:	f000 fbdd 	bl	8001de4 <_ZNSt6vectorIP14And_expressionSaIS1_EE3endEv>
 800162a:	4603      	mov	r3, r0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	f107 0208 	add.w	r2, r7, #8
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fbe4 	bl	8001e06 <_ZN9__gnu_cxxneIPP14And_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d017      	beq.n	8001674 <_ZN10ExpressionD1Ev+0x66>
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fc04 	bl	8001e56 <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 800164e:	4603      	mov	r3, r0
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	613b      	str	r3, [r7, #16]
	{
		delete exp;
 8001654:	693c      	ldr	r4, [r7, #16]
 8001656:	2c00      	cmp	r4, #0
 8001658:	d006      	beq.n	8001668 <_ZN10ExpressionD1Ev+0x5a>
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff ff9b 	bl	8001596 <_ZN14And_expressionD1Ev>
 8001660:	210c      	movs	r1, #12
 8001662:	4620      	mov	r0, r4
 8001664:	f015 f881 	bl	801676a <_ZdlPvj>
	for(And_expression* exp : and_exps)
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fbe2 	bl	8001e36 <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEppEv>
 8001672:	e7dc      	b.n	800162e <_ZN10ExpressionD1Ev+0x20>
Expression::~Expression()
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fb89 	bl	8001d8e <_ZNSt6vectorIP14And_expressionSaIS1_EED1Ev>
	}
}
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd90      	pop	{r4, r7, pc}

08001686 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781a      	ldrb	r2, [r3, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	2200      	movs	r2, #0
 80016c2:	72fa      	strb	r2, [r7, #11]
 80016c4:	f107 020b 	add.w	r2, r7, #11
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ffdb 	bl	8001686 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f083 0301 	eor.w	r3, r3, #1
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x36>
        ++__i;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3301      	adds	r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80016e2:	e7ea      	b.n	80016ba <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xc>
      return __i;
 80016e4:	68fb      	ldr	r3, [r7, #12]
    }
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fbc8 	bl	8001e8c <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1Ev>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fbc7 	bl	8001ea2 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEED1Ev>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
       *  Create a %map consisting of copies of the elements in the
       *  initializer_list @a __l.
       *  This is linear in N if the range is already sorted, and NlogN
       *  otherwise (where N is @a __l.size()).
       */
      map(initializer_list<value_type> __l,
 800171e:	b5b0      	push	{r4, r5, r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	1d38      	adds	r0, r7, #4
 8001728:	e880 0006 	stmia.w	r0, {r1, r2}
 800172c:	603b      	str	r3, [r7, #0]
	  const _Compare& __comp = _Compare(),
	  const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
 800172e:	68fc      	ldr	r4, [r7, #12]
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fbbe 	bl	8001eb8 <_ZNSaISt4pairIKc10token_typeEEC1ERKS3_>
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	461a      	mov	r2, r3
 8001742:	6839      	ldr	r1, [r7, #0]
 8001744:	4620      	mov	r0, r4
 8001746:	f000 fbd1 	bl	8001eec <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ffd9 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8001754:	68fc      	ldr	r4, [r7, #12]
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4618      	mov	r0, r3
 800175a:	f000 fbfa 	bl	8001f52 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>
 800175e:	4605      	mov	r5, r0
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fc01 	bl	8001f6a <_ZNKSt16initializer_listISt4pairIKc10token_typeEE3endEv>
 8001768:	4603      	mov	r3, r0
 800176a:	461a      	mov	r2, r3
 800176c:	4629      	mov	r1, r5
 800176e:	4620      	mov	r0, r4
 8001770:	f000 fc0d 	bl	8001f8e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bdb0      	pop	{r4, r5, r7, pc}

0800177e <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 80017a0:	68fc      	ldr	r4, [r7, #12]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f015 f8c4 	bl	8016930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80017a8:	4603      	mov	r3, r0
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4619      	mov	r1, r3
 80017ae:	4620      	mov	r0, r4
 80017b0:	f015 fabc 	bl	8016d2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x34>
 80017ba:	68b8      	ldr	r0, [r7, #8]
 80017bc:	f7ff fc20 	bl	8001000 <_ZNSt11char_traitsIcE6lengthEPKc>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4413      	add	r3, r2
 80017c6:	e001      	b.n	80017cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x38>
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	461a      	mov	r2, r3
 80017ce:	68b9      	ldr	r1, [r7, #8]
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 fb4c 	bl	8001e6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}

080017e0 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_ZSt7forwardIRA3_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 fbd0 	bl	8001fe6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 fbcf 	bl	8001ffc <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>:
      map(initializer_list<value_type> __l,
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	1d38      	adds	r0, r7, #4
 8001872:	e880 0006 	stmia.w	r0, {r1, r2}
 8001876:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8001878:	68fc      	ldr	r4, [r7, #12]
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001880:	4618      	mov	r0, r3
 8001882:	f000 fbc6 	bl	8002012 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKS9_>
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	461a      	mov	r2, r3
 800188c:	6839      	ldr	r1, [r7, #0]
 800188e:	4620      	mov	r0, r4
 8001890:	f000 fbd9 	bl	8002046 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1ERKSD_RKSE_>
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ffd9 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800189e:	68fc      	ldr	r4, [r7, #12]
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fc02 	bl	80020ac <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>
 80018a8:	4605      	mov	r5, r0
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 fc09 	bl	80020c4 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE3endEv>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	4629      	mov	r1, r5
 80018b8:	4620      	mov	r0, r4
 80018ba:	f000 fc18 	bl	80020ee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bdb0      	pop	{r4, r5, r7, pc}

080018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 fc38 	bl	8002146 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1Ev>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 fc37 	bl	800215c <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEED1Ev>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
      map(initializer_list<value_type> __l,
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	1d38      	adds	r0, r7, #4
 8001902:	e880 0006 	stmia.w	r0, {r1, r2}
 8001906:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8001908:	68fc      	ldr	r4, [r7, #12]
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fc2e 	bl	8002172 <_ZNSaISt4pairIKc12double_tokenEEC1ERKS3_>
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	461a      	mov	r2, r3
 800191c:	6839      	ldr	r1, [r7, #0]
 800191e:	4620      	mov	r0, r4
 8001920:	f000 fc41 	bl	80021a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ffd9 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800192e:	68fc      	ldr	r4, [r7, #12]
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fc6a 	bl	800220c <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>
 8001938:	4605      	mov	r5, r0
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fc71 	bl	8002224 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE3endEv>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	4629      	mov	r1, r5
 8001948:	4620      	mov	r0, r4
 800194a:	f000 fc7f 	bl	800224c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bdb0      	pop	{r4, r5, r7, pc}

08001958 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
      ~_Variant_storage()
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
      { _M_reset(); }
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fc9f 	bl	80022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>:
	}

      constexpr bool valueless_by_exception() const noexcept
      { return !this->_M_valid(); }

      constexpr size_t index() const noexcept
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
      {
	if (this->_M_index ==
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7e1b      	ldrb	r3, [r3, #24]
 800197c:	2bff      	cmp	r3, #255	; 0xff
 800197e:	d102      	bne.n	8001986 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv+0x16>
	    typename _Base::__index_type(variant_npos))
	  return variant_npos;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	e001      	b.n	800198a <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv+0x1a>
	return this->_M_index;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7e1b      	ldrb	r3, [r3, #24]
      }
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_ZSt17holds_alternativeIP8VariableJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_P13Function_callEEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
      return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffe6 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf0c      	ite	eq
 80019aa:	2301      	moveq	r3, #1
 80019ac:	2300      	movne	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
    }
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_ZSt3getIP8VariableJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_P13Function_callEERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 fce7 	bl	8002394 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 80019c6:	4603      	mov	r3, r0
    }
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_ZSt17holds_alternativeIP13Function_callJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableS1_EEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
      return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ffc9 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
    }
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_ZSt3getIP13Function_callJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableS1_EERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fd62 	bl	80024c4 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8001a00:	4603      	mov	r3, r0
    }
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>:
      constexpr size_t index() const noexcept
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	if (this->_M_index ==
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	791b      	ldrb	r3, [r3, #4]
 8001a16:	2bff      	cmp	r3, #255	; 0xff
 8001a18:	d102      	bne.n	8001a20 <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv+0x16>
	  return variant_npos;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	e001      	b.n	8001a24 <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv+0x1a>
	return this->_M_index;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	791b      	ldrb	r3, [r3, #4]
      }
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_ZSt17holds_alternativeIP10ExpressionJP17Primal_expressionS1_EEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
      return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ffe6 	bl	8001a0a <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
    }
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <_ZSt3getIP10ExpressionJP17Primal_expressionS1_EERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 fd82 	bl	8002564 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 8001a60:	4603      	mov	r3, r0
    }
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_ZSt3getIP17Primal_expressionJS1_P10ExpressionEERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fdb4 	bl	80025e0 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 8001a78:	4603      	mov	r3, r0
    }
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_ZNSt6vectorIP16Power_expressionSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001a82:	b5b0      	push	{r4, r5, r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681c      	ldr	r4, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 fde4 	bl	8002662 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8001a9a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f000 fde9 	bl	8002678 <_ZSt8_DestroyIPP16Power_expressionS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fdc1 	bl	8002630 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EED1Ev>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bdb0      	pop	{r4, r5, r7, pc}

08001ab8 <_ZNSt6vectorI13mult_operatorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681c      	ldr	r4, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fe06 	bl	80026dc <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 8001ad0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f000 fe0b 	bl	80026f2 <_ZSt8_DestroyIP13mult_operatorS0_EvT_S2_RSaIT0_E>
      }
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fde4 	bl	80026ac <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EED1Ev>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bdb0      	pop	{r4, r5, r7, pc}

08001aee <_ZNSt6vectorIP16Power_expressionSaIS1_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fe05 	bl	800270e <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <_ZNSt6vectorIP16Power_expressionSaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	1d1a      	adds	r2, r3, #4
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 fdf4 	bl	800270e <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_ZN9__gnu_cxxneIPP16Power_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fdf7 	bl	800272e <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001b40:	4603      	mov	r3, r0
 8001b42:	681c      	ldr	r4, [r3, #0]
 8001b44:	6838      	ldr	r0, [r7, #0]
 8001b46:	f000 fdf2 	bl	800272e <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	429c      	cmp	r4, r3
 8001b50:	bf14      	ite	ne
 8001b52:	2301      	movne	r3, #1
 8001b54:	2300      	moveq	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}

08001b60 <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	1d1a      	adds	r2, r3, #4
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	601a      	str	r2, [r3, #0]
	return *this;
 8001b72:	687b      	ldr	r3, [r7, #4]
      }
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001b98:	b5b0      	push	{r4, r5, r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681c      	ldr	r4, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fdef 	bl	800278e <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8001bb0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f000 fdf4 	bl	80027a4 <_ZSt8_DestroyIPP19Multiply_expressionS1_EvT_S3_RSaIT0_E>
      }
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 fdcc 	bl	800275c <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EED1Ev>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bdb0      	pop	{r4, r5, r7, pc}

08001bce <_ZNSt6vectorI12sum_operatorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001bce:	b5b0      	push	{r4, r5, r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681c      	ldr	r4, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 fe11 	bl	8002808 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 8001be6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001be8:	461a      	mov	r2, r3
 8001bea:	4629      	mov	r1, r5
 8001bec:	4620      	mov	r0, r4
 8001bee:	f000 fe16 	bl	800281e <_ZSt8_DestroyIP12sum_operatorS0_EvT_S2_RSaIT0_E>
      }
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fdef 	bl	80027d8 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EED1Ev>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bdb0      	pop	{r4, r5, r7, pc}

08001c04 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fe10 	bl	800283a <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	1d1a      	adds	r2, r3, #4
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 fdff 	bl	800283a <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_ZN9__gnu_cxxneIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001c46:	b590      	push	{r4, r7, lr}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fe02 	bl	800285a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001c56:	4603      	mov	r3, r0
 8001c58:	681c      	ldr	r4, [r3, #0]
 8001c5a:	6838      	ldr	r0, [r7, #0]
 8001c5c:	f000 fdfd 	bl	800285a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001c60:	4603      	mov	r3, r0
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	429c      	cmp	r4, r3
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd90      	pop	{r4, r7, pc}

08001c76 <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	1d1a      	adds	r2, r3, #4
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	601a      	str	r2, [r3, #0]
	return *this;
 8001c88:	687b      	ldr	r3, [r7, #4]
      }
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <_ZNSt6vectorIP18Compare_expressionSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001cae:	b5b0      	push	{r4, r5, r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681c      	ldr	r4, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fdfa 	bl	80028ba <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8001cc6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4629      	mov	r1, r5
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f000 fdff 	bl	80028d0 <_ZSt8_DestroyIPP18Compare_expressionS1_EvT_S3_RSaIT0_E>
      }
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 fdd7 	bl	8002888 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EED1Ev>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bdb0      	pop	{r4, r5, r7, pc}

08001ce4 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fdf9 	bl	80028ec <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	1d1a      	adds	r2, r3, #4
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fde8 	bl	80028ec <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZN9__gnu_cxxneIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001d26:	b590      	push	{r4, r7, lr}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fdeb 	bl	800290c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001d36:	4603      	mov	r3, r0
 8001d38:	681c      	ldr	r4, [r3, #0]
 8001d3a:	6838      	ldr	r0, [r7, #0]
 8001d3c:	f000 fde6 	bl	800290c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001d40:	4603      	mov	r3, r0
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	429c      	cmp	r4, r3
 8001d46:	bf14      	ite	ne
 8001d48:	2301      	movne	r3, #1
 8001d4a:	2300      	moveq	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}

08001d56 <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	1d1a      	adds	r2, r3, #4
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	601a      	str	r2, [r3, #0]
	return *this;
 8001d68:	687b      	ldr	r3, [r7, #4]
      }
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_ZNSt6vectorIP14And_expressionSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001d8e:	b5b0      	push	{r4, r5, r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681c      	ldr	r4, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fde3 	bl	800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8001da6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001da8:	461a      	mov	r2, r3
 8001daa:	4629      	mov	r1, r5
 8001dac:	4620      	mov	r0, r4
 8001dae:	f000 fde8 	bl	8002982 <_ZSt8_DestroyIPP14And_expressionS1_EvT_S3_RSaIT0_E>
      }
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fdc0 	bl	800293a <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EED1Ev>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bdb0      	pop	{r4, r5, r7, pc}

08001dc4 <_ZNSt6vectorIP14And_expressionSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fde2 	bl	800299e <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_ZNSt6vectorIP14And_expressionSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	1d1a      	adds	r2, r3, #4
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fdd1 	bl	800299e <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_ZN9__gnu_cxxneIPP14And_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001e06:	b590      	push	{r4, r7, lr}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fdd4 	bl	80029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001e16:	4603      	mov	r3, r0
 8001e18:	681c      	ldr	r4, [r3, #0]
 8001e1a:	6838      	ldr	r0, [r7, #0]
 8001e1c:	f000 fdcf 	bl	80029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8001e20:	4603      	mov	r3, r0
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	429c      	cmp	r4, r3
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd90      	pop	{r4, r7, pc}

08001e36 <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	1d1a      	adds	r2, r3, #4
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	601a      	str	r2, [r3, #0]
	return *this;
 8001e48:	687b      	ldr	r3, [r7, #4]
      }
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 fda8 	bl	80029d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>
        }
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_ZNSaISt4pairIKc10token_typeEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001ec2:	6839      	ldr	r1, [r7, #0]
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fd96 	bl	80029f6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1ERKS5_>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fda3 	bl	8002a28 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree() { }
#else
      _Rb_tree() = default;
#endif

      _Rb_tree(const _Compare& __comp,
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
	       const allocator_type& __a = allocator_type())
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8001ef8:	68fc      	ldr	r4, [r7, #12]
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fd84 	bl	8002a0e <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1IS3_EERKSaIT_E>
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f000 fd96 	bl	8002a40 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fd85 	bl	8002a28 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4618      	mov	r0, r3
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd90      	pop	{r4, r7, pc}

08001f28 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fdc1 	bl	8002ab8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fd9d 	bl	8002a7a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ffc6 	bl	8001ed4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <_ZNKSt16initializer_listISt4pairIKc10token_typeEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8001f6a:	b590      	push	{r4, r7, lr}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffed 	bl	8001f52 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>
 8001f78:	4604      	mov	r4, r0
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fda8 	bl	8002ad0 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE4sizeEv>
 8001f80:	4603      	mov	r3, r0
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4423      	add	r3, r4
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd90      	pop	{r4, r7, pc}

08001f8e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	using __same_value_type
	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;

      template<typename _InputIterator>
	__enable_if_t<__same_value_type<_InputIterator>::value>
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b088      	sub	sp, #32
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
	{
	  _Alloc_node __an(*this);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	68f9      	ldr	r1, [r7, #12]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fda1 	bl	8002ae8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d017      	beq.n	8001fde <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 fda9 	bl	8002b06 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	f107 021c 	add.w	r2, r7, #28
 8001fbc:	f107 0318 	add.w	r3, r7, #24
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fdb0 	bl	8002b28 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	69b9      	ldr	r1, [r7, #24]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 fdb9 	bl	8002b48 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	e7e3      	b.n	8001fa6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 8001fde:	bf00      	nop
 8001fe0:	3720      	adds	r7, #32
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKS9_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fdc5 	bl	8002bae <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSB_>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fdd2 	bl	8002be0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1ERKSD_RKSE_>:
      _Rb_tree(const _Compare& __comp,
 8002046:	b590      	push	{r4, r7, lr}
 8002048:	b087      	sub	sp, #28
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8002052:	68fc      	ldr	r4, [r7, #12]
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fdb3 	bl	8002bc6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1IS9_EERKSaIT_E>
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	461a      	mov	r2, r3
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	4620      	mov	r0, r4
 800206a:	f000 fdc5 	bl	8002bf8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fdb4 	bl	8002be0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4618      	mov	r0, r3
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd90      	pop	{r4, r7, pc}

08002082 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fdf0 	bl	8002c70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8002090:	4603      	mov	r3, r0
 8002092:	4619      	mov	r1, r3
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fdcc 	bl	8002c32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ffc6 	bl	800202e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>:
      begin() const noexcept { return _M_array; }
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE3endEv>:
      end() const noexcept { return begin() + size(); }
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ffed 	bl	80020ac <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>
 80020d2:	4604      	mov	r4, r0
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fdd7 	bl	8002c88 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE4sizeEv>
 80020da:	4602      	mov	r2, r0
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4423      	add	r3, r4
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}

080020ee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b088      	sub	sp, #32
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	68f9      	ldr	r1, [r7, #12]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fdcd 	bl	8002ca0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>
	  for (; __first != __last; ++__first)
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d017      	beq.n	800213e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fdd5 	bl	8002cbe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8002114:	4603      	mov	r3, r0
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	f107 021c 	add.w	r2, r7, #28
 800211c:	f107 0318 	add.w	r3, r7, #24
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fddc 	bl	8002ce0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSt17_Rb_tree_iteratorIS9_E>
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	69b9      	ldr	r1, [r7, #24]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 fde5 	bl	8002d00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	331c      	adds	r3, #28
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	e7e3      	b.n	8002106 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x18>
	}
 800213e:	bf00      	nop
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <_ZNSaISt4pairIKc12double_tokenEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800217c:	6839      	ldr	r1, [r7, #0]
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fdf1 	bl	8002d66 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1ERKS5_>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fdfe 	bl	8002d98 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree(const _Compare& __comp,
 80021a6:	b590      	push	{r4, r7, lr}
 80021a8:	b087      	sub	sp, #28
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 80021b2:	68fc      	ldr	r4, [r7, #12]
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fddf 	bl	8002d7e <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1IS3_EERKSaIT_E>
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	461a      	mov	r2, r3
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	4620      	mov	r0, r4
 80021ca:	f000 fdf1 	bl	8002db0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fde0 	bl	8002d98 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4618      	mov	r0, r3
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd90      	pop	{r4, r7, pc}

080021e2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fe1c 	bl	8002e28 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4619      	mov	r1, r3
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fdf8 	bl	8002dea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ffc6 	bl	800218e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ffed 	bl	800220c <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>
 8002232:	4604      	mov	r4, r0
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fe03 	bl	8002e40 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE4sizeEv>
 800223a:	4602      	mov	r2, r0
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	4423      	add	r3, r4
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bd90      	pop	{r4, r7, pc}

0800224c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	68f9      	ldr	r1, [r7, #12]
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fdfa 	bl	8002e58 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d017      	beq.n	800229c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 fe02 	bl	8002e76 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8002272:	4603      	mov	r3, r0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	f107 021c 	add.w	r2, r7, #28
 800227a:	f107 0318 	add.w	r3, r7, #24
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fe09 	bl	8002e98 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	69b9      	ldr	r1, [r7, #24]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fe12 	bl	8002eb8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	3303      	adds	r3, #3
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	e7e3      	b.n	8002264 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 800229c:	bf00      	nop
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>:
      void _M_reset()
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	_M_reset_impl();
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f001 f971 	bl	8003594 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEv>
	_M_index = variant_npos;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	22ff      	movs	r2, #255	; 0xff
 80022b6:	761a      	strb	r2, [r3, #24]
      }
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	7138      	strb	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80022ca:	6838      	ldr	r0, [r7, #0]
 80022cc:	f001 f9ab 	bl	8003626 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP8VariableP13Function_callEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f001 f9b2 	bl	800363c <_ZNRSt8__detail9__variant14_UninitializedIP8VariableLb1EE6_M_getEv>
 80022d8:	4603      	mov	r3, r0
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80022e2:	b590      	push	{r4, r7, lr}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	7138      	strb	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80022ec:	6838      	ldr	r0, [r7, #0]
 80022ee:	f001 f98f 	bl	8003610 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 80022f2:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80022f4:	4619      	mov	r1, r3
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7ff ffe2 	bl	80022c0 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 80022fc:	4603      	mov	r3, r0
    }
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bd90      	pop	{r4, r7, pc}

08002306 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8002306:	b590      	push	{r4, r7, lr}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	7138      	strb	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8002310:	6838      	ldr	r0, [r7, #0]
 8002312:	f001 f972 	bl	80035fa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8002316:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8002318:	4619      	mov	r1, r3
 800231a:	4620      	mov	r0, r4
 800231c:	f7ff ffe1 	bl	80022e2 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8002320:	4603      	mov	r3, r0
    }
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bd90      	pop	{r4, r7, pc}

0800232a <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800232a:	b590      	push	{r4, r7, lr}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	7138      	strb	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8002334:	6838      	ldr	r0, [r7, #0]
 8002336:	f001 f955 	bl	80035e4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800233a:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800233c:	4619      	mov	r1, r3
 800233e:	4620      	mov	r0, r4
 8002340:	f7ff ffe1 	bl	8002306 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8002344:	4603      	mov	r3, r0
    }
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bd90      	pop	{r4, r7, pc}

0800234e <_ZNSt8__detail9__variant5__getILj4ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800234e:	b590      	push	{r4, r7, lr}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	7138      	strb	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8002358:	6838      	ldr	r0, [r7, #0]
 800235a:	f001 f938 	bl	80035ce <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800235e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8002360:	4619      	mov	r1, r3
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff ffe1 	bl	800232a <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8002368:	4603      	mov	r3, r0
    }
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}

08002372 <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8002372:	b590      	push	{r4, r7, lr}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f001 f91c 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8002380:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8002382:	4619      	mov	r1, r3
 8002384:	4620      	mov	r0, r4
 8002386:	f7ff ffe2 	bl	800234e <_ZNSt8__detail9__variant5__getILj4ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800238a:	4603      	mov	r3, r0
    }
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}

08002394 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
#undef _VARIANT_RELATION_FUNCTION_TEMPLATE
    };

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>>&
    get(variant<_Types...>& __v)
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
    {
      static_assert(_Np < sizeof...(_Types),
		    "The index should be in [0, number of alternatives)");
      if (__v.index() != _Np)
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff fae7 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	bf14      	ite	ne
 80023a8:	2301      	movne	r3, #1
 80023aa:	2300      	moveq	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 80023b4:	f7fe fe1e 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ffda 	bl	8002372 <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80023be:	4603      	mov	r3, r0
    }
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	08019e20 	.word	0x08019e20

080023cc <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	7138      	strb	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80023d6:	6838      	ldr	r0, [r7, #0]
 80023d8:	f001 f93b 	bl	8003652 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80023dc:	4603      	mov	r3, r0
 80023de:	4618      	mov	r0, r3
 80023e0:	f001 f942 	bl	8003668 <_ZNRSt8__detail9__variant14_UninitializedIP13Function_callLb1EE6_M_getEv>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80023ee:	b590      	push	{r4, r7, lr}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	7138      	strb	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80023f8:	6838      	ldr	r0, [r7, #0]
 80023fa:	f001 f914 	bl	8003626 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP8VariableP13Function_callEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80023fe:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8002400:	4619      	mov	r1, r3
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff ffe2 	bl	80023cc <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 8002408:	4603      	mov	r3, r0
    }
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bd90      	pop	{r4, r7, pc}

08002412 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8002412:	b590      	push	{r4, r7, lr}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	7138      	strb	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800241c:	6838      	ldr	r0, [r7, #0]
 800241e:	f001 f8f7 	bl	8003610 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8002422:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8002424:	4619      	mov	r1, r3
 8002426:	4620      	mov	r0, r4
 8002428:	f7ff ffe1 	bl	80023ee <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800242c:	4603      	mov	r3, r0
    }
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bd90      	pop	{r4, r7, pc}

08002436 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8002436:	b590      	push	{r4, r7, lr}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	7138      	strb	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8002440:	6838      	ldr	r0, [r7, #0]
 8002442:	f001 f8da 	bl	80035fa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8002446:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8002448:	4619      	mov	r1, r3
 800244a:	4620      	mov	r0, r4
 800244c:	f7ff ffe1 	bl	8002412 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8002450:	4603      	mov	r3, r0
    }
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}

0800245a <_ZNSt8__detail9__variant5__getILj4ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800245a:	b590      	push	{r4, r7, lr}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	7138      	strb	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8002464:	6838      	ldr	r0, [r7, #0]
 8002466:	f001 f8bd 	bl	80035e4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800246a:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800246c:	4619      	mov	r1, r3
 800246e:	4620      	mov	r0, r4
 8002470:	f7ff ffe1 	bl	8002436 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8002474:	4603      	mov	r3, r0
    }
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bd90      	pop	{r4, r7, pc}

0800247e <_ZNSt8__detail9__variant5__getILj5ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800247e:	b590      	push	{r4, r7, lr}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	7138      	strb	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8002488:	6838      	ldr	r0, [r7, #0]
 800248a:	f001 f8a0 	bl	80035ce <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800248e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8002490:	4619      	mov	r1, r3
 8002492:	4620      	mov	r0, r4
 8002494:	f7ff ffe1 	bl	800245a <_ZNSt8__detail9__variant5__getILj4ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8002498:	4603      	mov	r3, r0
    }
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd90      	pop	{r4, r7, pc}

080024a2 <_ZNSt8__detail9__variant5__getILj5ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80024a2:	b590      	push	{r4, r7, lr}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f001 f884 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80024b0:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 80024b2:	4619      	mov	r1, r3
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7ff ffe2 	bl	800247e <_ZNSt8__detail9__variant5__getILj5ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80024ba:	4603      	mov	r3, r0
    }
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd90      	pop	{r4, r7, pc}

080024c4 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff fa4f 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	bf14      	ite	ne
 80024d8:	2301      	movne	r3, #1
 80024da:	2300      	moveq	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 80024e4:	f7fe fd86 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ffda 	bl	80024a2 <_ZNSt8__detail9__variant5__getILj5ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80024ee:	4603      	mov	r3, r0
    }
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	08019e20 	.word	0x08019e20

080024fc <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10ExpressionEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	7138      	strb	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8002506:	6838      	ldr	r0, [r7, #0]
 8002508:	f001 f8cf 	bl	80036aa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10ExpressionEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800250c:	4603      	mov	r3, r0
 800250e:	4618      	mov	r0, r3
 8002510:	f001 f8d6 	bl	80036c0 <_ZNRSt8__detail9__variant14_UninitializedIP10ExpressionLb1EE6_M_getEv>
 8002514:	4603      	mov	r3, r0
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800251e:	b590      	push	{r4, r7, lr}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	7138      	strb	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8002528:	6838      	ldr	r0, [r7, #0]
 800252a:	f001 f8b3 	bl	8003694 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800252e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8002530:	4619      	mov	r1, r3
 8002532:	4620      	mov	r0, r4
 8002534:	f7ff ffe2 	bl	80024fc <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10ExpressionEEEEEDcSt16in_place_index_tILj0EEOT_>
 8002538:	4603      	mov	r3, r0
    }
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}

08002542 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8002542:	b590      	push	{r4, r7, lr}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f001 f897 	bl	800367e <_ZSt7forwardIRSt7variantIJP17Primal_expressionP10ExpressionEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8002550:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8002552:	4619      	mov	r1, r3
 8002554:	4620      	mov	r0, r4
 8002556:	f7ff ffe2 	bl	800251e <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800255a:	4603      	mov	r3, r0
    }
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bd90      	pop	{r4, r7, pc}

08002564 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>:
    get(variant<_Types...>& __v)
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fa4c 	bl	8001a0a <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8002582:	4805      	ldr	r0, [pc, #20]	; (8002598 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x34>)
 8002584:	f7fe fd36 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ffda 	bl	8002542 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>
 800258e:	4603      	mov	r3, r0
    }
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	08019e20 	.word	0x08019e20

0800259c <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	7138      	strb	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80025a6:	6838      	ldr	r0, [r7, #0]
 80025a8:	f001 f874 	bl	8003694 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f001 f891 	bl	80036d6 <_ZNRSt8__detail9__variant14_UninitializedIP17Primal_expressionLb1EE6_M_getEv>
 80025b4:	4603      	mov	r3, r0
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80025be:	b590      	push	{r4, r7, lr}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f001 f859 	bl	800367e <_ZSt7forwardIRSt7variantIJP17Primal_expressionP10ExpressionEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80025cc:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 80025ce:	4619      	mov	r1, r3
 80025d0:	4620      	mov	r0, r4
 80025d2:	f7ff ffe3 	bl	800259c <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEEDcSt16in_place_index_tILj0EEOT_>
 80025d6:	4603      	mov	r3, r0
    }
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd90      	pop	{r4, r7, pc}

080025e0 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>:
    get(variant<_Types...>& __v)
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fa0e 	bl	8001a0a <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x24>
	__throw_bad_variant_access("Unexpected index");
 80025fe:	4805      	ldr	r0, [pc, #20]	; (8002614 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x34>)
 8002600:	f7fe fcf8 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ffda 	bl	80025be <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>
 800260a:	4603      	mov	r3, r0
    }
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	08019e20 	.word	0x08019e20

08002618 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f001 f863 	bl	80036ec <_ZNSaIP16Power_expressionED1Ev>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002648:	461a      	mov	r2, r3
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f001 f85a 	bl	8003704 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ffe0 	bl	8002618 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE12_Vector_implD1Ev>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_ZSt8_DestroyIPP16Power_expressionS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f001 f84f 	bl	800372a <_ZSt8_DestroyIPP16Power_expressionEvT_S3_>
    }
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f001 f851 	bl	8003744 <_ZNSaI13mult_operatorED1Ev>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80026c2:	461a      	mov	r2, r3
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f001 f849 	bl	800375c <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE13_M_deallocateEPS0_j>
      }
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ffe1 	bl	8002694 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE12_Vector_implD1Ev>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_ZSt8_DestroyIP13mult_operatorS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f001 f83e 	bl	8003782 <_ZSt8_DestroyIP13mult_operatorEvT_S2_>
    }
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f001 f825 	bl	800379c <_ZNSaIP19Multiply_expressionED1Ev>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002774:	461a      	mov	r2, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f001 f81c 	bl	80037b4 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ffe0 	bl	8002744 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE12_Vector_implD1Ev>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <_ZSt8_DestroyIPP19Multiply_expressionS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f001 f811 	bl	80037da <_ZSt8_DestroyIPP19Multiply_expressionEvT_S3_>
    }
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f001 f813 	bl	80037f4 <_ZNSaI12sum_operatorED1Ev>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80027ee:	461a      	mov	r2, r3
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f001 f80b 	bl	800380c <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE13_M_deallocateEPS0_j>
      }
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ffe1 	bl	80027c0 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE12_Vector_implD1Ev>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <_ZSt8_DestroyIP12sum_operatorS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f001 f800 	bl	8003832 <_ZSt8_DestroyIP12sum_operatorEvT_S2_>
    }
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 ffe7 	bl	800384c <_ZNSaIP18Compare_expressionED1Ev>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80028a0:	461a      	mov	r2, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 ffde 	bl	8003864 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ffe0 	bl	8002870 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE12_Vector_implD1Ev>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <_ZSt8_DestroyIPP18Compare_expressionS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 ffd3 	bl	800388a <_ZSt8_DestroyIPP18Compare_expressionEvT_S3_>
    }
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 ffba 	bl	80038a4 <_ZNSaIP14And_expressionED1Ev>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002952:	461a      	mov	r2, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 ffb1 	bl	80038bc <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ffe0 	bl	8002922 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE12_Vector_implD1Ev>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <_ZSt8_DestroyIPP14And_expressionS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 ffa6 	bl	80038e2 <_ZSt8_DestroyIPP14And_expressionEvT_S3_>
    }
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80029e2:	4623      	mov	r3, r4
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 ff9b 	bl	8003924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
	}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd90      	pop	{r4, r7, pc}

080029f6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 ffcb 	bl	80039b4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1Ev>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 ffca 	bl	80039ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 ffc7 	bl	80039e0 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEEONSt16remove_referenceIT_E4typeEOS9_>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4619      	mov	r1, r3
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 ffcd 	bl	80039f6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS5_>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 ffd6 	bl	8003a12 <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fadf 	bl	800102e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d012      	beq.n	8002ab0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8002a8a:	6838      	ldr	r0, [r7, #0]
 8002a8c:	f000 ffcd 	bl	8003a2a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4619      	mov	r1, r3
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff fff0 	bl	8002a7a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 8002a9a:	6838      	ldr	r0, [r7, #0]
 8002a9c:	f000 ffd1 	bl	8003a42 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002aa0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 ffd8 	bl	8003a5a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002aae:	e7e9      	b.n	8002a84 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
	}
    }
 8002ab0:	bf00      	nop
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	1d1a      	adds	r2, r3, #4
 8002b12:	f107 030c 	add.w	r3, r7, #12
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 ffaf 	bl	8003a7c <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
    template<typename _Arg, typename _NodeGen>
#else
    template<typename _NodeGen>
#endif
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002b48:	b5b0      	push	{r4, r5, r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
			const _Val& __v,
#endif
			_NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8002b56:	f107 0318 	add.w	r3, r7, #24
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 f8bf 	bl	8003ce0 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 8002b62:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 8002b64:	f107 0010 	add.w	r0, r7, #16
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	68f9      	ldr	r1, [r7, #12]
 8002b6c:	f000 ff95 	bl	8003a9a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>

      if (__res.second)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00f      	beq.n	8002b96 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
			  _GLIBCXX_FORWARD(_Arg, __v),
			  __node_gen);
 8002b76:	693c      	ldr	r4, [r7, #16]
 8002b78:	697d      	ldr	r5, [r7, #20]
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f001 f8bc 	bl	8003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002b80:	4602      	mov	r2, r0
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	462a      	mov	r2, r5
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f001 f8be 	bl	8003d0e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 8002b92:	4603      	mov	r3, r0
 8002b94:	e007      	b.n	8002ba6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	f107 031c 	add.w	r3, r7, #28
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 ff6c 	bl	8003a7c <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002ba4:	69fb      	ldr	r3, [r7, #28]
    }
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bdb0      	pop	{r4, r5, r7, pc}

08002bae <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSB_>:
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1IS9_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f001 f8e5 	bl	8003da0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1Ev>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f001 f8e4 	bl	8003db6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f001 f8e1 	bl	8003dcc <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEEONSt16remove_referenceIT_E4typeEOSF_>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f001 f8e7 	bl	8003de2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSB_>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 f8f0 	bl	8003dfe <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3304      	adds	r3, #4
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe fa03 	bl	800102e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d012      	beq.n	8002c68 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x36>
	  _M_erase(_S_right(__x));
 8002c42:	6838      	ldr	r0, [r7, #0]
 8002c44:	f001 f8e7 	bl	8003e16 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fff0 	bl	8002c32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
	  _Link_type __y = _S_left(__x);
 8002c52:	6838      	ldr	r0, [r7, #0]
 8002c54:	f001 f8eb 	bl	8003e2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002c58:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8002c5a:	6839      	ldr	r1, [r7, #0]
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f001 f8f2 	bl	8003e46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>
	  __x = __y;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002c66:	e7e9      	b.n	8002c3c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0xa>
    }
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE4sizeEv>:
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>:
	_Alloc_node(_Rb_tree& __t)
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	1d1a      	adds	r2, r3, #4
 8002cca:	f107 030c 	add.w	r3, r7, #12
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 f8c9 	bl	8003e68 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSt17_Rb_tree_iteratorIS9_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002d00:	b5b0      	push	{r4, r5, r7, lr}
 8002d02:	b08a      	sub	sp, #40	; 0x28
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8002d0e:	f107 0318 	add.w	r3, r7, #24
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f001 f9d9 	bl	80040cc <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 8002d1a:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 8002d1c:	f107 0010 	add.w	r0, r7, #16
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	68f9      	ldr	r1, [r7, #12]
 8002d24:	f001 f8af 	bl	8003e86 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_>
      if (__res.second)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00f      	beq.n	8002d4e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x4e>
			  __node_gen);
 8002d2e:	693c      	ldr	r4, [r7, #16]
 8002d30:	697d      	ldr	r5, [r7, #20]
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f001 f9d6 	bl	80040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	462a      	mov	r2, r5
 8002d42:	4621      	mov	r1, r4
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f001 f9d8 	bl	80040fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	e007      	b.n	8002d5e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	f107 031c 	add.w	r3, r7, #28
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f001 f886 	bl	8003e68 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002d5c:	69fb      	ldr	r3, [r7, #28]
    }
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bdb0      	pop	{r4, r5, r7, pc}

08002d66 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1ERKS5_>:
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f001 f9ff 	bl	800418c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1Ev>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f001 f9fe 	bl	80041a2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f001 f9fb 	bl	80041b8 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEEONSt16remove_referenceIT_E4typeEOS9_>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f001 fa01 	bl	80041ce <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS5_>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fe1e 	bl	8003a12 <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe f927 	bl	800102e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d012      	beq.n	8002e20 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 8002dfa:	6838      	ldr	r0, [r7, #0]
 8002dfc:	f001 f9f5 	bl	80041ea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff fff0 	bl	8002dea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 8002e0a:	6838      	ldr	r0, [r7, #0]
 8002e0c:	f001 f9f9 	bl	8004202 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002e10:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8002e12:	6839      	ldr	r1, [r7, #0]
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f001 fa00 	bl	800421a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002e1e:	e7e9      	b.n	8002df4 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE4sizeEv>:
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	1d1a      	adds	r2, r3, #4
 8002e82:	f107 030c 	add.w	r3, r7, #12
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f001 f9d7 	bl	800423c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002eb8:	b5b0      	push	{r4, r5, r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8002ec6:	f107 0318 	add.w	r3, r7, #24
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 fae7 	bl	80044a0 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 8002ed2:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 8002ed4:	f107 0010 	add.w	r0, r7, #16
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	68f9      	ldr	r1, [r7, #12]
 8002edc:	f001 f9bd 	bl	800425a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>
      if (__res.second)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00f      	beq.n	8002f06 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
			  __node_gen);
 8002ee6:	693c      	ldr	r4, [r7, #16]
 8002ee8:	697d      	ldr	r5, [r7, #20]
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f001 fae4 	bl	80044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	462a      	mov	r2, r5
 8002efa:	4621      	mov	r1, r4
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f001 fae6 	bl	80044ce <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 8002f02:	4603      	mov	r3, r0
 8002f04:	e007      	b.n	8002f16 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	f107 031c 	add.w	r3, r7, #28
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 f994 	bl	800423c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8002f14:	69fb      	ldr	r3, [r7, #28]
    }
 8002f16:	4618      	mov	r0, r3
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bdb0      	pop	{r4, r5, r7, pc}

08002f1e <_ZSt14__variant_castIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callERNSt8__detail9__variant16_Variant_storageILb0EJbifS5_S7_S9_EEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
	    return static_cast<variant<_Types...>&>(__rhs);
 8002f26:	687b      	ldr	r3, [r7, #4]
    }
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	7138      	strb	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8002f3e:	6838      	ldr	r0, [r7, #0]
 8002f40:	f000 fb45 	bl	80035ce <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 fb15 	bl	8004576 <_ZNRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8002f56:	b590      	push	{r4, r7, lr}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fb2a 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8002f64:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8002f66:	4619      	mov	r1, r3
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f7ff ffe3 	bl	8002f34 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 8002f6e:	4603      	mov	r3, r0
    }
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd90      	pop	{r4, r7, pc}

08002f78 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fb19 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ffe4 	bl	8002f56 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8002f8e:	4603      	mov	r3, r0
	}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8002f98:	b5b0      	push	{r4, r5, r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f001 fadc 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8002fa8:	4604      	mov	r4, r0
 8002faa:	6838      	ldr	r0, [r7, #0]
 8002fac:	f000 fb04 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff ffe0 	bl	8002f78 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESM_EEDcOT0_>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f001 fae5 	bl	800458c <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRbEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 8002fc2:	462b      	mov	r3, r5
      }
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bdb0      	pop	{r4, r5, r7, pc}

08002fcc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8002fcc:	b5b0      	push	{r4, r5, r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f001 fac2 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8002fdc:	4604      	mov	r4, r0
 8002fde:	6838      	ldr	r0, [r7, #0]
 8002fe0:	f000 faea 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f7ff ffd5 	bl	8002f98 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 8002fee:	462b      	mov	r3, r5
      }
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bdb0      	pop	{r4, r5, r7, pc}

08002ff8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f001 faac 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003008:	4604      	mov	r4, r0
 800300a:	6838      	ldr	r0, [r7, #0]
 800300c:	f000 fad4 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003010:	4603      	mov	r3, r0
 8003012:	4619      	mov	r1, r3
 8003014:	4620      	mov	r0, r4
 8003016:	f7ff ffd9 	bl	8002fcc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 800301a:	462b      	mov	r3, r5
      }
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bdb0      	pop	{r4, r5, r7, pc}

08003024 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	7138      	strb	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800302e:	6838      	ldr	r0, [r7, #0]
 8003030:	f000 fad8 	bl	80035e4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8003034:	4603      	mov	r3, r0
 8003036:	4618      	mov	r0, r3
 8003038:	f001 fabf 	bl	80045ba <_ZNRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>
 800303c:	4603      	mov	r3, r0
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8003046:	b590      	push	{r4, r7, lr}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	7138      	strb	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8003050:	6838      	ldr	r0, [r7, #0]
 8003052:	f000 fabc 	bl	80035ce <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8003056:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8003058:	4619      	mov	r1, r3
 800305a:	4620      	mov	r0, r4
 800305c:	f7ff ffe2 	bl	8003024 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 8003060:	4603      	mov	r3, r0
    }
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}

0800306a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800306a:	b590      	push	{r4, r7, lr}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 faa0 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003078:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800307a:	4619      	mov	r1, r3
 800307c:	4620      	mov	r0, r4
 800307e:	f7ff ffe2 	bl	8003046 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8003082:	4603      	mov	r3, r0
    }
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bd90      	pop	{r4, r7, pc}

0800308c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fa8f 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800309a:	4603      	mov	r3, r0
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ffe4 	bl	800306a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80030a2:	4603      	mov	r3, r0
	}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 80030ac:	b5b0      	push	{r4, r5, r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f001 fa52 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80030bc:	4604      	mov	r4, r0
 80030be:	6838      	ldr	r0, [r7, #0]
 80030c0:	f000 fa7a 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80030c4:	4603      	mov	r3, r0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ffe0 	bl	800308c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESM_EEDcOT0_>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4619      	mov	r1, r3
 80030d0:	4620      	mov	r0, r4
 80030d2:	f001 fa7d 	bl	80045d0 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRiEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 80030d6:	462b      	mov	r3, r5
      }
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bdb0      	pop	{r4, r5, r7, pc}

080030e0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80030e0:	b5b0      	push	{r4, r5, r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f001 fa38 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80030f0:	4604      	mov	r4, r0
 80030f2:	6838      	ldr	r0, [r7, #0]
 80030f4:	f000 fa60 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80030f8:	4603      	mov	r3, r0
 80030fa:	4619      	mov	r1, r3
 80030fc:	4620      	mov	r0, r4
 80030fe:	f7ff ffd5 	bl	80030ac <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 8003102:	462b      	mov	r3, r5
      }
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bdb0      	pop	{r4, r5, r7, pc}

0800310c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800310c:	b5b0      	push	{r4, r5, r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f001 fa22 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800311c:	4604      	mov	r4, r0
 800311e:	6838      	ldr	r0, [r7, #0]
 8003120:	f000 fa4a 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003124:	4603      	mov	r3, r0
 8003126:	4619      	mov	r1, r3
 8003128:	4620      	mov	r0, r4
 800312a:	f7ff ffd9 	bl	80030e0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 800312e:	462b      	mov	r3, r5
      }
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bdb0      	pop	{r4, r5, r7, pc}

08003138 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	7138      	strb	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8003142:	6838      	ldr	r0, [r7, #0]
 8003144:	f000 fa59 	bl	80035fa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8003148:	4603      	mov	r3, r0
 800314a:	4618      	mov	r0, r3
 800314c:	f001 fa57 	bl	80045fe <_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>
 8003150:	4603      	mov	r3, r0
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800315a:	b590      	push	{r4, r7, lr}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	7138      	strb	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8003164:	6838      	ldr	r0, [r7, #0]
 8003166:	f000 fa3d 	bl	80035e4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800316a:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800316c:	4619      	mov	r1, r3
 800316e:	4620      	mov	r0, r4
 8003170:	f7ff ffe2 	bl	8003138 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 8003174:	4603      	mov	r3, r0
    }
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bd90      	pop	{r4, r7, pc}

0800317e <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800317e:	b590      	push	{r4, r7, lr}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	7138      	strb	r0, [r7, #4]
 8003186:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8003188:	6838      	ldr	r0, [r7, #0]
 800318a:	f000 fa20 	bl	80035ce <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800318e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8003190:	4619      	mov	r1, r3
 8003192:	4620      	mov	r0, r4
 8003194:	f7ff ffe1 	bl	800315a <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8003198:	4603      	mov	r3, r0
    }
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd90      	pop	{r4, r7, pc}

080031a2 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80031a2:	b590      	push	{r4, r7, lr}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fa04 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80031b0:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 80031b2:	4619      	mov	r1, r3
 80031b4:	4620      	mov	r0, r4
 80031b6:	f7ff ffe2 	bl	800317e <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80031ba:	4603      	mov	r3, r0
    }
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd90      	pop	{r4, r7, pc}

080031c4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f9f3 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80031d2:	4603      	mov	r3, r0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ffe4 	bl	80031a2 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80031da:	4603      	mov	r3, r0
	}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 80031e4:	b5b0      	push	{r4, r5, r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f001 f9b6 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80031f4:	4604      	mov	r4, r0
 80031f6:	6838      	ldr	r0, [r7, #0]
 80031f8:	f000 f9de 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80031fc:	4603      	mov	r3, r0
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ffe0 	bl	80031c4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESM_EEDcOT0_>
 8003204:	4603      	mov	r3, r0
 8003206:	4619      	mov	r1, r3
 8003208:	4620      	mov	r0, r4
 800320a:	f001 fa03 	bl	8004614 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRfEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 800320e:	462b      	mov	r3, r5
      }
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bdb0      	pop	{r4, r5, r7, pc}

08003218 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8003218:	b5b0      	push	{r4, r5, r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f001 f99c 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003228:	4604      	mov	r4, r0
 800322a:	6838      	ldr	r0, [r7, #0]
 800322c:	f000 f9c4 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003230:	4603      	mov	r3, r0
 8003232:	4619      	mov	r1, r3
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff ffd5 	bl	80031e4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 800323a:	462b      	mov	r3, r5
      }
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bdb0      	pop	{r4, r5, r7, pc}

08003244 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8003244:	b5b0      	push	{r4, r5, r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f001 f986 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003254:	4604      	mov	r4, r0
 8003256:	6838      	ldr	r0, [r7, #0]
 8003258:	f000 f9ae 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800325c:	4603      	mov	r3, r0
 800325e:	4619      	mov	r1, r3
 8003260:	4620      	mov	r0, r4
 8003262:	f7ff ffd9 	bl	8003218 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 8003266:	462b      	mov	r3, r5
      }
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bdb0      	pop	{r4, r5, r7, pc}

08003270 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	7138      	strb	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800327a:	6838      	ldr	r0, [r7, #0]
 800327c:	f000 f9c8 	bl	8003610 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8003280:	4603      	mov	r3, r0
 8003282:	4618      	mov	r0, r3
 8003284:	f001 f9dd 	bl	8004642 <_ZNRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>
 8003288:	4603      	mov	r3, r0
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8003292:	b590      	push	{r4, r7, lr}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	7138      	strb	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800329c:	6838      	ldr	r0, [r7, #0]
 800329e:	f000 f9ac 	bl	80035fa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 80032a2:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80032a4:	4619      	mov	r1, r3
 80032a6:	4620      	mov	r0, r4
 80032a8:	f7ff ffe2 	bl	8003270 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 80032ac:	4603      	mov	r3, r0
    }
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd90      	pop	{r4, r7, pc}

080032b6 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80032b6:	b590      	push	{r4, r7, lr}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	7138      	strb	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80032c0:	6838      	ldr	r0, [r7, #0]
 80032c2:	f000 f98f 	bl	80035e4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 80032c6:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80032c8:	4619      	mov	r1, r3
 80032ca:	4620      	mov	r0, r4
 80032cc:	f7ff ffe1 	bl	8003292 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80032d0:	4603      	mov	r3, r0
    }
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd90      	pop	{r4, r7, pc}

080032da <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80032da:	b590      	push	{r4, r7, lr}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	7138      	strb	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80032e4:	6838      	ldr	r0, [r7, #0]
 80032e6:	f000 f972 	bl	80035ce <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 80032ea:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80032ec:	4619      	mov	r1, r3
 80032ee:	4620      	mov	r0, r4
 80032f0:	f7ff ffe1 	bl	80032b6 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80032f4:	4603      	mov	r3, r0
    }
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd90      	pop	{r4, r7, pc}

080032fe <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80032fe:	b590      	push	{r4, r7, lr}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f956 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800330c:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800330e:	4619      	mov	r1, r3
 8003310:	4620      	mov	r0, r4
 8003312:	f7ff ffe2 	bl	80032da <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8003316:	4603      	mov	r3, r0
    }
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bd90      	pop	{r4, r7, pc}

08003320 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f945 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800332e:	4603      	mov	r3, r0
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ffe4 	bl	80032fe <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8003336:	4603      	mov	r3, r0
	}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8003340:	b5b0      	push	{r4, r5, r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f001 f908 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003350:	4604      	mov	r4, r0
 8003352:	6838      	ldr	r0, [r7, #0]
 8003354:	f000 f930 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003358:	4603      	mov	r3, r0
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ffe0 	bl	8003320 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESM_EEDcOT0_>
 8003360:	4603      	mov	r3, r0
 8003362:	4619      	mov	r1, r3
 8003364:	4620      	mov	r0, r4
 8003366:	f001 f979 	bl	800465c <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRS8_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 800336a:	462b      	mov	r3, r5
      }
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bdb0      	pop	{r4, r5, r7, pc}

08003374 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8003374:	b5b0      	push	{r4, r5, r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f001 f8ee 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003384:	4604      	mov	r4, r0
 8003386:	6838      	ldr	r0, [r7, #0]
 8003388:	f000 f916 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800338c:	4603      	mov	r3, r0
 800338e:	4619      	mov	r1, r3
 8003390:	4620      	mov	r0, r4
 8003392:	f7ff ffd5 	bl	8003340 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 8003396:	462b      	mov	r3, r5
      }
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bdb0      	pop	{r4, r5, r7, pc}

080033a0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80033a0:	b5b0      	push	{r4, r5, r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f001 f8d8 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80033b0:	4604      	mov	r4, r0
 80033b2:	6838      	ldr	r0, [r7, #0]
 80033b4:	f000 f900 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4619      	mov	r1, r3
 80033bc:	4620      	mov	r0, r4
 80033be:	f7ff ffd9 	bl	8003374 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 80033c2:	462b      	mov	r3, r5
      }
 80033c4:	4618      	mov	r0, r3
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bdb0      	pop	{r4, r5, r7, pc}

080033cc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE28__element_by_index_or_cookieILj4ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f8ef 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80033da:	4603      	mov	r3, r0
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe ffc8 	bl	8002372 <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80033e2:	4603      	mov	r3, r0
	}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 80033ec:	b5b0      	push	{r4, r5, r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f001 f8b2 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80033fc:	4604      	mov	r4, r0
 80033fe:	6838      	ldr	r0, [r7, #0]
 8003400:	f000 f8da 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003404:	4603      	mov	r3, r0
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ffe0 	bl	80033cc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE28__element_by_index_or_cookieILj4ESM_EEDcOT0_>
 800340c:	4603      	mov	r3, r0
 800340e:	4619      	mov	r1, r3
 8003410:	4620      	mov	r0, r4
 8003412:	f001 f93a 	bl	800468a <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSA_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 8003416:	462b      	mov	r3, r5
      }
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bdb0      	pop	{r4, r5, r7, pc}

08003420 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8003420:	b5b0      	push	{r4, r5, r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f001 f898 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003430:	4604      	mov	r4, r0
 8003432:	6838      	ldr	r0, [r7, #0]
 8003434:	f000 f8c0 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003438:	4603      	mov	r3, r0
 800343a:	4619      	mov	r1, r3
 800343c:	4620      	mov	r0, r4
 800343e:	f7ff ffd5 	bl	80033ec <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 8003442:	462b      	mov	r3, r5
      }
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bdb0      	pop	{r4, r5, r7, pc}

0800344c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800344c:	b5b0      	push	{r4, r5, r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f001 f882 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800345c:	4604      	mov	r4, r0
 800345e:	6838      	ldr	r0, [r7, #0]
 8003460:	f000 f8aa 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003464:	4603      	mov	r3, r0
 8003466:	4619      	mov	r1, r3
 8003468:	4620      	mov	r0, r4
 800346a:	f7ff ffd9 	bl	8003420 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 800346e:	462b      	mov	r3, r5
      }
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bdb0      	pop	{r4, r5, r7, pc}

08003478 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE28__element_by_index_or_cookieILj5ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f899 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003486:	4603      	mov	r3, r0
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff f80a 	bl	80024a2 <_ZNSt8__detail9__variant5__getILj5ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 800348e:	4603      	mov	r3, r0
	}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8003498:	b5b0      	push	{r4, r5, r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f001 f85c 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80034a8:	4604      	mov	r4, r0
 80034aa:	6838      	ldr	r0, [r7, #0]
 80034ac:	f000 f884 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff ffe0 	bl	8003478 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE28__element_by_index_or_cookieILj5ESM_EEDcOT0_>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4619      	mov	r1, r3
 80034bc:	4620      	mov	r0, r4
 80034be:	f001 f8fb 	bl	80046b8 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSC_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 80034c2:	462b      	mov	r3, r5
      }
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bdb0      	pop	{r4, r5, r7, pc}

080034cc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80034cc:	b5b0      	push	{r4, r5, r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f001 f842 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80034dc:	4604      	mov	r4, r0
 80034de:	6838      	ldr	r0, [r7, #0]
 80034e0:	f000 f86a 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4619      	mov	r1, r3
 80034e8:	4620      	mov	r0, r4
 80034ea:	f7ff ffd5 	bl	8003498 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 80034ee:	462b      	mov	r3, r5
      }
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bdb0      	pop	{r4, r5, r7, pc}

080034f8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80034f8:	b5b0      	push	{r4, r5, r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f001 f82c 	bl	8004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003508:	4604      	mov	r4, r0
 800350a:	6838      	ldr	r0, [r7, #0]
 800350c:	f000 f854 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8003510:	4603      	mov	r3, r0
 8003512:	4619      	mov	r1, r3
 8003514:	4620      	mov	r0, r4
 8003516:	f7ff ffd9 	bl	80034cc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 800351a:	462b      	mov	r3, r5
      }
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bdb0      	pop	{r4, r5, r7, pc}

08003524 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifS9_SB_SD_EEEJLj6EEE9_M_accessIJEEERKSN_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f8d5 	bl	80046e6 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifS9_SB_SD_EEEJEE9_M_accessEv>
 800353c:	4603      	mov	r3, r0
	}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSt7variantIJbifS8_SA_SC_EEEEDcOT1_DpOT2_>:

  template<bool __use_index,
	   bool __same_return_types,
	   typename _Visitor, typename... _Variants>
    constexpr decltype(auto)
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 8003548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]

      using _Result_type = typename std::conditional_t<__use_index,
	__detail::__variant::__variant_idx_cookie,
	_Deduced_type>::type;

      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSt7variantIJbifS8_SA_SC_EEEEDcOT1_DpOT2_+0x48>)
 8003554:	60fb      	str	r3, [r7, #12]
	__same_return_types,
	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;

      auto __func_ptr = __vtable._M_access(__variants.index()...);
 8003556:	6838      	ldr	r0, [r7, #0]
 8003558:	f7fe fa0a 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 800355c:	4603      	mov	r3, r0
 800355e:	4619      	mov	r1, r3
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff ffdf 	bl	8003524 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifS9_SB_SD_EEEJLj6EEE9_M_accessIJEEERKSN_jDpT_>
 8003566:	4603      	mov	r3, r0
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 800356c:	68bc      	ldr	r4, [r7, #8]
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f001 f8c4 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8003574:	4605      	mov	r5, r0
 8003576:	6838      	ldr	r0, [r7, #0]
 8003578:	f000 f81e 	bl	80035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800357c:	4603      	mov	r3, r0
 800357e:	4619      	mov	r1, r3
 8003580:	4628      	mov	r0, r5
 8003582:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 8003584:	4633      	mov	r3, r6
    }
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800358e:	bf00      	nop
 8003590:	0801a41c 	.word	0x0801a41c

08003594 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEv>:
      constexpr void _M_reset_impl()
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	__do_visit([](auto&& __this_mem) mutable
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff fcbe 	bl	8002f1e <_ZSt14__variant_castIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callERNSt8__detail9__variant16_Variant_storageILb0EJbifS5_S7_S9_EEEEDcOT0_>
 80035a2:	4602      	mov	r2, r0
 80035a4:	f107 030c 	add.w	r3, r7, #12
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ffcc 	bl	8003548 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSt7variantIJbifS8_SA_SC_EEEEDcOT1_DpOT2_>
      }
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP8VariableP13Function_callEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_ZNRSt8__detail9__variant14_UninitializedIP8VariableLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <_ZNRSt8__detail9__variant14_UninitializedIP13Function_callLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <_ZSt7forwardIRSt7variantIJP17Primal_expressionP10ExpressionEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10ExpressionEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_ZNRSt8__detail9__variant14_UninitializedIP10ExpressionLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <_ZNRSt8__detail9__variant14_UninitializedIP17Primal_expressionLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <_ZNSaIP16Power_expressionED1Ev>:
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f001 f80c 	bl	8004712 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionED1Ev>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
	if (__p)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	4618      	mov	r0, r3
 800371e:	f001 f803 	bl	8004728 <_ZNSt16allocator_traitsISaIP16Power_expressionEE10deallocateERS2_PS1_j>
      }
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <_ZSt8_DestroyIPP16Power_expressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003734:	6839      	ldr	r1, [r7, #0]
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f001 f805 	bl	8004746 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP16Power_expressionEEvT_S5_>
    }
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <_ZNSaI13mult_operatorED1Ev>:
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f001 f805 	bl	800475c <_ZN9__gnu_cxx13new_allocatorI13mult_operatorED1Ev>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
	if (__p)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fffc 	bl	8004772 <_ZNSt16allocator_traitsISaI13mult_operatorEE10deallocateERS1_PS0_j>
      }
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <_ZSt8_DestroyIP13mult_operatorEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fffe 	bl	8004790 <_ZNSt12_Destroy_auxILb1EE9__destroyIP13mult_operatorEEvT_S4_>
    }
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <_ZNSaIP19Multiply_expressionED1Ev>:
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fffe 	bl	80047a6 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionED1Ev>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
	if (__p)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fff5 	bl	80047bc <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE10deallocateERS2_PS1_j>
      }
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <_ZSt8_DestroyIPP19Multiply_expressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80037e4:	6839      	ldr	r1, [r7, #0]
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fff7 	bl	80047da <_ZNSt12_Destroy_auxILb1EE9__destroyIPP19Multiply_expressionEEvT_S5_>
    }
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <_ZNSaI12sum_operatorED1Ev>:
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fff7 	bl	80047f0 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorED1Ev>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
	if (__p)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	4618      	mov	r0, r3
 8003826:	f000 ffee 	bl	8004806 <_ZNSt16allocator_traitsISaI12sum_operatorEE10deallocateERS1_PS0_j>
      }
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <_ZSt8_DestroyIP12sum_operatorEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800383c:	6839      	ldr	r1, [r7, #0]
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fff0 	bl	8004824 <_ZNSt12_Destroy_auxILb1EE9__destroyIP12sum_operatorEEvT_S4_>
    }
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <_ZNSaIP18Compare_expressionED1Ev>:
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fff0 	bl	800483a <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionED1Ev>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
	if (__p)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 ffe7 	bl	8004850 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE10deallocateERS2_PS1_j>
      }
 8003882:	bf00      	nop
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <_ZSt8_DestroyIPP18Compare_expressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003894:	6839      	ldr	r1, [r7, #0]
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 ffe9 	bl	800486e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18Compare_expressionEEvT_S5_>
    }
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <_ZNSaIP14And_expressionED1Ev>:
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 ffe9 	bl	8004884 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionED1Ev>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
	if (__p)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 ffe0 	bl	800489a <_ZNSt16allocator_traitsISaIP14And_expressionEE10deallocateERS2_PS1_j>
      }
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <_ZSt8_DestroyIPP14And_expressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80038ec:	6839      	ldr	r1, [r7, #0]
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 ffe2 	bl	80048b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14And_expressionEEvT_S5_>
    }
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80038fc:	b5b0      	push	{r4, r5, r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8003906:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8003908:	1d3b      	adds	r3, r7, #4
 800390a:	4618      	mov	r0, r3
 800390c:	f000 ffef 	bl	80048ee <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8003910:	462a      	mov	r2, r5
 8003912:	6839      	ldr	r1, [r7, #0]
 8003914:	4620      	mov	r0, r4
 8003916:	f000 fff4 	bl	8004902 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800391a:	4603      	mov	r3, r0
    }
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bdb0      	pop	{r4, r5, r7, pc}

08003924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8003932:	68b8      	ldr	r0, [r7, #8]
 8003934:	f000 ffcb 	bl	80048ce <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	429a      	cmp	r2, r3
 8003944:	d001      	beq.n	800394a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x28>
 800394a:	2300      	movs	r3, #0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8003950:	4817      	ldr	r0, [pc, #92]	; (80039b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8c>)
 8003952:	f012 ffd4 	bl	80168fe <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	68b8      	ldr	r0, [r7, #8]
 800395a:	f7ff ffcf 	bl	80038fc <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800395e:	4603      	mov	r3, r0
 8003960:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b0f      	cmp	r3, #15
 8003966:	d910      	bls.n	800398a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	2200      	movs	r2, #0
 800396e:	4619      	mov	r1, r3
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f012 ffe7 	bl	8016944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003976:	4603      	mov	r3, r0
 8003978:	4619      	mov	r1, r3
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f012 ffd4 	bl	8016928 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	4619      	mov	r1, r3
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f012 ffd5 	bl	8016934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f012 ffce 	bl	801692c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8003990:	4603      	mov	r3, r0
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	4618      	mov	r0, r3
 8003998:	f013 f824 	bl	80169e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	4619      	mov	r1, r3
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f012 ffc9 	bl	8016938 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	08019e34 	.word	0x08019e34

080039b4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003a00:	6839      	ldr	r1, [r7, #0]
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 ff8c 	bl	8004920 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS7_>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
      { }
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8003a64:	6839      	ldr	r1, [r7, #0]
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 ff66 	bl	8004938 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 8003a6c:	6839      	ldr	r1, [r7, #0]
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 ff77 	bl	8004962 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003a9a:	b590      	push	{r4, r7, lr}
 8003a9c:	b08d      	sub	sp, #52	; 0x34
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 ff6b 	bl	8004986 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEE13_M_const_castEv>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8003ab4:	69bc      	ldr	r4, [r7, #24]
 8003ab6:	68b8      	ldr	r0, [r7, #8]
 8003ab8:	f000 ff76 	bl	80049a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8003abc:	4603      	mov	r3, r0
 8003abe:	429c      	cmp	r4, r3
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d030      	beq.n	8003b2e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 8003acc:	68b8      	ldr	r0, [r7, #8]
 8003ace:	f000 ff77 	bl	80049c0 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>
 8003ad2:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d013      	beq.n	8003b00 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8003ad8:	68bc      	ldr	r4, [r7, #8]
 8003ada:	68b8      	ldr	r0, [r7, #8]
 8003adc:	f000 ff7c 	bl	80049d8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 ff83 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003aea:	4603      	mov	r3, r0
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	4619      	mov	r1, r3
 8003af0:	4620      	mov	r0, r4
 8003af2:	f000 ff89 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 8003b00:	2300      	movs	r3, #0
	  if (size() > 0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00c      	beq.n	8003b20 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	68b8      	ldr	r0, [r7, #8]
 8003b0c:	f000 ff64 	bl	80049d8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8003b10:	4602      	mov	r2, r0
 8003b12:	f107 031c 	add.w	r3, r7, #28
 8003b16:	4619      	mov	r1, r3
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 ff8a 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003b1e:	e0db      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 ff99 	bl	8004a5e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8003b2c:	e0d4      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8003b2e:	68bc      	ldr	r4, [r7, #8]
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 ff5c 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6839      	ldr	r1, [r7, #0]
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f000 ff62 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d057      	beq.n	8003bfa <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8003b4e:	69bc      	ldr	r4, [r7, #24]
 8003b50:	68b8      	ldr	r0, [r7, #8]
 8003b52:	f001 f809 	bl	8004b68 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8003b56:	4603      	mov	r3, r0
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429c      	cmp	r4, r3
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00d      	beq.n	8003b84 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8003b68:	68b8      	ldr	r0, [r7, #8]
 8003b6a:	f000 fffd 	bl	8004b68 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8003b6e:	4604      	mov	r4, r0
 8003b70:	68b8      	ldr	r0, [r7, #8]
 8003b72:	f000 fff9 	bl	8004b68 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8003b76:	4603      	mov	r3, r0
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 ffff 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003b82:	e0a9      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8003b84:	68bc      	ldr	r4, [r7, #8]
 8003b86:	f107 0314 	add.w	r3, r7, #20
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 f811 	bl	8004bb2 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>
 8003b90:	4603      	mov	r3, r0
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 ff2b 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f000 ff31 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01f      	beq.n	8003bec <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff ff3b 	bl	8003a2a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	623b      	str	r3, [r7, #32]
 8003bc8:	f107 0214 	add.w	r2, r7, #20
 8003bcc:	f107 0320 	add.w	r3, r7, #32
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 ff2d 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003bd8:	e07e      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8003bda:	f107 0218 	add.w	r2, r7, #24
 8003bde:	f107 0318 	add.w	r3, r7, #24
 8003be2:	4619      	mov	r1, r3
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 ffcb 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003bea:	e075      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 ff33 	bl	8004a5e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8003bf8:	e06e      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8003bfa:	68bc      	ldr	r4, [r7, #8]
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fef6 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c04:	4603      	mov	r3, r0
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f000 fefc 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d056      	beq.n	8003cc4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8003c1a:	69bc      	ldr	r4, [r7, #24]
 8003c1c:	68b8      	ldr	r0, [r7, #8]
 8003c1e:	f000 fedb 	bl	80049d8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8003c22:	4603      	mov	r3, r0
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	429c      	cmp	r4, r3
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00c      	beq.n	8003c4e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8003c34:	2300      	movs	r3, #0
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
 8003c38:	68b8      	ldr	r0, [r7, #8]
 8003c3a:	f000 fecd 	bl	80049d8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c44:	4619      	mov	r1, r3
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fef3 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003c4c:	e044      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8003c4e:	68bc      	ldr	r4, [r7, #8]
 8003c50:	f107 0310 	add.w	r3, r7, #16
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 ffbd 	bl	8004bd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEppEv>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fec6 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c64:	4603      	mov	r3, r0
 8003c66:	461a      	mov	r2, r3
 8003c68:	6839      	ldr	r1, [r7, #0]
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f000 fecc 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01f      	beq.n	8003cb6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fed6 	bl	8003a2a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c92:	f107 0218 	add.w	r2, r7, #24
 8003c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fec8 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003ca2:	e019      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8003ca4:	f107 0210 	add.w	r2, r7, #16
 8003ca8:	f107 0310 	add.w	r3, r7, #16
 8003cac:	4619      	mov	r1, r3
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 ff66 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003cb4:	e010      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fece 	bl	8004a5e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8003cc2:	e009      	b.n	8003cd8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003ccc:	f107 0318 	add.w	r3, r7, #24
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 ff8f 	bl	8004bf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	3734      	adds	r7, #52	; 0x34
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd90      	pop	{r4, r7, pc}

08003ce0 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4618      	mov	r0, r3
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003d0e:	b5b0      	push	{r4, r5, r7, lr}
 8003d10:	b088      	sub	sp, #32
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d11a      	bne.n	8003d58 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fe40 	bl	80049a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d013      	beq.n	8003d58 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8003d30:	68fc      	ldr	r4, [r7, #12]
 8003d32:	f107 0310 	add.w	r3, r7, #16
 8003d36:	6839      	ldr	r1, [r7, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ffd1 	bl	8003ce0 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 8003d3e:	4605      	mov	r5, r0
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fe55 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f000 fe5b 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 8003d5c:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8003d5e:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8003d60:	6838      	ldr	r0, [r7, #0]
 8003d62:	f7ff ffc9 	bl	8003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003d66:	4603      	mov	r3, r0
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d6c:	f000 ff59 	bl	8004c22 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 8003d70:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8003d76:	7ff8      	ldrb	r0, [r7, #31]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	69b9      	ldr	r1, [r7, #24]
 8003d7c:	f012 fd60 	bl	8016840 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8003d8a:	f107 0314 	add.w	r3, r7, #20
 8003d8e:	69b9      	ldr	r1, [r7, #24]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fe73 	bl	8003a7c <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8003d96:	697b      	ldr	r3, [r7, #20]
      }
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3720      	adds	r7, #32
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bdb0      	pop	{r4, r5, r7, pc}

08003da0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSB_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 ff2b 	bl	8004c4a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSD_>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
      { }
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8003e50:	6839      	ldr	r1, [r7, #0]
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 ff05 	bl	8004c62 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>
	_M_put_node(__p);
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 ff16 	bl	8004c8c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>
      }
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003e86:	b590      	push	{r4, r7, lr}
 8003e88:	b08d      	sub	sp, #52	; 0x34
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 ff0a 	bl	8004cb0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE13_M_const_castEv>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8003ea0:	69bc      	ldr	r4, [r7, #24]
 8003ea2:	68b8      	ldr	r0, [r7, #8]
 8003ea4:	f000 ff15 	bl	8004cd2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	429c      	cmp	r4, r3
 8003eac:	bf0c      	ite	eq
 8003eae:	2301      	moveq	r3, #1
 8003eb0:	2300      	movne	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d030      	beq.n	8003f1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x94>
	  if (size() > 0
 8003eb8:	68b8      	ldr	r0, [r7, #8]
 8003eba:	f000 ff16 	bl	8004cea <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>
 8003ebe:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d013      	beq.n	8003eec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x66>
 8003ec4:	68bc      	ldr	r4, [r7, #8]
 8003ec6:	68b8      	ldr	r0, [r7, #8]
 8003ec8:	f000 ff1b 	bl	8004d02 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 ff22 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	4619      	mov	r1, r3
 8003edc:	4620      	mov	r0, r4
 8003ede:	f000 ff28 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x66>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x68>
 8003eec:	2300      	movs	r3, #0
	  if (size() > 0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00c      	beq.n	8003f0c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x86>
	    return _Res(0, _M_rightmost());
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	68b8      	ldr	r0, [r7, #8]
 8003ef8:	f000 ff03 	bl	8004d02 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 8003efc:	4602      	mov	r2, r0
 8003efe:	f107 031c 	add.w	r3, r7, #28
 8003f02:	4619      	mov	r1, r3
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fd94 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003f0a:	e0db      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 ff1c 	bl	8004d50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 8003f18:	e0d4      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8003f1a:	68bc      	ldr	r4, [r7, #8]
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fefb 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	6839      	ldr	r1, [r7, #0]
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f000 ff01 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d057      	beq.n	8003fe6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x160>
	  iterator __before = __pos;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8003f3a:	69bc      	ldr	r4, [r7, #24]
 8003f3c:	68b8      	ldr	r0, [r7, #8]
 8003f3e:	f000 ff8c 	bl	8004e5a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 8003f42:	4603      	mov	r3, r0
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	429c      	cmp	r4, r3
 8003f48:	bf0c      	ite	eq
 8003f4a:	2301      	moveq	r3, #1
 8003f4c:	2300      	movne	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8003f54:	68b8      	ldr	r0, [r7, #8]
 8003f56:	f000 ff80 	bl	8004e5a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	68b8      	ldr	r0, [r7, #8]
 8003f5e:	f000 ff7c 	bl	8004e5a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 8003f62:	4603      	mov	r3, r0
 8003f64:	461a      	mov	r2, r3
 8003f66:	4621      	mov	r1, r4
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fe09 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003f6e:	e0a9      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8003f70:	68bc      	ldr	r4, [r7, #8]
 8003f72:	f107 0314 	add.w	r3, r7, #20
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 ff7b 	bl	8004e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 feca 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003f86:	4603      	mov	r3, r0
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f000 fed0 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01f      	beq.n	8003fd8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff ff3b 	bl	8003e16 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	bf0c      	ite	eq
 8003fa6:	2301      	moveq	r3, #1
 8003fa8:	2300      	movne	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x140>
		return _Res(0, __before._M_node);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	623b      	str	r3, [r7, #32]
 8003fb4:	f107 0214 	add.w	r2, r7, #20
 8003fb8:	f107 0320 	add.w	r3, r7, #32
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fd37 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003fc4:	e07e      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8003fc6:	f107 0218 	add.w	r2, r7, #24
 8003fca:	f107 0318 	add.w	r3, r7, #24
 8003fce:	4619      	mov	r1, r3
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fdd5 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003fd6:	e075      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 feb6 	bl	8004d50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 8003fe4:	e06e      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8003fe6:	68bc      	ldr	r4, [r7, #8]
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fe95 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f000 fe9b 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d056      	beq.n	80040b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x22a>
	  iterator __after = __pos;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8004006:	69bc      	ldr	r4, [r7, #24]
 8004008:	68b8      	ldr	r0, [r7, #8]
 800400a:	f000 fe7a 	bl	8004d02 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 800400e:	4603      	mov	r3, r0
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	429c      	cmp	r4, r3
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00c      	beq.n	800403a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x1b4>
	    return _Res(0, _M_rightmost());
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
 8004024:	68b8      	ldr	r0, [r7, #8]
 8004026:	f000 fe6c 	bl	8004d02 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 800402a:	4602      	mov	r2, r0
 800402c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004030:	4619      	mov	r1, r3
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fcfd 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8004038:	e044      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800403a:	68bc      	ldr	r4, [r7, #8]
 800403c:	f107 0310 	add.w	r3, r7, #16
 8004040:	4618      	mov	r0, r3
 8004042:	f000 ff27 	bl	8004e94 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEppEv>
 8004046:	4603      	mov	r3, r0
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fe65 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004050:	4603      	mov	r3, r0
 8004052:	461a      	mov	r2, r3
 8004054:	6839      	ldr	r1, [r7, #0]
 8004056:	4620      	mov	r0, r4
 8004058:	f000 fe6b 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01f      	beq.n	80040a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fed6 	bl	8003e16 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x20a>
		return _Res(0, __pos._M_node);
 800407a:	2300      	movs	r3, #0
 800407c:	62bb      	str	r3, [r7, #40]	; 0x28
 800407e:	f107 0218 	add.w	r2, r7, #24
 8004082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004086:	4619      	mov	r1, r3
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 fcd2 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800408e:	e019      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8004090:	f107 0210 	add.w	r2, r7, #16
 8004094:	f107 0310 	add.w	r3, r7, #16
 8004098:	4619      	mov	r1, r3
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fd70 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80040a0:	e010      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fe51 	bl	8004d50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 80040ae:	e009      	b.n	80040c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	return _Res(__pos._M_node, 0);
 80040b0:	2300      	movs	r3, #0
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040b4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80040b8:	f107 0318 	add.w	r3, r7, #24
 80040bc:	4619      	mov	r1, r3
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 fd99 	bl	8004bf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	3734      	adds	r7, #52	; 0x34
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd90      	pop	{r4, r7, pc}

080040cc <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>:
      operator()(const _Pair& __x) const
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4618      	mov	r0, r3
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80040fa:	b5b0      	push	{r4, r5, r7, lr}
 80040fc:	b088      	sub	sp, #32
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d11a      	bne.n	8004144 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fddf 	bl	8004cd2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8004114:	4602      	mov	r2, r0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4293      	cmp	r3, r2
 800411a:	d013      	beq.n	8004144 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800411c:	68fc      	ldr	r4, [r7, #12]
 800411e:	f107 0310 	add.w	r3, r7, #16
 8004122:	6839      	ldr	r1, [r7, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff ffd1 	bl	80040cc <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 800412a:	4605      	mov	r5, r0
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fdf4 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	4629      	mov	r1, r5
 8004138:	4620      	mov	r0, r4
 800413a:	f000 fdfa 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4e>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x50>
 8004148:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800414a:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800414c:	6838      	ldr	r0, [r7, #0]
 800414e:	f7ff ffc9 	bl	80040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8004152:	4603      	mov	r3, r0
 8004154:	4619      	mov	r1, r3
 8004156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004158:	f000 fead 	bl	8004eb6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>
 800415c:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8004162:	7ff8      	ldrb	r0, [r7, #31]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	69b9      	ldr	r1, [r7, #24]
 8004168:	f012 fb6a 	bl	8016840 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8004176:	f107 0314 	add.w	r3, r7, #20
 800417a:	69b9      	ldr	r1, [r7, #24]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fe73 	bl	8003e68 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8004182:	697b      	ldr	r3, [r7, #20]
      }
 8004184:	4618      	mov	r0, r3
 8004186:	3720      	adds	r7, #32
 8004188:	46bd      	mov	sp, r7
 800418a:	bdb0      	pop	{r4, r5, r7, pc}

0800418c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4618      	mov	r0, r3
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80041d8:	6839      	ldr	r1, [r7, #0]
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fe7f 	bl	8004ede <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS7_>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fe65 	bl	8004ef6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 800422c:	6839      	ldr	r1, [r7, #0]
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fe76 	bl	8004f20 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800425a:	b590      	push	{r4, r7, lr}
 800425c:	b08d      	sub	sp, #52	; 0x34
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8004268:	1d3b      	adds	r3, r7, #4
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fe6a 	bl	8004f44 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEE13_M_const_castEv>
 8004270:	4603      	mov	r3, r0
 8004272:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8004274:	69bc      	ldr	r4, [r7, #24]
 8004276:	68b8      	ldr	r0, [r7, #8]
 8004278:	f000 fe75 	bl	8004f66 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 800427c:	4603      	mov	r3, r0
 800427e:	429c      	cmp	r4, r3
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d030      	beq.n	80042ee <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 800428c:	68b8      	ldr	r0, [r7, #8]
 800428e:	f000 fe76 	bl	8004f7e <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>
 8004292:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8004294:	2b00      	cmp	r3, #0
 8004296:	d013      	beq.n	80042c0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8004298:	68bc      	ldr	r4, [r7, #8]
 800429a:	68b8      	ldr	r0, [r7, #8]
 800429c:	f000 fe7b 	bl	8004f96 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80042a0:	4603      	mov	r3, r0
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fe82 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80042aa:	4603      	mov	r3, r0
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	4619      	mov	r1, r3
 80042b0:	4620      	mov	r0, r4
 80042b2:	f000 fba9 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 80042c0:	2300      	movs	r3, #0
	  if (size() > 0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00c      	beq.n	80042e0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
 80042ca:	68b8      	ldr	r0, [r7, #8]
 80042cc:	f000 fe63 	bl	8004f96 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80042d0:	4602      	mov	r2, r0
 80042d2:	f107 031c 	add.w	r3, r7, #28
 80042d6:	4619      	mov	r1, r3
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fbaa 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80042de:	e0db      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fe6d 	bl	8004fc6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 80042ec:	e0d4      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80042ee:	68bc      	ldr	r4, [r7, #8]
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fe5b 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	6839      	ldr	r1, [r7, #0]
 80042fe:	4620      	mov	r0, r4
 8004300:	f000 fb82 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d057      	beq.n	80043ba <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800430e:	69bc      	ldr	r4, [r7, #24]
 8004310:	68b8      	ldr	r0, [r7, #8]
 8004312:	f000 fedd 	bl	80050d0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8004316:	4603      	mov	r3, r0
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	429c      	cmp	r4, r3
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00d      	beq.n	8004344 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8004328:	68b8      	ldr	r0, [r7, #8]
 800432a:	f000 fed1 	bl	80050d0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 800432e:	4604      	mov	r4, r0
 8004330:	68b8      	ldr	r0, [r7, #8]
 8004332:	f000 fecd 	bl	80050d0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8004336:	4603      	mov	r3, r0
 8004338:	461a      	mov	r2, r3
 800433a:	4621      	mov	r1, r4
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fc1f 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8004342:	e0a9      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8004344:	68bc      	ldr	r4, [r7, #8]
 8004346:	f107 0314 	add.w	r3, r7, #20
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fecc 	bl	80050e8 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>
 8004350:	4603      	mov	r3, r0
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fe2a 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800435a:	4603      	mov	r3, r0
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	4619      	mov	r1, r3
 8004360:	4620      	mov	r0, r4
 8004362:	f000 fb51 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01f      	beq.n	80043ac <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ff3b 	bl	80041ea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8004384:	2300      	movs	r3, #0
 8004386:	623b      	str	r3, [r7, #32]
 8004388:	f107 0214 	add.w	r2, r7, #20
 800438c:	f107 0320 	add.w	r3, r7, #32
 8004390:	4619      	mov	r1, r3
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fb4d 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8004398:	e07e      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800439a:	f107 0218 	add.w	r2, r7, #24
 800439e:	f107 0318 	add.w	r3, r7, #24
 80043a2:	4619      	mov	r1, r3
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fbeb 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80043aa:	e075      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fe07 	bl	8004fc6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 80043b8:	e06e      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80043ba:	68bc      	ldr	r4, [r7, #8]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fdf5 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80043c4:	4603      	mov	r3, r0
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	4619      	mov	r1, r3
 80043ca:	4620      	mov	r0, r4
 80043cc:	f000 fb1c 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d056      	beq.n	8004484 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80043da:	69bc      	ldr	r4, [r7, #24]
 80043dc:	68b8      	ldr	r0, [r7, #8]
 80043de:	f000 fdda 	bl	8004f96 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80043e2:	4603      	mov	r3, r0
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	429c      	cmp	r4, r3
 80043e8:	bf0c      	ite	eq
 80043ea:	2301      	moveq	r3, #1
 80043ec:	2300      	movne	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00c      	beq.n	800440e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 80043f4:	2300      	movs	r3, #0
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
 80043f8:	68b8      	ldr	r0, [r7, #8]
 80043fa:	f000 fdcc 	bl	8004f96 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80043fe:	4602      	mov	r2, r0
 8004400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004404:	4619      	mov	r1, r3
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fb13 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800440c:	e044      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800440e:	68bc      	ldr	r4, [r7, #8]
 8004410:	f107 0310 	add.w	r3, r7, #16
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fe78 	bl	800510a <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEppEv>
 800441a:	4603      	mov	r3, r0
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fdc5 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004424:	4603      	mov	r3, r0
 8004426:	461a      	mov	r2, r3
 8004428:	6839      	ldr	r1, [r7, #0]
 800442a:	4620      	mov	r0, r4
 800442c:	f000 faec 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01f      	beq.n	8004476 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fed6 	bl	80041ea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 800444e:	2300      	movs	r3, #0
 8004450:	62bb      	str	r3, [r7, #40]	; 0x28
 8004452:	f107 0218 	add.w	r2, r7, #24
 8004456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800445a:	4619      	mov	r1, r3
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fae8 	bl	8004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8004462:	e019      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8004464:	f107 0210 	add.w	r2, r7, #16
 8004468:	f107 0310 	add.w	r3, r7, #16
 800446c:	4619      	mov	r1, r3
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fb86 	bl	8004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8004474:	e010      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fda2 	bl	8004fc6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8004482:	e009      	b.n	8004498 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8004484:	2300      	movs	r3, #0
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004488:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800448c:	f107 0318 	add.w	r3, r7, #24
 8004490:	4619      	mov	r1, r3
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fbaf 	bl	8004bf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	3734      	adds	r7, #52	; 0x34
 800449c:	46bd      	mov	sp, r7
 800449e:	bd90      	pop	{r4, r7, pc}

080044a0 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>:
      operator()(const _Pair& __x) const
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80044ce:	b5b0      	push	{r4, r5, r7, lr}
 80044d0:	b088      	sub	sp, #32
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
 80044da:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d11a      	bne.n	8004518 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fd3f 	bl	8004f66 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 80044e8:	4602      	mov	r2, r0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d013      	beq.n	8004518 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80044f0:	68fc      	ldr	r4, [r7, #12]
 80044f2:	f107 0310 	add.w	r3, r7, #16
 80044f6:	6839      	ldr	r1, [r7, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff ffd1 	bl	80044a0 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 80044fe:	4605      	mov	r5, r0
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fd54 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004506:	4603      	mov	r3, r0
 8004508:	461a      	mov	r2, r3
 800450a:	4629      	mov	r1, r5
 800450c:	4620      	mov	r0, r4
 800450e:	f000 fa7b 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 800451c:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800451e:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8004520:	6838      	ldr	r0, [r7, #0]
 8004522:	f7ff ffc9 	bl	80044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004526:	4603      	mov	r3, r0
 8004528:	4619      	mov	r1, r3
 800452a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800452c:	f000 fdfe 	bl	800512c <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 8004530:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8004536:	7ff8      	ldrb	r0, [r7, #31]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	69b9      	ldr	r1, [r7, #24]
 800453c:	f012 f980 	bl	8016840 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800454a:	f107 0314 	add.w	r3, r7, #20
 800454e:	69b9      	ldr	r1, [r7, #24]
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fe73 	bl	800423c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8004556:	697b      	ldr	r3, [r7, #20]
      }
 8004558:	4618      	mov	r0, r3
 800455a:	3720      	adds	r7, #32
 800455c:	46bd      	mov	sp, r7
 800455e:	bdb0      	pop	{r4, r5, r7, pc}

08004560 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <_ZNRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRbEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 800458c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f8b0 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800459c:	4604      	mov	r4, r0
 800459e:	6838      	ldr	r0, [r7, #0]
 80045a0:	f000 fdd8 	bl	8005154 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80045a4:	4603      	mov	r3, r0
 80045a6:	461a      	mov	r2, r3
 80045a8:	4621      	mov	r1, r4
 80045aa:	4628      	mov	r0, r5
 80045ac:	f000 fddd 	bl	800516a <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRbEESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 80045b0:	4633      	mov	r3, r6
    }
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045ba <_ZNRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRiEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 80045d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f88e 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80045e0:	4604      	mov	r4, r0
 80045e2:	6838      	ldr	r0, [r7, #0]
 80045e4:	f000 fdd8 	bl	8005198 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80045e8:	4603      	mov	r3, r0
 80045ea:	461a      	mov	r2, r3
 80045ec:	4621      	mov	r1, r4
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 fddd 	bl	80051ae <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRiEESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 80045f4:	4633      	mov	r3, r6
    }
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045fe <_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRfEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8004614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f86c 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8004624:	4604      	mov	r4, r0
 8004626:	6838      	ldr	r0, [r7, #0]
 8004628:	f000 fdd8 	bl	80051dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	4621      	mov	r1, r4
 8004632:	4628      	mov	r0, r5
 8004634:	f000 fddd 	bl	80051f2 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRfEESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8004638:	4633      	mov	r3, r6
    }
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004642 <_ZNRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>:
      _Type& _M_get() & noexcept
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
      { return *_M_storage._M_ptr(); }
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fde7 	bl	8005220 <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>
 8004652:	4603      	mov	r3, r0
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRS8_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800465c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f848 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800466c:	4604      	mov	r4, r0
 800466e:	6838      	ldr	r0, [r7, #0]
 8004670:	f000 fde2 	bl	8005238 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8004674:	4603      	mov	r3, r0
 8004676:	461a      	mov	r2, r3
 8004678:	4621      	mov	r1, r4
 800467a:	4628      	mov	r0, r5
 800467c:	f000 fde7 	bl	800524e <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRS9_EESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8004680:	4633      	mov	r3, r6
    }
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800468a <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSA_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800468a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f831 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800469a:	4604      	mov	r4, r0
 800469c:	6838      	ldr	r0, [r7, #0]
 800469e:	f000 fded 	bl	800527c <_ZSt7forwardIRP8VariableEOT_RNSt16remove_referenceIS3_E4typeE>
 80046a2:	4603      	mov	r3, r0
 80046a4:	461a      	mov	r2, r3
 80046a6:	4621      	mov	r1, r4
 80046a8:	4628      	mov	r0, r5
 80046aa:	f000 fdf2 	bl	8005292 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSB_EESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 80046ae:	4633      	mov	r3, r6
    }
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046b8 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSC_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 80046b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f81a 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80046c8:	4604      	mov	r4, r0
 80046ca:	6838      	ldr	r0, [r7, #0]
 80046cc:	f000 fdf8 	bl	80052c0 <_ZSt7forwardIRP13Function_callEOT_RNSt16remove_referenceIS3_E4typeE>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	4621      	mov	r1, r4
 80046d6:	4628      	mov	r0, r5
 80046d8:	f000 fdfd 	bl	80052d6 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSD_EESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 80046dc:	4633      	mov	r3, r6
    }
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046e6 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifS9_SB_SD_EEEJEE9_M_accessEv>:
      _M_access() const
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionED1Ev>:
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <_ZNSt16allocator_traitsISaIP16Power_expressionEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 fde3 	bl	8005304 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE10deallocateEPS2_j>
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP16Power_expressionEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <_ZN9__gnu_cxx13new_allocatorI13mult_operatorED1Ev>:
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <_ZNSt16allocator_traitsISaI13mult_operatorEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fdca 	bl	800531c <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE10deallocateEPS1_j>
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <_ZNSt12_Destroy_auxILb1EE9__destroyIP13mult_operatorEEvT_S4_>:
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionED1Ev>:
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fdb1 	bl	8005334 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE10deallocateEPS2_j>
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <_ZNSt12_Destroy_auxILb1EE9__destroyIPP19Multiply_expressionEEvT_S5_>:
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorED1Ev>:
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <_ZNSt16allocator_traitsISaI12sum_operatorEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fd98 	bl	800534c <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE10deallocateEPS1_j>
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <_ZNSt12_Destroy_auxILb1EE9__destroyIP12sum_operatorEEvT_S4_>:
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionED1Ev>:
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fd7f 	bl	8005364 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE10deallocateEPS2_j>
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18Compare_expressionEEvT_S5_>:
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionED1Ev>:
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <_ZNSt16allocator_traitsISaIP14And_expressionEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fd66 	bl	800537c <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE10deallocateEPS2_j>
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14And_expressionEEvT_S5_>:
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1ad3      	subs	r3, r2, r3
    }
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004938:	b590      	push	{r4, r7, lr}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fd26 	bl	8005394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8004948:	4604      	mov	r4, r0
 800494a:	6838      	ldr	r0, [r7, #0]
 800494c:	f000 fd2d 	bl	80053aa <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 8004950:	4603      	mov	r3, r0
 8004952:	4619      	mov	r1, r3
 8004954:	4620      	mov	r0, r4
 8004956:	f000 fd36 	bl	80053c6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE7destroyIS4_EEvRS6_PT_>
      }
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	bd90      	pop	{r4, r7, pc}

08004962 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fd11 	bl	8005394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8004972:	4603      	mov	r3, r0
 8004974:	2201      	movs	r2, #1
 8004976:	6839      	ldr	r1, [r7, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fd31 	bl	80053e0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE10deallocateERS6_PS5_j>
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	f107 030c 	add.w	r3, r7, #12
 8004996:	4611      	mov	r1, r2
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff f86f 	bl	8003a7c <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3310      	adds	r3, #16
 80049e4:	4618      	mov	r0, r3
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fd00 	bl	80053fe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80049fe:	4603      	mov	r3, r0
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <_ZNKSt4lessIcEclERKcS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	781a      	ldrb	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	bf34      	ite	cc
 8004a20:	2301      	movcc	r3, #1
 8004a22:	2300      	movcs	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fcec 	bl	8005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	605a      	str	r2, [r3, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004a5e:	b590      	push	{r4, r7, lr}
 8004a60:	b08b      	sub	sp, #44	; 0x2c
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8004a6a:	68b8      	ldr	r0, [r7, #8]
 8004a6c:	f7fe f824 	bl	8002ab8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8004a70:	4603      	mov	r3, r0
 8004a72:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8004a74:	68b8      	ldr	r0, [r7, #8]
 8004a76:	f7ff ff97 	bl	80049a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d020      	beq.n	8004acc <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004a8e:	68bc      	ldr	r4, [r7, #8]
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fcb3 	bl	80053fe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7ff ffb2 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fe ffc4 	bl	8003a42 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004aba:	4603      	mov	r3, r0
 8004abc:	e004      	b.n	8004ac8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fe ffb2 	bl	8003a2a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004aca:	e7db      	b.n	8004a84 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	f107 0310 	add.w	r3, r7, #16
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fe ffd1 	bl	8003a7c <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01d      	beq.n	8004b1e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8004ae2:	68b8      	ldr	r0, [r7, #8]
 8004ae4:	f000 fca9 	bl	800543a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	f107 021c 	add.w	r2, r7, #28
 8004af0:	f107 0310 	add.w	r3, r7, #16
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fcb0 	bl	800545c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc10token_typeEES6_>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8004b02:	f107 0214 	add.w	r2, r7, #20
 8004b06:	f107 0318 	add.w	r3, r7, #24
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fcb9 	bl	8005484 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>
 8004b12:	e025      	b.n	8004b60 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8004b14:	f107 0310 	add.w	r3, r7, #16
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f84a 	bl	8004bb2 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8004b1e:	68bc      	ldr	r4, [r7, #8]
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff ff64 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f7ff ff6a 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8004b3a:	f107 0214 	add.w	r2, r7, #20
 8004b3e:	f107 0318 	add.w	r3, r7, #24
 8004b42:	4619      	mov	r1, r3
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fc9d 	bl	8005484 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>
 8004b4a:	e009      	b.n	8004b60 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	623b      	str	r3, [r7, #32]
 8004b50:	f107 0220 	add.w	r2, r7, #32
 8004b54:	f107 0310 	add.w	r3, r7, #16
 8004b58:	4619      	mov	r1, r3
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f84b 	bl	8004bf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	372c      	adds	r7, #44	; 0x2c
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd90      	pop	{r4, r7, pc}

08004b68 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	330c      	adds	r3, #12
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004b8c:	68b8      	ldr	r0, [r7, #8]
 8004b8e:	f000 fc49 	bl	8005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004b92:	4603      	mov	r3, r0
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fc42 	bl	8005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	605a      	str	r2, [r3, #4]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f011 fe3c 	bl	801683c <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	601a      	str	r2, [r3, #0]
	return *this;
 8004bca:	687b      	ldr	r3, [r7, #4]
      }
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f011 fe18 	bl	8016816 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8004be6:	4602      	mov	r2, r0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	601a      	str	r2, [r3, #0]
	return *this;
 8004bec:	687b      	ldr	r3, [r7, #4]
      }
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8004c02:	68b8      	ldr	r0, [r7, #8]
 8004c04:	f000 fc0e 	bl	8005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	605a      	str	r2, [r3, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 8004c22:	b590      	push	{r4, r7, lr}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681c      	ldr	r4, [r3, #0]
 8004c30:	6838      	ldr	r0, [r7, #0]
 8004c32:	f7ff f861 	bl	8003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004c36:	4603      	mov	r3, r0
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f000 fc3b 	bl	80054b6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd90      	pop	{r4, r7, pc}

08004c4a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSD_>:
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004c62:	b590      	push	{r4, r7, lr}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fc39 	bl	80054e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8004c72:	4604      	mov	r4, r0
 8004c74:	6838      	ldr	r0, [r7, #0]
 8004c76:	f000 fc40 	bl	80054fa <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f000 fc49 	bl	8005516 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE7destroyISA_EEvRSC_PT_>
      }
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd90      	pop	{r4, r7, pc}

08004c8c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fc24 	bl	80054e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	6839      	ldr	r1, [r7, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fc44 	bl	8005530 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE10deallocateERSC_PSB_j>
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	f107 030c 	add.w	r3, r7, #12
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff f8d0 	bl	8003e68 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3310      	adds	r3, #16
 8004d0e:	4618      	mov	r0, r3
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fc13 	bl	800554e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	68b8      	ldr	r0, [r7, #8]
 8004d42:	f000 fc17 	bl	8005574 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 8004d46:	4603      	mov	r3, r0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b08b      	sub	sp, #44	; 0x2c
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8004d5c:	68b8      	ldr	r0, [r7, #8]
 8004d5e:	f7fd ff87 	bl	8002c70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8004d62:	4603      	mov	r3, r0
 8004d64:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8004d66:	68b8      	ldr	r0, [r7, #8]
 8004d68:	f7ff ffb3 	bl	8004cd2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d020      	beq.n	8004dbe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6e>
	  __y = __x;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004d80:	68bc      	ldr	r4, [r7, #8]
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fbe2 	bl	800554e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4620      	mov	r0, r4
 8004d92:	f7ff ffce 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004d96:	4603      	mov	r3, r0
 8004d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x60>
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff f841 	bl	8003e2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004dac:	4603      	mov	r3, r0
 8004dae:	e004      	b.n	8004dba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6a>
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff f82f 	bl	8003e16 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004db8:	4603      	mov	r3, r0
 8004dba:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004dbc:	e7db      	b.n	8004d76 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x26>
      iterator __j = iterator(__y);
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	f107 0310 	add.w	r3, r7, #16
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff f84e 	bl	8003e68 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01d      	beq.n	8004e10 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 8004dd4:	68b8      	ldr	r0, [r7, #8]
 8004dd6:	f000 fbdd 	bl	8005594 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	f107 021c 	add.w	r2, r7, #28
 8004de2:	f107 0310 	add.w	r3, r7, #16
 8004de6:	4611      	mov	r1, r2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fbe4 	bl	80055b6 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 8004df4:	f107 0214 	add.w	r2, r7, #20
 8004df8:	f107 0318 	add.w	r3, r7, #24
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fbed 	bl	80055de <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>
 8004e04:	e025      	b.n	8004e52 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 8004e06:	f107 0310 	add.w	r3, r7, #16
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 f831 	bl	8004e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8004e10:	68bc      	ldr	r4, [r7, #8]
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff ff80 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4620      	mov	r0, r4
 8004e22:	f7ff ff86 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 8004e2c:	f107 0214 	add.w	r2, r7, #20
 8004e30:	f107 0318 	add.w	r3, r7, #24
 8004e34:	4619      	mov	r1, r3
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fbd1 	bl	80055de <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>
 8004e3c:	e009      	b.n	8004e52 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	623b      	str	r3, [r7, #32]
 8004e42:	f107 0220 	add.w	r2, r7, #32
 8004e46:	f107 0310 	add.w	r3, r7, #16
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff fed2 	bl	8004bf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	372c      	adds	r7, #44	; 0x2c
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd90      	pop	{r4, r7, pc}

08004e5a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	330c      	adds	r3, #12
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f011 fcdc 	bl	801683c <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8004e84:	4602      	mov	r2, r0
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	601a      	str	r2, [r3, #0]
	return *this;
 8004e8a:	687b      	ldr	r3, [r7, #4]
      }
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f011 fcb8 	bl	8016816 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	601a      	str	r2, [r3, #0]
	return *this;
 8004eac:	687b      	ldr	r3, [r7, #4]
      }
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>:
	  operator()(_Arg&& __arg) const
 8004eb6:	b590      	push	{r4, r7, lr}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681c      	ldr	r4, [r3, #0]
 8004ec4:	6838      	ldr	r0, [r7, #0]
 8004ec6:	f7ff f90d 	bl	80040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f000 fb9e 	bl	8005610 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd90      	pop	{r4, r7, pc}

08004ede <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS7_>:
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004ef6:	b590      	push	{r4, r7, lr}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fb9c 	bl	800563e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8004f06:	4604      	mov	r4, r0
 8004f08:	6838      	ldr	r0, [r7, #0]
 8004f0a:	f000 fba3 	bl	8005654 <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4619      	mov	r1, r3
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 fbac 	bl	8005670 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE7destroyIS4_EEvRS6_PT_>
      }
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd90      	pop	{r4, r7, pc}

08004f20 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fb87 	bl	800563e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2201      	movs	r2, #1
 8004f34:	6839      	ldr	r1, [r7, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fba7 	bl	800568a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE10deallocateERS6_PS5_j>
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	f107 030c 	add.w	r3, r7, #12
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff f970 	bl	800423c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3310      	adds	r3, #16
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fb76 	bl	80056a8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004fc6:	b590      	push	{r4, r7, lr}
 8004fc8:	b08b      	sub	sp, #44	; 0x2c
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8004fd2:	68b8      	ldr	r0, [r7, #8]
 8004fd4:	f7fd ff28 	bl	8002e28 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8004fdc:	68b8      	ldr	r0, [r7, #8]
 8004fde:	f7ff ffc2 	bl	8004f66 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d020      	beq.n	8005034 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004ff6:	68bc      	ldr	r4, [r7, #8]
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fb54 	bl	80056a8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8005000:	4603      	mov	r3, r0
 8005002:	461a      	mov	r2, r3
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4620      	mov	r0, r4
 8005008:	f7ff fcfe 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8005012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005016:	2b00      	cmp	r3, #0
 8005018:	d005      	beq.n	8005026 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff f8f0 	bl	8004202 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8005022:	4603      	mov	r3, r0
 8005024:	e004      	b.n	8005030 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff f8de 	bl	80041ea <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800502e:	4603      	mov	r3, r0
 8005030:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8005032:	e7db      	b.n	8004fec <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	f107 0310 	add.w	r3, r7, #16
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff f8fd 	bl	800423c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8005042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01d      	beq.n	8005086 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 800504a:	68b8      	ldr	r0, [r7, #8]
 800504c:	f000 fb3f 	bl	80056ce <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>
 8005050:	4603      	mov	r3, r0
 8005052:	61fb      	str	r3, [r7, #28]
 8005054:	f107 021c 	add.w	r2, r7, #28
 8005058:	f107 0310 	add.w	r3, r7, #16
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fb46 	bl	80056f0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEES6_>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d008      	beq.n	800507c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 800506a:	f107 0214 	add.w	r2, r7, #20
 800506e:	f107 0318 	add.w	r3, r7, #24
 8005072:	4619      	mov	r1, r3
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fb4f 	bl	8005718 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>
 800507a:	e025      	b.n	80050c8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 800507c:	f107 0310 	add.w	r3, r7, #16
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f831 	bl	80050e8 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8005086:	68bc      	ldr	r4, [r7, #8]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff ff8f 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005090:	4603      	mov	r3, r0
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4619      	mov	r1, r3
 8005096:	4620      	mov	r0, r4
 8005098:	f7ff fcb6 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d008      	beq.n	80050b4 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 80050a2:	f107 0214 	add.w	r2, r7, #20
 80050a6:	f107 0318 	add.w	r3, r7, #24
 80050aa:	4619      	mov	r1, r3
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 fb33 	bl	8005718 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>
 80050b2:	e009      	b.n	80050c8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 80050b4:	2300      	movs	r3, #0
 80050b6:	623b      	str	r3, [r7, #32]
 80050b8:	f107 0220 	add.w	r2, r7, #32
 80050bc:	f107 0310 	add.w	r3, r7, #16
 80050c0:	4619      	mov	r1, r3
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f7ff fd97 	bl	8004bf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	372c      	adds	r7, #44	; 0x2c
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd90      	pop	{r4, r7, pc}

080050d0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	330c      	adds	r3, #12
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f011 fba1 	bl	801683c <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80050fa:	4602      	mov	r2, r0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	601a      	str	r2, [r3, #0]
	return *this;
 8005100:	687b      	ldr	r3, [r7, #4]
      }
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f011 fb7d 	bl	8016816 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800511c:	4602      	mov	r2, r0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	601a      	str	r2, [r3, #0]
	return *this;
 8005122:	687b      	ldr	r3, [r7, #4]
      }
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 800512c:	b590      	push	{r4, r7, lr}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681c      	ldr	r4, [r3, #0]
 800513a:	6838      	ldr	r0, [r7, #0]
 800513c:	f7ff f9bc 	bl	80044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005140:	4603      	mov	r3, r0
 8005142:	4619      	mov	r1, r3
 8005144:	4620      	mov	r0, r4
 8005146:	f000 fb00 	bl	800574a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 800514a:	4603      	mov	r3, r0
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	bd90      	pop	{r4, r7, pc}

08005154 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4618      	mov	r0, r3
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRbEESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800516a:	b5b0      	push	{r4, r5, r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	7338      	strb	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8005176:	68b8      	ldr	r0, [r7, #8]
 8005178:	f7ff fac0 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800517c:	4604      	mov	r4, r0
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff ffe8 	bl	8005154 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8005184:	4603      	mov	r3, r0
 8005186:	4619      	mov	r1, r3
 8005188:	4620      	mov	r0, r4
 800518a:	f000 faf5 	bl	8005778 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRbEENS0_16__variant_cookieESE_>
 800518e:	462b      	mov	r3, r5
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bdb0      	pop	{r4, r5, r7, pc}

08005198 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRiEESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80051ae:	b5b0      	push	{r4, r5, r7, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	7338      	strb	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80051ba:	68b8      	ldr	r0, [r7, #8]
 80051bc:	f7ff fa9e 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80051c0:	4604      	mov	r4, r0
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff ffe8 	bl	8005198 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80051c8:	4603      	mov	r3, r0
 80051ca:	4619      	mov	r1, r3
 80051cc:	4620      	mov	r0, r4
 80051ce:	f000 fae4 	bl	800579a <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRiEENS0_16__variant_cookieESE_>
 80051d2:	462b      	mov	r3, r5
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bdb0      	pop	{r4, r5, r7, pc}

080051dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRfEESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80051f2:	b5b0      	push	{r4, r5, r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	7338      	strb	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80051fe:	68b8      	ldr	r0, [r7, #8]
 8005200:	f7ff fa7c 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005204:	4604      	mov	r4, r0
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff ffe8 	bl	80051dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 800520c:	4603      	mov	r3, r0
 800520e:	4619      	mov	r1, r3
 8005210:	4620      	mov	r0, r4
 8005212:	f000 fad3 	bl	80057bc <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRfEENS0_16__variant_cookieESE_>
 8005216:	462b      	mov	r3, r5
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bdb0      	pop	{r4, r5, r7, pc}

08005220 <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fad8 	bl	80057de <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv>
 800522e:	4603      	mov	r3, r0
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRS9_EESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800524e:	b5b0      	push	{r4, r5, r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	7338      	strb	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800525a:	68b8      	ldr	r0, [r7, #8]
 800525c:	f7ff fa4e 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005260:	4604      	mov	r4, r0
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff ffe8 	bl	8005238 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8005268:	4603      	mov	r3, r0
 800526a:	4619      	mov	r1, r3
 800526c:	4620      	mov	r0, r4
 800526e:	f000 fac1 	bl	80057f4 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRS7_EENS0_16__variant_cookieESE_>
 8005272:	462b      	mov	r3, r5
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bdb0      	pop	{r4, r5, r7, pc}

0800527c <_ZSt7forwardIRP8VariableEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSB_EESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8005292:	b5b0      	push	{r4, r5, r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	7338      	strb	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800529e:	68b8      	ldr	r0, [r7, #8]
 80052a0:	f7ff fa2c 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80052a4:	4604      	mov	r4, r0
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff ffe8 	bl	800527c <_ZSt7forwardIRP8VariableEOT_RNSt16remove_referenceIS3_E4typeE>
 80052ac:	4603      	mov	r3, r0
 80052ae:	4619      	mov	r1, r3
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 fab0 	bl	8005816 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRS9_EENS0_16__variant_cookieESE_>
 80052b6:	462b      	mov	r3, r5
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bdb0      	pop	{r4, r5, r7, pc}

080052c0 <_ZSt7forwardIRP13Function_callEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSD_EESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80052d6:	b5b0      	push	{r4, r5, r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	7338      	strb	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80052e2:	68b8      	ldr	r0, [r7, #8]
 80052e4:	f7ff fa0a 	bl	80046fc <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80052e8:	4604      	mov	r4, r0
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff ffe8 	bl	80052c0 <_ZSt7forwardIRP13Function_callEOT_RNSt16remove_referenceIS3_E4typeE>
 80052f0:	4603      	mov	r3, r0
 80052f2:	4619      	mov	r1, r3
 80052f4:	4620      	mov	r0, r4
 80052f6:	f000 fa9f 	bl	8005838 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRSB_EENS0_16__variant_cookieESE_>
 80052fa:	462b      	mov	r3, r5
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bdb0      	pop	{r4, r5, r7, pc}

08005304 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8005310:	68b8      	ldr	r0, [r7, #8]
 8005312:	f011 fa28 	bl	8016766 <_ZdlPv>
      }
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005328:	68b8      	ldr	r0, [r7, #8]
 800532a:	f011 fa1c 	bl	8016766 <_ZdlPv>
      }
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005340:	68b8      	ldr	r0, [r7, #8]
 8005342:	f011 fa10 	bl	8016766 <_ZdlPv>
      }
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005358:	68b8      	ldr	r0, [r7, #8]
 800535a:	f011 fa04 	bl	8016766 <_ZdlPv>
      }
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005370:	68b8      	ldr	r0, [r7, #8]
 8005372:	f011 f9f8 	bl	8016766 <_ZdlPv>
      }
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005388:	68b8      	ldr	r0, [r7, #8]
 800538a:	f011 f9ec 	bl	8016766 <_ZdlPv>
      }
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>:
      _M_valptr()
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3310      	adds	r3, #16
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fa4f 	bl	800585a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>
 80053bc:	4603      	mov	r3, r0
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE7destroyIS4_EEvRS6_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa4d 	bl	8005872 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE7destroyIS5_EEvPT_>
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fa49 	bl	8005888 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE10deallocateEPS6_j>
 80053f6:	bf00      	nop
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fa4a 	bl	80058a0 <_ZNKSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 800540c:	4602      	mov	r2, r0
 800540e:	f107 030c 	add.w	r3, r7, #12
 8005412:	4611      	mov	r1, r2
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe fc63 	bl	8003ce0 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 800541a:	4603      	mov	r3, r0
      }
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	f107 030c 	add.w	r3, r7, #12
 800544a:	4611      	mov	r1, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f7fe fb15 	bl	8003a7c <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc10token_typeEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	bf0c      	ite	eq
 8005472:	2301      	moveq	r3, #1
 8005474:	2300      	movne	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005490:	68b8      	ldr	r0, [r7, #8]
 8005492:	f000 fa13 	bl	80058bc <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc10token_typeEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8005496:	4603      	mov	r3, r0
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff ffc0 	bl	8005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80054a4:	4603      	mov	r3, r0
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fa06 	bl	80058d2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>
 80054c6:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80054c8:	6838      	ldr	r0, [r7, #0]
 80054ca:	f7fe fc15 	bl	8003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 80054ce:	4603      	mov	r3, r0
 80054d0:	461a      	mov	r2, r3
 80054d2:	68f9      	ldr	r1, [r7, #12]
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa0d 	bl	80058f4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 80054da:	68fb      	ldr	r3, [r7, #12]
	}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>:
      _M_valptr()
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3310      	adds	r3, #16
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fa14 	bl	8005934 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>
 800550c:	4603      	mov	r3, r0
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE7destroyISA_EEvRSC_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8005516:	b580      	push	{r7, lr}
 8005518:	b082      	sub	sp, #8
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fa12 	bl	800594c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE7destroyISB_EEvPT_>
 8005528:	bf00      	nop
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 fa0f 	bl	8005964 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE10deallocateEPSC_j>
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>:
      _S_key(_Const_Link_type __x)
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fa10 	bl	800597c <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 800555c:	4602      	mov	r2, r0
 800555e:	f107 030c 	add.w	r3, r7, #12
 8005562:	4611      	mov	r1, r2
 8005564:	4618      	mov	r0, r3
 8005566:	f7fe fdb1 	bl	80040cc <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 800556a:	4603      	mov	r3, r0
      }
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f011 fbb1 	bl	8016ce8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8005586:	4603      	mov	r3, r0
 8005588:	0fdb      	lsrs	r3, r3, #31
 800558a:	b2db      	uxtb	r3, r3
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	f107 030c 	add.w	r3, r7, #12
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe fc5e 	bl	8003e68 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	bf0c      	ite	eq
 80055cc:	2301      	moveq	r3, #1
 80055ce:	2300      	movne	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	4618      	mov	r0, r3
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80055ea:	68b8      	ldr	r0, [r7, #8]
 80055ec:	f000 f9d4 	bl	8005998 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEOT_RNSt16remove_referenceISE_E4typeE>
 80055f0:	4603      	mov	r3, r0
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff ff13 	bl	8005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80055fe:	4603      	mov	r3, r0
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f9c7 	bl	80059ae <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>
 8005620:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8005622:	6838      	ldr	r0, [r7, #0]
 8005624:	f7fe fd5e 	bl	80040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	68f9      	ldr	r1, [r7, #12]
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f9ce 	bl	80059d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>
	  return __tmp;
 8005634:	68fb      	ldr	r3, [r7, #12]
	}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>:
      _M_valptr()
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3310      	adds	r3, #16
 8005660:	4618      	mov	r0, r3
 8005662:	f000 f9d5 	bl	8005a10 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>
 8005666:	4603      	mov	r3, r0
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f9d3 	bl	8005a28 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE7destroyIS5_EEvPT_>
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	68b9      	ldr	r1, [r7, #8]
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 f9cf 	bl	8005a3e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE10deallocateEPS6_j>
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f9d0 	bl	8005a56 <_ZNKSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 80056b6:	4602      	mov	r2, r0
 80056b8:	f107 030c 	add.w	r3, r7, #12
 80056bc:	4611      	mov	r1, r2
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe feee 	bl	80044a0 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 80056c4:	4603      	mov	r3, r0
      }
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	f107 030c 	add.w	r3, r7, #12
 80056de:	4611      	mov	r1, r2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fe fdab 	bl	800423c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	bf0c      	ite	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	2300      	movne	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005724:	68b8      	ldr	r0, [r7, #8]
 8005726:	f000 f9a4 	bl	8005a72 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800572a:	4603      	mov	r3, r0
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff fe76 	bl	8005424 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8005738:	4603      	mov	r3, r0
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	605a      	str	r2, [r3, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f997 	bl	8005a88 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>
 800575a:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800575c:	6838      	ldr	r0, [r7, #0]
 800575e:	f7fe feab 	bl	80044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005762:	4603      	mov	r3, r0
 8005764:	461a      	mov	r2, r3
 8005766:	68f9      	ldr	r1, [r7, #12]
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f99e 	bl	8005aaa <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 800576e:	68fb      	ldr	r3, [r7, #12]
	}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRbEENS0_16__variant_cookieESE_>:
	__do_visit([](auto&& __this_mem) mutable
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 8005782:	6838      	ldr	r0, [r7, #0]
 8005784:	f000 f9b1 	bl	8005aea <_ZSt11__addressofIbEPT_RS0_>
 8005788:	4603      	mov	r3, r0
 800578a:	4618      	mov	r0, r3
 800578c:	f000 f9b8 	bl	8005b00 <_ZSt8_DestroyIbEvPT_>
	    return {};
 8005790:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 8005792:	4618      	mov	r0, r3
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	bd90      	pop	{r4, r7, pc}

0800579a <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRiEENS0_16__variant_cookieESE_>:
 800579a:	b590      	push	{r4, r7, lr}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80057a4:	6838      	ldr	r0, [r7, #0]
 80057a6:	f000 f9b5 	bl	8005b14 <_ZSt11__addressofIiEPT_RS0_>
 80057aa:	4603      	mov	r3, r0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 f9bc 	bl	8005b2a <_ZSt8_DestroyIiEvPT_>
	    return {};
 80057b2:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd90      	pop	{r4, r7, pc}

080057bc <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRfEENS0_16__variant_cookieESE_>:
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80057c6:	6838      	ldr	r0, [r7, #0]
 80057c8:	f000 f9b9 	bl	8005b3e <_ZSt11__addressofIfEPT_RS0_>
 80057cc:	4603      	mov	r3, r0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 f9c0 	bl	8005b54 <_ZSt8_DestroyIfEvPT_>
	    return {};
 80057d4:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd90      	pop	{r4, r7, pc}

080057de <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv>:
      _M_addr() noexcept
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRS7_EENS0_16__variant_cookieESE_>:
 80057f4:	b590      	push	{r4, r7, lr}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80057fe:	6838      	ldr	r0, [r7, #0]
 8005800:	f000 f9b2 	bl	8005b68 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8005804:	4603      	mov	r3, r0
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f9b9 	bl	8005b7e <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	    return {};
 800580c:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 800580e:	4618      	mov	r0, r3
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	bd90      	pop	{r4, r7, pc}

08005816 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRS9_EENS0_16__variant_cookieESE_>:
 8005816:	b590      	push	{r4, r7, lr}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 8005820:	6838      	ldr	r0, [r7, #0]
 8005822:	f000 f9b7 	bl	8005b94 <_ZSt11__addressofIP8VariableEPT_RS2_>
 8005826:	4603      	mov	r3, r0
 8005828:	4618      	mov	r0, r3
 800582a:	f000 f9be 	bl	8005baa <_ZSt8_DestroyIP8VariableEvPT_>
	    return {};
 800582e:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	bd90      	pop	{r4, r7, pc}

08005838 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRSB_EENS0_16__variant_cookieESE_>:
 8005838:	b590      	push	{r4, r7, lr}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 8005842:	6838      	ldr	r0, [r7, #0]
 8005844:	f000 f9bb 	bl	8005bbe <_ZSt11__addressofIP13Function_callEPT_RS2_>
 8005848:	4603      	mov	r3, r0
 800584a:	4618      	mov	r0, r3
 800584c:	f000 f9c2 	bl	8005bd4 <_ZSt8_DestroyIP13Function_callEvPT_>
	    return {};
 8005850:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	bd90      	pop	{r4, r7, pc}

0800585a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>:
      _M_ptr() noexcept
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f9c0 	bl	8005be8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>
 8005868:	4603      	mov	r3, r0
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE7destroyIS5_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005894:	68b8      	ldr	r0, [r7, #8]
 8005896:	f010 ff66 	bl	8016766 <_ZdlPv>
      }
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <_ZNKSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>:
      _M_valptr() const
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3310      	adds	r3, #16
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 f9a6 	bl	8005bfe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>
 80058b2:	4603      	mov	r3, r0
 80058b4:	4618      	mov	r0, r3
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc10token_typeEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff fd5a 	bl	8005394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2101      	movs	r1, #1
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 f996 	bl	8005c16 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE8allocateERS6_j>
 80058ea:	4603      	mov	r3, r0
 80058ec:	4618      	mov	r0, r3
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80058f4:	b5b0      	push	{r4, r5, r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4619      	mov	r1, r3
 8005904:	2014      	movs	r0, #20
 8005906:	f7fb fb69 	bl	8000fdc <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7ff fd42 	bl	8005394 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8005910:	4604      	mov	r4, r0
 8005912:	68b8      	ldr	r0, [r7, #8]
 8005914:	f7ff fd49 	bl	80053aa <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 8005918:	4605      	mov	r5, r0
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fe f9ec 	bl	8003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	4629      	mov	r1, r5
 8005926:	4620      	mov	r0, r4
 8005928:	f000 f984 	bl	8005c34 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bdb0      	pop	{r4, r5, r7, pc}

08005934 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>:
      _M_ptr() noexcept
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f98c 	bl	8005c5a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>
 8005942:	4603      	mov	r3, r0
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE7destroyISB_EEvPT_>:
	destroy(_Up* __p)
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005956:	6838      	ldr	r0, [r7, #0]
 8005958:	f7fb fb99 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE10deallocateEPSC_j>:
      deallocate(pointer __p, size_type)
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005970:	68b8      	ldr	r0, [r7, #8]
 8005972:	f010 fef8 	bl	8016766 <_ZdlPv>
      }
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>:
      _M_valptr() const
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3310      	adds	r3, #16
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f971 	bl	8005c70 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>
 800598e:	4603      	mov	r3, r0
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>:
      _M_get_node()
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff fd94 	bl	80054e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 80059bc:	4603      	mov	r3, r0
 80059be:	2101      	movs	r1, #1
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 f961 	bl	8005c88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE8allocateERSC_j>
 80059c6:	4603      	mov	r3, r0
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80059d0:	b5b0      	push	{r4, r5, r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4619      	mov	r1, r3
 80059e0:	202c      	movs	r0, #44	; 0x2c
 80059e2:	f7fb fafb 	bl	8000fdc <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff fd7c 	bl	80054e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 80059ec:	4604      	mov	r4, r0
 80059ee:	68b8      	ldr	r0, [r7, #8]
 80059f0:	f7ff fd83 	bl	80054fa <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 80059f4:	4605      	mov	r5, r0
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fe fb74 	bl	80040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	4629      	mov	r1, r5
 8005a02:	4620      	mov	r0, r4
 8005a04:	f000 f94f 	bl	8005ca6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>
	}
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bdb0      	pop	{r4, r5, r7, pc}

08005a10 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>:
      _M_ptr() noexcept
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f957 	bl	8005ccc <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE7destroyIS5_EEvPT_>:
	destroy(_Up* __p)
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005a4a:	68b8      	ldr	r0, [r7, #8]
 8005a4c:	f010 fe8b 	bl	8016766 <_ZdlPv>
      }
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <_ZNKSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>:
      _M_valptr() const
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3310      	adds	r3, #16
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 f93d 	bl	8005ce2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff fdd4 	bl	800563e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2101      	movs	r1, #1
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f92d 	bl	8005cfa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE8allocateERS6_j>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8005aaa:	b5b0      	push	{r4, r5, r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	2014      	movs	r0, #20
 8005abc:	f7fb fa8e 	bl	8000fdc <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff fdbc 	bl	800563e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	68b8      	ldr	r0, [r7, #8]
 8005aca:	f7ff fdc3 	bl	8005654 <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 8005ace:	4605      	mov	r5, r0
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7fe fcf1 	bl	80044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4629      	mov	r1, r5
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 f91b 	bl	8005d18 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 8005ae2:	bf00      	nop
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bdb0      	pop	{r4, r5, r7, pc}

08005aea <_ZSt11__addressofIbEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <_ZSt8_DestroyIbEvPT_>:
    _Destroy(_Tp* __pointer)
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <_ZSt11__addressofIiEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <_ZSt8_DestroyIiEvPT_>:
    _Destroy(_Tp* __pointer)
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f010 ffc9 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005b8c:	bf00      	nop
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <_ZSt11__addressofIP8VariableEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <_ZSt8_DestroyIP8VariableEvPT_>:
    _Destroy(_Tp* __pointer)
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <_ZSt11__addressofIP13Function_callEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <_ZSt8_DestroyIP13Function_callEvPT_>:
    _Destroy(_Tp* __pointer)
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>:
      _M_addr() noexcept
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f899 	bl	8005d3e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005c20:	2200      	movs	r2, #0
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f895 	bl	8005d54 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7fe f859 	bl	8003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005c46:	4603      	mov	r3, r0
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f8a3 	bl	8005d98 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>:
      _M_addr() noexcept
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4618      	mov	r0, r3
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f8a5 	bl	8005dc8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005c92:	2200      	movs	r2, #0
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f8a1 	bl	8005dde <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fe fa16 	bl	80040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f8c2 	bl	8005e48 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE9constructISB_JRKSB_EEEvPT_DpOT0_>
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>:
      _M_addr() noexcept
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f8c4 	bl	8005e78 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b082      	sub	sp, #8
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005d04:	2200      	movs	r2, #0
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f8c0 	bl	8005e8e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7fe fbc7 	bl	80044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	68b9      	ldr	r1, [r7, #8]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f8ce 	bl	8005ed2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>
 8005d36:	bf00      	nop
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>:
      _M_addr() const noexcept
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f8cf 	bl	8005f04 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv>
 8005d66:	4602      	mov	r2, r0
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	bf8c      	ite	hi
 8005d6e:	2301      	movhi	r3, #1
 8005d70:	2300      	movls	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005d78:	f010 fdbe 	bl	80168f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f010 fcf1 	bl	801676e <_Znwj>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	bf00      	nop
      }
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005d98:	b590      	push	{r4, r7, lr}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7fd ffa7 	bl	8003cf8 <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005daa:	4604      	mov	r4, r0
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4619      	mov	r1, r3
 8005db0:	2002      	movs	r0, #2
 8005db2:	f7fb f913 	bl	8000fdc <_ZnwjPv>
 8005db6:	4603      	mov	r3, r0
 8005db8:	461a      	mov	r2, r3
 8005dba:	4623      	mov	r3, r4
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	8013      	strh	r3, [r2, #0]
 8005dc0:	bf00      	nop
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd90      	pop	{r4, r7, pc}

08005dc8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>:
      _M_addr() const noexcept
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 f898 	bl	8005f20 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv>
 8005df0:	4602      	mov	r2, r0
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4293      	cmp	r3, r2
 8005df6:	bf8c      	ite	hi
 8005df8:	2301      	movhi	r3, #1
 8005dfa:	2300      	movls	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005e02:	f010 fd79 	bl	80168f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	222c      	movs	r2, #44	; 0x2c
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f010 fcad 	bl	801676e <_Znwj>
 8005e14:	4603      	mov	r3, r0
 8005e16:	bf00      	nop
      }
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1ERKS8_>:
      constexpr pair(const pair&) = default;
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	4611      	mov	r1, r2
 8005e30:	4618      	mov	r0, r3
 8005e32:	f010 ffa1 	bl	8016d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	7e1a      	ldrb	r2, [r3, #24]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	761a      	strb	r2, [r3, #24]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE9constructISB_JRKSB_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005e48:	b590      	push	{r4, r7, lr}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7fe f945 	bl	80040e4 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	201c      	movs	r0, #28
 8005e62:	f7fb f8bb 	bl	8000fdc <_ZnwjPv>
 8005e66:	4603      	mov	r3, r0
 8005e68:	4621      	mov	r1, r4
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff ffd8 	bl	8005e20 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1ERKS8_>
 8005e70:	bf00      	nop
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd90      	pop	{r4, r7, pc}

08005e78 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>:
      _M_addr() const noexcept
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 f84e 	bl	8005f3c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	bf8c      	ite	hi
 8005ea8:	2301      	movhi	r3, #1
 8005eaa:	2300      	movls	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005eb2:	f010 fd21 	bl	80168f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f010 fc54 	bl	801676e <_Znwj>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	bf00      	nop
      }
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005ed2:	b590      	push	{r4, r7, lr}
 8005ed4:	b085      	sub	sp, #20
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7fe faea 	bl	80044b8 <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	2003      	movs	r0, #3
 8005eec:	f7fb f876 	bl	8000fdc <_ZnwjPv>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	8811      	ldrh	r1, [r2, #0]
 8005ef6:	7892      	ldrb	r2, [r2, #2]
 8005ef8:	8019      	strh	r1, [r3, #0]
 8005efa:	709a      	strb	r2, [r3, #2]
 8005efc:	bf00      	nop
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd90      	pop	{r4, r7, pc}

08005f04 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005f0c:	4b03      	ldr	r3, [pc, #12]	; (8005f1c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv+0x18>)
      }
 8005f0e:	4618      	mov	r0, r3
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	06666666 	.word	0x06666666

08005f20 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005f28:	4b03      	ldr	r3, [pc, #12]	; (8005f38 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv+0x18>)
      }
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	02e8ba2e 	.word	0x02e8ba2e

08005f3c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005f44:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv+0x18>)
      }
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	06666666 	.word	0x06666666

08005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fc f93d 	bl	80021e2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>:
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b082      	sub	sp, #8
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fc f880 	bl	8002082 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>:
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fb ffc6 	bl	8001f28 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <_Z41__static_initialization_and_destruction_0ii>:
 8005fa8:	b590      	push	{r4, r7, lr}
 8005faa:	b0e7      	sub	sp, #412	; 0x19c
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	1d3b      	adds	r3, r7, #4
 8005fb0:	6018      	str	r0, [r3, #0]
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	6019      	str	r1, [r3, #0]
 8005fb6:	1d3b      	adds	r3, r7, #4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	f040 819d 	bne.w	80062fa <_Z41__static_initialization_and_destruction_0ii+0x352>
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	f040 8196 	bne.w	80062fa <_Z41__static_initialization_and_destruction_0ii+0x352>
	{'^', TOKEN_POWER},
	{'%', TOKEN_MODULO},
	{'(', TOKEN_LEFT_BRACKET},
	{')', TOKEN_RIGHT_BRACKET},
	{'\0', TOKEN_END_OF_FILE},
};
 8005fce:	f107 0314 	add.w	r3, r7, #20
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	2322      	movs	r3, #34	; 0x22
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	2100      	movs	r1, #0
 8005fda:	f010 ff8f 	bl	8016efc <memset>
 8005fde:	f107 0314 	add.w	r3, r7, #20
 8005fe2:	223a      	movs	r2, #58	; 0x3a
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	f107 0314 	add.w	r3, r7, #20
 8005fea:	2201      	movs	r2, #1
 8005fec:	705a      	strb	r2, [r3, #1]
 8005fee:	f107 0314 	add.w	r3, r7, #20
 8005ff2:	220a      	movs	r2, #10
 8005ff4:	709a      	strb	r2, [r3, #2]
 8005ff6:	f107 0314 	add.w	r3, r7, #20
 8005ffa:	220a      	movs	r2, #10
 8005ffc:	70da      	strb	r2, [r3, #3]
 8005ffe:	f107 0314 	add.w	r3, r7, #20
 8006002:	222c      	movs	r2, #44	; 0x2c
 8006004:	711a      	strb	r2, [r3, #4]
 8006006:	f107 0314 	add.w	r3, r7, #20
 800600a:	220c      	movs	r2, #12
 800600c:	715a      	strb	r2, [r3, #5]
 800600e:	f107 0314 	add.w	r3, r7, #20
 8006012:	222e      	movs	r2, #46	; 0x2e
 8006014:	719a      	strb	r2, [r3, #6]
 8006016:	f107 0314 	add.w	r3, r7, #20
 800601a:	220b      	movs	r2, #11
 800601c:	71da      	strb	r2, [r3, #7]
 800601e:	f107 0314 	add.w	r3, r7, #20
 8006022:	225b      	movs	r2, #91	; 0x5b
 8006024:	721a      	strb	r2, [r3, #8]
 8006026:	f107 0314 	add.w	r3, r7, #20
 800602a:	220d      	movs	r2, #13
 800602c:	725a      	strb	r2, [r3, #9]
 800602e:	f107 0314 	add.w	r3, r7, #20
 8006032:	225d      	movs	r2, #93	; 0x5d
 8006034:	729a      	strb	r2, [r3, #10]
 8006036:	f107 0314 	add.w	r3, r7, #20
 800603a:	220e      	movs	r2, #14
 800603c:	72da      	strb	r2, [r3, #11]
 800603e:	f107 0314 	add.w	r3, r7, #20
 8006042:	227c      	movs	r2, #124	; 0x7c
 8006044:	731a      	strb	r2, [r3, #12]
 8006046:	f107 0314 	add.w	r3, r7, #20
 800604a:	2215      	movs	r2, #21
 800604c:	735a      	strb	r2, [r3, #13]
 800604e:	f107 0314 	add.w	r3, r7, #20
 8006052:	2226      	movs	r2, #38	; 0x26
 8006054:	739a      	strb	r2, [r3, #14]
 8006056:	f107 0314 	add.w	r3, r7, #20
 800605a:	2216      	movs	r2, #22
 800605c:	73da      	strb	r2, [r3, #15]
 800605e:	f107 0314 	add.w	r3, r7, #20
 8006062:	222b      	movs	r2, #43	; 0x2b
 8006064:	741a      	strb	r2, [r3, #16]
 8006066:	f107 0314 	add.w	r3, r7, #20
 800606a:	221f      	movs	r2, #31
 800606c:	745a      	strb	r2, [r3, #17]
 800606e:	f107 0314 	add.w	r3, r7, #20
 8006072:	222d      	movs	r2, #45	; 0x2d
 8006074:	749a      	strb	r2, [r3, #18]
 8006076:	f107 0314 	add.w	r3, r7, #20
 800607a:	2220      	movs	r2, #32
 800607c:	74da      	strb	r2, [r3, #19]
 800607e:	f107 0314 	add.w	r3, r7, #20
 8006082:	222a      	movs	r2, #42	; 0x2a
 8006084:	751a      	strb	r2, [r3, #20]
 8006086:	f107 0314 	add.w	r3, r7, #20
 800608a:	2221      	movs	r2, #33	; 0x21
 800608c:	755a      	strb	r2, [r3, #21]
 800608e:	f107 0314 	add.w	r3, r7, #20
 8006092:	222f      	movs	r2, #47	; 0x2f
 8006094:	759a      	strb	r2, [r3, #22]
 8006096:	f107 0314 	add.w	r3, r7, #20
 800609a:	2222      	movs	r2, #34	; 0x22
 800609c:	75da      	strb	r2, [r3, #23]
 800609e:	f107 0314 	add.w	r3, r7, #20
 80060a2:	225e      	movs	r2, #94	; 0x5e
 80060a4:	761a      	strb	r2, [r3, #24]
 80060a6:	f107 0314 	add.w	r3, r7, #20
 80060aa:	2223      	movs	r2, #35	; 0x23
 80060ac:	765a      	strb	r2, [r3, #25]
 80060ae:	f107 0314 	add.w	r3, r7, #20
 80060b2:	2225      	movs	r2, #37	; 0x25
 80060b4:	769a      	strb	r2, [r3, #26]
 80060b6:	f107 0314 	add.w	r3, r7, #20
 80060ba:	2224      	movs	r2, #36	; 0x24
 80060bc:	76da      	strb	r2, [r3, #27]
 80060be:	f107 0314 	add.w	r3, r7, #20
 80060c2:	2228      	movs	r2, #40	; 0x28
 80060c4:	771a      	strb	r2, [r3, #28]
 80060c6:	f107 0314 	add.w	r3, r7, #20
 80060ca:	2226      	movs	r2, #38	; 0x26
 80060cc:	775a      	strb	r2, [r3, #29]
 80060ce:	f107 0314 	add.w	r3, r7, #20
 80060d2:	2229      	movs	r2, #41	; 0x29
 80060d4:	779a      	strb	r2, [r3, #30]
 80060d6:	f107 0314 	add.w	r3, r7, #20
 80060da:	2227      	movs	r2, #39	; 0x27
 80060dc:	77da      	strb	r2, [r3, #31]
 80060de:	f107 0314 	add.w	r3, r7, #20
 80060e2:	2225      	movs	r2, #37	; 0x25
 80060e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80060e8:	f107 030c 	add.w	r3, r7, #12
 80060ec:	f107 0214 	add.w	r2, r7, #20
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	f107 030c 	add.w	r3, r7, #12
 80060f6:	2211      	movs	r2, #17
 80060f8:	605a      	str	r2, [r3, #4]
 80060fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fb faf5 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8006104:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006108:	f107 020c 	add.w	r2, r7, #12
 800610c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	460b      	mov	r3, r1
 8006114:	ca06      	ldmia	r2, {r1, r2}
 8006116:	4885      	ldr	r0, [pc, #532]	; (800632c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006118:	f7fb fb01 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800611c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006120:	4618      	mov	r0, r3
 8006122:	f7fb faf0 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>

static const std::map<std::string, token_type> token_strings
{
	{"true", TOKEN_TRUE},
 8006126:	2305      	movs	r3, #5
 8006128:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
	{"if", TOKEN_IF},
	{"elseif", TOKEN_ELSEIF},
	{"else", TOKEN_ELSE},
	{"while", TOKEN_WHILE},
	{"end", TOKEN_END},
};
 800612c:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8006130:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006134:	497e      	ldr	r1, [pc, #504]	; (8006330 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8006136:	4618      	mov	r0, r3
 8006138:	f7fa ffb6 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 800613c:	2306      	movs	r3, #6
 800613e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8006142:	f207 1263 	addw	r2, r7, #355	; 0x163
 8006146:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800614a:	331c      	adds	r3, #28
 800614c:	4979      	ldr	r1, [pc, #484]	; (8006334 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800614e:	4618      	mov	r0, r3
 8006150:	f7fa ffd2 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8006154:	2307      	movs	r3, #7
 8006156:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 800615a:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800615e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006162:	3338      	adds	r3, #56	; 0x38
 8006164:	4974      	ldr	r1, [pc, #464]	; (8006338 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8006166:	4618      	mov	r0, r3
 8006168:	f7fa ffc6 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 800616c:	2308      	movs	r3, #8
 800616e:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8006172:	f207 1265 	addw	r2, r7, #357	; 0x165
 8006176:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800617a:	3354      	adds	r3, #84	; 0x54
 800617c:	496f      	ldr	r1, [pc, #444]	; (800633c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800617e:	4618      	mov	r0, r3
 8006180:	f7fa ff92 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8006184:	2309      	movs	r3, #9
 8006186:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800618a:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 800618e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006192:	3370      	adds	r3, #112	; 0x70
 8006194:	496a      	ldr	r1, [pc, #424]	; (8006340 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8006196:	4618      	mov	r0, r3
 8006198:	f7fa ffd6 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 800619c:	2310      	movs	r3, #16
 800619e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 80061a2:	f207 1267 	addw	r2, r7, #359	; 0x167
 80061a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061aa:	338c      	adds	r3, #140	; 0x8c
 80061ac:	4965      	ldr	r1, [pc, #404]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fa fff2 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 80061b4:	2311      	movs	r3, #17
 80061b6:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 80061ba:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80061be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061c2:	33a8      	adds	r3, #168	; 0xa8
 80061c4:	4960      	ldr	r1, [pc, #384]	; (8006348 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fa ffbe 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 80061cc:	2312      	movs	r3, #18
 80061ce:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 80061d2:	f207 1269 	addw	r2, r7, #361	; 0x169
 80061d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061da:	33c4      	adds	r3, #196	; 0xc4
 80061dc:	495b      	ldr	r1, [pc, #364]	; (800634c <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fa ff62 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 80061e4:	2313      	movs	r3, #19
 80061e6:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 80061ea:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 80061ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061f2:	33e0      	adds	r3, #224	; 0xe0
 80061f4:	4956      	ldr	r1, [pc, #344]	; (8006350 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fa ff7e 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 80061fc:	2314      	movs	r3, #20
 80061fe:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8006202:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8006206:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800620a:	33fc      	adds	r3, #252	; 0xfc
 800620c:	4951      	ldr	r1, [pc, #324]	; (8006354 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800620e:	4618      	mov	r0, r3
 8006210:	f7fa ffea 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8006214:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006218:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006222:	220a      	movs	r2, #10
 8006224:	605a      	str	r2, [r3, #4]
 8006226:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800622a:	4618      	mov	r0, r3
 800622c:	f7fb fb04 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8006230:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8006234:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006238:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	460b      	mov	r3, r1
 8006240:	ca06      	ldmia	r2, {r1, r2}
 8006242:	4845      	ldr	r0, [pc, #276]	; (8006358 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8006244:	f7fb fb10 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8006248:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800624c:	4618      	mov	r0, r3
 800624e:	f7fb faff 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8006252:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8006256:	f504 748c 	add.w	r4, r4, #280	; 0x118
 800625a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800625e:	429c      	cmp	r4, r3
 8006260:	d004      	beq.n	800626c <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8006262:	3c1c      	subs	r4, #28
 8006264:	4620      	mov	r0, r4
 8006266:	f7fa ff12 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 800626a:	e7f6      	b.n	800625a <_Z41__static_initialization_and_destruction_0ii+0x2b2>
{
	{'<', {TOKEN_SMALLER_THAN, TOKEN_SMALLER_OR_EQUAL}},
	{'>', {TOKEN_GREATER_THAN, TOKEN_GREATER_OR_EQUAL}},
	{'=', {TOKEN_ASSIGN, TOKEN_EQUALS}},
	{'!', {TOKEN_EXCLAMATION, TOKEN_NOT_EQUAL}},
};
 800626c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	605a      	str	r2, [r3, #4]
 8006276:	609a      	str	r2, [r3, #8]
 8006278:	233c      	movs	r3, #60	; 0x3c
 800627a:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 800627e:	231b      	movs	r3, #27
 8006280:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8006284:	231c      	movs	r3, #28
 8006286:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800628a:	233e      	movs	r3, #62	; 0x3e
 800628c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8006290:	2319      	movs	r3, #25
 8006292:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8006296:	231a      	movs	r3, #26
 8006298:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 800629c:	233d      	movs	r3, #61	; 0x3d
 800629e:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 80062a2:	2318      	movs	r3, #24
 80062a4:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 80062a8:	231d      	movs	r3, #29
 80062aa:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80062ae:	2321      	movs	r3, #33	; 0x21
 80062b0:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80062b4:	2317      	movs	r3, #23
 80062b6:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80062ba:	231e      	movs	r3, #30
 80062bc:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80062c0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80062c4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80062c8:	2304      	movs	r3, #4
 80062ca:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80062ce:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fb faf8 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 80062d8:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80062dc:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	4613      	mov	r3, r2
 80062e4:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 80062e8:	ca06      	ldmia	r2, {r1, r2}
 80062ea:	481c      	ldr	r0, [pc, #112]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80062ec:	f7fb fb04 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80062f0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fb faf3 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 80062fa:	1d3b      	adds	r3, r7, #4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10e      	bne.n	8006320 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8006302:	463b      	mov	r3, r7
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800630a:	4293      	cmp	r3, r2
 800630c:	d108      	bne.n	8006320 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800630e:	4813      	ldr	r0, [pc, #76]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8006310:	f7ff fe22 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8006314:	4810      	ldr	r0, [pc, #64]	; (8006358 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8006316:	f7ff fe2c 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800631a:	4804      	ldr	r0, [pc, #16]	; (800632c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800631c:	f7ff fe36 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8006320:	bf00      	nop
 8006322:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006326:	46bd      	mov	sp, r7
 8006328:	bd90      	pop	{r4, r7, pc}
 800632a:	bf00      	nop
 800632c:	200001fc 	.word	0x200001fc
 8006330:	08019e60 	.word	0x08019e60
 8006334:	08019e68 	.word	0x08019e68
 8006338:	08019e70 	.word	0x08019e70
 800633c:	08019e78 	.word	0x08019e78
 8006340:	08019e80 	.word	0x08019e80
 8006344:	08019e88 	.word	0x08019e88
 8006348:	08019e8c 	.word	0x08019e8c
 800634c:	08019e94 	.word	0x08019e94
 8006350:	08019e9c 	.word	0x08019e9c
 8006354:	08019ea4 	.word	0x08019ea4
 8006358:	20000214 	.word	0x20000214
 800635c:	2000022c 	.word	0x2000022c

08006360 <_GLOBAL__sub_I__ZN17Primal_expressionD2Ev>:
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
 8006364:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006368:	2001      	movs	r0, #1
 800636a:	f7ff fe1d 	bl	8005fa8 <_Z41__static_initialization_and_destruction_0ii>
 800636e:	bd80      	pop	{r7, pc}

08006370 <_GLOBAL__sub_D__ZN17Primal_expressionD2Ev>:
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
 8006374:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006378:	2000      	movs	r0, #0
 800637a:	f7ff fe15 	bl	8005fa8 <_Z41__static_initialization_and_destruction_0ii>
 800637e:	bd80      	pop	{r7, pc}

08006380 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af02      	add	r7, sp, #8
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f010 fca9 	bl	8016ce4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8006392:	4602      	mov	r2, r0
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4904      	ldr	r1, [pc, #16]	; (80063ac <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 800639c:	4804      	ldr	r0, [pc, #16]	; (80063b0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 800639e:	f000 fdb7 	bl	8006f10 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 80063a2:	4603      	mov	r3, r0
					__idx, __base); }
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	08019ea8 	.word	0x08019ea8
 80063b0:	08017f11 	.word	0x08017f11

080063b4 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>:
			     __idx, __base); }

  // NB: strtof vs strtod.
  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f010 fc90 	bl	8016ce4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80063c4:	4602      	mov	r2, r0
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	4905      	ldr	r1, [pc, #20]	; (80063e0 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x2c>)
 80063ca:	4806      	ldr	r0, [pc, #24]	; (80063e4 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x30>)
 80063cc:	f000 fe20 	bl	8007010 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 80063d0:	eef0 7a40 	vmov.f32	s15, s0
 80063d4:	eeb0 0a67 	vmov.f32	s0, s15
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	08019eb0 	.word	0x08019eb0
 80063e4:	08017d55 	.word	0x08017d55

080063e8 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fead 	bl	8007152 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff ffeb 	bl	80063e8 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff ffeb 	bl	8006402 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Move_assign_base : _Copy_assign_alias<_Types...>
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4618      	mov	r0, r3
 8006442:	f7ff ffeb 	bl	800641c <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Variant_base : _Move_assign_alias<_Types...>
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff ffeb 	bl	8006436 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>:
      variant() = default;
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fe5f 	bl	8007138 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
      ~variant() = default;
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff ffde 	bl	8006450 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <_ZN5TokenC1Ev>:
#include <string>
#include "token_types.h"

typedef std::variant<std::string, int, float, bool> token_value;

class Token
 800649e:	b580      	push	{r7, lr}
 80064a0:	b082      	sub	sp, #8
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3304      	adds	r3, #4
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff ffdd 	bl	800646a <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <_ZN5LexerC1EP6Source>:
#include <Lexer.h>

Lexer::Lexer(Source* Code)
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff ffe8 	bl	800649e <_ZN5TokenC1Ev>
{
	this->Code = Code;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	62da      	str	r2, [r3, #44]	; 0x2c
	char_buffer = ' ';
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	701a      	strb	r2, [r3, #0]
}
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <_ZN5Lexer17match_single_charEv>:

bool Lexer::match_single_char()
{
 80064e4:	b590      	push	{r4, r7, lr}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
	auto result = token_chars.find(char_buffer);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4619      	mov	r1, r3
 80064f0:	4818      	ldr	r0, [pc, #96]	; (8006554 <_ZN5Lexer17match_single_charEv+0x70>)
 80064f2:	f000 fe3a 	bl	800716a <_ZNKSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEE4findERS4_>
 80064f6:	4603      	mov	r3, r0
 80064f8:	60bb      	str	r3, [r7, #8]
	if (result != token_chars.end())
 80064fa:	4816      	ldr	r0, [pc, #88]	; (8006554 <_ZN5Lexer17match_single_charEv+0x70>)
 80064fc:	f000 fe44 	bl	8007188 <_ZNKSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEE3endEv>
 8006500:	4603      	mov	r3, r0
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	f107 020c 	add.w	r2, r7, #12
 8006508:	f107 0308 	add.w	r3, r7, #8
 800650c:	4611      	mov	r1, r2
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fe47 	bl	80071a2 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEES6_>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d017      	beq.n	800654a <_ZN5Lexer17match_single_charEv+0x66>
	{
		Product.set_type(result->second);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	1d1c      	adds	r4, r3, #4
 800651e:	f107 0308 	add.w	r3, r7, #8
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fe51 	bl	80071ca <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEptEv>
 8006528:	4603      	mov	r3, r0
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	4619      	mov	r1, r3
 800652e:	4620      	mov	r0, r4
 8006530:	f008 fc54 	bl	800eddc <_ZN5Token8set_typeE10token_type>
		char_buffer = Code->receive_code_char();
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	4618      	mov	r0, r3
 800653a:	f007 fe2d 	bl	800e198 <_ZN6Source17receive_code_charEv>
 800653e:	4603      	mov	r3, r0
 8006540:	461a      	mov	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	701a      	strb	r2, [r3, #0]
		return true;
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <_ZN5Lexer17match_single_charEv+0x68>
	}
	return false;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	bd90      	pop	{r4, r7, pc}
 8006554:	20000244 	.word	0x20000244

08006558 <_ZN5Lexer17match_double_charEv>:

bool Lexer::match_double_char()
{
 8006558:	b590      	push	{r4, r7, lr}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
	auto result = token_double_chars.find(char_buffer);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4619      	mov	r1, r3
 8006564:	4826      	ldr	r0, [pc, #152]	; (8006600 <_ZN5Lexer17match_double_charEv+0xa8>)
 8006566:	f000 fe3e 	bl	80071e6 <_ZNKSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEE4findERS4_>
 800656a:	4603      	mov	r3, r0
 800656c:	60bb      	str	r3, [r7, #8]
	if (result != token_double_chars.end())
 800656e:	4824      	ldr	r0, [pc, #144]	; (8006600 <_ZN5Lexer17match_double_charEv+0xa8>)
 8006570:	f000 fe48 	bl	8007204 <_ZNKSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEE3endEv>
 8006574:	4603      	mov	r3, r0
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	f107 020c 	add.w	r2, r7, #12
 800657c:	f107 0308 	add.w	r3, r7, #8
 8006580:	4611      	mov	r1, r2
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fe4b 	bl	800721e <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEES6_>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d032      	beq.n	80065f4 <_ZN5Lexer17match_double_charEv+0x9c>
	{
		char_buffer = Code->receive_code_char();
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	4618      	mov	r0, r3
 8006594:	f007 fe00 	bl	800e198 <_ZN6Source17receive_code_charEv>
 8006598:	4603      	mov	r3, r0
 800659a:	461a      	mov	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	701a      	strb	r2, [r3, #0]
		if (char_buffer == '=')
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b3d      	cmp	r3, #61	; 0x3d
 80065a6:	d116      	bne.n	80065d6 <_ZN5Lexer17match_double_charEv+0x7e>
		{
			Product.set_type(result->second.double_char);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	1d1c      	adds	r4, r3, #4
 80065ac:	f107 0308 	add.w	r3, r7, #8
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fe48 	bl	8007246 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEptEv>
 80065b6:	4603      	mov	r3, r0
 80065b8:	789b      	ldrb	r3, [r3, #2]
 80065ba:	4619      	mov	r1, r3
 80065bc:	4620      	mov	r0, r4
 80065be:	f008 fc0d 	bl	800eddc <_ZN5Token8set_typeE10token_type>
			char_buffer = Code->receive_code_char();
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	4618      	mov	r0, r3
 80065c8:	f007 fde6 	bl	800e198 <_ZN6Source17receive_code_charEv>
 80065cc:	4603      	mov	r3, r0
 80065ce:	461a      	mov	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	701a      	strb	r2, [r3, #0]
 80065d4:	e00c      	b.n	80065f0 <_ZN5Lexer17match_double_charEv+0x98>
		}
		else
		{
			Product.set_type(result->second.single_char);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	1d1c      	adds	r4, r3, #4
 80065da:	f107 0308 	add.w	r3, r7, #8
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fe31 	bl	8007246 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEptEv>
 80065e4:	4603      	mov	r3, r0
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	4619      	mov	r1, r3
 80065ea:	4620      	mov	r0, r4
 80065ec:	f008 fbf6 	bl	800eddc <_ZN5Token8set_typeE10token_type>
		}
		return true;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <_ZN5Lexer17match_double_charEv+0x9e>
	}
	return false;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd90      	pop	{r4, r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000274 	.word	0x20000274

08006604 <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::build_word(std::string &word)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
	do
	{
		word.push_back(char_buffer);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	4619      	mov	r1, r3
 8006614:	6838      	ldr	r0, [r7, #0]
 8006616:	f010 faf1 	bl	8016bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
		char_buffer = Code->receive_code_char();
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	4618      	mov	r0, r3
 8006620:	f007 fdba 	bl	800e198 <_ZN6Source17receive_code_charEv>
 8006624:	4603      	mov	r3, r0
 8006626:	461a      	mov	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	701a      	strb	r2, [r3, #0]
	}
	while (isalnum(char_buffer) || char_buffer == '_');
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	4618      	mov	r0, r3
 8006632:	f010 fbeb 	bl	8016e0c <isalnum>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e8      	bne.n	800660e <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b5f      	cmp	r3, #95	; 0x5f
 8006642:	d100      	bne.n	8006646 <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
	do
 8006644:	e7e3      	b.n	800660e <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa>
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::match_keyword_or_id(std::string& word)
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b093      	sub	sp, #76	; 0x4c
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
	auto result = token_strings.find(word);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	4826      	ldr	r0, [pc, #152]	; (80066f8 <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 800665e:	f000 fe00 	bl	8007262 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>
 8006662:	4603      	mov	r3, r0
 8006664:	60fb      	str	r3, [r7, #12]
	if (result != token_strings.end())
 8006666:	4824      	ldr	r0, [pc, #144]	; (80066f8 <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 8006668:	f000 fe0a 	bl	8007280 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEE3endEv>
 800666c:	4603      	mov	r3, r0
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	f107 0210 	add.w	r2, r7, #16
 8006674:	f107 030c 	add.w	r3, r7, #12
 8006678:	4611      	mov	r1, r2
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fe0d 	bl	800729a <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00d      	beq.n	80066a2 <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x52>
	{
		Product.set_type(result->second);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	1d1c      	adds	r4, r3, #4
 800668a:	f107 030c 	add.w	r3, r7, #12
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fe17 	bl	80072c2 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEptEv>
 8006694:	4603      	mov	r3, r0
 8006696:	7e1b      	ldrb	r3, [r3, #24]
 8006698:	4619      	mov	r1, r3
 800669a:	4620      	mov	r0, r4
 800669c:	f008 fb9e 	bl	800eddc <_ZN5Token8set_typeE10token_type>
	else
	{
		Product.set_type(TOKEN_IDENTIFIER);
		Product.set_value(std::string(word));
	}
}
 80066a0:	e025      	b.n	80066ee <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e>
		Product.set_type(TOKEN_IDENTIFIER);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3304      	adds	r3, #4
 80066a6:	2102      	movs	r1, #2
 80066a8:	4618      	mov	r0, r3
 80066aa:	f008 fb97 	bl	800eddc <_ZN5Token8set_typeE10token_type>
		Product.set_value(std::string(word));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	1d1c      	adds	r4, r3, #4
 80066b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f010 fb5d 	bl	8016d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80066be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80066c2:	f107 0314 	add.w	r3, r7, #20
 80066c6:	4611      	mov	r1, r2
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fe2c 	bl	8007326 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IS5_vvS5_vEEOT_>
 80066ce:	f107 0314 	add.w	r3, r7, #20
 80066d2:	4619      	mov	r1, r3
 80066d4:	4620      	mov	r0, r4
 80066d6:	f008 fb62 	bl	800ed9e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 80066da:	f107 0314 	add.w	r3, r7, #20
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff fed0 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 80066e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066e8:	4618      	mov	r0, r3
 80066ea:	f010 fa18 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80066ee:	bf00      	nop
 80066f0:	374c      	adds	r7, #76	; 0x4c
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd90      	pop	{r4, r7, pc}
 80066f6:	bf00      	nop
 80066f8:	2000025c 	.word	0x2000025c

080066fc <_ZN5Lexer19build_keyword_or_idEv>:

bool Lexer::build_keyword_or_id()
{
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b089      	sub	sp, #36	; 0x24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
	if (isalpha(char_buffer))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f010 fb87 	bl	8016e1c <isalpha>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d017      	beq.n	8006744 <_ZN5Lexer19build_keyword_or_idEv+0x48>
	{
		std::string word;
 8006714:	f107 0308 	add.w	r3, r7, #8
 8006718:	4618      	mov	r0, r3
 800671a:	f010 f9df 	bl	8016adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		build_word(word);
 800671e:	f107 0308 	add.w	r3, r7, #8
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff ff6d 	bl	8006604 <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		match_keyword_or_id(word);
 800672a:	f107 0308 	add.w	r3, r7, #8
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff ff8d 	bl	8006650 <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		return true;
 8006736:	2401      	movs	r4, #1
		std::string word;
 8006738:	f107 0308 	add.w	r3, r7, #8
 800673c:	4618      	mov	r0, r3
 800673e:	f010 f9ee 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006742:	e000      	b.n	8006746 <_ZN5Lexer19build_keyword_or_idEv+0x4a>
	}
	return false;
 8006744:	2400      	movs	r4, #0
 8006746:	4623      	mov	r3, r4
}
 8006748:	4618      	mov	r0, r3
 800674a:	3724      	adds	r7, #36	; 0x24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd90      	pop	{r4, r7, pc}

08006750 <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::build_int(std::string &word)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
	do
	{
		word.push_back(char_buffer);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	4619      	mov	r1, r3
 8006760:	6838      	ldr	r0, [r7, #0]
 8006762:	f010 fa4b 	bl	8016bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
		char_buffer = Code->receive_code_char();
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	4618      	mov	r0, r3
 800676c:	f007 fd14 	bl	800e198 <_ZN6Source17receive_code_charEv>
 8006770:	4603      	mov	r3, r0
 8006772:	461a      	mov	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	701a      	strb	r2, [r3, #0]
	}
	while (isdigit(char_buffer));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	3b30      	subs	r3, #48	; 0x30
 800677e:	2b09      	cmp	r3, #9
 8006780:	bf94      	ite	ls
 8006782:	2301      	movls	r3, #1
 8006784:	2300      	movhi	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d000      	beq.n	800678e <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3e>
	do
 800678c:	e7e5      	b.n	800675a <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa>
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <_ZN5Lexer18match_int_or_floatERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::match_int_or_float(std::string& word)
{
 8006796:	b590      	push	{r4, r7, lr}
 8006798:	b093      	sub	sp, #76	; 0x4c
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
	if (char_buffer != '.')
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b2e      	cmp	r3, #46	; 0x2e
 80067a6:	d022      	beq.n	80067ee <_ZN5Lexer18match_int_or_floatERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>
	{
		Product.set_type(TOKEN_INT);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3304      	adds	r3, #4
 80067ac:	2103      	movs	r1, #3
 80067ae:	4618      	mov	r0, r3
 80067b0:	f008 fb14 	bl	800eddc <_ZN5Token8set_typeE10token_type>
		Product.set_value(std::stoi(word));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	1d1c      	adds	r4, r3, #4
 80067b8:	220a      	movs	r2, #10
 80067ba:	2100      	movs	r1, #0
 80067bc:	6838      	ldr	r0, [r7, #0]
 80067be:	f7ff fddf 	bl	8006380 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 80067c2:	4603      	mov	r3, r0
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
 80067c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80067ca:	f107 0308 	add.w	r3, r7, #8
 80067ce:	4611      	mov	r1, r2
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fddf 	bl	8007394 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IivvivEEOT_>
 80067d6:	f107 0308 	add.w	r3, r7, #8
 80067da:	4619      	mov	r1, r3
 80067dc:	4620      	mov	r0, r4
 80067de:	f008 fade 	bl	800ed9e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 80067e2:	f107 0308 	add.w	r3, r7, #8
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff fe4c 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	{
		build_int(word);
		Product.set_type(TOKEN_FLOAT);
		Product.set_value(std::stof(word));
	}
}
 80067ec:	e026      	b.n	800683c <_ZN5Lexer18match_int_or_floatERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa6>
		build_int(word);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ffad 	bl	8006750 <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		Product.set_type(TOKEN_FLOAT);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3304      	adds	r3, #4
 80067fa:	2104      	movs	r1, #4
 80067fc:	4618      	mov	r0, r3
 80067fe:	f008 faed 	bl	800eddc <_ZN5Token8set_typeE10token_type>
		Product.set_value(std::stof(word));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	1d1c      	adds	r4, r3, #4
 8006806:	2100      	movs	r1, #0
 8006808:	6838      	ldr	r0, [r7, #0]
 800680a:	f7ff fdd3 	bl	80063b4 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 800680e:	eef0 7a40 	vmov.f32	s15, s0
 8006812:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8006816:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800681a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800681e:	4611      	mov	r1, r2
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fdee 	bl	8007402 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IfvvfvEEOT_>
 8006826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800682a:	4619      	mov	r1, r3
 800682c:	4620      	mov	r0, r4
 800682e:	f008 fab6 	bl	800ed9e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 8006832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006836:	4618      	mov	r0, r3
 8006838:	f7ff fe24 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
}
 800683c:	bf00      	nop
 800683e:	374c      	adds	r7, #76	; 0x4c
 8006840:	46bd      	mov	sp, r7
 8006842:	bd90      	pop	{r4, r7, pc}

08006844 <_ZN5Lexer18build_int_or_floatEv>:

bool Lexer::build_int_or_float()
{
 8006844:	b590      	push	{r4, r7, lr}
 8006846:	b089      	sub	sp, #36	; 0x24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	if(isdigit(char_buffer) && char_buffer != '0')
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	3b30      	subs	r3, #48	; 0x30
 8006852:	2b09      	cmp	r3, #9
 8006854:	bf94      	ite	ls
 8006856:	2301      	movls	r3, #1
 8006858:	2300      	movhi	r3, #0
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d01b      	beq.n	8006898 <_ZN5Lexer18build_int_or_floatEv+0x54>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b30      	cmp	r3, #48	; 0x30
 8006866:	d017      	beq.n	8006898 <_ZN5Lexer18build_int_or_floatEv+0x54>
	{
		std::string word;
 8006868:	f107 0308 	add.w	r3, r7, #8
 800686c:	4618      	mov	r0, r3
 800686e:	f010 f935 	bl	8016adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		build_int(word);
 8006872:	f107 0308 	add.w	r3, r7, #8
 8006876:	4619      	mov	r1, r3
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7ff ff69 	bl	8006750 <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		match_int_or_float(word);
 800687e:	f107 0308 	add.w	r3, r7, #8
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff ff86 	bl	8006796 <_ZN5Lexer18match_int_or_floatERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		return true;
 800688a:	2401      	movs	r4, #1
		std::string word;
 800688c:	f107 0308 	add.w	r3, r7, #8
 8006890:	4618      	mov	r0, r3
 8006892:	f010 f944 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006896:	e000      	b.n	800689a <_ZN5Lexer18build_int_or_floatEv+0x56>
	}
	return false;
 8006898:	2400      	movs	r4, #0
 800689a:	4623      	mov	r3, r4
}
 800689c:	4618      	mov	r0, r3
 800689e:	3724      	adds	r7, #36	; 0x24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd90      	pop	{r4, r7, pc}

080068a4 <_ZN5Lexer20build_0_int_or_floatEv>:

bool Lexer::build_0_int_or_float()
{
 80068a4:	b590      	push	{r4, r7, lr}
 80068a6:	b099      	sub	sp, #100	; 0x64
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
	if(char_buffer == '0')
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b30      	cmp	r3, #48	; 0x30
 80068b2:	d161      	bne.n	8006978 <_ZN5Lexer20build_0_int_or_floatEv+0xd4>
	{
		char_buffer = Code->receive_code_char();
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	4618      	mov	r0, r3
 80068ba:	f007 fc6d 	bl	800e198 <_ZN6Source17receive_code_charEv>
 80068be:	4603      	mov	r3, r0
 80068c0:	461a      	mov	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	701a      	strb	r2, [r3, #0]
		if(char_buffer == '.')
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b2e      	cmp	r3, #46	; 0x2e
 80068cc:	d135      	bne.n	800693a <_ZN5Lexer20build_0_int_or_floatEv+0x96>
		{
			std::string word;
 80068ce:	f107 0308 	add.w	r3, r7, #8
 80068d2:	4618      	mov	r0, r3
 80068d4:	f010 f902 	bl	8016adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
			build_int(word);
 80068d8:	f107 0308 	add.w	r3, r7, #8
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff ff36 	bl	8006750 <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
			Product.set_type(TOKEN_FLOAT);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3304      	adds	r3, #4
 80068e8:	2104      	movs	r1, #4
 80068ea:	4618      	mov	r0, r3
 80068ec:	f008 fa76 	bl	800eddc <_ZN5Token8set_typeE10token_type>
			Product.set_value(std::stof(word));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	1d1c      	adds	r4, r3, #4
 80068f4:	f107 0308 	add.w	r3, r7, #8
 80068f8:	2100      	movs	r1, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff fd5a 	bl	80063b4 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8006900:	eef0 7a40 	vmov.f32	s15, s0
 8006904:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8006908:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800690c:	f107 0320 	add.w	r3, r7, #32
 8006910:	4611      	mov	r1, r2
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fd75 	bl	8007402 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IfvvfvEEOT_>
 8006918:	f107 0320 	add.w	r3, r7, #32
 800691c:	4619      	mov	r1, r3
 800691e:	4620      	mov	r0, r4
 8006920:	f008 fa3d 	bl	800ed9e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 8006924:	f107 0320 	add.w	r3, r7, #32
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fdab 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
			std::string word;
 800692e:	f107 0308 	add.w	r3, r7, #8
 8006932:	4618      	mov	r0, r3
 8006934:	f010 f8f3 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006938:	e01c      	b.n	8006974 <_ZN5Lexer20build_0_int_or_floatEv+0xd0>
		}
		else
		{
			Product.set_type(TOKEN_INT);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3304      	adds	r3, #4
 800693e:	2103      	movs	r1, #3
 8006940:	4618      	mov	r0, r3
 8006942:	f008 fa4b 	bl	800eddc <_ZN5Token8set_typeE10token_type>
			Product.set_value(0);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	1d1c      	adds	r4, r3, #4
 800694a:	2300      	movs	r3, #0
 800694c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800694e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006956:	4611      	mov	r1, r2
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fd1b 	bl	8007394 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IivvivEEOT_>
 800695e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006962:	4619      	mov	r1, r3
 8006964:	4620      	mov	r0, r4
 8006966:	f008 fa1a 	bl	800ed9e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 800696a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff fd88 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
		}
		return true;
 8006974:	2301      	movs	r3, #1
 8006976:	e000      	b.n	800697a <_ZN5Lexer20build_0_int_or_floatEv+0xd6>
	}
	return false;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3764      	adds	r7, #100	; 0x64
 800697e:	46bd      	mov	sp, r7
 8006980:	bd90      	pop	{r4, r7, pc}
	...

08006984 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::match_escape_char(std::string &word)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
	char true_char = '\0';
 800698e:	2300      	movs	r3, #0
 8006990:	73fb      	strb	r3, [r7, #15]
	switch (char_buffer)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b76      	cmp	r3, #118	; 0x76
 8006998:	dc5d      	bgt.n	8006a56 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd2>
 800699a:	2b5c      	cmp	r3, #92	; 0x5c
 800699c:	da04      	bge.n	80069a8 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24>
 800699e:	2b22      	cmp	r3, #34	; 0x22
 80069a0:	d047      	beq.n	8006a32 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
 80069a2:	2b27      	cmp	r3, #39	; 0x27
 80069a4:	d03f      	beq.n	8006a26 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa2>
	case 'v':
		true_char = '\v';
		break;
	default:
		// xxx błąd
		break;
 80069a6:	e056      	b.n	8006a56 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd2>
 80069a8:	3b5c      	subs	r3, #92	; 0x5c
 80069aa:	2b1a      	cmp	r3, #26
 80069ac:	d853      	bhi.n	8006a56 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd2>
 80069ae:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>)
 80069b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b4:	08006a2d 	.word	0x08006a2d
 80069b8:	08006a57 	.word	0x08006a57
 80069bc:	08006a57 	.word	0x08006a57
 80069c0:	08006a57 	.word	0x08006a57
 80069c4:	08006a57 	.word	0x08006a57
 80069c8:	08006a57 	.word	0x08006a57
 80069cc:	08006a45 	.word	0x08006a45
 80069d0:	08006a57 	.word	0x08006a57
 80069d4:	08006a57 	.word	0x08006a57
 80069d8:	08006a57 	.word	0x08006a57
 80069dc:	08006a4b 	.word	0x08006a4b
 80069e0:	08006a57 	.word	0x08006a57
 80069e4:	08006a57 	.word	0x08006a57
 80069e8:	08006a57 	.word	0x08006a57
 80069ec:	08006a57 	.word	0x08006a57
 80069f0:	08006a57 	.word	0x08006a57
 80069f4:	08006a57 	.word	0x08006a57
 80069f8:	08006a57 	.word	0x08006a57
 80069fc:	08006a21 	.word	0x08006a21
 8006a00:	08006a57 	.word	0x08006a57
 8006a04:	08006a57 	.word	0x08006a57
 8006a08:	08006a57 	.word	0x08006a57
 8006a0c:	08006a39 	.word	0x08006a39
 8006a10:	08006a57 	.word	0x08006a57
 8006a14:	08006a3f 	.word	0x08006a3f
 8006a18:	08006a57 	.word	0x08006a57
 8006a1c:	08006a51 	.word	0x08006a51
		true_char = '\n';
 8006a20:	230a      	movs	r3, #10
 8006a22:	73fb      	strb	r3, [r7, #15]
		break;
 8006a24:	e018      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\'';
 8006a26:	2327      	movs	r3, #39	; 0x27
 8006a28:	73fb      	strb	r3, [r7, #15]
		break;
 8006a2a:	e015      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\\';
 8006a2c:	235c      	movs	r3, #92	; 0x5c
 8006a2e:	73fb      	strb	r3, [r7, #15]
		break;
 8006a30:	e012      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\"';
 8006a32:	2322      	movs	r3, #34	; 0x22
 8006a34:	73fb      	strb	r3, [r7, #15]
		break;
 8006a36:	e00f      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\r';
 8006a38:	230d      	movs	r3, #13
 8006a3a:	73fb      	strb	r3, [r7, #15]
		break;
 8006a3c:	e00c      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\t';
 8006a3e:	2309      	movs	r3, #9
 8006a40:	73fb      	strb	r3, [r7, #15]
		break;
 8006a42:	e009      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\b';
 8006a44:	2308      	movs	r3, #8
 8006a46:	73fb      	strb	r3, [r7, #15]
		break;
 8006a48:	e006      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\f';
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	73fb      	strb	r3, [r7, #15]
		break;
 8006a4e:	e003      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		true_char = '\v';
 8006a50:	230b      	movs	r3, #11
 8006a52:	73fb      	strb	r3, [r7, #15]
		break;
 8006a54:	e000      	b.n	8006a58 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		break;
 8006a56:	bf00      	nop
	}
	word.pop_back();
 8006a58:	6838      	ldr	r0, [r7, #0]
 8006a5a:	f010 f8ee 	bl	8016c3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>
	word.push_back(true_char);
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	4619      	mov	r1, r3
 8006a62:	6838      	ldr	r0, [r7, #0]
 8006a64:	f010 f8ca 	bl	8016bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
}
 8006a68:	bf00      	nop
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <_ZN5Lexer15add_string_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::add_string_char(std::string &word)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
	if (word.back() == '\\')
 8006a7a:	6838      	ldr	r0, [r7, #0]
 8006a7c:	f010 f8b9 	bl	8016bf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8006a80:	4603      	mov	r3, r0
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b5c      	cmp	r3, #92	; 0x5c
 8006a86:	bf0c      	ite	eq
 8006a88:	2301      	moveq	r3, #1
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d004      	beq.n	8006a9c <_ZN5Lexer15add_string_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>
	{
		match_escape_char(word);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff ff75 	bl	8006984 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006a9a:	e005      	b.n	8006aa8 <_ZN5Lexer15add_string_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
	}
	else
	{
		word.push_back(char_buffer);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6838      	ldr	r0, [r7, #0]
 8006aa4:	f010 f8aa 	bl	8016bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	}
	char_buffer = Code->receive_code_char();
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	4618      	mov	r0, r3
 8006aae:	f007 fb73 	bl	800e198 <_ZN6Source17receive_code_charEv>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	701a      	strb	r2, [r3, #0]
}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::build_string_content(std::string &word)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b082      	sub	sp, #8
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
	char_buffer = Code->receive_code_char();
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f007 fb61 	bl	800e198 <_ZN6Source17receive_code_charEv>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	461a      	mov	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	701a      	strb	r2, [r3, #0]
	while (!(char_buffer == '\"' && word.back() != '\\'))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b22      	cmp	r3, #34	; 0x22
 8006ae4:	d106      	bne.n	8006af4 <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32>
 8006ae6:	6838      	ldr	r0, [r7, #0]
 8006ae8:	f010 f883 	bl	8016bf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8006aec:	4603      	mov	r3, r0
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b5c      	cmp	r3, #92	; 0x5c
 8006af2:	d101      	bne.n	8006af8 <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
 8006af8:	2300      	movs	r3, #0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d004      	beq.n	8006b08 <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x46>
	{
		add_string_char(word);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff ffb5 	bl	8006a70 <_ZN5Lexer15add_string_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
	while (!(char_buffer == '\"' && word.back() != '\\'))
 8006b06:	e7ea      	b.n	8006ade <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c>
	}
	char_buffer = Code->receive_code_char();
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f007 fb43 	bl	800e198 <_ZN6Source17receive_code_charEv>
 8006b12:	4603      	mov	r3, r0
 8006b14:	461a      	mov	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	701a      	strb	r2, [r3, #0]
}
 8006b1a:	bf00      	nop
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <_ZN5Lexer12build_stringEv>:

bool Lexer::build_string()
{
 8006b22:	b590      	push	{r4, r7, lr}
 8006b24:	b097      	sub	sp, #92	; 0x5c
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
	if(char_buffer == '\"')
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	2b22      	cmp	r3, #34	; 0x22
 8006b30:	d139      	bne.n	8006ba6 <_ZN5Lexer12build_stringEv+0x84>
	{
		std::string word;
 8006b32:	f107 030c 	add.w	r3, r7, #12
 8006b36:	4618      	mov	r0, r3
 8006b38:	f00f ffd0 	bl	8016adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		build_string_content(word);
 8006b3c:	f107 030c 	add.w	r3, r7, #12
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff ffbd 	bl	8006ac2 <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		Product.set_type(TOKEN_STRING);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	210f      	movs	r1, #15
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f008 f944 	bl	800eddc <_ZN5Token8set_typeE10token_type>
		Product.set_value(std::string(word));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	1d1c      	adds	r4, r3, #4
 8006b58:	f107 020c 	add.w	r2, r7, #12
 8006b5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b60:	4611      	mov	r1, r2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f010 f908 	bl	8016d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006b68:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b70:	4611      	mov	r1, r2
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fbd7 	bl	8007326 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IS5_vvS5_vEEOT_>
 8006b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f008 f90d 	bl	800ed9e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 8006b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff fc7b 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006b8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b92:	4618      	mov	r0, r3
 8006b94:	f00f ffc3 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		return true;
 8006b98:	2401      	movs	r4, #1
		std::string word;
 8006b9a:	f107 030c 	add.w	r3, r7, #12
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f00f ffbd 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ba4:	e000      	b.n	8006ba8 <_ZN5Lexer12build_stringEv+0x86>
	}
	return false;
 8006ba6:	2400      	movs	r4, #0
 8006ba8:	4623      	mov	r3, r4
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	375c      	adds	r7, #92	; 0x5c
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd90      	pop	{r4, r7, pc}

08006bb2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Move_ctor_base(const _Move_ctor_base&) = default;
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fc30 	bl	8007428 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Copy_assign_base(const _Copy_assign_base&) = default;
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	4611      	mov	r1, r2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff ffe5 	bl	8006bb2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Move_assign_base(const _Move_assign_base&) = default;
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	4611      	mov	r1, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff ffe5 	bl	8006bd2 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Variant_base(const _Variant_base&) = default;
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	4611      	mov	r1, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff ffe5 	bl	8006bf2 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS6_>:
      variant(const variant& __rhs) = default;
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	6039      	str	r1, [r7, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	4611      	mov	r1, r2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7ff ffe5 	bl	8006c12 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <_ZN5TokenC1ERKS_>:
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b082      	sub	sp, #8
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	6039      	str	r1, [r7, #0]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781a      	ldrb	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	701a      	strb	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	1d1a      	adds	r2, r3, #4
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f7ff ffdf 	bl	8006c32 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS6_>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	6a1a      	ldr	r2, [r3, #32]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	621a      	str	r2, [r3, #32]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <_ZN5Lexer11build_tokenEv>:

Token Lexer::build_token()
{
 8006c90:	b590      	push	{r4, r7, lr}
 8006c92:	b08b      	sub	sp, #44	; 0x2c
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
	get_working_char();
 8006c9a:	6838      	ldr	r0, [r7, #0]
 8006c9c:	f000 f8e9 	bl	8006e72 <_ZN5Lexer16get_working_charEv>
	Product.set_line(Code->get_line());
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	1d1c      	adds	r4, r3, #4
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f007 fa3f 	bl	800e12c <_ZN6Source8get_lineEv>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f008 f8ad 	bl	800ee12 <_ZN5Token8set_lineEi>
	Product.set_position(Code->get_position());
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	1d1c      	adds	r4, r3, #4
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f007 fa3f 	bl	800e144 <_ZN6Source12get_positionEv>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f008 f8bb 	bl	800ee46 <_ZN5Token12set_positionEi>

	// todo refactor
	if(match_single_char())
 8006cd0:	6838      	ldr	r0, [r7, #0]
 8006cd2:	f7ff fc07 	bl	80064e4 <_ZN5Lexer17match_single_charEv>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d006      	beq.n	8006cea <_ZN5Lexer11build_tokenEv+0x5a>
	{
		return Product;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff ffb5 	bl	8006c52 <_ZN5TokenC1ERKS_>
 8006ce8:	e05f      	b.n	8006daa <_ZN5Lexer11build_tokenEv+0x11a>
	}

	if(match_double_char())
 8006cea:	6838      	ldr	r0, [r7, #0]
 8006cec:	f7ff fc34 	bl	8006558 <_ZN5Lexer17match_double_charEv>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d006      	beq.n	8006d04 <_ZN5Lexer11build_tokenEv+0x74>
	{
		return Product;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff ffa8 	bl	8006c52 <_ZN5TokenC1ERKS_>
 8006d02:	e052      	b.n	8006daa <_ZN5Lexer11build_tokenEv+0x11a>
	}

	if(build_keyword_or_id())
 8006d04:	6838      	ldr	r0, [r7, #0]
 8006d06:	f7ff fcf9 	bl	80066fc <_ZN5Lexer19build_keyword_or_idEv>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d006      	beq.n	8006d1e <_ZN5Lexer11build_tokenEv+0x8e>
	{
		return Product;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff ff9b 	bl	8006c52 <_ZN5TokenC1ERKS_>
 8006d1c:	e045      	b.n	8006daa <_ZN5Lexer11build_tokenEv+0x11a>
	}

	if(build_int_or_float())
 8006d1e:	6838      	ldr	r0, [r7, #0]
 8006d20:	f7ff fd90 	bl	8006844 <_ZN5Lexer18build_int_or_floatEv>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d006      	beq.n	8006d38 <_ZN5Lexer11build_tokenEv+0xa8>
	{
		return Product;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff ff8e 	bl	8006c52 <_ZN5TokenC1ERKS_>
 8006d36:	e038      	b.n	8006daa <_ZN5Lexer11build_tokenEv+0x11a>
	}

	if(build_0_int_or_float())
 8006d38:	6838      	ldr	r0, [r7, #0]
 8006d3a:	f7ff fdb3 	bl	80068a4 <_ZN5Lexer20build_0_int_or_floatEv>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d006      	beq.n	8006d52 <_ZN5Lexer11build_tokenEv+0xc2>
	{
		return Product;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	3304      	adds	r3, #4
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7ff ff81 	bl	8006c52 <_ZN5TokenC1ERKS_>
 8006d50:	e02b      	b.n	8006daa <_ZN5Lexer11build_tokenEv+0x11a>
	}

	if(build_string())
 8006d52:	6838      	ldr	r0, [r7, #0]
 8006d54:	f7ff fee5 	bl	8006b22 <_ZN5Lexer12build_stringEv>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d006      	beq.n	8006d6c <_ZN5Lexer11build_tokenEv+0xdc>
	{
		return Product;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	3304      	adds	r3, #4
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff ff74 	bl	8006c52 <_ZN5TokenC1ERKS_>
 8006d6a:	e01e      	b.n	8006daa <_ZN5Lexer11build_tokenEv+0x11a>
	}

	Product.set_type(TOKEN_ERROR);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	2128      	movs	r1, #40	; 0x28
 8006d72:	4618      	mov	r0, r3
 8006d74:	f008 f832 	bl	800eddc <_ZN5Token8set_typeE10token_type>
	Product.set_value("unrecognized token");
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	1d1c      	adds	r4, r3, #4
 8006d7c:	f107 030c 	add.w	r3, r7, #12
 8006d80:	490c      	ldr	r1, [pc, #48]	; (8006db4 <_ZN5Lexer11build_tokenEv+0x124>)
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fb86 	bl	8007494 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IRA19_KcvvbvEEOT_>
 8006d88:	f107 030c 	add.w	r3, r7, #12
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f008 f805 	bl	800ed9e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 8006d94:	f107 030c 	add.w	r3, r7, #12
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fb73 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>

	return Product;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	3304      	adds	r3, #4
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff ff54 	bl	8006c52 <_ZN5TokenC1ERKS_>
}
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	372c      	adds	r7, #44	; 0x2c
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd90      	pop	{r4, r7, pc}
 8006db2:	bf00      	nop
 8006db4:	08019eb8 	.word	0x08019eb8

08006db8 <_ZN5Lexer12skip_commentEv>:

void Lexer::skip_comment()
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
	while (char_buffer == '#')
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b23      	cmp	r3, #35	; 0x23
 8006dc6:	d117      	bne.n	8006df8 <_ZN5Lexer12skip_commentEv+0x40>
	{
		while (char_buffer != '\n')
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b0a      	cmp	r3, #10
 8006dce:	d009      	beq.n	8006de4 <_ZN5Lexer12skip_commentEv+0x2c>
		{
			char_buffer = Code->receive_code_char();
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f007 f9df 	bl	800e198 <_ZN6Source17receive_code_charEv>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	461a      	mov	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	701a      	strb	r2, [r3, #0]
		while (char_buffer != '\n')
 8006de2:	e7f1      	b.n	8006dc8 <_ZN5Lexer12skip_commentEv+0x10>
		}
		char_buffer = Code->receive_code_char();
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	4618      	mov	r0, r3
 8006dea:	f007 f9d5 	bl	800e198 <_ZN6Source17receive_code_charEv>
 8006dee:	4603      	mov	r3, r0
 8006df0:	461a      	mov	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	701a      	strb	r2, [r3, #0]
	while (char_buffer == '#')
 8006df6:	e7e3      	b.n	8006dc0 <_ZN5Lexer12skip_commentEv+0x8>
	}
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <_ZN5Lexer15skip_whitespaceEv>:

void Lexer::skip_whitespace()
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	while (isspace(char_buffer) && char_buffer != '\n')
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f010 f80d 	bl	8016e2c <isspace>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00d      	beq.n	8006e34 <_ZN5Lexer15skip_whitespaceEv+0x34>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b0a      	cmp	r3, #10
 8006e1e:	d009      	beq.n	8006e34 <_ZN5Lexer15skip_whitespaceEv+0x34>
	{
		char_buffer = Code->receive_code_char();
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	4618      	mov	r0, r3
 8006e26:	f007 f9b7 	bl	800e198 <_ZN6Source17receive_code_charEv>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	701a      	strb	r2, [r3, #0]
	while (isspace(char_buffer) && char_buffer != '\n')
 8006e32:	e7e9      	b.n	8006e08 <_ZN5Lexer15skip_whitespaceEv+0x8>
	}
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <_ZN5Lexer15is_invalid_charEv>:

bool Lexer::is_invalid_char()
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
	return (isspace(char_buffer) && char_buffer != '\n') || char_buffer == '#';
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f00f ffef 	bl	8016e2c <isspace>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <_ZN5Lexer15is_invalid_charEv+0x20>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b0a      	cmp	r3, #10
 8006e5a:	d103      	bne.n	8006e64 <_ZN5Lexer15is_invalid_charEv+0x28>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b23      	cmp	r3, #35	; 0x23
 8006e62:	d101      	bne.n	8006e68 <_ZN5Lexer15is_invalid_charEv+0x2c>
 8006e64:	2301      	movs	r3, #1
 8006e66:	e000      	b.n	8006e6a <_ZN5Lexer15is_invalid_charEv+0x2e>
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <_ZN5Lexer16get_working_charEv>:

void Lexer::get_working_char()
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
	while (is_invalid_char())
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff ffde 	bl	8006e3c <_ZN5Lexer15is_invalid_charEv>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d006      	beq.n	8006e94 <_ZN5Lexer16get_working_charEv+0x22>
    {
		skip_comment();
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff ff96 	bl	8006db8 <_ZN5Lexer12skip_commentEv>
		skip_whitespace();
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff ffb7 	bl	8006e00 <_ZN5Lexer15skip_whitespaceEv>
	while (is_invalid_char())
 8006e92:	e7f2      	b.n	8006e7a <_ZN5Lexer16get_working_charEv+0x8>
    }
}
 8006e94:	bf00      	nop
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	f00f ff88 	bl	8016db8 <__errno>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	f00f ff82 	bl	8016db8 <__errno>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8006ec4:	b590      	push	{r4, r7, lr}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	f00f ff74 	bl	8016db8 <__errno>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bf0c      	ite	eq
 8006ed8:	2301      	moveq	r3, #1
 8006eda:	2300      	movne	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d005      	beq.n	8006eee <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681c      	ldr	r4, [r3, #0]
 8006ee6:	f00f ff67 	bl	8016db8 <__errno>
 8006eea:	4603      	mov	r3, r0
 8006eec:	601c      	str	r4, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd90      	pop	{r4, r7, pc}

08006ef8 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8006f02:	2300      	movs	r3, #0
	  }
 8006f04:	4618      	mov	r0, r3
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8006f10:	b590      	push	{r4, r7, lr}
 8006f12:	b08b      	sub	sp, #44	; 0x2c
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8006f1e:	f107 0314 	add.w	r3, r7, #20
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff ffba 	bl	8006e9c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f107 0118 	add.w	r1, r7, #24
 8006f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	4798      	blx	r3
 8006f34:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d102      	bne.n	8006f44 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8006f3e:	68b8      	ldr	r0, [r7, #8]
 8006f40:	f00f fce0 	bl	8016904 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8006f44:	f00f ff38 	bl	8016db8 <__errno>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8006f4c:	2b22      	cmp	r3, #34	; 0x22
 8006f4e:	d006      	beq.n	8006f5e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8006f50:	4621      	mov	r1, r4
 8006f52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f54:	f7ff ffd0 	bl	8006ef8 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8006f62:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8006f68:	68b8      	ldr	r0, [r7, #8]
 8006f6a:	f00f fcd1 	bl	8016910 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	623b      	str	r3, [r7, #32]

      if (__idx)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d005      	beq.n	8006f84 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	461a      	mov	r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	601a      	str	r2, [r3, #0]

      return __ret;
 8006f84:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8006f86:	f107 0314 	add.w	r3, r7, #20
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff ff9a 	bl	8006ec4 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8006f90:	4623      	mov	r3, r4
    }
 8006f92:	4618      	mov	r0, r3
 8006f94:	372c      	adds	r7, #44	; 0x2c
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd90      	pop	{r4, r7, pc}

08006f9a <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	f00f ff09 	bl	8016db8 <__errno>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	f00f ff03 	bl	8016db8 <__errno>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8006fc2:	b590      	push	{r4, r7, lr}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	f00f fef5 	bl	8016db8 <__errno>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bf0c      	ite	eq
 8006fd6:	2301      	moveq	r3, #1
 8006fd8:	2300      	movne	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681c      	ldr	r4, [r3, #0]
 8006fe4:	f00f fee8 	bl	8016db8 <__errno>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	601c      	str	r4, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd90      	pop	{r4, r7, pc}

08006ff6 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE>:
	  _S_chk(_TRet, std::false_type) { return false; }
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	ed87 0a01 	vstr	s0, [r7, #4]
 8007000:	7038      	strb	r0, [r7, #0]
 8007002:	2300      	movs	r3, #0
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8007010:	b590      	push	{r4, r7, lr}
 8007012:	b08b      	sub	sp, #44	; 0x2c
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 800701e:	f107 0314 	add.w	r3, r7, #20
 8007022:	4618      	mov	r0, r3
 8007024:	f7ff ffb9 	bl	8006f9a <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f107 0218 	add.w	r2, r7, #24
 800702e:	4611      	mov	r1, r2
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	4798      	blx	r3
 8007034:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
      if (__endptr == __str)
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d102      	bne.n	8007046 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x36>
	std::__throw_invalid_argument(__name);
 8007040:	68b8      	ldr	r0, [r7, #8]
 8007042:	f00f fc5f 	bl	8016904 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8007046:	f00f feb7 	bl	8016db8 <__errno>
 800704a:	4603      	mov	r3, r0
 800704c:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800704e:	2b22      	cmp	r3, #34	; 0x22
 8007050:	d007      	beq.n	8007062 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8007052:	4620      	mov	r0, r4
 8007054:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8007058:	f7ff ffcd 	bl	8006ff6 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x56>
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x58>
 8007066:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x62>
	std::__throw_out_of_range(__name);
 800706c:	68b8      	ldr	r0, [r7, #8]
 800706e:	f00f fc4f 	bl	8016910 <_ZSt20__throw_out_of_rangePKc>
	__ret = __tmp;
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	623b      	str	r3, [r7, #32]
      if (__idx)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x78>
	*__idx = __endptr - __str;
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	461a      	mov	r2, r3
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	601a      	str	r2, [r3, #0]
      return __ret;
 8007088:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 800708a:	f107 0314 	add.w	r3, r7, #20
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff ff97 	bl	8006fc2 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8007094:	ee07 4a90 	vmov	s15, r4
    }
 8007098:	eeb0 0a67 	vmov.f32	s0, s15
 800709c:	372c      	adds	r7, #44	; 0x2c
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd90      	pop	{r4, r7, pc}

080070a2 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	7039      	strb	r1, [r7, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4611      	mov	r1, r2
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 fa28 	bl	8007506 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	7039      	strb	r1, [r7, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4611      	mov	r1, r2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7ff ffe7 	bl	80070a2 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80070de:	b580      	push	{r7, lr}
 80070e0:	b082      	sub	sp, #8
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	7039      	strb	r1, [r7, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4611      	mov	r1, r2
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff ffe7 	bl	80070c0 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	7039      	strb	r1, [r7, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff ffe7 	bl	80070de <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	7039      	strb	r1, [r7, #0]
	: _Base(__i, std::forward<_Args>(__args)...)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4611      	mov	r1, r2
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff ffe7 	bl	80070fc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>:
      _Variant_base()
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
      : _Variant_base(in_place_index<0>) { }
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff ffe9 	bl	800711a <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
      ~_Variant_storage()
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
      { _M_reset(); }
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f9e5 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <_ZNKSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEE4findERS4_>:
       *  iterator pointing to the sought after %pair. If unsuccessful it
       *  returns the past-the-end ( @c end() ) iterator.
       */

      const_iterator
      find(const key_type& __x) const
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f000 f9e4 	bl	8007546 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_>
 800717e:	4603      	mov	r3, r0
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <_ZNKSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4618      	mov	r0, r3
 8007194:	f000 fa13 	bl	80075be <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8007198:	4603      	mov	r3, r0
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEES6_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	bf14      	ite	ne
 80071b8:	2301      	movne	r3, #1
 80071ba:	2300      	moveq	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fb62 	bl	80058a0 <_ZNKSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 80071dc:	4603      	mov	r3, r0
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <_ZNKSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEE4findERS4_>:
      find(const key_type& __x) const
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 f9f3 	bl	80075e0 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_>
 80071fa:	4603      	mov	r3, r0
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <_ZNKSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4618      	mov	r0, r3
 8007210:	f000 fa22 	bl	8007658 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8007214:	4603      	mov	r3, r0
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEES6_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	429a      	cmp	r2, r3
 8007232:	bf14      	ite	ne
 8007234:	2301      	movne	r3, #1
 8007236:	2300      	moveq	r3, #0
 8007238:	b2db      	uxtb	r3, r3
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe fbff 	bl	8005a56 <_ZNKSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 8007258:	4603      	mov	r3, r0
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>:
      find(const key_type& __x) const
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fa02 	bl	800767a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>
 8007276:	4603      	mov	r3, r0
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fa31 	bl	80076f2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8007290:	4603      	mov	r3, r0
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	bf14      	ite	ne
 80072b0:	2301      	movne	r3, #1
 80072b2:	2300      	moveq	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	4618      	mov	r0, r3
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b082      	sub	sp, #8
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fe fb54 	bl	800597c <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 80072d4:	4603      	mov	r3, r0
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS5_ES5_vEESt16in_place_index_tIXT_EEDpOT0_>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
 80072de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072e0:	b085      	sub	sp, #20
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	60f8      	str	r0, [r7, #12]
 80072e6:	7239      	strb	r1, [r7, #8]
 80072e8:	607a      	str	r2, [r7, #4]
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
 80072ea:	68fc      	ldr	r4, [r7, #12]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f80f 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80072f2:	4603      	mov	r3, r0
 80072f4:	461a      	mov	r2, r3
 80072f6:	4631      	mov	r1, r6
 80072f8:	4620      	mov	r0, r4
 80072fa:	f000 fa4f 	bl	800779c <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 80072fe:	4629      	mov	r1, r5
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fa60 	bl	80077c6 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>
	{ }
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4618      	mov	r0, r3
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IS5_vvS5_vEEOT_>:
	variant(_Tp&& __t)
 8007326:	b590      	push	{r4, r7, lr}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
		  std::forward<_Tp>(__t))
 8007330:	6838      	ldr	r0, [r7, #0]
 8007332:	f7ff ffed 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007336:	4603      	mov	r3, r0
 8007338:	461a      	mov	r2, r3
 800733a:	4621      	mov	r1, r4
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff ffce 	bl	80072de <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS5_ES5_vEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	bd90      	pop	{r4, r7, pc}

0800734c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEivEESt16in_place_index_tIXT_EEDpOT0_>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
 800734c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	7239      	strb	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
 8007358:	68fc      	ldr	r4, [r7, #12]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f80f 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8007360:	4603      	mov	r3, r0
 8007362:	461a      	mov	r2, r3
 8007364:	4631      	mov	r1, r6
 8007366:	4620      	mov	r0, r4
 8007368:	f000 fa7d 	bl	8007866 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 800736c:	4629      	mov	r1, r5
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 fa29 	bl	80077c6 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>
	{ }
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IivvivEEOT_>:
	variant(_Tp&& __t)
 8007394:	b590      	push	{r4, r7, lr}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
		  std::forward<_Tp>(__t))
 800739e:	6838      	ldr	r0, [r7, #0]
 80073a0:	f7ff ffed 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80073a4:	4603      	mov	r3, r0
 80073a6:	461a      	mov	r2, r3
 80073a8:	4621      	mov	r1, r4
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff ffce 	bl	800734c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEivEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4618      	mov	r0, r3
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd90      	pop	{r4, r7, pc}

080073ba <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEfvEESt16in_place_index_tIXT_EEDpOT0_>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
 80073ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	7239      	strb	r1, [r7, #8]
 80073c4:	607a      	str	r2, [r7, #4]
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
 80073c6:	68fc      	ldr	r4, [r7, #12]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f80f 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80073ce:	4603      	mov	r3, r0
 80073d0:	461a      	mov	r2, r3
 80073d2:	4631      	mov	r1, r6
 80073d4:	4620      	mov	r0, r4
 80073d6:	f000 fa9f 	bl	8007918 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 80073da:	4629      	mov	r1, r5
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 f9f2 	bl	80077c6 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>
	{ }
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IfvvfvEEOT_>:
	variant(_Tp&& __t)
 8007402:	b590      	push	{r4, r7, lr}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
		  std::forward<_Tp>(__t))
 800740c:	6838      	ldr	r0, [r7, #0]
 800740e:	f7ff ffed 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8007412:	4603      	mov	r3, r0
 8007414:	461a      	mov	r2, r3
 8007416:	4621      	mov	r1, r4
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff ffce 	bl	80073ba <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEfvEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4618      	mov	r0, r3
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	bd90      	pop	{r4, r7, pc}

08007428 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Copy_ctor_base(const _Copy_ctor_base& __rhs)
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
      {
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4618      	mov	r0, r3
 8007436:	f000 fa91 	bl	800795c <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>
	__variant_construct<_Types...>(*this, __rhs);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fd3f 	bl	8007ec0 <_ZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_>
      }
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4618      	mov	r0, r3
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEbvEESt16in_place_index_tIXT_EEDpOT0_>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
 800744c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	7239      	strb	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
 8007458:	68fc      	ldr	r4, [r7, #12]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f80f 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	4631      	mov	r1, r6
 8007466:	4620      	mov	r0, r4
 8007468:	f000 fd8b 	bl	8007f82 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
 800746c:	4629      	mov	r1, r5
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 f9a9 	bl	80077c6 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>
	{ }
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IRA19_KcvvbvEEOT_>:
	variant(_Tp&& __t)
 8007494:	b590      	push	{r4, r7, lr}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
		  std::forward<_Tp>(__t))
 800749e:	6838      	ldr	r0, [r7, #0]
 80074a0:	f7ff ffed 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80074a4:	4603      	mov	r3, r0
 80074a6:	461a      	mov	r2, r3
 80074a8:	4621      	mov	r1, r4
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff ffce 	bl	800744c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEbvEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4618      	mov	r0, r3
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd90      	pop	{r4, r7, pc}

080074ba <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	7039      	strb	r1, [r7, #0]
	  ::new ((void*)std::addressof(_M_storage))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fd70 	bl	8007fac <_ZSt9addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 80074cc:	4603      	mov	r3, r0
 80074ce:	4619      	mov	r1, r3
 80074d0:	2018      	movs	r0, #24
 80074d2:	f7f9 fd83 	bl	8000fdc <_ZnwjPv>
 80074d6:	4603      	mov	r3, r0
 80074d8:	4618      	mov	r0, r3
 80074da:	f00f faff 	bl	8016adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	}
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	7039      	strb	r1, [r7, #0]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4611      	mov	r1, r2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff ffdf 	bl	80074ba <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	7039      	strb	r1, [r7, #0]
	_M_index(_Np)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4611      	mov	r1, r2
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff ffe7 	bl	80074e8 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJEEESt16in_place_index_tILj0EEDpOT_>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	761a      	strb	r2, [r3, #24]
	{ }
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4618      	mov	r0, r3
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>:
      void _M_reset()
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
	_M_reset_impl();
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 ffd4 	bl	80084e0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEv>
	_M_index = variant_npos;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	22ff      	movs	r2, #255	; 0xff
 800753c:	761a      	strb	r2, [r3, #24]
      }
 800753e:	bf00      	nop
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007546:	b590      	push	{r4, r7, lr}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 ffd7 	bl	8008504 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8007556:	4604      	mov	r4, r0
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 ffdf 	bl	800851c <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 800755e:	4602      	mov	r2, r0
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	4621      	mov	r1, r4
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 ffe5 	bl	8008534 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>
 800756a:	4603      	mov	r3, r0
 800756c:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f825 	bl	80075be <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8007574:	4603      	mov	r3, r0
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	f107 020c 	add.w	r2, r7, #12
 800757c:	f107 0308 	add.w	r3, r7, #8
 8007580:	4611      	mov	r1, r2
 8007582:	4618      	mov	r0, r3
 8007584:	f001 f807 	bl	8008596 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEES6_>
 8007588:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10d      	bne.n	80075aa <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 800758e:	687c      	ldr	r4, [r7, #4]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4618      	mov	r0, r3
 8007594:	f7fd fa2c 	bl	80049f0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8007598:	4603      	mov	r3, r0
 800759a:	461a      	mov	r2, r3
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	4620      	mov	r0, r4
 80075a0:	f7fd fa32 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d004      	beq.n	80075b4 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f807 	bl	80075be <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 80075b0:	4603      	mov	r3, r0
 80075b2:	e000      	b.n	80075b6 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x70>
 80075b4:	68bb      	ldr	r3, [r7, #8]
    }
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd90      	pop	{r4, r7, pc}

080075be <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	1d1a      	adds	r2, r3, #4
 80075ca:	f107 030c 	add.w	r3, r7, #12
 80075ce:	4611      	mov	r1, r2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fff4 	bl	80085be <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1EPKSt18_Rb_tree_node_base>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80075e0:	b590      	push	{r4, r7, lr}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fff6 	bl	80085dc <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 80075f0:	4604      	mov	r4, r0
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fffe 	bl	80085f4 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 80075f8:	4602      	mov	r2, r0
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	4621      	mov	r1, r4
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 f804 	bl	800860c <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>
 8007604:	4603      	mov	r3, r0
 8007606:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f825 	bl	8007658 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 800760e:	4603      	mov	r3, r0
 8007610:	60fb      	str	r3, [r7, #12]
 8007612:	f107 020c 	add.w	r2, r7, #12
 8007616:	f107 0308 	add.w	r3, r7, #8
 800761a:	4611      	mov	r1, r2
 800761c:	4618      	mov	r0, r3
 800761e:	f001 f826 	bl	800866e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEES6_>
 8007622:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10d      	bne.n	8007644 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 8007628:	687c      	ldr	r4, [r7, #4]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	4618      	mov	r0, r3
 800762e:	f7fd fcbe 	bl	8004fae <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8007632:	4603      	mov	r3, r0
 8007634:	461a      	mov	r2, r3
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	4620      	mov	r0, r4
 800763a:	f7fd f9e5 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f807 	bl	8007658 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 800764a:	4603      	mov	r3, r0
 800764c:	e000      	b.n	8007650 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x70>
 800764e:	68bb      	ldr	r3, [r7, #8]
    }
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	bd90      	pop	{r4, r7, pc}

08007658 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	1d1a      	adds	r2, r3, #4
 8007664:	f107 030c 	add.w	r3, r7, #12
 8007668:	4611      	mov	r1, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f001 f813 	bl	8008696 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1EPKSt18_Rb_tree_node_base>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800767a:	b590      	push	{r4, r7, lr}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 f815 	bl	80086b4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 800768a:	4604      	mov	r4, r0
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 f81d 	bl	80086cc <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8007692:	4602      	mov	r2, r0
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	4621      	mov	r1, r4
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 f823 	bl	80086e4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_>
 800769e:	4603      	mov	r3, r0
 80076a0:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f825 	bl	80076f2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 80076a8:	4603      	mov	r3, r0
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	f107 020c 	add.w	r2, r7, #12
 80076b0:	f107 0308 	add.w	r3, r7, #8
 80076b4:	4611      	mov	r1, r2
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 f845 	bl	8008746 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>
 80076bc:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10d      	bne.n	80076de <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 80076c2:	687c      	ldr	r4, [r7, #4]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fd fb27 	bl	8004d1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80076cc:	4603      	mov	r3, r0
 80076ce:	461a      	mov	r2, r3
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	4620      	mov	r0, r4
 80076d4:	f7fd fb2d 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f807 	bl	80076f2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 80076e4:	4603      	mov	r3, r0
 80076e6:	e000      	b.n	80076ea <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x70>
 80076e8:	68bb      	ldr	r3, [r7, #8]
    }
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd90      	pop	{r4, r7, pc}

080076f2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	1d1a      	adds	r2, r3, #4
 80076fe:	f107 030c 	add.w	r3, r7, #12
 8007702:	4611      	mov	r1, r2
 8007704:	4618      	mov	r0, r3
 8007706:	f001 f832 	bl	800876e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPKSt18_Rb_tree_node_base>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007714:	b590      	push	{r4, r7, lr}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	7239      	strb	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	4621      	mov	r1, r4
 8007726:	4618      	mov	r0, r3
 8007728:	f001 f862 	bl	80087f0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4618      	mov	r0, r3
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	bd90      	pop	{r4, r7, pc}

08007736 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007736:	b590      	push	{r4, r7, lr}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	7239      	strb	r1, [r7, #8]
 8007740:	607a      	str	r2, [r7, #4]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	4621      	mov	r1, r4
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff ffe3 	bl	8007714 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	bd90      	pop	{r4, r7, pc}

08007758 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007758:	b590      	push	{r4, r7, lr}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	7239      	strb	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	4621      	mov	r1, r4
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff ffe3 	bl	8007736 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	bd90      	pop	{r4, r7, pc}

0800777a <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800777a:	b590      	push	{r4, r7, lr}
 800777c:	b085      	sub	sp, #20
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	7239      	strb	r1, [r7, #8]
 8007784:	607a      	str	r2, [r7, #4]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	4621      	mov	r1, r4
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff ffe3 	bl	8007758 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	bd90      	pop	{r4, r7, pc}

0800779c <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 800779c:	b5b0      	push	{r4, r5, r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	7239      	strb	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
	: _Base(__i, std::forward<_Args>(__args)...)
 80077a8:	68fc      	ldr	r4, [r7, #12]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff fdb0 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80077b0:	4603      	mov	r3, r0
 80077b2:	461a      	mov	r2, r3
 80077b4:	4629      	mov	r1, r5
 80077b6:	4620      	mov	r0, r4
 80077b8:	f7ff ffdf 	bl	800777a <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bdb0      	pop	{r4, r5, r7, pc}

080077c6 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>:
    _Enable_default_constructor&
    operator=(_Enable_default_constructor&&) noexcept = default;

    // Can be used in other ctors.
    constexpr explicit
    _Enable_default_constructor(_Enable_default_constructor_tag) { }
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	7039      	strb	r1, [r7, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80077de:	b590      	push	{r4, r7, lr}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	7239      	strb	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	4621      	mov	r1, r4
 80077f0:	4618      	mov	r0, r3
 80077f2:	f001 f851 	bl	8008898 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd90      	pop	{r4, r7, pc}

08007800 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007800:	b590      	push	{r4, r7, lr}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	7239      	strb	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4621      	mov	r1, r4
 8007812:	4618      	mov	r0, r3
 8007814:	f7ff ffe3 	bl	80077de <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	bd90      	pop	{r4, r7, pc}

08007822 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007822:	b590      	push	{r4, r7, lr}
 8007824:	b085      	sub	sp, #20
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	7239      	strb	r1, [r7, #8]
 800782c:	607a      	str	r2, [r7, #4]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	4621      	mov	r1, r4
 8007834:	4618      	mov	r0, r3
 8007836:	f7ff ffe3 	bl	8007800 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	bd90      	pop	{r4, r7, pc}

08007844 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007844:	b590      	push	{r4, r7, lr}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	7239      	strb	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	4621      	mov	r1, r4
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff ffe3 	bl	8007822 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	bd90      	pop	{r4, r7, pc}

08007866 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8007866:	b5b0      	push	{r4, r5, r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	7239      	strb	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
	: _Base(__i, std::forward<_Args>(__args)...)
 8007872:	68fc      	ldr	r4, [r7, #12]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff fd82 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800787a:	4603      	mov	r3, r0
 800787c:	461a      	mov	r2, r3
 800787e:	4629      	mov	r1, r5
 8007880:	4620      	mov	r0, r4
 8007882:	f7ff ffdf 	bl	8007844 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bdb0      	pop	{r4, r5, r7, pc}

08007890 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007890:	b590      	push	{r4, r7, lr}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	7239      	strb	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	4621      	mov	r1, r4
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 f861 	bl	800896a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd90      	pop	{r4, r7, pc}

080078b2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80078b2:	b590      	push	{r4, r7, lr}
 80078b4:	b085      	sub	sp, #20
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	7239      	strb	r1, [r7, #8]
 80078bc:	607a      	str	r2, [r7, #4]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	4621      	mov	r1, r4
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff ffe3 	bl	8007890 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd90      	pop	{r4, r7, pc}

080078d4 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80078d4:	b590      	push	{r4, r7, lr}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	7239      	strb	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	4621      	mov	r1, r4
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff ffe3 	bl	80078b2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd90      	pop	{r4, r7, pc}

080078f6 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80078f6:	b590      	push	{r4, r7, lr}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	7239      	strb	r1, [r7, #8]
 8007900:	607a      	str	r2, [r7, #4]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	4621      	mov	r1, r4
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff ffe3 	bl	80078d4 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	bd90      	pop	{r4, r7, pc}

08007918 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8007918:	b5b0      	push	{r4, r5, r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	7239      	strb	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
	: _Base(__i, std::forward<_Args>(__args)...)
 8007924:	68fc      	ldr	r4, [r7, #12]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff fd60 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800792c:	4603      	mov	r3, r0
 800792e:	461a      	mov	r2, r3
 8007930:	4629      	mov	r1, r5
 8007932:	4620      	mov	r0, r4
 8007934:	f7ff ffdf 	bl	80078f6 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bdb0      	pop	{r4, r5, r7, pc}

08007942 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>:
      constexpr _Variadic_union() : _M_rest() { }
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4618      	mov	r0, r3
 800794e:	f001 f824 	bl	800899a <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1Ev>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4618      	mov	r0, r3
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>:
      constexpr _Variant_storage() : _M_index(variant_npos) { }
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4618      	mov	r0, r3
 8007968:	f7ff ffeb 	bl	8007942 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	22ff      	movs	r2, #255	; 0xff
 8007970:	761a      	strb	r2, [r3, #24]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERKNSt8__detail9__variant15_Copy_ctor_baseILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
	    return static_cast<const variant<_Types...>&>(__rhs);
 8007984:	687b      	ldr	r3, [r7, #4]
    }
 8007986:	4618      	mov	r0, r3
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	7138      	strb	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800799c:	6838      	ldr	r0, [r7, #0]
 800799e:	f001 f82a 	bl	80089f6 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 80079a2:	4603      	mov	r3, r0
 80079a4:	4618      	mov	r0, r3
 80079a6:	f001 f831 	bl	8008a0c <_ZNKRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>
 80079aa:	4603      	mov	r3, r0
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <_ZNSt8__detail9__variant5__getILj0ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80079b4:	b590      	push	{r4, r7, lr}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 f80f 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 80079c2:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 80079c4:	4619      	mov	r1, r3
 80079c6:	4620      	mov	r0, r4
 80079c8:	f7ff ffe3 	bl	8007992 <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 80079cc:	4603      	mov	r3, r0
    }
 80079ce:	4618      	mov	r0, r3
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd90      	pop	{r4, r7, pc}

080079d6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESR_EEDcSH_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fffe 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 80079e4:	4603      	mov	r3, r0
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff ffe4 	bl	80079b4 <_ZNSt8__detail9__variant5__getILj0ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 80079ec:	4603      	mov	r3, r0
	}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESN_SR_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 80079f6:	b5b0      	push	{r4, r5, r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 ffe2 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007a06:	4604      	mov	r4, r0
 8007a08:	6838      	ldr	r0, [r7, #0]
 8007a0a:	f000 ffe9 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff ffe0 	bl	80079d6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESR_EEDcSH_>
 8007a16:	4603      	mov	r3, r0
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f001 f803 	bl	8008a26 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKS8_EENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>
		std::forward<_Variants>(__vars))...);
 8007a20:	462b      	mov	r3, r5
      }
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bdb0      	pop	{r4, r5, r7, pc}

08007a2a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESN_SR_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007a2a:	b5b0      	push	{r4, r5, r7, lr}
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 ffc8 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	6838      	ldr	r0, [r7, #0]
 8007a3e:	f000 ffcf 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007a42:	4603      	mov	r3, r0
 8007a44:	4619      	mov	r1, r3
 8007a46:	4620      	mov	r0, r4
 8007a48:	f7ff ffd5 	bl	80079f6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007a4c:	462b      	mov	r3, r5
      }
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bdb0      	pop	{r4, r5, r7, pc}

08007a56 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESN_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007a56:	b5b0      	push	{r4, r5, r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 ffb2 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007a66:	4604      	mov	r4, r0
 8007a68:	6838      	ldr	r0, [r7, #0]
 8007a6a:	f000 ffb9 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	4619      	mov	r1, r3
 8007a72:	4620      	mov	r0, r4
 8007a74:	f7ff ffd9 	bl	8007a2a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007a78:	462b      	mov	r3, r5
      }
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bdb0      	pop	{r4, r5, r7, pc}

08007a82 <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	7138      	strb	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8007a8c:	6838      	ldr	r0, [r7, #0]
 8007a8e:	f000 ffe1 	bl	8008a54 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007a92:	4603      	mov	r3, r0
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 ffe8 	bl	8008a6a <_ZNKRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007aa4:	b590      	push	{r4, r7, lr}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	7138      	strb	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007aae:	6838      	ldr	r0, [r7, #0]
 8007ab0:	f000 ffa1 	bl	80089f6 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8007ab4:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f7ff ffe2 	bl	8007a82 <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8007abe:	4603      	mov	r3, r0
    }
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd90      	pop	{r4, r7, pc}

08007ac8 <_ZNSt8__detail9__variant5__getILj1ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8007ac8:	b590      	push	{r4, r7, lr}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 ff85 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007ad6:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4620      	mov	r0, r4
 8007adc:	f7ff ffe2 	bl	8007aa4 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007ae0:	4603      	mov	r3, r0
    }
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd90      	pop	{r4, r7, pc}

08007aea <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESR_EEDcSH_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 ff74 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007af8:	4603      	mov	r3, r0
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff ffe4 	bl	8007ac8 <_ZNSt8__detail9__variant5__getILj1ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8007b00:	4603      	mov	r3, r0
	}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESN_SR_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8007b0a:	b5b0      	push	{r4, r5, r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 ff58 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	6838      	ldr	r0, [r7, #0]
 8007b1e:	f000 ff5f 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007b22:	4603      	mov	r3, r0
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7ff ffe0 	bl	8007aea <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESR_EEDcSH_>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f000 ffa6 	bl	8008a80 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKiEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>
		std::forward<_Variants>(__vars))...);
 8007b34:	462b      	mov	r3, r5
      }
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bdb0      	pop	{r4, r5, r7, pc}

08007b3e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESN_SR_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007b3e:	b5b0      	push	{r4, r5, r7, lr}
 8007b40:	b082      	sub	sp, #8
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 ff3e 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007b4e:	4604      	mov	r4, r0
 8007b50:	6838      	ldr	r0, [r7, #0]
 8007b52:	f000 ff45 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007b56:	4603      	mov	r3, r0
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f7ff ffd5 	bl	8007b0a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007b60:	462b      	mov	r3, r5
      }
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bdb0      	pop	{r4, r5, r7, pc}

08007b6a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESN_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007b6a:	b5b0      	push	{r4, r5, r7, lr}
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 ff28 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	6838      	ldr	r0, [r7, #0]
 8007b7e:	f000 ff2f 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007b82:	4603      	mov	r3, r0
 8007b84:	4619      	mov	r1, r3
 8007b86:	4620      	mov	r0, r4
 8007b88:	f7ff ffd9 	bl	8007b3e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007b8c:	462b      	mov	r3, r5
      }
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bdb0      	pop	{r4, r5, r7, pc}

08007b96 <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	7138      	strb	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8007ba0:	6838      	ldr	r0, [r7, #0]
 8007ba2:	f000 ff84 	bl	8008aae <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 ff8b 	bl	8008ac4 <_ZNKRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007bb8:	b590      	push	{r4, r7, lr}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	7138      	strb	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007bc2:	6838      	ldr	r0, [r7, #0]
 8007bc4:	f000 ff46 	bl	8008a54 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007bc8:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f7ff ffe2 	bl	8007b96 <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8007bd2:	4603      	mov	r3, r0
    }
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd90      	pop	{r4, r7, pc}

08007bdc <_ZNSt8__detail9__variant5__getILj2ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007bdc:	b590      	push	{r4, r7, lr}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	7138      	strb	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007be6:	6838      	ldr	r0, [r7, #0]
 8007be8:	f000 ff05 	bl	80089f6 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8007bec:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007bee:	4619      	mov	r1, r3
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f7ff ffe1 	bl	8007bb8 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007bf6:	4603      	mov	r3, r0
    }
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd90      	pop	{r4, r7, pc}

08007c00 <_ZNSt8__detail9__variant5__getILj2ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8007c00:	b590      	push	{r4, r7, lr}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fee9 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007c0e:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8007c10:	4619      	mov	r1, r3
 8007c12:	4620      	mov	r0, r4
 8007c14:	f7ff ffe2 	bl	8007bdc <_ZNSt8__detail9__variant5__getILj2ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007c18:	4603      	mov	r3, r0
    }
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd90      	pop	{r4, r7, pc}

08007c22 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESR_EEDcSH_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fed8 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007c30:	4603      	mov	r3, r0
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff ffe4 	bl	8007c00 <_ZNSt8__detail9__variant5__getILj2ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8007c38:	4603      	mov	r3, r0
	}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESN_SR_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8007c42:	b5b0      	push	{r4, r5, r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 febc 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007c52:	4604      	mov	r4, r0
 8007c54:	6838      	ldr	r0, [r7, #0]
 8007c56:	f000 fec3 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff ffe0 	bl	8007c22 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESR_EEDcSH_>
 8007c62:	4603      	mov	r3, r0
 8007c64:	4619      	mov	r1, r3
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 ff37 	bl	8008ada <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKfEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>
		std::forward<_Variants>(__vars))...);
 8007c6c:	462b      	mov	r3, r5
      }
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bdb0      	pop	{r4, r5, r7, pc}

08007c76 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESN_SR_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007c76:	b5b0      	push	{r4, r5, r7, lr}
 8007c78:	b082      	sub	sp, #8
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fea2 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007c86:	4604      	mov	r4, r0
 8007c88:	6838      	ldr	r0, [r7, #0]
 8007c8a:	f000 fea9 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4619      	mov	r1, r3
 8007c92:	4620      	mov	r0, r4
 8007c94:	f7ff ffd5 	bl	8007c42 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007c98:	462b      	mov	r3, r5
      }
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bdb0      	pop	{r4, r5, r7, pc}

08007ca2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESN_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007ca2:	b5b0      	push	{r4, r5, r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fe8c 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	6838      	ldr	r0, [r7, #0]
 8007cb6:	f000 fe93 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f7ff ffd9 	bl	8007c76 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007cc4:	462b      	mov	r3, r5
      }
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bdb0      	pop	{r4, r5, r7, pc}

08007cce <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	7138      	strb	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8007cd8:	6838      	ldr	r0, [r7, #0]
 8007cda:	f000 ff15 	bl	8008b08 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 ff1c 	bl	8008b1e <_ZNKRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007cf0:	b590      	push	{r4, r7, lr}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	7138      	strb	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007cfa:	6838      	ldr	r0, [r7, #0]
 8007cfc:	f000 fed7 	bl	8008aae <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007d00:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007d02:	4619      	mov	r1, r3
 8007d04:	4620      	mov	r0, r4
 8007d06:	f7ff ffe2 	bl	8007cce <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8007d0a:	4603      	mov	r3, r0
    }
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd90      	pop	{r4, r7, pc}

08007d14 <_ZNSt8__detail9__variant5__getILj2ERKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007d14:	b590      	push	{r4, r7, lr}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	7138      	strb	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007d1e:	6838      	ldr	r0, [r7, #0]
 8007d20:	f000 fe98 	bl	8008a54 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007d24:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007d26:	4619      	mov	r1, r3
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f7ff ffe1 	bl	8007cf0 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007d2e:	4603      	mov	r3, r0
    }
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd90      	pop	{r4, r7, pc}

08007d38 <_ZNSt8__detail9__variant5__getILj3ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007d38:	b590      	push	{r4, r7, lr}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	7138      	strb	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007d42:	6838      	ldr	r0, [r7, #0]
 8007d44:	f000 fe57 	bl	80089f6 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8007d48:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f7ff ffe1 	bl	8007d14 <_ZNSt8__detail9__variant5__getILj2ERKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007d52:	4603      	mov	r3, r0
    }
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd90      	pop	{r4, r7, pc}

08007d5c <_ZNSt8__detail9__variant5__getILj3ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8007d5c:	b590      	push	{r4, r7, lr}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fe3b 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007d6a:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f7ff ffe2 	bl	8007d38 <_ZNSt8__detail9__variant5__getILj3ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007d74:	4603      	mov	r3, r0
    }
 8007d76:	4618      	mov	r0, r3
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd90      	pop	{r4, r7, pc}

08007d7e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESR_EEDcSH_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fe2a 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff ffe4 	bl	8007d5c <_ZNSt8__detail9__variant5__getILj3ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8007d94:	4603      	mov	r3, r0
	}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESN_SR_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8007d9e:	b5b0      	push	{r4, r5, r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fe0e 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007dae:	4604      	mov	r4, r0
 8007db0:	6838      	ldr	r0, [r7, #0]
 8007db2:	f000 fe15 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007db6:	4603      	mov	r3, r0
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7ff ffe0 	bl	8007d7e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESR_EEDcSH_>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f000 feb6 	bl	8008b34 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKbEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>
		std::forward<_Variants>(__vars))...);
 8007dc8:	462b      	mov	r3, r5
      }
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bdb0      	pop	{r4, r5, r7, pc}

08007dd2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESN_SR_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007dd2:	b5b0      	push	{r4, r5, r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fdf4 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007de2:	4604      	mov	r4, r0
 8007de4:	6838      	ldr	r0, [r7, #0]
 8007de6:	f000 fdfb 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007dea:	4603      	mov	r3, r0
 8007dec:	4619      	mov	r1, r3
 8007dee:	4620      	mov	r0, r4
 8007df0:	f7ff ffd5 	bl	8007d9e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007df4:	462b      	mov	r3, r5
      }
 8007df6:	4618      	mov	r0, r3
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bdb0      	pop	{r4, r5, r7, pc}

08007dfe <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESN_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007dfe:	b5b0      	push	{r4, r5, r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fdde 	bl	80089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007e0e:	4604      	mov	r4, r0
 8007e10:	6838      	ldr	r0, [r7, #0]
 8007e12:	f000 fde5 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007e16:	4603      	mov	r3, r0
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f7ff ffd9 	bl	8007dd2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007e20:	462b      	mov	r3, r5
      }
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bdb0      	pop	{r4, r5, r7, pc}

08007e2a <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSS_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 fe90 	bl	8008b62 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS9_ifbEEEJEE9_M_accessEv>
 8007e42:	4603      	mov	r3, r0
	}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>:
      constexpr size_t index() const noexcept
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
	if (this->_M_index ==
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	7e1b      	ldrb	r3, [r3, #24]
 8007e58:	2bff      	cmp	r3, #255	; 0xff
 8007e5a:	d102      	bne.n	8007e62 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv+0x16>
	  return variant_npos;
 8007e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e60:	e001      	b.n	8007e66 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv+0x1a>
	return this->_M_index;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	7e1b      	ldrb	r3, [r3, #24]
      }
 8007e66:	4618      	mov	r0, r3
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
	...

08007e74 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS8_ifbEEEEDcSH_DpOT2_>:
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 8007e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 8007e7e:	4b0f      	ldr	r3, [pc, #60]	; (8007ebc <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS8_ifbEEEEDcSH_DpOT2_+0x48>)
 8007e80:	60fb      	str	r3, [r7, #12]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 8007e82:	6838      	ldr	r0, [r7, #0]
 8007e84:	f7ff ffe2 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f7ff ffcc 	bl	8007e2a <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSS_jDpT_>
 8007e92:	4603      	mov	r3, r0
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 8007e98:	68bc      	ldr	r4, [r7, #8]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fe6c 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	6838      	ldr	r0, [r7, #0]
 8007ea4:	f000 fd9c 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4628      	mov	r0, r5
 8007eae:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 8007eb0:	4633      	mov	r3, r6
    }
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	0801a434 	.word	0x0801a434

08007ec0 <_ZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_>:
    void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
      __lhs._M_index = __rhs._M_index;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	7e1a      	ldrb	r2, [r3, #24]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	761a      	strb	r2, [r3, #24]
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	6838      	ldr	r0, [r7, #0]
 8007ed8:	f000 fd6c 	bl	80089b4 <_ZSt7forwardIRKNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8007edc:	4603      	mov	r3, r0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7ff fd4c 	bl	800797c <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERKNSt8__detail9__variant15_Copy_ctor_baseILb0EJS5_ifbEEEEDcOT0_>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	f107 030c 	add.w	r3, r7, #12
 8007eea:	4611      	mov	r1, r2
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff ffc1 	bl	8007e74 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS8_ifbEEEEDcSH_DpOT2_>
    }
 8007ef2:	bf00      	nop
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007efa:	b590      	push	{r4, r7, lr}
 8007efc:	b085      	sub	sp, #20
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	7239      	strb	r1, [r7, #8]
 8007f04:	607a      	str	r2, [r7, #4]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 fea8 	bl	8008c62 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd90      	pop	{r4, r7, pc}

08007f1c <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007f1c:	b590      	push	{r4, r7, lr}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	7239      	strb	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff ffe3 	bl	8007efa <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd90      	pop	{r4, r7, pc}

08007f3e <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007f3e:	b590      	push	{r4, r7, lr}
 8007f40:	b085      	sub	sp, #20
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	7239      	strb	r1, [r7, #8]
 8007f48:	607a      	str	r2, [r7, #4]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff ffe3 	bl	8007f1c <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd90      	pop	{r4, r7, pc}

08007f60 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007f60:	b590      	push	{r4, r7, lr}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	7239      	strb	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	4621      	mov	r1, r4
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7ff ffe3 	bl	8007f3e <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd90      	pop	{r4, r7, pc}

08007f82 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8007f82:	b5b0      	push	{r4, r5, r7, lr}
 8007f84:	b084      	sub	sp, #16
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	7239      	strb	r1, [r7, #8]
 8007f8c:	607a      	str	r2, [r7, #4]
	: _Base(__i, std::forward<_Args>(__args)...)
 8007f8e:	68fc      	ldr	r4, [r7, #12]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff fa74 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8007f96:	4603      	mov	r3, r0
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f7ff ffdf 	bl	8007f60 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bdb0      	pop	{r4, r5, r7, pc}

08007fac <_ZSt9addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>:
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */
  template<typename _Tp>
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fe6c 	bl	8008c92 <_ZSt11__addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant16_Variant_storageILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
	    return static_cast<variant<_Types...>&>(__rhs);
 8007fcc:	687b      	ldr	r3, [r7, #4]
    }
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b082      	sub	sp, #8
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	7138      	strb	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8007fe4:	6838      	ldr	r0, [r7, #0]
 8007fe6:	f000 fe75 	bl	8008cd4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8007fea:	4603      	mov	r3, r0
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fc fb28 	bl	8004642 <_ZNRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8007ffc:	b590      	push	{r4, r7, lr}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fe5a 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800800a:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800800c:	4619      	mov	r1, r3
 800800e:	4620      	mov	r0, r4
 8008010:	f7ff ffe3 	bl	8007fda <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8008014:	4603      	mov	r3, r0
    }
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	bd90      	pop	{r4, r7, pc}

0800801e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESI_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fe49 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800802c:	4603      	mov	r3, r0
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff ffe4 	bl	8007ffc <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8008034:	4603      	mov	r3, r0
	}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESF_SI_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800803e:	b5b0      	push	{r4, r5, r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fe2d 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 800804e:	4604      	mov	r4, r0
 8008050:	6838      	ldr	r0, [r7, #0]
 8008052:	f000 fe34 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008056:	4603      	mov	r3, r0
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff ffe0 	bl	800801e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESI_EEDcOT0_>
 800805e:	4603      	mov	r3, r0
 8008060:	4619      	mov	r1, r3
 8008062:	4620      	mov	r0, r4
 8008064:	f000 fe41 	bl	8008cea <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRS8_EENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>
		std::forward<_Variants>(__vars))...);
 8008068:	462b      	mov	r3, r5
      }
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bdb0      	pop	{r4, r5, r7, pc}

08008072 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESF_SI_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8008072:	b5b0      	push	{r4, r5, r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fe13 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008082:	4604      	mov	r4, r0
 8008084:	6838      	ldr	r0, [r7, #0]
 8008086:	f000 fe1a 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800808a:	4603      	mov	r3, r0
 800808c:	4619      	mov	r1, r3
 800808e:	4620      	mov	r0, r4
 8008090:	f7ff ffd5 	bl	800803e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESF_SI_>
				   std::forward<_Variants>(__vars)...);
 8008094:	462b      	mov	r3, r5
      }
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bdb0      	pop	{r4, r5, r7, pc}

0800809e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESF_SI_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800809e:	b5b0      	push	{r4, r5, r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fdfd 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80080ae:	4604      	mov	r4, r0
 80080b0:	6838      	ldr	r0, [r7, #0]
 80080b2:	f000 fe04 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80080b6:	4603      	mov	r3, r0
 80080b8:	4619      	mov	r1, r3
 80080ba:	4620      	mov	r0, r4
 80080bc:	f7ff ffd9 	bl	8008072 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESF_SI_>
				   std::forward<_Variants>(__vars)...);
 80080c0:	462b      	mov	r3, r5
      }
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bdb0      	pop	{r4, r5, r7, pc}

080080ca <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	7138      	strb	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80080d4:	6838      	ldr	r0, [r7, #0]
 80080d6:	f000 fe1f 	bl	8008d18 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80080da:	4603      	mov	r3, r0
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fc fa6c 	bl	80045ba <_ZNRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>
 80080e2:	4603      	mov	r3, r0
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80080ec:	b590      	push	{r4, r7, lr}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	7138      	strb	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80080f6:	6838      	ldr	r0, [r7, #0]
 80080f8:	f000 fdec 	bl	8008cd4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 80080fc:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80080fe:	4619      	mov	r1, r3
 8008100:	4620      	mov	r0, r4
 8008102:	f7ff ffe2 	bl	80080ca <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8008106:	4603      	mov	r3, r0
    }
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	bd90      	pop	{r4, r7, pc}

08008110 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8008110:	b590      	push	{r4, r7, lr}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fdd0 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800811e:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8008120:	4619      	mov	r1, r3
 8008122:	4620      	mov	r0, r4
 8008124:	f7ff ffe2 	bl	80080ec <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8008128:	4603      	mov	r3, r0
    }
 800812a:	4618      	mov	r0, r3
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	bd90      	pop	{r4, r7, pc}

08008132 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESI_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fdbf 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008140:	4603      	mov	r3, r0
 8008142:	4618      	mov	r0, r3
 8008144:	f7ff ffe4 	bl	8008110 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8008148:	4603      	mov	r3, r0
	}
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESF_SI_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8008152:	b5b0      	push	{r4, r5, r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fda3 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008162:	4604      	mov	r4, r0
 8008164:	6838      	ldr	r0, [r7, #0]
 8008166:	f000 fdaa 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800816a:	4603      	mov	r3, r0
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff ffe0 	bl	8008132 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESI_EEDcOT0_>
 8008172:	4603      	mov	r3, r0
 8008174:	4619      	mov	r1, r3
 8008176:	4620      	mov	r0, r4
 8008178:	f000 fdd9 	bl	8008d2e <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRiEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>
		std::forward<_Variants>(__vars))...);
 800817c:	462b      	mov	r3, r5
      }
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bdb0      	pop	{r4, r5, r7, pc}

08008186 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESF_SI_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8008186:	b5b0      	push	{r4, r5, r7, lr}
 8008188:	b082      	sub	sp, #8
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fd89 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008196:	4604      	mov	r4, r0
 8008198:	6838      	ldr	r0, [r7, #0]
 800819a:	f000 fd90 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800819e:	4603      	mov	r3, r0
 80081a0:	4619      	mov	r1, r3
 80081a2:	4620      	mov	r0, r4
 80081a4:	f7ff ffd5 	bl	8008152 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESF_SI_>
				   std::forward<_Variants>(__vars)...);
 80081a8:	462b      	mov	r3, r5
      }
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bdb0      	pop	{r4, r5, r7, pc}

080081b2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESF_SI_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80081b2:	b5b0      	push	{r4, r5, r7, lr}
 80081b4:	b082      	sub	sp, #8
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fd73 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80081c2:	4604      	mov	r4, r0
 80081c4:	6838      	ldr	r0, [r7, #0]
 80081c6:	f000 fd7a 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80081ca:	4603      	mov	r3, r0
 80081cc:	4619      	mov	r1, r3
 80081ce:	4620      	mov	r0, r4
 80081d0:	f7ff ffd9 	bl	8008186 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESF_SI_>
				   std::forward<_Variants>(__vars)...);
 80081d4:	462b      	mov	r3, r5
      }
 80081d6:	4618      	mov	r0, r3
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bdb0      	pop	{r4, r5, r7, pc}

080081de <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	7138      	strb	r0, [r7, #4]
 80081e6:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80081e8:	6838      	ldr	r0, [r7, #0]
 80081ea:	f000 fdb7 	bl	8008d5c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80081ee:	4603      	mov	r3, r0
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fc fa04 	bl	80045fe <_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>
 80081f6:	4603      	mov	r3, r0
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8008200:	b590      	push	{r4, r7, lr}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	7138      	strb	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800820a:	6838      	ldr	r0, [r7, #0]
 800820c:	f000 fd84 	bl	8008d18 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008210:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8008212:	4619      	mov	r1, r3
 8008214:	4620      	mov	r0, r4
 8008216:	f7ff ffe2 	bl	80081de <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>
 800821a:	4603      	mov	r3, r0
    }
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	bd90      	pop	{r4, r7, pc}

08008224 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8008224:	b590      	push	{r4, r7, lr}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	7138      	strb	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800822e:	6838      	ldr	r0, [r7, #0]
 8008230:	f000 fd50 	bl	8008cd4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8008234:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8008236:	4619      	mov	r1, r3
 8008238:	4620      	mov	r0, r4
 800823a:	f7ff ffe1 	bl	8008200 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800823e:	4603      	mov	r3, r0
    }
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	bd90      	pop	{r4, r7, pc}

08008248 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8008248:	b590      	push	{r4, r7, lr}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fd34 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008256:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8008258:	4619      	mov	r1, r3
 800825a:	4620      	mov	r0, r4
 800825c:	f7ff ffe2 	bl	8008224 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8008260:	4603      	mov	r3, r0
    }
 8008262:	4618      	mov	r0, r3
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	bd90      	pop	{r4, r7, pc}

0800826a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESI_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fd23 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008278:	4603      	mov	r3, r0
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff ffe4 	bl	8008248 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8008280:	4603      	mov	r3, r0
	}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESF_SI_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800828a:	b5b0      	push	{r4, r5, r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fd07 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 800829a:	4604      	mov	r4, r0
 800829c:	6838      	ldr	r0, [r7, #0]
 800829e:	f000 fd0e 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80082a2:	4603      	mov	r3, r0
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff ffe0 	bl	800826a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESI_EEDcOT0_>
 80082aa:	4603      	mov	r3, r0
 80082ac:	4619      	mov	r1, r3
 80082ae:	4620      	mov	r0, r4
 80082b0:	f000 fd5f 	bl	8008d72 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRfEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>
		std::forward<_Variants>(__vars))...);
 80082b4:	462b      	mov	r3, r5
      }
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bdb0      	pop	{r4, r5, r7, pc}

080082be <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESF_SI_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80082be:	b5b0      	push	{r4, r5, r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fced 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80082ce:	4604      	mov	r4, r0
 80082d0:	6838      	ldr	r0, [r7, #0]
 80082d2:	f000 fcf4 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80082d6:	4603      	mov	r3, r0
 80082d8:	4619      	mov	r1, r3
 80082da:	4620      	mov	r0, r4
 80082dc:	f7ff ffd5 	bl	800828a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESF_SI_>
				   std::forward<_Variants>(__vars)...);
 80082e0:	462b      	mov	r3, r5
      }
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bdb0      	pop	{r4, r5, r7, pc}

080082ea <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESF_SI_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80082ea:	b5b0      	push	{r4, r5, r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fcd7 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80082fa:	4604      	mov	r4, r0
 80082fc:	6838      	ldr	r0, [r7, #0]
 80082fe:	f000 fcde 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008302:	4603      	mov	r3, r0
 8008304:	4619      	mov	r1, r3
 8008306:	4620      	mov	r0, r4
 8008308:	f7ff ffd9 	bl	80082be <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESF_SI_>
				   std::forward<_Variants>(__vars)...);
 800830c:	462b      	mov	r3, r5
      }
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bdb0      	pop	{r4, r5, r7, pc}

08008316 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	7138      	strb	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8008320:	6838      	ldr	r0, [r7, #0]
 8008322:	f000 fd3d 	bl	8008da0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008326:	4603      	mov	r3, r0
 8008328:	4618      	mov	r0, r3
 800832a:	f7fc f924 	bl	8004576 <_ZNRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>
 800832e:	4603      	mov	r3, r0
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8008338:	b590      	push	{r4, r7, lr}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	7138      	strb	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8008342:	6838      	ldr	r0, [r7, #0]
 8008344:	f000 fd0a 	bl	8008d5c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008348:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800834a:	4619      	mov	r1, r3
 800834c:	4620      	mov	r0, r4
 800834e:	f7ff ffe2 	bl	8008316 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8008352:	4603      	mov	r3, r0
    }
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	bd90      	pop	{r4, r7, pc}

0800835c <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800835c:	b590      	push	{r4, r7, lr}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	7138      	strb	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8008366:	6838      	ldr	r0, [r7, #0]
 8008368:	f000 fcd6 	bl	8008d18 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800836c:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800836e:	4619      	mov	r1, r3
 8008370:	4620      	mov	r0, r4
 8008372:	f7ff ffe1 	bl	8008338 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8008376:	4603      	mov	r3, r0
    }
 8008378:	4618      	mov	r0, r3
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	bd90      	pop	{r4, r7, pc}

08008380 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8008380:	b590      	push	{r4, r7, lr}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	7138      	strb	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800838a:	6838      	ldr	r0, [r7, #0]
 800838c:	f000 fca2 	bl	8008cd4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8008390:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8008392:	4619      	mov	r1, r3
 8008394:	4620      	mov	r0, r4
 8008396:	f7ff ffe1 	bl	800835c <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800839a:	4603      	mov	r3, r0
    }
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd90      	pop	{r4, r7, pc}

080083a4 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80083a4:	b590      	push	{r4, r7, lr}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fc86 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80083b2:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 80083b4:	4619      	mov	r1, r3
 80083b6:	4620      	mov	r0, r4
 80083b8:	f7ff ffe2 	bl	8008380 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80083bc:	4603      	mov	r3, r0
    }
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd90      	pop	{r4, r7, pc}

080083c6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESI_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fc75 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80083d4:	4603      	mov	r3, r0
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7ff ffe4 	bl	80083a4 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 80083dc:	4603      	mov	r3, r0
	}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESF_SI_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 80083e6:	b5b0      	push	{r4, r5, r7, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fc59 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80083f6:	4604      	mov	r4, r0
 80083f8:	6838      	ldr	r0, [r7, #0]
 80083fa:	f000 fc60 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80083fe:	4603      	mov	r3, r0
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff ffe0 	bl	80083c6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESI_EEDcOT0_>
 8008406:	4603      	mov	r3, r0
 8008408:	4619      	mov	r1, r3
 800840a:	4620      	mov	r0, r4
 800840c:	f000 fcd3 	bl	8008db6 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRbEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>
		std::forward<_Variants>(__vars))...);
 8008410:	462b      	mov	r3, r5
      }
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bdb0      	pop	{r4, r5, r7, pc}

0800841a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESF_SI_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800841a:	b5b0      	push	{r4, r5, r7, lr}
 800841c:	b082      	sub	sp, #8
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fc3f 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 800842a:	4604      	mov	r4, r0
 800842c:	6838      	ldr	r0, [r7, #0]
 800842e:	f000 fc46 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008432:	4603      	mov	r3, r0
 8008434:	4619      	mov	r1, r3
 8008436:	4620      	mov	r0, r4
 8008438:	f7ff ffd5 	bl	80083e6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESF_SI_>
				   std::forward<_Variants>(__vars)...);
 800843c:	462b      	mov	r3, r5
      }
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bdb0      	pop	{r4, r5, r7, pc}

08008446 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESF_SI_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8008446:	b5b0      	push	{r4, r5, r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fc29 	bl	8008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008456:	4604      	mov	r4, r0
 8008458:	6838      	ldr	r0, [r7, #0]
 800845a:	f000 fc30 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800845e:	4603      	mov	r3, r0
 8008460:	4619      	mov	r1, r3
 8008462:	4620      	mov	r0, r4
 8008464:	f7ff ffd9 	bl	800841a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESF_SI_>
				   std::forward<_Variants>(__vars)...);
 8008468:	462b      	mov	r3, r5
      }
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bdb0      	pop	{r4, r5, r7, pc}

08008472 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSJ_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	4413      	add	r3, r2
 8008484:	4618      	mov	r0, r3
 8008486:	f000 fcad 	bl	8008de4 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJS9_ifbEEEJEE9_M_accessEv>
 800848a:	4603      	mov	r3, r0
	}
 800848c:	4618      	mov	r0, r3
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>:
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 8008494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 800849e:	4b0f      	ldr	r3, [pc, #60]	; (80084dc <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_+0x48>)
 80084a0:	60fb      	str	r3, [r7, #12]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 80084a2:	6838      	ldr	r0, [r7, #0]
 80084a4:	f7ff fcd2 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 80084a8:	4603      	mov	r3, r0
 80084aa:	4619      	mov	r1, r3
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f7ff ffe0 	bl	8008472 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSJ_jDpT_>
 80084b2:	4603      	mov	r3, r0
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 80084b8:	68bc      	ldr	r4, [r7, #8]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fc9d 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80084c0:	4605      	mov	r5, r0
 80084c2:	6838      	ldr	r0, [r7, #0]
 80084c4:	f000 fbfb 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80084c8:	4603      	mov	r3, r0
 80084ca:	4619      	mov	r1, r3
 80084cc:	4628      	mov	r0, r5
 80084ce:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 80084d0:	4633      	mov	r3, r6
    }
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084da:	bf00      	nop
 80084dc:	0801a444 	.word	0x0801a444

080084e0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEv>:
      constexpr void _M_reset_impl()
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
	__do_visit([](auto&& __this_mem) mutable
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7ff fd6b 	bl	8007fc4 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant16_Variant_storageILb0EJS5_ifbEEEEDcOT0_>
 80084ee:	4602      	mov	r2, r0
 80084f0:	f107 030c 	add.w	r3, r7, #12
 80084f4:	4611      	mov	r1, r2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff ffcc 	bl	8008494 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>
      }
 80084fc:	bf00      	nop
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	689b      	ldr	r3, [r3, #8]
      }
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3304      	adds	r3, #4
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008534:	b590      	push	{r4, r7, lr}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
 8008540:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d01b      	beq.n	8008580 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8008548:	68fc      	ldr	r4, [r7, #12]
 800854a:	68b8      	ldr	r0, [r7, #8]
 800854c:	f7fc ff57 	bl	80053fe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8008550:	4603      	mov	r3, r0
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	4619      	mov	r1, r3
 8008556:	4620      	mov	r0, r4
 8008558:	f7fc fa56 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 800855c:	4603      	mov	r3, r0
 800855e:	f083 0301 	eor.w	r3, r3, #1
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b00      	cmp	r3, #0
 8008566:	d006      	beq.n	8008576 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	607b      	str	r3, [r7, #4]
 800856c:	68b8      	ldr	r0, [r7, #8]
 800856e:	f000 fc4f 	bl	8008e10 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8008572:	60b8      	str	r0, [r7, #8]
 8008574:	e7e5      	b.n	8008542 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8008576:	68b8      	ldr	r0, [r7, #8]
 8008578:	f000 fc56 	bl	8008e28 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>
 800857c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800857e:	e7e0      	b.n	8008542 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 8008580:	f107 0314 	add.w	r3, r7, #20
 8008584:	6879      	ldr	r1, [r7, #4]
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f819 	bl	80085be <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1EPKSt18_Rb_tree_node_base>
 800858c:	697b      	ldr	r3, [r7, #20]
    }
 800858e:	4618      	mov	r0, r3
 8008590:	371c      	adds	r7, #28
 8008592:	46bd      	mov	sp, r7
 8008594:	bd90      	pop	{r4, r7, pc}

08008596 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8008596:	b480      	push	{r7}
 8008598:	b083      	sub	sp, #12
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	bf0c      	ite	eq
 80085ac:	2301      	moveq	r3, #1
 80085ae:	2300      	movne	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	4618      	mov	r0, r3
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	689b      	ldr	r3, [r3, #8]
      }
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3304      	adds	r3, #4
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800860c:	b590      	push	{r4, r7, lr}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01b      	beq.n	8008658 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8008620:	68fc      	ldr	r4, [r7, #12]
 8008622:	68b8      	ldr	r0, [r7, #8]
 8008624:	f7fd f840 	bl	80056a8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8008628:	4603      	mov	r3, r0
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	4619      	mov	r1, r3
 800862e:	4620      	mov	r0, r4
 8008630:	f7fc f9ea 	bl	8004a08 <_ZNKSt4lessIcEclERKcS2_>
 8008634:	4603      	mov	r3, r0
 8008636:	f083 0301 	eor.w	r3, r3, #1
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d006      	beq.n	800864e <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	607b      	str	r3, [r7, #4]
 8008644:	68b8      	ldr	r0, [r7, #8]
 8008646:	f000 fbfb 	bl	8008e40 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>
 800864a:	60b8      	str	r0, [r7, #8]
 800864c:	e7e5      	b.n	800861a <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 800864e:	68b8      	ldr	r0, [r7, #8]
 8008650:	f000 fc02 	bl	8008e58 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8008654:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8008656:	e7e0      	b.n	800861a <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 8008658:	f107 0314 	add.w	r3, r7, #20
 800865c:	6879      	ldr	r1, [r7, #4]
 800865e:	4618      	mov	r0, r3
 8008660:	f000 f819 	bl	8008696 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1EPKSt18_Rb_tree_node_base>
 8008664:	697b      	ldr	r3, [r7, #20]
    }
 8008666:	4618      	mov	r0, r3
 8008668:	371c      	adds	r7, #28
 800866a:	46bd      	mov	sp, r7
 800866c:	bd90      	pop	{r4, r7, pc}

0800866e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	429a      	cmp	r2, r3
 8008682:	bf0c      	ite	eq
 8008684:	2301      	moveq	r3, #1
 8008686:	2300      	movne	r3, #0
 8008688:	b2db      	uxtb	r3, r3
 800868a:	4618      	mov	r0, r3
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
      }
 80086c0:	4618      	mov	r0, r3
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80086e4:	b590      	push	{r4, r7, lr}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d01b      	beq.n	8008730 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80086f8:	68fc      	ldr	r4, [r7, #12]
 80086fa:	68b8      	ldr	r0, [r7, #8]
 80086fc:	f7fc ff27 	bl	800554e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8008700:	4603      	mov	r3, r0
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	4619      	mov	r1, r3
 8008706:	4620      	mov	r0, r4
 8008708:	f7fc fb13 	bl	8004d32 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800870c:	4603      	mov	r3, r0
 800870e:	f083 0301 	eor.w	r3, r3, #1
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	d006      	beq.n	8008726 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	607b      	str	r3, [r7, #4]
 800871c:	68b8      	ldr	r0, [r7, #8]
 800871e:	f000 fba7 	bl	8008e70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8008722:	60b8      	str	r0, [r7, #8]
 8008724:	e7e5      	b.n	80086f2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 8008726:	68b8      	ldr	r0, [r7, #8]
 8008728:	f000 fbae 	bl	8008e88 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPKSt18_Rb_tree_node_base>
 800872c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800872e:	e7e0      	b.n	80086f2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0xe>
      return const_iterator(__y);
 8008730:	f107 0314 	add.w	r3, r7, #20
 8008734:	6879      	ldr	r1, [r7, #4]
 8008736:	4618      	mov	r0, r3
 8008738:	f000 f819 	bl	800876e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPKSt18_Rb_tree_node_base>
 800873c:	697b      	ldr	r3, [r7, #20]
    }
 800873e:	4618      	mov	r0, r3
 8008740:	371c      	adds	r7, #28
 8008742:	46bd      	mov	sp, r7
 8008744:	bd90      	pop	{r4, r7, pc}

08008746 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8008746:	b480      	push	{r7}
 8008748:	b083      	sub	sp, #12
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	bf0c      	ite	eq
 800875c:	2301      	moveq	r3, #1
 800875e:	2300      	movne	r3, #0
 8008760:	b2db      	uxtb	r3, r3
 8008762:	4618      	mov	r0, r3
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJS7_EEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 800878c:	b590      	push	{r4, r7, lr}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	7239      	strb	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
	    _Type(std::forward<_Args>(__args)...);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7fe fdb9 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800879e:	4604      	mov	r4, r0
	  ::new ((void*)std::addressof(_M_storage))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff fc02 	bl	8007fac <_ZSt9addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 80087a8:	4603      	mov	r3, r0
 80087aa:	4619      	mov	r1, r3
 80087ac:	2018      	movs	r0, #24
 80087ae:	f7f8 fc15 	bl	8000fdc <_ZnwjPv>
 80087b2:	4603      	mov	r3, r0
 80087b4:	4621      	mov	r1, r4
 80087b6:	4618      	mov	r0, r3
 80087b8:	f00e f997 	bl	8016aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	}
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd90      	pop	{r4, r7, pc}

080087c6 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJS7_EEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 80087c6:	b5b0      	push	{r4, r5, r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	7239      	strb	r1, [r7, #8]
 80087d0:	607a      	str	r2, [r7, #4]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 80087d2:	68fc      	ldr	r4, [r7, #12]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7fe fd9b 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80087da:	4603      	mov	r3, r0
 80087dc:	461a      	mov	r2, r3
 80087de:	4629      	mov	r1, r5
 80087e0:	4620      	mov	r0, r4
 80087e2:	f7ff ffd3 	bl	800878c <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJS7_EEESt16in_place_index_tILj0EEDpOT_>
	{ }
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bdb0      	pop	{r4, r5, r7, pc}

080087f0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 80087f0:	b5b0      	push	{r4, r5, r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	7239      	strb	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
	_M_index(_Np)
 80087fc:	68fc      	ldr	r4, [r7, #12]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7fe fd86 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008804:	4603      	mov	r3, r0
 8008806:	461a      	mov	r2, r3
 8008808:	4629      	mov	r1, r5
 800880a:	4620      	mov	r0, r4
 800880c:	f7ff ffdb 	bl	80087c6 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJS7_EEESt16in_place_index_tILj0EEDpOT_>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	761a      	strb	r2, [r3, #24]
	{ }
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bdb0      	pop	{r4, r5, r7, pc}

08008820 <_ZNSt8__detail9__variant14_UninitializedIiLb1EEC1IJiEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	7239      	strb	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
	: _M_storage(std::forward<_Args>(__args)...)
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7fe fda6 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8008832:	4603      	mov	r3, r0
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	601a      	str	r2, [r3, #0]
	{ }
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1IJiEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 8008844:	b5b0      	push	{r4, r5, r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	7239      	strb	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 8008850:	68fc      	ldr	r4, [r7, #12]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7fe fd93 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8008858:	4603      	mov	r3, r0
 800885a:	461a      	mov	r2, r3
 800885c:	4629      	mov	r1, r5
 800885e:	4620      	mov	r0, r4
 8008860:	f7ff ffde 	bl	8008820 <_ZNSt8__detail9__variant14_UninitializedIiLb1EEC1IJiEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bdb0      	pop	{r4, r5, r7, pc}

0800886e <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 800886e:	b5b0      	push	{r4, r5, r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	60f8      	str	r0, [r7, #12]
 8008876:	7239      	strb	r1, [r7, #8]
 8008878:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 800887a:	68fc      	ldr	r4, [r7, #12]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7fe fd7e 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8008882:	4603      	mov	r3, r0
 8008884:	461a      	mov	r2, r3
 8008886:	4629      	mov	r1, r5
 8008888:	4620      	mov	r0, r4
 800888a:	f7ff ffdb 	bl	8008844 <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1IJiEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bdb0      	pop	{r4, r5, r7, pc}

08008898 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 8008898:	b5b0      	push	{r4, r5, r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	7239      	strb	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
	_M_index(_Np)
 80088a4:	68fc      	ldr	r4, [r7, #12]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7fe fd69 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80088ac:	4603      	mov	r3, r0
 80088ae:	461a      	mov	r2, r3
 80088b0:	4629      	mov	r1, r5
 80088b2:	4620      	mov	r0, r4
 80088b4:	f7ff ffdb 	bl	800886e <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2201      	movs	r2, #1
 80088bc:	761a      	strb	r2, [r3, #24]
	{ }
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bdb0      	pop	{r4, r5, r7, pc}

080088c8 <_ZNSt8__detail9__variant14_UninitializedIfLb1EEC1IJfEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	7239      	strb	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
	: _M_storage(std::forward<_Args>(__args)...)
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7fe fd89 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80088da:	4603      	mov	r3, r0
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	601a      	str	r2, [r3, #0]
	{ }
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1IJfEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 80088ec:	b5b0      	push	{r4, r5, r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	7239      	strb	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 80088f8:	68fc      	ldr	r4, [r7, #12]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7fe fd76 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8008900:	4603      	mov	r3, r0
 8008902:	461a      	mov	r2, r3
 8008904:	4629      	mov	r1, r5
 8008906:	4620      	mov	r0, r4
 8008908:	f7ff ffde 	bl	80088c8 <_ZNSt8__detail9__variant14_UninitializedIfLb1EEC1IJfEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bdb0      	pop	{r4, r5, r7, pc}

08008916 <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1ILj1EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 8008916:	b5b0      	push	{r4, r5, r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	7239      	strb	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 8008922:	68fc      	ldr	r4, [r7, #12]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7fe fd61 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800892a:	4603      	mov	r3, r0
 800892c:	461a      	mov	r2, r3
 800892e:	4629      	mov	r1, r5
 8008930:	4620      	mov	r0, r4
 8008932:	f7ff ffdb 	bl	80088ec <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1IJfEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bdb0      	pop	{r4, r5, r7, pc}

08008940 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 8008940:	b5b0      	push	{r4, r5, r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	7239      	strb	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 800894c:	68fc      	ldr	r4, [r7, #12]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7fe fd4c 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8008954:	4603      	mov	r3, r0
 8008956:	461a      	mov	r2, r3
 8008958:	4629      	mov	r1, r5
 800895a:	4620      	mov	r0, r4
 800895c:	f7ff ffdb 	bl	8008916 <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1ILj1EJfEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bdb0      	pop	{r4, r5, r7, pc}

0800896a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 800896a:	b5b0      	push	{r4, r5, r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	7239      	strb	r1, [r7, #8]
 8008974:	607a      	str	r2, [r7, #4]
	_M_index(_Np)
 8008976:	68fc      	ldr	r4, [r7, #12]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7fe fd37 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800897e:	4603      	mov	r3, r0
 8008980:	461a      	mov	r2, r3
 8008982:	4629      	mov	r1, r5
 8008984:	4620      	mov	r0, r4
 8008986:	f7ff ffdb 	bl	8008940 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2202      	movs	r2, #2
 800898e:	761a      	strb	r2, [r3, #24]
	{ }
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bdb0      	pop	{r4, r5, r7, pc}

0800899a <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1Ev>:
      constexpr _Variadic_union() : _M_rest() { }
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 fa7b 	bl	8008ea0 <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1Ev>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <_ZSt7forwardIRKNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4618      	mov	r0, r3
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4618      	mov	r0, r3
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80089f6:	b480      	push	{r7}
 80089f8:	b083      	sub	sp, #12
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <_ZNKRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>:
      const _Type& _M_get() const & noexcept
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
      { return *_M_storage._M_ptr(); }
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fa4f 	bl	8008eba <_ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKS8_EENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f8a1 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008a36:	4604      	mov	r4, r0
 8008a38:	6838      	ldr	r0, [r7, #0]
 8008a3a:	f000 fa4a 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	461a      	mov	r2, r3
 8008a42:	4621      	mov	r1, r4
 8008a44:	4628      	mov	r0, r5
 8008a46:	f000 fa4f 	bl	8008ee8 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKS9_EESJ_St14__invoke_otherSG_DpOT1_>
					std::forward<_Args>(__args)...);
 8008a4a:	4633      	mov	r3, r6
    }
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a54 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <_ZNKRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>:
      constexpr const _Type& _M_get() const & noexcept
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4618      	mov	r0, r3
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKiEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f874 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008a90:	4604      	mov	r4, r0
 8008a92:	6838      	ldr	r0, [r7, #0]
 8008a94:	f000 fa3f 	bl	8008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f000 fa44 	bl	8008f2c <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKiEESJ_St14__invoke_otherSG_DpOT1_>
					std::forward<_Args>(__args)...);
 8008aa4:	4633      	mov	r3, r6
    }
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008aae <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <_ZNKRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>:
      constexpr const _Type& _M_get() const & noexcept
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKfEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008ada:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008adc:	b083      	sub	sp, #12
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f847 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008aea:	4604      	mov	r4, r0
 8008aec:	6838      	ldr	r0, [r7, #0]
 8008aee:	f000 fa34 	bl	8008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8008af2:	4603      	mov	r3, r0
 8008af4:	461a      	mov	r2, r3
 8008af6:	4621      	mov	r1, r4
 8008af8:	4628      	mov	r0, r5
 8008afa:	f000 fa39 	bl	8008f70 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKfEESJ_St14__invoke_otherSG_DpOT1_>
					std::forward<_Args>(__args)...);
 8008afe:	4633      	mov	r3, r6
    }
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b08 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJbEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <_ZNKRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>:
      constexpr const _Type& _M_get() const & noexcept
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKbEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f81a 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008b44:	4604      	mov	r4, r0
 8008b46:	6838      	ldr	r0, [r7, #0]
 8008b48:	f000 fa29 	bl	8008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4621      	mov	r1, r4
 8008b52:	4628      	mov	r0, r5
 8008b54:	f000 fa2e 	bl	8008fb4 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKbEESJ_St14__invoke_otherSG_DpOT1_>
					std::forward<_Args>(__args)...);
 8008b58:	4633      	mov	r3, r6
    }
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b62 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS9_ifbEEEJEE9_M_accessEv>:
      _M_access() const
 8008b62:	b480      	push	{r7}
 8008b64:	b083      	sub	sp, #12
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4618      	mov	r0, r3
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <_ZNSt8__detail9__variant14_UninitializedIbLb1EEC1IJRA19_KcEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	60f8      	str	r0, [r7, #12]
 8008b96:	7239      	strb	r1, [r7, #8]
 8008b98:	607a      	str	r2, [r7, #4]
	: _M_storage(std::forward<_Args>(__args)...)
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7fe fc6f 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	bf14      	ite	ne
 8008ba6:	2301      	movne	r3, #1
 8008ba8:	2300      	moveq	r3, #0
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	701a      	strb	r2, [r3, #0]
	{ }
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <_ZNSt8__detail9__variant15_Variadic_unionIJbEEC1IJRA19_KcEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 8008bba:	b5b0      	push	{r4, r5, r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	60f8      	str	r0, [r7, #12]
 8008bc2:	7239      	strb	r1, [r7, #8]
 8008bc4:	607a      	str	r2, [r7, #4]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 8008bc6:	68fc      	ldr	r4, [r7, #12]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7fe fc58 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f7ff ffda 	bl	8008b8e <_ZNSt8__detail9__variant14_UninitializedIbLb1EEC1IJRA19_KcEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bdb0      	pop	{r4, r5, r7, pc}

08008be4 <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1ILj1EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 8008be4:	b5b0      	push	{r4, r5, r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	7239      	strb	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 8008bf0:	68fc      	ldr	r4, [r7, #12]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7fe fc43 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f7ff ffdb 	bl	8008bba <_ZNSt8__detail9__variant15_Variadic_unionIJbEEC1IJRA19_KcEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bdb0      	pop	{r4, r5, r7, pc}

08008c0e <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1ILj2EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 8008c0e:	b5b0      	push	{r4, r5, r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	7239      	strb	r1, [r7, #8]
 8008c18:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 8008c1a:	68fc      	ldr	r4, [r7, #12]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7fe fc2e 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8008c22:	4603      	mov	r3, r0
 8008c24:	461a      	mov	r2, r3
 8008c26:	4629      	mov	r1, r5
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f7ff ffdb 	bl	8008be4 <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1ILj1EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bdb0      	pop	{r4, r5, r7, pc}

08008c38 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 8008c38:	b5b0      	push	{r4, r5, r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	7239      	strb	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 8008c44:	68fc      	ldr	r4, [r7, #12]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7fe fc19 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	461a      	mov	r2, r3
 8008c50:	4629      	mov	r1, r5
 8008c52:	4620      	mov	r0, r4
 8008c54:	f7ff ffdb 	bl	8008c0e <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1ILj2EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bdb0      	pop	{r4, r5, r7, pc}

08008c62 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 8008c62:	b5b0      	push	{r4, r5, r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	7239      	strb	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
	_M_index(_Np)
 8008c6e:	68fc      	ldr	r4, [r7, #12]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7fe fc04 	bl	800747e <_ZSt7forwardIRA19_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8008c76:	4603      	mov	r3, r0
 8008c78:	461a      	mov	r2, r3
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f7ff ffdb 	bl	8008c38 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj3EJRA19_KcEEESt16in_place_index_tIXT_EEDpOT0_>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2203      	movs	r2, #3
 8008c86:	761a      	strb	r2, [r3, #24]
	{ }
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bdb0      	pop	{r4, r5, r7, pc}

08008c92 <_ZSt11__addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008cbe:	b480      	push	{r7}
 8008cc0:	b083      	sub	sp, #12
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRS8_EENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008cea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f880 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	6838      	ldr	r0, [r7, #0]
 8008cfe:	f7fc fa9b 	bl	8005238 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8008d02:	4603      	mov	r3, r0
 8008d04:	461a      	mov	r2, r3
 8008d06:	4621      	mov	r1, r4
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f000 f96a 	bl	8008fe2 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRS9_EESB_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8008d0e:	4633      	mov	r3, r6
    }
 8008d10:	4618      	mov	r0, r3
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d18 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4618      	mov	r0, r3
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRiEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f85e 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008d3e:	4604      	mov	r4, r0
 8008d40:	6838      	ldr	r0, [r7, #0]
 8008d42:	f7fc fa29 	bl	8005198 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8008d46:	4603      	mov	r3, r0
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f000 f95f 	bl	8009010 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRiEESB_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8008d52:	4633      	mov	r3, r6
    }
 8008d54:	4618      	mov	r0, r3
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d5c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4618      	mov	r0, r3
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRfEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008d72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f83c 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008d82:	4604      	mov	r4, r0
 8008d84:	6838      	ldr	r0, [r7, #0]
 8008d86:	f7fc fa29 	bl	80051dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4628      	mov	r0, r5
 8008d92:	f000 f954 	bl	800903e <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRfEESB_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8008d96:	4633      	mov	r3, r6
    }
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008da0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRbEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f81a 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	6838      	ldr	r0, [r7, #0]
 8008dca:	f7fc f9c3 	bl	8005154 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f000 f949 	bl	800906c <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRbEESB_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8008dda:	4633      	mov	r3, r6
    }
 8008ddc:	4618      	mov	r0, r3
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008de4 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJS9_ifbEEEJEE9_M_accessEv>:
      _M_access() const
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4618      	mov	r0, r3
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4618      	mov	r0, r3
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	4618      	mov	r0, r3
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1Ev>:
      constexpr _Variadic_union() : _M_rest() { }
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f8f5 	bl	800909a <_ZNSt8__detail9__variant15_Variadic_unionIJbEEC1Ev>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <_ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f8f4 	bl	80090b0 <_ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKS9_EESJ_St14__invoke_otherSG_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008ee8:	b5b0      	push	{r4, r5, r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	7338      	strb	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008ef4:	68b8      	ldr	r0, [r7, #8]
 8008ef6:	f7ff fe3f 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008efa:	4604      	mov	r4, r0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff ffe8 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8008f02:	4603      	mov	r3, r0
 8008f04:	4619      	mov	r1, r3
 8008f06:	4620      	mov	r0, r4
 8008f08:	f000 f8dd 	bl	80090c6 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKS7_EENS0_16__variant_cookieESI_>
 8008f0c:	462b      	mov	r3, r5
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bdb0      	pop	{r4, r5, r7, pc}

08008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008f16:	b480      	push	{r7}
 8008f18:	b083      	sub	sp, #12
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKiEESJ_St14__invoke_otherSG_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008f2c:	b5b0      	push	{r4, r5, r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	7338      	strb	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008f38:	68b8      	ldr	r0, [r7, #8]
 8008f3a:	f7ff fe1d 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008f3e:	4604      	mov	r4, r0
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff ffe8 	bl	8008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f46:	4603      	mov	r3, r0
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 f8d3 	bl	80090f6 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKiEENS0_16__variant_cookieESI_>
 8008f50:	462b      	mov	r3, r5
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bdb0      	pop	{r4, r5, r7, pc}

08008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008f5a:	b480      	push	{r7}
 8008f5c:	b083      	sub	sp, #12
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4618      	mov	r0, r3
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKfEESJ_St14__invoke_otherSG_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008f70:	b5b0      	push	{r4, r5, r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	7338      	strb	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008f7c:	68b8      	ldr	r0, [r7, #8]
 8008f7e:	f7ff fdfb 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008f82:	4604      	mov	r4, r0
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff ffe8 	bl	8008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f000 f8c9 	bl	8009126 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKfEENS0_16__variant_cookieESI_>
 8008f94:	462b      	mov	r3, r5
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bdb0      	pop	{r4, r5, r7, pc}

08008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKbEESJ_St14__invoke_otherSG_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008fb4:	b5b0      	push	{r4, r5, r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	7338      	strb	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008fc0:	68b8      	ldr	r0, [r7, #8]
 8008fc2:	f7ff fdd9 	bl	8008b78 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff ffe8 	bl	8008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f000 f8bf 	bl	8009156 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKbEENS0_16__variant_cookieESI_>
 8008fd8:	462b      	mov	r3, r5
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bdb0      	pop	{r4, r5, r7, pc}

08008fe2 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRS9_EESB_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008fe2:	b5b0      	push	{r4, r5, r7, lr}
 8008fe4:	b084      	sub	sp, #16
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	7338      	strb	r0, [r7, #12]
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008fee:	68b8      	ldr	r0, [r7, #8]
 8008ff0:	f7ff ff03 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7fc f91e 	bl	8005238 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	4619      	mov	r1, r3
 8009000:	4620      	mov	r0, r4
 8009002:	f000 f8c0 	bl	8009186 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRS7_EENS0_16__variant_cookieESA_>
 8009006:	462b      	mov	r3, r5
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bdb0      	pop	{r4, r5, r7, pc}

08009010 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRiEESB_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8009010:	b5b0      	push	{r4, r5, r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	7338      	strb	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800901c:	68b8      	ldr	r0, [r7, #8]
 800901e:	f7ff feec 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8009022:	4604      	mov	r4, r0
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7fc f8b7 	bl	8005198 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800902a:	4603      	mov	r3, r0
 800902c:	4619      	mov	r1, r3
 800902e:	4620      	mov	r0, r4
 8009030:	f000 f8ba 	bl	80091a8 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRiEENS0_16__variant_cookieESA_>
 8009034:	462b      	mov	r3, r5
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bdb0      	pop	{r4, r5, r7, pc}

0800903e <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRfEESB_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800903e:	b5b0      	push	{r4, r5, r7, lr}
 8009040:	b084      	sub	sp, #16
 8009042:	af00      	add	r7, sp, #0
 8009044:	7338      	strb	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800904a:	68b8      	ldr	r0, [r7, #8]
 800904c:	f7ff fed5 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8009050:	4604      	mov	r4, r0
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7fc f8c2 	bl	80051dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8009058:	4603      	mov	r3, r0
 800905a:	4619      	mov	r1, r3
 800905c:	4620      	mov	r0, r4
 800905e:	f000 f8b4 	bl	80091ca <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRfEENS0_16__variant_cookieESA_>
 8009062:	462b      	mov	r3, r5
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bdb0      	pop	{r4, r5, r7, pc}

0800906c <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRbEESB_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800906c:	b5b0      	push	{r4, r5, r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	7338      	strb	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8009078:	68b8      	ldr	r0, [r7, #8]
 800907a:	f7ff febe 	bl	8008dfa <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 800907e:	4604      	mov	r4, r0
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7fc f867 	bl	8005154 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8009086:	4603      	mov	r3, r0
 8009088:	4619      	mov	r1, r3
 800908a:	4620      	mov	r0, r4
 800908c:	f000 f8ae 	bl	80091ec <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRbEENS0_16__variant_cookieESA_>
 8009090:	462b      	mov	r3, r5
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bdb0      	pop	{r4, r5, r7, pc}

0800909a <_ZNSt8__detail9__variant15_Variadic_unionIJbEEC1Ev>:
 800909a:	b480      	push	{r7}
 800909c:	b083      	sub	sp, #12
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <_ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv>:
      _M_addr() const noexcept
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKS7_EENS0_16__variant_cookieESI_>:
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 80090c6:	b5b0      	push	{r4, r5, r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
	  __variant_construct_single(std::forward<_Tp>(__lhs),
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f89a 	bl	800920e <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 80090da:	4604      	mov	r4, r0
 80090dc:	6838      	ldr	r0, [r7, #0]
 80090de:	f7ff fef8 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80090e2:	4603      	mov	r3, r0
 80090e4:	4619      	mov	r1, r3
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 f8b3 	bl	8009252 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKS8_EEvOT_OT0_>
	  return {};
 80090ec:	462b      	mov	r3, r5
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bdb0      	pop	{r4, r5, r7, pc}

080090f6 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKiEENS0_16__variant_cookieESI_>:
 80090f6:	b5b0      	push	{r4, r5, r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
	  __variant_construct_single(std::forward<_Tp>(__lhs),
 8009104:	4618      	mov	r0, r3
 8009106:	f000 f882 	bl	800920e <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800910a:	4604      	mov	r4, r0
 800910c:	6838      	ldr	r0, [r7, #0]
 800910e:	f7ff ff02 	bl	8008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8009112:	4603      	mov	r3, r0
 8009114:	4619      	mov	r1, r3
 8009116:	4620      	mov	r0, r4
 8009118:	f000 f8b7 	bl	800928a <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKiEEvOT_OT0_>
	  return {};
 800911c:	462b      	mov	r3, r5
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bdb0      	pop	{r4, r5, r7, pc}

08009126 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKfEENS0_16__variant_cookieESI_>:
 8009126:	b5b0      	push	{r4, r5, r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	6039      	str	r1, [r7, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
	  __variant_construct_single(std::forward<_Tp>(__lhs),
 8009134:	4618      	mov	r0, r3
 8009136:	f000 f86a 	bl	800920e <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800913a:	4604      	mov	r4, r0
 800913c:	6838      	ldr	r0, [r7, #0]
 800913e:	f7ff ff0c 	bl	8008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8009142:	4603      	mov	r3, r0
 8009144:	4619      	mov	r1, r3
 8009146:	4620      	mov	r0, r4
 8009148:	f000 f8b9 	bl	80092be <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKfEEvOT_OT0_>
	  return {};
 800914c:	462b      	mov	r3, r5
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bdb0      	pop	{r4, r5, r7, pc}

08009156 <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKbEENS0_16__variant_cookieESI_>:
 8009156:	b5b0      	push	{r4, r5, r7, lr}
 8009158:	b082      	sub	sp, #8
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
	  __variant_construct_single(std::forward<_Tp>(__lhs),
 8009164:	4618      	mov	r0, r3
 8009166:	f000 f852 	bl	800920e <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800916a:	4604      	mov	r4, r0
 800916c:	6838      	ldr	r0, [r7, #0]
 800916e:	f7ff ff16 	bl	8008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 8009172:	4603      	mov	r3, r0
 8009174:	4619      	mov	r1, r3
 8009176:	4620      	mov	r0, r4
 8009178:	f000 f8bb 	bl	80092f2 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKbEEvOT_OT0_>
	  return {};
 800917c:	462b      	mov	r3, r5
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bdb0      	pop	{r4, r5, r7, pc}

08009186 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRS7_EENS0_16__variant_cookieESA_>:
	__do_visit([](auto&& __this_mem) mutable
 8009186:	b590      	push	{r4, r7, lr}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 8009190:	6838      	ldr	r0, [r7, #0]
 8009192:	f7fc fce9 	bl	8005b68 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8009196:	4603      	mov	r3, r0
 8009198:	4618      	mov	r0, r3
 800919a:	f7fc fcf0 	bl	8005b7e <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	    return {};
 800919e:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80091a0:	4618      	mov	r0, r3
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd90      	pop	{r4, r7, pc}

080091a8 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRiEENS0_16__variant_cookieESA_>:
 80091a8:	b590      	push	{r4, r7, lr}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80091b2:	6838      	ldr	r0, [r7, #0]
 80091b4:	f7fc fcae 	bl	8005b14 <_ZSt11__addressofIiEPT_RS0_>
 80091b8:	4603      	mov	r3, r0
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fc fcb5 	bl	8005b2a <_ZSt8_DestroyIiEvPT_>
	    return {};
 80091c0:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80091c2:	4618      	mov	r0, r3
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd90      	pop	{r4, r7, pc}

080091ca <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRfEENS0_16__variant_cookieESA_>:
 80091ca:	b590      	push	{r4, r7, lr}
 80091cc:	b083      	sub	sp, #12
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80091d4:	6838      	ldr	r0, [r7, #0]
 80091d6:	f7fc fcb2 	bl	8005b3e <_ZSt11__addressofIfEPT_RS0_>
 80091da:	4603      	mov	r3, r0
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fc fcb9 	bl	8005b54 <_ZSt8_DestroyIfEvPT_>
	    return {};
 80091e2:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80091e4:	4618      	mov	r0, r3
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd90      	pop	{r4, r7, pc}

080091ec <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRbEENS0_16__variant_cookieESA_>:
 80091ec:	b590      	push	{r4, r7, lr}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80091f6:	6838      	ldr	r0, [r7, #0]
 80091f8:	f7fc fc77 	bl	8005aea <_ZSt11__addressofIbEPT_RS0_>
 80091fc:	4603      	mov	r3, r0
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fc fc7e 	bl	8005b00 <_ZSt8_DestroyIbEvPT_>
	    return {};
 8009204:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 8009206:	4618      	mov	r0, r3
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	bd90      	pop	{r4, r7, pc}

0800920e <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>:
    addressof(_Tp& __r) noexcept
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f805 	bl	800923c <_ZSt11__addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 8009232:	4603      	mov	r3, r0
 8009234:	4618      	mov	r0, r3
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <_ZSt11__addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4618      	mov	r0, r3
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKS8_EEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 8009252:	b590      	push	{r4, r7, lr}
 8009254:	b085      	sub	sp, #20
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff ffe0 	bl	8009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 8009264:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 8009266:	6838      	ldr	r0, [r7, #0]
 8009268:	f7ff fe33 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800926c:	4604      	mov	r4, r0
        ::new (__storage)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	4619      	mov	r1, r3
 8009272:	2018      	movs	r0, #24
 8009274:	f7f7 feb2 	bl	8000fdc <_ZnwjPv>
 8009278:	4603      	mov	r3, r0
 800927a:	4621      	mov	r1, r4
 800927c:	4618      	mov	r0, r3
 800927e:	f00d fd7b 	bl	8016d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    }
 8009282:	bf00      	nop
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	bd90      	pop	{r4, r7, pc}

0800928a <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKiEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 800928a:	b590      	push	{r4, r7, lr}
 800928c:	b085      	sub	sp, #20
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4618      	mov	r0, r3
 8009298:	f7ff ffc4 	bl	8009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 800929c:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 800929e:	6838      	ldr	r0, [r7, #0]
 80092a0:	f7ff fe39 	bl	8008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 80092a4:	4603      	mov	r3, r0
        ::new (__storage)
 80092a6:	681c      	ldr	r4, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4619      	mov	r1, r3
 80092ac:	2004      	movs	r0, #4
 80092ae:	f7f7 fe95 	bl	8000fdc <_ZnwjPv>
 80092b2:	4603      	mov	r3, r0
 80092b4:	601c      	str	r4, [r3, #0]
    }
 80092b6:	bf00      	nop
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd90      	pop	{r4, r7, pc}

080092be <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKfEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 80092be:	b590      	push	{r4, r7, lr}
 80092c0:	b085      	sub	sp, #20
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7ff ffaa 	bl	8009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 80092d0:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 80092d2:	6838      	ldr	r0, [r7, #0]
 80092d4:	f7ff fe41 	bl	8008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80092d8:	4603      	mov	r3, r0
        ::new (__storage)
 80092da:	681c      	ldr	r4, [r3, #0]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4619      	mov	r1, r3
 80092e0:	2004      	movs	r0, #4
 80092e2:	f7f7 fe7b 	bl	8000fdc <_ZnwjPv>
 80092e6:	4603      	mov	r3, r0
 80092e8:	601c      	str	r4, [r3, #0]
    }
 80092ea:	bf00      	nop
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd90      	pop	{r4, r7, pc}

080092f2 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKbEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 80092f2:	b590      	push	{r4, r7, lr}
 80092f4:	b085      	sub	sp, #20
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff ff90 	bl	8009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 8009304:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 8009306:	6838      	ldr	r0, [r7, #0]
 8009308:	f7ff fe49 	bl	8008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 800930c:	4603      	mov	r3, r0
        ::new (__storage)
 800930e:	781c      	ldrb	r4, [r3, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4619      	mov	r1, r3
 8009314:	2001      	movs	r0, #1
 8009316:	f7f7 fe61 	bl	8000fdc <_ZnwjPv>
 800931a:	4603      	mov	r3, r0
 800931c:	4622      	mov	r2, r4
 800931e:	701a      	strb	r2, [r3, #0]
    }
 8009320:	bf00      	nop
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	bd90      	pop	{r4, r7, pc}

08009328 <_Z41__static_initialization_and_destruction_0ii>:
 8009328:	b590      	push	{r4, r7, lr}
 800932a:	b0e7      	sub	sp, #412	; 0x19c
 800932c:	af02      	add	r7, sp, #8
 800932e:	1d3b      	adds	r3, r7, #4
 8009330:	6018      	str	r0, [r3, #0]
 8009332:	463b      	mov	r3, r7
 8009334:	6019      	str	r1, [r3, #0]
 8009336:	1d3b      	adds	r3, r7, #4
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b01      	cmp	r3, #1
 800933c:	f040 819d 	bne.w	800967a <_Z41__static_initialization_and_destruction_0ii+0x352>
 8009340:	463b      	mov	r3, r7
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009348:	4293      	cmp	r3, r2
 800934a:	f040 8196 	bne.w	800967a <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 800934e:	f107 0314 	add.w	r3, r7, #20
 8009352:	4618      	mov	r0, r3
 8009354:	2322      	movs	r3, #34	; 0x22
 8009356:	461a      	mov	r2, r3
 8009358:	2100      	movs	r1, #0
 800935a:	f00d fdcf 	bl	8016efc <memset>
 800935e:	f107 0314 	add.w	r3, r7, #20
 8009362:	223a      	movs	r2, #58	; 0x3a
 8009364:	701a      	strb	r2, [r3, #0]
 8009366:	f107 0314 	add.w	r3, r7, #20
 800936a:	2201      	movs	r2, #1
 800936c:	705a      	strb	r2, [r3, #1]
 800936e:	f107 0314 	add.w	r3, r7, #20
 8009372:	220a      	movs	r2, #10
 8009374:	709a      	strb	r2, [r3, #2]
 8009376:	f107 0314 	add.w	r3, r7, #20
 800937a:	220a      	movs	r2, #10
 800937c:	70da      	strb	r2, [r3, #3]
 800937e:	f107 0314 	add.w	r3, r7, #20
 8009382:	222c      	movs	r2, #44	; 0x2c
 8009384:	711a      	strb	r2, [r3, #4]
 8009386:	f107 0314 	add.w	r3, r7, #20
 800938a:	220c      	movs	r2, #12
 800938c:	715a      	strb	r2, [r3, #5]
 800938e:	f107 0314 	add.w	r3, r7, #20
 8009392:	222e      	movs	r2, #46	; 0x2e
 8009394:	719a      	strb	r2, [r3, #6]
 8009396:	f107 0314 	add.w	r3, r7, #20
 800939a:	220b      	movs	r2, #11
 800939c:	71da      	strb	r2, [r3, #7]
 800939e:	f107 0314 	add.w	r3, r7, #20
 80093a2:	225b      	movs	r2, #91	; 0x5b
 80093a4:	721a      	strb	r2, [r3, #8]
 80093a6:	f107 0314 	add.w	r3, r7, #20
 80093aa:	220d      	movs	r2, #13
 80093ac:	725a      	strb	r2, [r3, #9]
 80093ae:	f107 0314 	add.w	r3, r7, #20
 80093b2:	225d      	movs	r2, #93	; 0x5d
 80093b4:	729a      	strb	r2, [r3, #10]
 80093b6:	f107 0314 	add.w	r3, r7, #20
 80093ba:	220e      	movs	r2, #14
 80093bc:	72da      	strb	r2, [r3, #11]
 80093be:	f107 0314 	add.w	r3, r7, #20
 80093c2:	227c      	movs	r2, #124	; 0x7c
 80093c4:	731a      	strb	r2, [r3, #12]
 80093c6:	f107 0314 	add.w	r3, r7, #20
 80093ca:	2215      	movs	r2, #21
 80093cc:	735a      	strb	r2, [r3, #13]
 80093ce:	f107 0314 	add.w	r3, r7, #20
 80093d2:	2226      	movs	r2, #38	; 0x26
 80093d4:	739a      	strb	r2, [r3, #14]
 80093d6:	f107 0314 	add.w	r3, r7, #20
 80093da:	2216      	movs	r2, #22
 80093dc:	73da      	strb	r2, [r3, #15]
 80093de:	f107 0314 	add.w	r3, r7, #20
 80093e2:	222b      	movs	r2, #43	; 0x2b
 80093e4:	741a      	strb	r2, [r3, #16]
 80093e6:	f107 0314 	add.w	r3, r7, #20
 80093ea:	221f      	movs	r2, #31
 80093ec:	745a      	strb	r2, [r3, #17]
 80093ee:	f107 0314 	add.w	r3, r7, #20
 80093f2:	222d      	movs	r2, #45	; 0x2d
 80093f4:	749a      	strb	r2, [r3, #18]
 80093f6:	f107 0314 	add.w	r3, r7, #20
 80093fa:	2220      	movs	r2, #32
 80093fc:	74da      	strb	r2, [r3, #19]
 80093fe:	f107 0314 	add.w	r3, r7, #20
 8009402:	222a      	movs	r2, #42	; 0x2a
 8009404:	751a      	strb	r2, [r3, #20]
 8009406:	f107 0314 	add.w	r3, r7, #20
 800940a:	2221      	movs	r2, #33	; 0x21
 800940c:	755a      	strb	r2, [r3, #21]
 800940e:	f107 0314 	add.w	r3, r7, #20
 8009412:	222f      	movs	r2, #47	; 0x2f
 8009414:	759a      	strb	r2, [r3, #22]
 8009416:	f107 0314 	add.w	r3, r7, #20
 800941a:	2222      	movs	r2, #34	; 0x22
 800941c:	75da      	strb	r2, [r3, #23]
 800941e:	f107 0314 	add.w	r3, r7, #20
 8009422:	225e      	movs	r2, #94	; 0x5e
 8009424:	761a      	strb	r2, [r3, #24]
 8009426:	f107 0314 	add.w	r3, r7, #20
 800942a:	2223      	movs	r2, #35	; 0x23
 800942c:	765a      	strb	r2, [r3, #25]
 800942e:	f107 0314 	add.w	r3, r7, #20
 8009432:	2225      	movs	r2, #37	; 0x25
 8009434:	769a      	strb	r2, [r3, #26]
 8009436:	f107 0314 	add.w	r3, r7, #20
 800943a:	2224      	movs	r2, #36	; 0x24
 800943c:	76da      	strb	r2, [r3, #27]
 800943e:	f107 0314 	add.w	r3, r7, #20
 8009442:	2228      	movs	r2, #40	; 0x28
 8009444:	771a      	strb	r2, [r3, #28]
 8009446:	f107 0314 	add.w	r3, r7, #20
 800944a:	2226      	movs	r2, #38	; 0x26
 800944c:	775a      	strb	r2, [r3, #29]
 800944e:	f107 0314 	add.w	r3, r7, #20
 8009452:	2229      	movs	r2, #41	; 0x29
 8009454:	779a      	strb	r2, [r3, #30]
 8009456:	f107 0314 	add.w	r3, r7, #20
 800945a:	2227      	movs	r2, #39	; 0x27
 800945c:	77da      	strb	r2, [r3, #31]
 800945e:	f107 0314 	add.w	r3, r7, #20
 8009462:	2225      	movs	r2, #37	; 0x25
 8009464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8009468:	f107 030c 	add.w	r3, r7, #12
 800946c:	f107 0214 	add.w	r2, r7, #20
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	f107 030c 	add.w	r3, r7, #12
 8009476:	2211      	movs	r2, #17
 8009478:	605a      	str	r2, [r3, #4]
 800947a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800947e:	4618      	mov	r0, r3
 8009480:	f7f8 f935 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8009484:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009488:	f107 020c 	add.w	r2, r7, #12
 800948c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	460b      	mov	r3, r1
 8009494:	ca06      	ldmia	r2, {r1, r2}
 8009496:	4885      	ldr	r0, [pc, #532]	; (80096ac <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8009498:	f7f8 f941 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800949c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7f8 f930 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 80094a6:	2305      	movs	r3, #5
 80094a8:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80094ac:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80094b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80094b4:	497e      	ldr	r1, [pc, #504]	; (80096b0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7f7 fdf6 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80094bc:	2306      	movs	r3, #6
 80094be:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80094c2:	f207 1263 	addw	r2, r7, #355	; 0x163
 80094c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80094ca:	331c      	adds	r3, #28
 80094cc:	4979      	ldr	r1, [pc, #484]	; (80096b4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7f7 fe12 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80094d4:	2307      	movs	r3, #7
 80094d6:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80094da:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80094de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80094e2:	3338      	adds	r3, #56	; 0x38
 80094e4:	4974      	ldr	r1, [pc, #464]	; (80096b8 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7f7 fe06 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80094ec:	2308      	movs	r3, #8
 80094ee:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80094f2:	f207 1265 	addw	r2, r7, #357	; 0x165
 80094f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80094fa:	3354      	adds	r3, #84	; 0x54
 80094fc:	496f      	ldr	r1, [pc, #444]	; (80096bc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80094fe:	4618      	mov	r0, r3
 8009500:	f7f7 fdd2 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8009504:	2309      	movs	r3, #9
 8009506:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800950a:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 800950e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009512:	3370      	adds	r3, #112	; 0x70
 8009514:	496a      	ldr	r1, [pc, #424]	; (80096c0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8009516:	4618      	mov	r0, r3
 8009518:	f7f7 fe16 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 800951c:	2310      	movs	r3, #16
 800951e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8009522:	f207 1267 	addw	r2, r7, #359	; 0x167
 8009526:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800952a:	338c      	adds	r3, #140	; 0x8c
 800952c:	4965      	ldr	r1, [pc, #404]	; (80096c4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800952e:	4618      	mov	r0, r3
 8009530:	f7f7 fe32 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8009534:	2311      	movs	r3, #17
 8009536:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800953a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800953e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009542:	33a8      	adds	r3, #168	; 0xa8
 8009544:	4960      	ldr	r1, [pc, #384]	; (80096c8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8009546:	4618      	mov	r0, r3
 8009548:	f7f7 fdfe 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 800954c:	2312      	movs	r3, #18
 800954e:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8009552:	f207 1269 	addw	r2, r7, #361	; 0x169
 8009556:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800955a:	33c4      	adds	r3, #196	; 0xc4
 800955c:	495b      	ldr	r1, [pc, #364]	; (80096cc <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800955e:	4618      	mov	r0, r3
 8009560:	f7f7 fda2 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8009564:	2313      	movs	r3, #19
 8009566:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800956a:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800956e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009572:	33e0      	adds	r3, #224	; 0xe0
 8009574:	4956      	ldr	r1, [pc, #344]	; (80096d0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8009576:	4618      	mov	r0, r3
 8009578:	f7f7 fdbe 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 800957c:	2314      	movs	r3, #20
 800957e:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8009582:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8009586:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800958a:	33fc      	adds	r3, #252	; 0xfc
 800958c:	4951      	ldr	r1, [pc, #324]	; (80096d4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800958e:	4618      	mov	r0, r3
 8009590:	f7f7 fe2a 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8009594:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009598:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80095a2:	220a      	movs	r2, #10
 80095a4:	605a      	str	r2, [r3, #4]
 80095a6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7f8 f944 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80095b0:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80095b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80095b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	460b      	mov	r3, r1
 80095c0:	ca06      	ldmia	r2, {r1, r2}
 80095c2:	4845      	ldr	r0, [pc, #276]	; (80096d8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80095c4:	f7f8 f950 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80095c8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7f8 f93f 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80095d2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80095d6:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80095da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80095de:	429c      	cmp	r4, r3
 80095e0:	d004      	beq.n	80095ec <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 80095e2:	3c1c      	subs	r4, #28
 80095e4:	4620      	mov	r0, r4
 80095e6:	f7f7 fd52 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80095ea:	e7f6      	b.n	80095da <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80095ec:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80095f0:	2200      	movs	r2, #0
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	605a      	str	r2, [r3, #4]
 80095f6:	609a      	str	r2, [r3, #8]
 80095f8:	233c      	movs	r3, #60	; 0x3c
 80095fa:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80095fe:	231b      	movs	r3, #27
 8009600:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8009604:	231c      	movs	r3, #28
 8009606:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800960a:	233e      	movs	r3, #62	; 0x3e
 800960c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8009610:	2319      	movs	r3, #25
 8009612:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8009616:	231a      	movs	r3, #26
 8009618:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 800961c:	233d      	movs	r3, #61	; 0x3d
 800961e:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8009622:	2318      	movs	r3, #24
 8009624:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8009628:	231d      	movs	r3, #29
 800962a:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800962e:	2321      	movs	r3, #33	; 0x21
 8009630:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8009634:	2317      	movs	r3, #23
 8009636:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800963a:	231e      	movs	r3, #30
 800963c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8009640:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8009644:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8009648:	2304      	movs	r3, #4
 800964a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800964e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8009652:	4618      	mov	r0, r3
 8009654:	f7f8 f938 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8009658:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800965c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	4613      	mov	r3, r2
 8009664:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8009668:	ca06      	ldmia	r2, {r1, r2}
 800966a:	481c      	ldr	r0, [pc, #112]	; (80096dc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800966c:	f7f8 f944 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8009670:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8009674:	4618      	mov	r0, r3
 8009676:	f7f8 f933 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 800967a:	1d3b      	adds	r3, r7, #4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10e      	bne.n	80096a0 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8009682:	463b      	mov	r3, r7
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800968a:	4293      	cmp	r3, r2
 800968c:	d108      	bne.n	80096a0 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800968e:	4813      	ldr	r0, [pc, #76]	; (80096dc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8009690:	f7fc fc62 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8009694:	4810      	ldr	r0, [pc, #64]	; (80096d8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8009696:	f7fc fc6c 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800969a:	4804      	ldr	r0, [pc, #16]	; (80096ac <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800969c:	f7fc fc76 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80096a0:	bf00      	nop
 80096a2:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd90      	pop	{r4, r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20000244 	.word	0x20000244
 80096b0:	08019ef8 	.word	0x08019ef8
 80096b4:	08019f00 	.word	0x08019f00
 80096b8:	08019f08 	.word	0x08019f08
 80096bc:	08019f10 	.word	0x08019f10
 80096c0:	08019f18 	.word	0x08019f18
 80096c4:	08019f20 	.word	0x08019f20
 80096c8:	08019f24 	.word	0x08019f24
 80096cc:	08019f2c 	.word	0x08019f2c
 80096d0:	08019f34 	.word	0x08019f34
 80096d4:	08019f3c 	.word	0x08019f3c
 80096d8:	2000025c 	.word	0x2000025c
 80096dc:	20000274 	.word	0x20000274

080096e0 <_GLOBAL__sub_I__ZN5LexerC2EP6Source>:
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80096e8:	2001      	movs	r0, #1
 80096ea:	f7ff fe1d 	bl	8009328 <_Z41__static_initialization_and_destruction_0ii>
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <_GLOBAL__sub_D__ZN5LexerC2EP6Source>:
 80096f0:	b580      	push	{r7, lr}
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80096f8:	2000      	movs	r0, #0
 80096fa:	f7ff fe15 	bl	8009328 <_Z41__static_initialization_and_destruction_0ii>
 80096fe:	bd80      	pop	{r7, pc}

08009700 <_ZN6ParserC1EP5LexerP11Transmitter>:
#include "Parser.h"

Parser::Parser(Lexer *Lex, Transmitter *Trans)
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3308      	adds	r3, #8
 8009710:	4618      	mov	r0, r3
 8009712:	f7fc fec4 	bl	800649e <_ZN5TokenC1Ev>
{
	this->Lex = Lex;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	601a      	str	r2, [r3, #0]
	this->Trans = Trans;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	605a      	str	r2, [r3, #4]
}
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <_ZN7ProgramD1Ev>:

Program::~Program()
 800972c:	b590      	push	{r4, r7, lr}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
{
	delete setup;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681c      	ldr	r4, [r3, #0]
 8009738:	2c00      	cmp	r4, #0
 800973a:	d006      	beq.n	800974a <_ZN7ProgramD1Ev+0x1e>
 800973c:	4620      	mov	r0, r4
 800973e:	f004 fd5b 	bl	800e1f8 <_ZN4BodyD1Ev>
 8009742:	210c      	movs	r1, #12
 8009744:	4620      	mov	r0, r4
 8009746:	f00d f810 	bl	801676a <_ZdlPvj>
	delete loop;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685c      	ldr	r4, [r3, #4]
 800974e:	2c00      	cmp	r4, #0
 8009750:	d006      	beq.n	8009760 <_ZN7ProgramD1Ev+0x34>
 8009752:	4620      	mov	r0, r4
 8009754:	f004 fd50 	bl	800e1f8 <_ZN4BodyD1Ev>
 8009758:	210c      	movs	r1, #12
 800975a:	4620      	mov	r0, r4
 800975c:	f00d f805 	bl	801676a <_ZdlPvj>
	delete finish;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689c      	ldr	r4, [r3, #8]
 8009764:	2c00      	cmp	r4, #0
 8009766:	d006      	beq.n	8009776 <_ZN7ProgramD1Ev+0x4a>
 8009768:	4620      	mov	r0, r4
 800976a:	f004 fd45 	bl	800e1f8 <_ZN4BodyD1Ev>
 800976e:	210c      	movs	r1, #12
 8009770:	4620      	mov	r0, r4
 8009772:	f00c fffa 	bl	801676a <_ZdlPvj>
}
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4618      	mov	r0, r3
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	bd90      	pop	{r4, r7, pc}

08009780 <_ZN6Parser11parse_whileEv>:

While_statement* Parser::parse_while()
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b092      	sub	sp, #72	; 0x48
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
	auto st = new While_statement();
 8009788:	2008      	movs	r0, #8
 800978a:	f00c fff0 	bl	801676e <_Znwj>
 800978e:	4603      	mov	r3, r0
 8009790:	2200      	movs	r2, #0
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	2200      	movs	r2, #0
 8009796:	605a      	str	r2, [r3, #4]
 8009798:	647b      	str	r3, [r7, #68]	; 0x44
	st->condition = parse_expression();
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f006 fb26 	bl	800fdec <_ZN6Parser16parse_expressionEv>
 80097a0:	4602      	mov	r2, r0
 80097a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a4:	601a      	str	r2, [r3, #0]
	assert_token(TOKEN_COLON, "colon after condition expression");
 80097a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097aa:	4618      	mov	r0, r3
 80097ac:	f00c fff0 	bl	8016790 <_ZNSaIcEC1Ev>
 80097b0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80097b4:	f107 030c 	add.w	r3, r7, #12
 80097b8:	4921      	ldr	r1, [pc, #132]	; (8009840 <_ZN6Parser11parse_whileEv+0xc0>)
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7f7 ffea 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80097c0:	f107 030c 	add.w	r3, r7, #12
 80097c4:	461a      	mov	r2, r3
 80097c6:	2101      	movs	r1, #1
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fb4d 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80097ce:	f107 030c 	add.w	r3, r7, #12
 80097d2:	4618      	mov	r0, r3
 80097d4:	f00d f9a3 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80097d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097dc:	4618      	mov	r0, r3
 80097de:	f00c ffd8 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fe02 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	st->while_body = parse_body();
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fd84 	bl	800a2f6 <_ZN6Parser10parse_bodyEv>
 80097ee:	4602      	mov	r2, r0
 80097f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097f2:	605a      	str	r2, [r3, #4]
	assert_token(TOKEN_END, "\"end\" after if body");
 80097f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80097f8:	4618      	mov	r0, r3
 80097fa:	f00c ffc9 	bl	8016790 <_ZNSaIcEC1Ev>
 80097fe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009806:	490f      	ldr	r1, [pc, #60]	; (8009844 <_ZN6Parser11parse_whileEv+0xc4>)
 8009808:	4618      	mov	r0, r3
 800980a:	f7f7 ffc3 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800980e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009812:	461a      	mov	r2, r3
 8009814:	2114      	movs	r1, #20
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fb26 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800981c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009820:	4618      	mov	r0, r3
 8009822:	f00d f97c 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009826:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800982a:	4618      	mov	r0, r3
 800982c:	f00c ffb1 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fddb 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	return st;
 8009836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009838:	4618      	mov	r0, r3
 800983a:	3748      	adds	r7, #72	; 0x48
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	08019f40 	.word	0x08019f40
 8009844:	08019f64 	.word	0x08019f64

08009848 <_ZN6Parser20parse_elseif_contentEP12If_statement>:

void Parser::parse_elseif_content(If_statement *st)
{
 8009848:	b590      	push	{r4, r7, lr}
 800984a:	b08d      	sub	sp, #52	; 0x34
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
	get_next_token();
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fdca 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	st->conditions.push_back(parse_expression());
 8009858:	683c      	ldr	r4, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f006 fac6 	bl	800fdec <_ZN6Parser16parse_expressionEv>
 8009860:	4603      	mov	r3, r0
 8009862:	60fb      	str	r3, [r7, #12]
 8009864:	f107 030c 	add.w	r3, r7, #12
 8009868:	4619      	mov	r1, r3
 800986a:	4620      	mov	r0, r4
 800986c:	f000 ff48 	bl	800a700 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backEOS1_>
	assert_token(TOKEN_COLON, "colon after condition expression");
 8009870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009874:	4618      	mov	r0, r3
 8009876:	f00c ff8b 	bl	8016790 <_ZNSaIcEC1Ev>
 800987a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800987e:	f107 0310 	add.w	r3, r7, #16
 8009882:	4915      	ldr	r1, [pc, #84]	; (80098d8 <_ZN6Parser20parse_elseif_contentEP12If_statement+0x90>)
 8009884:	4618      	mov	r0, r3
 8009886:	f7f7 ff85 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800988a:	f107 0310 	add.w	r3, r7, #16
 800988e:	461a      	mov	r2, r3
 8009890:	2101      	movs	r1, #1
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fae8 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009898:	f107 0310 	add.w	r3, r7, #16
 800989c:	4618      	mov	r0, r3
 800989e:	f00d f93e 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80098a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098a6:	4618      	mov	r0, r3
 80098a8:	f00c ff73 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fd9d 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	st->if_bodies.push_back(parse_body());
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	f103 040c 	add.w	r4, r3, #12
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fd1c 	bl	800a2f6 <_ZN6Parser10parse_bodyEv>
 80098be:	4603      	mov	r3, r0
 80098c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098c6:	4619      	mov	r1, r3
 80098c8:	4620      	mov	r0, r4
 80098ca:	f000 ff2a 	bl	800a722 <_ZNSt6vectorIP4BodySaIS1_EE9push_backEOS1_>
}
 80098ce:	bf00      	nop
 80098d0:	3734      	adds	r7, #52	; 0x34
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd90      	pop	{r4, r7, pc}
 80098d6:	bf00      	nop
 80098d8:	08019f40 	.word	0x08019f40

080098dc <_ZN6Parser18parse_else_contentEP12If_statement>:

void Parser::parse_else_content(If_statement *st)
{
 80098dc:	b590      	push	{r4, r7, lr}
 80098de:	b08b      	sub	sp, #44	; 0x2c
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
	get_next_token();
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fd80 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_COLON, "colon after \"else\"");
 80098ec:	f107 0320 	add.w	r3, r7, #32
 80098f0:	4618      	mov	r0, r3
 80098f2:	f00c ff4d 	bl	8016790 <_ZNSaIcEC1Ev>
 80098f6:	f107 0220 	add.w	r2, r7, #32
 80098fa:	f107 0308 	add.w	r3, r7, #8
 80098fe:	4915      	ldr	r1, [pc, #84]	; (8009954 <_ZN6Parser18parse_else_contentEP12If_statement+0x78>)
 8009900:	4618      	mov	r0, r3
 8009902:	f7f7 ff47 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009906:	f107 0308 	add.w	r3, r7, #8
 800990a:	461a      	mov	r2, r3
 800990c:	2101      	movs	r1, #1
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 faaa 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009914:	f107 0308 	add.w	r3, r7, #8
 8009918:	4618      	mov	r0, r3
 800991a:	f00d f900 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800991e:	f107 0320 	add.w	r3, r7, #32
 8009922:	4618      	mov	r0, r3
 8009924:	f00c ff35 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fd5f 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	st->if_bodies.push_back(parse_body());
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	f103 040c 	add.w	r4, r3, #12
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fcde 	bl	800a2f6 <_ZN6Parser10parse_bodyEv>
 800993a:	4603      	mov	r3, r0
 800993c:	627b      	str	r3, [r7, #36]	; 0x24
 800993e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009942:	4619      	mov	r1, r3
 8009944:	4620      	mov	r0, r4
 8009946:	f000 feec 	bl	800a722 <_ZNSt6vectorIP4BodySaIS1_EE9push_backEOS1_>
}
 800994a:	bf00      	nop
 800994c:	372c      	adds	r7, #44	; 0x2c
 800994e:	46bd      	mov	sp, r7
 8009950:	bd90      	pop	{r4, r7, pc}
 8009952:	bf00      	nop
 8009954:	08019f78 	.word	0x08019f78

08009958 <_ZN6Parser16parse_if_contentEP12If_statement>:

void Parser::parse_if_content(If_statement *st)
{
 8009958:	b590      	push	{r4, r7, lr}
 800995a:	b08d      	sub	sp, #52	; 0x34
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
	st->conditions.push_back(parse_expression());
 8009962:	683c      	ldr	r4, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f006 fa41 	bl	800fdec <_ZN6Parser16parse_expressionEv>
 800996a:	4603      	mov	r3, r0
 800996c:	60fb      	str	r3, [r7, #12]
 800996e:	f107 030c 	add.w	r3, r7, #12
 8009972:	4619      	mov	r1, r3
 8009974:	4620      	mov	r0, r4
 8009976:	f000 fec3 	bl	800a700 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backEOS1_>
	assert_token(TOKEN_COLON, "colon after condition expression");
 800997a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800997e:	4618      	mov	r0, r3
 8009980:	f00c ff06 	bl	8016790 <_ZNSaIcEC1Ev>
 8009984:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009988:	f107 0310 	add.w	r3, r7, #16
 800998c:	4914      	ldr	r1, [pc, #80]	; (80099e0 <_ZN6Parser16parse_if_contentEP12If_statement+0x88>)
 800998e:	4618      	mov	r0, r3
 8009990:	f7f7 ff00 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009994:	f107 0310 	add.w	r3, r7, #16
 8009998:	461a      	mov	r2, r3
 800999a:	2101      	movs	r1, #1
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fa63 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80099a2:	f107 0310 	add.w	r3, r7, #16
 80099a6:	4618      	mov	r0, r3
 80099a8:	f00d f8b9 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80099ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099b0:	4618      	mov	r0, r3
 80099b2:	f00c feee 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fd18 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	st->if_bodies.push_back(parse_body());
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	f103 040c 	add.w	r4, r3, #12
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fc97 	bl	800a2f6 <_ZN6Parser10parse_bodyEv>
 80099c8:	4603      	mov	r3, r0
 80099ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099d0:	4619      	mov	r1, r3
 80099d2:	4620      	mov	r0, r4
 80099d4:	f000 fea5 	bl	800a722 <_ZNSt6vectorIP4BodySaIS1_EE9push_backEOS1_>
}
 80099d8:	bf00      	nop
 80099da:	3734      	adds	r7, #52	; 0x34
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd90      	pop	{r4, r7, pc}
 80099e0:	08019f40 	.word	0x08019f40

080099e4 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 fea8 	bl	800a744 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implC1Ev>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4618      	mov	r0, r3
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <_ZNSt6vectorIP10ExpressionSaIS1_EEC1Ev>:
      vector() = default;
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b082      	sub	sp, #8
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7ff ffeb 	bl	80099e4 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EEC1Ev>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <_ZNSt12_Vector_baseIP4BodySaIS1_EEC1Ev>:
      _Vector_base() = default;
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 fe9e 	bl	800a764 <_ZNSt12_Vector_baseIP4BodySaIS1_EE12_Vector_implC1Ev>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <_ZNSt6vectorIP4BodySaIS1_EEC1Ev>:
      vector() = default;
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7ff ffeb 	bl	8009a18 <_ZNSt12_Vector_baseIP4BodySaIS1_EEC1Ev>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4618      	mov	r0, r3
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <_ZN12If_statementC1Ev>:
public:
	~Body();
	std::vector<Statement*> statements;
};

class If_statement
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff ffd1 	bl	80099fe <_ZNSt6vectorIP10ExpressionSaIS1_EEC1Ev>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	330c      	adds	r3, #12
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff ffe6 	bl	8009a32 <_ZNSt6vectorIP4BodySaIS1_EEC1Ev>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <_ZN6Parser8parse_ifEv>:

If_statement* Parser::parse_if()
{
 8009a70:	b590      	push	{r4, r7, lr}
 8009a72:	b08b      	sub	sp, #44	; 0x2c
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
	auto st = new If_statement();
 8009a78:	2018      	movs	r0, #24
 8009a7a:	f00c fe78 	bl	801676e <_Znwj>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	461c      	mov	r4, r3
 8009a82:	4622      	mov	r2, r4
 8009a84:	2300      	movs	r3, #0
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	6053      	str	r3, [r2, #4]
 8009a8a:	6093      	str	r3, [r2, #8]
 8009a8c:	60d3      	str	r3, [r2, #12]
 8009a8e:	6113      	str	r3, [r2, #16]
 8009a90:	6153      	str	r3, [r2, #20]
 8009a92:	4620      	mov	r0, r4
 8009a94:	f7ff ffda 	bl	8009a4c <_ZN12If_statementC1Ev>
 8009a98:	627c      	str	r4, [r7, #36]	; 0x24

	parse_if_content(st);
 8009a9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7ff ff5b 	bl	8009958 <_ZN6Parser16parse_if_contentEP12If_statement>
	while (token_buffer.get_type() == TOKEN_ELSEIF)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	3308      	adds	r3, #8
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f005 f98c 	bl	800edc4 <_ZN5Token8get_typeEv>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b11      	cmp	r3, #17
 8009ab0:	bf0c      	ite	eq
 8009ab2:	2301      	moveq	r3, #1
 8009ab4:	2300      	movne	r3, #0
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d004      	beq.n	8009ac6 <_ZN6Parser8parse_ifEv+0x56>
	{
		parse_elseif_content(st);
 8009abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7ff fec2 	bl	8009848 <_ZN6Parser20parse_elseif_contentEP12If_statement>
	while (token_buffer.get_type() == TOKEN_ELSEIF)
 8009ac4:	e7ed      	b.n	8009aa2 <_ZN6Parser8parse_ifEv+0x32>
	}
	if (token_buffer.get_type() == TOKEN_ELSE)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	3308      	adds	r3, #8
 8009aca:	4618      	mov	r0, r3
 8009acc:	f005 f97a 	bl	800edc4 <_ZN5Token8get_typeEv>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b12      	cmp	r3, #18
 8009ad4:	bf0c      	ite	eq
 8009ad6:	2301      	moveq	r3, #1
 8009ad8:	2300      	movne	r3, #0
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d003      	beq.n	8009ae8 <_ZN6Parser8parse_ifEv+0x78>
	{
		parse_else_content(st);
 8009ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7ff fefa 	bl	80098dc <_ZN6Parser18parse_else_contentEP12If_statement>
	}
	assert_token(TOKEN_END, "\"end\" after if body");
 8009ae8:	f107 0320 	add.w	r3, r7, #32
 8009aec:	4618      	mov	r0, r3
 8009aee:	f00c fe4f 	bl	8016790 <_ZNSaIcEC1Ev>
 8009af2:	f107 0220 	add.w	r2, r7, #32
 8009af6:	f107 0308 	add.w	r3, r7, #8
 8009afa:	490e      	ldr	r1, [pc, #56]	; (8009b34 <_ZN6Parser8parse_ifEv+0xc4>)
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7f7 fe49 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009b02:	f107 0308 	add.w	r3, r7, #8
 8009b06:	461a      	mov	r2, r3
 8009b08:	2114      	movs	r1, #20
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f9ac 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009b10:	f107 0308 	add.w	r3, r7, #8
 8009b14:	4618      	mov	r0, r3
 8009b16:	f00d f802 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009b1a:	f107 0320 	add.w	r3, r7, #32
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f00c fe37 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fc61 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>

	return st;
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	372c      	adds	r7, #44	; 0x2c
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd90      	pop	{r4, r7, pc}
 8009b34:	08019f64 	.word	0x08019f64

08009b38 <_ZN6Parser20parse_variable_indexEP8Variable>:

void Parser::parse_variable_index(Variable *var)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08a      	sub	sp, #40	; 0x28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
	if (token_buffer.get_type() == TOKEN_LEFT_SQUARE)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	3308      	adds	r3, #8
 8009b46:	4618      	mov	r0, r3
 8009b48:	f005 f93c 	bl	800edc4 <_ZN5Token8get_typeEv>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b0d      	cmp	r3, #13
 8009b50:	bf0c      	ite	eq
 8009b52:	2301      	moveq	r3, #1
 8009b54:	2300      	movne	r3, #0
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d02a      	beq.n	8009bb2 <_ZN6Parser20parse_variable_indexEP8Variable+0x7a>
	{
		get_next_token();
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fc45 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		var->index = parse_expression();
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f006 f942 	bl	800fdec <_ZN6Parser16parse_expressionEv>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	61da      	str	r2, [r3, #28]
		assert_token(TOKEN_RIGHT_SQUARE, "closing square bracket");
 8009b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b72:	4618      	mov	r0, r3
 8009b74:	f00c fe0c 	bl	8016790 <_ZNSaIcEC1Ev>
 8009b78:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009b7c:	f107 030c 	add.w	r3, r7, #12
 8009b80:	490f      	ldr	r1, [pc, #60]	; (8009bc0 <_ZN6Parser20parse_variable_indexEP8Variable+0x88>)
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7f7 fe06 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009b88:	f107 030c 	add.w	r3, r7, #12
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	210e      	movs	r1, #14
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f969 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009b96:	f107 030c 	add.w	r3, r7, #12
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f00c ffbf 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f00c fdf4 	bl	8016792 <_ZNSaIcED1Ev>
		get_next_token();
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fc1e 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	}
	else
	{
		var->index = nullptr;
	}
}
 8009bb0:	e002      	b.n	8009bb8 <_ZN6Parser20parse_variable_indexEP8Variable+0x80>
		var->index = nullptr;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	61da      	str	r2, [r3, #28]
}
 8009bb8:	bf00      	nop
 8009bba:	3728      	adds	r7, #40	; 0x28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	08019f8c 	.word	0x08019f8c

08009bc4 <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Parser::parse_member_selection_id(std::string &id)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b09e      	sub	sp, #120	; 0x78
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
	assert_token(TOKEN_DOT, "dot operator \".\"");
 8009bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f00c fddc 	bl	8016790 <_ZNSaIcEC1Ev>
 8009bd8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009bdc:	f107 030c 	add.w	r3, r7, #12
 8009be0:	4930      	ldr	r1, [pc, #192]	; (8009ca4 <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0>)
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7f7 fdd6 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009be8:	f107 030c 	add.w	r3, r7, #12
 8009bec:	461a      	mov	r2, r3
 8009bee:	210b      	movs	r1, #11
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f939 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009bf6:	f107 030c 	add.w	r3, r7, #12
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f00c ff8f 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c04:	4618      	mov	r0, r3
 8009c06:	f00c fdc4 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fbee 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_IDENTIFIER, "identifier");
 8009c10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009c14:	4618      	mov	r0, r3
 8009c16:	f00c fdbb 	bl	8016790 <_ZNSaIcEC1Ev>
 8009c1a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c22:	4921      	ldr	r1, [pc, #132]	; (8009ca8 <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe4>)
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7f7 fdb5 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c2e:	461a      	mov	r2, r3
 8009c30:	2102      	movs	r1, #2
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f918 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f00c ff6e 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009c42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009c46:	4618      	mov	r0, r3
 8009c48:	f00c fda3 	bl	8016792 <_ZNSaIcED1Ev>
	id = std::string(std::get<std::string>(token_buffer.get_value()));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f103 0208 	add.w	r2, r3, #8
 8009c52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009c56:	4611      	mov	r1, r2
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f005 f891 	bl	800ed80 <_ZN5Token9get_valueB5cxx11Ev>
 8009c5e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fd8e 	bl	800a784 <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009c6e:	4611      	mov	r1, r2
 8009c70:	4618      	mov	r0, r3
 8009c72:	f00c ff3a 	bl	8016aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8009c76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6838      	ldr	r0, [r7, #0]
 8009c7e:	f00c ff5a 	bl	8016b36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009c82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009c86:	4618      	mov	r0, r3
 8009c88:	f00c ff49 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009c8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fc fbf7 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	get_next_token();
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fba8 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
}
 8009c9c:	bf00      	nop
 8009c9e:	3778      	adds	r7, #120	; 0x78
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	08019fa4 	.word	0x08019fa4
 8009ca8:	08019fb8 	.word	0x08019fb8

08009cac <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable>:

void Parser::parse_variable_id(std::string &id, Variable *var)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b08a      	sub	sp, #40	; 0x28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
	if (id == "Arg")
 8009cb8:	491b      	ldr	r1, [pc, #108]	; (8009d28 <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable+0x7c>)
 8009cba:	68b8      	ldr	r0, [r7, #8]
 8009cbc:	f000 fd72 	bl	800a7a4 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d007      	beq.n	8009cd6 <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable+0x2a>
	{
		var->type = ASSIGNMENT_ARG;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	701a      	strb	r2, [r3, #0]
		parse_member_selection_id(id);
 8009ccc:	68b9      	ldr	r1, [r7, #8]
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f7ff ff78 	bl	8009bc4 <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009cd4:	e011      	b.n	8009cfa <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable+0x4e>
	}
	else if (id == "Par")
 8009cd6:	4915      	ldr	r1, [pc, #84]	; (8009d2c <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable+0x80>)
 8009cd8:	68b8      	ldr	r0, [r7, #8]
 8009cda:	f000 fd63 	bl	800a7a4 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d007      	beq.n	8009cf4 <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable+0x48>
	{
		var->type = ASSIGNMENT_PAR;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	701a      	strb	r2, [r3, #0]
		parse_member_selection_id(id);
 8009cea:	68b9      	ldr	r1, [r7, #8]
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f7ff ff69 	bl	8009bc4 <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009cf2:	e002      	b.n	8009cfa <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable+0x4e>
	}
	else
	{
		var->type = ASSIGNMENT_LOCAL;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	701a      	strb	r2, [r3, #0]
	}

	var->id = std::string(id);
 8009cfa:	f107 0310 	add.w	r3, r7, #16
 8009cfe:	68b9      	ldr	r1, [r7, #8]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f00d f839 	bl	8016d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	3304      	adds	r3, #4
 8009d0a:	f107 0210 	add.w	r2, r7, #16
 8009d0e:	4611      	mov	r1, r2
 8009d10:	4618      	mov	r0, r3
 8009d12:	f00c ff10 	bl	8016b36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009d16:	f107 0310 	add.w	r3, r7, #16
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f00c feff 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8009d20:	bf00      	nop
 8009d22:	3728      	adds	r7, #40	; 0x28
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	08019fc4 	.word	0x08019fc4
 8009d2c:	08019fc8 	.word	0x08019fc8

08009d30 <_ZN8VariableC1Ev>:
	ASSIGNMENT_LOCAL,
	ASSIGNMENT_ARG,
	ASSIGNMENT_PAR,
}variable_type;

class Variable
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f00c fecd 	bl	8016adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4618      	mov	r0, r3
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <_ZN6Parser14parse_variableERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

Variable* Parser::parse_variable(std::string &id)
{
 8009d4c:	b590      	push	{r4, r7, lr}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
	auto var = new Variable();
 8009d56:	2020      	movs	r0, #32
 8009d58:	f00c fd09 	bl	801676e <_Znwj>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	461c      	mov	r4, r3
 8009d60:	4620      	mov	r0, r4
 8009d62:	2320      	movs	r3, #32
 8009d64:	461a      	mov	r2, r3
 8009d66:	2100      	movs	r1, #0
 8009d68:	f00d f8c8 	bl	8016efc <memset>
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f7ff ffdf 	bl	8009d30 <_ZN8VariableC1Ev>
 8009d72:	60fc      	str	r4, [r7, #12]
	parse_variable_id(id, var);
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7ff ff97 	bl	8009cac <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable>
	parse_variable_index(var);
 8009d7e:	68f9      	ldr	r1, [r7, #12]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7ff fed9 	bl	8009b38 <_ZN6Parser20parse_variable_indexEP8Variable>
	return var;
 8009d86:	68fb      	ldr	r3, [r7, #12]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd90      	pop	{r4, r7, pc}

08009d90 <_ZN6Parser16parse_assignmentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

Assignment* Parser::parse_assignment(std::string &id)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08a      	sub	sp, #40	; 0x28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
	auto st = new Assignment();
 8009d9a:	2008      	movs	r0, #8
 8009d9c:	f00c fce7 	bl	801676e <_Znwj>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	2200      	movs	r2, #0
 8009da8:	605a      	str	r2, [r3, #4]
 8009daa:	627b      	str	r3, [r7, #36]	; 0x24
	st->var = parse_variable(id);
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7ff ffcc 	bl	8009d4c <_ZN6Parser14parse_variableERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009db4:	4602      	mov	r2, r0
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	601a      	str	r2, [r3, #0]
	assert_token(TOKEN_ASSIGN, "assignment operator \"=\"");
 8009dba:	f107 0320 	add.w	r3, r7, #32
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f00c fce6 	bl	8016790 <_ZNSaIcEC1Ev>
 8009dc4:	f107 0220 	add.w	r2, r7, #32
 8009dc8:	f107 0308 	add.w	r3, r7, #8
 8009dcc:	4911      	ldr	r1, [pc, #68]	; (8009e14 <_ZN6Parser16parse_assignmentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>)
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7f7 fce0 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009dd4:	f107 0308 	add.w	r3, r7, #8
 8009dd8:	461a      	mov	r2, r3
 8009dda:	2118      	movs	r1, #24
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f843 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009de2:	f107 0308 	add.w	r3, r7, #8
 8009de6:	4618      	mov	r0, r3
 8009de8:	f00c fe99 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009dec:	f107 0320 	add.w	r3, r7, #32
 8009df0:	4618      	mov	r0, r3
 8009df2:	f00c fcce 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 faf8 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	st->value = parse_expression();
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f005 fff5 	bl	800fdec <_ZN6Parser16parse_expressionEv>
 8009e02:	4602      	mov	r2, r0
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	605a      	str	r2, [r3, #4]
	return st;
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3728      	adds	r7, #40	; 0x28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	08019fcc 	.word	0x08019fcc

08009e18 <_ZN6Parser12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Parser::report_error(const std::string message)
{
 8009e18:	b5b0      	push	{r4, r5, r7, lr}
 8009e1a:	b088      	sub	sp, #32
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
	Trans->report_error(message, token_buffer.get_line(),
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685c      	ldr	r4, [r3, #4]
 8009e26:	f107 0308 	add.w	r3, r7, #8
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f00c ffa3 	bl	8016d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	3308      	adds	r3, #8
 8009e36:	4618      	mov	r0, r3
 8009e38:	f004 ffdf 	bl	800edfa <_ZN5Token8get_lineEv>
 8009e3c:	4605      	mov	r5, r0
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	3308      	adds	r3, #8
 8009e42:	4618      	mov	r0, r3
 8009e44:	f004 fff3 	bl	800ee2e <_ZN5Token12get_positionEv>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	f107 0108 	add.w	r1, r7, #8
 8009e4e:	462a      	mov	r2, r5
 8009e50:	4620      	mov	r0, r4
 8009e52:	f005 fa27 	bl	800f2a4 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
			token_buffer.get_position());
 8009e56:	f107 0308 	add.w	r3, r7, #8
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f00c fe5f 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8009e60:	bf00      	nop
 8009e62:	3720      	adds	r7, #32
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bdb0      	pop	{r4, r5, r7, pc}

08009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Parser::assert_token(token_type type, const std::string message)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b096      	sub	sp, #88	; 0x58
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	460b      	mov	r3, r1
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	72fb      	strb	r3, [r7, #11]
	if (token_buffer.get_type() != type)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3308      	adds	r3, #8
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f004 ffa2 	bl	800edc4 <_ZN5Token8get_typeEv>
 8009e80:	4603      	mov	r3, r0
 8009e82:	461a      	mov	r2, r3
 8009e84:	7afb      	ldrb	r3, [r7, #11]
 8009e86:	4293      	cmp	r3, r2
 8009e88:	bf14      	ite	ne
 8009e8a:	2301      	movne	r3, #1
 8009e8c:	2300      	moveq	r3, #0
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d02b      	beq.n	8009eec <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>
	{
		std::string msg = "expected " + message + "\n";
 8009e94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	4916      	ldr	r1, [pc, #88]	; (8009ef4 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>)
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 fc94 	bl	800a7ca <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8009ea2:	f107 0310 	add.w	r3, r7, #16
 8009ea6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009eaa:	4a13      	ldr	r2, [pc, #76]	; (8009ef8 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x90>)
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 fcb1 	bl	800a814 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f00c fe31 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		report_error(msg);
 8009ebc:	f107 0210 	add.w	r2, r7, #16
 8009ec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f00c ff56 	bl	8016d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009ecc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f7ff ffa0 	bl	8009e18 <_ZN6Parser12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009ed8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009edc:	4618      	mov	r0, r3
 8009ede:	f00c fe1e 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		std::string msg = "expected " + message + "\n";
 8009ee2:	f107 0310 	add.w	r3, r7, #16
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f00c fe19 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8009eec:	bf00      	nop
 8009eee:	3758      	adds	r7, #88	; 0x58
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	08019fe4 	.word	0x08019fe4
 8009ef8:	08019ff0 	.word	0x08019ff0

08009efc <_ZN6Parser24parse_function_argumentsEP13Function_call>:

void Parser::parse_function_arguments(Function_call *f)
{
 8009efc:	b590      	push	{r4, r7, lr}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
	if (token_buffer.get_type() != TOKEN_RIGHT_BRACKET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	3308      	adds	r3, #8
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f004 ff5a 	bl	800edc4 <_ZN5Token8get_typeEv>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b27      	cmp	r3, #39	; 0x27
 8009f14:	bf14      	ite	ne
 8009f16:	2301      	movne	r3, #1
 8009f18:	2300      	moveq	r3, #0
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d02c      	beq.n	8009f7a <_ZN6Parser24parse_function_argumentsEP13Function_call+0x7e>
	{
		f->arguments.push_back(parse_expression());
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	f103 0418 	add.w	r4, r3, #24
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f005 ff60 	bl	800fdec <_ZN6Parser16parse_expressionEv>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	60bb      	str	r3, [r7, #8]
 8009f30:	f107 0308 	add.w	r3, r7, #8
 8009f34:	4619      	mov	r1, r3
 8009f36:	4620      	mov	r0, r4
 8009f38:	f000 fbe2 	bl	800a700 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backEOS1_>
		while (token_buffer.get_type() == TOKEN_COMA)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	3308      	adds	r3, #8
 8009f40:	4618      	mov	r0, r3
 8009f42:	f004 ff3f 	bl	800edc4 <_ZN5Token8get_typeEv>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b0c      	cmp	r3, #12
 8009f4a:	bf0c      	ite	eq
 8009f4c:	2301      	moveq	r3, #1
 8009f4e:	2300      	movne	r3, #0
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d011      	beq.n	8009f7a <_ZN6Parser24parse_function_argumentsEP13Function_call+0x7e>
		{
			get_next_token();
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 fa48 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
			f->arguments.push_back(parse_expression());
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	f103 0418 	add.w	r4, r3, #24
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f005 ff42 	bl	800fdec <_ZN6Parser16parse_expressionEv>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	60fb      	str	r3, [r7, #12]
 8009f6c:	f107 030c 	add.w	r3, r7, #12
 8009f70:	4619      	mov	r1, r3
 8009f72:	4620      	mov	r0, r4
 8009f74:	f000 fbc4 	bl	800a700 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backEOS1_>
		while (token_buffer.get_type() == TOKEN_COMA)
 8009f78:	e7e0      	b.n	8009f3c <_ZN6Parser24parse_function_argumentsEP13Function_call+0x40>
		}
	}
}
 8009f7a:	bf00      	nop
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd90      	pop	{r4, r7, pc}

08009f82 <_ZN13Function_callC1Ev>:
	variable_type type;
	std::string id;
	Expression* index;
};

class Function_call
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f00c fda5 	bl	8016adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	3318      	adds	r3, #24
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7ff fd31 	bl	80099fe <_ZNSt6vectorIP10ExpressionSaIS1_EEC1Ev>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <_ZN6Parser19parse_function_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

Function_call* Parser::parse_function_call(std::string &id)
{
 8009fa8:	b590      	push	{r4, r7, lr}
 8009faa:	b091      	sub	sp, #68	; 0x44
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
	auto f = new Function_call();
 8009fb2:	2024      	movs	r0, #36	; 0x24
 8009fb4:	f00c fbdb 	bl	801676e <_Znwj>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	461c      	mov	r4, r3
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	2324      	movs	r3, #36	; 0x24
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	f00c ff9a 	bl	8016efc <memset>
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f7ff ffda 	bl	8009f82 <_ZN13Function_callC1Ev>
 8009fce:	63fc      	str	r4, [r7, #60]	; 0x3c
	f->id = std::string(id);
 8009fd0:	f107 0308 	add.w	r3, r7, #8
 8009fd4:	6839      	ldr	r1, [r7, #0]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f00c fece 	bl	8016d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fde:	f107 0208 	add.w	r2, r7, #8
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f00c fda6 	bl	8016b36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009fea:	f107 0308 	add.w	r3, r7, #8
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f00c fd95 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	get_next_token();
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f9f9 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	parse_function_arguments(f);
 8009ffa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7ff ff7d 	bl	8009efc <_ZN6Parser24parse_function_argumentsEP13Function_call>
	assert_token(TOKEN_RIGHT_BRACKET, "closing bracket");
 800a002:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a006:	4618      	mov	r0, r3
 800a008:	f00c fbc2 	bl	8016790 <_ZNSaIcEC1Ev>
 800a00c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a010:	f107 0320 	add.w	r3, r7, #32
 800a014:	490e      	ldr	r1, [pc, #56]	; (800a050 <_ZN6Parser19parse_function_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 800a016:	4618      	mov	r0, r3
 800a018:	f7f7 fbbc 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a01c:	f107 0320 	add.w	r3, r7, #32
 800a020:	461a      	mov	r2, r3
 800a022:	2127      	movs	r1, #39	; 0x27
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7ff ff1f 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a02a:	f107 0320 	add.w	r3, r7, #32
 800a02e:	4618      	mov	r0, r3
 800a030:	f00c fd75 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a034:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a038:	4618      	mov	r0, r3
 800a03a:	f00c fbaa 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f9d4 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	return f;
 800a044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a046:	4618      	mov	r0, r3
 800a048:	3744      	adds	r7, #68	; 0x44
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd90      	pop	{r4, r7, pc}
 800a04e:	bf00      	nop
 800a050:	08019ff4 	.word	0x08019ff4

0800a054 <_ZN6Parser33parse_assignment_or_function_callEP9Statement>:

void Parser::parse_assignment_or_function_call(Statement *s)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b092      	sub	sp, #72	; 0x48
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
	std::string id = std::get<std::string>(token_buffer.get_value());
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f103 0208 	add.w	r2, r3, #8
 800a064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a068:	4611      	mov	r1, r2
 800a06a:	4618      	mov	r0, r3
 800a06c:	f004 fe88 	bl	800ed80 <_ZN5Token9get_valueB5cxx11Ev>
 800a070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a074:	4618      	mov	r0, r3
 800a076:	f000 fb85 	bl	800a784 <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 800a07a:	4602      	mov	r2, r0
 800a07c:	f107 030c 	add.w	r3, r7, #12
 800a080:	4611      	mov	r1, r2
 800a082:	4618      	mov	r0, r3
 800a084:	f00c fd31 	bl	8016aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fc f9f9 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	get_next_token();
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f9aa 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	if (token_buffer.get_type() == TOKEN_LEFT_BRACKET)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	3308      	adds	r3, #8
 800a09c:	4618      	mov	r0, r3
 800a09e:	f004 fe91 	bl	800edc4 <_ZN5Token8get_typeEv>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b26      	cmp	r3, #38	; 0x26
 800a0a6:	bf0c      	ite	eq
 800a0a8:	2301      	moveq	r3, #1
 800a0aa:	2300      	movne	r3, #0
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d013      	beq.n	800a0da <_ZN6Parser33parse_assignment_or_function_callEP9Statement+0x86>
	{
		s->type = STATEMENT_FUNCTION_CALL;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	701a      	strb	r2, [r3, #0]
		s->content = parse_function_call(id);
 800a0b8:	f107 030c 	add.w	r3, r7, #12
 800a0bc:	4619      	mov	r1, r3
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f7ff ff72 	bl	8009fa8 <_ZN6Parser19parse_function_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	643b      	str	r3, [r7, #64]	; 0x40
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 fbc8 	bl	800a868 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_>
 800a0d8:	e012      	b.n	800a100 <_ZN6Parser33parse_assignment_or_function_callEP9Statement+0xac>
	}
	else
	{
		s->type = STATEMENT_ASSIGNMENT;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	701a      	strb	r2, [r3, #0]
		s->content = parse_assignment(id);
 800a0e0:	f107 030c 	add.w	r3, r7, #12
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff fe52 	bl	8009d90 <_ZN6Parser16parse_assignmentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	647b      	str	r3, [r7, #68]	; 0x44
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	3304      	adds	r3, #4
 800a0f4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 fbde 	bl	800a8bc <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_>
	std::string id = std::get<std::string>(token_buffer.get_value());
 800a100:	f107 030c 	add.w	r3, r7, #12
 800a104:	4618      	mov	r0, r3
 800a106:	f00c fd0a 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800a10a:	bf00      	nop
 800a10c:	3748      	adds	r7, #72	; 0x48
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEC1Ev>:
      variant() = default;
 800a112:	b580      	push	{r7, lr}
 800a114:	b082      	sub	sp, #8
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f000 fc42 	bl	800a9a6 <_ZNSt8__detail9__variant13_Variant_baseIJP10AssignmentP13Function_callP15While_statementP12If_statementEEC1Ev>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4618      	mov	r0, r3
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <_ZN9StatementC1Ev>:
	STATEMENT_IF
}statement_type;

typedef std::variant<Assignment*, Function_call*, While_statement*, If_statement*> statement_content;

class Statement
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3304      	adds	r3, #4
 800a138:	4618      	mov	r0, r3
 800a13a:	f7ff ffea 	bl	800a112 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEC1Ev>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4618      	mov	r0, r3
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <_ZN6Parser15parse_statementEv>:

Statement* Parser::parse_statement() //todo refactor
{
 800a148:	b590      	push	{r4, r7, lr}
 800a14a:	b08d      	sub	sp, #52	; 0x34
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
	auto s = new Statement();
 800a150:	200c      	movs	r0, #12
 800a152:	f00c fb0c 	bl	801676e <_Znwj>
 800a156:	4603      	mov	r3, r0
 800a158:	461c      	mov	r4, r3
 800a15a:	2300      	movs	r3, #0
 800a15c:	7023      	strb	r3, [r4, #0]
 800a15e:	2300      	movs	r3, #0
 800a160:	6063      	str	r3, [r4, #4]
 800a162:	2300      	movs	r3, #0
 800a164:	7223      	strb	r3, [r4, #8]
 800a166:	4620      	mov	r0, r4
 800a168:	f7ff ffe0 	bl	800a12c <_ZN9StatementC1Ev>
 800a16c:	62fc      	str	r4, [r7, #44]	; 0x2c
	switch (token_buffer.get_type())
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	3308      	adds	r3, #8
 800a172:	4618      	mov	r0, r3
 800a174:	f004 fe26 	bl	800edc4 <_ZN5Token8get_typeEv>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b13      	cmp	r3, #19
 800a17c:	d00b      	beq.n	800a196 <_ZN6Parser15parse_statementEv+0x4e>
 800a17e:	2b13      	cmp	r3, #19
 800a180:	dc31      	bgt.n	800a1e6 <_ZN6Parser15parse_statementEv+0x9e>
 800a182:	2b02      	cmp	r3, #2
 800a184:	d002      	beq.n	800a18c <_ZN6Parser15parse_statementEv+0x44>
 800a186:	2b10      	cmp	r3, #16
 800a188:	d019      	beq.n	800a1be <_ZN6Parser15parse_statementEv+0x76>
 800a18a:	e02c      	b.n	800a1e6 <_ZN6Parser15parse_statementEv+0x9e>
	{
	case TOKEN_IDENTIFIER:
		parse_assignment_or_function_call(s);
 800a18c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7ff ff60 	bl	800a054 <_ZN6Parser33parse_assignment_or_function_callEP9Statement>
		break;
 800a194:	e045      	b.n	800a222 <_ZN6Parser15parse_statementEv+0xda>
	case TOKEN_WHILE:
		s->type = STATEMENT_WHILE;
 800a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a198:	2202      	movs	r2, #2
 800a19a:	701a      	strb	r2, [r3, #0]
		get_next_token();
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f925 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		s->content = parse_while();
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7ff faec 	bl	8009780 <_ZN6Parser11parse_whileEv>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	60bb      	str	r3, [r7, #8]
 800a1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	f107 0208 	add.w	r2, r7, #8
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 fc02 	bl	800a9c0 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_>
		break;
 800a1bc:	e031      	b.n	800a222 <_ZN6Parser15parse_statementEv+0xda>
	case TOKEN_IF:
		s->type = STATEMENT_IF;
 800a1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c0:	2203      	movs	r2, #3
 800a1c2:	701a      	strb	r2, [r3, #0]
		get_next_token();
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f911 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		s->content = parse_if();
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7ff fc50 	bl	8009a70 <_ZN6Parser8parse_ifEv>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	60fb      	str	r3, [r7, #12]
 800a1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	f107 020c 	add.w	r2, r7, #12
 800a1dc:	4611      	mov	r1, r2
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 fc18 	bl	800aa14 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_>
		break;
 800a1e4:	e01d      	b.n	800a222 <_ZN6Parser15parse_statementEv+0xda>
	default:
		report_error("expected statement:\nidentifier, if, while\n");
 800a1e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f00c fad0 	bl	8016790 <_ZNSaIcEC1Ev>
 800a1f0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a1f4:	f107 0310 	add.w	r3, r7, #16
 800a1f8:	490c      	ldr	r1, [pc, #48]	; (800a22c <_ZN6Parser15parse_statementEv+0xe4>)
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7f7 faca 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a200:	f107 0310 	add.w	r3, r7, #16
 800a204:	4619      	mov	r1, r3
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7ff fe06 	bl	8009e18 <_ZN6Parser12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a20c:	f107 0310 	add.w	r3, r7, #16
 800a210:	4618      	mov	r0, r3
 800a212:	f00c fc84 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a21a:	4618      	mov	r0, r3
 800a21c:	f00c fab9 	bl	8016792 <_ZNSaIcED1Ev>
		break;
 800a220:	bf00      	nop
	}
	return s;
 800a222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a224:	4618      	mov	r0, r3
 800a226:	3734      	adds	r7, #52	; 0x34
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd90      	pop	{r4, r7, pc}
 800a22c:	0801a004 	.word	0x0801a004

0800a230 <_ZN6Parser24is_token_statement_firstEv>:

bool Parser::is_token_statement_first()
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
	return token_buffer.get_type() == TOKEN_IDENTIFIER
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3308      	adds	r3, #8
 800a23c:	4618      	mov	r0, r3
 800a23e:	f004 fdc1 	bl	800edc4 <_ZN5Token8get_typeEv>
 800a242:	4603      	mov	r3, r0
			|| token_buffer.get_type() == TOKEN_WHILE
			|| token_buffer.get_type() == TOKEN_IF;
 800a244:	2b02      	cmp	r3, #2
 800a246:	d00f      	beq.n	800a268 <_ZN6Parser24is_token_statement_firstEv+0x38>
			|| token_buffer.get_type() == TOKEN_WHILE
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	3308      	adds	r3, #8
 800a24c:	4618      	mov	r0, r3
 800a24e:	f004 fdb9 	bl	800edc4 <_ZN5Token8get_typeEv>
 800a252:	4603      	mov	r3, r0
 800a254:	2b13      	cmp	r3, #19
 800a256:	d007      	beq.n	800a268 <_ZN6Parser24is_token_statement_firstEv+0x38>
			|| token_buffer.get_type() == TOKEN_IF;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	3308      	adds	r3, #8
 800a25c:	4618      	mov	r0, r3
 800a25e:	f004 fdb1 	bl	800edc4 <_ZN5Token8get_typeEv>
 800a262:	4603      	mov	r3, r0
 800a264:	2b10      	cmp	r3, #16
 800a266:	d101      	bne.n	800a26c <_ZN6Parser24is_token_statement_firstEv+0x3c>
 800a268:	2301      	movs	r3, #1
 800a26a:	e000      	b.n	800a26e <_ZN6Parser24is_token_statement_firstEv+0x3e>
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3708      	adds	r7, #8
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <_ZN6Parser13skip_newlinesEv>:

void Parser::skip_newlines()
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b082      	sub	sp, #8
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
	while (token_buffer.get_type() == TOKEN_NEWLINE)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	3308      	adds	r3, #8
 800a282:	4618      	mov	r0, r3
 800a284:	f004 fd9e 	bl	800edc4 <_ZN5Token8get_typeEv>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b0a      	cmp	r3, #10
 800a28c:	bf0c      	ite	eq
 800a28e:	2301      	moveq	r3, #1
 800a290:	2300      	movne	r3, #0
 800a292:	b2db      	uxtb	r3, r3
 800a294:	2b00      	cmp	r3, #0
 800a296:	d003      	beq.n	800a2a0 <_ZN6Parser13skip_newlinesEv+0x2a>
	{
		get_next_token();
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f8a7 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	while (token_buffer.get_type() == TOKEN_NEWLINE)
 800a29e:	e7ee      	b.n	800a27e <_ZN6Parser13skip_newlinesEv+0x8>
	}
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <_ZNSt12_Vector_baseIP9StatementSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 fbd8 	bl	800aa68 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE12_Vector_implC1Ev>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <_ZNSt6vectorIP9StatementSaIS1_EEC1Ev>:
      vector() = default;
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b082      	sub	sp, #8
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7ff ffeb 	bl	800a2a8 <_ZNSt12_Vector_baseIP9StatementSaIS1_EEC1Ev>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <_ZN4BodyC1Ev>:
class Body
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7ff ffeb 	bl	800a2c2 <_ZNSt6vectorIP9StatementSaIS1_EEC1Ev>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <_ZN6Parser10parse_bodyEv>:

Body* Parser::parse_body()
{
 800a2f6:	b590      	push	{r4, r7, lr}
 800a2f8:	b085      	sub	sp, #20
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
	auto bod = new Body();
 800a2fe:	200c      	movs	r0, #12
 800a300:	f00c fa35 	bl	801676e <_Znwj>
 800a304:	4603      	mov	r3, r0
 800a306:	461c      	mov	r4, r3
 800a308:	4622      	mov	r2, r4
 800a30a:	2300      	movs	r3, #0
 800a30c:	6013      	str	r3, [r2, #0]
 800a30e:	6053      	str	r3, [r2, #4]
 800a310:	6093      	str	r3, [r2, #8]
 800a312:	4620      	mov	r0, r4
 800a314:	f7ff ffe2 	bl	800a2dc <_ZN4BodyC1Ev>
 800a318:	60fc      	str	r4, [r7, #12]
	while (is_token_statement_first())
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7ff ff88 	bl	800a230 <_ZN6Parser24is_token_statement_firstEv>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00f      	beq.n	800a346 <_ZN6Parser10parse_bodyEv+0x50>
	{
		bod->statements.push_back(parse_statement());
 800a326:	68fc      	ldr	r4, [r7, #12]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7ff ff0d 	bl	800a148 <_ZN6Parser15parse_statementEv>
 800a32e:	4603      	mov	r3, r0
 800a330:	60bb      	str	r3, [r7, #8]
 800a332:	f107 0308 	add.w	r3, r7, #8
 800a336:	4619      	mov	r1, r3
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 fba5 	bl	800aa88 <_ZNSt6vectorIP9StatementSaIS1_EE9push_backEOS1_>
		skip_newlines();
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f7ff ff99 	bl	800a276 <_ZN6Parser13skip_newlinesEv>
	while (is_token_statement_first())
 800a344:	e7e9      	b.n	800a31a <_ZN6Parser10parse_bodyEv+0x24>
	}
	return bod;
 800a346:	68fb      	ldr	r3, [r7, #12]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd90      	pop	{r4, r7, pc}

0800a350 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>:
    struct _Move_assign_base : _Copy_assign_alias<_Types...>
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	4611      	mov	r1, r2
 800a360:	4618      	mov	r0, r3
 800a362:	f000 fd45 	bl	800adf0 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4618      	mov	r0, r3
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>:
    struct _Variant_base : _Move_assign_alias<_Types...>
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	4611      	mov	r1, r2
 800a380:	4618      	mov	r0, r3
 800a382:	f7ff ffe5 	bl	800a350 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4618      	mov	r0, r3
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS6_>:
    class variant
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	4611      	mov	r1, r2
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff ffe5 	bl	800a370 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <_ZN5TokenaSERKS_>:
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	781a      	ldrb	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	701a      	strb	r2, [r3, #0]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	1d1a      	adds	r2, r3, #4
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7ff ffdf 	bl	800a390 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS6_>
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	6a1a      	ldr	r2, [r3, #32]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	621a      	str	r2, [r3, #32]
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	625a      	str	r2, [r3, #36]	; 0x24
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <_ZN6Parser14get_next_tokenEv>:

void Parser::get_next_token()
{
 800a3ec:	b5b0      	push	{r4, r5, r7, lr}
 800a3ee:	b09a      	sub	sp, #104	; 0x68
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
	token_buffer = Lex->build_token();
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	f107 030c 	add.w	r3, r7, #12
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fc fc46 	bl	8006c90 <_ZN5Lexer11build_tokenEv>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3308      	adds	r3, #8
 800a408:	f107 020c 	add.w	r2, r7, #12
 800a40c:	4611      	mov	r1, r2
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff ffce 	bl	800a3b0 <_ZN5TokenaSERKS_>
 800a414:	f107 030c 	add.w	r3, r7, #12
 800a418:	4618      	mov	r0, r3
 800a41a:	f004 fca3 	bl	800ed64 <_ZN5TokenD1Ev>
	if (token_buffer.get_type() == TOKEN_ERROR)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	3308      	adds	r3, #8
 800a422:	4618      	mov	r0, r3
 800a424:	f004 fcce 	bl	800edc4 <_ZN5Token8get_typeEv>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b28      	cmp	r3, #40	; 0x28
 800a42c:	bf0c      	ite	eq
 800a42e:	2301      	moveq	r3, #1
 800a430:	2300      	movne	r3, #0
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	d032      	beq.n	800a49e <_ZN6Parser14get_next_tokenEv+0xb2>
	{
		Trans->report_error(std::get<std::string>(token_buffer.get_value()),
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	685c      	ldr	r4, [r3, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f103 0208 	add.w	r2, r3, #8
 800a442:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a446:	4611      	mov	r1, r2
 800a448:	4618      	mov	r0, r3
 800a44a:	f004 fc99 	bl	800ed80 <_ZN5Token9get_valueB5cxx11Ev>
 800a44e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a452:	4618      	mov	r0, r3
 800a454:	f000 f996 	bl	800a784 <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 800a458:	4602      	mov	r2, r0
 800a45a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a45e:	4611      	mov	r1, r2
 800a460:	4618      	mov	r0, r3
 800a462:	f00c fb42 	bl	8016aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	3308      	adds	r3, #8
 800a46a:	4618      	mov	r0, r3
 800a46c:	f004 fcc5 	bl	800edfa <_ZN5Token8get_lineEv>
 800a470:	4605      	mov	r5, r0
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3308      	adds	r3, #8
 800a476:	4618      	mov	r0, r3
 800a478:	f004 fcd9 	bl	800ee2e <_ZN5Token12get_positionEv>
 800a47c:	4603      	mov	r3, r0
 800a47e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a482:	462a      	mov	r2, r5
 800a484:	4620      	mov	r0, r4
 800a486:	f004 ff0d 	bl	800f2a4 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
				token_buffer.get_line(), token_buffer.get_position());
 800a48a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a48e:	4618      	mov	r0, r3
 800a490:	f00c fb45 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Trans->report_error(std::get<std::string>(token_buffer.get_value()),
 800a494:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fb fff3 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	}
}
 800a49e:	bf00      	nop
 800a4a0:	3768      	adds	r7, #104	; 0x68
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a4a8 <_ZN6Parser11parse_setupEP7Program>:

void Parser::parse_setup(Program *Prog)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b090      	sub	sp, #64	; 0x40
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
	get_next_token();
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff ff9a 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_SETUP, "\"setup\" keyword");
 800a4b8:	f107 0320 	add.w	r3, r7, #32
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f00c f967 	bl	8016790 <_ZNSaIcEC1Ev>
 800a4c2:	f107 0220 	add.w	r2, r7, #32
 800a4c6:	f107 0308 	add.w	r3, r7, #8
 800a4ca:	4923      	ldr	r1, [pc, #140]	; (800a558 <_ZN6Parser11parse_setupEP7Program+0xb0>)
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7f7 f961 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a4d2:	f107 0308 	add.w	r3, r7, #8
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	2107      	movs	r1, #7
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff fcc4 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a4e0:	f107 0308 	add.w	r3, r7, #8
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f00c fb1a 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a4ea:	f107 0320 	add.w	r3, r7, #32
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f00c f94f 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7ff ff79 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_COLON, "colon after setup");
 800a4fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a4fe:	4618      	mov	r0, r3
 800a500:	f00c f946 	bl	8016790 <_ZNSaIcEC1Ev>
 800a504:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a50c:	4913      	ldr	r1, [pc, #76]	; (800a55c <_ZN6Parser11parse_setupEP7Program+0xb4>)
 800a50e:	4618      	mov	r0, r3
 800a510:	f7f7 f940 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a518:	461a      	mov	r2, r3
 800a51a:	2101      	movs	r1, #1
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff fca3 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a526:	4618      	mov	r0, r3
 800a528:	f00c faf9 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a52c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a530:	4618      	mov	r0, r3
 800a532:	f00c f92e 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7ff ff58 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	skip_newlines();
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f7ff fe9a 	bl	800a276 <_ZN6Parser13skip_newlinesEv>
	Prog->setup = parse_body();
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7ff fed7 	bl	800a2f6 <_ZN6Parser10parse_bodyEv>
 800a548:	4602      	mov	r2, r0
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	601a      	str	r2, [r3, #0]
}
 800a54e:	bf00      	nop
 800a550:	3740      	adds	r7, #64	; 0x40
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	0801a030 	.word	0x0801a030
 800a55c:	0801a040 	.word	0x0801a040

0800a560 <_ZN6Parser10parse_loopEP7Program>:

void Parser::parse_loop(Program *Prog)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b090      	sub	sp, #64	; 0x40
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
	assert_token(TOKEN_LOOP, "\"loop\" keyword");
 800a56a:	f107 0320 	add.w	r3, r7, #32
 800a56e:	4618      	mov	r0, r3
 800a570:	f00c f90e 	bl	8016790 <_ZNSaIcEC1Ev>
 800a574:	f107 0220 	add.w	r2, r7, #32
 800a578:	f107 0308 	add.w	r3, r7, #8
 800a57c:	4922      	ldr	r1, [pc, #136]	; (800a608 <_ZN6Parser10parse_loopEP7Program+0xa8>)
 800a57e:	4618      	mov	r0, r3
 800a580:	f7f7 f908 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a584:	f107 0308 	add.w	r3, r7, #8
 800a588:	461a      	mov	r2, r3
 800a58a:	2108      	movs	r1, #8
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff fc6b 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a592:	f107 0308 	add.w	r3, r7, #8
 800a596:	4618      	mov	r0, r3
 800a598:	f00c fac1 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a59c:	f107 0320 	add.w	r3, r7, #32
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f00c f8f6 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7ff ff20 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_COLON, "colon after loop");
 800a5ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f00c f8ed 	bl	8016790 <_ZNSaIcEC1Ev>
 800a5b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a5ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5be:	4913      	ldr	r1, [pc, #76]	; (800a60c <_ZN6Parser10parse_loopEP7Program+0xac>)
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7f7 f8e7 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a5c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7ff fc4a 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a5d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f00c faa0 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a5de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f00c f8d5 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7ff feff 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	skip_newlines();
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7ff fe41 	bl	800a276 <_ZN6Parser13skip_newlinesEv>
	Prog->loop = parse_body();
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7ff fe7e 	bl	800a2f6 <_ZN6Parser10parse_bodyEv>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	605a      	str	r2, [r3, #4]
}
 800a600:	bf00      	nop
 800a602:	3740      	adds	r7, #64	; 0x40
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	0801a054 	.word	0x0801a054
 800a60c:	0801a064 	.word	0x0801a064

0800a610 <_ZN6Parser12parse_finishEP7Program>:

void Parser::parse_finish(Program *Prog)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b090      	sub	sp, #64	; 0x40
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
	assert_token(TOKEN_FINISH, "\"finish\" keyword");
 800a61a:	f107 0320 	add.w	r3, r7, #32
 800a61e:	4618      	mov	r0, r3
 800a620:	f00c f8b6 	bl	8016790 <_ZNSaIcEC1Ev>
 800a624:	f107 0220 	add.w	r2, r7, #32
 800a628:	f107 0308 	add.w	r3, r7, #8
 800a62c:	4922      	ldr	r1, [pc, #136]	; (800a6b8 <_ZN6Parser12parse_finishEP7Program+0xa8>)
 800a62e:	4618      	mov	r0, r3
 800a630:	f7f7 f8b0 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a634:	f107 0308 	add.w	r3, r7, #8
 800a638:	461a      	mov	r2, r3
 800a63a:	2109      	movs	r1, #9
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7ff fc13 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a642:	f107 0308 	add.w	r3, r7, #8
 800a646:	4618      	mov	r0, r3
 800a648:	f00c fa69 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a64c:	f107 0320 	add.w	r3, r7, #32
 800a650:	4618      	mov	r0, r3
 800a652:	f00c f89e 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f7ff fec8 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_COLON, "colon after finish");
 800a65c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a660:	4618      	mov	r0, r3
 800a662:	f00c f895 	bl	8016790 <_ZNSaIcEC1Ev>
 800a666:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a66a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a66e:	4913      	ldr	r1, [pc, #76]	; (800a6bc <_ZN6Parser12parse_finishEP7Program+0xac>)
 800a670:	4618      	mov	r0, r3
 800a672:	f7f7 f88f 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a67a:	461a      	mov	r2, r3
 800a67c:	2101      	movs	r1, #1
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7ff fbf2 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a688:	4618      	mov	r0, r3
 800a68a:	f00c fa48 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a68e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a692:	4618      	mov	r0, r3
 800a694:	f00c f87d 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f7ff fea7 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	skip_newlines();
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f7ff fde9 	bl	800a276 <_ZN6Parser13skip_newlinesEv>
	Prog->finish = parse_body();
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7ff fe26 	bl	800a2f6 <_ZN6Parser10parse_bodyEv>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	609a      	str	r2, [r3, #8]
}
 800a6b0:	bf00      	nop
 800a6b2:	3740      	adds	r7, #64	; 0x40
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	0801a078 	.word	0x0801a078
 800a6bc:	0801a08c 	.word	0x0801a08c

0800a6c0 <_ZN6Parser13parse_programEv>:

Program* Parser::parse_program()
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
	auto Prog = new Program();
 800a6c8:	200c      	movs	r0, #12
 800a6ca:	f00c f850 	bl	801676e <_Znwj>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	601a      	str	r2, [r3, #0]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	605a      	str	r2, [r3, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	609a      	str	r2, [r3, #8]
 800a6dc:	60fb      	str	r3, [r7, #12]
	parse_setup(Prog);
 800a6de:	68f9      	ldr	r1, [r7, #12]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7ff fee1 	bl	800a4a8 <_ZN6Parser11parse_setupEP7Program>
	parse_loop(Prog);
 800a6e6:	68f9      	ldr	r1, [r7, #12]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff ff39 	bl	800a560 <_ZN6Parser10parse_loopEP7Program>
	parse_finish(Prog);
 800a6ee:	68f9      	ldr	r1, [r7, #12]
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f7ff ff8d 	bl	800a610 <_ZN6Parser12parse_finishEP7Program>
	return Prog;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800a70a:	6838      	ldr	r0, [r7, #0]
 800a70c:	f000 fb86 	bl	800ae1c <_ZSt4moveIRP10ExpressionEONSt16remove_referenceIT_E4typeEOS4_>
 800a710:	4603      	mov	r3, r0
 800a712:	4619      	mov	r1, r3
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fb8c 	bl	800ae32 <_ZNSt6vectorIP10ExpressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800a71a:	bf00      	nop
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <_ZNSt6vectorIP4BodySaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800a72c:	6838      	ldr	r0, [r7, #0]
 800a72e:	f000 fbb2 	bl	800ae96 <_ZSt4moveIRP4BodyEONSt16remove_referenceIT_E4typeEOS4_>
 800a732:	4603      	mov	r3, r0
 800a734:	4619      	mov	r1, r3
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fbb8 	bl	800aeac <_ZNSt6vectorIP4BodySaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800a73c:	bf00      	nop
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fbdf 	bl	800af10 <_ZNSaIP10ExpressionEC1Ev>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4618      	mov	r0, r3
 800a756:	f000 fbe7 	bl	800af28 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4618      	mov	r0, r3
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <_ZNSt12_Vector_baseIP4BodySaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 fc0d 	bl	800af8c <_ZNSaIP4BodyEC1Ev>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4618      	mov	r0, r3
 800a776:	f000 fc15 	bl	800afa4 <_ZNSt12_Vector_baseIP4BodySaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4618      	mov	r0, r3
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>:
    constexpr _Tp&& get(variant<_Types...>&& __v)
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
	std::move(__v));
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fc3b 	bl	800b008 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 800a792:	4603      	mov	r3, r0
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
 800a794:	4618      	mov	r0, r3
 800a796:	f000 fc65 	bl	800b064 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>
 800a79a:	4603      	mov	r3, r0
    }
 800a79c:	4618      	mov	r0, r3
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 800a7ae:	6839      	ldr	r1, [r7, #0]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f00c faa7 	bl	8016d04 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	bf0c      	ite	eq
 800a7bc:	2301      	moveq	r3, #1
 800a7be:	2300      	movne	r3, #0
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b086      	sub	sp, #24
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	60f8      	str	r0, [r7, #12]
 800a7d2:	60b9      	str	r1, [r7, #8]
 800a7d4:	607a      	str	r2, [r7, #4]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
 800a7d6:	68b8      	ldr	r0, [r7, #8]
 800a7d8:	f7f6 fc12 	bl	8001000 <_ZNSt11char_traitsIcE6lengthEPKc>
 800a7dc:	6178      	str	r0, [r7, #20]
      __string_type __str;
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f00c f97c 	bl	8016adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
      __str.reserve(__len + __rhs.size());
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f00c f9ce 	bl	8016b86 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f00c f9cb 	bl	8016b8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 800a7f8:	697a      	ldr	r2, [r7, #20]
 800a7fa:	68b9      	ldr	r1, [r7, #8]
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f00c fa4b 	bl	8016c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 800a802:	6879      	ldr	r1, [r7, #4]
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f00c fa41 	bl	8016c8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 800a80a:	bf00      	nop
    }
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	3718      	adds	r7, #24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800a820:	6879      	ldr	r1, [r7, #4]
 800a822:	68b8      	ldr	r0, [r7, #8]
 800a824:	f00c fa48 	bl	8016cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 800a828:	4603      	mov	r3, r0
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 fc3a 	bl	800b0a4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800a830:	4603      	mov	r3, r0
 800a832:	4619      	mov	r1, r3
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f00c f958 	bl	8016aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <_ZNKSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE5indexEv>:
      constexpr size_t index() const noexcept
 800a842:	b480      	push	{r7}
 800a844:	b083      	sub	sp, #12
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
	if (this->_M_index ==
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	791b      	ldrb	r3, [r3, #4]
 800a84e:	2bff      	cmp	r3, #255	; 0xff
 800a850:	d102      	bne.n	800a858 <_ZNKSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE5indexEv+0x16>
	  return variant_npos;
 800a852:	f04f 33ff 	mov.w	r3, #4294967295
 800a856:	e001      	b.n	800a85c <_ZNKSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE5indexEv+0x1a>
	return this->_M_index;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	791b      	ldrb	r3, [r3, #4]
      }
 800a85c:	4618      	mov	r0, r3
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_>:
	operator=(_Tp&& __rhs)
 800a868:	b590      	push	{r4, r7, lr}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800a872:	2301      	movs	r3, #1
 800a874:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7ff ffe3 	bl	800a842 <_ZNKSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE5indexEv>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b01      	cmp	r3, #1
 800a880:	bf0c      	ite	eq
 800a882:	2301      	moveq	r3, #1
 800a884:	2300      	movne	r3, #0
 800a886:	b2db      	uxtb	r3, r3
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00a      	beq.n	800a8a2 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800a88c:	6838      	ldr	r0, [r7, #0]
 800a88e:	f000 fc65 	bl	800b15c <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800a892:	4603      	mov	r3, r0
 800a894:	681c      	ldr	r4, [r3, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fc44 	bl	800b124 <_ZSt3getILj1EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>
 800a89c:	4603      	mov	r3, r0
 800a89e:	601c      	str	r4, [r3, #0]
 800a8a0:	e007      	b.n	800a8b2 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800a8a2:	6838      	ldr	r0, [r7, #0]
 800a8a4:	f000 fc5a 	bl	800b15c <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fc60 	bl	800b172 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE7emplaceILj1EJS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES8_E4typeEDpT0_EERSD_E4typeEDpOSE_>
	  return *this;
 800a8b2:	687b      	ldr	r3, [r7, #4]
	}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd90      	pop	{r4, r7, pc}

0800a8bc <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_>:
	operator=(_Tp&& __rhs)
 800a8bc:	b590      	push	{r4, r7, lr}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7ff ffb9 	bl	800a842 <_ZNKSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE5indexEv>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	bf0c      	ite	eq
 800a8d6:	2301      	moveq	r3, #1
 800a8d8:	2300      	movne	r3, #0
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00a      	beq.n	800a8f6 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800a8e0:	6838      	ldr	r0, [r7, #0]
 800a8e2:	f000 fc9d 	bl	800b220 <_ZSt7forwardIP10AssignmentEOT_RNSt16remove_referenceIS2_E4typeE>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	681c      	ldr	r4, [r3, #0]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fc7c 	bl	800b1e8 <_ZSt3getILj0EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	601c      	str	r4, [r3, #0]
 800a8f4:	e007      	b.n	800a906 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800a8f6:	6838      	ldr	r0, [r7, #0]
 800a8f8:	f000 fc92 	bl	800b220 <_ZSt7forwardIP10AssignmentEOT_RNSt16remove_referenceIS2_E4typeE>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	4619      	mov	r1, r3
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fc98 	bl	800b236 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE7emplaceILj0EJS1_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES8_E4typeEDpT0_EERSD_E4typeEDpOSE_>
	  return *this;
 800a906:	687b      	ldr	r3, [r7, #4]
	}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd90      	pop	{r4, r7, pc}

0800a910 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	7039      	strb	r1, [r7, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4611      	mov	r1, r2
 800a91e:	4618      	mov	r0, r3
 800a920:	f000 fcc0 	bl	800b2a4 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4618      	mov	r0, r3
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800a92e:	b580      	push	{r7, lr}
 800a930:	b082      	sub	sp, #8
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	7039      	strb	r1, [r7, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4611      	mov	r1, r2
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7ff ffe7 	bl	800a910 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4618      	mov	r0, r3
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <_ZNSt8__detail9__variant17_Copy_assign_baseILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	7039      	strb	r1, [r7, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4611      	mov	r1, r2
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff ffe7 	bl	800a92e <_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4618      	mov	r0, r3
 800a964:	3708      	adds	r7, #8
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <_ZNSt8__detail9__variant17_Move_assign_baseILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b082      	sub	sp, #8
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	7039      	strb	r1, [r7, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4611      	mov	r1, r2
 800a978:	4618      	mov	r0, r3
 800a97a:	f7ff ffe7 	bl	800a94c <_ZNSt8__detail9__variant17_Copy_assign_baseILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4618      	mov	r0, r3
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <_ZNSt8__detail9__variant13_Variant_baseIJP10AssignmentP13Function_callP15While_statementP12If_statementEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	7039      	strb	r1, [r7, #0]
	: _Base(__i, std::forward<_Args>(__args)...)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4611      	mov	r1, r2
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff ffe7 	bl	800a96a <_ZNSt8__detail9__variant17_Move_assign_baseILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <_ZNSt8__detail9__variant13_Variant_baseIJP10AssignmentP13Function_callP15While_statementP12If_statementEEC1Ev>:
      _Variant_base()
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
      : _Variant_base(in_place_index<0>) { }
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7ff ffe9 	bl	800a988 <_ZNSt8__detail9__variant13_Variant_baseIJP10AssignmentP13Function_callP15While_statementP12If_statementEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_>:
	operator=(_Tp&& __rhs)
 800a9c0:	b590      	push	{r4, r7, lr}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7ff ff37 	bl	800a842 <_ZNKSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE5indexEv>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	bf0c      	ite	eq
 800a9da:	2301      	moveq	r3, #1
 800a9dc:	2300      	movne	r3, #0
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00a      	beq.n	800a9fa <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800a9e4:	6838      	ldr	r0, [r7, #0]
 800a9e6:	f000 fcd1 	bl	800b38c <_ZSt7forwardIP15While_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	681c      	ldr	r4, [r3, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fcb0 	bl	800b354 <_ZSt3getILj2EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	601c      	str	r4, [r3, #0]
 800a9f8:	e007      	b.n	800aa0a <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800a9fa:	6838      	ldr	r0, [r7, #0]
 800a9fc:	f000 fcc6 	bl	800b38c <_ZSt7forwardIP15While_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800aa00:	4603      	mov	r3, r0
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fccc 	bl	800b3a2 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE7emplaceILj2EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES8_E4typeEDpT0_EERSD_E4typeEDpOSE_>
	  return *this;
 800aa0a:	687b      	ldr	r3, [r7, #4]
	}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3714      	adds	r7, #20
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd90      	pop	{r4, r7, pc}

0800aa14 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_>:
	operator=(_Tp&& __rhs)
 800aa14:	b590      	push	{r4, r7, lr}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7ff ff0d 	bl	800a842 <_ZNKSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE5indexEv>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	bf0c      	ite	eq
 800aa2e:	2301      	moveq	r3, #1
 800aa30:	2300      	movne	r3, #0
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00a      	beq.n	800aa4e <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800aa38:	6838      	ldr	r0, [r7, #0]
 800aa3a:	f000 fd3f 	bl	800b4bc <_ZSt7forwardIP12If_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	681c      	ldr	r4, [r3, #0]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fd1e 	bl	800b484 <_ZSt3getILj3EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	601c      	str	r4, [r3, #0]
 800aa4c:	e007      	b.n	800aa5e <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES8_E4typeEE18is_constructible_vISF_SC_E15is_assignable_vIRSF_SC_EERS8_E4typeESD_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800aa4e:	6838      	ldr	r0, [r7, #0]
 800aa50:	f000 fd34 	bl	800b4bc <_ZSt7forwardIP12If_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800aa54:	4603      	mov	r3, r0
 800aa56:	4619      	mov	r1, r3
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 fd3a 	bl	800b4d2 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE7emplaceILj3EJS7_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES8_E4typeEDpT0_EERSD_E4typeEDpOSE_>
	  return *this;
 800aa5e:	687b      	ldr	r3, [r7, #4]
	}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd90      	pop	{r4, r7, pc}

0800aa68 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fd47 	bl	800b504 <_ZNSaIP9StatementEC1Ev>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 fd4f 	bl	800b51c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4618      	mov	r0, r3
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <_ZNSt6vectorIP9StatementSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800aa92:	6838      	ldr	r0, [r7, #0]
 800aa94:	f000 fd74 	bl	800b580 <_ZSt4moveIRP9StatementEONSt16remove_referenceIT_E4typeEOS4_>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fd7a 	bl	800b596 <_ZNSt6vectorIP9StatementSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800aaa2:	bf00      	nop
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERKNSt8__detail9__variant17_Copy_assign_baseILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 800aaaa:	b480      	push	{r7}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
	    return static_cast<const variant<_Types...>&>(__rhs);
 800aab2:	687b      	ldr	r3, [r7, #4]
    }
 800aab4:	4618      	mov	r0, r3
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESM_EEDcOSG_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7fd ff89 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800aace:	4603      	mov	r3, r0
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fc ff6f 	bl	80079b4 <_ZNSt8__detail9__variant5__getILj0ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800aad6:	4603      	mov	r3, r0
	}
 800aad8:	4618      	mov	r0, r3
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESI_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800aae0:	b5b0      	push	{r4, r5, r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fd85 	bl	800b5fa <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	6838      	ldr	r0, [r7, #0]
 800aaf4:	f7fd ff74 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7ff ffe0 	bl	800aac0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESM_EEDcOSG_>
 800ab00:	4601      	mov	r1, r0
 800ab02:	f107 030c 	add.w	r3, r7, #12
 800ab06:	461a      	mov	r2, r3
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f000 fd81 	bl	800b610 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKS8_St17integral_constantIjLj0EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>
	      integral_constant<size_t, __indices>()...);
 800ab0e:	462b      	mov	r3, r5
      }
 800ab10:	4618      	mov	r0, r3
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bdb0      	pop	{r4, r5, r7, pc}

0800ab18 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESI_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800ab18:	b5b0      	push	{r4, r5, r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 fd69 	bl	800b5fa <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800ab28:	4604      	mov	r4, r0
 800ab2a:	6838      	ldr	r0, [r7, #0]
 800ab2c:	f7fd ff58 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800ab30:	4603      	mov	r3, r0
 800ab32:	4619      	mov	r1, r3
 800ab34:	4620      	mov	r0, r4
 800ab36:	f7ff ffd3 	bl	800aae0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800ab3a:	462b      	mov	r3, r5
      }
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bdb0      	pop	{r4, r5, r7, pc}

0800ab44 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESI_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800ab44:	b5b0      	push	{r4, r5, r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fd53 	bl	800b5fa <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800ab54:	4604      	mov	r4, r0
 800ab56:	6838      	ldr	r0, [r7, #0]
 800ab58:	f7fd ff42 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	4619      	mov	r1, r3
 800ab60:	4620      	mov	r0, r4
 800ab62:	f7ff ffd9 	bl	800ab18 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800ab66:	462b      	mov	r3, r5
      }
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bdb0      	pop	{r4, r5, r7, pc}

0800ab70 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESM_EEDcOSG_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7fd ff31 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7fc ffa1 	bl	8007ac8 <_ZNSt8__detail9__variant5__getILj1ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800ab86:	4603      	mov	r3, r0
	}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESI_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800ab90:	b5b0      	push	{r4, r5, r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fd2d 	bl	800b5fa <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800aba0:	4604      	mov	r4, r0
 800aba2:	6838      	ldr	r0, [r7, #0]
 800aba4:	f7fd ff1c 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800aba8:	4603      	mov	r3, r0
 800abaa:	4618      	mov	r0, r3
 800abac:	f7ff ffe0 	bl	800ab70 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESM_EEDcOSG_>
 800abb0:	4601      	mov	r1, r0
 800abb2:	f107 030c 	add.w	r3, r7, #12
 800abb6:	461a      	mov	r2, r3
 800abb8:	4620      	mov	r0, r4
 800abba:	f000 fd47 	bl	800b64c <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKiSt17integral_constantIjLj1EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>
	      integral_constant<size_t, __indices>()...);
 800abbe:	462b      	mov	r3, r5
      }
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bdb0      	pop	{r4, r5, r7, pc}

0800abc8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESI_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800abc8:	b5b0      	push	{r4, r5, r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fd11 	bl	800b5fa <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800abd8:	4604      	mov	r4, r0
 800abda:	6838      	ldr	r0, [r7, #0]
 800abdc:	f7fd ff00 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800abe0:	4603      	mov	r3, r0
 800abe2:	4619      	mov	r1, r3
 800abe4:	4620      	mov	r0, r4
 800abe6:	f7ff ffd3 	bl	800ab90 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800abea:	462b      	mov	r3, r5
      }
 800abec:	4618      	mov	r0, r3
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bdb0      	pop	{r4, r5, r7, pc}

0800abf4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESI_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800abf4:	b5b0      	push	{r4, r5, r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fcfb 	bl	800b5fa <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800ac04:	4604      	mov	r4, r0
 800ac06:	6838      	ldr	r0, [r7, #0]
 800ac08:	f7fd feea 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4620      	mov	r0, r4
 800ac12:	f7ff ffd9 	bl	800abc8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800ac16:	462b      	mov	r3, r5
      }
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bdb0      	pop	{r4, r5, r7, pc}

0800ac20 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESM_EEDcOSG_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7fd fed9 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7fc ffe5 	bl	8007c00 <_ZNSt8__detail9__variant5__getILj2ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800ac36:	4603      	mov	r3, r0
	}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESI_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800ac40:	b5b0      	push	{r4, r5, r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fcd5 	bl	800b5fa <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800ac50:	4604      	mov	r4, r0
 800ac52:	6838      	ldr	r0, [r7, #0]
 800ac54:	f7fd fec4 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7ff ffe0 	bl	800ac20 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESM_EEDcOSG_>
 800ac60:	4601      	mov	r1, r0
 800ac62:	f107 030c 	add.w	r3, r7, #12
 800ac66:	461a      	mov	r2, r3
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 fd0d 	bl	800b688 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKfSt17integral_constantIjLj2EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>
	      integral_constant<size_t, __indices>()...);
 800ac6e:	462b      	mov	r3, r5
      }
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bdb0      	pop	{r4, r5, r7, pc}

0800ac78 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESI_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800ac78:	b5b0      	push	{r4, r5, r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fcb9 	bl	800b5fa <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800ac88:	4604      	mov	r4, r0
 800ac8a:	6838      	ldr	r0, [r7, #0]
 800ac8c:	f7fd fea8 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800ac90:	4603      	mov	r3, r0
 800ac92:	4619      	mov	r1, r3
 800ac94:	4620      	mov	r0, r4
 800ac96:	f7ff ffd3 	bl	800ac40 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800ac9a:	462b      	mov	r3, r5
      }
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bdb0      	pop	{r4, r5, r7, pc}

0800aca4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESI_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800aca4:	b5b0      	push	{r4, r5, r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fca3 	bl	800b5fa <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800acb4:	4604      	mov	r4, r0
 800acb6:	6838      	ldr	r0, [r7, #0]
 800acb8:	f7fd fe92 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800acbc:	4603      	mov	r3, r0
 800acbe:	4619      	mov	r1, r3
 800acc0:	4620      	mov	r0, r4
 800acc2:	f7ff ffd9 	bl	800ac78 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800acc6:	462b      	mov	r3, r5
      }
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bdb0      	pop	{r4, r5, r7, pc}

0800acd0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESM_EEDcOSG_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f7fd fe81 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800acde:	4603      	mov	r3, r0
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fd f83b 	bl	8007d5c <_ZNSt8__detail9__variant5__getILj3ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800ace6:	4603      	mov	r3, r0
	}
 800ace8:	4618      	mov	r0, r3
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESI_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800acf0:	b5b0      	push	{r4, r5, r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fc7d 	bl	800b5fa <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800ad00:	4604      	mov	r4, r0
 800ad02:	6838      	ldr	r0, [r7, #0]
 800ad04:	f7fd fe6c 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7ff ffe0 	bl	800acd0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESM_EEDcOSG_>
 800ad10:	4601      	mov	r1, r0
 800ad12:	f107 030c 	add.w	r3, r7, #12
 800ad16:	461a      	mov	r2, r3
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f000 fcd3 	bl	800b6c4 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKbSt17integral_constantIjLj3EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>
	      integral_constant<size_t, __indices>()...);
 800ad1e:	462b      	mov	r3, r5
      }
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bdb0      	pop	{r4, r5, r7, pc}

0800ad28 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESI_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800ad28:	b5b0      	push	{r4, r5, r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fc61 	bl	800b5fa <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800ad38:	4604      	mov	r4, r0
 800ad3a:	6838      	ldr	r0, [r7, #0]
 800ad3c:	f7fd fe50 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800ad40:	4603      	mov	r3, r0
 800ad42:	4619      	mov	r1, r3
 800ad44:	4620      	mov	r0, r4
 800ad46:	f7ff ffd3 	bl	800acf0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800ad4a:	462b      	mov	r3, r5
      }
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bdb0      	pop	{r4, r5, r7, pc}

0800ad54 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESI_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800ad54:	b5b0      	push	{r4, r5, r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fc4b 	bl	800b5fa <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800ad64:	4604      	mov	r4, r0
 800ad66:	6838      	ldr	r0, [r7, #0]
 800ad68:	f7fd fe3a 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	4619      	mov	r1, r3
 800ad70:	4620      	mov	r0, r4
 800ad72:	f7ff ffd9 	bl	800ad28 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800ad76:	462b      	mov	r3, r5
      }
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bdb0      	pop	{r4, r5, r7, pc}

0800ad80 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_RKSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSN_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	4413      	add	r3, r2
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 fcb4 	bl	800b700 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_RKSt7variantIJS9_ifbEEEJEE9_M_accessEv>
 800ad98:	4603      	mov	r3, r0
	}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
	...

0800ada4 <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>:
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 800ada4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 800adae:	4b0f      	ldr	r3, [pc, #60]	; (800adec <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKSt7variantIJS8_ifbEEEEDcOT1_DpOT2_+0x48>)
 800adb0:	60fb      	str	r3, [r7, #12]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 800adb2:	6838      	ldr	r0, [r7, #0]
 800adb4:	f7fd f84a 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800adb8:	4603      	mov	r3, r0
 800adba:	4619      	mov	r1, r3
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f7ff ffdf 	bl	800ad80 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_RKSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSN_jDpT_>
 800adc2:	4603      	mov	r3, r0
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 800adc8:	68bc      	ldr	r4, [r7, #8]
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fca3 	bl	800b716 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800add0:	4605      	mov	r5, r0
 800add2:	6838      	ldr	r0, [r7, #0]
 800add4:	f7fd fe04 	bl	80089e0 <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800add8:	4603      	mov	r3, r0
 800adda:	4619      	mov	r1, r3
 800addc:	4628      	mov	r0, r5
 800adde:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 800ade0:	4633      	mov	r3, r6
    }
 800ade2:	4618      	mov	r0, r3
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adea:	bf00      	nop
 800adec:	0801a454 	.word	0x0801a454

0800adf0 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>:
      operator=(const _Copy_assign_base& __rhs)
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	60fb      	str	r3, [r7, #12]
 800adfe:	6838      	ldr	r0, [r7, #0]
 800ae00:	f7ff fe53 	bl	800aaaa <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERKNSt8__detail9__variant17_Copy_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800ae04:	4602      	mov	r2, r0
 800ae06:	f107 030c 	add.w	r3, r7, #12
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7ff ffc9 	bl	800ada4 <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>
	return *this;
 800ae12:	687b      	ldr	r3, [r7, #4]
      }
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <_ZSt4moveIRP10ExpressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4618      	mov	r0, r3
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <_ZNSt6vectorIP10ExpressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800ae32:	b5b0      	push	{r4, r5, r7, lr}
 800ae34:	b082      	sub	sp, #8
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d011      	beq.n	800ae6c <_ZNSt6vectorIP10ExpressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800ae48:	687c      	ldr	r4, [r7, #4]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	685d      	ldr	r5, [r3, #4]
 800ae4e:	6838      	ldr	r0, [r7, #0]
 800ae50:	f000 fc6c 	bl	800b72c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800ae54:	4603      	mov	r3, r0
 800ae56:	461a      	mov	r2, r3
 800ae58:	4629      	mov	r1, r5
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f000 fc71 	bl	800b742 <_ZNSt16allocator_traitsISaIP10ExpressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	1d1a      	adds	r2, r3, #4
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	605a      	str	r2, [r3, #4]
 800ae6a:	e00c      	b.n	800ae86 <_ZNSt6vectorIP10ExpressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fc7b 	bl	800b768 <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800ae72:	4604      	mov	r4, r0
 800ae74:	6838      	ldr	r0, [r7, #0]
 800ae76:	f000 fc59 	bl	800b72c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	4621      	mov	r1, r4
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fc83 	bl	800b78c <_ZNSt6vectorIP10ExpressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fcfc 	bl	800b884 <_ZNSt6vectorIP10ExpressionSaIS1_EE4backEv>
 800ae8c:	4603      	mov	r3, r0
#endif
      }
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bdb0      	pop	{r4, r5, r7, pc}

0800ae96 <_ZSt4moveIRP4BodyEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ae96:	b480      	push	{r7}
 800ae98:	b083      	sub	sp, #12
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4618      	mov	r0, r3
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <_ZNSt6vectorIP4BodySaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800aeac:	b5b0      	push	{r4, r5, r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	685a      	ldr	r2, [r3, #4]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d011      	beq.n	800aee6 <_ZNSt6vectorIP4BodySaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800aec2:	687c      	ldr	r4, [r7, #4]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685d      	ldr	r5, [r3, #4]
 800aec8:	6838      	ldr	r0, [r7, #0]
 800aeca:	f000 fcf6 	bl	800b8ba <_ZSt7forwardIP4BodyEOT_RNSt16remove_referenceIS2_E4typeE>
 800aece:	4603      	mov	r3, r0
 800aed0:	461a      	mov	r2, r3
 800aed2:	4629      	mov	r1, r5
 800aed4:	4620      	mov	r0, r4
 800aed6:	f000 fcfb 	bl	800b8d0 <_ZNSt16allocator_traitsISaIP4BodyEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	1d1a      	adds	r2, r3, #4
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	605a      	str	r2, [r3, #4]
 800aee4:	e00c      	b.n	800af00 <_ZNSt6vectorIP4BodySaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fd05 	bl	800b8f6 <_ZNSt6vectorIP4BodySaIS1_EE3endEv>
 800aeec:	4604      	mov	r4, r0
 800aeee:	6838      	ldr	r0, [r7, #0]
 800aef0:	f000 fce3 	bl	800b8ba <_ZSt7forwardIP4BodyEOT_RNSt16remove_referenceIS2_E4typeE>
 800aef4:	4603      	mov	r3, r0
 800aef6:	461a      	mov	r2, r3
 800aef8:	4621      	mov	r1, r4
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fd0c 	bl	800b918 <_ZNSt6vectorIP4BodySaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fd85 	bl	800ba10 <_ZNSt6vectorIP4BodySaIS1_EE4backEv>
 800af06:	4603      	mov	r3, r0
      }
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bdb0      	pop	{r4, r5, r7, pc}

0800af10 <_ZNSaIP10ExpressionEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fd94 	bl	800ba46 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionEC1Ev>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4618      	mov	r0, r3
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	605a      	str	r2, [r3, #4]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	609a      	str	r2, [r3, #8]
	{ }
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4618      	mov	r0, r3
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
	if (__p)
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d005      	beq.n	800af6e <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	68b9      	ldr	r1, [r7, #8]
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fd77 	bl	800ba5c <_ZNSt16allocator_traitsISaIP10ExpressionEE10deallocateERS2_PS1_j>
      }
 800af6e:	bf00      	nop
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800af76:	b480      	push	{r7}
 800af78:	b083      	sub	sp, #12
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4618      	mov	r0, r3
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <_ZNSaIP4BodyEC1Ev>:
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fd70 	bl	800ba7a <_ZN9__gnu_cxx13new_allocatorIP4BodyEC1Ev>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4618      	mov	r0, r3
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <_ZNSt12_Vector_baseIP4BodySaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	605a      	str	r2, [r3, #4]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	609a      	str	r2, [r3, #8]
	{ }
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4618      	mov	r0, r3
 800afc2:	370c      	adds	r7, #12
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <_ZNSt12_Vector_baseIP4BodySaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
	if (__p)
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d005      	beq.n	800afea <_ZNSt12_Vector_baseIP4BodySaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	68b9      	ldr	r1, [r7, #8]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f000 fd53 	bl	800ba90 <_ZNSt16allocator_traitsISaIP4BodyEE10deallocateERS2_PS1_j>
      }
 800afea:	bf00      	nop
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800aff2:	b480      	push	{r7}
 800aff4:	b083      	sub	sp, #12
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4618      	mov	r0, r3
 800affe:	370c      	adds	r7, #12
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4618      	mov	r0, r3
 800b014:	370c      	adds	r7, #12
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800b01e:	b580      	push	{r7, lr}
 800b020:	b082      	sub	sp, #8
 800b022:	af00      	add	r7, sp, #0
 800b024:	7138      	strb	r0, [r7, #4]
 800b026:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800b028:	6838      	ldr	r0, [r7, #0]
 800b02a:	f000 fd4b 	bl	800bac4 <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b02e:	4603      	mov	r3, r0
 800b030:	4618      	mov	r0, r3
 800b032:	f000 fd52 	bl	800bada <_ZNOSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>
 800b036:	4603      	mov	r3, r0
 800b038:	4618      	mov	r0, r3
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <_ZNSt8__detail9__variant5__getILj0ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800b040:	b590      	push	{r4, r7, lr}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fd30 	bl	800baae <_ZSt7forwardISt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800b04e:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800b050:	4619      	mov	r1, r3
 800b052:	4620      	mov	r0, r4
 800b054:	f7ff ffe3 	bl	800b01e <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 800b058:	4603      	mov	r3, r0
    }
 800b05a:	4618      	mov	r0, r3
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd90      	pop	{r4, r7, pc}
	...

0800b064 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>:
    get(variant<_Types...>&& __v)
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7fc feed 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	bf14      	ite	ne
 800b078:	2301      	movne	r3, #1
 800b07a:	2300      	moveq	r3, #0
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d002      	beq.n	800b088 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800b082:	4807      	ldr	r0, [pc, #28]	; (800b0a0 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x3c>)
 800b084:	f7f5 ffb6 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(std::move(__v));
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff ffbd 	bl	800b008 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 800b08e:	4603      	mov	r3, r0
 800b090:	4618      	mov	r0, r3
 800b092:	f7ff ffd5 	bl	800b040 <_ZNSt8__detail9__variant5__getILj0ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800b096:	4603      	mov	r3, r0
    }
 800b098:	4618      	mov	r0, r3
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	0801a0a0 	.word	0x0801a0a0

0800b0a4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	370c      	adds	r7, #12
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP13Function_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b082      	sub	sp, #8
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	7138      	strb	r0, [r7, #4]
 800b0c2:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800b0c4:	6838      	ldr	r0, [r7, #0]
 800b0c6:	f000 fd2f 	bl	800bb28 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7f8 facb 	bl	8003668 <_ZNRSt8__detail9__variant14_UninitializedIP13Function_callLb1EE6_M_getEv>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3708      	adds	r7, #8
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b0dc:	b590      	push	{r4, r7, lr}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	7138      	strb	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b0e6:	6838      	ldr	r0, [r7, #0]
 800b0e8:	f000 fd13 	bl	800bb12 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISD_E4typeE>
 800b0ec:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f7ff ffe2 	bl	800b0ba <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP13Function_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>
 800b0f6:	4603      	mov	r3, r0
    }
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	370c      	adds	r7, #12
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd90      	pop	{r4, r7, pc}

0800b100 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800b100:	b590      	push	{r4, r7, lr}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 fcf7 	bl	800bafc <_ZSt7forwardIRSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEOT_RNSt16remove_referenceISB_E4typeE>
 800b10e:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800b110:	4619      	mov	r1, r3
 800b112:	4620      	mov	r0, r4
 800b114:	f7ff ffe2 	bl	800b0dc <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b118:	4603      	mov	r3, r0
    }
 800b11a:	4618      	mov	r0, r3
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd90      	pop	{r4, r7, pc}
	...

0800b124 <_ZSt3getILj1EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>:
    get(variant<_Types...>& __v)
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7ff fb88 	bl	800a842 <_ZNKSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE5indexEv>
 800b132:	4603      	mov	r3, r0
 800b134:	2b01      	cmp	r3, #1
 800b136:	bf14      	ite	ne
 800b138:	2301      	movne	r3, #1
 800b13a:	2300      	moveq	r3, #0
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d002      	beq.n	800b148 <_ZSt3getILj1EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800b142:	4805      	ldr	r0, [pc, #20]	; (800b158 <_ZSt3getILj1EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_+0x34>)
 800b144:	f7f5 ff56 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff ffd9 	bl	800b100 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEDcOT0_>
 800b14e:	4603      	mov	r3, r0
    }
 800b150:	4618      	mov	r0, r3
 800b152:	3708      	adds	r7, #8
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	0801a0a0 	.word	0x0801a0a0

0800b15c <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4618      	mov	r0, r3
 800b168:	370c      	adds	r7, #12
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE7emplaceILj1EJS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES8_E4typeEDpT0_EERSD_E4typeEDpOSE_>:
	emplace(_Args&&... __args)
 800b172:	b580      	push	{r7, lr}
 800b174:	b082      	sub	sp, #8
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 fcdd 	bl	800bb3e <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800b184:	6838      	ldr	r0, [r7, #0]
 800b186:	f7ff ffe9 	bl	800b15c <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800b18a:	4603      	mov	r3, r0
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 fce2 	bl	800bb58 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEJS4_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff ffc5 	bl	800b124 <_ZSt3getILj1EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>
 800b19a:	4603      	mov	r3, r0
	}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	7138      	strb	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800b1ae:	6838      	ldr	r0, [r7, #0]
 800b1b0:	f000 fcaf 	bl	800bb12 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISD_E4typeE>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f000 fced 	bl	800bb96 <_ZNRSt8__detail9__variant14_UninitializedIP10AssignmentLb1EE6_M_getEv>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800b1c6:	b590      	push	{r4, r7, lr}
 800b1c8:	b083      	sub	sp, #12
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fc94 	bl	800bafc <_ZSt7forwardIRSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEOT_RNSt16remove_referenceISB_E4typeE>
 800b1d4:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f7ff ffe3 	bl	800b1a4 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>
 800b1de:	4603      	mov	r3, r0
    }
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd90      	pop	{r4, r7, pc}

0800b1e8 <_ZSt3getILj0EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>:
    get(variant<_Types...>& __v)
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f7ff fb26 	bl	800a842 <_ZNKSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE5indexEv>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	bf14      	ite	ne
 800b1fc:	2301      	movne	r3, #1
 800b1fe:	2300      	moveq	r3, #0
 800b200:	b2db      	uxtb	r3, r3
 800b202:	2b00      	cmp	r3, #0
 800b204:	d002      	beq.n	800b20c <_ZSt3getILj0EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800b206:	4805      	ldr	r0, [pc, #20]	; (800b21c <_ZSt3getILj0EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_+0x34>)
 800b208:	f7f5 fef4 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f7ff ffda 	bl	800b1c6 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEDcOT0_>
 800b212:	4603      	mov	r3, r0
    }
 800b214:	4618      	mov	r0, r3
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	0801a0a0 	.word	0x0801a0a0

0800b220 <_ZSt7forwardIP10AssignmentEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4618      	mov	r0, r3
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE7emplaceILj0EJS1_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES8_E4typeEDpT0_EERSD_E4typeEDpOSE_>:
	emplace(_Args&&... __args)
 800b236:	b580      	push	{r7, lr}
 800b238:	b082      	sub	sp, #8
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4618      	mov	r0, r3
 800b244:	f000 fc7b 	bl	800bb3e <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800b248:	6838      	ldr	r0, [r7, #0]
 800b24a:	f7ff ffe9 	bl	800b220 <_ZSt7forwardIP10AssignmentEOT_RNSt16remove_referenceIS2_E4typeE>
 800b24e:	4603      	mov	r3, r0
 800b250:	4619      	mov	r1, r3
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fcaa 	bl	800bbac <_ZSt28__variant_construct_by_indexILj0ESt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEJS2_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7ff ffc5 	bl	800b1e8 <_ZSt3getILj0EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>
 800b25e:	4603      	mov	r3, r0
	}
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <_ZNSt8__detail9__variant14_UninitializedIP10AssignmentLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	7039      	strb	r1, [r7, #0]
	: _M_storage(std::forward<_Args>(__args)...)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	601a      	str	r2, [r3, #0]
	{ }
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4618      	mov	r0, r3
 800b27c:	370c      	adds	r7, #12
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <_ZNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 800b286:	b580      	push	{r7, lr}
 800b288:	b082      	sub	sp, #8
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	7039      	strb	r1, [r7, #0]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4611      	mov	r1, r2
 800b294:	4618      	mov	r0, r3
 800b296:	f7ff ffe7 	bl	800b268 <_ZNSt8__detail9__variant14_UninitializedIP10AssignmentLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4618      	mov	r0, r3
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	7039      	strb	r1, [r7, #0]
	_M_index(_Np)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7ff ffe7 	bl	800b286 <_ZNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEC1IJEEESt16in_place_index_tILj0EEDpOT_>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	711a      	strb	r2, [r3, #4]
	{ }
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	7138      	strb	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800b2d2:	6838      	ldr	r0, [r7, #0]
 800b2d4:	f000 fc89 	bl	800bbea <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f000 fc90 	bl	800bc00 <_ZNRSt8__detail9__variant14_UninitializedIP15While_statementLb1EE6_M_getEv>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP13Function_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b2ea:	b590      	push	{r4, r7, lr}
 800b2ec:	b083      	sub	sp, #12
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	7138      	strb	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b2f4:	6838      	ldr	r0, [r7, #0]
 800b2f6:	f000 fc17 	bl	800bb28 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800b2fa:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	4620      	mov	r0, r4
 800b300:	f7ff ffe2 	bl	800b2c8 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>
 800b304:	4603      	mov	r3, r0
    }
 800b306:	4618      	mov	r0, r3
 800b308:	370c      	adds	r7, #12
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd90      	pop	{r4, r7, pc}

0800b30e <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b30e:	b590      	push	{r4, r7, lr}
 800b310:	b083      	sub	sp, #12
 800b312:	af00      	add	r7, sp, #0
 800b314:	7138      	strb	r0, [r7, #4]
 800b316:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b318:	6838      	ldr	r0, [r7, #0]
 800b31a:	f000 fbfa 	bl	800bb12 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISD_E4typeE>
 800b31e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b320:	4619      	mov	r1, r3
 800b322:	4620      	mov	r0, r4
 800b324:	f7ff ffe1 	bl	800b2ea <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP13Function_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b328:	4603      	mov	r3, r0
    }
 800b32a:	4618      	mov	r0, r3
 800b32c:	370c      	adds	r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd90      	pop	{r4, r7, pc}

0800b332 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800b332:	b590      	push	{r4, r7, lr}
 800b334:	b083      	sub	sp, #12
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fbde 	bl	800bafc <_ZSt7forwardIRSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEOT_RNSt16remove_referenceISB_E4typeE>
 800b340:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800b342:	4619      	mov	r1, r3
 800b344:	4620      	mov	r0, r4
 800b346:	f7ff ffe2 	bl	800b30e <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b34a:	4603      	mov	r3, r0
    }
 800b34c:	4618      	mov	r0, r3
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	bd90      	pop	{r4, r7, pc}

0800b354 <_ZSt3getILj2EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>:
    get(variant<_Types...>& __v)
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff fa70 	bl	800a842 <_ZNKSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE5indexEv>
 800b362:	4603      	mov	r3, r0
 800b364:	2b02      	cmp	r3, #2
 800b366:	bf14      	ite	ne
 800b368:	2301      	movne	r3, #1
 800b36a:	2300      	moveq	r3, #0
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d002      	beq.n	800b378 <_ZSt3getILj2EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800b372:	4805      	ldr	r0, [pc, #20]	; (800b388 <_ZSt3getILj2EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_+0x34>)
 800b374:	f7f5 fe3e 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f7ff ffda 	bl	800b332 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEDcOT0_>
 800b37e:	4603      	mov	r3, r0
    }
 800b380:	4618      	mov	r0, r3
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	0801a0a0 	.word	0x0801a0a0

0800b38c <_ZSt7forwardIP15While_statementEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4618      	mov	r0, r3
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE7emplaceILj2EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES8_E4typeEDpT0_EERSD_E4typeEDpOSE_>:
	emplace(_Args&&... __args)
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b082      	sub	sp, #8
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f000 fbc5 	bl	800bb3e <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800b3b4:	6838      	ldr	r0, [r7, #0]
 800b3b6:	f7ff ffe9 	bl	800b38c <_ZSt7forwardIP15While_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fc29 	bl	800bc16 <_ZSt28__variant_construct_by_indexILj2ESt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEJS6_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f7ff ffc5 	bl	800b354 <_ZSt3getILj2EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>
 800b3ca:	4603      	mov	r3, r0
	}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	7138      	strb	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800b3de:	6838      	ldr	r0, [r7, #0]
 800b3e0:	f000 fc38 	bl	800bc54 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP12If_statementEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f000 fc3f 	bl	800bc6a <_ZNRSt8__detail9__variant14_UninitializedIP12If_statementLb1EE6_M_getEv>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b3f6:	b590      	push	{r4, r7, lr}
 800b3f8:	b083      	sub	sp, #12
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	7138      	strb	r0, [r7, #4]
 800b3fe:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b400:	6838      	ldr	r0, [r7, #0]
 800b402:	f000 fbf2 	bl	800bbea <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800b406:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b408:	4619      	mov	r1, r3
 800b40a:	4620      	mov	r0, r4
 800b40c:	f7ff ffe2 	bl	800b3d4 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>
 800b410:	4603      	mov	r3, r0
    }
 800b412:	4618      	mov	r0, r3
 800b414:	370c      	adds	r7, #12
 800b416:	46bd      	mov	sp, r7
 800b418:	bd90      	pop	{r4, r7, pc}

0800b41a <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJP13Function_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b41a:	b590      	push	{r4, r7, lr}
 800b41c:	b083      	sub	sp, #12
 800b41e:	af00      	add	r7, sp, #0
 800b420:	7138      	strb	r0, [r7, #4]
 800b422:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b424:	6838      	ldr	r0, [r7, #0]
 800b426:	f000 fb7f 	bl	800bb28 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800b42a:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b42c:	4619      	mov	r1, r3
 800b42e:	4620      	mov	r0, r4
 800b430:	f7ff ffe1 	bl	800b3f6 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b434:	4603      	mov	r3, r0
    }
 800b436:	4618      	mov	r0, r3
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd90      	pop	{r4, r7, pc}

0800b43e <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b43e:	b590      	push	{r4, r7, lr}
 800b440:	b083      	sub	sp, #12
 800b442:	af00      	add	r7, sp, #0
 800b444:	7138      	strb	r0, [r7, #4]
 800b446:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b448:	6838      	ldr	r0, [r7, #0]
 800b44a:	f000 fb62 	bl	800bb12 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISD_E4typeE>
 800b44e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b450:	4619      	mov	r1, r3
 800b452:	4620      	mov	r0, r4
 800b454:	f7ff ffe1 	bl	800b41a <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJP13Function_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b458:	4603      	mov	r3, r0
    }
 800b45a:	4618      	mov	r0, r3
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd90      	pop	{r4, r7, pc}

0800b462 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800b462:	b590      	push	{r4, r7, lr}
 800b464:	b083      	sub	sp, #12
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fb46 	bl	800bafc <_ZSt7forwardIRSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEOT_RNSt16remove_referenceISB_E4typeE>
 800b470:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800b472:	4619      	mov	r1, r3
 800b474:	4620      	mov	r0, r4
 800b476:	f7ff ffe2 	bl	800b43e <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b47a:	4603      	mov	r3, r0
    }
 800b47c:	4618      	mov	r0, r3
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	bd90      	pop	{r4, r7, pc}

0800b484 <_ZSt3getILj3EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>:
    get(variant<_Types...>& __v)
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7ff f9d8 	bl	800a842 <_ZNKSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE5indexEv>
 800b492:	4603      	mov	r3, r0
 800b494:	2b03      	cmp	r3, #3
 800b496:	bf14      	ite	ne
 800b498:	2301      	movne	r3, #1
 800b49a:	2300      	moveq	r3, #0
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d002      	beq.n	800b4a8 <_ZSt3getILj3EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800b4a2:	4805      	ldr	r0, [pc, #20]	; (800b4b8 <_ZSt3getILj3EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_+0x34>)
 800b4a4:	f7f5 fda6 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f7ff ffda 	bl	800b462 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEDcOT0_>
 800b4ae:	4603      	mov	r3, r0
    }
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	0801a0a0 	.word	0x0801a0a0

0800b4bc <_ZSt7forwardIP12If_statementEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	370c      	adds	r7, #12
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr

0800b4d2 <_ZNSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEE7emplaceILj3EJS7_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES8_E4typeEDpT0_EERSD_E4typeEDpOSE_>:
	emplace(_Args&&... __args)
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b082      	sub	sp, #8
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
 800b4da:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 fb2d 	bl	800bb3e <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800b4e4:	6838      	ldr	r0, [r7, #0]
 800b4e6:	f7ff ffe9 	bl	800b4bc <_ZSt7forwardIP12If_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fbc6 	bl	800bc80 <_ZSt28__variant_construct_by_indexILj3ESt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEJS8_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7ff ffc5 	bl	800b484 <_ZSt3getILj3EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>
 800b4fa:	4603      	mov	r3, r0
	}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3708      	adds	r7, #8
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <_ZNSaIP9StatementEC1Ev>:
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fbd6 	bl	800bcbe <_ZN9__gnu_cxx13new_allocatorIP9StatementEC1Ev>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4618      	mov	r0, r3
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	605a      	str	r2, [r3, #4]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	609a      	str	r2, [r3, #8]
	{ }
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4618      	mov	r0, r3
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
	if (__p)
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d005      	beq.n	800b562 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	68b9      	ldr	r1, [r7, #8]
 800b55c:	4618      	mov	r0, r3
 800b55e:	f000 fbb9 	bl	800bcd4 <_ZNSt16allocator_traitsISaIP9StatementEE10deallocateERS2_PS1_j>
      }
 800b562:	bf00      	nop
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b56a:	b480      	push	{r7}
 800b56c:	b083      	sub	sp, #12
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	4618      	mov	r0, r3
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <_ZSt4moveIRP9StatementEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4618      	mov	r0, r3
 800b58c:	370c      	adds	r7, #12
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <_ZNSt6vectorIP9StatementSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800b596:	b5b0      	push	{r4, r5, r7, lr}
 800b598:	b082      	sub	sp, #8
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
 800b59e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685a      	ldr	r2, [r3, #4]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d011      	beq.n	800b5d0 <_ZNSt6vectorIP9StatementSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800b5ac:	687c      	ldr	r4, [r7, #4]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	685d      	ldr	r5, [r3, #4]
 800b5b2:	6838      	ldr	r0, [r7, #0]
 800b5b4:	f000 fb9d 	bl	800bcf2 <_ZSt7forwardIP9StatementEOT_RNSt16remove_referenceIS2_E4typeE>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	4629      	mov	r1, r5
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f000 fba2 	bl	800bd08 <_ZNSt16allocator_traitsISaIP9StatementEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	1d1a      	adds	r2, r3, #4
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	605a      	str	r2, [r3, #4]
 800b5ce:	e00c      	b.n	800b5ea <_ZNSt6vectorIP9StatementSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fbac 	bl	800bd2e <_ZNSt6vectorIP9StatementSaIS1_EE3endEv>
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	6838      	ldr	r0, [r7, #0]
 800b5da:	f000 fb8a 	bl	800bcf2 <_ZSt7forwardIP9StatementEOT_RNSt16remove_referenceIS2_E4typeE>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 fbb3 	bl	800bd50 <_ZNSt6vectorIP9StatementSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fc2c 	bl	800be48 <_ZNSt6vectorIP9StatementSaIS1_EE4backEv>
 800b5f0:	4603      	mov	r3, r0
      }
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bdb0      	pop	{r4, r5, r7, pc}

0800b5fa <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b5fa:	b480      	push	{r7}
 800b5fc:	b083      	sub	sp, #12
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4618      	mov	r0, r3
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKS8_St17integral_constantIjLj0EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800b610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	60f8      	str	r0, [r7, #12]
 800b61a:	60b9      	str	r1, [r7, #8]
 800b61c:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f000 f879 	bl	800b716 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b624:	4604      	mov	r4, r0
 800b626:	68b8      	ldr	r0, [r7, #8]
 800b628:	f7fd fc53 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800b62c:	4605      	mov	r5, r0
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fc25 	bl	800be7e <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b634:	4603      	mov	r3, r0
 800b636:	462a      	mov	r2, r5
 800b638:	4621      	mov	r1, r4
 800b63a:	4630      	mov	r0, r6
 800b63c:	f000 fc2a 	bl	800be94 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKS9_St17integral_constantIjLj0EEEESD_St14__invoke_otherOSF_DpOT1_>
					std::forward<_Args>(__args)...);
 800b640:	4643      	mov	r3, r8
    }
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b64c <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKiSt17integral_constantIjLj1EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800b64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b650:	b084      	sub	sp, #16
 800b652:	af00      	add	r7, sp, #0
 800b654:	60f8      	str	r0, [r7, #12]
 800b656:	60b9      	str	r1, [r7, #8]
 800b658:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f000 f85b 	bl	800b716 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b660:	4604      	mov	r4, r0
 800b662:	68b8      	ldr	r0, [r7, #8]
 800b664:	f7fd fc57 	bl	8008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800b668:	4605      	mov	r5, r0
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fc30 	bl	800bed0 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b670:	4603      	mov	r3, r0
 800b672:	462a      	mov	r2, r5
 800b674:	4621      	mov	r1, r4
 800b676:	4630      	mov	r0, r6
 800b678:	f000 fc35 	bl	800bee6 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKiSt17integral_constantIjLj1EEEESD_St14__invoke_otherOSF_DpOT1_>
					std::forward<_Args>(__args)...);
 800b67c:	4643      	mov	r3, r8
    }
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b688 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKfSt17integral_constantIjLj2EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800b688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b68c:	b084      	sub	sp, #16
 800b68e:	af00      	add	r7, sp, #0
 800b690:	60f8      	str	r0, [r7, #12]
 800b692:	60b9      	str	r1, [r7, #8]
 800b694:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f000 f83d 	bl	800b716 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b69c:	4604      	mov	r4, r0
 800b69e:	68b8      	ldr	r0, [r7, #8]
 800b6a0:	f7fd fc5b 	bl	8008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800b6a4:	4605      	mov	r5, r0
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fc3b 	bl	800bf22 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	462a      	mov	r2, r5
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f000 fc40 	bl	800bf38 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKfSt17integral_constantIjLj2EEEESD_St14__invoke_otherOSF_DpOT1_>
					std::forward<_Args>(__args)...);
 800b6b8:	4643      	mov	r3, r8
    }
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b6c4 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKbSt17integral_constantIjLj3EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800b6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c8:	b084      	sub	sp, #16
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	60f8      	str	r0, [r7, #12]
 800b6ce:	60b9      	str	r1, [r7, #8]
 800b6d0:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f000 f81f 	bl	800b716 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b6d8:	4604      	mov	r4, r0
 800b6da:	68b8      	ldr	r0, [r7, #8]
 800b6dc:	f7fd fc5f 	bl	8008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 800b6e0:	4605      	mov	r5, r0
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fc46 	bl	800bf74 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	462a      	mov	r2, r5
 800b6ec:	4621      	mov	r1, r4
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	f000 fc4b 	bl	800bf8a <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKbSt17integral_constantIjLj3EEEESD_St14__invoke_otherOSF_DpOT1_>
					std::forward<_Args>(__args)...);
 800b6f4:	4643      	mov	r3, r8
    }
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b700 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_RKSt7variantIJS9_ifbEEEJEE9_M_accessEv>:
      _M_access() const
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4618      	mov	r0, r3
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr

0800b716 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b716:	b480      	push	{r7}
 800b718:	b083      	sub	sp, #12
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4618      	mov	r0, r3
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4618      	mov	r0, r3
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <_ZNSt16allocator_traitsISaIP10ExpressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800b742:	b580      	push	{r7, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	af00      	add	r7, sp, #0
 800b748:	60f8      	str	r0, [r7, #12]
 800b74a:	60b9      	str	r1, [r7, #8]
 800b74c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f7ff ffec 	bl	800b72c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800b754:	4603      	mov	r3, r0
 800b756:	461a      	mov	r2, r3
 800b758:	68b9      	ldr	r1, [r7, #8]
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f000 fc33 	bl	800bfc6 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 800b760:	bf00      	nop
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	1d1a      	adds	r2, r3, #4
 800b774:	f107 030c 	add.w	r3, r7, #12
 800b778:	4611      	mov	r1, r2
 800b77a:	4618      	mov	r0, r3
 800b77c:	f000 fc39 	bl	800bff2 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
	...

0800b78c <_ZNSt6vectorIP10ExpressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800b78c:	b5b0      	push	{r4, r5, r7, lr}
 800b78e:	b08c      	sub	sp, #48	; 0x30
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800b798:	4a39      	ldr	r2, [pc, #228]	; (800b880 <_ZNSt6vectorIP10ExpressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800b79a:	2101      	movs	r1, #1
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f000 fc38 	bl	800c012 <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc>
 800b7a2:	62f8      	str	r0, [r7, #44]	; 0x2c
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f000 fc75 	bl	800c0a0 <_ZNSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	617b      	str	r3, [r7, #20]
 800b7ba:	f107 0214 	add.w	r2, r7, #20
 800b7be:	f107 0308 	add.w	r3, r7, #8
 800b7c2:	4611      	mov	r1, r2
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f000 fc7b 	bl	800c0c0 <_ZN9__gnu_cxxmiIPP10ExpressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f000 fc89 	bl	800c0ea <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj>
 800b7d8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800b7de:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800b7e0:	6a3b      	ldr	r3, [r7, #32]
 800b7e2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800b7e4:	69fa      	ldr	r2, [r7, #28]
 800b7e6:	18d5      	adds	r5, r2, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f7ff ff9f 	bl	800b72c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	4629      	mov	r1, r5
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f7ff ffa4 	bl	800b742 <_ZNSt16allocator_traitsISaIP10ExpressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800b7fe:	f107 0308 	add.w	r3, r7, #8
 800b802:	4618      	mov	r0, r3
 800b804:	f000 fc99 	bl	800c13a <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800b808:	4603      	mov	r3, r0
 800b80a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	4618      	mov	r0, r3
 800b810:	f7ff fbb1 	bl	800af76 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800b814:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800b816:	69fa      	ldr	r2, [r7, #28]
 800b818:	4621      	mov	r1, r4
 800b81a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b81c:	f000 fc79 	bl	800c112 <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800b820:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	3304      	adds	r3, #4
 800b826:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800b828:	f107 0308 	add.w	r3, r7, #8
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 fc84 	bl	800c13a <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800b832:	4603      	mov	r3, r0
 800b834:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	4618      	mov	r0, r3
 800b83a:	f7ff fb9c 	bl	800af76 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800b83e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800b840:	69ba      	ldr	r2, [r7, #24]
 800b842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b844:	4620      	mov	r0, r4
 800b846:	f000 fc64 	bl	800c112 <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800b84a:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800b84c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	689a      	ldr	r2, [r3, #8]
 800b852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b854:	1ad3      	subs	r3, r2, r3
 800b856:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800b858:	461a      	mov	r2, r3
 800b85a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b85c:	f7ff fb78 	bl	800af50 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	69fa      	ldr	r2, [r7, #28]
 800b864:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	69ba      	ldr	r2, [r7, #24]
 800b86a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800b86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	69fa      	ldr	r2, [r7, #28]
 800b872:	441a      	add	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	609a      	str	r2, [r3, #8]
    }
 800b878:	bf00      	nop
 800b87a:	3730      	adds	r7, #48	; 0x30
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bdb0      	pop	{r4, r5, r7, pc}
 800b880:	0801a0b4 	.word	0x0801a0b4

0800b884 <_ZNSt6vectorIP10ExpressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f7ff ff6b 	bl	800b768 <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800b892:	4603      	mov	r3, r0
 800b894:	60fb      	str	r3, [r7, #12]
 800b896:	f107 030c 	add.w	r3, r7, #12
 800b89a:	2101      	movs	r1, #1
 800b89c:	4618      	mov	r0, r3
 800b89e:	f000 fc57 	bl	800c150 <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEmiEi>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	60bb      	str	r3, [r7, #8]
 800b8a6:	f107 0308 	add.w	r3, r7, #8
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f000 fc69 	bl	800c182 <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEdeEv>
 800b8b0:	4603      	mov	r3, r0
      }
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3710      	adds	r7, #16
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <_ZSt7forwardIP4BodyEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b8ba:	b480      	push	{r7}
 800b8bc:	b083      	sub	sp, #12
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <_ZNSt16allocator_traitsISaIP4BodyEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7ff ffec 	bl	800b8ba <_ZSt7forwardIP4BodyEOT_RNSt16remove_referenceIS2_E4typeE>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	68b9      	ldr	r1, [r7, #8]
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f000 fc56 	bl	800c19a <_ZN9__gnu_cxx13new_allocatorIP4BodyE9constructIS2_JS2_EEEvPT_DpOT0_>
 800b8ee:	bf00      	nop
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <_ZNSt6vectorIP4BodySaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b084      	sub	sp, #16
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	1d1a      	adds	r2, r3, #4
 800b902:	f107 030c 	add.w	r3, r7, #12
 800b906:	4611      	mov	r1, r2
 800b908:	4618      	mov	r0, r3
 800b90a:	f000 fc5c 	bl	800c1c6 <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	4618      	mov	r0, r3
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <_ZNSt6vectorIP4BodySaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800b918:	b5b0      	push	{r4, r5, r7, lr}
 800b91a:	b08c      	sub	sp, #48	; 0x30
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800b924:	4a39      	ldr	r2, [pc, #228]	; (800ba0c <_ZNSt6vectorIP4BodySaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800b926:	2101      	movs	r1, #1
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f000 fc5c 	bl	800c1e6 <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc>
 800b92e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f000 fc99 	bl	800c274 <_ZNSt6vectorIP4BodySaIS1_EE5beginEv>
 800b942:	4603      	mov	r3, r0
 800b944:	617b      	str	r3, [r7, #20]
 800b946:	f107 0214 	add.w	r2, r7, #20
 800b94a:	f107 0308 	add.w	r3, r7, #8
 800b94e:	4611      	mov	r1, r2
 800b950:	4618      	mov	r0, r3
 800b952:	f000 fc9f 	bl	800c294 <_ZN9__gnu_cxxmiIPP4BodySt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800b956:	4603      	mov	r3, r0
 800b958:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 fcad 	bl	800c2be <_ZNSt12_Vector_baseIP4BodySaIS1_EE11_M_allocateEj>
 800b964:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800b96a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800b96c:	6a3b      	ldr	r3, [r7, #32]
 800b96e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800b970:	69fa      	ldr	r2, [r7, #28]
 800b972:	18d5      	adds	r5, r2, r3
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7ff ffa0 	bl	800b8ba <_ZSt7forwardIP4BodyEOT_RNSt16remove_referenceIS2_E4typeE>
 800b97a:	4603      	mov	r3, r0
 800b97c:	461a      	mov	r2, r3
 800b97e:	4629      	mov	r1, r5
 800b980:	4620      	mov	r0, r4
 800b982:	f7ff ffa5 	bl	800b8d0 <_ZNSt16allocator_traitsISaIP4BodyEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800b986:	2300      	movs	r3, #0
 800b988:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800b98a:	f107 0308 	add.w	r3, r7, #8
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 fcbd 	bl	800c30e <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800b994:	4603      	mov	r3, r0
 800b996:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7ff fb29 	bl	800aff2 <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800b9a0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800b9a2:	69fa      	ldr	r2, [r7, #28]
 800b9a4:	4621      	mov	r1, r4
 800b9a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9a8:	f000 fc9d 	bl	800c2e6 <_ZNSt6vectorIP4BodySaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800b9ac:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	3304      	adds	r3, #4
 800b9b2:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800b9b4:	f107 0308 	add.w	r3, r7, #8
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f000 fca8 	bl	800c30e <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7ff fb14 	bl	800aff2 <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800b9ca:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800b9cc:	69ba      	ldr	r2, [r7, #24]
 800b9ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f000 fc88 	bl	800c2e6 <_ZNSt6vectorIP4BodySaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800b9d6:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800b9d8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	689a      	ldr	r2, [r3, #8]
 800b9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9e8:	f7ff faf0 	bl	800afcc <_ZNSt12_Vector_baseIP4BodySaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	69fa      	ldr	r2, [r7, #28]
 800b9f0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	69ba      	ldr	r2, [r7, #24]
 800b9f6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800b9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	69fa      	ldr	r2, [r7, #28]
 800b9fe:	441a      	add	r2, r3
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	609a      	str	r2, [r3, #8]
    }
 800ba04:	bf00      	nop
 800ba06:	3730      	adds	r7, #48	; 0x30
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bdb0      	pop	{r4, r5, r7, pc}
 800ba0c:	0801a0b4 	.word	0x0801a0b4

0800ba10 <_ZNSt6vectorIP4BodySaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f7ff ff6c 	bl	800b8f6 <_ZNSt6vectorIP4BodySaIS1_EE3endEv>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	60fb      	str	r3, [r7, #12]
 800ba22:	f107 030c 	add.w	r3, r7, #12
 800ba26:	2101      	movs	r1, #1
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 fc7b 	bl	800c324 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEmiEi>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	60bb      	str	r3, [r7, #8]
 800ba32:	f107 0308 	add.w	r3, r7, #8
 800ba36:	4618      	mov	r0, r3
 800ba38:	f000 fc8d 	bl	800c356 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEdeEv>
 800ba3c:	4603      	mov	r3, r0
      }
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ba46:	b480      	push	{r7}
 800ba48:	b083      	sub	sp, #12
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4618      	mov	r0, r3
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <_ZNSt16allocator_traitsISaIP10ExpressionEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	60b9      	str	r1, [r7, #8]
 800ba66:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	68b9      	ldr	r1, [r7, #8]
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f000 fc7e 	bl	800c36e <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE10deallocateEPS2_j>
 800ba72:	bf00      	nop
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <_ZN9__gnu_cxx13new_allocatorIP4BodyEC1Ev>:
 800ba7a:	b480      	push	{r7}
 800ba7c:	b083      	sub	sp, #12
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4618      	mov	r0, r3
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <_ZNSt16allocator_traitsISaIP4BodyEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	68b9      	ldr	r1, [r7, #8]
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 fc70 	bl	800c386 <_ZN9__gnu_cxx13new_allocatorIP4BodyE10deallocateEPS2_j>
 800baa6:	bf00      	nop
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <_ZSt7forwardISt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800baae:	b480      	push	{r7}
 800bab0:	b083      	sub	sp, #12
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4618      	mov	r0, r3
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4618      	mov	r0, r3
 800bad0:	370c      	adds	r7, #12
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <_ZNOSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>:
      _Type&& _M_get() && noexcept
 800bada:	b580      	push	{r7, lr}
 800badc:	b082      	sub	sp, #8
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
      { return std::move(*_M_storage._M_ptr()); }
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7f9 fb9b 	bl	8005220 <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>
 800baea:	4603      	mov	r3, r0
 800baec:	4618      	mov	r0, r3
 800baee:	f7ff fad9 	bl	800b0a4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800baf2:	4603      	mov	r3, r0
 800baf4:	4618      	mov	r0, r3
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <_ZSt7forwardIRSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4618      	mov	r0, r3
 800bb08:	370c      	adds	r7, #12
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bb12:	b480      	push	{r7}
 800bb14:	b083      	sub	sp, #12
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4618      	mov	r0, r3
 800bb34:	370c      	adds	r7, #12
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr

0800bb3e <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP15While_statementP12If_statementEE8_M_resetEv>:
      void _M_reset()
 800bb3e:	b480      	push	{r7}
 800bb40:	b083      	sub	sp, #12
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
      { _M_index = variant_npos; }
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	22ff      	movs	r2, #255	; 0xff
 800bb4a:	711a      	strb	r2, [r3, #4]
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEJS4_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800bb58:	b590      	push	{r4, r7, lr}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2201      	movs	r2, #1
 800bb66:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7ff fac9 	bl	800b100 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEDcOT0_>
 800bb6e:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800bb70:	6838      	ldr	r0, [r7, #0]
 800bb72:	f7ff faf3 	bl	800b15c <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800bb76:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800bb78:	681c      	ldr	r4, [r3, #0]
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f000 fc0f 	bl	800c39e <_ZSt9addressofIP13Function_callEPT_RS2_>
 800bb80:	4603      	mov	r3, r0
 800bb82:	4619      	mov	r1, r3
 800bb84:	2004      	movs	r0, #4
 800bb86:	f7f5 fa29 	bl	8000fdc <_ZnwjPv>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	601c      	str	r4, [r3, #0]
    }
 800bb8e:	bf00      	nop
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd90      	pop	{r4, r7, pc}

0800bb96 <_ZNRSt8__detail9__variant14_UninitializedIP10AssignmentLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 800bb96:	b480      	push	{r7}
 800bb98:	b083      	sub	sp, #12
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4618      	mov	r0, r3
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <_ZSt28__variant_construct_by_indexILj0ESt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEJS2_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800bbac:	b590      	push	{r4, r7, lr}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f7ff fb02 	bl	800b1c6 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEDcOT0_>
 800bbc2:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800bbc4:	6838      	ldr	r0, [r7, #0]
 800bbc6:	f7ff fb2b 	bl	800b220 <_ZSt7forwardIP10AssignmentEOT_RNSt16remove_referenceIS2_E4typeE>
 800bbca:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800bbcc:	681c      	ldr	r4, [r3, #0]
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f000 fbf1 	bl	800c3b6 <_ZSt9addressofIP10AssignmentEPT_RS2_>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	2004      	movs	r0, #4
 800bbda:	f7f5 f9ff 	bl	8000fdc <_ZnwjPv>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	601c      	str	r4, [r3, #0]
    }
 800bbe2:	bf00      	nop
 800bbe4:	3714      	adds	r7, #20
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd90      	pop	{r4, r7, pc}

0800bbea <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bbea:	b480      	push	{r7}
 800bbec:	b083      	sub	sp, #12
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <_ZNRSt8__detail9__variant14_UninitializedIP15While_statementLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <_ZSt28__variant_construct_by_indexILj2ESt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEJS6_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800bc16:	b590      	push	{r4, r7, lr}
 800bc18:	b085      	sub	sp, #20
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
 800bc1e:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2202      	movs	r2, #2
 800bc24:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7ff fb83 	bl	800b332 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEDcOT0_>
 800bc2c:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800bc2e:	6838      	ldr	r0, [r7, #0]
 800bc30:	f7ff fbac 	bl	800b38c <_ZSt7forwardIP15While_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800bc34:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800bc36:	681c      	ldr	r4, [r3, #0]
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f000 fbc8 	bl	800c3ce <_ZSt9addressofIP15While_statementEPT_RS2_>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	4619      	mov	r1, r3
 800bc42:	2004      	movs	r0, #4
 800bc44:	f7f5 f9ca 	bl	8000fdc <_ZnwjPv>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	601c      	str	r4, [r3, #0]
    }
 800bc4c:	bf00      	nop
 800bc4e:	3714      	adds	r7, #20
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd90      	pop	{r4, r7, pc}

0800bc54 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP12If_statementEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	370c      	adds	r7, #12
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr

0800bc6a <_ZNRSt8__detail9__variant14_UninitializedIP12If_statementLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 800bc6a:	b480      	push	{r7}
 800bc6c:	b083      	sub	sp, #12
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4618      	mov	r0, r3
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <_ZSt28__variant_construct_by_indexILj3ESt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEJS8_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800bc80:	b590      	push	{r4, r7, lr}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2203      	movs	r2, #3
 800bc8e:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f7ff fbe6 	bl	800b462 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJP10AssignmentP13Function_callP15While_statementP12If_statementEEEEDcOT0_>
 800bc96:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800bc98:	6838      	ldr	r0, [r7, #0]
 800bc9a:	f7ff fc0f 	bl	800b4bc <_ZSt7forwardIP12If_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800bc9e:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800bca0:	681c      	ldr	r4, [r3, #0]
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f000 fb9f 	bl	800c3e6 <_ZSt9addressofIP12If_statementEPT_RS2_>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	4619      	mov	r1, r3
 800bcac:	2004      	movs	r0, #4
 800bcae:	f7f5 f995 	bl	8000fdc <_ZnwjPv>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	601c      	str	r4, [r3, #0]
    }
 800bcb6:	bf00      	nop
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd90      	pop	{r4, r7, pc}

0800bcbe <_ZN9__gnu_cxx13new_allocatorIP9StatementEC1Ev>:
 800bcbe:	b480      	push	{r7}
 800bcc0:	b083      	sub	sp, #12
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4618      	mov	r0, r3
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <_ZNSt16allocator_traitsISaIP9StatementEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	68b9      	ldr	r1, [r7, #8]
 800bce4:	68f8      	ldr	r0, [r7, #12]
 800bce6:	f000 fb8a 	bl	800c3fe <_ZN9__gnu_cxx13new_allocatorIP9StatementE10deallocateEPS2_j>
 800bcea:	bf00      	nop
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <_ZSt7forwardIP9StatementEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bcf2:	b480      	push	{r7}
 800bcf4:	b083      	sub	sp, #12
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <_ZNSt16allocator_traitsISaIP9StatementEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f7ff ffec 	bl	800bcf2 <_ZSt7forwardIP9StatementEOT_RNSt16remove_referenceIS2_E4typeE>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	68b9      	ldr	r1, [r7, #8]
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f000 fb78 	bl	800c416 <_ZN9__gnu_cxx13new_allocatorIP9StatementE9constructIS2_JS2_EEEvPT_DpOT0_>
 800bd26:	bf00      	nop
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <_ZNSt6vectorIP9StatementSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b084      	sub	sp, #16
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	1d1a      	adds	r2, r3, #4
 800bd3a:	f107 030c 	add.w	r3, r7, #12
 800bd3e:	4611      	mov	r1, r2
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 fb7e 	bl	800c442 <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <_ZNSt6vectorIP9StatementSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800bd50:	b5b0      	push	{r4, r5, r7, lr}
 800bd52:	b08c      	sub	sp, #48	; 0x30
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800bd5c:	4a39      	ldr	r2, [pc, #228]	; (800be44 <_ZNSt6vectorIP9StatementSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800bd5e:	2101      	movs	r1, #1
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f000 fb7e 	bl	800c462 <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc>
 800bd66:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f000 fbbb 	bl	800c4f0 <_ZNSt6vectorIP9StatementSaIS1_EE5beginEv>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	617b      	str	r3, [r7, #20]
 800bd7e:	f107 0214 	add.w	r2, r7, #20
 800bd82:	f107 0308 	add.w	r3, r7, #8
 800bd86:	4611      	mov	r1, r2
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 fbc1 	bl	800c510 <_ZN9__gnu_cxxmiIPP9StatementSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd96:	4618      	mov	r0, r3
 800bd98:	f000 fbcf 	bl	800c53a <_ZNSt12_Vector_baseIP9StatementSaIS1_EE11_M_allocateEj>
 800bd9c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800bda2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800bda4:	6a3b      	ldr	r3, [r7, #32]
 800bda6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800bda8:	69fa      	ldr	r2, [r7, #28]
 800bdaa:	18d5      	adds	r5, r2, r3
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f7ff ffa0 	bl	800bcf2 <_ZSt7forwardIP9StatementEOT_RNSt16remove_referenceIS2_E4typeE>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f7ff ffa5 	bl	800bd08 <_ZNSt16allocator_traitsISaIP9StatementEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bdc2:	f107 0308 	add.w	r3, r7, #8
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f000 fbdf 	bl	800c58a <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7ff fbc9 	bl	800b56a <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800bdd8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bdda:	69fa      	ldr	r2, [r7, #28]
 800bddc:	4621      	mov	r1, r4
 800bdde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bde0:	f000 fbbf 	bl	800c562 <_ZNSt6vectorIP9StatementSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800bde4:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	3304      	adds	r3, #4
 800bdea:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bdec:	f107 0308 	add.w	r3, r7, #8
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f000 fbca 	bl	800c58a <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7ff fbb4 	bl	800b56a <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800be02:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800be04:	69ba      	ldr	r2, [r7, #24]
 800be06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be08:	4620      	mov	r0, r4
 800be0a:	f000 fbaa 	bl	800c562 <_ZNSt6vectorIP9StatementSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800be0e:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800be10:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	689a      	ldr	r2, [r3, #8]
 800be16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800be1c:	461a      	mov	r2, r3
 800be1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be20:	f7ff fb90 	bl	800b544 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	69fa      	ldr	r2, [r7, #28]
 800be28:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	69ba      	ldr	r2, [r7, #24]
 800be2e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800be30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	69fa      	ldr	r2, [r7, #28]
 800be36:	441a      	add	r2, r3
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	609a      	str	r2, [r3, #8]
    }
 800be3c:	bf00      	nop
 800be3e:	3730      	adds	r7, #48	; 0x30
 800be40:	46bd      	mov	sp, r7
 800be42:	bdb0      	pop	{r4, r5, r7, pc}
 800be44:	0801a0b4 	.word	0x0801a0b4

0800be48 <_ZNSt6vectorIP9StatementSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7ff ff6c 	bl	800bd2e <_ZNSt6vectorIP9StatementSaIS1_EE3endEv>
 800be56:	4603      	mov	r3, r0
 800be58:	60fb      	str	r3, [r7, #12]
 800be5a:	f107 030c 	add.w	r3, r7, #12
 800be5e:	2101      	movs	r1, #1
 800be60:	4618      	mov	r0, r3
 800be62:	f000 fb9d 	bl	800c5a0 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEmiEi>
 800be66:	4603      	mov	r3, r0
 800be68:	60bb      	str	r3, [r7, #8]
 800be6a:	f107 0308 	add.w	r3, r7, #8
 800be6e:	4618      	mov	r0, r3
 800be70:	f000 fbaf 	bl	800c5d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEdeEv>
 800be74:	4603      	mov	r3, r0
      }
 800be76:	4618      	mov	r0, r3
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800be7e:	b480      	push	{r7}
 800be80:	b083      	sub	sp, #12
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4618      	mov	r0, r3
 800be8a:	370c      	adds	r7, #12
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKS9_St17integral_constantIjLj0EEEESD_St14__invoke_otherOSF_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800be94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	7338      	strb	r0, [r7, #12]
 800be9e:	60b9      	str	r1, [r7, #8]
 800bea0:	607a      	str	r2, [r7, #4]
 800bea2:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800bea4:	68b8      	ldr	r0, [r7, #8]
 800bea6:	f7ff fc36 	bl	800b716 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800beaa:	4604      	mov	r4, r0
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f7fd f810 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800beb2:	4605      	mov	r5, r0
 800beb4:	6838      	ldr	r0, [r7, #0]
 800beb6:	f7ff ffe2 	bl	800be7e <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800beba:	4632      	mov	r2, r6
 800bebc:	4629      	mov	r1, r5
 800bebe:	4620      	mov	r0, r4
 800bec0:	f000 fb93 	bl	800c5ea <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESC_SD_>
 800bec4:	4643      	mov	r3, r8
 800bec6:	4618      	mov	r0, r3
 800bec8:	3710      	adds	r7, #16
 800beca:	46bd      	mov	sp, r7
 800becc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bed0 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4618      	mov	r0, r3
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr

0800bee6 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKiSt17integral_constantIjLj1EEEESD_St14__invoke_otherOSF_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800bee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	7338      	strb	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
 800bef4:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800bef6:	68b8      	ldr	r0, [r7, #8]
 800bef8:	f7ff fc0d 	bl	800b716 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800befc:	4604      	mov	r4, r0
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7fd f809 	bl	8008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800bf04:	4605      	mov	r5, r0
 800bf06:	6838      	ldr	r0, [r7, #0]
 800bf08:	f7ff ffe2 	bl	800bed0 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800bf0c:	4632      	mov	r2, r6
 800bf0e:	4629      	mov	r1, r5
 800bf10:	4620      	mov	r0, r4
 800bf12:	f000 fbee 	bl	800c6f2 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESC_SD_>
 800bf16:	4643      	mov	r3, r8
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf22 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bf22:	b480      	push	{r7}
 800bf24:	b083      	sub	sp, #12
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKfSt17integral_constantIjLj2EEEESD_St14__invoke_otherOSF_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800bf38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf3c:	b084      	sub	sp, #16
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	7338      	strb	r0, [r7, #12]
 800bf42:	60b9      	str	r1, [r7, #8]
 800bf44:	607a      	str	r2, [r7, #4]
 800bf46:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800bf48:	68b8      	ldr	r0, [r7, #8]
 800bf4a:	f7ff fbe4 	bl	800b716 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800bf4e:	4604      	mov	r4, r0
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7fd f802 	bl	8008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800bf56:	4605      	mov	r5, r0
 800bf58:	6838      	ldr	r0, [r7, #0]
 800bf5a:	f7ff ffe2 	bl	800bf22 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800bf5e:	4632      	mov	r2, r6
 800bf60:	4629      	mov	r1, r5
 800bf62:	4620      	mov	r0, r4
 800bf64:	f000 fc14 	bl	800c790 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESC_SD_>
 800bf68:	4643      	mov	r3, r8
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf74 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	370c      	adds	r7, #12
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKbSt17integral_constantIjLj3EEEESD_St14__invoke_otherOSF_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800bf8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	7338      	strb	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	607a      	str	r2, [r7, #4]
 800bf98:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800bf9a:	68b8      	ldr	r0, [r7, #8]
 800bf9c:	f7ff fbbb 	bl	800b716 <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f7fc fffb 	bl	8008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 800bfa8:	4605      	mov	r5, r0
 800bfaa:	6838      	ldr	r0, [r7, #0]
 800bfac:	f7ff ffe2 	bl	800bf74 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800bfb0:	4632      	mov	r2, r6
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f000 fc3a 	bl	800c82e <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESC_SD_>
 800bfba:	4643      	mov	r3, r8
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bfc6 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800bfc6:	b590      	push	{r4, r7, lr}
 800bfc8:	b085      	sub	sp, #20
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	60f8      	str	r0, [r7, #12]
 800bfce:	60b9      	str	r1, [r7, #8]
 800bfd0:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7ff fbaa 	bl	800b72c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	681c      	ldr	r4, [r3, #0]
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	4619      	mov	r1, r3
 800bfe0:	2004      	movs	r0, #4
 800bfe2:	f7f4 fffb 	bl	8000fdc <_ZnwjPv>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	601c      	str	r4, [r3, #0]
 800bfea:	bf00      	nop
 800bfec:	3714      	adds	r7, #20
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd90      	pop	{r4, r7, pc}

0800bff2 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800bff2:	b480      	push	{r7}
 800bff4:	b083      	sub	sp, #12
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
 800bffa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	601a      	str	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4618      	mov	r0, r3
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr

0800c012 <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800c012:	b590      	push	{r4, r7, lr}
 800c014:	b087      	sub	sp, #28
 800c016:	af00      	add	r7, sp, #0
 800c018:	60f8      	str	r0, [r7, #12]
 800c01a:	60b9      	str	r1, [r7, #8]
 800c01c:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f000 fc55 	bl	800c8ce <_ZNKSt6vectorIP10ExpressionSaIS1_EE8max_sizeEv>
 800c024:	4604      	mov	r4, r0
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f000 fc62 	bl	800c8f0 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800c02c:	4603      	mov	r3, r0
 800c02e:	1ae2      	subs	r2, r4, r3
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	429a      	cmp	r2, r3
 800c034:	bf34      	ite	cc
 800c036:	2301      	movcc	r3, #1
 800c038:	2300      	movcs	r3, #0
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d002      	beq.n	800c046 <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f00a fc62 	bl	801690a <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f000 fc52 	bl	800c8f0 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800c04c:	4604      	mov	r4, r0
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	f000 fc4e 	bl	800c8f0 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800c054:	4603      	mov	r3, r0
 800c056:	613b      	str	r3, [r7, #16]
 800c058:	f107 0208 	add.w	r2, r7, #8
 800c05c:	f107 0310 	add.w	r3, r7, #16
 800c060:	4611      	mov	r1, r2
 800c062:	4618      	mov	r0, r3
 800c064:	f000 fc54 	bl	800c910 <_ZSt3maxIjERKT_S2_S2_>
 800c068:	4603      	mov	r3, r0
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4423      	add	r3, r4
 800c06e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f000 fc3d 	bl	800c8f0 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800c076:	4602      	mov	r2, r0
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d306      	bcc.n	800c08c <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800c07e:	68f8      	ldr	r0, [r7, #12]
 800c080:	f000 fc25 	bl	800c8ce <_ZNKSt6vectorIP10ExpressionSaIS1_EE8max_sizeEv>
 800c084:	4602      	mov	r2, r0
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	4293      	cmp	r3, r2
 800c08a:	d904      	bls.n	800c096 <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	f000 fc1e 	bl	800c8ce <_ZNKSt6vectorIP10ExpressionSaIS1_EE8max_sizeEv>
 800c092:	4603      	mov	r3, r0
 800c094:	e000      	b.n	800c098 <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 800c096:	697b      	ldr	r3, [r7, #20]
      }
 800c098:	4618      	mov	r0, r3
 800c09a:	371c      	adds	r7, #28
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd90      	pop	{r4, r7, pc}

0800c0a0 <_ZNSt6vectorIP10ExpressionSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	f107 030c 	add.w	r3, r7, #12
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7ff ff9e 	bl	800bff2 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <_ZN9__gnu_cxxmiIPP10ExpressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c0c0:	b590      	push	{r4, r7, lr}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f835 	bl	800c13a <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	681c      	ldr	r4, [r3, #0]
 800c0d4:	6838      	ldr	r0, [r7, #0]
 800c0d6:	f000 f830 	bl	800c13a <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	1ae3      	subs	r3, r4, r3
 800c0e0:	109b      	asrs	r3, r3, #2
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	370c      	adds	r7, #12
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd90      	pop	{r4, r7, pc}

0800c0ea <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b082      	sub	sp, #8
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d006      	beq.n	800c108 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj+0x1e>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 fc1a 	bl	800c938 <_ZNSt16allocator_traitsISaIP10ExpressionEE8allocateERS2_j>
 800c104:	4603      	mov	r3, r0
 800c106:	e000      	b.n	800c10a <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj+0x20>
 800c108:	2300      	movs	r3, #0
      }
 800c10a:	4618      	mov	r0, r3
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c112:	b590      	push	{r4, r7, lr}
 800c114:	b089      	sub	sp, #36	; 0x24
 800c116:	af02      	add	r7, sp, #8
 800c118:	60f8      	str	r0, [r7, #12]
 800c11a:	60b9      	str	r1, [r7, #8]
 800c11c:	607a      	str	r2, [r7, #4]
 800c11e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c120:	f88d 4000 	strb.w	r4, [sp]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	68b9      	ldr	r1, [r7, #8]
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f000 fc13 	bl	800c956 <_ZNSt6vectorIP10ExpressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800c130:	4603      	mov	r3, r0
      }
 800c132:	4618      	mov	r0, r3
 800c134:	371c      	adds	r7, #28
 800c136:	46bd      	mov	sp, r7
 800c138:	bd90      	pop	{r4, r7, pc}

0800c13a <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c13a:	b480      	push	{r7}
 800c13c:	b083      	sub	sp, #12
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	4618      	mov	r0, r3
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	425b      	negs	r3, r3
 800c164:	4413      	add	r3, r2
 800c166:	60fb      	str	r3, [r7, #12]
 800c168:	f107 020c 	add.w	r2, r7, #12
 800c16c:	f107 0308 	add.w	r3, r7, #8
 800c170:	4611      	mov	r1, r2
 800c172:	4618      	mov	r0, r3
 800c174:	f7ff ff3d 	bl	800bff2 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	4618      	mov	r0, r3
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c182:	b480      	push	{r7}
 800c184:	b083      	sub	sp, #12
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4618      	mov	r0, r3
 800c190:	370c      	adds	r7, #12
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr

0800c19a <_ZN9__gnu_cxx13new_allocatorIP4BodyE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800c19a:	b590      	push	{r4, r7, lr}
 800c19c:	b085      	sub	sp, #20
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	60f8      	str	r0, [r7, #12]
 800c1a2:	60b9      	str	r1, [r7, #8]
 800c1a4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f7ff fb87 	bl	800b8ba <_ZSt7forwardIP4BodyEOT_RNSt16remove_referenceIS2_E4typeE>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	681c      	ldr	r4, [r3, #0]
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	2004      	movs	r0, #4
 800c1b6:	f7f4 ff11 	bl	8000fdc <_ZnwjPv>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	601c      	str	r4, [r3, #0]
 800c1be:	bf00      	nop
 800c1c0:	3714      	adds	r7, #20
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd90      	pop	{r4, r7, pc}

0800c1c6 <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c1c6:	b480      	push	{r7}
 800c1c8:	b083      	sub	sp, #12
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
 800c1ce:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	601a      	str	r2, [r3, #0]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800c1e6:	b590      	push	{r4, r7, lr}
 800c1e8:	b087      	sub	sp, #28
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	60f8      	str	r0, [r7, #12]
 800c1ee:	60b9      	str	r1, [r7, #8]
 800c1f0:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800c1f2:	68f8      	ldr	r0, [r7, #12]
 800c1f4:	f000 fbc1 	bl	800c97a <_ZNKSt6vectorIP4BodySaIS1_EE8max_sizeEv>
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f000 fbce 	bl	800c99c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800c200:	4603      	mov	r3, r0
 800c202:	1ae2      	subs	r2, r4, r3
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	429a      	cmp	r2, r3
 800c208:	bf34      	ite	cc
 800c20a:	2301      	movcc	r3, #1
 800c20c:	2300      	movcs	r3, #0
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	2b00      	cmp	r3, #0
 800c212:	d002      	beq.n	800c21a <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f00a fb78 	bl	801690a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800c21a:	68f8      	ldr	r0, [r7, #12]
 800c21c:	f000 fbbe 	bl	800c99c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800c220:	4604      	mov	r4, r0
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f000 fbba 	bl	800c99c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800c228:	4603      	mov	r3, r0
 800c22a:	613b      	str	r3, [r7, #16]
 800c22c:	f107 0208 	add.w	r2, r7, #8
 800c230:	f107 0310 	add.w	r3, r7, #16
 800c234:	4611      	mov	r1, r2
 800c236:	4618      	mov	r0, r3
 800c238:	f000 fb6a 	bl	800c910 <_ZSt3maxIjERKT_S2_S2_>
 800c23c:	4603      	mov	r3, r0
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4423      	add	r3, r4
 800c242:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f000 fba9 	bl	800c99c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800c24a:	4602      	mov	r2, r0
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	4293      	cmp	r3, r2
 800c250:	d306      	bcc.n	800c260 <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc+0x7a>
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f000 fb91 	bl	800c97a <_ZNKSt6vectorIP4BodySaIS1_EE8max_sizeEv>
 800c258:	4602      	mov	r2, r0
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d904      	bls.n	800c26a <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc+0x84>
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	f000 fb8a 	bl	800c97a <_ZNKSt6vectorIP4BodySaIS1_EE8max_sizeEv>
 800c266:	4603      	mov	r3, r0
 800c268:	e000      	b.n	800c26c <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc+0x86>
 800c26a:	697b      	ldr	r3, [r7, #20]
      }
 800c26c:	4618      	mov	r0, r3
 800c26e:	371c      	adds	r7, #28
 800c270:	46bd      	mov	sp, r7
 800c272:	bd90      	pop	{r4, r7, pc}

0800c274 <_ZNSt6vectorIP4BodySaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	f107 030c 	add.w	r3, r7, #12
 800c282:	4611      	mov	r1, r2
 800c284:	4618      	mov	r0, r3
 800c286:	f7ff ff9e 	bl	800c1c6 <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	4618      	mov	r0, r3
 800c28e:	3710      	adds	r7, #16
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <_ZN9__gnu_cxxmiIPP4BodySt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c294:	b590      	push	{r4, r7, lr}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 f835 	bl	800c30e <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	681c      	ldr	r4, [r3, #0]
 800c2a8:	6838      	ldr	r0, [r7, #0]
 800c2aa:	f000 f830 	bl	800c30e <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	1ae3      	subs	r3, r4, r3
 800c2b4:	109b      	asrs	r3, r3, #2
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd90      	pop	{r4, r7, pc}

0800c2be <_ZNSt12_Vector_baseIP4BodySaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b082      	sub	sp, #8
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
 800c2c6:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d006      	beq.n	800c2dc <_ZNSt12_Vector_baseIP4BodySaIS1_EE11_M_allocateEj+0x1e>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f000 fb72 	bl	800c9bc <_ZNSt16allocator_traitsISaIP4BodyEE8allocateERS2_j>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	e000      	b.n	800c2de <_ZNSt12_Vector_baseIP4BodySaIS1_EE11_M_allocateEj+0x20>
 800c2dc:	2300      	movs	r3, #0
      }
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3708      	adds	r7, #8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <_ZNSt6vectorIP4BodySaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c2e6:	b590      	push	{r4, r7, lr}
 800c2e8:	b089      	sub	sp, #36	; 0x24
 800c2ea:	af02      	add	r7, sp, #8
 800c2ec:	60f8      	str	r0, [r7, #12]
 800c2ee:	60b9      	str	r1, [r7, #8]
 800c2f0:	607a      	str	r2, [r7, #4]
 800c2f2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c2f4:	f88d 4000 	strb.w	r4, [sp]
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	68b9      	ldr	r1, [r7, #8]
 800c2fe:	68f8      	ldr	r0, [r7, #12]
 800c300:	f000 fb6b 	bl	800c9da <_ZNSt6vectorIP4BodySaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800c304:	4603      	mov	r3, r0
      }
 800c306:	4618      	mov	r0, r3
 800c308:	371c      	adds	r7, #28
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd90      	pop	{r4, r7, pc}

0800c30e <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c30e:	b480      	push	{r7}
 800c310:	b083      	sub	sp, #12
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4618      	mov	r0, r3
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	425b      	negs	r3, r3
 800c338:	4413      	add	r3, r2
 800c33a:	60fb      	str	r3, [r7, #12]
 800c33c:	f107 020c 	add.w	r2, r7, #12
 800c340:	f107 0308 	add.w	r3, r7, #8
 800c344:	4611      	mov	r1, r2
 800c346:	4618      	mov	r0, r3
 800c348:	f7ff ff3d 	bl	800c1c6 <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c356:	b480      	push	{r7}
 800c358:	b083      	sub	sp, #12
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4618      	mov	r0, r3
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr

0800c36e <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800c36e:	b580      	push	{r7, lr}
 800c370:	b084      	sub	sp, #16
 800c372:	af00      	add	r7, sp, #0
 800c374:	60f8      	str	r0, [r7, #12]
 800c376:	60b9      	str	r1, [r7, #8]
 800c378:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c37a:	68b8      	ldr	r0, [r7, #8]
 800c37c:	f00a f9f3 	bl	8016766 <_ZdlPv>
      }
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <_ZN9__gnu_cxx13new_allocatorIP4BodyE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800c386:	b580      	push	{r7, lr}
 800c388:	b084      	sub	sp, #16
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	60f8      	str	r0, [r7, #12]
 800c38e:	60b9      	str	r1, [r7, #8]
 800c390:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c392:	68b8      	ldr	r0, [r7, #8]
 800c394:	f00a f9e7 	bl	8016766 <_ZdlPv>
      }
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <_ZSt9addressofIP13Function_callEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b082      	sub	sp, #8
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f7f9 fc09 	bl	8005bbe <_ZSt11__addressofIP13Function_callEPT_RS2_>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3708      	adds	r7, #8
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <_ZSt9addressofIP10AssignmentEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b082      	sub	sp, #8
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fb1d 	bl	800c9fe <_ZSt11__addressofIP10AssignmentEPT_RS2_>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <_ZSt9addressofIP15While_statementEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b082      	sub	sp, #8
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fb1c 	bl	800ca14 <_ZSt11__addressofIP15While_statementEPT_RS2_>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <_ZSt9addressofIP12If_statementEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b082      	sub	sp, #8
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 fb1b 	bl	800ca2a <_ZSt11__addressofIP12If_statementEPT_RS2_>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <_ZN9__gnu_cxx13new_allocatorIP9StatementE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b084      	sub	sp, #16
 800c402:	af00      	add	r7, sp, #0
 800c404:	60f8      	str	r0, [r7, #12]
 800c406:	60b9      	str	r1, [r7, #8]
 800c408:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c40a:	68b8      	ldr	r0, [r7, #8]
 800c40c:	f00a f9ab 	bl	8016766 <_ZdlPv>
      }
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <_ZN9__gnu_cxx13new_allocatorIP9StatementE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800c416:	b590      	push	{r4, r7, lr}
 800c418:	b085      	sub	sp, #20
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	60b9      	str	r1, [r7, #8]
 800c420:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7ff fc65 	bl	800bcf2 <_ZSt7forwardIP9StatementEOT_RNSt16remove_referenceIS2_E4typeE>
 800c428:	4603      	mov	r3, r0
 800c42a:	681c      	ldr	r4, [r3, #0]
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	4619      	mov	r1, r3
 800c430:	2004      	movs	r0, #4
 800c432:	f7f4 fdd3 	bl	8000fdc <_ZnwjPv>
 800c436:	4603      	mov	r3, r0
 800c438:	601c      	str	r4, [r3, #0]
 800c43a:	bf00      	nop
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd90      	pop	{r4, r7, pc}

0800c442 <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c442:	b480      	push	{r7}
 800c444:	b083      	sub	sp, #12
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
 800c44a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	601a      	str	r2, [r3, #0]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	4618      	mov	r0, r3
 800c458:	370c      	adds	r7, #12
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr

0800c462 <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800c462:	b590      	push	{r4, r7, lr}
 800c464:	b087      	sub	sp, #28
 800c466:	af00      	add	r7, sp, #0
 800c468:	60f8      	str	r0, [r7, #12]
 800c46a:	60b9      	str	r1, [r7, #8]
 800c46c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f000 fae6 	bl	800ca40 <_ZNKSt6vectorIP9StatementSaIS1_EE8max_sizeEv>
 800c474:	4604      	mov	r4, r0
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f000 faf3 	bl	800ca62 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800c47c:	4603      	mov	r3, r0
 800c47e:	1ae2      	subs	r2, r4, r3
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	429a      	cmp	r2, r3
 800c484:	bf34      	ite	cc
 800c486:	2301      	movcc	r3, #1
 800c488:	2300      	movcs	r3, #0
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f00a fa3a 	bl	801690a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800c496:	68f8      	ldr	r0, [r7, #12]
 800c498:	f000 fae3 	bl	800ca62 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800c49c:	4604      	mov	r4, r0
 800c49e:	68f8      	ldr	r0, [r7, #12]
 800c4a0:	f000 fadf 	bl	800ca62 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	613b      	str	r3, [r7, #16]
 800c4a8:	f107 0208 	add.w	r2, r7, #8
 800c4ac:	f107 0310 	add.w	r3, r7, #16
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 fa2c 	bl	800c910 <_ZSt3maxIjERKT_S2_S2_>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4423      	add	r3, r4
 800c4be:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f000 face 	bl	800ca62 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d306      	bcc.n	800c4dc <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f000 fab6 	bl	800ca40 <_ZNKSt6vectorIP9StatementSaIS1_EE8max_sizeEv>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d904      	bls.n	800c4e6 <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc+0x84>
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f000 faaf 	bl	800ca40 <_ZNKSt6vectorIP9StatementSaIS1_EE8max_sizeEv>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	e000      	b.n	800c4e8 <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc+0x86>
 800c4e6:	697b      	ldr	r3, [r7, #20]
      }
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	371c      	adds	r7, #28
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd90      	pop	{r4, r7, pc}

0800c4f0 <_ZNSt6vectorIP9StatementSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	f107 030c 	add.w	r3, r7, #12
 800c4fe:	4611      	mov	r1, r2
 800c500:	4618      	mov	r0, r3
 800c502:	f7ff ff9e 	bl	800c442 <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <_ZN9__gnu_cxxmiIPP9StatementSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c510:	b590      	push	{r4, r7, lr}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 f835 	bl	800c58a <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800c520:	4603      	mov	r3, r0
 800c522:	681c      	ldr	r4, [r3, #0]
 800c524:	6838      	ldr	r0, [r7, #0]
 800c526:	f000 f830 	bl	800c58a <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800c52a:	4603      	mov	r3, r0
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	1ae3      	subs	r3, r4, r3
 800c530:	109b      	asrs	r3, r3, #2
 800c532:	4618      	mov	r0, r3
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	bd90      	pop	{r4, r7, pc}

0800c53a <_ZNSt12_Vector_baseIP9StatementSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b082      	sub	sp, #8
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
 800c542:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d006      	beq.n	800c558 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE11_M_allocateEj+0x1e>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6839      	ldr	r1, [r7, #0]
 800c54e:	4618      	mov	r0, r3
 800c550:	f000 fa97 	bl	800ca82 <_ZNSt16allocator_traitsISaIP9StatementEE8allocateERS2_j>
 800c554:	4603      	mov	r3, r0
 800c556:	e000      	b.n	800c55a <_ZNSt12_Vector_baseIP9StatementSaIS1_EE11_M_allocateEj+0x20>
 800c558:	2300      	movs	r3, #0
      }
 800c55a:	4618      	mov	r0, r3
 800c55c:	3708      	adds	r7, #8
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <_ZNSt6vectorIP9StatementSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c562:	b590      	push	{r4, r7, lr}
 800c564:	b089      	sub	sp, #36	; 0x24
 800c566:	af02      	add	r7, sp, #8
 800c568:	60f8      	str	r0, [r7, #12]
 800c56a:	60b9      	str	r1, [r7, #8]
 800c56c:	607a      	str	r2, [r7, #4]
 800c56e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c570:	f88d 4000 	strb.w	r4, [sp]
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	68b9      	ldr	r1, [r7, #8]
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f000 fa90 	bl	800caa0 <_ZNSt6vectorIP9StatementSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800c580:	4603      	mov	r3, r0
      }
 800c582:	4618      	mov	r0, r3
 800c584:	371c      	adds	r7, #28
 800c586:	46bd      	mov	sp, r7
 800c588:	bd90      	pop	{r4, r7, pc}

0800c58a <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c58a:	b480      	push	{r7}
 800c58c:	b083      	sub	sp, #12
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4618      	mov	r0, r3
 800c596:	370c      	adds	r7, #12
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr

0800c5a0 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	425b      	negs	r3, r3
 800c5b4:	4413      	add	r3, r2
 800c5b6:	60fb      	str	r3, [r7, #12]
 800c5b8:	f107 020c 	add.w	r2, r7, #12
 800c5bc:	f107 0308 	add.w	r3, r7, #8
 800c5c0:	4611      	mov	r1, r2
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7ff ff3d 	bl	800c442 <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c5d2:	b480      	push	{r7}
 800c5d4:	b083      	sub	sp, #12
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	370c      	adds	r7, #12
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr

0800c5ea <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESC_SD_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c5ea:	b5b0      	push	{r4, r5, r7, lr}
 800c5ec:	b08c      	sub	sp, #48	; 0x30
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	60f8      	str	r0, [r7, #12]
 800c5f2:	60b9      	str	r1, [r7, #8]
 800c5f4:	713a      	strb	r2, [r7, #4]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800c5fa:	7e1b      	ldrb	r3, [r3, #24]
 800c5fc:	461c      	mov	r4, r3
 800c5fe:	1d3b      	adds	r3, r7, #4
 800c600:	4618      	mov	r0, r3
 800c602:	f000 f82f 	bl	800c664 <_ZNKSt17integral_constantIjLj0EEcvjEv>
 800c606:	4603      	mov	r3, r0
 800c608:	429c      	cmp	r4, r3
 800c60a:	bf0c      	ite	eq
 800c60c:	2301      	moveq	r3, #1
 800c60e:	2300      	movne	r3, #0
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00a      	beq.n	800c62c <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESC_SD_+0x42>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800c61a:	4618      	mov	r0, r3
 800c61c:	f000 f82d 	bl	800c67a <_ZNSt8__detail9__variant5__getILj0ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800c620:	4603      	mov	r3, r0
 800c622:	68b9      	ldr	r1, [r7, #8]
 800c624:	4618      	mov	r0, r3
 800c626:	f00a fa80 	bl	8016b2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	    return {};
 800c62a:	e016      	b.n	800c65a <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESC_SD_+0x70>
			= variant<_Types...>(__rhs_mem);
 800c62c:	f107 0314 	add.w	r3, r7, #20
 800c630:	68b9      	ldr	r1, [r7, #8]
 800c632:	4618      	mov	r0, r3
 800c634:	f000 fa6a 	bl	800cb0c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IRKS5_vvS5_vEEOT_>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
		      __variant_cast<_Types...>(*this)
 800c63c:	4618      	mov	r0, r3
 800c63e:	f000 f82d 	bl	800c69c <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Copy_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800c642:	4602      	mov	r2, r0
			= variant<_Types...>(__rhs_mem);
 800c644:	f107 0314 	add.w	r3, r7, #20
 800c648:	4619      	mov	r1, r3
 800c64a:	4610      	mov	r0, r2
 800c64c:	f000 f841 	bl	800c6d2 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS6_>
 800c650:	f107 0314 	add.w	r3, r7, #20
 800c654:	4618      	mov	r0, r3
 800c656:	f7f9 ff15 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	    return {};
 800c65a:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c65c:	4618      	mov	r0, r3
 800c65e:	3730      	adds	r7, #48	; 0x30
 800c660:	46bd      	mov	sp, r7
 800c662:	bdb0      	pop	{r4, r5, r7, pc}

0800c664 <_ZNKSt17integral_constantIjLj0EEcvjEv>:
    struct integral_constant
    {
      static constexpr _Tp                  value = __v;
      typedef _Tp                           value_type;
      typedef integral_constant<_Tp, __v>   type;
      constexpr operator value_type() const noexcept { return value; }
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	2300      	movs	r3, #0
 800c66e:	4618      	mov	r0, r3
 800c670:	370c      	adds	r7, #12
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr

0800c67a <_ZNSt8__detail9__variant5__getILj0ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800c67a:	b590      	push	{r4, r7, lr}
 800c67c:	b083      	sub	sp, #12
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 fa1e 	bl	800cac4 <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800c688:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800c68a:	4619      	mov	r1, r3
 800c68c:	4620      	mov	r0, r4
 800c68e:	f7fb fca4 	bl	8007fda <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 800c692:	4603      	mov	r3, r0
    }
 800c694:	4618      	mov	r0, r3
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd90      	pop	{r4, r7, pc}

0800c69c <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Copy_assign_baseILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
	    return static_cast<variant<_Types...>&>(__rhs);
 800c6a4:	687b      	ldr	r3, [r7, #4]
    }
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	370c      	adds	r7, #12
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr

0800c6b2 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_>:
    struct _Variant_base : _Move_assign_alias<_Types...>
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b082      	sub	sp, #8
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
 800c6ba:	6039      	str	r1, [r7, #0]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	683a      	ldr	r2, [r7, #0]
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f000 fbd8 	bl	800ce78 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS6_>:
    class variant
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b082      	sub	sp, #8
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	6039      	str	r1, [r7, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	683a      	ldr	r2, [r7, #0]
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7ff ffe5 	bl	800c6b2 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESC_SD_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c6f2:	b5b0      	push	{r4, r5, r7, lr}
 800c6f4:	b084      	sub	sp, #16
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	60f8      	str	r0, [r7, #12]
 800c6fa:	60b9      	str	r1, [r7, #8]
 800c6fc:	713a      	strb	r2, [r7, #4]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800c702:	7e1b      	ldrb	r3, [r3, #24]
 800c704:	461c      	mov	r4, r3
 800c706:	1d3b      	adds	r3, r7, #4
 800c708:	4618      	mov	r0, r3
 800c70a:	f000 f825 	bl	800c758 <_ZNKSt17integral_constantIjLj1EEcvjEv>
 800c70e:	4603      	mov	r3, r0
 800c710:	429c      	cmp	r4, r3
 800c712:	bf0c      	ite	eq
 800c714:	2301      	moveq	r3, #1
 800c716:	2300      	movne	r3, #0
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d009      	beq.n	800c732 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESC_SD_+0x40>
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	681c      	ldr	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800c726:	4618      	mov	r0, r3
 800c728:	f000 f821 	bl	800c76e <_ZNSt8__detail9__variant5__getILj1ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800c72c:	4603      	mov	r3, r0
 800c72e:	601c      	str	r4, [r3, #0]
	    return {};
 800c730:	e00d      	b.n	800c74e <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESC_SD_+0x5c>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 800c736:	461c      	mov	r4, r3
 800c738:	1d3b      	adds	r3, r7, #4
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 f80c 	bl	800c758 <_ZNKSt17integral_constantIjLj1EEcvjEv>
 800c740:	4603      	mov	r3, r0
 800c742:	b29b      	uxth	r3, r3
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	4619      	mov	r1, r3
 800c748:	4620      	mov	r0, r4
 800c74a:	f000 fbab 	bl	800cea4 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIiEEvtRKT_>
	    return {};
 800c74e:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c750:	4618      	mov	r0, r3
 800c752:	3710      	adds	r7, #16
 800c754:	46bd      	mov	sp, r7
 800c756:	bdb0      	pop	{r4, r5, r7, pc}

0800c758 <_ZNKSt17integral_constantIjLj1EEcvjEv>:
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	2301      	movs	r3, #1
 800c762:	4618      	mov	r0, r3
 800c764:	370c      	adds	r7, #12
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr

0800c76e <_ZNSt8__detail9__variant5__getILj1ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800c76e:	b590      	push	{r4, r7, lr}
 800c770:	b083      	sub	sp, #12
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 f9a4 	bl	800cac4 <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800c77c:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800c77e:	4619      	mov	r1, r3
 800c780:	4620      	mov	r0, r4
 800c782:	f7fb fcb3 	bl	80080ec <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800c786:	4603      	mov	r3, r0
    }
 800c788:	4618      	mov	r0, r3
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd90      	pop	{r4, r7, pc}

0800c790 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESC_SD_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c790:	b5b0      	push	{r4, r5, r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	713a      	strb	r2, [r7, #4]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800c7a0:	7e1b      	ldrb	r3, [r3, #24]
 800c7a2:	461c      	mov	r4, r3
 800c7a4:	1d3b      	adds	r3, r7, #4
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f000 f825 	bl	800c7f6 <_ZNKSt17integral_constantIjLj2EEcvjEv>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	429c      	cmp	r4, r3
 800c7b0:	bf0c      	ite	eq
 800c7b2:	2301      	moveq	r3, #1
 800c7b4:	2300      	movne	r3, #0
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d009      	beq.n	800c7d0 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESC_SD_+0x40>
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	681c      	ldr	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f000 f821 	bl	800c80c <_ZNSt8__detail9__variant5__getILj2ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	601c      	str	r4, [r3, #0]
	    return {};
 800c7ce:	e00d      	b.n	800c7ec <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESC_SD_+0x5c>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 800c7d4:	461c      	mov	r4, r3
 800c7d6:	1d3b      	adds	r3, r7, #4
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f000 f80c 	bl	800c7f6 <_ZNKSt17integral_constantIjLj2EEcvjEv>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f000 fb73 	bl	800ced2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIfEEvtRKT_>
	    return {};
 800c7ec:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bdb0      	pop	{r4, r5, r7, pc}

0800c7f6 <_ZNKSt17integral_constantIjLj2EEcvjEv>:
 800c7f6:	b480      	push	{r7}
 800c7f8:	b083      	sub	sp, #12
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
 800c7fe:	2302      	movs	r3, #2
 800c800:	4618      	mov	r0, r3
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <_ZNSt8__detail9__variant5__getILj2ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800c80c:	b590      	push	{r4, r7, lr}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f955 	bl	800cac4 <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800c81a:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800c81c:	4619      	mov	r1, r3
 800c81e:	4620      	mov	r0, r4
 800c820:	f7fb fd00 	bl	8008224 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800c824:	4603      	mov	r3, r0
    }
 800c826:	4618      	mov	r0, r3
 800c828:	370c      	adds	r7, #12
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd90      	pop	{r4, r7, pc}

0800c82e <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESC_SD_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c82e:	b5b0      	push	{r4, r5, r7, lr}
 800c830:	b084      	sub	sp, #16
 800c832:	af00      	add	r7, sp, #0
 800c834:	60f8      	str	r0, [r7, #12]
 800c836:	60b9      	str	r1, [r7, #8]
 800c838:	713a      	strb	r2, [r7, #4]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800c83e:	7e1b      	ldrb	r3, [r3, #24]
 800c840:	461c      	mov	r4, r3
 800c842:	1d3b      	adds	r3, r7, #4
 800c844:	4618      	mov	r0, r3
 800c846:	f000 f826 	bl	800c896 <_ZNKSt17integral_constantIjLj3EEcvjEv>
 800c84a:	4603      	mov	r3, r0
 800c84c:	429c      	cmp	r4, r3
 800c84e:	bf0c      	ite	eq
 800c850:	2301      	moveq	r3, #1
 800c852:	2300      	movne	r3, #0
 800c854:	b2db      	uxtb	r3, r3
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00a      	beq.n	800c870 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESC_SD_+0x42>
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	781c      	ldrb	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800c862:	4618      	mov	r0, r3
 800c864:	f000 f822 	bl	800c8ac <_ZNSt8__detail9__variant5__getILj3ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800c868:	4603      	mov	r3, r0
 800c86a:	4622      	mov	r2, r4
 800c86c:	701a      	strb	r2, [r3, #0]
	    return {};
 800c86e:	e00d      	b.n	800c88c <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESC_SD_+0x5e>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 800c874:	461c      	mov	r4, r3
 800c876:	1d3b      	adds	r3, r7, #4
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 f80c 	bl	800c896 <_ZNKSt17integral_constantIjLj3EEcvjEv>
 800c87e:	4603      	mov	r3, r0
 800c880:	b29b      	uxth	r3, r3
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	4619      	mov	r1, r3
 800c886:	4620      	mov	r0, r4
 800c888:	f000 fb3a 	bl	800cf00 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIbEEvtRKT_>
	    return {};
 800c88c:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bdb0      	pop	{r4, r5, r7, pc}

0800c896 <_ZNKSt17integral_constantIjLj3EEcvjEv>:
 800c896:	b480      	push	{r7}
 800c898:	b083      	sub	sp, #12
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	2303      	movs	r3, #3
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <_ZNSt8__detail9__variant5__getILj3ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800c8ac:	b590      	push	{r4, r7, lr}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 f905 	bl	800cac4 <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800c8ba:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800c8bc:	4619      	mov	r1, r3
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f7fb fd5e 	bl	8008380 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800c8c4:	4603      	mov	r3, r0
    }
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	370c      	adds	r7, #12
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd90      	pop	{r4, r7, pc}

0800c8ce <_ZNKSt6vectorIP10ExpressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b082      	sub	sp, #8
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f000 fb42 	bl	800cf62 <_ZNKSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f000 fb24 	bl	800cf2e <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_max_sizeERKS2_>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3708      	adds	r7, #8
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	109b      	asrs	r3, r3, #2
 800c904:	4618      	mov	r0, r3
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	429a      	cmp	r2, r3
 800c924:	d201      	bcs.n	800c92a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	e000      	b.n	800c92c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800c92a:	687b      	ldr	r3, [r7, #4]
    }
 800c92c:	4618      	mov	r0, r3
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <_ZNSt16allocator_traitsISaIP10ExpressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c942:	2200      	movs	r2, #0
 800c944:	6839      	ldr	r1, [r7, #0]
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 fb16 	bl	800cf78 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE8allocateEjPKv>
 800c94c:	4603      	mov	r3, r0
 800c94e:	4618      	mov	r0, r3
 800c950:	3708      	adds	r7, #8
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <_ZNSt6vectorIP10ExpressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800c956:	b580      	push	{r7, lr}
 800c958:	b084      	sub	sp, #16
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	60f8      	str	r0, [r7, #12]
 800c95e:	60b9      	str	r1, [r7, #8]
 800c960:	607a      	str	r2, [r7, #4]
 800c962:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	68b9      	ldr	r1, [r7, #8]
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	f000 fb23 	bl	800cfb6 <_ZSt12__relocate_aIPP10ExpressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 800c970:	4603      	mov	r3, r0
      }
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <_ZNKSt6vectorIP4BodySaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b082      	sub	sp, #8
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4618      	mov	r0, r3
 800c986:	f000 fb4d 	bl	800d024 <_ZNKSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800c98a:	4603      	mov	r3, r0
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 fb2f 	bl	800cff0 <_ZNSt6vectorIP4BodySaIS1_EE11_S_max_sizeERKS2_>
 800c992:	4603      	mov	r3, r0
 800c994:	4618      	mov	r0, r3
 800c996:	3708      	adds	r7, #8
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	685a      	ldr	r2, [r3, #4]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	109b      	asrs	r3, r3, #2
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <_ZNSt16allocator_traitsISaIP4BodyEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	6839      	ldr	r1, [r7, #0]
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fb35 	bl	800d03a <_ZN9__gnu_cxx13new_allocatorIP4BodyE8allocateEjPKv>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <_ZNSt6vectorIP4BodySaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b084      	sub	sp, #16
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	60f8      	str	r0, [r7, #12]
 800c9e2:	60b9      	str	r1, [r7, #8]
 800c9e4:	607a      	str	r2, [r7, #4]
 800c9e6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	68b9      	ldr	r1, [r7, #8]
 800c9ee:	68f8      	ldr	r0, [r7, #12]
 800c9f0:	f000 fb42 	bl	800d078 <_ZSt12__relocate_aIPP4BodyS2_SaIS1_EET0_T_S5_S4_RT1_>
 800c9f4:	4603      	mov	r3, r0
      }
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <_ZSt11__addressofIP10AssignmentEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c9fe:	b480      	push	{r7}
 800ca00:	b083      	sub	sp, #12
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <_ZSt11__addressofIP15While_statementEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	370c      	adds	r7, #12
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr

0800ca2a <_ZSt11__addressofIP12If_statementEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ca2a:	b480      	push	{r7}
 800ca2c:	b083      	sub	sp, #12
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	4618      	mov	r0, r3
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <_ZNKSt6vectorIP9StatementSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 fb4b 	bl	800d0e6 <_ZNKSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800ca50:	4603      	mov	r3, r0
 800ca52:	4618      	mov	r0, r3
 800ca54:	f000 fb2d 	bl	800d0b2 <_ZNSt6vectorIP9StatementSaIS1_EE11_S_max_sizeERKS2_>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800ca62:	b480      	push	{r7}
 800ca64:	b083      	sub	sp, #12
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	685a      	ldr	r2, [r3, #4]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	109b      	asrs	r3, r3, #2
 800ca76:	4618      	mov	r0, r3
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr

0800ca82 <_ZNSt16allocator_traitsISaIP9StatementEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b082      	sub	sp, #8
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
 800ca8a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 fb33 	bl	800d0fc <_ZN9__gnu_cxx13new_allocatorIP9StatementE8allocateEjPKv>
 800ca96:	4603      	mov	r3, r0
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <_ZNSt6vectorIP9StatementSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
 800caac:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	68b9      	ldr	r1, [r7, #8]
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	f000 fb40 	bl	800d13a <_ZSt12__relocate_aIPP9StatementS2_SaIS1_EET0_T_S5_S4_RT1_>
 800caba:	4603      	mov	r3, r0
      }
 800cabc:	4618      	mov	r0, r3
 800cabe:	3710      	adds	r7, #16
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4618      	mov	r0, r3
 800cad0:	370c      	adds	r7, #12
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS5_ES5_vEESt16in_place_index_tIXT_EEDpOT0_>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
 800cada:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cadc:	b085      	sub	sp, #20
 800cade:	af00      	add	r7, sp, #0
 800cae0:	60f8      	str	r0, [r7, #12]
 800cae2:	7239      	strb	r1, [r7, #8]
 800cae4:	607a      	str	r2, [r7, #4]
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
 800cae6:	68fc      	ldr	r4, [r7, #12]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7fc f9f2 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800caee:	4603      	mov	r3, r0
 800caf0:	461a      	mov	r2, r3
 800caf2:	4631      	mov	r1, r6
 800caf4:	4620      	mov	r0, r4
 800caf6:	f000 fb81 	bl	800d1fc <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800cafa:	4629      	mov	r1, r5
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	f7fa fe62 	bl	80077c6 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>
	{ }
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	4618      	mov	r0, r3
 800cb06:	3714      	adds	r7, #20
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb0c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IRKS5_vvS5_vEEOT_>:
	variant(_Tp&& __t)
 800cb0c:	b590      	push	{r4, r7, lr}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
		  std::forward<_Tp>(__t))
 800cb16:	6838      	ldr	r0, [r7, #0]
 800cb18:	f7fc f9db 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	461a      	mov	r2, r3
 800cb20:	4621      	mov	r1, r4
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7ff ffd9 	bl	800cada <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS5_ES5_vEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	370c      	adds	r7, #12
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd90      	pop	{r4, r7, pc}

0800cb32 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 800cb32:	b480      	push	{r7}
 800cb34:	b083      	sub	sp, #12
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
	    return static_cast<variant<_Types...>&>(__rhs);
 800cb3a:	687b      	ldr	r3, [r7, #4]
    }
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESK_EEDcOSF_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f7fc f8b4 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cb56:	4603      	mov	r3, r0
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7fb fa4f 	bl	8007ffc <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800cb5e:	4603      	mov	r3, r0
	}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESH_SK_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800cb68:	b5b0      	push	{r4, r5, r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f000 fb57 	bl	800d226 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800cb78:	4604      	mov	r4, r0
 800cb7a:	6838      	ldr	r0, [r7, #0]
 800cb7c:	f7fc f89f 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cb80:	4603      	mov	r3, r0
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7ff ffe0 	bl	800cb48 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESK_EEDcOSF_>
 800cb88:	4601      	mov	r1, r0
 800cb8a:	f107 030c 	add.w	r3, r7, #12
 800cb8e:	461a      	mov	r2, r3
 800cb90:	4620      	mov	r0, r4
 800cb92:	f000 fb53 	bl	800d23c <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRS8_St17integral_constantIjLj0EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>
	      integral_constant<size_t, __indices>()...);
 800cb96:	462b      	mov	r3, r5
      }
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bdb0      	pop	{r4, r5, r7, pc}

0800cba0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESH_SK_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800cba0:	b5b0      	push	{r4, r5, r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 fb3b 	bl	800d226 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	6838      	ldr	r0, [r7, #0]
 800cbb4:	f7fc f883 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	4619      	mov	r1, r3
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	f7ff ffd3 	bl	800cb68 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800cbc2:	462b      	mov	r3, r5
      }
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bdb0      	pop	{r4, r5, r7, pc}

0800cbcc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESH_SK_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800cbcc:	b5b0      	push	{r4, r5, r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 fb25 	bl	800d226 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800cbdc:	4604      	mov	r4, r0
 800cbde:	6838      	ldr	r0, [r7, #0]
 800cbe0:	f7fc f86d 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f7ff ffd9 	bl	800cba0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800cbee:	462b      	mov	r3, r5
      }
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bdb0      	pop	{r4, r5, r7, pc}

0800cbf8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESK_EEDcOSF_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f7fc f85c 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cc06:	4603      	mov	r3, r0
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7fb fa81 	bl	8008110 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800cc0e:	4603      	mov	r3, r0
	}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3708      	adds	r7, #8
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESH_SK_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800cc18:	b5b0      	push	{r4, r5, r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 faff 	bl	800d226 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800cc28:	4604      	mov	r4, r0
 800cc2a:	6838      	ldr	r0, [r7, #0]
 800cc2c:	f7fc f847 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cc30:	4603      	mov	r3, r0
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7ff ffe0 	bl	800cbf8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESK_EEDcOSF_>
 800cc38:	4601      	mov	r1, r0
 800cc3a:	f107 030c 	add.w	r3, r7, #12
 800cc3e:	461a      	mov	r2, r3
 800cc40:	4620      	mov	r0, r4
 800cc42:	f000 fb19 	bl	800d278 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRiSt17integral_constantIjLj1EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>
	      integral_constant<size_t, __indices>()...);
 800cc46:	462b      	mov	r3, r5
      }
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3710      	adds	r7, #16
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bdb0      	pop	{r4, r5, r7, pc}

0800cc50 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESH_SK_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800cc50:	b5b0      	push	{r4, r5, r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 fae3 	bl	800d226 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800cc60:	4604      	mov	r4, r0
 800cc62:	6838      	ldr	r0, [r7, #0]
 800cc64:	f7fc f82b 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	f7ff ffd3 	bl	800cc18 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800cc72:	462b      	mov	r3, r5
      }
 800cc74:	4618      	mov	r0, r3
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bdb0      	pop	{r4, r5, r7, pc}

0800cc7c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESH_SK_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800cc7c:	b5b0      	push	{r4, r5, r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 facd 	bl	800d226 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	6838      	ldr	r0, [r7, #0]
 800cc90:	f7fc f815 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cc94:	4603      	mov	r3, r0
 800cc96:	4619      	mov	r1, r3
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f7ff ffd9 	bl	800cc50 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800cc9e:	462b      	mov	r3, r5
      }
 800cca0:	4618      	mov	r0, r3
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bdb0      	pop	{r4, r5, r7, pc}

0800cca8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESK_EEDcOSF_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f7fc f804 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fb fac5 	bl	8008248 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800ccbe:	4603      	mov	r3, r0
	}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESH_SK_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800ccc8:	b5b0      	push	{r4, r5, r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 faa7 	bl	800d226 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800ccd8:	4604      	mov	r4, r0
 800ccda:	6838      	ldr	r0, [r7, #0]
 800ccdc:	f7fb ffef 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cce0:	4603      	mov	r3, r0
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7ff ffe0 	bl	800cca8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESK_EEDcOSF_>
 800cce8:	4601      	mov	r1, r0
 800ccea:	f107 030c 	add.w	r3, r7, #12
 800ccee:	461a      	mov	r2, r3
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f000 fadf 	bl	800d2b4 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRfSt17integral_constantIjLj2EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>
	      integral_constant<size_t, __indices>()...);
 800ccf6:	462b      	mov	r3, r5
      }
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bdb0      	pop	{r4, r5, r7, pc}

0800cd00 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESH_SK_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800cd00:	b5b0      	push	{r4, r5, r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 fa8b 	bl	800d226 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800cd10:	4604      	mov	r4, r0
 800cd12:	6838      	ldr	r0, [r7, #0]
 800cd14:	f7fb ffd3 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	f7ff ffd3 	bl	800ccc8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800cd22:	462b      	mov	r3, r5
      }
 800cd24:	4618      	mov	r0, r3
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bdb0      	pop	{r4, r5, r7, pc}

0800cd2c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESH_SK_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800cd2c:	b5b0      	push	{r4, r5, r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 fa75 	bl	800d226 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	6838      	ldr	r0, [r7, #0]
 800cd40:	f7fb ffbd 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cd44:	4603      	mov	r3, r0
 800cd46:	4619      	mov	r1, r3
 800cd48:	4620      	mov	r0, r4
 800cd4a:	f7ff ffd9 	bl	800cd00 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800cd4e:	462b      	mov	r3, r5
      }
 800cd50:	4618      	mov	r0, r3
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bdb0      	pop	{r4, r5, r7, pc}

0800cd58 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESK_EEDcOSF_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f7fb ffac 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cd66:	4603      	mov	r3, r0
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7fb fb1b 	bl	80083a4 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800cd6e:	4603      	mov	r3, r0
	}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3708      	adds	r7, #8
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESH_SK_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800cd78:	b5b0      	push	{r4, r5, r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 fa4f 	bl	800d226 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800cd88:	4604      	mov	r4, r0
 800cd8a:	6838      	ldr	r0, [r7, #0]
 800cd8c:	f7fb ff97 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cd90:	4603      	mov	r3, r0
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7ff ffe0 	bl	800cd58 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESK_EEDcOSF_>
 800cd98:	4601      	mov	r1, r0
 800cd9a:	f107 030c 	add.w	r3, r7, #12
 800cd9e:	461a      	mov	r2, r3
 800cda0:	4620      	mov	r0, r4
 800cda2:	f000 faa5 	bl	800d2f0 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRbSt17integral_constantIjLj3EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>
	      integral_constant<size_t, __indices>()...);
 800cda6:	462b      	mov	r3, r5
      }
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bdb0      	pop	{r4, r5, r7, pc}

0800cdb0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESH_SK_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800cdb0:	b5b0      	push	{r4, r5, r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 fa33 	bl	800d226 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	6838      	ldr	r0, [r7, #0]
 800cdc4:	f7fb ff7b 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	4619      	mov	r1, r3
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f7ff ffd3 	bl	800cd78 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800cdd2:	462b      	mov	r3, r5
      }
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bdb0      	pop	{r4, r5, r7, pc}

0800cddc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESH_SK_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800cddc:	b5b0      	push	{r4, r5, r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 fa1d 	bl	800d226 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800cdec:	4604      	mov	r4, r0
 800cdee:	6838      	ldr	r0, [r7, #0]
 800cdf0:	f7fb ff65 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f7ff ffd9 	bl	800cdb0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800cdfe:	462b      	mov	r3, r5
      }
 800ce00:	4618      	mov	r0, r3
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bdb0      	pop	{r4, r5, r7, pc}

0800ce08 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_RSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSL_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	4413      	add	r3, r2
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f000 fa86 	bl	800d32c <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_RSt7variantIJS9_ifbEEEJEE9_M_accessEv>
 800ce20:	4603      	mov	r3, r0
	}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
	...

0800ce2c <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>:
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 800ce2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 800ce36:	4b0f      	ldr	r3, [pc, #60]	; (800ce74 <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_+0x48>)
 800ce38:	60fb      	str	r3, [r7, #12]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 800ce3a:	6838      	ldr	r0, [r7, #0]
 800ce3c:	f7fb f806 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800ce40:	4603      	mov	r3, r0
 800ce42:	4619      	mov	r1, r3
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f7ff ffdf 	bl	800ce08 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_RSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSL_jDpT_>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 800ce50:	68bc      	ldr	r4, [r7, #8]
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 fa75 	bl	800d342 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800ce58:	4605      	mov	r5, r0
 800ce5a:	6838      	ldr	r0, [r7, #0]
 800ce5c:	f7fb ff2f 	bl	8008cbe <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800ce60:	4603      	mov	r3, r0
 800ce62:	4619      	mov	r1, r3
 800ce64:	4628      	mov	r0, r5
 800ce66:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 800ce68:	4633      	mov	r3, r6
    }
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3714      	adds	r7, #20
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce72:	bf00      	nop
 800ce74:	0801a464 	.word	0x0801a464

0800ce78 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_>:
      operator=(_Move_assign_base&& __rhs)
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	60fb      	str	r3, [r7, #12]
 800ce86:	6838      	ldr	r0, [r7, #0]
 800ce88:	f7ff fe53 	bl	800cb32 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	f107 030c 	add.w	r3, r7, #12
 800ce92:	4611      	mov	r1, r2
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7ff ffc9 	bl	800ce2c <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>
	return *this;
 800ce9a:	687b      	ldr	r3, [r7, #4]
      }
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIiEEvtRKT_>:
        void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	460b      	mov	r3, r1
 800ceae:	607a      	str	r2, [r7, #4]
 800ceb0:	817b      	strh	r3, [r7, #10]
	  this->_M_reset();
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7fa fb38 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	  __variant_construct_single(*this, __rhs);
 800ceba:	6879      	ldr	r1, [r7, #4]
 800cebc:	68f8      	ldr	r0, [r7, #12]
 800cebe:	f000 fa4b 	bl	800d358 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKiEEvOT_OT0_>
	  this->_M_index = __rhs_index;
 800cec2:	897b      	ldrh	r3, [r7, #10]
 800cec4:	b2da      	uxtb	r2, r3
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	761a      	strb	r2, [r3, #24]
	}
 800ceca:	bf00      	nop
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIfEEvtRKT_>:
        void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b084      	sub	sp, #16
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	60f8      	str	r0, [r7, #12]
 800ceda:	460b      	mov	r3, r1
 800cedc:	607a      	str	r2, [r7, #4]
 800cede:	817b      	strh	r3, [r7, #10]
	  this->_M_reset();
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fa fb21 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	  __variant_construct_single(*this, __rhs);
 800cee8:	6879      	ldr	r1, [r7, #4]
 800ceea:	68f8      	ldr	r0, [r7, #12]
 800ceec:	f000 fa4e 	bl	800d38c <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKfEEvOT_OT0_>
	  this->_M_index = __rhs_index;
 800cef0:	897b      	ldrh	r3, [r7, #10]
 800cef2:	b2da      	uxtb	r2, r3
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	761a      	strb	r2, [r3, #24]
	}
 800cef8:	bf00      	nop
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIbEEvtRKT_>:
        void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	460b      	mov	r3, r1
 800cf0a:	607a      	str	r2, [r7, #4]
 800cf0c:	817b      	strh	r3, [r7, #10]
	  this->_M_reset();
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fa fb0a 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	  __variant_construct_single(*this, __rhs);
 800cf16:	6879      	ldr	r1, [r7, #4]
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f000 fa51 	bl	800d3c0 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKbEEvOT_OT0_>
	  this->_M_index = __rhs_index;
 800cf1e:	897b      	ldrh	r3, [r7, #10]
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	761a      	strb	r2, [r3, #24]
	}
 800cf26:	bf00      	nop
 800cf28:	3710      	adds	r7, #16
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b084      	sub	sp, #16
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800cf36:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800cf3a:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 fa6e 	bl	800d41e <_ZNSt16allocator_traitsISaIP10ExpressionEE8max_sizeERKS2_>
 800cf42:	4603      	mov	r3, r0
 800cf44:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800cf46:	f107 0208 	add.w	r2, r7, #8
 800cf4a:	f107 030c 	add.w	r3, r7, #12
 800cf4e:	4611      	mov	r1, r2
 800cf50:	4618      	mov	r0, r3
 800cf52:	f000 fa50 	bl	800d3f6 <_ZSt3minIjERKT_S2_S2_>
 800cf56:	4603      	mov	r3, r0
 800cf58:	681b      	ldr	r3, [r3, #0]
      }
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <_ZNKSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800cf62:	b480      	push	{r7}
 800cf64:	b083      	sub	sp, #12
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800cf84:	68f8      	ldr	r0, [r7, #12]
 800cf86:	f000 fa56 	bl	800d436 <_ZNK9__gnu_cxx13new_allocatorIP10ExpressionE8max_sizeEv>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	bf8c      	ite	hi
 800cf92:	2301      	movhi	r3, #1
 800cf94:	2300      	movls	r3, #0
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d001      	beq.n	800cfa0 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800cf9c:	f009 fcac 	bl	80168f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f009 fbe2 	bl	801676e <_Znwj>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	bf00      	nop
      }
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3710      	adds	r7, #16
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <_ZSt12__relocate_aIPP10ExpressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800cfb6:	b5b0      	push	{r4, r5, r7, lr}
 800cfb8:	b084      	sub	sp, #16
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	60f8      	str	r0, [r7, #12]
 800cfbe:	60b9      	str	r1, [r7, #8]
 800cfc0:	607a      	str	r2, [r7, #4]
 800cfc2:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f000 fa42 	bl	800d44e <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 800cfca:	4604      	mov	r4, r0
 800cfcc:	68b8      	ldr	r0, [r7, #8]
 800cfce:	f000 fa3e 	bl	800d44e <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 800cfd2:	4605      	mov	r5, r0
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 fa3a 	bl	800d44e <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	4629      	mov	r1, r5
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f000 fa3f 	bl	800d464 <_ZSt14__relocate_a_1IP10ExpressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800cfe6:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3710      	adds	r7, #16
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bdb0      	pop	{r4, r5, r7, pc}

0800cff0 <_ZNSt6vectorIP4BodySaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800cff8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800cffc:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 fa4e 	bl	800d4a0 <_ZNSt16allocator_traitsISaIP4BodyEE8max_sizeERKS2_>
 800d004:	4603      	mov	r3, r0
 800d006:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800d008:	f107 0208 	add.w	r2, r7, #8
 800d00c:	f107 030c 	add.w	r3, r7, #12
 800d010:	4611      	mov	r1, r2
 800d012:	4618      	mov	r0, r3
 800d014:	f000 f9ef 	bl	800d3f6 <_ZSt3minIjERKT_S2_S2_>
 800d018:	4603      	mov	r3, r0
 800d01a:	681b      	ldr	r3, [r3, #0]
      }
 800d01c:	4618      	mov	r0, r3
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <_ZNKSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4618      	mov	r0, r3
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <_ZN9__gnu_cxx13new_allocatorIP4BodyE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b084      	sub	sp, #16
 800d03e:	af00      	add	r7, sp, #0
 800d040:	60f8      	str	r0, [r7, #12]
 800d042:	60b9      	str	r1, [r7, #8]
 800d044:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800d046:	68f8      	ldr	r0, [r7, #12]
 800d048:	f000 fa36 	bl	800d4b8 <_ZNK9__gnu_cxx13new_allocatorIP4BodyE8max_sizeEv>
 800d04c:	4602      	mov	r2, r0
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	4293      	cmp	r3, r2
 800d052:	bf8c      	ite	hi
 800d054:	2301      	movhi	r3, #1
 800d056:	2300      	movls	r3, #0
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d001      	beq.n	800d062 <_ZN9__gnu_cxx13new_allocatorIP4BodyE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800d05e:	f009 fc4b 	bl	80168f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	4618      	mov	r0, r3
 800d068:	f009 fb81 	bl	801676e <_Znwj>
 800d06c:	4603      	mov	r3, r0
 800d06e:	bf00      	nop
      }
 800d070:	4618      	mov	r0, r3
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <_ZSt12__relocate_aIPP4BodyS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800d078:	b5b0      	push	{r4, r5, r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
 800d084:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f000 fa22 	bl	800d4d0 <_ZSt12__niter_baseIPP4BodyET_S3_>
 800d08c:	4604      	mov	r4, r0
 800d08e:	68b8      	ldr	r0, [r7, #8]
 800d090:	f000 fa1e 	bl	800d4d0 <_ZSt12__niter_baseIPP4BodyET_S3_>
 800d094:	4605      	mov	r5, r0
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 fa1a 	bl	800d4d0 <_ZSt12__niter_baseIPP4BodyET_S3_>
 800d09c:	4602      	mov	r2, r0
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f000 fa1f 	bl	800d4e6 <_ZSt14__relocate_a_1IP4BodyS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800d0a8:	4603      	mov	r3, r0
    }
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bdb0      	pop	{r4, r5, r7, pc}

0800d0b2 <_ZNSt6vectorIP9StatementSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800d0b2:	b580      	push	{r7, lr}
 800d0b4:	b084      	sub	sp, #16
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800d0ba:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d0be:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 fa2e 	bl	800d522 <_ZNSt16allocator_traitsISaIP9StatementEE8max_sizeERKS2_>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800d0ca:	f107 0208 	add.w	r2, r7, #8
 800d0ce:	f107 030c 	add.w	r3, r7, #12
 800d0d2:	4611      	mov	r1, r2
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f000 f98e 	bl	800d3f6 <_ZSt3minIjERKT_S2_S2_>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	681b      	ldr	r3, [r3, #0]
      }
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <_ZNKSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d0e6:	b480      	push	{r7}
 800d0e8:	b083      	sub	sp, #12
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <_ZN9__gnu_cxx13new_allocatorIP9StatementE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f000 fa16 	bl	800d53a <_ZNK9__gnu_cxx13new_allocatorIP9StatementE8max_sizeEv>
 800d10e:	4602      	mov	r2, r0
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	4293      	cmp	r3, r2
 800d114:	bf8c      	ite	hi
 800d116:	2301      	movhi	r3, #1
 800d118:	2300      	movls	r3, #0
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d001      	beq.n	800d124 <_ZN9__gnu_cxx13new_allocatorIP9StatementE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800d120:	f009 fbea 	bl	80168f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	4618      	mov	r0, r3
 800d12a:	f009 fb20 	bl	801676e <_Znwj>
 800d12e:	4603      	mov	r3, r0
 800d130:	bf00      	nop
      }
 800d132:	4618      	mov	r0, r3
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <_ZSt12__relocate_aIPP9StatementS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800d13a:	b5b0      	push	{r4, r5, r7, lr}
 800d13c:	b084      	sub	sp, #16
 800d13e:	af00      	add	r7, sp, #0
 800d140:	60f8      	str	r0, [r7, #12]
 800d142:	60b9      	str	r1, [r7, #8]
 800d144:	607a      	str	r2, [r7, #4]
 800d146:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	f000 fa02 	bl	800d552 <_ZSt12__niter_baseIPP9StatementET_S3_>
 800d14e:	4604      	mov	r4, r0
 800d150:	68b8      	ldr	r0, [r7, #8]
 800d152:	f000 f9fe 	bl	800d552 <_ZSt12__niter_baseIPP9StatementET_S3_>
 800d156:	4605      	mov	r5, r0
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 f9fa 	bl	800d552 <_ZSt12__niter_baseIPP9StatementET_S3_>
 800d15e:	4602      	mov	r2, r0
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	4629      	mov	r1, r5
 800d164:	4620      	mov	r0, r4
 800d166:	f000 f9ff 	bl	800d568 <_ZSt14__relocate_a_1IP9StatementS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800d16a:	4603      	mov	r3, r0
    }
 800d16c:	4618      	mov	r0, r3
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bdb0      	pop	{r4, r5, r7, pc}

0800d174 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800d174:	b590      	push	{r4, r7, lr}
 800d176:	b085      	sub	sp, #20
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	7239      	strb	r1, [r7, #8]
 800d17e:	607a      	str	r2, [r7, #4]
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	4621      	mov	r1, r4
 800d186:	4618      	mov	r0, r3
 800d188:	f000 fa3e 	bl	800d608 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	4618      	mov	r0, r3
 800d190:	3714      	adds	r7, #20
 800d192:	46bd      	mov	sp, r7
 800d194:	bd90      	pop	{r4, r7, pc}

0800d196 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800d196:	b590      	push	{r4, r7, lr}
 800d198:	b085      	sub	sp, #20
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	60f8      	str	r0, [r7, #12]
 800d19e:	7239      	strb	r1, [r7, #8]
 800d1a0:	607a      	str	r2, [r7, #4]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	4621      	mov	r1, r4
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7ff ffe3 	bl	800d174 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3714      	adds	r7, #20
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd90      	pop	{r4, r7, pc}

0800d1b8 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800d1b8:	b590      	push	{r4, r7, lr}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	7239      	strb	r1, [r7, #8]
 800d1c2:	607a      	str	r2, [r7, #4]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	4621      	mov	r1, r4
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7ff ffe3 	bl	800d196 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3714      	adds	r7, #20
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd90      	pop	{r4, r7, pc}

0800d1da <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800d1da:	b590      	push	{r4, r7, lr}
 800d1dc:	b085      	sub	sp, #20
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	60f8      	str	r0, [r7, #12]
 800d1e2:	7239      	strb	r1, [r7, #8]
 800d1e4:	607a      	str	r2, [r7, #4]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	4621      	mov	r1, r4
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7ff ffe3 	bl	800d1b8 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd90      	pop	{r4, r7, pc}

0800d1fc <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 800d1fc:	b5b0      	push	{r4, r5, r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	7239      	strb	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
	: _Base(__i, std::forward<_Args>(__args)...)
 800d208:	68fc      	ldr	r4, [r7, #12]
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7fb fe61 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800d210:	4603      	mov	r3, r0
 800d212:	461a      	mov	r2, r3
 800d214:	4629      	mov	r1, r5
 800d216:	4620      	mov	r0, r4
 800d218:	f7ff ffdf 	bl	800d1da <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	4618      	mov	r0, r3
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bdb0      	pop	{r4, r5, r7, pc}

0800d226 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d226:	b480      	push	{r7}
 800d228:	b083      	sub	sp, #12
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4618      	mov	r0, r3
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRS8_St17integral_constantIjLj0EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800d23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d240:	b084      	sub	sp, #16
 800d242:	af00      	add	r7, sp, #0
 800d244:	60f8      	str	r0, [r7, #12]
 800d246:	60b9      	str	r1, [r7, #8]
 800d248:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f000 f879 	bl	800d342 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d250:	4604      	mov	r4, r0
 800d252:	68b8      	ldr	r0, [r7, #8]
 800d254:	f7f7 fff0 	bl	8005238 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800d258:	4605      	mov	r5, r0
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f7fe fe0f 	bl	800be7e <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d260:	4603      	mov	r3, r0
 800d262:	462a      	mov	r2, r5
 800d264:	4621      	mov	r1, r4
 800d266:	4630      	mov	r0, r6
 800d268:	f000 f9e6 	bl	800d638 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRS9_St17integral_constantIjLj0EEEESC_St14__invoke_otherOSE_DpOT1_>
					std::forward<_Args>(__args)...);
 800d26c:	4643      	mov	r3, r8
    }
 800d26e:	4618      	mov	r0, r3
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d278 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRiSt17integral_constantIjLj1EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800d278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d27c:	b084      	sub	sp, #16
 800d27e:	af00      	add	r7, sp, #0
 800d280:	60f8      	str	r0, [r7, #12]
 800d282:	60b9      	str	r1, [r7, #8]
 800d284:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f000 f85b 	bl	800d342 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d28c:	4604      	mov	r4, r0
 800d28e:	68b8      	ldr	r0, [r7, #8]
 800d290:	f7f7 ff82 	bl	8005198 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800d294:	4605      	mov	r5, r0
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7fe fe1a 	bl	800bed0 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d29c:	4603      	mov	r3, r0
 800d29e:	462a      	mov	r2, r5
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	f000 f9e6 	bl	800d674 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRiSt17integral_constantIjLj1EEEESC_St14__invoke_otherOSE_DpOT1_>
					std::forward<_Args>(__args)...);
 800d2a8:	4643      	mov	r3, r8
    }
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d2b4 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRfSt17integral_constantIjLj2EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800d2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b8:	b084      	sub	sp, #16
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	60f8      	str	r0, [r7, #12]
 800d2be:	60b9      	str	r1, [r7, #8]
 800d2c0:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f000 f83d 	bl	800d342 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	68b8      	ldr	r0, [r7, #8]
 800d2cc:	f7f7 ff86 	bl	80051dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 800d2d0:	4605      	mov	r5, r0
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7fe fe25 	bl	800bf22 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	462a      	mov	r2, r5
 800d2dc:	4621      	mov	r1, r4
 800d2de:	4630      	mov	r0, r6
 800d2e0:	f000 f9e6 	bl	800d6b0 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRfSt17integral_constantIjLj2EEEESC_St14__invoke_otherOSE_DpOT1_>
					std::forward<_Args>(__args)...);
 800d2e4:	4643      	mov	r3, r8
    }
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3710      	adds	r7, #16
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d2f0 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRbSt17integral_constantIjLj3EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800d2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f4:	b084      	sub	sp, #16
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	60f8      	str	r0, [r7, #12]
 800d2fa:	60b9      	str	r1, [r7, #8]
 800d2fc:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	f000 f81f 	bl	800d342 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d304:	4604      	mov	r4, r0
 800d306:	68b8      	ldr	r0, [r7, #8]
 800d308:	f7f7 ff24 	bl	8005154 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800d30c:	4605      	mov	r5, r0
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f7fe fe30 	bl	800bf74 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d314:	4603      	mov	r3, r0
 800d316:	462a      	mov	r2, r5
 800d318:	4621      	mov	r1, r4
 800d31a:	4630      	mov	r0, r6
 800d31c:	f000 f9e6 	bl	800d6ec <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRbSt17integral_constantIjLj3EEEESC_St14__invoke_otherOSE_DpOT1_>
					std::forward<_Args>(__args)...);
 800d320:	4643      	mov	r3, r8
    }
 800d322:	4618      	mov	r0, r3
 800d324:	3710      	adds	r7, #16
 800d326:	46bd      	mov	sp, r7
 800d328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d32c <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_RSt7variantIJS9_ifbEEEJEE9_M_accessEv>:
      _M_access() const
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4618      	mov	r0, r3
 800d338:	370c      	adds	r7, #12
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr

0800d342 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d342:	b480      	push	{r7}
 800d344:	b083      	sub	sp, #12
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4618      	mov	r0, r3
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKiEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 800d358:	b590      	push	{r4, r7, lr}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	4618      	mov	r0, r3
 800d366:	f7fb ff5d 	bl	8009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 800d36a:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 800d36c:	6838      	ldr	r0, [r7, #0]
 800d36e:	f7fb fdd2 	bl	8008f16 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800d372:	4603      	mov	r3, r0
        ::new (__storage)
 800d374:	681c      	ldr	r4, [r3, #0]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	4619      	mov	r1, r3
 800d37a:	2004      	movs	r0, #4
 800d37c:	f7f3 fe2e 	bl	8000fdc <_ZnwjPv>
 800d380:	4603      	mov	r3, r0
 800d382:	601c      	str	r4, [r3, #0]
    }
 800d384:	bf00      	nop
 800d386:	3714      	adds	r7, #20
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd90      	pop	{r4, r7, pc}

0800d38c <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKfEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 800d38c:	b590      	push	{r4, r7, lr}
 800d38e:	b085      	sub	sp, #20
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fb ff43 	bl	8009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 800d39e:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 800d3a0:	6838      	ldr	r0, [r7, #0]
 800d3a2:	f7fb fdda 	bl	8008f5a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800d3a6:	4603      	mov	r3, r0
        ::new (__storage)
 800d3a8:	681c      	ldr	r4, [r3, #0]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	2004      	movs	r0, #4
 800d3b0:	f7f3 fe14 	bl	8000fdc <_ZnwjPv>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	601c      	str	r4, [r3, #0]
    }
 800d3b8:	bf00      	nop
 800d3ba:	3714      	adds	r7, #20
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd90      	pop	{r4, r7, pc}

0800d3c0 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKbEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 800d3c0:	b590      	push	{r4, r7, lr}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7fb ff29 	bl	8009224 <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 800d3d2:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 800d3d4:	6838      	ldr	r0, [r7, #0]
 800d3d6:	f7fb fde2 	bl	8008f9e <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 800d3da:	4603      	mov	r3, r0
        ::new (__storage)
 800d3dc:	781c      	ldrb	r4, [r3, #0]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	2001      	movs	r0, #1
 800d3e4:	f7f3 fdfa 	bl	8000fdc <_ZnwjPv>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	4622      	mov	r2, r4
 800d3ec:	701a      	strb	r2, [r3, #0]
    }
 800d3ee:	bf00      	nop
 800d3f0:	3714      	adds	r7, #20
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd90      	pop	{r4, r7, pc}

0800d3f6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800d3f6:	b480      	push	{r7}
 800d3f8:	b083      	sub	sp, #12
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
 800d3fe:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d201      	bcs.n	800d410 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	e000      	b.n	800d412 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800d410:	687b      	ldr	r3, [r7, #4]
    }
 800d412:	4618      	mov	r0, r3
 800d414:	370c      	adds	r7, #12
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr

0800d41e <_ZNSt16allocator_traitsISaIP10ExpressionEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800d41e:	b580      	push	{r7, lr}
 800d420:	b082      	sub	sp, #8
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 f805 	bl	800d436 <_ZNK9__gnu_cxx13new_allocatorIP10ExpressionE8max_sizeEv>
 800d42c:	4603      	mov	r3, r0
 800d42e:	4618      	mov	r0, r3
 800d430:	3708      	adds	r7, #8
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <_ZNK9__gnu_cxx13new_allocatorIP10ExpressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d436:	b480      	push	{r7}
 800d438:	b083      	sub	sp, #12
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d43e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800d442:	4618      	mov	r0, r3
 800d444:	370c      	adds	r7, #12
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr

0800d44e <_ZSt12__niter_baseIPP10ExpressionET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 800d44e:	b480      	push	{r7}
 800d450:	b083      	sub	sp, #12
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4618      	mov	r0, r3
 800d45a:	370c      	adds	r7, #12
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr

0800d464 <_ZSt14__relocate_a_1IP10ExpressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800d464:	b580      	push	{r7, lr}
 800d466:	b086      	sub	sp, #24
 800d468:	af00      	add	r7, sp, #0
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	607a      	str	r2, [r7, #4]
 800d470:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800d472:	68ba      	ldr	r2, [r7, #8]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	109b      	asrs	r3, r3, #2
 800d47a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	dd06      	ble.n	800d490 <_ZSt14__relocate_a_1IP10ExpressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	009b      	lsls	r3, r3, #2
 800d486:	461a      	mov	r2, r3
 800d488:	68f9      	ldr	r1, [r7, #12]
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f009 fd1c 	bl	8016ec8 <memmove>
      return __result + __count;
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	4413      	add	r3, r2
    }
 800d498:	4618      	mov	r0, r3
 800d49a:	3718      	adds	r7, #24
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <_ZNSt16allocator_traitsISaIP4BodyEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 f805 	bl	800d4b8 <_ZNK9__gnu_cxx13new_allocatorIP4BodyE8max_sizeEv>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <_ZNK9__gnu_cxx13new_allocatorIP4BodyE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d4c0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <_ZSt12__niter_baseIPP4BodyET_S3_>:
    __niter_base(_Iterator __it)
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4618      	mov	r0, r3
 800d4dc:	370c      	adds	r7, #12
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr

0800d4e6 <_ZSt14__relocate_a_1IP4BodyS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b086      	sub	sp, #24
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	60f8      	str	r0, [r7, #12]
 800d4ee:	60b9      	str	r1, [r7, #8]
 800d4f0:	607a      	str	r2, [r7, #4]
 800d4f2:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800d4f4:	68ba      	ldr	r2, [r7, #8]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	1ad3      	subs	r3, r2, r3
 800d4fa:	109b      	asrs	r3, r3, #2
 800d4fc:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	2b00      	cmp	r3, #0
 800d502:	dd06      	ble.n	800d512 <_ZSt14__relocate_a_1IP4BodyS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	461a      	mov	r2, r3
 800d50a:	68f9      	ldr	r1, [r7, #12]
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f009 fcdb 	bl	8016ec8 <memmove>
      return __result + __count;
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	4413      	add	r3, r2
    }
 800d51a:	4618      	mov	r0, r3
 800d51c:	3718      	adds	r7, #24
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <_ZNSt16allocator_traitsISaIP9StatementEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800d522:	b580      	push	{r7, lr}
 800d524:	b082      	sub	sp, #8
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 f805 	bl	800d53a <_ZNK9__gnu_cxx13new_allocatorIP9StatementE8max_sizeEv>
 800d530:	4603      	mov	r3, r0
 800d532:	4618      	mov	r0, r3
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <_ZNK9__gnu_cxx13new_allocatorIP9StatementE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d53a:	b480      	push	{r7}
 800d53c:	b083      	sub	sp, #12
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d542:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800d546:	4618      	mov	r0, r3
 800d548:	370c      	adds	r7, #12
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <_ZSt12__niter_baseIPP9StatementET_S3_>:
    __niter_base(_Iterator __it)
 800d552:	b480      	push	{r7}
 800d554:	b083      	sub	sp, #12
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4618      	mov	r0, r3
 800d55e:	370c      	adds	r7, #12
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr

0800d568 <_ZSt14__relocate_a_1IP9StatementS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800d568:	b580      	push	{r7, lr}
 800d56a:	b086      	sub	sp, #24
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	60b9      	str	r1, [r7, #8]
 800d572:	607a      	str	r2, [r7, #4]
 800d574:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800d576:	68ba      	ldr	r2, [r7, #8]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	1ad3      	subs	r3, r2, r3
 800d57c:	109b      	asrs	r3, r3, #2
 800d57e:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	2b00      	cmp	r3, #0
 800d584:	dd06      	ble.n	800d594 <_ZSt14__relocate_a_1IP9StatementS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	461a      	mov	r2, r3
 800d58c:	68f9      	ldr	r1, [r7, #12]
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f009 fc9a 	bl	8016ec8 <memmove>
      return __result + __count;
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	4413      	add	r3, r2
    }
 800d59c:	4618      	mov	r0, r3
 800d59e:	3718      	adds	r7, #24
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJRKS7_EEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 800d5a4:	b590      	push	{r4, r7, lr}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	7239      	strb	r1, [r7, #8]
 800d5ae:	607a      	str	r2, [r7, #4]
	    _Type(std::forward<_Args>(__args)...);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7fb fc8e 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800d5b6:	4604      	mov	r4, r0
	  ::new ((void*)std::addressof(_M_storage))
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7fa fcf6 	bl	8007fac <_ZSt9addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	2018      	movs	r0, #24
 800d5c6:	f7f3 fd09 	bl	8000fdc <_ZnwjPv>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f009 fbd2 	bl	8016d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	}
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3714      	adds	r7, #20
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd90      	pop	{r4, r7, pc}

0800d5de <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJRKS7_EEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 800d5de:	b5b0      	push	{r4, r5, r7, lr}
 800d5e0:	b084      	sub	sp, #16
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	60f8      	str	r0, [r7, #12]
 800d5e6:	7239      	strb	r1, [r7, #8]
 800d5e8:	607a      	str	r2, [r7, #4]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 800d5ea:	68fc      	ldr	r4, [r7, #12]
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f7fb fc70 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	4629      	mov	r1, r5
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f7ff ffd3 	bl	800d5a4 <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJRKS7_EEESt16in_place_index_tILj0EEDpOT_>
	{ }
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	4618      	mov	r0, r3
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bdb0      	pop	{r4, r5, r7, pc}

0800d608 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 800d608:	b5b0      	push	{r4, r5, r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	7239      	strb	r1, [r7, #8]
 800d612:	607a      	str	r2, [r7, #4]
	_M_index(_Np)
 800d614:	68fc      	ldr	r4, [r7, #12]
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7fb fc5b 	bl	8008ed2 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800d61c:	4603      	mov	r3, r0
 800d61e:	461a      	mov	r2, r3
 800d620:	4629      	mov	r1, r5
 800d622:	4620      	mov	r0, r4
 800d624:	f7ff ffdb 	bl	800d5de <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJRKS7_EEESt16in_place_index_tILj0EEDpOT_>
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2200      	movs	r2, #0
 800d62c:	761a      	strb	r2, [r3, #24]
	{ }
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	4618      	mov	r0, r3
 800d632:	3710      	adds	r7, #16
 800d634:	46bd      	mov	sp, r7
 800d636:	bdb0      	pop	{r4, r5, r7, pc}

0800d638 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRS9_St17integral_constantIjLj0EEEESC_St14__invoke_otherOSE_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800d638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d63c:	b084      	sub	sp, #16
 800d63e:	af00      	add	r7, sp, #0
 800d640:	7338      	strb	r0, [r7, #12]
 800d642:	60b9      	str	r1, [r7, #8]
 800d644:	607a      	str	r2, [r7, #4]
 800d646:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800d648:	68b8      	ldr	r0, [r7, #8]
 800d64a:	f7ff fe7a 	bl	800d342 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d64e:	4604      	mov	r4, r0
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7f7 fdf1 	bl	8005238 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800d656:	4605      	mov	r5, r0
 800d658:	6838      	ldr	r0, [r7, #0]
 800d65a:	f7fe fc10 	bl	800be7e <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d65e:	4632      	mov	r2, r6
 800d660:	4629      	mov	r1, r5
 800d662:	4620      	mov	r0, r4
 800d664:	f000 f860 	bl	800d728 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESB_SC_>
 800d668:	4643      	mov	r3, r8
 800d66a:	4618      	mov	r0, r3
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d674 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRiSt17integral_constantIjLj1EEEESC_St14__invoke_otherOSE_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800d674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d678:	b084      	sub	sp, #16
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	7338      	strb	r0, [r7, #12]
 800d67e:	60b9      	str	r1, [r7, #8]
 800d680:	607a      	str	r2, [r7, #4]
 800d682:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800d684:	68b8      	ldr	r0, [r7, #8]
 800d686:	f7ff fe5c 	bl	800d342 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d68a:	4604      	mov	r4, r0
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7f7 fd83 	bl	8005198 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800d692:	4605      	mov	r5, r0
 800d694:	6838      	ldr	r0, [r7, #0]
 800d696:	f7fe fc1b 	bl	800bed0 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d69a:	4632      	mov	r2, r6
 800d69c:	4629      	mov	r1, r5
 800d69e:	4620      	mov	r0, r4
 800d6a0:	f000 f88b 	bl	800d7ba <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESB_SC_>
 800d6a4:	4643      	mov	r3, r8
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3710      	adds	r7, #16
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d6b0 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRfSt17integral_constantIjLj2EEEESC_St14__invoke_otherOSE_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800d6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b4:	b084      	sub	sp, #16
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	7338      	strb	r0, [r7, #12]
 800d6ba:	60b9      	str	r1, [r7, #8]
 800d6bc:	607a      	str	r2, [r7, #4]
 800d6be:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800d6c0:	68b8      	ldr	r0, [r7, #8]
 800d6c2:	f7ff fe3e 	bl	800d342 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f7f7 fd87 	bl	80051dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 800d6ce:	4605      	mov	r5, r0
 800d6d0:	6838      	ldr	r0, [r7, #0]
 800d6d2:	f7fe fc26 	bl	800bf22 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d6d6:	4632      	mov	r2, r6
 800d6d8:	4629      	mov	r1, r5
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f000 f8b4 	bl	800d848 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESB_SC_>
 800d6e0:	4643      	mov	r3, r8
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3710      	adds	r7, #16
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d6ec <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRbSt17integral_constantIjLj3EEEESC_St14__invoke_otherOSE_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800d6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f0:	b084      	sub	sp, #16
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	7338      	strb	r0, [r7, #12]
 800d6f6:	60b9      	str	r1, [r7, #8]
 800d6f8:	607a      	str	r2, [r7, #4]
 800d6fa:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800d6fc:	68b8      	ldr	r0, [r7, #8]
 800d6fe:	f7ff fe20 	bl	800d342 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d702:	4604      	mov	r4, r0
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f7f7 fd25 	bl	8005154 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800d70a:	4605      	mov	r5, r0
 800d70c:	6838      	ldr	r0, [r7, #0]
 800d70e:	f7fe fc31 	bl	800bf74 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d712:	4632      	mov	r2, r6
 800d714:	4629      	mov	r1, r5
 800d716:	4620      	mov	r0, r4
 800d718:	f000 f8dd 	bl	800d8d6 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESB_SC_>
 800d71c:	4643      	mov	r3, r8
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d728 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESB_SC_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d728:	b5b0      	push	{r4, r5, r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	713a      	strb	r2, [r7, #4]
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800d738:	7e1b      	ldrb	r3, [r3, #24]
 800d73a:	461c      	mov	r4, r3
 800d73c:	1d3b      	adds	r3, r7, #4
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fe ff90 	bl	800c664 <_ZNKSt17integral_constantIjLj0EEcvjEv>
 800d744:	4603      	mov	r3, r0
 800d746:	429c      	cmp	r4, r3
 800d748:	bf0c      	ite	eq
 800d74a:	2301      	moveq	r3, #1
 800d74c:	2300      	movne	r3, #0
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00e      	beq.n	800d772 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESB_SC_+0x4a>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800d754:	68b8      	ldr	r0, [r7, #8]
 800d756:	f7fd fca5 	bl	800b0a4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800d75a:	4604      	mov	r4, r0
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800d760:	4618      	mov	r0, r3
 800d762:	f000 f819 	bl	800d798 <_ZNSt8__detail9__variant5__getILj0ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800d766:	4603      	mov	r3, r0
 800d768:	4621      	mov	r1, r4
 800d76a:	4618      	mov	r0, r3
 800d76c:	f009 f9e3 	bl	8016b36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
	    return {};
 800d770:	e00d      	b.n	800d78e <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESB_SC_+0x66>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
		  __variant_cast<_Types...>(*this)
 800d776:	4618      	mov	r0, r3
 800d778:	f7ff f9db 	bl	800cb32 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800d77c:	4604      	mov	r4, r0
		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 800d77e:	68b8      	ldr	r0, [r7, #8]
 800d780:	f7fd fc90 	bl	800b0a4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800d784:	4603      	mov	r3, r0
		  __variant_cast<_Types...>(*this)
 800d786:	4619      	mov	r1, r3
 800d788:	4620      	mov	r0, r4
 800d78a:	f000 f8f7 	bl	800d97c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj0EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>
	    return {};
 800d78e:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d790:	4618      	mov	r0, r3
 800d792:	3710      	adds	r7, #16
 800d794:	46bd      	mov	sp, r7
 800d796:	bdb0      	pop	{r4, r5, r7, pc}

0800d798 <_ZNSt8__detail9__variant5__getILj0ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800d798:	b590      	push	{r4, r7, lr}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 f8e0 	bl	800d966 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800d7a6:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	f7fa fc15 	bl	8007fda <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 800d7b0:	4603      	mov	r3, r0
    }
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	370c      	adds	r7, #12
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd90      	pop	{r4, r7, pc}

0800d7ba <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESB_SC_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d7ba:	b5b0      	push	{r4, r5, r7, lr}
 800d7bc:	b084      	sub	sp, #16
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	60f8      	str	r0, [r7, #12]
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	713a      	strb	r2, [r7, #4]
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800d7ca:	7e1b      	ldrb	r3, [r3, #24]
 800d7cc:	461c      	mov	r4, r3
 800d7ce:	1d3b      	adds	r3, r7, #4
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7fe ffc1 	bl	800c758 <_ZNKSt17integral_constantIjLj1EEcvjEv>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	429c      	cmp	r4, r3
 800d7da:	bf0c      	ite	eq
 800d7dc:	2301      	moveq	r3, #1
 800d7de:	2300      	movne	r3, #0
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00c      	beq.n	800d800 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESB_SC_+0x46>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800d7e6:	68b8      	ldr	r0, [r7, #8]
 800d7e8:	f000 f8e1 	bl	800d9ae <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	681c      	ldr	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f000 f816 	bl	800d826 <_ZNSt8__detail9__variant5__getILj1ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	601c      	str	r4, [r3, #0]
	    return {};
 800d7fe:	e00d      	b.n	800d81c <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESB_SC_+0x62>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
		  __variant_cast<_Types...>(*this)
 800d804:	4618      	mov	r0, r3
 800d806:	f7ff f994 	bl	800cb32 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800d80a:	4604      	mov	r4, r0
		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 800d80c:	68b8      	ldr	r0, [r7, #8]
 800d80e:	f000 f8ce 	bl	800d9ae <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 800d812:	4603      	mov	r3, r0
		  __variant_cast<_Types...>(*this)
 800d814:	4619      	mov	r1, r3
 800d816:	4620      	mov	r0, r4
 800d818:	f000 f8d4 	bl	800d9c4 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj1EJiEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>
	    return {};
 800d81c:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d81e:	4618      	mov	r0, r3
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bdb0      	pop	{r4, r5, r7, pc}

0800d826 <_ZNSt8__detail9__variant5__getILj1ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800d826:	b590      	push	{r4, r7, lr}
 800d828:	b083      	sub	sp, #12
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 f899 	bl	800d966 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800d834:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800d836:	4619      	mov	r1, r3
 800d838:	4620      	mov	r0, r4
 800d83a:	f7fa fc57 	bl	80080ec <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800d83e:	4603      	mov	r3, r0
    }
 800d840:	4618      	mov	r0, r3
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	bd90      	pop	{r4, r7, pc}

0800d848 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESB_SC_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d848:	b5b0      	push	{r4, r5, r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	713a      	strb	r2, [r7, #4]
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800d858:	7e1b      	ldrb	r3, [r3, #24]
 800d85a:	461c      	mov	r4, r3
 800d85c:	1d3b      	adds	r3, r7, #4
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fe ffc9 	bl	800c7f6 <_ZNKSt17integral_constantIjLj2EEcvjEv>
 800d864:	4603      	mov	r3, r0
 800d866:	429c      	cmp	r4, r3
 800d868:	bf0c      	ite	eq
 800d86a:	2301      	moveq	r3, #1
 800d86c:	2300      	movne	r3, #0
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	2b00      	cmp	r3, #0
 800d872:	d00c      	beq.n	800d88e <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESB_SC_+0x46>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800d874:	68b8      	ldr	r0, [r7, #8]
 800d876:	f000 f8be 	bl	800d9f6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d87a:	4603      	mov	r3, r0
 800d87c:	681c      	ldr	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800d882:	4618      	mov	r0, r3
 800d884:	f000 f816 	bl	800d8b4 <_ZNSt8__detail9__variant5__getILj2ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800d888:	4603      	mov	r3, r0
 800d88a:	601c      	str	r4, [r3, #0]
	    return {};
 800d88c:	e00d      	b.n	800d8aa <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESB_SC_+0x62>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
		  __variant_cast<_Types...>(*this)
 800d892:	4618      	mov	r0, r3
 800d894:	f7ff f94d 	bl	800cb32 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800d898:	4604      	mov	r4, r0
		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 800d89a:	68b8      	ldr	r0, [r7, #8]
 800d89c:	f000 f8ab 	bl	800d9f6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d8a0:	4603      	mov	r3, r0
		  __variant_cast<_Types...>(*this)
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f000 f8b1 	bl	800da0c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj2EJfEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>
	    return {};
 800d8aa:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3710      	adds	r7, #16
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bdb0      	pop	{r4, r5, r7, pc}

0800d8b4 <_ZNSt8__detail9__variant5__getILj2ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800d8b4:	b590      	push	{r4, r7, lr}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 f852 	bl	800d966 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800d8c2:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	f7fa fcac 	bl	8008224 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800d8cc:	4603      	mov	r3, r0
    }
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	370c      	adds	r7, #12
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd90      	pop	{r4, r7, pc}

0800d8d6 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESB_SC_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d8d6:	b5b0      	push	{r4, r5, r7, lr}
 800d8d8:	b084      	sub	sp, #16
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	60f8      	str	r0, [r7, #12]
 800d8de:	60b9      	str	r1, [r7, #8]
 800d8e0:	713a      	strb	r2, [r7, #4]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800d8e6:	7e1b      	ldrb	r3, [r3, #24]
 800d8e8:	461c      	mov	r4, r3
 800d8ea:	1d3b      	adds	r3, r7, #4
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7fe ffd2 	bl	800c896 <_ZNKSt17integral_constantIjLj3EEcvjEv>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	429c      	cmp	r4, r3
 800d8f6:	bf0c      	ite	eq
 800d8f8:	2301      	moveq	r3, #1
 800d8fa:	2300      	movne	r3, #0
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d00d      	beq.n	800d91e <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESB_SC_+0x48>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800d902:	68b8      	ldr	r0, [r7, #8]
 800d904:	f000 f89b 	bl	800da3e <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800d908:	4603      	mov	r3, r0
 800d90a:	781c      	ldrb	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800d910:	4618      	mov	r0, r3
 800d912:	f000 f817 	bl	800d944 <_ZNSt8__detail9__variant5__getILj3ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800d916:	4603      	mov	r3, r0
 800d918:	4622      	mov	r2, r4
 800d91a:	701a      	strb	r2, [r3, #0]
	    return {};
 800d91c:	e00d      	b.n	800d93a <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESB_SC_+0x64>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
		  __variant_cast<_Types...>(*this)
 800d922:	4618      	mov	r0, r3
 800d924:	f7ff f905 	bl	800cb32 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800d928:	4604      	mov	r4, r0
		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 800d92a:	68b8      	ldr	r0, [r7, #8]
 800d92c:	f000 f887 	bl	800da3e <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800d930:	4603      	mov	r3, r0
		  __variant_cast<_Types...>(*this)
 800d932:	4619      	mov	r1, r3
 800d934:	4620      	mov	r0, r4
 800d936:	f000 f88d 	bl	800da54 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj3EJbEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>
	    return {};
 800d93a:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d93c:	4618      	mov	r0, r3
 800d93e:	3710      	adds	r7, #16
 800d940:	46bd      	mov	sp, r7
 800d942:	bdb0      	pop	{r4, r5, r7, pc}

0800d944 <_ZNSt8__detail9__variant5__getILj3ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800d944:	b590      	push	{r4, r7, lr}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 f80a 	bl	800d966 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800d952:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800d954:	4619      	mov	r1, r3
 800d956:	4620      	mov	r0, r4
 800d958:	f7fa fd12 	bl	8008380 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800d95c:	4603      	mov	r3, r0
    }
 800d95e:	4618      	mov	r0, r3
 800d960:	370c      	adds	r7, #12
 800d962:	46bd      	mov	sp, r7
 800d964:	bd90      	pop	{r4, r7, pc}

0800d966 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d966:	b480      	push	{r7}
 800d968:	b083      	sub	sp, #12
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	4618      	mov	r0, r3
 800d972:	370c      	adds	r7, #12
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj0EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>:
	emplace(_Args&&... __args)
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4618      	mov	r0, r3
 800d98a:	f7f9 fdce 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800d98e:	6838      	ldr	r0, [r7, #0]
 800d990:	f7f9 fcbe 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800d994:	4603      	mov	r3, r0
 800d996:	4619      	mov	r1, r3
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 f874 	bl	800da86 <_ZSt28__variant_construct_by_indexILj0ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJS6_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 f892 	bl	800dac8 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>
 800d9a4:	4603      	mov	r3, r0
	}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3708      	adds	r7, #8
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800d9ae:	b480      	push	{r7}
 800d9b0:	b083      	sub	sp, #12
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj1EJiEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>:
	emplace(_Args&&... __args)
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7f9 fdaa 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800d9d6:	6838      	ldr	r0, [r7, #0]
 800d9d8:	f7f9 fcd1 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	4619      	mov	r1, r3
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 f88d 	bl	800db00 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJiEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 f8aa 	bl	800db40 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>
 800d9ec:	4603      	mov	r3, r0
	}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3708      	adds	r7, #8
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800d9f6:	b480      	push	{r7}
 800d9f8:	b083      	sub	sp, #12
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	4618      	mov	r0, r3
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj2EJfEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>:
	emplace(_Args&&... __args)
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	4618      	mov	r0, r3
 800da1a:	f7f9 fd86 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800da1e:	6838      	ldr	r0, [r7, #0]
 800da20:	f7f9 fce4 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800da24:	4603      	mov	r3, r0
 800da26:	4619      	mov	r1, r3
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 f8a5 	bl	800db78 <_ZSt28__variant_construct_by_indexILj2ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJfEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 f8c2 	bl	800dbb8 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>
 800da34:	4603      	mov	r3, r0
	}
 800da36:	4618      	mov	r0, r3
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800da3e:	b480      	push	{r7}
 800da40:	b083      	sub	sp, #12
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	4618      	mov	r0, r3
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj3EJbEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>:
	emplace(_Args&&... __args)
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	4618      	mov	r0, r3
 800da62:	f7f9 fd62 	bl	800752a <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800da66:	6838      	ldr	r0, [r7, #0]
 800da68:	f000 f8c2 	bl	800dbf0 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800da6c:	4603      	mov	r3, r0
 800da6e:	4619      	mov	r1, r3
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 f8c8 	bl	800dc06 <_ZSt28__variant_construct_by_indexILj3ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJbEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 f8e6 	bl	800dc48 <_ZSt3getILj3EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>
 800da7c:	4603      	mov	r3, r0
	}
 800da7e:	4618      	mov	r0, r3
 800da80:	3708      	adds	r7, #8
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}

0800da86 <_ZSt28__variant_construct_by_indexILj0ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJS6_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800da86:	b590      	push	{r4, r7, lr}
 800da88:	b085      	sub	sp, #20
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	6078      	str	r0, [r7, #4]
 800da8e:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7fa fab0 	bl	8007ffc <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800da9c:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800da9e:	6838      	ldr	r0, [r7, #0]
 800daa0:	f7f9 fc36 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800daa4:	4604      	mov	r4, r0
      ::new ((void*)std::addressof(__storage))
 800daa6:	68f8      	ldr	r0, [r7, #12]
 800daa8:	f000 f8ea 	bl	800dc80 <_ZSt9addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800daac:	4603      	mov	r3, r0
 800daae:	4619      	mov	r1, r3
 800dab0:	2018      	movs	r0, #24
 800dab2:	f7f3 fa93 	bl	8000fdc <_ZnwjPv>
 800dab6:	4603      	mov	r3, r0
 800dab8:	4621      	mov	r1, r4
 800daba:	4618      	mov	r0, r3
 800dabc:	f009 f815 	bl	8016aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 800dac0:	bf00      	nop
 800dac2:	3714      	adds	r7, #20
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd90      	pop	{r4, r7, pc}

0800dac8 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>:
    get(variant<_Types...>& __v)
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7fa f9bb 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	bf14      	ite	ne
 800dadc:	2301      	movne	r3, #1
 800dade:	2300      	moveq	r3, #0
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d002      	beq.n	800daec <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800dae6:	4805      	ldr	r0, [pc, #20]	; (800dafc <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x34>)
 800dae8:	f7f3 fa84 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7fa fa85 	bl	8007ffc <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800daf2:	4603      	mov	r3, r0
    }
 800daf4:	4618      	mov	r0, r3
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	0801a0a0 	.word	0x0801a0a0

0800db00 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJiEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800db00:	b590      	push	{r4, r7, lr}
 800db02:	b085      	sub	sp, #20
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2201      	movs	r2, #1
 800db0e:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f7fa fafd 	bl	8008110 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800db16:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800db18:	6838      	ldr	r0, [r7, #0]
 800db1a:	f7f9 fc30 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800db1e:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800db20:	681c      	ldr	r4, [r3, #0]
 800db22:	68f8      	ldr	r0, [r7, #12]
 800db24:	f000 f8b8 	bl	800dc98 <_ZSt9addressofIiEPT_RS0_>
 800db28:	4603      	mov	r3, r0
 800db2a:	4619      	mov	r1, r3
 800db2c:	2004      	movs	r0, #4
 800db2e:	f7f3 fa55 	bl	8000fdc <_ZnwjPv>
 800db32:	4603      	mov	r3, r0
 800db34:	601c      	str	r4, [r3, #0]
    }
 800db36:	bf00      	nop
 800db38:	3714      	adds	r7, #20
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd90      	pop	{r4, r7, pc}
	...

0800db40 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>:
    get(variant<_Types...>& __v)
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7fa f97f 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b01      	cmp	r3, #1
 800db52:	bf14      	ite	ne
 800db54:	2301      	movne	r3, #1
 800db56:	2300      	moveq	r3, #0
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d002      	beq.n	800db64 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800db5e:	4805      	ldr	r0, [pc, #20]	; (800db74 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x34>)
 800db60:	f7f3 fa48 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7fa fad3 	bl	8008110 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800db6a:	4603      	mov	r3, r0
    }
 800db6c:	4618      	mov	r0, r3
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}
 800db74:	0801a0a0 	.word	0x0801a0a0

0800db78 <_ZSt28__variant_construct_by_indexILj2ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJfEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800db78:	b590      	push	{r4, r7, lr}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2202      	movs	r2, #2
 800db86:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f7fa fb5d 	bl	8008248 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800db8e:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800db90:	6838      	ldr	r0, [r7, #0]
 800db92:	f7f9 fc2b 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800db96:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800db98:	681c      	ldr	r4, [r3, #0]
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	f000 f888 	bl	800dcb0 <_ZSt9addressofIfEPT_RS0_>
 800dba0:	4603      	mov	r3, r0
 800dba2:	4619      	mov	r1, r3
 800dba4:	2004      	movs	r0, #4
 800dba6:	f7f3 fa19 	bl	8000fdc <_ZnwjPv>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	601c      	str	r4, [r3, #0]
    }
 800dbae:	bf00      	nop
 800dbb0:	3714      	adds	r7, #20
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd90      	pop	{r4, r7, pc}
	...

0800dbb8 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>:
    get(variant<_Types...>& __v)
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f7fa f943 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	bf14      	ite	ne
 800dbcc:	2301      	movne	r3, #1
 800dbce:	2300      	moveq	r3, #0
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d002      	beq.n	800dbdc <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800dbd6:	4805      	ldr	r0, [pc, #20]	; (800dbec <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x34>)
 800dbd8:	f7f3 fa0c 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f7fa fb33 	bl	8008248 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800dbe2:	4603      	mov	r3, r0
    }
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3708      	adds	r7, #8
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	0801a0a0 	.word	0x0801a0a0

0800dbf0 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	370c      	adds	r7, #12
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr

0800dc06 <_ZSt28__variant_construct_by_indexILj3ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJbEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800dc06:	b590      	push	{r4, r7, lr}
 800dc08:	b085      	sub	sp, #20
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
 800dc0e:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2203      	movs	r2, #3
 800dc14:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f7fa fbc4 	bl	80083a4 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800dc1c:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800dc1e:	6838      	ldr	r0, [r7, #0]
 800dc20:	f7ff ffe6 	bl	800dbf0 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800dc24:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800dc26:	781c      	ldrb	r4, [r3, #0]
 800dc28:	68f8      	ldr	r0, [r7, #12]
 800dc2a:	f000 f84d 	bl	800dcc8 <_ZSt9addressofIbEPT_RS0_>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	4619      	mov	r1, r3
 800dc32:	2001      	movs	r0, #1
 800dc34:	f7f3 f9d2 	bl	8000fdc <_ZnwjPv>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	4622      	mov	r2, r4
 800dc3c:	701a      	strb	r2, [r3, #0]
    }
 800dc3e:	bf00      	nop
 800dc40:	3714      	adds	r7, #20
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd90      	pop	{r4, r7, pc}
	...

0800dc48 <_ZSt3getILj3EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>:
    get(variant<_Types...>& __v)
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f7fa f8fb 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b03      	cmp	r3, #3
 800dc5a:	bf14      	ite	ne
 800dc5c:	2301      	movne	r3, #1
 800dc5e:	2300      	moveq	r3, #0
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d002      	beq.n	800dc6c <_ZSt3getILj3EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800dc66:	4805      	ldr	r0, [pc, #20]	; (800dc7c <_ZSt3getILj3EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x34>)
 800dc68:	f7f3 f9c4 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f7fa fb99 	bl	80083a4 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800dc72:	4603      	mov	r3, r0
    }
 800dc74:	4618      	mov	r0, r3
 800dc76:	3708      	adds	r7, #8
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	0801a0a0 	.word	0x0801a0a0

0800dc80 <_ZSt9addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    addressof(_Tp& __r) noexcept
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f7f7 ff6d 	bl	8005b68 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	4618      	mov	r0, r3
 800dc92:	3708      	adds	r7, #8
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <_ZSt9addressofIiEPT_RS0_>:
    addressof(_Tp& __r) noexcept
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f7f7 ff37 	bl	8005b14 <_ZSt11__addressofIiEPT_RS0_>
 800dca6:	4603      	mov	r3, r0
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3708      	adds	r7, #8
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <_ZSt9addressofIfEPT_RS0_>:
    addressof(_Tp& __r) noexcept
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7f7 ff40 	bl	8005b3e <_ZSt11__addressofIfEPT_RS0_>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3708      	adds	r7, #8
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <_ZSt9addressofIbEPT_RS0_>:
    addressof(_Tp& __r) noexcept
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7f7 ff0a 	bl	8005aea <_ZSt11__addressofIbEPT_RS0_>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <_Z41__static_initialization_and_destruction_0ii>:
 800dce0:	b590      	push	{r4, r7, lr}
 800dce2:	b0e7      	sub	sp, #412	; 0x19c
 800dce4:	af02      	add	r7, sp, #8
 800dce6:	1d3b      	adds	r3, r7, #4
 800dce8:	6018      	str	r0, [r3, #0]
 800dcea:	463b      	mov	r3, r7
 800dcec:	6019      	str	r1, [r3, #0]
 800dcee:	1d3b      	adds	r3, r7, #4
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	f040 819d 	bne.w	800e032 <_Z41__static_initialization_and_destruction_0ii+0x352>
 800dcf8:	463b      	mov	r3, r7
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd00:	4293      	cmp	r3, r2
 800dd02:	f040 8196 	bne.w	800e032 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 800dd06:	f107 0314 	add.w	r3, r7, #20
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	2322      	movs	r3, #34	; 0x22
 800dd0e:	461a      	mov	r2, r3
 800dd10:	2100      	movs	r1, #0
 800dd12:	f009 f8f3 	bl	8016efc <memset>
 800dd16:	f107 0314 	add.w	r3, r7, #20
 800dd1a:	223a      	movs	r2, #58	; 0x3a
 800dd1c:	701a      	strb	r2, [r3, #0]
 800dd1e:	f107 0314 	add.w	r3, r7, #20
 800dd22:	2201      	movs	r2, #1
 800dd24:	705a      	strb	r2, [r3, #1]
 800dd26:	f107 0314 	add.w	r3, r7, #20
 800dd2a:	220a      	movs	r2, #10
 800dd2c:	709a      	strb	r2, [r3, #2]
 800dd2e:	f107 0314 	add.w	r3, r7, #20
 800dd32:	220a      	movs	r2, #10
 800dd34:	70da      	strb	r2, [r3, #3]
 800dd36:	f107 0314 	add.w	r3, r7, #20
 800dd3a:	222c      	movs	r2, #44	; 0x2c
 800dd3c:	711a      	strb	r2, [r3, #4]
 800dd3e:	f107 0314 	add.w	r3, r7, #20
 800dd42:	220c      	movs	r2, #12
 800dd44:	715a      	strb	r2, [r3, #5]
 800dd46:	f107 0314 	add.w	r3, r7, #20
 800dd4a:	222e      	movs	r2, #46	; 0x2e
 800dd4c:	719a      	strb	r2, [r3, #6]
 800dd4e:	f107 0314 	add.w	r3, r7, #20
 800dd52:	220b      	movs	r2, #11
 800dd54:	71da      	strb	r2, [r3, #7]
 800dd56:	f107 0314 	add.w	r3, r7, #20
 800dd5a:	225b      	movs	r2, #91	; 0x5b
 800dd5c:	721a      	strb	r2, [r3, #8]
 800dd5e:	f107 0314 	add.w	r3, r7, #20
 800dd62:	220d      	movs	r2, #13
 800dd64:	725a      	strb	r2, [r3, #9]
 800dd66:	f107 0314 	add.w	r3, r7, #20
 800dd6a:	225d      	movs	r2, #93	; 0x5d
 800dd6c:	729a      	strb	r2, [r3, #10]
 800dd6e:	f107 0314 	add.w	r3, r7, #20
 800dd72:	220e      	movs	r2, #14
 800dd74:	72da      	strb	r2, [r3, #11]
 800dd76:	f107 0314 	add.w	r3, r7, #20
 800dd7a:	227c      	movs	r2, #124	; 0x7c
 800dd7c:	731a      	strb	r2, [r3, #12]
 800dd7e:	f107 0314 	add.w	r3, r7, #20
 800dd82:	2215      	movs	r2, #21
 800dd84:	735a      	strb	r2, [r3, #13]
 800dd86:	f107 0314 	add.w	r3, r7, #20
 800dd8a:	2226      	movs	r2, #38	; 0x26
 800dd8c:	739a      	strb	r2, [r3, #14]
 800dd8e:	f107 0314 	add.w	r3, r7, #20
 800dd92:	2216      	movs	r2, #22
 800dd94:	73da      	strb	r2, [r3, #15]
 800dd96:	f107 0314 	add.w	r3, r7, #20
 800dd9a:	222b      	movs	r2, #43	; 0x2b
 800dd9c:	741a      	strb	r2, [r3, #16]
 800dd9e:	f107 0314 	add.w	r3, r7, #20
 800dda2:	221f      	movs	r2, #31
 800dda4:	745a      	strb	r2, [r3, #17]
 800dda6:	f107 0314 	add.w	r3, r7, #20
 800ddaa:	222d      	movs	r2, #45	; 0x2d
 800ddac:	749a      	strb	r2, [r3, #18]
 800ddae:	f107 0314 	add.w	r3, r7, #20
 800ddb2:	2220      	movs	r2, #32
 800ddb4:	74da      	strb	r2, [r3, #19]
 800ddb6:	f107 0314 	add.w	r3, r7, #20
 800ddba:	222a      	movs	r2, #42	; 0x2a
 800ddbc:	751a      	strb	r2, [r3, #20]
 800ddbe:	f107 0314 	add.w	r3, r7, #20
 800ddc2:	2221      	movs	r2, #33	; 0x21
 800ddc4:	755a      	strb	r2, [r3, #21]
 800ddc6:	f107 0314 	add.w	r3, r7, #20
 800ddca:	222f      	movs	r2, #47	; 0x2f
 800ddcc:	759a      	strb	r2, [r3, #22]
 800ddce:	f107 0314 	add.w	r3, r7, #20
 800ddd2:	2222      	movs	r2, #34	; 0x22
 800ddd4:	75da      	strb	r2, [r3, #23]
 800ddd6:	f107 0314 	add.w	r3, r7, #20
 800ddda:	225e      	movs	r2, #94	; 0x5e
 800dddc:	761a      	strb	r2, [r3, #24]
 800ddde:	f107 0314 	add.w	r3, r7, #20
 800dde2:	2223      	movs	r2, #35	; 0x23
 800dde4:	765a      	strb	r2, [r3, #25]
 800dde6:	f107 0314 	add.w	r3, r7, #20
 800ddea:	2225      	movs	r2, #37	; 0x25
 800ddec:	769a      	strb	r2, [r3, #26]
 800ddee:	f107 0314 	add.w	r3, r7, #20
 800ddf2:	2224      	movs	r2, #36	; 0x24
 800ddf4:	76da      	strb	r2, [r3, #27]
 800ddf6:	f107 0314 	add.w	r3, r7, #20
 800ddfa:	2228      	movs	r2, #40	; 0x28
 800ddfc:	771a      	strb	r2, [r3, #28]
 800ddfe:	f107 0314 	add.w	r3, r7, #20
 800de02:	2226      	movs	r2, #38	; 0x26
 800de04:	775a      	strb	r2, [r3, #29]
 800de06:	f107 0314 	add.w	r3, r7, #20
 800de0a:	2229      	movs	r2, #41	; 0x29
 800de0c:	779a      	strb	r2, [r3, #30]
 800de0e:	f107 0314 	add.w	r3, r7, #20
 800de12:	2227      	movs	r2, #39	; 0x27
 800de14:	77da      	strb	r2, [r3, #31]
 800de16:	f107 0314 	add.w	r3, r7, #20
 800de1a:	2225      	movs	r2, #37	; 0x25
 800de1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800de20:	f107 030c 	add.w	r3, r7, #12
 800de24:	f107 0214 	add.w	r2, r7, #20
 800de28:	601a      	str	r2, [r3, #0]
 800de2a:	f107 030c 	add.w	r3, r7, #12
 800de2e:	2211      	movs	r2, #17
 800de30:	605a      	str	r2, [r3, #4]
 800de32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800de36:	4618      	mov	r0, r3
 800de38:	f7f3 fc59 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 800de3c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800de40:	f107 020c 	add.w	r2, r7, #12
 800de44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	460b      	mov	r3, r1
 800de4c:	ca06      	ldmia	r2, {r1, r2}
 800de4e:	4885      	ldr	r0, [pc, #532]	; (800e064 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800de50:	f7f3 fc65 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800de54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800de58:	4618      	mov	r0, r3
 800de5a:	f7f3 fc54 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 800de5e:	2305      	movs	r3, #5
 800de60:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 800de64:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 800de68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de6c:	497e      	ldr	r1, [pc, #504]	; (800e068 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800de6e:	4618      	mov	r0, r3
 800de70:	f7f3 f91a 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 800de74:	2306      	movs	r3, #6
 800de76:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 800de7a:	f207 1263 	addw	r2, r7, #355	; 0x163
 800de7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de82:	331c      	adds	r3, #28
 800de84:	4979      	ldr	r1, [pc, #484]	; (800e06c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800de86:	4618      	mov	r0, r3
 800de88:	f7f3 f936 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 800de8c:	2307      	movs	r3, #7
 800de8e:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 800de92:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800de96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de9a:	3338      	adds	r3, #56	; 0x38
 800de9c:	4974      	ldr	r1, [pc, #464]	; (800e070 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7f3 f92a 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 800dea4:	2308      	movs	r3, #8
 800dea6:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 800deaa:	f207 1265 	addw	r2, r7, #357	; 0x165
 800deae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800deb2:	3354      	adds	r3, #84	; 0x54
 800deb4:	496f      	ldr	r1, [pc, #444]	; (800e074 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7f3 f8f6 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 800debc:	2309      	movs	r3, #9
 800debe:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800dec2:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 800dec6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800deca:	3370      	adds	r3, #112	; 0x70
 800decc:	496a      	ldr	r1, [pc, #424]	; (800e078 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800dece:	4618      	mov	r0, r3
 800ded0:	f7f3 f93a 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 800ded4:	2310      	movs	r3, #16
 800ded6:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 800deda:	f207 1267 	addw	r2, r7, #359	; 0x167
 800dede:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dee2:	338c      	adds	r3, #140	; 0x8c
 800dee4:	4965      	ldr	r1, [pc, #404]	; (800e07c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7f3 f956 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 800deec:	2311      	movs	r3, #17
 800deee:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800def2:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800def6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800defa:	33a8      	adds	r3, #168	; 0xa8
 800defc:	4960      	ldr	r1, [pc, #384]	; (800e080 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800defe:	4618      	mov	r0, r3
 800df00:	f7f3 f922 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 800df04:	2312      	movs	r3, #18
 800df06:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 800df0a:	f207 1269 	addw	r2, r7, #361	; 0x169
 800df0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df12:	33c4      	adds	r3, #196	; 0xc4
 800df14:	495b      	ldr	r1, [pc, #364]	; (800e084 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800df16:	4618      	mov	r0, r3
 800df18:	f7f3 f8c6 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 800df1c:	2313      	movs	r3, #19
 800df1e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800df22:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800df26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df2a:	33e0      	adds	r3, #224	; 0xe0
 800df2c:	4956      	ldr	r1, [pc, #344]	; (800e088 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800df2e:	4618      	mov	r0, r3
 800df30:	f7f3 f8e2 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 800df34:	2314      	movs	r3, #20
 800df36:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 800df3a:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800df3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df42:	33fc      	adds	r3, #252	; 0xfc
 800df44:	4951      	ldr	r1, [pc, #324]	; (800e08c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800df46:	4618      	mov	r0, r3
 800df48:	f7f3 f94e 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 800df4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800df50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800df54:	601a      	str	r2, [r3, #0]
 800df56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800df5a:	220a      	movs	r2, #10
 800df5c:	605a      	str	r2, [r3, #4]
 800df5e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800df62:	4618      	mov	r0, r3
 800df64:	f7f3 fc68 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 800df68:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800df6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800df70:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	460b      	mov	r3, r1
 800df78:	ca06      	ldmia	r2, {r1, r2}
 800df7a:	4845      	ldr	r0, [pc, #276]	; (800e090 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800df7c:	f7f3 fc74 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 800df80:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800df84:	4618      	mov	r0, r3
 800df86:	f7f3 fc63 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800df8a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800df8e:	f504 748c 	add.w	r4, r4, #280	; 0x118
 800df92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df96:	429c      	cmp	r4, r3
 800df98:	d004      	beq.n	800dfa4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 800df9a:	3c1c      	subs	r4, #28
 800df9c:	4620      	mov	r0, r4
 800df9e:	f7f3 f876 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 800dfa2:	e7f6      	b.n	800df92 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 800dfa4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	601a      	str	r2, [r3, #0]
 800dfac:	605a      	str	r2, [r3, #4]
 800dfae:	609a      	str	r2, [r3, #8]
 800dfb0:	233c      	movs	r3, #60	; 0x3c
 800dfb2:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 800dfb6:	231b      	movs	r3, #27
 800dfb8:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 800dfbc:	231c      	movs	r3, #28
 800dfbe:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800dfc2:	233e      	movs	r3, #62	; 0x3e
 800dfc4:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 800dfc8:	2319      	movs	r3, #25
 800dfca:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800dfce:	231a      	movs	r3, #26
 800dfd0:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 800dfd4:	233d      	movs	r3, #61	; 0x3d
 800dfd6:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 800dfda:	2318      	movs	r3, #24
 800dfdc:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 800dfe0:	231d      	movs	r3, #29
 800dfe2:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800dfe6:	2321      	movs	r3, #33	; 0x21
 800dfe8:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 800dfec:	2317      	movs	r3, #23
 800dfee:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800dff2:	231e      	movs	r3, #30
 800dff4:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 800dff8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800dffc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800e000:	2304      	movs	r3, #4
 800e002:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800e006:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7f3 fc5c 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 800e010:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800e014:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800e018:	9300      	str	r3, [sp, #0]
 800e01a:	4613      	mov	r3, r2
 800e01c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 800e020:	ca06      	ldmia	r2, {r1, r2}
 800e022:	481c      	ldr	r0, [pc, #112]	; (800e094 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800e024:	f7f3 fc68 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800e028:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7f3 fc57 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 800e032:	1d3b      	adds	r3, r7, #4
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d10e      	bne.n	800e058 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800e03a:	463b      	mov	r3, r7
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e042:	4293      	cmp	r3, r2
 800e044:	d108      	bne.n	800e058 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800e046:	4813      	ldr	r0, [pc, #76]	; (800e094 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800e048:	f7f7 ff86 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 800e04c:	4810      	ldr	r0, [pc, #64]	; (800e090 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800e04e:	f7f7 ff90 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800e052:	4804      	ldr	r0, [pc, #16]	; (800e064 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800e054:	f7f7 ff9a 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 800e058:	bf00      	nop
 800e05a:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd90      	pop	{r4, r7, pc}
 800e062:	bf00      	nop
 800e064:	2000028c 	.word	0x2000028c
 800e068:	0801a0fc 	.word	0x0801a0fc
 800e06c:	0801a104 	.word	0x0801a104
 800e070:	0801a10c 	.word	0x0801a10c
 800e074:	0801a114 	.word	0x0801a114
 800e078:	0801a11c 	.word	0x0801a11c
 800e07c:	0801a124 	.word	0x0801a124
 800e080:	0801a128 	.word	0x0801a128
 800e084:	0801a130 	.word	0x0801a130
 800e088:	0801a138 	.word	0x0801a138
 800e08c:	0801a140 	.word	0x0801a140
 800e090:	200002a4 	.word	0x200002a4
 800e094:	200002bc 	.word	0x200002bc

0800e098 <_GLOBAL__sub_I__ZN6ParserC2EP5LexerP11Transmitter>:
 800e098:	b580      	push	{r7, lr}
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e0a0:	2001      	movs	r0, #1
 800e0a2:	f7ff fe1d 	bl	800dce0 <_Z41__static_initialization_and_destruction_0ii>
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <_GLOBAL__sub_D__ZN6ParserC2EP5LexerP11Transmitter>:
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	f7ff fe15 	bl	800dce0 <_Z41__static_initialization_and_destruction_0ii>
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <_ZN6SourceC1EP20__UART_HandleTypeDef>:

#ifdef TESTS
static std::ifstream indata{};
#endif

Source::Source(UART_HandleTypeDef* huart)
 800e0b8:	b480      	push	{r7}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
 800e0c2:	4a09      	ldr	r2, [pc, #36]	; (800e0e8 <_ZN6SourceC1EP20__UART_HandleTypeDef+0x30>)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	601a      	str	r2, [r3, #0]
{
	line = 1;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	605a      	str	r2, [r3, #4]
	position = 0;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	609a      	str	r2, [r3, #8]
	this->huart = huart;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	683a      	ldr	r2, [r7, #0]
 800e0d8:	60da      	str	r2, [r3, #12]
#ifdef TESTS
    indata.open("code.txt");
#endif
}
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr
 800e0e8:	0801a47c 	.word	0x0801a47c

0800e0ec <_ZN6SourceD1Ev>:

Source::~Source()
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	4a04      	ldr	r2, [pc, #16]	; (800e108 <_ZN6SourceD1Ev+0x1c>)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	601a      	str	r2, [r3, #0]
{
#ifdef TESTS
    indata.close();
#endif
}
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	370c      	adds	r7, #12
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr
 800e108:	0801a47c 	.word	0x0801a47c

0800e10c <_ZN6SourceD0Ev>:
Source::~Source()
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b082      	sub	sp, #8
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
}
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f7ff ffe9 	bl	800e0ec <_ZN6SourceD1Ev>
 800e11a:	2110      	movs	r1, #16
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f008 fb24 	bl	801676a <_ZdlPvj>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	4618      	mov	r0, r3
 800e126:	3708      	adds	r7, #8
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <_ZN6Source8get_lineEv>:

int Source::get_line()
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
	return line;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	685b      	ldr	r3, [r3, #4]
}
 800e138:	4618      	mov	r0, r3
 800e13a:	370c      	adds	r7, #12
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr

0800e144 <_ZN6Source12get_positionEv>:

int Source::get_position()
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
	return position;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	689b      	ldr	r3, [r3, #8]
}
 800e150:	4618      	mov	r0, r3
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <_ZN6Source15update_positionEh>:

// update line and position in line depending on received char
void Source::update_position(uint8_t rx_buffer)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	460b      	mov	r3, r1
 800e166:	70fb      	strb	r3, [r7, #3]
	if (rx_buffer == '\n')
 800e168:	78fb      	ldrb	r3, [r7, #3]
 800e16a:	2b0a      	cmp	r3, #10
 800e16c:	d108      	bne.n	800e180 <_ZN6Source15update_positionEh+0x24>
	{
		++line;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	1c5a      	adds	r2, r3, #1
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	605a      	str	r2, [r3, #4]
		position = 0;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2200      	movs	r2, #0
 800e17c:	609a      	str	r2, [r3, #8]
	}
	else
	{
		++position;
	}
}
 800e17e:	e004      	b.n	800e18a <_ZN6Source15update_positionEh+0x2e>
		++position;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	1c5a      	adds	r2, r3, #1
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	609a      	str	r2, [r3, #8]
}
 800e18a:	bf00      	nop
 800e18c:	370c      	adds	r7, #12
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr
	...

0800e198 <_ZN6Source17receive_code_charEv>:

// receive char with UART in blocking mode
char Source::receive_code_char()
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
    static uint8_t rx_buffer;
#ifndef TESTS
    static uint8_t tx_buf;
    tx_buf = 'c';
 800e1a0:	4b13      	ldr	r3, [pc, #76]	; (800e1f0 <_ZN6Source17receive_code_charEv+0x58>)
 800e1a2:	2263      	movs	r2, #99	; 0x63
 800e1a4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, &tx_buf, 1, 100);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	68d8      	ldr	r0, [r3, #12]
 800e1aa:	2364      	movs	r3, #100	; 0x64
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	4910      	ldr	r1, [pc, #64]	; (800e1f0 <_ZN6Source17receive_code_charEv+0x58>)
 800e1b0:	f007 fb58 	bl	8015864 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, &rx_buffer, 1, -1);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	68d8      	ldr	r0, [r3, #12]
 800e1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1bc:	2201      	movs	r2, #1
 800e1be:	490d      	ldr	r1, [pc, #52]	; (800e1f4 <_ZN6Source17receive_code_charEv+0x5c>)
 800e1c0:	f007 fbe3 	bl	801598a <HAL_UART_Receive>
	if(rx_buffer == 255)
 800e1c4:	4b0b      	ldr	r3, [pc, #44]	; (800e1f4 <_ZN6Source17receive_code_charEv+0x5c>)
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	2bff      	cmp	r3, #255	; 0xff
 800e1ca:	d104      	bne.n	800e1d6 <_ZN6Source17receive_code_charEv+0x3e>
    {
		++line;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	1c5a      	adds	r2, r3, #1
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	605a      	str	r2, [r3, #4]
	if((rx_buffer < 30 || rx_buffer > 126) && rx_buffer != '\n')
    {
        std::cout << rx_buffer << '\n';
    }
#endif
	update_position(rx_buffer);
 800e1d6:	4b07      	ldr	r3, [pc, #28]	; (800e1f4 <_ZN6Source17receive_code_charEv+0x5c>)
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	4619      	mov	r1, r3
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f7ff ffbd 	bl	800e15c <_ZN6Source15update_positionEh>

	return rx_buffer;
 800e1e2:	4b04      	ldr	r3, [pc, #16]	; (800e1f4 <_ZN6Source17receive_code_charEv+0x5c>)
 800e1e4:	781b      	ldrb	r3, [r3, #0]
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3708      	adds	r7, #8
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	200002d5 	.word	0x200002d5
 800e1f4:	200002d4 	.word	0x200002d4

0800e1f8 <_ZN4BodyD1Ev>:
#include <Statement.h>

Body::~Body()
 800e1f8:	b590      	push	{r4, r7, lr}
 800e1fa:	b087      	sub	sp, #28
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
{
	for (Statement *s : statements)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	617b      	str	r3, [r7, #20]
 800e204:	6978      	ldr	r0, [r7, #20]
 800e206:	f7fe f973 	bl	800c4f0 <_ZNSt6vectorIP9StatementSaIS1_EE5beginEv>
 800e20a:	4603      	mov	r3, r0
 800e20c:	60fb      	str	r3, [r7, #12]
 800e20e:	6978      	ldr	r0, [r7, #20]
 800e210:	f7fd fd8d 	bl	800bd2e <_ZNSt6vectorIP9StatementSaIS1_EE3endEv>
 800e214:	4603      	mov	r3, r0
 800e216:	60bb      	str	r3, [r7, #8]
 800e218:	f107 0208 	add.w	r2, r7, #8
 800e21c:	f107 030c 	add.w	r3, r7, #12
 800e220:	4611      	mov	r1, r2
 800e222:	4618      	mov	r0, r3
 800e224:	f000 f9ad 	bl	800e582 <_ZN9__gnu_cxxneIPP9StatementSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e228:	4603      	mov	r3, r0
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d017      	beq.n	800e25e <_ZN4BodyD1Ev+0x66>
 800e22e:	f107 030c 	add.w	r3, r7, #12
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe f9cd 	bl	800c5d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEdeEv>
 800e238:	4603      	mov	r3, r0
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	613b      	str	r3, [r7, #16]
	{
		delete s;
 800e23e:	693c      	ldr	r4, [r7, #16]
 800e240:	2c00      	cmp	r4, #0
 800e242:	d006      	beq.n	800e252 <_ZN4BodyD1Ev+0x5a>
 800e244:	4620      	mov	r0, r4
 800e246:	f000 f813 	bl	800e270 <_ZN9StatementD1Ev>
 800e24a:	210c      	movs	r1, #12
 800e24c:	4620      	mov	r0, r4
 800e24e:	f008 fa8c 	bl	801676a <_ZdlPvj>
	for (Statement *s : statements)
 800e252:	f107 030c 	add.w	r3, r7, #12
 800e256:	4618      	mov	r0, r3
 800e258:	f000 f9ab 	bl	800e5b2 <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEppEv>
 800e25c:	e7dc      	b.n	800e218 <_ZN4BodyD1Ev+0x20>
Body::~Body()
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	4618      	mov	r0, r3
 800e262:	f000 f973 	bl	800e54c <_ZNSt6vectorIP9StatementSaIS1_EED1Ev>
	}
}
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	4618      	mov	r0, r3
 800e26a:	371c      	adds	r7, #28
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd90      	pop	{r4, r7, pc}

0800e270 <_ZN9StatementD1Ev>:

Statement::~Statement()
 800e270:	b590      	push	{r4, r7, lr}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
{
	switch (type)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	2b03      	cmp	r3, #3
 800e27e:	d856      	bhi.n	800e32e <_ZN9StatementD1Ev+0xbe>
 800e280:	a201      	add	r2, pc, #4	; (adr r2, 800e288 <_ZN9StatementD1Ev+0x18>)
 800e282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e286:	bf00      	nop
 800e288:	0800e299 	.word	0x0800e299
 800e28c:	0800e2bb 	.word	0x0800e2bb
 800e290:	0800e2dd 	.word	0x0800e2dd
 800e294:	0800e2ff 	.word	0x0800e2ff
	{
	case STATEMENT_ASSIGNMENT:
		delete std::get<Assignment*>(content);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	3304      	adds	r3, #4
 800e29c:	4618      	mov	r0, r3
 800e29e:	f000 f998 	bl	800e5d2 <_ZSt3getIP10AssignmentJS1_P13Function_callP15While_statementP12If_statementEERT_RSt7variantIJDpT0_EE>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	681c      	ldr	r4, [r3, #0]
 800e2a6:	2c00      	cmp	r4, #0
 800e2a8:	d03a      	beq.n	800e320 <_ZN9StatementD1Ev+0xb0>
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	f000 f916 	bl	800e4dc <_ZN10AssignmentD1Ev>
 800e2b0:	2108      	movs	r1, #8
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f008 fa59 	bl	801676a <_ZdlPvj>
		break;
 800e2b8:	e032      	b.n	800e320 <_ZN9StatementD1Ev+0xb0>
	case STATEMENT_FUNCTION_CALL:
		delete std::get<Function_call*>(content);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	3304      	adds	r3, #4
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f000 f993 	bl	800e5ea <_ZSt3getIP13Function_callJP10AssignmentS1_P15While_statementP12If_statementEERT_RSt7variantIJDpT0_EE>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	681c      	ldr	r4, [r3, #0]
 800e2c8:	2c00      	cmp	r4, #0
 800e2ca:	d02b      	beq.n	800e324 <_ZN9StatementD1Ev+0xb4>
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	f000 f8c3 	bl	800e458 <_ZN13Function_callD1Ev>
 800e2d2:	2124      	movs	r1, #36	; 0x24
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	f008 fa48 	bl	801676a <_ZdlPvj>
		break;
 800e2da:	e023      	b.n	800e324 <_ZN9StatementD1Ev+0xb4>
	case STATEMENT_WHILE:
		delete std::get<While_statement*>(content);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	3304      	adds	r3, #4
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f000 f98e 	bl	800e602 <_ZSt3getIP15While_statementJP10AssignmentP13Function_callS1_P12If_statementEERT_RSt7variantIJDpT0_EE>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	681c      	ldr	r4, [r3, #0]
 800e2ea:	2c00      	cmp	r4, #0
 800e2ec:	d01c      	beq.n	800e328 <_ZN9StatementD1Ev+0xb8>
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f000 f822 	bl	800e338 <_ZN15While_statementD1Ev>
 800e2f4:	2108      	movs	r1, #8
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f008 fa37 	bl	801676a <_ZdlPvj>
		break;
 800e2fc:	e014      	b.n	800e328 <_ZN9StatementD1Ev+0xb8>
	case STATEMENT_IF:
		delete std::get<If_statement*>(content);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	3304      	adds	r3, #4
 800e302:	4618      	mov	r0, r3
 800e304:	f000 f989 	bl	800e61a <_ZSt3getIP12If_statementJP10AssignmentP13Function_callP15While_statementS1_EERT_RSt7variantIJDpT0_EE>
 800e308:	4603      	mov	r3, r0
 800e30a:	681c      	ldr	r4, [r3, #0]
 800e30c:	2c00      	cmp	r4, #0
 800e30e:	d00d      	beq.n	800e32c <_ZN9StatementD1Ev+0xbc>
 800e310:	4620      	mov	r0, r4
 800e312:	f000 f830 	bl	800e376 <_ZN12If_statementD1Ev>
 800e316:	2118      	movs	r1, #24
 800e318:	4620      	mov	r0, r4
 800e31a:	f008 fa26 	bl	801676a <_ZdlPvj>
		break;
 800e31e:	e005      	b.n	800e32c <_ZN9StatementD1Ev+0xbc>
		break;
 800e320:	bf00      	nop
 800e322:	e004      	b.n	800e32e <_ZN9StatementD1Ev+0xbe>
		break;
 800e324:	bf00      	nop
 800e326:	e002      	b.n	800e32e <_ZN9StatementD1Ev+0xbe>
		break;
 800e328:	bf00      	nop
 800e32a:	e000      	b.n	800e32e <_ZN9StatementD1Ev+0xbe>
		break;
 800e32c:	bf00      	nop
	}
}
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	4618      	mov	r0, r3
 800e332:	370c      	adds	r7, #12
 800e334:	46bd      	mov	sp, r7
 800e336:	bd90      	pop	{r4, r7, pc}

0800e338 <_ZN15While_statementD1Ev>:

While_statement::~While_statement()
 800e338:	b590      	push	{r4, r7, lr}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
{
	delete condition;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681c      	ldr	r4, [r3, #0]
 800e344:	2c00      	cmp	r4, #0
 800e346:	d006      	beq.n	800e356 <_ZN15While_statementD1Ev+0x1e>
 800e348:	4620      	mov	r0, r4
 800e34a:	f7f3 f960 	bl	800160e <_ZN10ExpressionD1Ev>
 800e34e:	210c      	movs	r1, #12
 800e350:	4620      	mov	r0, r4
 800e352:	f008 fa0a 	bl	801676a <_ZdlPvj>
	delete while_body;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	685c      	ldr	r4, [r3, #4]
 800e35a:	2c00      	cmp	r4, #0
 800e35c:	d006      	beq.n	800e36c <_ZN15While_statementD1Ev+0x34>
 800e35e:	4620      	mov	r0, r4
 800e360:	f7ff ff4a 	bl	800e1f8 <_ZN4BodyD1Ev>
 800e364:	210c      	movs	r1, #12
 800e366:	4620      	mov	r0, r4
 800e368:	f008 f9ff 	bl	801676a <_ZdlPvj>
}
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	4618      	mov	r0, r3
 800e370:	370c      	adds	r7, #12
 800e372:	46bd      	mov	sp, r7
 800e374:	bd90      	pop	{r4, r7, pc}

0800e376 <_ZN12If_statementD1Ev>:

If_statement::~If_statement()
 800e376:	b590      	push	{r4, r7, lr}
 800e378:	b08b      	sub	sp, #44	; 0x2c
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	6078      	str	r0, [r7, #4]
{
	for (Expression *e : conditions)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	627b      	str	r3, [r7, #36]	; 0x24
 800e382:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e384:	f7fd fe8c 	bl	800c0a0 <_ZNSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 800e388:	4603      	mov	r3, r0
 800e38a:	617b      	str	r3, [r7, #20]
 800e38c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e38e:	f7fd f9eb 	bl	800b768 <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800e392:	4603      	mov	r3, r0
 800e394:	613b      	str	r3, [r7, #16]
 800e396:	f107 0210 	add.w	r2, r7, #16
 800e39a:	f107 0314 	add.w	r3, r7, #20
 800e39e:	4611      	mov	r1, r2
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f000 f97c 	bl	800e69e <_ZN9__gnu_cxxneIPP10ExpressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d017      	beq.n	800e3dc <_ZN12If_statementD1Ev+0x66>
 800e3ac:	f107 0314 	add.w	r3, r7, #20
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fd fee6 	bl	800c182 <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEdeEv>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	61bb      	str	r3, [r7, #24]
	{
		delete e;
 800e3bc:	69bc      	ldr	r4, [r7, #24]
 800e3be:	2c00      	cmp	r4, #0
 800e3c0:	d006      	beq.n	800e3d0 <_ZN12If_statementD1Ev+0x5a>
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	f7f3 f923 	bl	800160e <_ZN10ExpressionD1Ev>
 800e3c8:	210c      	movs	r1, #12
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f008 f9cd 	bl	801676a <_ZdlPvj>
	for (Expression *e : conditions)
 800e3d0:	f107 0314 	add.w	r3, r7, #20
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f000 f97a 	bl	800e6ce <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEppEv>
 800e3da:	e7dc      	b.n	800e396 <_ZN12If_statementD1Ev+0x20>
	}

	for (Body *b : if_bodies)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	330c      	adds	r3, #12
 800e3e0:	623b      	str	r3, [r7, #32]
 800e3e2:	6a38      	ldr	r0, [r7, #32]
 800e3e4:	f7fd ff46 	bl	800c274 <_ZNSt6vectorIP4BodySaIS1_EE5beginEv>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	60fb      	str	r3, [r7, #12]
 800e3ec:	6a38      	ldr	r0, [r7, #32]
 800e3ee:	f7fd fa82 	bl	800b8f6 <_ZNSt6vectorIP4BodySaIS1_EE3endEv>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	60bb      	str	r3, [r7, #8]
 800e3f6:	f107 0208 	add.w	r2, r7, #8
 800e3fa:	f107 030c 	add.w	r3, r7, #12
 800e3fe:	4611      	mov	r1, r2
 800e400:	4618      	mov	r0, r3
 800e402:	f000 f974 	bl	800e6ee <_ZN9__gnu_cxxneIPP4BodySt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d017      	beq.n	800e43c <_ZN12If_statementD1Ev+0xc6>
 800e40c:	f107 030c 	add.w	r3, r7, #12
 800e410:	4618      	mov	r0, r3
 800e412:	f7fd ffa0 	bl	800c356 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEdeEv>
 800e416:	4603      	mov	r3, r0
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	61fb      	str	r3, [r7, #28]
	{
		delete b;
 800e41c:	69fc      	ldr	r4, [r7, #28]
 800e41e:	2c00      	cmp	r4, #0
 800e420:	d006      	beq.n	800e430 <_ZN12If_statementD1Ev+0xba>
 800e422:	4620      	mov	r0, r4
 800e424:	f7ff fee8 	bl	800e1f8 <_ZN4BodyD1Ev>
 800e428:	210c      	movs	r1, #12
 800e42a:	4620      	mov	r0, r4
 800e42c:	f008 f99d 	bl	801676a <_ZdlPvj>
	for (Body *b : if_bodies)
 800e430:	f107 030c 	add.w	r3, r7, #12
 800e434:	4618      	mov	r0, r3
 800e436:	f000 f972 	bl	800e71e <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEppEv>
 800e43a:	e7dc      	b.n	800e3f6 <_ZN12If_statementD1Ev+0x80>
If_statement::~If_statement()
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	330c      	adds	r3, #12
 800e440:	4618      	mov	r0, r3
 800e442:	f000 f911 	bl	800e668 <_ZNSt6vectorIP4BodySaIS1_EED1Ev>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	4618      	mov	r0, r3
 800e44a:	f000 f8f2 	bl	800e632 <_ZNSt6vectorIP10ExpressionSaIS1_EED1Ev>
	}
}
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	4618      	mov	r0, r3
 800e452:	372c      	adds	r7, #44	; 0x2c
 800e454:	46bd      	mov	sp, r7
 800e456:	bd90      	pop	{r4, r7, pc}

0800e458 <_ZN13Function_callD1Ev>:

Function_call::~Function_call()
 800e458:	b590      	push	{r4, r7, lr}
 800e45a:	b087      	sub	sp, #28
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
{
	for (Expression *e : arguments)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	3318      	adds	r3, #24
 800e464:	617b      	str	r3, [r7, #20]
 800e466:	6978      	ldr	r0, [r7, #20]
 800e468:	f7fd fe1a 	bl	800c0a0 <_ZNSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 800e46c:	4603      	mov	r3, r0
 800e46e:	60fb      	str	r3, [r7, #12]
 800e470:	6978      	ldr	r0, [r7, #20]
 800e472:	f7fd f979 	bl	800b768 <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800e476:	4603      	mov	r3, r0
 800e478:	60bb      	str	r3, [r7, #8]
 800e47a:	f107 0208 	add.w	r2, r7, #8
 800e47e:	f107 030c 	add.w	r3, r7, #12
 800e482:	4611      	mov	r1, r2
 800e484:	4618      	mov	r0, r3
 800e486:	f000 f90a 	bl	800e69e <_ZN9__gnu_cxxneIPP10ExpressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d017      	beq.n	800e4c0 <_ZN13Function_callD1Ev+0x68>
 800e490:	f107 030c 	add.w	r3, r7, #12
 800e494:	4618      	mov	r0, r3
 800e496:	f7fd fe74 	bl	800c182 <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEdeEv>
 800e49a:	4603      	mov	r3, r0
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	613b      	str	r3, [r7, #16]
	{
		delete e;
 800e4a0:	693c      	ldr	r4, [r7, #16]
 800e4a2:	2c00      	cmp	r4, #0
 800e4a4:	d006      	beq.n	800e4b4 <_ZN13Function_callD1Ev+0x5c>
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	f7f3 f8b1 	bl	800160e <_ZN10ExpressionD1Ev>
 800e4ac:	210c      	movs	r1, #12
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	f008 f95b 	bl	801676a <_ZdlPvj>
	for (Expression *e : arguments)
 800e4b4:	f107 030c 	add.w	r3, r7, #12
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f000 f908 	bl	800e6ce <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEppEv>
 800e4be:	e7dc      	b.n	800e47a <_ZN13Function_callD1Ev+0x22>
Function_call::~Function_call()
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	3318      	adds	r3, #24
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f000 f8b4 	bl	800e632 <_ZNSt6vectorIP10ExpressionSaIS1_EED1Ev>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f008 fb26 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	371c      	adds	r7, #28
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd90      	pop	{r4, r7, pc}

0800e4dc <_ZN10AssignmentD1Ev>:

Assignment::~Assignment()
 800e4dc:	b590      	push	{r4, r7, lr}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
{
	delete value;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	685c      	ldr	r4, [r3, #4]
 800e4e8:	2c00      	cmp	r4, #0
 800e4ea:	d006      	beq.n	800e4fa <_ZN10AssignmentD1Ev+0x1e>
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f7f3 f88e 	bl	800160e <_ZN10ExpressionD1Ev>
 800e4f2:	210c      	movs	r1, #12
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	f008 f938 	bl	801676a <_ZdlPvj>
	delete var;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681c      	ldr	r4, [r3, #0]
 800e4fe:	2c00      	cmp	r4, #0
 800e500:	d006      	beq.n	800e510 <_ZN10AssignmentD1Ev+0x34>
 800e502:	4620      	mov	r0, r4
 800e504:	f000 f809 	bl	800e51a <_ZN8VariableD1Ev>
 800e508:	2120      	movs	r1, #32
 800e50a:	4620      	mov	r0, r4
 800e50c:	f008 f92d 	bl	801676a <_ZdlPvj>
}
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	4618      	mov	r0, r3
 800e514:	370c      	adds	r7, #12
 800e516:	46bd      	mov	sp, r7
 800e518:	bd90      	pop	{r4, r7, pc}

0800e51a <_ZN8VariableD1Ev>:

Variable::~Variable()
 800e51a:	b590      	push	{r4, r7, lr}
 800e51c:	b083      	sub	sp, #12
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
{
	delete index;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	69dc      	ldr	r4, [r3, #28]
 800e526:	2c00      	cmp	r4, #0
 800e528:	d006      	beq.n	800e538 <_ZN8VariableD1Ev+0x1e>
 800e52a:	4620      	mov	r0, r4
 800e52c:	f7f3 f86f 	bl	800160e <_ZN10ExpressionD1Ev>
 800e530:	210c      	movs	r1, #12
 800e532:	4620      	mov	r0, r4
 800e534:	f008 f919 	bl	801676a <_ZdlPvj>
Variable::~Variable()
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	3304      	adds	r3, #4
 800e53c:	4618      	mov	r0, r3
 800e53e:	f008 faee 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	4618      	mov	r0, r3
 800e546:	370c      	adds	r7, #12
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd90      	pop	{r4, r7, pc}

0800e54c <_ZNSt6vectorIP9StatementSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800e54c:	b5b0      	push	{r4, r5, r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681c      	ldr	r4, [r3, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fd f803 	bl	800b56a <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800e564:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e566:	461a      	mov	r2, r3
 800e568:	4629      	mov	r1, r5
 800e56a:	4620      	mov	r0, r4
 800e56c:	f000 f90c 	bl	800e788 <_ZSt8_DestroyIPP9StatementS1_EvT_S3_RSaIT0_E>
      }
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4618      	mov	r0, r3
 800e574:	f000 f8ef 	bl	800e756 <_ZNSt12_Vector_baseIP9StatementSaIS1_EED1Ev>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	4618      	mov	r0, r3
 800e57c:	3708      	adds	r7, #8
 800e57e:	46bd      	mov	sp, r7
 800e580:	bdb0      	pop	{r4, r5, r7, pc}

0800e582 <_ZN9__gnu_cxxneIPP9StatementSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e582:	b590      	push	{r4, r7, lr}
 800e584:	b083      	sub	sp, #12
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
 800e58a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f7fd fffc 	bl	800c58a <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800e592:	4603      	mov	r3, r0
 800e594:	681c      	ldr	r4, [r3, #0]
 800e596:	6838      	ldr	r0, [r7, #0]
 800e598:	f7fd fff7 	bl	800c58a <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800e59c:	4603      	mov	r3, r0
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	429c      	cmp	r4, r3
 800e5a2:	bf14      	ite	ne
 800e5a4:	2301      	movne	r3, #1
 800e5a6:	2300      	moveq	r3, #0
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	370c      	adds	r7, #12
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd90      	pop	{r4, r7, pc}

0800e5b2 <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e5b2:	b480      	push	{r7}
 800e5b4:	b083      	sub	sp, #12
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	1d1a      	adds	r2, r3, #4
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	601a      	str	r2, [r3, #0]
	return *this;
 800e5c4:	687b      	ldr	r3, [r7, #4]
      }
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	370c      	adds	r7, #12
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr

0800e5d2 <_ZSt3getIP10AssignmentJS1_P13Function_callP15While_statementP12If_statementEERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 800e5d2:	b580      	push	{r7, lr}
 800e5d4:	b082      	sub	sp, #8
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f7fc fe04 	bl	800b1e8 <_ZSt3getILj0EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>
 800e5e0:	4603      	mov	r3, r0
    }
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}

0800e5ea <_ZSt3getIP13Function_callJP10AssignmentS1_P15While_statementP12If_statementEERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 800e5ea:	b580      	push	{r7, lr}
 800e5ec:	b082      	sub	sp, #8
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f7fc fd96 	bl	800b124 <_ZSt3getILj1EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>
 800e5f8:	4603      	mov	r3, r0
    }
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3708      	adds	r7, #8
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}

0800e602 <_ZSt3getIP15While_statementJP10AssignmentP13Function_callS1_P12If_statementEERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 800e602:	b580      	push	{r7, lr}
 800e604:	b082      	sub	sp, #8
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f7fc fea2 	bl	800b354 <_ZSt3getILj2EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>
 800e610:	4603      	mov	r3, r0
    }
 800e612:	4618      	mov	r0, r3
 800e614:	3708      	adds	r7, #8
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}

0800e61a <_ZSt3getIP12If_statementJP10AssignmentP13Function_callP15While_statementS1_EERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 800e61a:	b580      	push	{r7, lr}
 800e61c:	b082      	sub	sp, #8
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f7fc ff2e 	bl	800b484 <_ZSt3getILj3EJP10AssignmentP13Function_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSC_>
 800e628:	4603      	mov	r3, r0
    }
 800e62a:	4618      	mov	r0, r3
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}

0800e632 <_ZNSt6vectorIP10ExpressionSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800e632:	b5b0      	push	{r4, r5, r7, lr}
 800e634:	b082      	sub	sp, #8
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681c      	ldr	r4, [r3, #0]
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	4618      	mov	r0, r3
 800e646:	f7fc fc96 	bl	800af76 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800e64a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e64c:	461a      	mov	r2, r3
 800e64e:	4629      	mov	r1, r5
 800e650:	4620      	mov	r0, r4
 800e652:	f000 f8cc 	bl	800e7ee <_ZSt8_DestroyIPP10ExpressionS1_EvT_S3_RSaIT0_E>
      }
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4618      	mov	r0, r3
 800e65a:	f000 f8af 	bl	800e7bc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EED1Ev>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4618      	mov	r0, r3
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bdb0      	pop	{r4, r5, r7, pc}

0800e668 <_ZNSt6vectorIP4BodySaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800e668:	b5b0      	push	{r4, r5, r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681c      	ldr	r4, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7fc fcb9 	bl	800aff2 <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800e680:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e682:	461a      	mov	r2, r3
 800e684:	4629      	mov	r1, r5
 800e686:	4620      	mov	r0, r4
 800e688:	f000 f8e4 	bl	800e854 <_ZSt8_DestroyIPP4BodyS1_EvT_S3_RSaIT0_E>
      }
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	4618      	mov	r0, r3
 800e690:	f000 f8c7 	bl	800e822 <_ZNSt12_Vector_baseIP4BodySaIS1_EED1Ev>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	4618      	mov	r0, r3
 800e698:	3708      	adds	r7, #8
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bdb0      	pop	{r4, r5, r7, pc}

0800e69e <_ZN9__gnu_cxxneIPP10ExpressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e69e:	b590      	push	{r4, r7, lr}
 800e6a0:	b083      	sub	sp, #12
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
 800e6a6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f7fd fd46 	bl	800c13a <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	681c      	ldr	r4, [r3, #0]
 800e6b2:	6838      	ldr	r0, [r7, #0]
 800e6b4:	f7fd fd41 	bl	800c13a <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	429c      	cmp	r4, r3
 800e6be:	bf14      	ite	ne
 800e6c0:	2301      	movne	r3, #1
 800e6c2:	2300      	moveq	r3, #0
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	370c      	adds	r7, #12
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd90      	pop	{r4, r7, pc}

0800e6ce <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e6ce:	b480      	push	{r7}
 800e6d0:	b083      	sub	sp, #12
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	1d1a      	adds	r2, r3, #4
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	601a      	str	r2, [r3, #0]
	return *this;
 800e6e0:	687b      	ldr	r3, [r7, #4]
      }
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	370c      	adds	r7, #12
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr

0800e6ee <_ZN9__gnu_cxxneIPP4BodySt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e6ee:	b590      	push	{r4, r7, lr}
 800e6f0:	b083      	sub	sp, #12
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
 800e6f6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f7fd fe08 	bl	800c30e <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800e6fe:	4603      	mov	r3, r0
 800e700:	681c      	ldr	r4, [r3, #0]
 800e702:	6838      	ldr	r0, [r7, #0]
 800e704:	f7fd fe03 	bl	800c30e <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800e708:	4603      	mov	r3, r0
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	429c      	cmp	r4, r3
 800e70e:	bf14      	ite	ne
 800e710:	2301      	movne	r3, #1
 800e712:	2300      	moveq	r3, #0
 800e714:	b2db      	uxtb	r3, r3
 800e716:	4618      	mov	r0, r3
 800e718:	370c      	adds	r7, #12
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd90      	pop	{r4, r7, pc}

0800e71e <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e71e:	b480      	push	{r7}
 800e720:	b083      	sub	sp, #12
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	1d1a      	adds	r2, r3, #4
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	601a      	str	r2, [r3, #0]
	return *this;
 800e730:	687b      	ldr	r3, [r7, #4]
      }
 800e732:	4618      	mov	r0, r3
 800e734:	370c      	adds	r7, #12
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr

0800e73e <_ZNSt12_Vector_baseIP9StatementSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800e73e:	b580      	push	{r7, lr}
 800e740:	b082      	sub	sp, #8
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 f892 	bl	800e870 <_ZNSaIP9StatementED1Ev>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	4618      	mov	r0, r3
 800e750:	3708      	adds	r7, #8
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <_ZNSt12_Vector_baseIP9StatementSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800e756:	b580      	push	{r7, lr}
 800e758:	b082      	sub	sp, #8
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	689a      	ldr	r2, [r3, #8]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	1ad3      	subs	r3, r2, r3
 800e76c:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800e76e:	461a      	mov	r2, r3
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f7fc fee7 	bl	800b544 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE13_M_deallocateEPS1_j>
      }
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	4618      	mov	r0, r3
 800e77a:	f7ff ffe0 	bl	800e73e <_ZNSt12_Vector_baseIP9StatementSaIS1_EE12_Vector_implD1Ev>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	4618      	mov	r0, r3
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <_ZSt8_DestroyIPP9StatementS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800e794:	68b9      	ldr	r1, [r7, #8]
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f000 f876 	bl	800e888 <_ZSt8_DestroyIPP9StatementEvT_S3_>
    }
 800e79c:	bf00      	nop
 800e79e:	3710      	adds	r7, #16
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 f878 	bl	800e8a2 <_ZNSaIP10ExpressionED1Ev>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	689a      	ldr	r2, [r3, #8]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	1ad3      	subs	r3, r2, r3
 800e7d2:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f7fc fbba 	bl	800af50 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7ff ffe0 	bl	800e7a4 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implD1Ev>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3708      	adds	r7, #8
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}

0800e7ee <_ZSt8_DestroyIPP10ExpressionS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b084      	sub	sp, #16
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	60f8      	str	r0, [r7, #12]
 800e7f6:	60b9      	str	r1, [r7, #8]
 800e7f8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800e7fa:	68b9      	ldr	r1, [r7, #8]
 800e7fc:	68f8      	ldr	r0, [r7, #12]
 800e7fe:	f000 f85c 	bl	800e8ba <_ZSt8_DestroyIPP10ExpressionEvT_S3_>
    }
 800e802:	bf00      	nop
 800e804:	3710      	adds	r7, #16
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}

0800e80a <_ZNSt12_Vector_baseIP4BodySaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b082      	sub	sp, #8
 800e80e:	af00      	add	r7, sp, #0
 800e810:	6078      	str	r0, [r7, #4]
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f000 f85e 	bl	800e8d4 <_ZNSaIP4BodyED1Ev>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	4618      	mov	r0, r3
 800e81c:	3708      	adds	r7, #8
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <_ZNSt12_Vector_baseIP4BodySaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800e822:	b580      	push	{r7, lr}
 800e824:	b082      	sub	sp, #8
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	689a      	ldr	r2, [r3, #8]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	1ad3      	subs	r3, r2, r3
 800e838:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800e83a:	461a      	mov	r2, r3
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f7fc fbc5 	bl	800afcc <_ZNSt12_Vector_baseIP4BodySaIS1_EE13_M_deallocateEPS1_j>
      }
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4618      	mov	r0, r3
 800e846:	f7ff ffe0 	bl	800e80a <_ZNSt12_Vector_baseIP4BodySaIS1_EE12_Vector_implD1Ev>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4618      	mov	r0, r3
 800e84e:	3708      	adds	r7, #8
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <_ZSt8_DestroyIPP4BodyS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800e854:	b580      	push	{r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800e860:	68b9      	ldr	r1, [r7, #8]
 800e862:	68f8      	ldr	r0, [r7, #12]
 800e864:	f000 f842 	bl	800e8ec <_ZSt8_DestroyIPP4BodyEvT_S3_>
    }
 800e868:	bf00      	nop
 800e86a:	3710      	adds	r7, #16
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <_ZNSaIP9StatementED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e870:	b580      	push	{r7, lr}
 800e872:	b082      	sub	sp, #8
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f000 f844 	bl	800e906 <_ZN9__gnu_cxx13new_allocatorIP9StatementED1Ev>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	4618      	mov	r0, r3
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <_ZSt8_DestroyIPP9StatementEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800e892:	6839      	ldr	r1, [r7, #0]
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 f841 	bl	800e91c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9StatementEEvT_S5_>
    }
 800e89a:	bf00      	nop
 800e89c:	3708      	adds	r7, #8
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <_ZNSaIP10ExpressionED1Ev>:
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b082      	sub	sp, #8
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 f841 	bl	800e932 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionED1Ev>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <_ZSt8_DestroyIPP10ExpressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b082      	sub	sp, #8
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
 800e8c2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800e8c4:	6839      	ldr	r1, [r7, #0]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 f83e 	bl	800e948 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10ExpressionEEvT_S5_>
    }
 800e8cc:	bf00      	nop
 800e8ce:	3708      	adds	r7, #8
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <_ZNSaIP4BodyED1Ev>:
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b082      	sub	sp, #8
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 f83e 	bl	800e95e <_ZN9__gnu_cxx13new_allocatorIP4BodyED1Ev>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3708      	adds	r7, #8
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <_ZSt8_DestroyIPP4BodyEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800e8f6:	6839      	ldr	r1, [r7, #0]
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 f83b 	bl	800e974 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP4BodyEEvT_S5_>
    }
 800e8fe:	bf00      	nop
 800e900:	3708      	adds	r7, #8
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}

0800e906 <_ZN9__gnu_cxx13new_allocatorIP9StatementED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e906:	b480      	push	{r7}
 800e908:	b083      	sub	sp, #12
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	4618      	mov	r0, r3
 800e912:	370c      	adds	r7, #12
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr

0800e91c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9StatementEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
 800e926:	bf00      	nop
 800e928:	370c      	adds	r7, #12
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr

0800e932 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionED1Ev>:
 800e932:	b480      	push	{r7}
 800e934:	b083      	sub	sp, #12
 800e936:	af00      	add	r7, sp, #0
 800e938:	6078      	str	r0, [r7, #4]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4618      	mov	r0, r3
 800e93e:	370c      	adds	r7, #12
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10ExpressionEEvT_S5_>:
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
 800e952:	bf00      	nop
 800e954:	370c      	adds	r7, #12
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr

0800e95e <_ZN9__gnu_cxx13new_allocatorIP4BodyED1Ev>:
 800e95e:	b480      	push	{r7}
 800e960:	b083      	sub	sp, #12
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4618      	mov	r0, r3
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP4BodyEEvT_S5_>:
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
 800e97e:	bf00      	nop
 800e980:	370c      	adds	r7, #12
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr
	...

0800e98c <_Z41__static_initialization_and_destruction_0ii>:
 800e98c:	b590      	push	{r4, r7, lr}
 800e98e:	b0e7      	sub	sp, #412	; 0x19c
 800e990:	af02      	add	r7, sp, #8
 800e992:	1d3b      	adds	r3, r7, #4
 800e994:	6018      	str	r0, [r3, #0]
 800e996:	463b      	mov	r3, r7
 800e998:	6019      	str	r1, [r3, #0]
 800e99a:	1d3b      	adds	r3, r7, #4
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	f040 819d 	bne.w	800ecde <_Z41__static_initialization_and_destruction_0ii+0x352>
 800e9a4:	463b      	mov	r3, r7
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	f040 8196 	bne.w	800ecde <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 800e9b2:	f107 0314 	add.w	r3, r7, #20
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	2322      	movs	r3, #34	; 0x22
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	2100      	movs	r1, #0
 800e9be:	f008 fa9d 	bl	8016efc <memset>
 800e9c2:	f107 0314 	add.w	r3, r7, #20
 800e9c6:	223a      	movs	r2, #58	; 0x3a
 800e9c8:	701a      	strb	r2, [r3, #0]
 800e9ca:	f107 0314 	add.w	r3, r7, #20
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	705a      	strb	r2, [r3, #1]
 800e9d2:	f107 0314 	add.w	r3, r7, #20
 800e9d6:	220a      	movs	r2, #10
 800e9d8:	709a      	strb	r2, [r3, #2]
 800e9da:	f107 0314 	add.w	r3, r7, #20
 800e9de:	220a      	movs	r2, #10
 800e9e0:	70da      	strb	r2, [r3, #3]
 800e9e2:	f107 0314 	add.w	r3, r7, #20
 800e9e6:	222c      	movs	r2, #44	; 0x2c
 800e9e8:	711a      	strb	r2, [r3, #4]
 800e9ea:	f107 0314 	add.w	r3, r7, #20
 800e9ee:	220c      	movs	r2, #12
 800e9f0:	715a      	strb	r2, [r3, #5]
 800e9f2:	f107 0314 	add.w	r3, r7, #20
 800e9f6:	222e      	movs	r2, #46	; 0x2e
 800e9f8:	719a      	strb	r2, [r3, #6]
 800e9fa:	f107 0314 	add.w	r3, r7, #20
 800e9fe:	220b      	movs	r2, #11
 800ea00:	71da      	strb	r2, [r3, #7]
 800ea02:	f107 0314 	add.w	r3, r7, #20
 800ea06:	225b      	movs	r2, #91	; 0x5b
 800ea08:	721a      	strb	r2, [r3, #8]
 800ea0a:	f107 0314 	add.w	r3, r7, #20
 800ea0e:	220d      	movs	r2, #13
 800ea10:	725a      	strb	r2, [r3, #9]
 800ea12:	f107 0314 	add.w	r3, r7, #20
 800ea16:	225d      	movs	r2, #93	; 0x5d
 800ea18:	729a      	strb	r2, [r3, #10]
 800ea1a:	f107 0314 	add.w	r3, r7, #20
 800ea1e:	220e      	movs	r2, #14
 800ea20:	72da      	strb	r2, [r3, #11]
 800ea22:	f107 0314 	add.w	r3, r7, #20
 800ea26:	227c      	movs	r2, #124	; 0x7c
 800ea28:	731a      	strb	r2, [r3, #12]
 800ea2a:	f107 0314 	add.w	r3, r7, #20
 800ea2e:	2215      	movs	r2, #21
 800ea30:	735a      	strb	r2, [r3, #13]
 800ea32:	f107 0314 	add.w	r3, r7, #20
 800ea36:	2226      	movs	r2, #38	; 0x26
 800ea38:	739a      	strb	r2, [r3, #14]
 800ea3a:	f107 0314 	add.w	r3, r7, #20
 800ea3e:	2216      	movs	r2, #22
 800ea40:	73da      	strb	r2, [r3, #15]
 800ea42:	f107 0314 	add.w	r3, r7, #20
 800ea46:	222b      	movs	r2, #43	; 0x2b
 800ea48:	741a      	strb	r2, [r3, #16]
 800ea4a:	f107 0314 	add.w	r3, r7, #20
 800ea4e:	221f      	movs	r2, #31
 800ea50:	745a      	strb	r2, [r3, #17]
 800ea52:	f107 0314 	add.w	r3, r7, #20
 800ea56:	222d      	movs	r2, #45	; 0x2d
 800ea58:	749a      	strb	r2, [r3, #18]
 800ea5a:	f107 0314 	add.w	r3, r7, #20
 800ea5e:	2220      	movs	r2, #32
 800ea60:	74da      	strb	r2, [r3, #19]
 800ea62:	f107 0314 	add.w	r3, r7, #20
 800ea66:	222a      	movs	r2, #42	; 0x2a
 800ea68:	751a      	strb	r2, [r3, #20]
 800ea6a:	f107 0314 	add.w	r3, r7, #20
 800ea6e:	2221      	movs	r2, #33	; 0x21
 800ea70:	755a      	strb	r2, [r3, #21]
 800ea72:	f107 0314 	add.w	r3, r7, #20
 800ea76:	222f      	movs	r2, #47	; 0x2f
 800ea78:	759a      	strb	r2, [r3, #22]
 800ea7a:	f107 0314 	add.w	r3, r7, #20
 800ea7e:	2222      	movs	r2, #34	; 0x22
 800ea80:	75da      	strb	r2, [r3, #23]
 800ea82:	f107 0314 	add.w	r3, r7, #20
 800ea86:	225e      	movs	r2, #94	; 0x5e
 800ea88:	761a      	strb	r2, [r3, #24]
 800ea8a:	f107 0314 	add.w	r3, r7, #20
 800ea8e:	2223      	movs	r2, #35	; 0x23
 800ea90:	765a      	strb	r2, [r3, #25]
 800ea92:	f107 0314 	add.w	r3, r7, #20
 800ea96:	2225      	movs	r2, #37	; 0x25
 800ea98:	769a      	strb	r2, [r3, #26]
 800ea9a:	f107 0314 	add.w	r3, r7, #20
 800ea9e:	2224      	movs	r2, #36	; 0x24
 800eaa0:	76da      	strb	r2, [r3, #27]
 800eaa2:	f107 0314 	add.w	r3, r7, #20
 800eaa6:	2228      	movs	r2, #40	; 0x28
 800eaa8:	771a      	strb	r2, [r3, #28]
 800eaaa:	f107 0314 	add.w	r3, r7, #20
 800eaae:	2226      	movs	r2, #38	; 0x26
 800eab0:	775a      	strb	r2, [r3, #29]
 800eab2:	f107 0314 	add.w	r3, r7, #20
 800eab6:	2229      	movs	r2, #41	; 0x29
 800eab8:	779a      	strb	r2, [r3, #30]
 800eaba:	f107 0314 	add.w	r3, r7, #20
 800eabe:	2227      	movs	r2, #39	; 0x27
 800eac0:	77da      	strb	r2, [r3, #31]
 800eac2:	f107 0314 	add.w	r3, r7, #20
 800eac6:	2225      	movs	r2, #37	; 0x25
 800eac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800eacc:	f107 030c 	add.w	r3, r7, #12
 800ead0:	f107 0214 	add.w	r2, r7, #20
 800ead4:	601a      	str	r2, [r3, #0]
 800ead6:	f107 030c 	add.w	r3, r7, #12
 800eada:	2211      	movs	r2, #17
 800eadc:	605a      	str	r2, [r3, #4]
 800eade:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7f2 fe03 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 800eae8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800eaec:	f107 020c 	add.w	r2, r7, #12
 800eaf0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	460b      	mov	r3, r1
 800eaf8:	ca06      	ldmia	r2, {r1, r2}
 800eafa:	4885      	ldr	r0, [pc, #532]	; (800ed10 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800eafc:	f7f2 fe0f 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800eb00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7f2 fdfe 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 800eb0a:	2305      	movs	r3, #5
 800eb0c:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 800eb10:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 800eb14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eb18:	497e      	ldr	r1, [pc, #504]	; (800ed14 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7f2 fac4 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 800eb20:	2306      	movs	r3, #6
 800eb22:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 800eb26:	f207 1263 	addw	r2, r7, #355	; 0x163
 800eb2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eb2e:	331c      	adds	r3, #28
 800eb30:	4979      	ldr	r1, [pc, #484]	; (800ed18 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7f2 fae0 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 800eb38:	2307      	movs	r3, #7
 800eb3a:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 800eb3e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800eb42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eb46:	3338      	adds	r3, #56	; 0x38
 800eb48:	4974      	ldr	r1, [pc, #464]	; (800ed1c <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7f2 fad4 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 800eb50:	2308      	movs	r3, #8
 800eb52:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 800eb56:	f207 1265 	addw	r2, r7, #357	; 0x165
 800eb5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eb5e:	3354      	adds	r3, #84	; 0x54
 800eb60:	496f      	ldr	r1, [pc, #444]	; (800ed20 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7f2 faa0 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 800eb68:	2309      	movs	r3, #9
 800eb6a:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800eb6e:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 800eb72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eb76:	3370      	adds	r3, #112	; 0x70
 800eb78:	496a      	ldr	r1, [pc, #424]	; (800ed24 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7f2 fae4 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 800eb80:	2310      	movs	r3, #16
 800eb82:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 800eb86:	f207 1267 	addw	r2, r7, #359	; 0x167
 800eb8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eb8e:	338c      	adds	r3, #140	; 0x8c
 800eb90:	4965      	ldr	r1, [pc, #404]	; (800ed28 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7f2 fb00 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 800eb98:	2311      	movs	r3, #17
 800eb9a:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800eb9e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800eba2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eba6:	33a8      	adds	r3, #168	; 0xa8
 800eba8:	4960      	ldr	r1, [pc, #384]	; (800ed2c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7f2 facc 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 800ebb0:	2312      	movs	r3, #18
 800ebb2:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 800ebb6:	f207 1269 	addw	r2, r7, #361	; 0x169
 800ebba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ebbe:	33c4      	adds	r3, #196	; 0xc4
 800ebc0:	495b      	ldr	r1, [pc, #364]	; (800ed30 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7f2 fa70 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 800ebc8:	2313      	movs	r3, #19
 800ebca:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800ebce:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800ebd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ebd6:	33e0      	adds	r3, #224	; 0xe0
 800ebd8:	4956      	ldr	r1, [pc, #344]	; (800ed34 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7f2 fa8c 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 800ebe0:	2314      	movs	r3, #20
 800ebe2:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 800ebe6:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800ebea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ebee:	33fc      	adds	r3, #252	; 0xfc
 800ebf0:	4951      	ldr	r1, [pc, #324]	; (800ed38 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7f2 faf8 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 800ebf8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ebfc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ec00:	601a      	str	r2, [r3, #0]
 800ec02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ec06:	220a      	movs	r2, #10
 800ec08:	605a      	str	r2, [r3, #4]
 800ec0a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7f2 fe12 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 800ec14:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800ec18:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ec1c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ec20:	9300      	str	r3, [sp, #0]
 800ec22:	460b      	mov	r3, r1
 800ec24:	ca06      	ldmia	r2, {r1, r2}
 800ec26:	4845      	ldr	r0, [pc, #276]	; (800ed3c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800ec28:	f7f2 fe1e 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 800ec2c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7f2 fe0d 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800ec36:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800ec3a:	f504 748c 	add.w	r4, r4, #280	; 0x118
 800ec3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ec42:	429c      	cmp	r4, r3
 800ec44:	d004      	beq.n	800ec50 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 800ec46:	3c1c      	subs	r4, #28
 800ec48:	4620      	mov	r0, r4
 800ec4a:	f7f2 fa20 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 800ec4e:	e7f6      	b.n	800ec3e <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 800ec50:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800ec54:	2200      	movs	r2, #0
 800ec56:	601a      	str	r2, [r3, #0]
 800ec58:	605a      	str	r2, [r3, #4]
 800ec5a:	609a      	str	r2, [r3, #8]
 800ec5c:	233c      	movs	r3, #60	; 0x3c
 800ec5e:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 800ec62:	231b      	movs	r3, #27
 800ec64:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 800ec68:	231c      	movs	r3, #28
 800ec6a:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800ec6e:	233e      	movs	r3, #62	; 0x3e
 800ec70:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 800ec74:	2319      	movs	r3, #25
 800ec76:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800ec7a:	231a      	movs	r3, #26
 800ec7c:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 800ec80:	233d      	movs	r3, #61	; 0x3d
 800ec82:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 800ec86:	2318      	movs	r3, #24
 800ec88:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 800ec8c:	231d      	movs	r3, #29
 800ec8e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800ec92:	2321      	movs	r3, #33	; 0x21
 800ec94:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 800ec98:	2317      	movs	r3, #23
 800ec9a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800ec9e:	231e      	movs	r3, #30
 800eca0:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 800eca4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800eca8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800ecac:	2304      	movs	r3, #4
 800ecae:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800ecb2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7f2 fe06 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 800ecbc:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800ecc0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 800eccc:	ca06      	ldmia	r2, {r1, r2}
 800ecce:	481c      	ldr	r0, [pc, #112]	; (800ed40 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800ecd0:	f7f2 fe12 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800ecd4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7f2 fe01 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 800ecde:	1d3b      	adds	r3, r7, #4
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d10e      	bne.n	800ed04 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800ece6:	463b      	mov	r3, r7
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d108      	bne.n	800ed04 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800ecf2:	4813      	ldr	r0, [pc, #76]	; (800ed40 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800ecf4:	f7f7 f930 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 800ecf8:	4810      	ldr	r0, [pc, #64]	; (800ed3c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800ecfa:	f7f7 f93a 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800ecfe:	4804      	ldr	r0, [pc, #16]	; (800ed10 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800ed00:	f7f7 f944 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 800ed04:	bf00      	nop
 800ed06:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd90      	pop	{r4, r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	200002d8 	.word	0x200002d8
 800ed14:	0801a184 	.word	0x0801a184
 800ed18:	0801a18c 	.word	0x0801a18c
 800ed1c:	0801a194 	.word	0x0801a194
 800ed20:	0801a19c 	.word	0x0801a19c
 800ed24:	0801a1a4 	.word	0x0801a1a4
 800ed28:	0801a1ac 	.word	0x0801a1ac
 800ed2c:	0801a1b0 	.word	0x0801a1b0
 800ed30:	0801a1b8 	.word	0x0801a1b8
 800ed34:	0801a1c0 	.word	0x0801a1c0
 800ed38:	0801a1c8 	.word	0x0801a1c8
 800ed3c:	200002f0 	.word	0x200002f0
 800ed40:	20000308 	.word	0x20000308

0800ed44 <_GLOBAL__sub_I__ZN4BodyD2Ev>:
 800ed44:	b580      	push	{r7, lr}
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ed4c:	2001      	movs	r0, #1
 800ed4e:	f7ff fe1d 	bl	800e98c <_Z41__static_initialization_and_destruction_0ii>
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <_GLOBAL__sub_D__ZN4BodyD2Ev>:
 800ed54:	b580      	push	{r7, lr}
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	f7ff fe15 	bl	800e98c <_Z41__static_initialization_and_destruction_0ii>
 800ed62:	bd80      	pop	{r7, pc}

0800ed64 <_ZN5TokenD1Ev>:
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	3304      	adds	r3, #4
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7f7 fb87 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3708      	adds	r7, #8
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <_ZN5Token9get_valueB5cxx11Ev>:

Token::~Token()
= default;

token_value Token::get_value()
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
	return value;
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	3304      	adds	r3, #4
 800ed8e:	4619      	mov	r1, r3
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f7f7 ff4e 	bl	8006c32 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS6_>
}
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	3708      	adds	r7, #8
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>:

void Token::set_value(token_value value)
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b082      	sub	sp, #8
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	6039      	str	r1, [r7, #0]
	this->value = std::move(value);
 800eda8:	6838      	ldr	r0, [r7, #0]
 800edaa:	f7fc f92d 	bl	800b008 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 800edae:	4602      	mov	r2, r0
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	3304      	adds	r3, #4
 800edb4:	4611      	mov	r1, r2
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7fd fc8b 	bl	800c6d2 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS6_>
}
 800edbc:	bf00      	nop
 800edbe:	3708      	adds	r7, #8
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <_ZN5Token8get_typeEv>:

token_type Token::get_type()
{
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
	return type;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	781b      	ldrb	r3, [r3, #0]
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	370c      	adds	r7, #12
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr

0800eddc <_ZN5Token8set_typeE10token_type>:

void Token::set_type(token_type type)
{
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	460b      	mov	r3, r1
 800ede6:	70fb      	strb	r3, [r7, #3]
	this->type = type;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	78fa      	ldrb	r2, [r7, #3]
 800edec:	701a      	strb	r2, [r3, #0]
}
 800edee:	bf00      	nop
 800edf0:	370c      	adds	r7, #12
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr

0800edfa <_ZN5Token8get_lineEv>:

int Token::get_line()
{
 800edfa:	b480      	push	{r7}
 800edfc:	b083      	sub	sp, #12
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
	return line;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6a1b      	ldr	r3, [r3, #32]
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	370c      	adds	r7, #12
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr

0800ee12 <_ZN5Token8set_lineEi>:

void Token::set_line(int line)
{
 800ee12:	b480      	push	{r7}
 800ee14:	b083      	sub	sp, #12
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
 800ee1a:	6039      	str	r1, [r7, #0]
	this->line = line;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	683a      	ldr	r2, [r7, #0]
 800ee20:	621a      	str	r2, [r3, #32]
}
 800ee22:	bf00      	nop
 800ee24:	370c      	adds	r7, #12
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr

0800ee2e <_ZN5Token12get_positionEv>:

int Token::get_position()
{
 800ee2e:	b480      	push	{r7}
 800ee30:	b083      	sub	sp, #12
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
	return position;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	370c      	adds	r7, #12
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee44:	4770      	bx	lr

0800ee46 <_ZN5Token12set_positionEi>:
void Token::set_position(int position)
{
 800ee46:	b480      	push	{r7}
 800ee48:	b083      	sub	sp, #12
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	6078      	str	r0, [r7, #4]
 800ee4e:	6039      	str	r1, [r7, #0]
	this->position = position;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	683a      	ldr	r2, [r7, #0]
 800ee54:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ee56:	bf00      	nop
 800ee58:	370c      	adds	r7, #12
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr
	...

0800ee64 <_Z41__static_initialization_and_destruction_0ii>:
 800ee64:	b590      	push	{r4, r7, lr}
 800ee66:	b0e7      	sub	sp, #412	; 0x19c
 800ee68:	af02      	add	r7, sp, #8
 800ee6a:	1d3b      	adds	r3, r7, #4
 800ee6c:	6018      	str	r0, [r3, #0]
 800ee6e:	463b      	mov	r3, r7
 800ee70:	6019      	str	r1, [r3, #0]
 800ee72:	1d3b      	adds	r3, r7, #4
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	f040 819d 	bne.w	800f1b6 <_Z41__static_initialization_and_destruction_0ii+0x352>
 800ee7c:	463b      	mov	r3, r7
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee84:	4293      	cmp	r3, r2
 800ee86:	f040 8196 	bne.w	800f1b6 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 800ee8a:	f107 0314 	add.w	r3, r7, #20
 800ee8e:	4618      	mov	r0, r3
 800ee90:	2322      	movs	r3, #34	; 0x22
 800ee92:	461a      	mov	r2, r3
 800ee94:	2100      	movs	r1, #0
 800ee96:	f008 f831 	bl	8016efc <memset>
 800ee9a:	f107 0314 	add.w	r3, r7, #20
 800ee9e:	223a      	movs	r2, #58	; 0x3a
 800eea0:	701a      	strb	r2, [r3, #0]
 800eea2:	f107 0314 	add.w	r3, r7, #20
 800eea6:	2201      	movs	r2, #1
 800eea8:	705a      	strb	r2, [r3, #1]
 800eeaa:	f107 0314 	add.w	r3, r7, #20
 800eeae:	220a      	movs	r2, #10
 800eeb0:	709a      	strb	r2, [r3, #2]
 800eeb2:	f107 0314 	add.w	r3, r7, #20
 800eeb6:	220a      	movs	r2, #10
 800eeb8:	70da      	strb	r2, [r3, #3]
 800eeba:	f107 0314 	add.w	r3, r7, #20
 800eebe:	222c      	movs	r2, #44	; 0x2c
 800eec0:	711a      	strb	r2, [r3, #4]
 800eec2:	f107 0314 	add.w	r3, r7, #20
 800eec6:	220c      	movs	r2, #12
 800eec8:	715a      	strb	r2, [r3, #5]
 800eeca:	f107 0314 	add.w	r3, r7, #20
 800eece:	222e      	movs	r2, #46	; 0x2e
 800eed0:	719a      	strb	r2, [r3, #6]
 800eed2:	f107 0314 	add.w	r3, r7, #20
 800eed6:	220b      	movs	r2, #11
 800eed8:	71da      	strb	r2, [r3, #7]
 800eeda:	f107 0314 	add.w	r3, r7, #20
 800eede:	225b      	movs	r2, #91	; 0x5b
 800eee0:	721a      	strb	r2, [r3, #8]
 800eee2:	f107 0314 	add.w	r3, r7, #20
 800eee6:	220d      	movs	r2, #13
 800eee8:	725a      	strb	r2, [r3, #9]
 800eeea:	f107 0314 	add.w	r3, r7, #20
 800eeee:	225d      	movs	r2, #93	; 0x5d
 800eef0:	729a      	strb	r2, [r3, #10]
 800eef2:	f107 0314 	add.w	r3, r7, #20
 800eef6:	220e      	movs	r2, #14
 800eef8:	72da      	strb	r2, [r3, #11]
 800eefa:	f107 0314 	add.w	r3, r7, #20
 800eefe:	227c      	movs	r2, #124	; 0x7c
 800ef00:	731a      	strb	r2, [r3, #12]
 800ef02:	f107 0314 	add.w	r3, r7, #20
 800ef06:	2215      	movs	r2, #21
 800ef08:	735a      	strb	r2, [r3, #13]
 800ef0a:	f107 0314 	add.w	r3, r7, #20
 800ef0e:	2226      	movs	r2, #38	; 0x26
 800ef10:	739a      	strb	r2, [r3, #14]
 800ef12:	f107 0314 	add.w	r3, r7, #20
 800ef16:	2216      	movs	r2, #22
 800ef18:	73da      	strb	r2, [r3, #15]
 800ef1a:	f107 0314 	add.w	r3, r7, #20
 800ef1e:	222b      	movs	r2, #43	; 0x2b
 800ef20:	741a      	strb	r2, [r3, #16]
 800ef22:	f107 0314 	add.w	r3, r7, #20
 800ef26:	221f      	movs	r2, #31
 800ef28:	745a      	strb	r2, [r3, #17]
 800ef2a:	f107 0314 	add.w	r3, r7, #20
 800ef2e:	222d      	movs	r2, #45	; 0x2d
 800ef30:	749a      	strb	r2, [r3, #18]
 800ef32:	f107 0314 	add.w	r3, r7, #20
 800ef36:	2220      	movs	r2, #32
 800ef38:	74da      	strb	r2, [r3, #19]
 800ef3a:	f107 0314 	add.w	r3, r7, #20
 800ef3e:	222a      	movs	r2, #42	; 0x2a
 800ef40:	751a      	strb	r2, [r3, #20]
 800ef42:	f107 0314 	add.w	r3, r7, #20
 800ef46:	2221      	movs	r2, #33	; 0x21
 800ef48:	755a      	strb	r2, [r3, #21]
 800ef4a:	f107 0314 	add.w	r3, r7, #20
 800ef4e:	222f      	movs	r2, #47	; 0x2f
 800ef50:	759a      	strb	r2, [r3, #22]
 800ef52:	f107 0314 	add.w	r3, r7, #20
 800ef56:	2222      	movs	r2, #34	; 0x22
 800ef58:	75da      	strb	r2, [r3, #23]
 800ef5a:	f107 0314 	add.w	r3, r7, #20
 800ef5e:	225e      	movs	r2, #94	; 0x5e
 800ef60:	761a      	strb	r2, [r3, #24]
 800ef62:	f107 0314 	add.w	r3, r7, #20
 800ef66:	2223      	movs	r2, #35	; 0x23
 800ef68:	765a      	strb	r2, [r3, #25]
 800ef6a:	f107 0314 	add.w	r3, r7, #20
 800ef6e:	2225      	movs	r2, #37	; 0x25
 800ef70:	769a      	strb	r2, [r3, #26]
 800ef72:	f107 0314 	add.w	r3, r7, #20
 800ef76:	2224      	movs	r2, #36	; 0x24
 800ef78:	76da      	strb	r2, [r3, #27]
 800ef7a:	f107 0314 	add.w	r3, r7, #20
 800ef7e:	2228      	movs	r2, #40	; 0x28
 800ef80:	771a      	strb	r2, [r3, #28]
 800ef82:	f107 0314 	add.w	r3, r7, #20
 800ef86:	2226      	movs	r2, #38	; 0x26
 800ef88:	775a      	strb	r2, [r3, #29]
 800ef8a:	f107 0314 	add.w	r3, r7, #20
 800ef8e:	2229      	movs	r2, #41	; 0x29
 800ef90:	779a      	strb	r2, [r3, #30]
 800ef92:	f107 0314 	add.w	r3, r7, #20
 800ef96:	2227      	movs	r2, #39	; 0x27
 800ef98:	77da      	strb	r2, [r3, #31]
 800ef9a:	f107 0314 	add.w	r3, r7, #20
 800ef9e:	2225      	movs	r2, #37	; 0x25
 800efa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800efa4:	f107 030c 	add.w	r3, r7, #12
 800efa8:	f107 0214 	add.w	r2, r7, #20
 800efac:	601a      	str	r2, [r3, #0]
 800efae:	f107 030c 	add.w	r3, r7, #12
 800efb2:	2211      	movs	r2, #17
 800efb4:	605a      	str	r2, [r3, #4]
 800efb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800efba:	4618      	mov	r0, r3
 800efbc:	f7f2 fb97 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 800efc0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800efc4:	f107 020c 	add.w	r2, r7, #12
 800efc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800efcc:	9300      	str	r3, [sp, #0]
 800efce:	460b      	mov	r3, r1
 800efd0:	ca06      	ldmia	r2, {r1, r2}
 800efd2:	4885      	ldr	r0, [pc, #532]	; (800f1e8 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800efd4:	f7f2 fba3 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800efd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800efdc:	4618      	mov	r0, r3
 800efde:	f7f2 fb92 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 800efe2:	2305      	movs	r3, #5
 800efe4:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 800efe8:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 800efec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eff0:	497e      	ldr	r1, [pc, #504]	; (800f1ec <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7f2 f858 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 800eff8:	2306      	movs	r3, #6
 800effa:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 800effe:	f207 1263 	addw	r2, r7, #355	; 0x163
 800f002:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f006:	331c      	adds	r3, #28
 800f008:	4979      	ldr	r1, [pc, #484]	; (800f1f0 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7f2 f874 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 800f010:	2307      	movs	r3, #7
 800f012:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 800f016:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800f01a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f01e:	3338      	adds	r3, #56	; 0x38
 800f020:	4974      	ldr	r1, [pc, #464]	; (800f1f4 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800f022:	4618      	mov	r0, r3
 800f024:	f7f2 f868 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 800f028:	2308      	movs	r3, #8
 800f02a:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 800f02e:	f207 1265 	addw	r2, r7, #357	; 0x165
 800f032:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f036:	3354      	adds	r3, #84	; 0x54
 800f038:	496f      	ldr	r1, [pc, #444]	; (800f1f8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7f2 f834 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 800f040:	2309      	movs	r3, #9
 800f042:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800f046:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 800f04a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f04e:	3370      	adds	r3, #112	; 0x70
 800f050:	496a      	ldr	r1, [pc, #424]	; (800f1fc <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800f052:	4618      	mov	r0, r3
 800f054:	f7f2 f878 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 800f058:	2310      	movs	r3, #16
 800f05a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 800f05e:	f207 1267 	addw	r2, r7, #359	; 0x167
 800f062:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f066:	338c      	adds	r3, #140	; 0x8c
 800f068:	4965      	ldr	r1, [pc, #404]	; (800f200 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7f2 f894 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 800f070:	2311      	movs	r3, #17
 800f072:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800f076:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800f07a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f07e:	33a8      	adds	r3, #168	; 0xa8
 800f080:	4960      	ldr	r1, [pc, #384]	; (800f204 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800f082:	4618      	mov	r0, r3
 800f084:	f7f2 f860 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 800f088:	2312      	movs	r3, #18
 800f08a:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 800f08e:	f207 1269 	addw	r2, r7, #361	; 0x169
 800f092:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f096:	33c4      	adds	r3, #196	; 0xc4
 800f098:	495b      	ldr	r1, [pc, #364]	; (800f208 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7f2 f804 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 800f0a0:	2313      	movs	r3, #19
 800f0a2:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800f0a6:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800f0aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f0ae:	33e0      	adds	r3, #224	; 0xe0
 800f0b0:	4956      	ldr	r1, [pc, #344]	; (800f20c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7f2 f820 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 800f0b8:	2314      	movs	r3, #20
 800f0ba:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 800f0be:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800f0c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f0c6:	33fc      	adds	r3, #252	; 0xfc
 800f0c8:	4951      	ldr	r1, [pc, #324]	; (800f210 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7f2 f88c 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 800f0d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f0d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f0d8:	601a      	str	r2, [r3, #0]
 800f0da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f0de:	220a      	movs	r2, #10
 800f0e0:	605a      	str	r2, [r3, #4]
 800f0e2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7f2 fba6 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 800f0ec:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800f0f0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f0f4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800f0f8:	9300      	str	r3, [sp, #0]
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	ca06      	ldmia	r2, {r1, r2}
 800f0fe:	4845      	ldr	r0, [pc, #276]	; (800f214 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800f100:	f7f2 fbb2 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 800f104:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800f108:	4618      	mov	r0, r3
 800f10a:	f7f2 fba1 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800f10e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800f112:	f504 748c 	add.w	r4, r4, #280	; 0x118
 800f116:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f11a:	429c      	cmp	r4, r3
 800f11c:	d004      	beq.n	800f128 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 800f11e:	3c1c      	subs	r4, #28
 800f120:	4620      	mov	r0, r4
 800f122:	f7f1 ffb4 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 800f126:	e7f6      	b.n	800f116 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 800f128:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800f12c:	2200      	movs	r2, #0
 800f12e:	601a      	str	r2, [r3, #0]
 800f130:	605a      	str	r2, [r3, #4]
 800f132:	609a      	str	r2, [r3, #8]
 800f134:	233c      	movs	r3, #60	; 0x3c
 800f136:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 800f13a:	231b      	movs	r3, #27
 800f13c:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 800f140:	231c      	movs	r3, #28
 800f142:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800f146:	233e      	movs	r3, #62	; 0x3e
 800f148:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 800f14c:	2319      	movs	r3, #25
 800f14e:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800f152:	231a      	movs	r3, #26
 800f154:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 800f158:	233d      	movs	r3, #61	; 0x3d
 800f15a:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 800f15e:	2318      	movs	r3, #24
 800f160:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 800f164:	231d      	movs	r3, #29
 800f166:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800f16a:	2321      	movs	r3, #33	; 0x21
 800f16c:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 800f170:	2317      	movs	r3, #23
 800f172:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800f176:	231e      	movs	r3, #30
 800f178:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 800f17c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800f180:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800f184:	2304      	movs	r3, #4
 800f186:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800f18a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800f18e:	4618      	mov	r0, r3
 800f190:	f7f2 fb9a 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 800f194:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800f198:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	4613      	mov	r3, r2
 800f1a0:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 800f1a4:	ca06      	ldmia	r2, {r1, r2}
 800f1a6:	481c      	ldr	r0, [pc, #112]	; (800f218 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800f1a8:	f7f2 fba6 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800f1ac:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7f2 fb95 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 800f1b6:	1d3b      	adds	r3, r7, #4
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d10e      	bne.n	800f1dc <_Z41__static_initialization_and_destruction_0ii+0x378>
 800f1be:	463b      	mov	r3, r7
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1c6:	4293      	cmp	r3, r2
 800f1c8:	d108      	bne.n	800f1dc <_Z41__static_initialization_and_destruction_0ii+0x378>
 800f1ca:	4813      	ldr	r0, [pc, #76]	; (800f218 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800f1cc:	f7f6 fec4 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 800f1d0:	4810      	ldr	r0, [pc, #64]	; (800f214 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800f1d2:	f7f6 fece 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800f1d6:	4804      	ldr	r0, [pc, #16]	; (800f1e8 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800f1d8:	f7f6 fed8 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 800f1dc:	bf00      	nop
 800f1de:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd90      	pop	{r4, r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	20000320 	.word	0x20000320
 800f1ec:	0801a20c 	.word	0x0801a20c
 800f1f0:	0801a214 	.word	0x0801a214
 800f1f4:	0801a21c 	.word	0x0801a21c
 800f1f8:	0801a224 	.word	0x0801a224
 800f1fc:	0801a22c 	.word	0x0801a22c
 800f200:	0801a234 	.word	0x0801a234
 800f204:	0801a238 	.word	0x0801a238
 800f208:	0801a240 	.word	0x0801a240
 800f20c:	0801a248 	.word	0x0801a248
 800f210:	0801a250 	.word	0x0801a250
 800f214:	20000338 	.word	0x20000338
 800f218:	20000350 	.word	0x20000350

0800f21c <_GLOBAL__sub_I__ZN5TokenD2Ev>:
 800f21c:	b580      	push	{r7, lr}
 800f21e:	af00      	add	r7, sp, #0
 800f220:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f224:	2001      	movs	r0, #1
 800f226:	f7ff fe1d 	bl	800ee64 <_Z41__static_initialization_and_destruction_0ii>
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <_GLOBAL__sub_D__ZN5TokenD2Ev>:
 800f22c:	b580      	push	{r7, lr}
 800f22e:	af00      	add	r7, sp, #0
 800f230:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f234:	2000      	movs	r0, #0
 800f236:	f7ff fe15 	bl	800ee64 <_Z41__static_initialization_and_destruction_0ii>
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <_ZN11TransmitterC1EP20__UART_HandleTypeDef>:
#include <Transmitter.h>

Transmitter::Transmitter(UART_HandleTypeDef* huart)
 800f23c:	b480      	push	{r7}
 800f23e:	b083      	sub	sp, #12
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
 800f246:	4a06      	ldr	r2, [pc, #24]	; (800f260 <_ZN11TransmitterC1EP20__UART_HandleTypeDef+0x24>)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	601a      	str	r2, [r3, #0]
{
	this->huart = huart;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	683a      	ldr	r2, [r7, #0]
 800f250:	605a      	str	r2, [r3, #4]
}
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	4618      	mov	r0, r3
 800f256:	370c      	adds	r7, #12
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr
 800f260:	0801a48c 	.word	0x0801a48c

0800f264 <_ZN11TransmitterD1Ev>:
typedef int UART_HandleTypeDef;
#endif

#include <string>

class Transmitter
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	4a04      	ldr	r2, [pc, #16]	; (800f280 <_ZN11TransmitterD1Ev+0x1c>)
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	601a      	str	r2, [r3, #0]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	4618      	mov	r0, r3
 800f276:	370c      	adds	r7, #12
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr
 800f280:	0801a48c 	.word	0x0801a48c

0800f284 <_ZN11TransmitterD0Ev>:
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7ff ffe9 	bl	800f264 <_ZN11TransmitterD1Ev>
 800f292:	2108      	movs	r1, #8
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f007 fa68 	bl	801676a <_ZdlPvj>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	4618      	mov	r0, r3
 800f29e:	3708      	adds	r7, #8
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>:

Transmitter::~Transmitter()
= default;

void Transmitter::report_error(std::string message, int line, int position)
{
 800f2a4:	b5b0      	push	{r4, r5, r7, lr}
 800f2a6:	b0a2      	sub	sp, #136	; 0x88
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	60b9      	str	r1, [r7, #8]
 800f2ae:	607a      	str	r2, [r7, #4]
 800f2b0:	603b      	str	r3, [r7, #0]
	std::string full_message = message + "\nin line: " + itoa(line, nullptr, 10) + " in position: " + itoa(position, nullptr, 10) + "\n";
 800f2b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f2b6:	4a2f      	ldr	r2, [pc, #188]	; (800f374 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xd0>)
 800f2b8:	68b9      	ldr	r1, [r7, #8]
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f000 f860 	bl	800f380 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800f2c0:	220a      	movs	r2, #10
 800f2c2:	2100      	movs	r1, #0
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f007 fdd1 	bl	8016e6c <itoa>
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f2d0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7fb fa9d 	bl	800a814 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800f2da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f2de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f2e2:	4a25      	ldr	r2, [pc, #148]	; (800f378 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xd4>)
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7fb fa95 	bl	800a814 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800f2ea:	220a      	movs	r2, #10
 800f2ec:	2100      	movs	r1, #0
 800f2ee:	6838      	ldr	r0, [r7, #0]
 800f2f0:	f007 fdbc 	bl	8016e6c <itoa>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2fa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fb fa88 	bl	800a814 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800f304:	f107 0310 	add.w	r3, r7, #16
 800f308:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f30c:	4a1b      	ldr	r2, [pc, #108]	; (800f37c <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xd8>)
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fb fa80 	bl	800a814 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800f314:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f318:	4618      	mov	r0, r3
 800f31a:	f007 fc00 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f31e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f322:	4618      	mov	r0, r3
 800f324:	f007 fbfb 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f328:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f32c:	4618      	mov	r0, r3
 800f32e:	f007 fbf6 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f332:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f336:	4618      	mov	r0, r3
 800f338:	f007 fbf1 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800f33c:	b672      	cpsid	i
}
 800f33e:	bf00      	nop
#ifndef TESTS
	__disable_irq();
	while (1)
	{
		HAL_UART_Transmit(huart, (uint8_t*)full_message.c_str(), full_message.length(), 100);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	685c      	ldr	r4, [r3, #4]
 800f344:	f107 0310 	add.w	r3, r7, #16
 800f348:	4618      	mov	r0, r3
 800f34a:	f007 fccb 	bl	8016ce4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800f34e:	4605      	mov	r5, r0
 800f350:	f107 0310 	add.w	r3, r7, #16
 800f354:	4618      	mov	r0, r3
 800f356:	f007 fc18 	bl	8016b8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800f35a:	4603      	mov	r3, r0
 800f35c:	b29a      	uxth	r2, r3
 800f35e:	2364      	movs	r3, #100	; 0x64
 800f360:	4629      	mov	r1, r5
 800f362:	4620      	mov	r0, r4
 800f364:	f006 fa7e 	bl	8015864 <HAL_UART_Transmit>
		HAL_Delay(500);
 800f368:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f36c:	f004 fdfe 	bl	8013f6c <HAL_Delay>
		HAL_UART_Transmit(huart, (uint8_t*)full_message.c_str(), full_message.length(), 100);
 800f370:	e7e6      	b.n	800f340 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x9c>
 800f372:	bf00      	nop
 800f374:	0801a254 	.word	0x0801a254
 800f378:	0801a260 	.word	0x0801a260
 800f37c:	0801a270 	.word	0x0801a270

0800f380 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	60f8      	str	r0, [r7, #12]
 800f388:	60b9      	str	r1, [r7, #8]
 800f38a:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 800f38c:	68b9      	ldr	r1, [r7, #8]
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f007 fcf2 	bl	8016d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 800f394:	6879      	ldr	r1, [r7, #4]
 800f396:	68f8      	ldr	r0, [r7, #12]
 800f398:	f007 fc8e 	bl	8016cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 800f39c:	bf00      	nop
    }
 800f39e:	68f8      	ldr	r0, [r7, #12]
 800f3a0:	3710      	adds	r7, #16
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}

0800f3a6 <_ZN6Parser31parse_variable_or_function_callEP17Primal_expression>:
#include "Parser.h"

void Parser::parse_variable_or_function_call(Primal_expression *exp)
{
 800f3a6:	b580      	push	{r7, lr}
 800f3a8:	b092      	sub	sp, #72	; 0x48
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	6078      	str	r0, [r7, #4]
 800f3ae:	6039      	str	r1, [r7, #0]
	std::string id(std::get<std::string>(token_buffer.get_value()));
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f103 0208 	add.w	r2, r3, #8
 800f3b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3ba:	4611      	mov	r1, r2
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7ff fcdf 	bl	800ed80 <_ZN5Token9get_valueB5cxx11Ev>
 800f3c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7fb f9dc 	bl	800a784 <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	f107 030c 	add.w	r3, r7, #12
 800f3d2:	4611      	mov	r1, r2
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f007 fb88 	bl	8016aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800f3da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7f7 f850 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	get_next_token();
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7fb f801 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	if (token_buffer.get_type() == TOKEN_LEFT_BRACKET)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	3308      	adds	r3, #8
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7ff fce8 	bl	800edc4 <_ZN5Token8get_typeEv>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b26      	cmp	r3, #38	; 0x26
 800f3f8:	bf0c      	ite	eq
 800f3fa:	2301      	moveq	r3, #1
 800f3fc:	2300      	movne	r3, #0
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	2b00      	cmp	r3, #0
 800f402:	d013      	beq.n	800f42c <_ZN6Parser31parse_variable_or_function_callEP17Primal_expression+0x86>
	{
		exp->type = PRIMAL_FUNCTION_CALL;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	2205      	movs	r2, #5
 800f408:	701a      	strb	r2, [r3, #0]
		exp->content = parse_function_call(id);
 800f40a:	f107 030c 	add.w	r3, r7, #12
 800f40e:	4619      	mov	r1, r3
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7fa fdc9 	bl	8009fa8 <_ZN6Parser19parse_function_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800f416:	4603      	mov	r3, r0
 800f418:	643b      	str	r3, [r7, #64]	; 0x40
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	3304      	adds	r3, #4
 800f41e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f422:	4611      	mov	r1, r2
 800f424:	4618      	mov	r0, r3
 800f426:	f000 fd21 	bl	800fe6c <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
 800f42a:	e012      	b.n	800f452 <_ZN6Parser31parse_variable_or_function_callEP17Primal_expression+0xac>
	}
	else
	{
		exp->type = PRIMAL_VARIABLE;
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	2204      	movs	r2, #4
 800f430:	701a      	strb	r2, [r3, #0]
		exp->content = parse_variable(id);
 800f432:	f107 030c 	add.w	r3, r7, #12
 800f436:	4619      	mov	r1, r3
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f7fa fc87 	bl	8009d4c <_ZN6Parser14parse_variableERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800f43e:	4603      	mov	r3, r0
 800f440:	647b      	str	r3, [r7, #68]	; 0x44
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	3304      	adds	r3, #4
 800f446:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f44a:	4611      	mov	r1, r2
 800f44c:	4618      	mov	r0, r3
 800f44e:	f000 fd37 	bl	800fec0 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
	std::string id(std::get<std::string>(token_buffer.get_value()));
 800f452:	f107 030c 	add.w	r3, r7, #12
 800f456:	4618      	mov	r0, r3
 800f458:	f007 fb61 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800f45c:	bf00      	nop
 800f45e:	3748      	adds	r7, #72	; 0x48
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1Ev>:
      variant() = default;
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	4618      	mov	r0, r3
 800f470:	f000 fd9b 	bl	800ffaa <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1Ev>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	4618      	mov	r0, r3
 800f478:	3708      	adds	r7, #8
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}

0800f47e <_ZN17Primal_expressionC1Ev>:
	PRIMAL_STRING,
	PRIMAL_VARIABLE,
	PRIMAL_FUNCTION_CALL
}primal_type;

class Primal_expression
 800f47e:	b580      	push	{r7, lr}
 800f480:	b082      	sub	sp, #8
 800f482:	af00      	add	r7, sp, #0
 800f484:	6078      	str	r0, [r7, #4]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	3304      	adds	r3, #4
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7ff ffea 	bl	800f464 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1Ev>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4618      	mov	r0, r3
 800f494:	3708      	adds	r7, #8
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
	...

0800f49c <_ZN6Parser23parse_primal_expressionEv>:

Primal_expression* Parser::parse_primal_expression()
{
 800f49c:	b590      	push	{r4, r7, lr}
 800f49e:	b0a7      	sub	sp, #156	; 0x9c
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
	auto exp = new Primal_expression();
 800f4a4:	2020      	movs	r0, #32
 800f4a6:	f007 f962 	bl	801676e <_Znwj>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	461c      	mov	r4, r3
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	2320      	movs	r3, #32
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	2100      	movs	r1, #0
 800f4b6:	f007 fd21 	bl	8016efc <memset>
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	f7ff ffdf 	bl	800f47e <_ZN17Primal_expressionC1Ev>
 800f4c0:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
	switch(token_buffer.get_type())
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	3308      	adds	r3, #8
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7ff fc7b 	bl	800edc4 <_ZN5Token8get_typeEv>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	3b02      	subs	r3, #2
 800f4d2:	2b0d      	cmp	r3, #13
 800f4d4:	f200 80c1 	bhi.w	800f65a <_ZN6Parser23parse_primal_expressionEv+0x1be>
 800f4d8:	a201      	add	r2, pc, #4	; (adr r2, 800f4e0 <_ZN6Parser23parse_primal_expressionEv+0x44>)
 800f4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4de:	bf00      	nop
 800f4e0:	0800f64f 	.word	0x0800f64f
 800f4e4:	0800f563 	.word	0x0800f563
 800f4e8:	0800f5a9 	.word	0x0800f5a9
 800f4ec:	0800f519 	.word	0x0800f519
 800f4f0:	0800f53f 	.word	0x0800f53f
 800f4f4:	0800f65b 	.word	0x0800f65b
 800f4f8:	0800f65b 	.word	0x0800f65b
 800f4fc:	0800f65b 	.word	0x0800f65b
 800f500:	0800f65b 	.word	0x0800f65b
 800f504:	0800f65b 	.word	0x0800f65b
 800f508:	0800f65b 	.word	0x0800f65b
 800f50c:	0800f65b 	.word	0x0800f65b
 800f510:	0800f65b 	.word	0x0800f65b
 800f514:	0800f5ef 	.word	0x0800f5ef
	{
	case TOKEN_TRUE:
		exp->type = PRIMAL_BOOL;
 800f518:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f51c:	2200      	movs	r2, #0
 800f51e:	701a      	strb	r2, [r3, #0]
		exp->content = true;
 800f520:	2301      	movs	r3, #1
 800f522:	72bb      	strb	r3, [r7, #10]
 800f524:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f528:	3304      	adds	r3, #4
 800f52a:	f107 020a 	add.w	r2, r7, #10
 800f52e:	4611      	mov	r1, r2
 800f530:	4618      	mov	r0, r3
 800f532:	f000 fd47 	bl	800ffc4 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
		get_next_token();
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7fa ff58 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		break;
 800f53c:	e0ab      	b.n	800f696 <_ZN6Parser23parse_primal_expressionEv+0x1fa>
	case TOKEN_FALSE:
		exp->type = PRIMAL_BOOL;
 800f53e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f542:	2200      	movs	r2, #0
 800f544:	701a      	strb	r2, [r3, #0]
		exp->content = false;
 800f546:	2300      	movs	r3, #0
 800f548:	72fb      	strb	r3, [r7, #11]
 800f54a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f54e:	3304      	adds	r3, #4
 800f550:	f107 020b 	add.w	r2, r7, #11
 800f554:	4611      	mov	r1, r2
 800f556:	4618      	mov	r0, r3
 800f558:	f000 fd34 	bl	800ffc4 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
		get_next_token();
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f7fa ff45 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	case TOKEN_INT:
		exp->type = PRIMAL_INT;
 800f562:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f566:	2201      	movs	r2, #1
 800f568:	701a      	strb	r2, [r3, #0]
		exp->content = std::get<int>(token_buffer.get_value());
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f103 0208 	add.w	r2, r3, #8
 800f570:	f107 030c 	add.w	r3, r7, #12
 800f574:	4611      	mov	r1, r2
 800f576:	4618      	mov	r0, r3
 800f578:	f7ff fc02 	bl	800ed80 <_ZN5Token9get_valueB5cxx11Ev>
 800f57c:	f107 030c 	add.w	r3, r7, #12
 800f580:	4618      	mov	r0, r3
 800f582:	f000 fd4a 	bl	801001a <_ZSt3getIiJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEOT_OSt7variantIJDpT0_EE>
 800f586:	4602      	mov	r2, r0
 800f588:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f58c:	3304      	adds	r3, #4
 800f58e:	4611      	mov	r1, r2
 800f590:	4618      	mov	r0, r3
 800f592:	f000 fd52 	bl	801003a <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIiEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
 800f596:	f107 030c 	add.w	r3, r7, #12
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7f6 ff72 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
		get_next_token();
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f7fa ff23 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		break;
 800f5a6:	e076      	b.n	800f696 <_ZN6Parser23parse_primal_expressionEv+0x1fa>
	case TOKEN_FLOAT:
		exp->type = PRIMAL_FLOAT;
 800f5a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5ac:	2202      	movs	r2, #2
 800f5ae:	701a      	strb	r2, [r3, #0]
		exp->content = std::get<float>(token_buffer.get_value());
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f103 0208 	add.w	r2, r3, #8
 800f5b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5ba:	4611      	mov	r1, r2
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7ff fbdf 	bl	800ed80 <_ZN5Token9get_valueB5cxx11Ev>
 800f5c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f000 fd61 	bl	801008e <_ZSt3getIfJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEOT_OSt7variantIJDpT0_EE>
 800f5cc:	4602      	mov	r2, r0
 800f5ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5d2:	3304      	adds	r3, #4
 800f5d4:	4611      	mov	r1, r2
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f000 fd69 	bl	80100ae <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIfEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
 800f5dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7f6 ff4f 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
		get_next_token();
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f7fa ff00 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		break;
 800f5ec:	e053      	b.n	800f696 <_ZN6Parser23parse_primal_expressionEv+0x1fa>
	case TOKEN_STRING:
		exp->type = PRIMAL_STRING;
 800f5ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5f2:	2203      	movs	r2, #3
 800f5f4:	701a      	strb	r2, [r3, #0]
		exp->content = std::string(std::get<std::string>(token_buffer.get_value()));
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f103 0208 	add.w	r2, r3, #8
 800f5fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f600:	4611      	mov	r1, r2
 800f602:	4618      	mov	r0, r3
 800f604:	f7ff fbbc 	bl	800ed80 <_ZN5Token9get_valueB5cxx11Ev>
 800f608:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7fb f8b9 	bl	800a784 <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 800f612:	4602      	mov	r2, r0
 800f614:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f618:	4611      	mov	r1, r2
 800f61a:	4618      	mov	r0, r3
 800f61c:	f007 fa65 	bl	8016aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800f620:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f624:	3304      	adds	r3, #4
 800f626:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f62a:	4611      	mov	r1, r2
 800f62c:	4618      	mov	r0, r3
 800f62e:	f000 fd68 	bl	8010102 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
 800f632:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f636:	4618      	mov	r0, r3
 800f638:	f007 fa71 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f63c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f640:	4618      	mov	r0, r3
 800f642:	f7f6 ff1f 	bl	8006484 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
		get_next_token();
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f7fa fed0 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		break;
 800f64c:	e023      	b.n	800f696 <_ZN6Parser23parse_primal_expressionEv+0x1fa>
	case TOKEN_IDENTIFIER:
		parse_variable_or_function_call(exp);
 800f64e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f7ff fea7 	bl	800f3a6 <_ZN6Parser31parse_variable_or_function_callEP17Primal_expression>
		break;
 800f658:	e01d      	b.n	800f696 <_ZN6Parser23parse_primal_expressionEv+0x1fa>
	default:
		report_error("expression");
 800f65a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800f65e:	4618      	mov	r0, r3
 800f660:	f007 f896 	bl	8016790 <_ZNSaIcEC1Ev>
 800f664:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800f668:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f66c:	490d      	ldr	r1, [pc, #52]	; (800f6a4 <_ZN6Parser23parse_primal_expressionEv+0x208>)
 800f66e:	4618      	mov	r0, r3
 800f670:	f7f2 f890 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800f674:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f678:	4619      	mov	r1, r3
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f7fa fbcc 	bl	8009e18 <_ZN6Parser12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800f680:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f684:	4618      	mov	r0, r3
 800f686:	f007 fa4a 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f68a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800f68e:	4618      	mov	r0, r3
 800f690:	f007 f87f 	bl	8016792 <_ZNSaIcED1Ev>
		break;
 800f694:	bf00      	nop
	}
	return exp;
 800f696:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	379c      	adds	r7, #156	; 0x9c
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd90      	pop	{r4, r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	0801a274 	.word	0x0801a274

0800f6a8 <_ZN6Parser23parse_nested_expressionEv>:

Expression* Parser::parse_nested_expression()
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b08a      	sub	sp, #40	; 0x28
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
	auto exp = parse_expression();
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f000 fb9b 	bl	800fdec <_ZN6Parser16parse_expressionEv>
 800f6b6:	6278      	str	r0, [r7, #36]	; 0x24
	assert_token(TOKEN_RIGHT_BRACKET, "closing bracket");
 800f6b8:	f107 0320 	add.w	r3, r7, #32
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f007 f867 	bl	8016790 <_ZNSaIcEC1Ev>
 800f6c2:	f107 0220 	add.w	r2, r7, #32
 800f6c6:	f107 0308 	add.w	r3, r7, #8
 800f6ca:	490e      	ldr	r1, [pc, #56]	; (800f704 <_ZN6Parser23parse_nested_expressionEv+0x5c>)
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7f2 f861 	bl	8001794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800f6d2:	f107 0308 	add.w	r3, r7, #8
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	2127      	movs	r1, #39	; 0x27
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f7fa fbc4 	bl	8009e68 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800f6e0:	f107 0308 	add.w	r3, r7, #8
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f007 fa1a 	bl	8016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f6ea:	f107 0320 	add.w	r3, r7, #32
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f007 f84f 	bl	8016792 <_ZNSaIcED1Ev>
	get_next_token();
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f7fa fe79 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	return exp;
 800f6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3728      	adds	r7, #40	; 0x28
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	0801a280 	.word	0x0801a280

0800f708 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEC1Ev>:
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	4618      	mov	r0, r3
 800f714:	f000 fd6c 	bl	80101f0 <_ZNSt8__detail9__variant13_Variant_baseIJP17Primal_expressionP10ExpressionEEC1Ev>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4618      	mov	r0, r3
 800f71c:	3708      	adds	r7, #8
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}

0800f722 <_ZN19Priority_expressionC1Ev>:
	std::variant<bool, int, float, std::string, Variable*, Function_call*> content;
};

class Expression;

class Priority_expression
 800f722:	b580      	push	{r7, lr}
 800f724:	b082      	sub	sp, #8
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7ff ffeb 	bl	800f708 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEC1Ev>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	4618      	mov	r0, r3
 800f736:	3708      	adds	r7, #8
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <_ZN6Parser25parse_priority_expressionEv>:

Priority_expression* Parser::parse_priority_expression()
{
 800f73c:	b590      	push	{r4, r7, lr}
 800f73e:	b087      	sub	sp, #28
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
	auto exp = new Priority_expression();
 800f744:	2008      	movs	r0, #8
 800f746:	f007 f812 	bl	801676e <_Znwj>
 800f74a:	4603      	mov	r3, r0
 800f74c:	461c      	mov	r4, r3
 800f74e:	2300      	movs	r3, #0
 800f750:	6023      	str	r3, [r4, #0]
 800f752:	2300      	movs	r3, #0
 800f754:	7123      	strb	r3, [r4, #4]
 800f756:	4620      	mov	r0, r4
 800f758:	f7ff ffe3 	bl	800f722 <_ZN19Priority_expressionC1Ev>
 800f75c:	617c      	str	r4, [r7, #20]
	if(token_buffer.get_type() == TOKEN_LEFT_BRACKET)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	3308      	adds	r3, #8
 800f762:	4618      	mov	r0, r3
 800f764:	f7ff fb2e 	bl	800edc4 <_ZN5Token8get_typeEv>
 800f768:	4603      	mov	r3, r0
 800f76a:	2b26      	cmp	r3, #38	; 0x26
 800f76c:	bf0c      	ite	eq
 800f76e:	2301      	moveq	r3, #1
 800f770:	2300      	movne	r3, #0
 800f772:	b2db      	uxtb	r3, r3
 800f774:	2b00      	cmp	r3, #0
 800f776:	d00f      	beq.n	800f798 <_ZN6Parser25parse_priority_expressionEv+0x5c>
	{
		get_next_token();
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f7fa fe37 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		exp->exp = parse_nested_expression();
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f7ff ff92 	bl	800f6a8 <_ZN6Parser23parse_nested_expressionEv>
 800f784:	4603      	mov	r3, r0
 800f786:	60fb      	str	r3, [r7, #12]
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	f107 020c 	add.w	r2, r7, #12
 800f78e:	4611      	mov	r1, r2
 800f790:	4618      	mov	r0, r3
 800f792:	f000 fd3a 	bl	801020a <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>
 800f796:	e00b      	b.n	800f7b0 <_ZN6Parser25parse_priority_expressionEv+0x74>
	}
	else
	{
		exp->exp = parse_primal_expression();
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f7ff fe7f 	bl	800f49c <_ZN6Parser23parse_primal_expressionEv>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	613b      	str	r3, [r7, #16]
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	f107 0210 	add.w	r2, r7, #16
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f000 fd57 	bl	801025e <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>
	}
	return exp;
 800f7b0:	697b      	ldr	r3, [r7, #20]
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	371c      	adds	r7, #28
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd90      	pop	{r4, r7, pc}

0800f7ba <_ZN6Parser20match_unary_operatorEP16Unary_expression>:

bool Parser::match_unary_operator(Unary_expression* exp)
{
 800f7ba:	b580      	push	{r7, lr}
 800f7bc:	b082      	sub	sp, #8
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
 800f7c2:	6039      	str	r1, [r7, #0]
	switch(token_buffer.get_type())
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	3308      	adds	r3, #8
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7ff fafb 	bl	800edc4 <_ZN5Token8get_typeEv>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b17      	cmp	r3, #23
 800f7d2:	d005      	beq.n	800f7e0 <_ZN6Parser20match_unary_operatorEP16Unary_expression+0x26>
 800f7d4:	2b20      	cmp	r3, #32
 800f7d6:	d107      	bne.n	800f7e8 <_ZN6Parser20match_unary_operatorEP16Unary_expression+0x2e>
	{
	case TOKEN_MINUS:
		exp->op = UN_OP_MINUS;
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	711a      	strb	r2, [r3, #4]
		break;
 800f7de:	e005      	b.n	800f7ec <_ZN6Parser20match_unary_operatorEP16Unary_expression+0x32>
	case TOKEN_EXCLAMATION:
		exp->op = UN_OP_EXCLAMATION;
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	2202      	movs	r2, #2
 800f7e4:	711a      	strb	r2, [r3, #4]
		break;
 800f7e6:	e001      	b.n	800f7ec <_ZN6Parser20match_unary_operatorEP16Unary_expression+0x32>
	default:
		return false;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	e000      	b.n	800f7ee <_ZN6Parser20match_unary_operatorEP16Unary_expression+0x34>
	}
	return true;
 800f7ec:	2301      	movs	r3, #1
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3708      	adds	r7, #8
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}

0800f7f6 <_ZN6Parser22parse_unary_expressionEv>:

Unary_expression* Parser::parse_unary_expression()
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b084      	sub	sp, #16
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
	auto exp = new Unary_expression();
 800f7fe:	2008      	movs	r0, #8
 800f800:	f006 ffb5 	bl	801676e <_Znwj>
 800f804:	4603      	mov	r3, r0
 800f806:	2200      	movs	r2, #0
 800f808:	601a      	str	r2, [r3, #0]
 800f80a:	2200      	movs	r2, #0
 800f80c:	711a      	strb	r2, [r3, #4]
 800f80e:	60fb      	str	r3, [r7, #12]
	if(match_unary_operator(exp))
 800f810:	68f9      	ldr	r1, [r7, #12]
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f7ff ffd1 	bl	800f7ba <_ZN6Parser20match_unary_operatorEP16Unary_expression>
 800f818:	4603      	mov	r3, r0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d002      	beq.n	800f824 <_ZN6Parser22parse_unary_expressionEv+0x2e>
	{
		get_next_token();
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f7fa fde4 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
	}
	exp->prior_exp = parse_priority_expression();
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f7ff ff89 	bl	800f73c <_ZN6Parser25parse_priority_expressionEv>
 800f82a:	4602      	mov	r2, r0
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	601a      	str	r2, [r3, #0]
	return exp;
 800f830:	68fb      	ldr	r3, [r7, #12]
}
 800f832:	4618      	mov	r0, r3
 800f834:	3710      	adds	r7, #16
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}

0800f83a <_ZN6Parser22parse_power_expressionEv>:

Power_expression* Parser::parse_power_expression()
{
 800f83a:	b580      	push	{r7, lr}
 800f83c:	b084      	sub	sp, #16
 800f83e:	af00      	add	r7, sp, #0
 800f840:	6078      	str	r0, [r7, #4]
	auto exp = new Power_expression();
 800f842:	2008      	movs	r0, #8
 800f844:	f006 ff93 	bl	801676e <_Znwj>
 800f848:	4603      	mov	r3, r0
 800f84a:	2200      	movs	r2, #0
 800f84c:	601a      	str	r2, [r3, #0]
 800f84e:	2200      	movs	r2, #0
 800f850:	605a      	str	r2, [r3, #4]
 800f852:	60fb      	str	r3, [r7, #12]
	exp->left_un_exp = parse_unary_expression();
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f7ff ffce 	bl	800f7f6 <_ZN6Parser22parse_unary_expressionEv>
 800f85a:	4602      	mov	r2, r0
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	601a      	str	r2, [r3, #0]
	if(token_buffer.get_type() == TOKEN_POWER)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	3308      	adds	r3, #8
 800f864:	4618      	mov	r0, r3
 800f866:	f7ff faad 	bl	800edc4 <_ZN5Token8get_typeEv>
 800f86a:	4603      	mov	r3, r0
 800f86c:	2b23      	cmp	r3, #35	; 0x23
 800f86e:	bf0c      	ite	eq
 800f870:	2301      	moveq	r3, #1
 800f872:	2300      	movne	r3, #0
 800f874:	b2db      	uxtb	r3, r3
 800f876:	2b00      	cmp	r3, #0
 800f878:	d009      	beq.n	800f88e <_ZN6Parser22parse_power_expressionEv+0x54>
	{
		get_next_token();
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f7fa fdb6 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		exp->right_un_exp = parse_unary_expression();
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f7ff ffb8 	bl	800f7f6 <_ZN6Parser22parse_unary_expressionEv>
 800f886:	4602      	mov	r2, r0
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	605a      	str	r2, [r3, #4]
 800f88c:	e002      	b.n	800f894 <_ZN6Parser22parse_power_expressionEv+0x5a>
	}
	else
	{
		exp->right_un_exp = nullptr;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2200      	movs	r2, #0
 800f892:	605a      	str	r2, [r3, #4]
	}
	return exp;
 800f894:	68fb      	ldr	r3, [r7, #12]
}
 800f896:	4618      	mov	r0, r3
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <_ZN6Parser23match_multiply_operatorEP19Multiply_expression>:

bool Parser::match_multiply_operator(Multiply_expression* exp)
{
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b084      	sub	sp, #16
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
 800f8a6:	6039      	str	r1, [r7, #0]
	switch(token_buffer.get_type())
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	3308      	adds	r3, #8
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7ff fa89 	bl	800edc4 <_ZN5Token8get_typeEv>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	2b24      	cmp	r3, #36	; 0x24
 800f8b6:	d01c      	beq.n	800f8f2 <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x54>
 800f8b8:	2b24      	cmp	r3, #36	; 0x24
 800f8ba:	dc25      	bgt.n	800f908 <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x6a>
 800f8bc:	2b21      	cmp	r3, #33	; 0x21
 800f8be:	d002      	beq.n	800f8c6 <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x28>
 800f8c0:	2b22      	cmp	r3, #34	; 0x22
 800f8c2:	d00b      	beq.n	800f8dc <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x3e>
 800f8c4:	e020      	b.n	800f908 <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x6a>
	{
	case TOKEN_MULTIPLY:
		exp->ops.push_back(MULT_OP_MULTIPLY);
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	330c      	adds	r3, #12
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	737a      	strb	r2, [r7, #13]
 800f8ce:	f107 020d 	add.w	r2, r7, #13
 800f8d2:	4611      	mov	r1, r2
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f000 fcec 	bl	80102b2 <_ZNSt6vectorI13mult_operatorSaIS0_EE9push_backEOS0_>
		break;
 800f8da:	e017      	b.n	800f90c <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x6e>
	case TOKEN_DIVIDE:
		exp->ops.push_back(MULT_OP_DIVIDE);
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	330c      	adds	r3, #12
 800f8e0:	2202      	movs	r2, #2
 800f8e2:	73ba      	strb	r2, [r7, #14]
 800f8e4:	f107 020e 	add.w	r2, r7, #14
 800f8e8:	4611      	mov	r1, r2
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f000 fce1 	bl	80102b2 <_ZNSt6vectorI13mult_operatorSaIS0_EE9push_backEOS0_>
		break;
 800f8f0:	e00c      	b.n	800f90c <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x6e>
	case TOKEN_MODULO:
		exp->ops.push_back(MULT_OP_MODULO);
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	330c      	adds	r3, #12
 800f8f6:	2203      	movs	r2, #3
 800f8f8:	73fa      	strb	r2, [r7, #15]
 800f8fa:	f107 020f 	add.w	r2, r7, #15
 800f8fe:	4611      	mov	r1, r2
 800f900:	4618      	mov	r0, r3
 800f902:	f000 fcd6 	bl	80102b2 <_ZNSt6vectorI13mult_operatorSaIS0_EE9push_backEOS0_>
		break;
 800f906:	e001      	b.n	800f90c <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x6e>
	default:
		return false;
 800f908:	2300      	movs	r3, #0
 800f90a:	e000      	b.n	800f90e <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x70>
	}
	return true;
 800f90c:	2301      	movs	r3, #1
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3710      	adds	r7, #16
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}

0800f916 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800f916:	b580      	push	{r7, lr}
 800f918:	b082      	sub	sp, #8
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	6078      	str	r0, [r7, #4]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4618      	mov	r0, r3
 800f922:	f000 fcd7 	bl	80102d4 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE12_Vector_implC1Ev>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4618      	mov	r0, r3
 800f92a:	3708      	adds	r7, #8
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <_ZNSt6vectorIP16Power_expressionSaIS1_EEC1Ev>:
      vector() = default;
 800f930:	b580      	push	{r7, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7ff ffeb 	bl	800f916 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EEC1Ev>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	4618      	mov	r0, r3
 800f944:	3708      	adds	r7, #8
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EEC1Ev>:
      _Vector_base() = default;
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b082      	sub	sp, #8
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	4618      	mov	r0, r3
 800f956:	f000 fccd 	bl	80102f4 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE12_Vector_implC1Ev>
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	4618      	mov	r0, r3
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <_ZNSt6vectorI13mult_operatorSaIS0_EEC1Ev>:
      vector() = default;
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	4618      	mov	r0, r3
 800f970:	f7ff ffeb 	bl	800f94a <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EEC1Ev>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	4618      	mov	r0, r3
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <_ZN19Multiply_expressionC1Ev>:
	MULT_OP_MULTIPLY,
	MULT_OP_DIVIDE,
	MULT_OP_MODULO
}mult_operator;

class Multiply_expression
 800f97e:	b580      	push	{r7, lr}
 800f980:	b082      	sub	sp, #8
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4618      	mov	r0, r3
 800f98a:	f7ff ffd1 	bl	800f930 <_ZNSt6vectorIP16Power_expressionSaIS1_EEC1Ev>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	330c      	adds	r3, #12
 800f992:	4618      	mov	r0, r3
 800f994:	f7ff ffe6 	bl	800f964 <_ZNSt6vectorI13mult_operatorSaIS0_EEC1Ev>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	4618      	mov	r0, r3
 800f99c:	3708      	adds	r7, #8
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}

0800f9a2 <_ZN6Parser25parse_multiply_expressionEv>:

Multiply_expression* Parser::parse_multiply_expression()
{
 800f9a2:	b590      	push	{r4, r7, lr}
 800f9a4:	b087      	sub	sp, #28
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	6078      	str	r0, [r7, #4]
	auto exp = new Multiply_expression();
 800f9aa:	2018      	movs	r0, #24
 800f9ac:	f006 fedf 	bl	801676e <_Znwj>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	461c      	mov	r4, r3
 800f9b4:	4622      	mov	r2, r4
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	6013      	str	r3, [r2, #0]
 800f9ba:	6053      	str	r3, [r2, #4]
 800f9bc:	6093      	str	r3, [r2, #8]
 800f9be:	60d3      	str	r3, [r2, #12]
 800f9c0:	6113      	str	r3, [r2, #16]
 800f9c2:	6153      	str	r3, [r2, #20]
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	f7ff ffda 	bl	800f97e <_ZN19Multiply_expressionC1Ev>
 800f9ca:	617c      	str	r4, [r7, #20]
	exp->pow_exps.push_back(parse_power_expression());
 800f9cc:	697c      	ldr	r4, [r7, #20]
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f7ff ff33 	bl	800f83a <_ZN6Parser22parse_power_expressionEv>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	60fb      	str	r3, [r7, #12]
 800f9d8:	f107 030c 	add.w	r3, r7, #12
 800f9dc:	4619      	mov	r1, r3
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f000 fc98 	bl	8010314 <_ZNSt6vectorIP16Power_expressionSaIS1_EE9push_backEOS1_>
	while(match_multiply_operator(exp))
 800f9e4:	6979      	ldr	r1, [r7, #20]
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f7ff ff59 	bl	800f89e <_ZN6Parser23match_multiply_operatorEP19Multiply_expression>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d00f      	beq.n	800fa12 <_ZN6Parser25parse_multiply_expressionEv+0x70>
	{
		get_next_token();
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f7fa fcfa 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		exp->pow_exps.push_back(parse_power_expression());
 800f9f8:	697c      	ldr	r4, [r7, #20]
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f7ff ff1d 	bl	800f83a <_ZN6Parser22parse_power_expressionEv>
 800fa00:	4603      	mov	r3, r0
 800fa02:	613b      	str	r3, [r7, #16]
 800fa04:	f107 0310 	add.w	r3, r7, #16
 800fa08:	4619      	mov	r1, r3
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f000 fc82 	bl	8010314 <_ZNSt6vectorIP16Power_expressionSaIS1_EE9push_backEOS1_>
	while(match_multiply_operator(exp))
 800fa10:	e7e8      	b.n	800f9e4 <_ZN6Parser25parse_multiply_expressionEv+0x42>
	}
	return exp;
 800fa12:	697b      	ldr	r3, [r7, #20]
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	371c      	adds	r7, #28
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd90      	pop	{r4, r7, pc}

0800fa1c <_ZN6Parser18match_sum_operatorEP14Sum_expression>:

bool Parser::match_sum_operator(Sum_expression* exp)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	6039      	str	r1, [r7, #0]
	switch(token_buffer.get_type())
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	3308      	adds	r3, #8
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7ff f9ca 	bl	800edc4 <_ZN5Token8get_typeEv>
 800fa30:	4603      	mov	r3, r0
 800fa32:	2b1f      	cmp	r3, #31
 800fa34:	d002      	beq.n	800fa3c <_ZN6Parser18match_sum_operatorEP14Sum_expression+0x20>
 800fa36:	2b20      	cmp	r3, #32
 800fa38:	d00b      	beq.n	800fa52 <_ZN6Parser18match_sum_operatorEP14Sum_expression+0x36>
 800fa3a:	e015      	b.n	800fa68 <_ZN6Parser18match_sum_operatorEP14Sum_expression+0x4c>
	{
	case TOKEN_PLUS:
		exp->ops.push_back(SUM_OP_PLUS);
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	330c      	adds	r3, #12
 800fa40:	2201      	movs	r2, #1
 800fa42:	73ba      	strb	r2, [r7, #14]
 800fa44:	f107 020e 	add.w	r2, r7, #14
 800fa48:	4611      	mov	r1, r2
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f000 fc73 	bl	8010336 <_ZNSt6vectorI12sum_operatorSaIS0_EE9push_backEOS0_>
		break;
 800fa50:	e00c      	b.n	800fa6c <_ZN6Parser18match_sum_operatorEP14Sum_expression+0x50>
	case TOKEN_MINUS:
		exp->ops.push_back(SUM_OP_MINUS);
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	330c      	adds	r3, #12
 800fa56:	2202      	movs	r2, #2
 800fa58:	73fa      	strb	r2, [r7, #15]
 800fa5a:	f107 020f 	add.w	r2, r7, #15
 800fa5e:	4611      	mov	r1, r2
 800fa60:	4618      	mov	r0, r3
 800fa62:	f000 fc68 	bl	8010336 <_ZNSt6vectorI12sum_operatorSaIS0_EE9push_backEOS0_>
		break;
 800fa66:	e001      	b.n	800fa6c <_ZN6Parser18match_sum_operatorEP14Sum_expression+0x50>
	default:
		return false;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	e000      	b.n	800fa6e <_ZN6Parser18match_sum_operatorEP14Sum_expression+0x52>
	}
	return true;
 800fa6c:	2301      	movs	r3, #1
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3710      	adds	r7, #16
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}

0800fa76 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b082      	sub	sp, #8
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4618      	mov	r0, r3
 800fa82:	f000 fc69 	bl	8010358 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE12_Vector_implC1Ev>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3708      	adds	r7, #8
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}

0800fa90 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EEC1Ev>:
      vector() = default;
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f7ff ffeb 	bl	800fa76 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EEC1Ev>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4618      	mov	r0, r3
 800faa4:	3708      	adds	r7, #8
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EEC1Ev>:
      _Vector_base() = default;
 800faaa:	b580      	push	{r7, lr}
 800faac:	b082      	sub	sp, #8
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4618      	mov	r0, r3
 800fab6:	f000 fc5f 	bl	8010378 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE12_Vector_implC1Ev>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4618      	mov	r0, r3
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <_ZNSt6vectorI12sum_operatorSaIS0_EEC1Ev>:
      vector() = default;
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	4618      	mov	r0, r3
 800fad0:	f7ff ffeb 	bl	800faaa <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EEC1Ev>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	4618      	mov	r0, r3
 800fad8:	3708      	adds	r7, #8
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <_ZN14Sum_expressionC1Ev>:
	SUM_OP_NONE,
	SUM_OP_PLUS,
	SUM_OP_MINUS
}sum_operator;

class Sum_expression
 800fade:	b580      	push	{r7, lr}
 800fae0:	b082      	sub	sp, #8
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4618      	mov	r0, r3
 800faea:	f7ff ffd1 	bl	800fa90 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EEC1Ev>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	330c      	adds	r3, #12
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7ff ffe6 	bl	800fac4 <_ZNSt6vectorI12sum_operatorSaIS0_EEC1Ev>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	4618      	mov	r0, r3
 800fafc:	3708      	adds	r7, #8
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}

0800fb02 <_ZN6Parser20parse_sum_expressionEv>:

Sum_expression* Parser::parse_sum_expression()
{
 800fb02:	b590      	push	{r4, r7, lr}
 800fb04:	b087      	sub	sp, #28
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	6078      	str	r0, [r7, #4]
	auto exp = new Sum_expression();
 800fb0a:	2018      	movs	r0, #24
 800fb0c:	f006 fe2f 	bl	801676e <_Znwj>
 800fb10:	4603      	mov	r3, r0
 800fb12:	461c      	mov	r4, r3
 800fb14:	4622      	mov	r2, r4
 800fb16:	2300      	movs	r3, #0
 800fb18:	6013      	str	r3, [r2, #0]
 800fb1a:	6053      	str	r3, [r2, #4]
 800fb1c:	6093      	str	r3, [r2, #8]
 800fb1e:	60d3      	str	r3, [r2, #12]
 800fb20:	6113      	str	r3, [r2, #16]
 800fb22:	6153      	str	r3, [r2, #20]
 800fb24:	4620      	mov	r0, r4
 800fb26:	f7ff ffda 	bl	800fade <_ZN14Sum_expressionC1Ev>
 800fb2a:	617c      	str	r4, [r7, #20]
	exp->mult_exps.push_back(parse_multiply_expression());
 800fb2c:	697c      	ldr	r4, [r7, #20]
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f7ff ff37 	bl	800f9a2 <_ZN6Parser25parse_multiply_expressionEv>
 800fb34:	4603      	mov	r3, r0
 800fb36:	60fb      	str	r3, [r7, #12]
 800fb38:	f107 030c 	add.w	r3, r7, #12
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	4620      	mov	r0, r4
 800fb40:	f000 fc2a 	bl	8010398 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE9push_backEOS1_>
	while(match_sum_operator(exp))
 800fb44:	6979      	ldr	r1, [r7, #20]
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f7ff ff68 	bl	800fa1c <_ZN6Parser18match_sum_operatorEP14Sum_expression>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d00f      	beq.n	800fb72 <_ZN6Parser20parse_sum_expressionEv+0x70>
	{
		get_next_token();
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f7fa fc4a 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		exp->mult_exps.push_back(parse_multiply_expression());
 800fb58:	697c      	ldr	r4, [r7, #20]
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f7ff ff21 	bl	800f9a2 <_ZN6Parser25parse_multiply_expressionEv>
 800fb60:	4603      	mov	r3, r0
 800fb62:	613b      	str	r3, [r7, #16]
 800fb64:	f107 0310 	add.w	r3, r7, #16
 800fb68:	4619      	mov	r1, r3
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	f000 fc14 	bl	8010398 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE9push_backEOS1_>
	while(match_sum_operator(exp))
 800fb70:	e7e8      	b.n	800fb44 <_ZN6Parser20parse_sum_expressionEv+0x42>
	}
	return exp;
 800fb72:	697b      	ldr	r3, [r7, #20]
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	371c      	adds	r7, #28
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd90      	pop	{r4, r7, pc}

0800fb7c <_ZN6Parser23match_relation_operatorEP19Relation_expression>:

bool Parser::match_relation_operator(Relation_expression* exp)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
	switch (token_buffer.get_type())
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	3308      	adds	r3, #8
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7ff f91a 	bl	800edc4 <_ZN5Token8get_typeEv>
 800fb90:	4603      	mov	r3, r0
 800fb92:	3b19      	subs	r3, #25
 800fb94:	2b03      	cmp	r3, #3
 800fb96:	d81b      	bhi.n	800fbd0 <_ZN6Parser23match_relation_operatorEP19Relation_expression+0x54>
 800fb98:	a201      	add	r2, pc, #4	; (adr r2, 800fba0 <_ZN6Parser23match_relation_operatorEP19Relation_expression+0x24>)
 800fb9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb9e:	bf00      	nop
 800fba0:	0800fbc1 	.word	0x0800fbc1
 800fba4:	0800fbc9 	.word	0x0800fbc9
 800fba8:	0800fbb1 	.word	0x0800fbb1
 800fbac:	0800fbb9 	.word	0x0800fbb9
	{
	case TOKEN_SMALLER_THAN:
		exp->op = REL_OP_SMALLER;
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	721a      	strb	r2, [r3, #8]
		break;
 800fbb6:	e010      	b.n	800fbda <_ZN6Parser23match_relation_operatorEP19Relation_expression+0x5e>
	case TOKEN_SMALLER_OR_EQUAL:
		exp->op = REL_OP_SMALLER_EQUAL;
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	2202      	movs	r2, #2
 800fbbc:	721a      	strb	r2, [r3, #8]
		break;
 800fbbe:	e00c      	b.n	800fbda <_ZN6Parser23match_relation_operatorEP19Relation_expression+0x5e>
	case TOKEN_GREATER_THAN:
		exp->op = REL_OP_GREATER;
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	2203      	movs	r2, #3
 800fbc4:	721a      	strb	r2, [r3, #8]
		break;
 800fbc6:	e008      	b.n	800fbda <_ZN6Parser23match_relation_operatorEP19Relation_expression+0x5e>
	case TOKEN_GREATER_OR_EQUAL:
		exp->op = REL_OP_SMALLER_EQUAL;
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	2202      	movs	r2, #2
 800fbcc:	721a      	strb	r2, [r3, #8]
		break;
 800fbce:	e004      	b.n	800fbda <_ZN6Parser23match_relation_operatorEP19Relation_expression+0x5e>
	default:
		exp->right_sum_exp = nullptr;
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	605a      	str	r2, [r3, #4]
		return false;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	e000      	b.n	800fbdc <_ZN6Parser23match_relation_operatorEP19Relation_expression+0x60>
	}
	return true;
 800fbda:	2301      	movs	r3, #1
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3708      	adds	r7, #8
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}

0800fbe4 <_ZN6Parser25parse_relation_expressionEv>:

Relation_expression* Parser::parse_relation_expression()
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
	auto exp = new Relation_expression();
 800fbec:	200c      	movs	r0, #12
 800fbee:	f006 fdbe 	bl	801676e <_Znwj>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	601a      	str	r2, [r3, #0]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	605a      	str	r2, [r3, #4]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	721a      	strb	r2, [r3, #8]
 800fc00:	60fb      	str	r3, [r7, #12]
	exp->left_sum_exp = parse_sum_expression();
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f7ff ff7d 	bl	800fb02 <_ZN6Parser20parse_sum_expressionEv>
 800fc08:	4602      	mov	r2, r0
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	601a      	str	r2, [r3, #0]
	if(match_relation_operator(exp))
 800fc0e:	68f9      	ldr	r1, [r7, #12]
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f7ff ffb3 	bl	800fb7c <_ZN6Parser23match_relation_operatorEP19Relation_expression>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d008      	beq.n	800fc2e <_ZN6Parser25parse_relation_expressionEv+0x4a>
	{
		get_next_token();
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7fa fbe5 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		exp->right_sum_exp = parse_sum_expression();
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f7ff ff6d 	bl	800fb02 <_ZN6Parser20parse_sum_expressionEv>
 800fc28:	4602      	mov	r2, r0
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	605a      	str	r2, [r3, #4]
	}
	return exp;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3710      	adds	r7, #16
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}

0800fc38 <_ZN6Parser22match_compare_operatorEP18Compare_expression>:

bool Parser::match_compare_operator(Compare_expression *exp)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
	switch (token_buffer.get_type())
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	3308      	adds	r3, #8
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7ff f8bc 	bl	800edc4 <_ZN5Token8get_typeEv>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b1d      	cmp	r3, #29
 800fc50:	d002      	beq.n	800fc58 <_ZN6Parser22match_compare_operatorEP18Compare_expression+0x20>
 800fc52:	2b1e      	cmp	r3, #30
 800fc54:	d004      	beq.n	800fc60 <_ZN6Parser22match_compare_operatorEP18Compare_expression+0x28>
 800fc56:	e007      	b.n	800fc68 <_ZN6Parser22match_compare_operatorEP18Compare_expression+0x30>
	{
	case TOKEN_EQUALS:
		exp->op = COMP_OP_EQUAL;
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	2201      	movs	r2, #1
 800fc5c:	721a      	strb	r2, [r3, #8]
		break;
 800fc5e:	e008      	b.n	800fc72 <_ZN6Parser22match_compare_operatorEP18Compare_expression+0x3a>
	case TOKEN_NOT_EQUAL:
		exp->op = COMP_OP_NOT_EQUAL;
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	2202      	movs	r2, #2
 800fc64:	721a      	strb	r2, [r3, #8]
		break;
 800fc66:	e004      	b.n	800fc72 <_ZN6Parser22match_compare_operatorEP18Compare_expression+0x3a>
	default:
		exp->right_rel_exp = nullptr;
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	605a      	str	r2, [r3, #4]
		return false;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	e000      	b.n	800fc74 <_ZN6Parser22match_compare_operatorEP18Compare_expression+0x3c>
	}
	return true;
 800fc72:	2301      	movs	r3, #1
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <_ZN6Parser24parse_compare_expressionEv>:

Compare_expression* Parser::parse_compare_expression()
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b084      	sub	sp, #16
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
	auto exp = new Compare_expression();
 800fc84:	200c      	movs	r0, #12
 800fc86:	f006 fd72 	bl	801676e <_Znwj>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	601a      	str	r2, [r3, #0]
 800fc90:	2200      	movs	r2, #0
 800fc92:	605a      	str	r2, [r3, #4]
 800fc94:	2200      	movs	r2, #0
 800fc96:	721a      	strb	r2, [r3, #8]
 800fc98:	60fb      	str	r3, [r7, #12]
	exp->left_rel_exp = parse_relation_expression();
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f7ff ffa2 	bl	800fbe4 <_ZN6Parser25parse_relation_expressionEv>
 800fca0:	4602      	mov	r2, r0
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	601a      	str	r2, [r3, #0]
	if(match_compare_operator(exp))
 800fca6:	68f9      	ldr	r1, [r7, #12]
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7ff ffc5 	bl	800fc38 <_ZN6Parser22match_compare_operatorEP18Compare_expression>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d008      	beq.n	800fcc6 <_ZN6Parser24parse_compare_expressionEv+0x4a>
	{
		get_next_token();
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f7fa fb99 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		exp->right_rel_exp = parse_relation_expression();
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f7ff ff92 	bl	800fbe4 <_ZN6Parser25parse_relation_expressionEv>
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	605a      	str	r2, [r3, #4]
	}
	return exp;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3710      	adds	r7, #16
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f000 fb6d 	bl	80103ba <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE12_Vector_implC1Ev>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	4618      	mov	r0, r3
 800fce4:	3708      	adds	r7, #8
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}

0800fcea <_ZNSt6vectorIP18Compare_expressionSaIS1_EEC1Ev>:
      vector() = default;
 800fcea:	b580      	push	{r7, lr}
 800fcec:	b082      	sub	sp, #8
 800fcee:	af00      	add	r7, sp, #0
 800fcf0:	6078      	str	r0, [r7, #4]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f7ff ffeb 	bl	800fcd0 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EEC1Ev>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3708      	adds	r7, #8
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}

0800fd04 <_ZN14And_expressionC1Ev>:
	Relation_expression* left_rel_exp;
	Relation_expression* right_rel_exp;
	comp_operator op;
};

class And_expression
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7ff ffeb 	bl	800fcea <_ZNSt6vectorIP18Compare_expressionSaIS1_EEC1Ev>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	4618      	mov	r0, r3
 800fd18:	3708      	adds	r7, #8
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}

0800fd1e <_ZN6Parser20parse_and_expressionEv>:

And_expression* Parser::parse_and_expression()
{
 800fd1e:	b590      	push	{r4, r7, lr}
 800fd20:	b087      	sub	sp, #28
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
	auto exp = new And_expression();
 800fd26:	200c      	movs	r0, #12
 800fd28:	f006 fd21 	bl	801676e <_Znwj>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	461c      	mov	r4, r3
 800fd30:	4622      	mov	r2, r4
 800fd32:	2300      	movs	r3, #0
 800fd34:	6013      	str	r3, [r2, #0]
 800fd36:	6053      	str	r3, [r2, #4]
 800fd38:	6093      	str	r3, [r2, #8]
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f7ff ffe2 	bl	800fd04 <_ZN14And_expressionC1Ev>
 800fd40:	617c      	str	r4, [r7, #20]
	exp->comp_exps.push_back(parse_compare_expression());
 800fd42:	697c      	ldr	r4, [r7, #20]
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f7ff ff99 	bl	800fc7c <_ZN6Parser24parse_compare_expressionEv>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	60fb      	str	r3, [r7, #12]
 800fd4e:	f107 030c 	add.w	r3, r7, #12
 800fd52:	4619      	mov	r1, r3
 800fd54:	4620      	mov	r0, r4
 800fd56:	f000 fb40 	bl	80103da <_ZNSt6vectorIP18Compare_expressionSaIS1_EE9push_backEOS1_>
	while(token_buffer.get_type() == TOKEN_AND)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	3308      	adds	r3, #8
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7ff f830 	bl	800edc4 <_ZN5Token8get_typeEv>
 800fd64:	4603      	mov	r3, r0
 800fd66:	2b16      	cmp	r3, #22
 800fd68:	bf0c      	ite	eq
 800fd6a:	2301      	moveq	r3, #1
 800fd6c:	2300      	movne	r3, #0
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d00f      	beq.n	800fd94 <_ZN6Parser20parse_and_expressionEv+0x76>
	{
		get_next_token();
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f7fa fb39 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		exp->comp_exps.push_back(parse_compare_expression());
 800fd7a:	697c      	ldr	r4, [r7, #20]
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f7ff ff7d 	bl	800fc7c <_ZN6Parser24parse_compare_expressionEv>
 800fd82:	4603      	mov	r3, r0
 800fd84:	613b      	str	r3, [r7, #16]
 800fd86:	f107 0310 	add.w	r3, r7, #16
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	f000 fb24 	bl	80103da <_ZNSt6vectorIP18Compare_expressionSaIS1_EE9push_backEOS1_>
	while(token_buffer.get_type() == TOKEN_AND)
 800fd92:	e7e2      	b.n	800fd5a <_ZN6Parser20parse_and_expressionEv+0x3c>
	}
	return exp;
 800fd94:	697b      	ldr	r3, [r7, #20]
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	371c      	adds	r7, #28
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd90      	pop	{r4, r7, pc}

0800fd9e <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800fd9e:	b580      	push	{r7, lr}
 800fda0:	b082      	sub	sp, #8
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	6078      	str	r0, [r7, #4]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f000 fb27 	bl	80103fc <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE12_Vector_implC1Ev>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3708      	adds	r7, #8
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <_ZNSt6vectorIP14And_expressionSaIS1_EEC1Ev>:
      vector() = default;
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7ff ffeb 	bl	800fd9e <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EEC1Ev>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3708      	adds	r7, #8
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}

0800fdd2 <_ZN10ExpressionC1Ev>:
public:
	~And_expression();
	std::vector<Compare_expression*> comp_exps;
};

class Expression
 800fdd2:	b580      	push	{r7, lr}
 800fdd4:	b082      	sub	sp, #8
 800fdd6:	af00      	add	r7, sp, #0
 800fdd8:	6078      	str	r0, [r7, #4]
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7ff ffeb 	bl	800fdb8 <_ZNSt6vectorIP14And_expressionSaIS1_EEC1Ev>
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	4618      	mov	r0, r3
 800fde6:	3708      	adds	r7, #8
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <_ZN6Parser16parse_expressionEv>:

Expression* Parser::parse_expression()
{
 800fdec:	b590      	push	{r4, r7, lr}
 800fdee:	b087      	sub	sp, #28
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
	auto exp = new Expression();
 800fdf4:	200c      	movs	r0, #12
 800fdf6:	f006 fcba 	bl	801676e <_Znwj>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	461c      	mov	r4, r3
 800fdfe:	4622      	mov	r2, r4
 800fe00:	2300      	movs	r3, #0
 800fe02:	6013      	str	r3, [r2, #0]
 800fe04:	6053      	str	r3, [r2, #4]
 800fe06:	6093      	str	r3, [r2, #8]
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f7ff ffe2 	bl	800fdd2 <_ZN10ExpressionC1Ev>
 800fe0e:	617c      	str	r4, [r7, #20]
	exp->and_exps.push_back(parse_and_expression());
 800fe10:	697c      	ldr	r4, [r7, #20]
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f7ff ff83 	bl	800fd1e <_ZN6Parser20parse_and_expressionEv>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	60fb      	str	r3, [r7, #12]
 800fe1c:	f107 030c 	add.w	r3, r7, #12
 800fe20:	4619      	mov	r1, r3
 800fe22:	4620      	mov	r0, r4
 800fe24:	f000 fafa 	bl	801041c <_ZNSt6vectorIP14And_expressionSaIS1_EE9push_backEOS1_>
	while(token_buffer.get_type() == TOKEN_OR)
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	3308      	adds	r3, #8
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7fe ffc9 	bl	800edc4 <_ZN5Token8get_typeEv>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b15      	cmp	r3, #21
 800fe36:	bf0c      	ite	eq
 800fe38:	2301      	moveq	r3, #1
 800fe3a:	2300      	movne	r3, #0
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d00f      	beq.n	800fe62 <_ZN6Parser16parse_expressionEv+0x76>
	{
		get_next_token();
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f7fa fad2 	bl	800a3ec <_ZN6Parser14get_next_tokenEv>
		exp->and_exps.push_back(parse_and_expression());
 800fe48:	697c      	ldr	r4, [r7, #20]
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f7ff ff67 	bl	800fd1e <_ZN6Parser20parse_and_expressionEv>
 800fe50:	4603      	mov	r3, r0
 800fe52:	613b      	str	r3, [r7, #16]
 800fe54:	f107 0310 	add.w	r3, r7, #16
 800fe58:	4619      	mov	r1, r3
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f000 fade 	bl	801041c <_ZNSt6vectorIP14And_expressionSaIS1_EE9push_backEOS1_>
	while(token_buffer.get_type() == TOKEN_OR)
 800fe60:	e7e2      	b.n	800fe28 <_ZN6Parser16parse_expressionEv+0x3c>
	}
	return exp;
 800fe62:	697b      	ldr	r3, [r7, #20]
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	371c      	adds	r7, #28
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd90      	pop	{r4, r7, pc}

0800fe6c <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 800fe6c:	b590      	push	{r4, r7, lr}
 800fe6e:	b085      	sub	sp, #20
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800fe76:	2305      	movs	r3, #5
 800fe78:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f7f1 fd78 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 800fe80:	4603      	mov	r3, r0
 800fe82:	2b05      	cmp	r3, #5
 800fe84:	bf0c      	ite	eq
 800fe86:	2301      	moveq	r3, #1
 800fe88:	2300      	movne	r3, #0
 800fe8a:	b2db      	uxtb	r3, r3
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d00a      	beq.n	800fea6 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800fe90:	6838      	ldr	r0, [r7, #0]
 800fe92:	f7fb f963 	bl	800b15c <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800fe96:	4603      	mov	r3, r0
 800fe98:	681c      	ldr	r4, [r3, #0]
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f7f2 fb12 	bl	80024c4 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800fea0:	4603      	mov	r3, r0
 800fea2:	601c      	str	r4, [r3, #0]
 800fea4:	e007      	b.n	800feb6 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800fea6:	6838      	ldr	r0, [r7, #0]
 800fea8:	f7fb f958 	bl	800b15c <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800feac:	4603      	mov	r3, r0
 800feae:	4619      	mov	r1, r3
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f000 fac4 	bl	801043e <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj5EJS9_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 800feb6:	687b      	ldr	r3, [r7, #4]
	}
 800feb8:	4618      	mov	r0, r3
 800feba:	3714      	adds	r7, #20
 800febc:	46bd      	mov	sp, r7
 800febe:	bd90      	pop	{r4, r7, pc}

0800fec0 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 800fec0:	b590      	push	{r4, r7, lr}
 800fec2:	b085      	sub	sp, #20
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800feca:	2304      	movs	r3, #4
 800fecc:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f7f1 fd4e 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 800fed4:	4603      	mov	r3, r0
 800fed6:	2b04      	cmp	r3, #4
 800fed8:	bf0c      	ite	eq
 800feda:	2301      	moveq	r3, #1
 800fedc:	2300      	movne	r3, #0
 800fede:	b2db      	uxtb	r3, r3
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d00a      	beq.n	800fefa <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800fee4:	6838      	ldr	r0, [r7, #0]
 800fee6:	f000 fac3 	bl	8010470 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>
 800feea:	4603      	mov	r3, r0
 800feec:	681c      	ldr	r4, [r3, #0]
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f7f2 fa50 	bl	8002394 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800fef4:	4603      	mov	r3, r0
 800fef6:	601c      	str	r4, [r3, #0]
 800fef8:	e007      	b.n	800ff0a <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800fefa:	6838      	ldr	r0, [r7, #0]
 800fefc:	f000 fab8 	bl	8010470 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>
 800ff00:	4603      	mov	r3, r0
 800ff02:	4619      	mov	r1, r3
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f000 fabe 	bl	8010486 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj4EJS7_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 800ff0a:	687b      	ldr	r3, [r7, #4]
	}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3714      	adds	r7, #20
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd90      	pop	{r4, r7, pc}

0800ff14 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	7039      	strb	r1, [r7, #0]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	4611      	mov	r1, r2
 800ff22:	4618      	mov	r0, r3
 800ff24:	f000 fae6 	bl	80104f4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3708      	adds	r7, #8
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}

0800ff32 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800ff32:	b580      	push	{r7, lr}
 800ff34:	b082      	sub	sp, #8
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	6078      	str	r0, [r7, #4]
 800ff3a:	7039      	strb	r1, [r7, #0]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	4611      	mov	r1, r2
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7ff ffe7 	bl	800ff14 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3708      	adds	r7, #8
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	7039      	strb	r1, [r7, #0]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	4611      	mov	r1, r2
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7ff ffe7 	bl	800ff32 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	4618      	mov	r0, r3
 800ff68:	3708      	adds	r7, #8
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}

0800ff6e <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800ff6e:	b580      	push	{r7, lr}
 800ff70:	b082      	sub	sp, #8
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	6078      	str	r0, [r7, #4]
 800ff76:	7039      	strb	r1, [r7, #0]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7ff ffe7 	bl	800ff50 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	4618      	mov	r0, r3
 800ff86:	3708      	adds	r7, #8
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b082      	sub	sp, #8
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	7039      	strb	r1, [r7, #0]
	: _Base(__i, std::forward<_Args>(__args)...)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	4611      	mov	r1, r2
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7ff ffe7 	bl	800ff6e <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3708      	adds	r7, #8
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}

0800ffaa <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1Ev>:
      _Variant_base()
 800ffaa:	b580      	push	{r7, lr}
 800ffac:	b082      	sub	sp, #8
 800ffae:	af00      	add	r7, sp, #0
 800ffb0:	6078      	str	r0, [r7, #4]
      : _Variant_base(in_place_index<0>) { }
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f7ff ffe9 	bl	800ff8c <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3708      	adds	r7, #8
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}

0800ffc4 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 800ffc4:	b590      	push	{r4, r7, lr}
 800ffc6:	b085      	sub	sp, #20
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f7f1 fccc 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	bf0c      	ite	eq
 800ffde:	2301      	moveq	r3, #1
 800ffe0:	2300      	movne	r3, #0
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d00b      	beq.n	8010000 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3c>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800ffe8:	6838      	ldr	r0, [r7, #0]
 800ffea:	f7fd fe01 	bl	800dbf0 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800ffee:	4603      	mov	r3, r0
 800fff0:	781c      	ldrb	r4, [r3, #0]
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 fa90 	bl	8010518 <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800fff8:	4603      	mov	r3, r0
 800fffa:	4622      	mov	r2, r4
 800fffc:	701a      	strb	r2, [r3, #0]
 800fffe:	e007      	b.n	8010010 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4c>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8010000:	6838      	ldr	r0, [r7, #0]
 8010002:	f7fd fdf5 	bl	800dbf0 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010006:	4603      	mov	r3, r0
 8010008:	4619      	mov	r1, r3
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 faa0 	bl	8010550 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj0EJbEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 8010010:	687b      	ldr	r3, [r7, #4]
	}
 8010012:	4618      	mov	r0, r3
 8010014:	3714      	adds	r7, #20
 8010016:	46bd      	mov	sp, r7
 8010018:	bd90      	pop	{r4, r7, pc}

0801001a <_ZSt3getIiJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEOT_OSt7variantIJDpT0_EE>:
    constexpr _Tp&& get(variant<_Types...>&& __v)
 801001a:	b580      	push	{r7, lr}
 801001c:	b082      	sub	sp, #8
 801001e:	af00      	add	r7, sp, #0
 8010020:	6078      	str	r0, [r7, #4]
	std::move(__v));
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f7fa fff0 	bl	800b008 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 8010028:	4603      	mov	r3, r0
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
 801002a:	4618      	mov	r0, r3
 801002c:	f000 fade 	bl	80105ec <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>
 8010030:	4603      	mov	r3, r0
    }
 8010032:	4618      	mov	r0, r3
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIiEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 801003a:	b590      	push	{r4, r7, lr}
 801003c:	b085      	sub	sp, #20
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
 8010042:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 8010044:	2301      	movs	r3, #1
 8010046:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7f1 fc91 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 801004e:	4603      	mov	r3, r0
 8010050:	2b01      	cmp	r3, #1
 8010052:	bf0c      	ite	eq
 8010054:	2301      	moveq	r3, #1
 8010056:	2300      	movne	r3, #0
 8010058:	b2db      	uxtb	r3, r3
 801005a:	2b00      	cmp	r3, #0
 801005c:	d00a      	beq.n	8010074 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIiEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 801005e:	6838      	ldr	r0, [r7, #0]
 8010060:	f7f7 f98d 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8010064:	4603      	mov	r3, r0
 8010066:	681c      	ldr	r4, [r3, #0]
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 fadf 	bl	801062c <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 801006e:	4603      	mov	r3, r0
 8010070:	601c      	str	r4, [r3, #0]
 8010072:	e007      	b.n	8010084 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIiEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8010074:	6838      	ldr	r0, [r7, #0]
 8010076:	f7f7 f982 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 801007a:	4603      	mov	r3, r0
 801007c:	4619      	mov	r1, r3
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f000 faf0 	bl	8010664 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj1EJiEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 8010084:	687b      	ldr	r3, [r7, #4]
	}
 8010086:	4618      	mov	r0, r3
 8010088:	3714      	adds	r7, #20
 801008a:	46bd      	mov	sp, r7
 801008c:	bd90      	pop	{r4, r7, pc}

0801008e <_ZSt3getIfJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEOT_OSt7variantIJDpT0_EE>:
    constexpr _Tp&& get(variant<_Types...>&& __v)
 801008e:	b580      	push	{r7, lr}
 8010090:	b082      	sub	sp, #8
 8010092:	af00      	add	r7, sp, #0
 8010094:	6078      	str	r0, [r7, #4]
	std::move(__v));
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f7fa ffb6 	bl	800b008 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 801009c:	4603      	mov	r3, r0
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
 801009e:	4618      	mov	r0, r3
 80100a0:	f000 fb40 	bl	8010724 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>
 80100a4:	4603      	mov	r3, r0
    }
 80100a6:	4618      	mov	r0, r3
 80100a8:	3708      	adds	r7, #8
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}

080100ae <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIfEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 80100ae:	b590      	push	{r4, r7, lr}
 80100b0:	b085      	sub	sp, #20
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
 80100b6:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 80100b8:	2302      	movs	r3, #2
 80100ba:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f7f1 fc57 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80100c2:	4603      	mov	r3, r0
 80100c4:	2b02      	cmp	r3, #2
 80100c6:	bf0c      	ite	eq
 80100c8:	2301      	moveq	r3, #1
 80100ca:	2300      	movne	r3, #0
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d00a      	beq.n	80100e8 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIfEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 80100d2:	6838      	ldr	r0, [r7, #0]
 80100d4:	f7f7 f98a 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80100d8:	4603      	mov	r3, r0
 80100da:	681c      	ldr	r4, [r3, #0]
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f000 fb41 	bl	8010764 <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 80100e2:	4603      	mov	r3, r0
 80100e4:	601c      	str	r4, [r3, #0]
 80100e6:	e007      	b.n	80100f8 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIfEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 80100e8:	6838      	ldr	r0, [r7, #0]
 80100ea:	f7f7 f97f 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80100ee:	4603      	mov	r3, r0
 80100f0:	4619      	mov	r1, r3
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 fb52 	bl	801079c <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj2EJfEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 80100f8:	687b      	ldr	r3, [r7, #4]
	}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3714      	adds	r7, #20
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd90      	pop	{r4, r7, pc}

08010102 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 8010102:	b590      	push	{r4, r7, lr}
 8010104:	b085      	sub	sp, #20
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
 801010a:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 801010c:	2303      	movs	r3, #3
 801010e:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f7f1 fc2d 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8010116:	4603      	mov	r3, r0
 8010118:	2b03      	cmp	r3, #3
 801011a:	bf0c      	ite	eq
 801011c:	2301      	moveq	r3, #1
 801011e:	2300      	movne	r3, #0
 8010120:	b2db      	uxtb	r3, r3
 8010122:	2b00      	cmp	r3, #0
 8010124:	d00c      	beq.n	8010140 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3e>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 8010126:	6838      	ldr	r0, [r7, #0]
 8010128:	f7f7 f8f2 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801012c:	4604      	mov	r4, r0
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f000 fb4e 	bl	80107d0 <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8010134:	4603      	mov	r3, r0
 8010136:	4621      	mov	r1, r4
 8010138:	4618      	mov	r0, r3
 801013a:	f006 fcfc 	bl	8016b36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 801013e:	e007      	b.n	8010150 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4e>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8010140:	6838      	ldr	r0, [r7, #0]
 8010142:	f7f7 f8e5 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8010146:	4603      	mov	r3, r0
 8010148:	4619      	mov	r1, r3
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f000 fb5c 	bl	8010808 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj3EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 8010150:	687b      	ldr	r3, [r7, #4]
	}
 8010152:	4618      	mov	r0, r3
 8010154:	3714      	adds	r7, #20
 8010156:	46bd      	mov	sp, r7
 8010158:	bd90      	pop	{r4, r7, pc}

0801015a <_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 801015a:	b580      	push	{r7, lr}
 801015c:	b082      	sub	sp, #8
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]
 8010162:	7039      	strb	r1, [r7, #0]
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	4611      	mov	r1, r2
 8010168:	4618      	mov	r0, r3
 801016a:	f000 fb84 	bl	8010876 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP17Primal_expressionP10ExpressionEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	4618      	mov	r0, r3
 8010172:	3708      	adds	r7, #8
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}

08010178 <_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	7039      	strb	r1, [r7, #0]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4611      	mov	r1, r2
 8010186:	4618      	mov	r0, r3
 8010188:	f7ff ffe7 	bl	801015a <_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	4618      	mov	r0, r3
 8010190:	3708      	adds	r7, #8
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}

08010196 <_ZNSt8__detail9__variant17_Copy_assign_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8010196:	b580      	push	{r7, lr}
 8010198:	b082      	sub	sp, #8
 801019a:	af00      	add	r7, sp, #0
 801019c:	6078      	str	r0, [r7, #4]
 801019e:	7039      	strb	r1, [r7, #0]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	4611      	mov	r1, r2
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7ff ffe7 	bl	8010178 <_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	4618      	mov	r0, r3
 80101ae:	3708      	adds	r7, #8
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}

080101b4 <_ZNSt8__detail9__variant17_Move_assign_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b082      	sub	sp, #8
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	7039      	strb	r1, [r7, #0]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	4611      	mov	r1, r2
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7ff ffe7 	bl	8010196 <_ZNSt8__detail9__variant17_Copy_assign_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	4618      	mov	r0, r3
 80101cc:	3708      	adds	r7, #8
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}

080101d2 <_ZNSt8__detail9__variant13_Variant_baseIJP17Primal_expressionP10ExpressionEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 80101d2:	b580      	push	{r7, lr}
 80101d4:	b082      	sub	sp, #8
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	6078      	str	r0, [r7, #4]
 80101da:	7039      	strb	r1, [r7, #0]
	: _Base(__i, std::forward<_Args>(__args)...)
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	4611      	mov	r1, r2
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7ff ffe7 	bl	80101b4 <_ZNSt8__detail9__variant17_Move_assign_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	4618      	mov	r0, r3
 80101ea:	3708      	adds	r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <_ZNSt8__detail9__variant13_Variant_baseIJP17Primal_expressionP10ExpressionEEC1Ev>:
      _Variant_base()
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
      : _Variant_base(in_place_index<0>) { }
 80101f8:	4619      	mov	r1, r3
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7ff ffe9 	bl	80101d2 <_ZNSt8__detail9__variant13_Variant_baseIJP17Primal_expressionP10ExpressionEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	4618      	mov	r0, r3
 8010204:	3708      	adds	r7, #8
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}

0801020a <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>:
	operator=(_Tp&& __rhs)
 801020a:	b590      	push	{r4, r7, lr}
 801020c:	b085      	sub	sp, #20
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
 8010212:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 8010214:	2301      	movs	r3, #1
 8010216:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f7f1 fbf6 	bl	8001a0a <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 801021e:	4603      	mov	r3, r0
 8010220:	2b01      	cmp	r3, #1
 8010222:	bf0c      	ite	eq
 8010224:	2301      	moveq	r3, #1
 8010226:	2300      	movne	r3, #0
 8010228:	b2db      	uxtb	r3, r3
 801022a:	2b00      	cmp	r3, #0
 801022c:	d00a      	beq.n	8010244 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 801022e:	6838      	ldr	r0, [r7, #0]
 8010230:	f7fb fa7c 	bl	800b72c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010234:	4603      	mov	r3, r0
 8010236:	681c      	ldr	r4, [r3, #0]
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f7f2 f993 	bl	8002564 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 801023e:	4603      	mov	r3, r0
 8010240:	601c      	str	r4, [r3, #0]
 8010242:	e007      	b.n	8010254 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8010244:	6838      	ldr	r0, [r7, #0]
 8010246:	f7fb fa71 	bl	800b72c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 801024a:	4603      	mov	r3, r0
 801024c:	4619      	mov	r1, r3
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f000 fb23 	bl	801089a <_ZNSt7variantIJP17Primal_expressionP10ExpressionEE7emplaceILj1EJS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>
	  return *this;
 8010254:	687b      	ldr	r3, [r7, #4]
	}
 8010256:	4618      	mov	r0, r3
 8010258:	3714      	adds	r7, #20
 801025a:	46bd      	mov	sp, r7
 801025c:	bd90      	pop	{r4, r7, pc}

0801025e <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>:
	operator=(_Tp&& __rhs)
 801025e:	b590      	push	{r4, r7, lr}
 8010260:	b085      	sub	sp, #20
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
 8010266:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 8010268:	2300      	movs	r3, #0
 801026a:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f7f1 fbcc 	bl	8001a0a <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	bf0c      	ite	eq
 8010278:	2301      	moveq	r3, #1
 801027a:	2300      	movne	r3, #0
 801027c:	b2db      	uxtb	r3, r3
 801027e:	2b00      	cmp	r3, #0
 8010280:	d00a      	beq.n	8010298 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 8010282:	6838      	ldr	r0, [r7, #0]
 8010284:	f000 fb22 	bl	80108cc <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010288:	4603      	mov	r3, r0
 801028a:	681c      	ldr	r4, [r3, #0]
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f7f2 f9a7 	bl	80025e0 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 8010292:	4603      	mov	r3, r0
 8010294:	601c      	str	r4, [r3, #0]
 8010296:	e007      	b.n	80102a8 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8010298:	6838      	ldr	r0, [r7, #0]
 801029a:	f000 fb17 	bl	80108cc <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 801029e:	4603      	mov	r3, r0
 80102a0:	4619      	mov	r1, r3
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f000 fb1d 	bl	80108e2 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEE7emplaceILj0EJS1_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>
	  return *this;
 80102a8:	687b      	ldr	r3, [r7, #4]
	}
 80102aa:	4618      	mov	r0, r3
 80102ac:	3714      	adds	r7, #20
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd90      	pop	{r4, r7, pc}

080102b2 <_ZNSt6vectorI13mult_operatorSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 80102b2:	b580      	push	{r7, lr}
 80102b4:	b082      	sub	sp, #8
 80102b6:	af00      	add	r7, sp, #0
 80102b8:	6078      	str	r0, [r7, #4]
 80102ba:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80102bc:	6838      	ldr	r0, [r7, #0]
 80102be:	f000 fb29 	bl	8010914 <_ZSt4moveIR13mult_operatorEONSt16remove_referenceIT_E4typeEOS3_>
 80102c2:	4603      	mov	r3, r0
 80102c4:	4619      	mov	r1, r3
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f000 fb2f 	bl	801092a <_ZNSt6vectorI13mult_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_>
 80102cc:	bf00      	nop
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f000 fb56 	bl	801098e <_ZNSaIP16Power_expressionEC1Ev>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	4618      	mov	r0, r3
 80102e6:	f000 fb5e 	bl	80109a6 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4618      	mov	r0, r3
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f000 fb66 	bl	80109ce <_ZNSaI13mult_operatorEC1Ev>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4618      	mov	r0, r3
 8010306:	f000 fb6e 	bl	80109e6 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	4618      	mov	r0, r3
 801030e:	3708      	adds	r7, #8
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <_ZNSt6vectorIP16Power_expressionSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 801031e:	6838      	ldr	r0, [r7, #0]
 8010320:	f000 fb75 	bl	8010a0e <_ZSt4moveIRP16Power_expressionEONSt16remove_referenceIT_E4typeEOS4_>
 8010324:	4603      	mov	r3, r0
 8010326:	4619      	mov	r1, r3
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f000 fb7b 	bl	8010a24 <_ZNSt6vectorIP16Power_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 801032e:	bf00      	nop
 8010330:	3708      	adds	r7, #8
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}

08010336 <_ZNSt6vectorI12sum_operatorSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 8010336:	b580      	push	{r7, lr}
 8010338:	b082      	sub	sp, #8
 801033a:	af00      	add	r7, sp, #0
 801033c:	6078      	str	r0, [r7, #4]
 801033e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8010340:	6838      	ldr	r0, [r7, #0]
 8010342:	f000 fba1 	bl	8010a88 <_ZSt4moveIR12sum_operatorEONSt16remove_referenceIT_E4typeEOS3_>
 8010346:	4603      	mov	r3, r0
 8010348:	4619      	mov	r1, r3
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f000 fba7 	bl	8010a9e <_ZNSt6vectorI12sum_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_>
 8010350:	bf00      	nop
 8010352:	3708      	adds	r7, #8
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}

08010358 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f000 fbce 	bl	8010b02 <_ZNSaIP19Multiply_expressionEC1Ev>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	4618      	mov	r0, r3
 801036a:	f000 fbd6 	bl	8010b1a <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	4618      	mov	r0, r3
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 fbde 	bl	8010b42 <_ZNSaI12sum_operatorEC1Ev>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	4618      	mov	r0, r3
 801038a:	f000 fbe6 	bl	8010b5a <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	4618      	mov	r0, r3
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}

08010398 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8010398:	b580      	push	{r7, lr}
 801039a:	b082      	sub	sp, #8
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80103a2:	6838      	ldr	r0, [r7, #0]
 80103a4:	f000 fbed 	bl	8010b82 <_ZSt4moveIRP19Multiply_expressionEONSt16remove_referenceIT_E4typeEOS4_>
 80103a8:	4603      	mov	r3, r0
 80103aa:	4619      	mov	r1, r3
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 fbf3 	bl	8010b98 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80103b2:	bf00      	nop
 80103b4:	3708      	adds	r7, #8
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}

080103ba <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b082      	sub	sp, #8
 80103be:	af00      	add	r7, sp, #0
 80103c0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f000 fc1a 	bl	8010bfc <_ZNSaIP18Compare_expressionEC1Ev>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	4618      	mov	r0, r3
 80103cc:	f000 fc22 	bl	8010c14 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	4618      	mov	r0, r3
 80103d4:	3708      	adds	r7, #8
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <_ZNSt6vectorIP18Compare_expressionSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80103da:	b580      	push	{r7, lr}
 80103dc:	b082      	sub	sp, #8
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
 80103e2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80103e4:	6838      	ldr	r0, [r7, #0]
 80103e6:	f000 fc29 	bl	8010c3c <_ZSt4moveIRP18Compare_expressionEONSt16remove_referenceIT_E4typeEOS4_>
 80103ea:	4603      	mov	r3, r0
 80103ec:	4619      	mov	r1, r3
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 fc2f 	bl	8010c52 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80103f4:	bf00      	nop
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f000 fc56 	bl	8010cb6 <_ZNSaIP14And_expressionEC1Ev>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	4618      	mov	r0, r3
 801040e:	f000 fc5e 	bl	8010cce <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <_ZNSt6vectorIP14And_expressionSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8010426:	6838      	ldr	r0, [r7, #0]
 8010428:	f000 fc65 	bl	8010cf6 <_ZSt4moveIRP14And_expressionEONSt16remove_referenceIT_E4typeEOS4_>
 801042c:	4603      	mov	r3, r0
 801042e:	4619      	mov	r1, r3
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f000 fc6b 	bl	8010d0c <_ZNSt6vectorIP14And_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8010436:	bf00      	nop
 8010438:	3708      	adds	r7, #8
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}

0801043e <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj5EJS9_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 801043e:	b580      	push	{r7, lr}
 8010440:	b082      	sub	sp, #8
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
 8010446:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	4618      	mov	r0, r3
 801044c:	f7f1 ff2a 	bl	80022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010450:	6838      	ldr	r0, [r7, #0]
 8010452:	f7fa fe83 	bl	800b15c <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 8010456:	4603      	mov	r3, r0
 8010458:	4619      	mov	r1, r3
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f000 fc88 	bl	8010d70 <_ZSt28__variant_construct_by_indexILj5ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJSA_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f7f2 f82f 	bl	80024c4 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8010466:	4603      	mov	r3, r0
	}
 8010468:	4618      	mov	r0, r3
 801046a:	3708      	adds	r7, #8
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	4618      	mov	r0, r3
 801047c:	370c      	adds	r7, #12
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr

08010486 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj4EJS7_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 8010486:	b580      	push	{r7, lr}
 8010488:	b082      	sub	sp, #8
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	4618      	mov	r0, r3
 8010494:	f7f1 ff06 	bl	80022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010498:	6838      	ldr	r0, [r7, #0]
 801049a:	f7ff ffe9 	bl	8010470 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>
 801049e:	4603      	mov	r3, r0
 80104a0:	4619      	mov	r1, r3
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f000 fc83 	bl	8010dae <_ZSt28__variant_construct_by_indexILj4ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJS8_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7f1 ff73 	bl	8002394 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 80104ae:	4603      	mov	r3, r0
	}
 80104b0:	4618      	mov	r0, r3
 80104b2:	3708      	adds	r7, #8
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <_ZNSt8__detail9__variant14_UninitializedIbLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 80104b8:	b480      	push	{r7}
 80104ba:	b083      	sub	sp, #12
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	7039      	strb	r1, [r7, #0]
	: _M_storage(std::forward<_Args>(__args)...)
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2200      	movs	r2, #0
 80104c6:	701a      	strb	r2, [r3, #0]
	{ }
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	4618      	mov	r0, r3
 80104cc:	370c      	adds	r7, #12
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr

080104d6 <_ZNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 80104d6:	b580      	push	{r7, lr}
 80104d8:	b082      	sub	sp, #8
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
 80104de:	7039      	strb	r1, [r7, #0]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4611      	mov	r1, r2
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7ff ffe7 	bl	80104b8 <_ZNSt8__detail9__variant14_UninitializedIbLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4618      	mov	r0, r3
 80104ee:	3708      	adds	r7, #8
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b082      	sub	sp, #8
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	7039      	strb	r1, [r7, #0]
	_M_index(_Np)
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	4611      	mov	r1, r2
 8010502:	4618      	mov	r0, r3
 8010504:	f7ff ffe7 	bl	80104d6 <_ZNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1IJEEESt16in_place_index_tILj0EEDpOT_>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2200      	movs	r2, #0
 801050c:	761a      	strb	r2, [r3, #24]
	{ }
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	4618      	mov	r0, r3
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f7f1 fa25 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	bf14      	ite	ne
 801052c:	2301      	movne	r3, #1
 801052e:	2300      	moveq	r3, #0
 8010530:	b2db      	uxtb	r3, r3
 8010532:	2b00      	cmp	r3, #0
 8010534:	d002      	beq.n	801053c <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8010536:	4805      	ldr	r0, [pc, #20]	; (801054c <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 8010538:	f7f0 fd5c 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f7f2 fd0a 	bl	8002f56 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8010542:	4603      	mov	r3, r0
    }
 8010544:	4618      	mov	r0, r3
 8010546:	3708      	adds	r7, #8
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}
 801054c:	0801a290 	.word	0x0801a290

08010550 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj0EJbEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4618      	mov	r0, r3
 801055e:	f7f1 fea1 	bl	80022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010562:	6838      	ldr	r0, [r7, #0]
 8010564:	f7fd fb44 	bl	800dbf0 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010568:	4603      	mov	r3, r0
 801056a:	4619      	mov	r1, r3
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f000 fc3d 	bl	8010dec <_ZSt28__variant_construct_by_indexILj0ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJbEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7ff ffd0 	bl	8010518 <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8010578:	4603      	mov	r3, r0
	}
 801057a:	4618      	mov	r0, r3
 801057c:	3708      	adds	r7, #8
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8010582:	b580      	push	{r7, lr}
 8010584:	b082      	sub	sp, #8
 8010586:	af00      	add	r7, sp, #0
 8010588:	7138      	strb	r0, [r7, #4]
 801058a:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 801058c:	6838      	ldr	r0, [r7, #0]
 801058e:	f000 fc4d 	bl	8010e2c <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010592:	4603      	mov	r3, r0
 8010594:	4618      	mov	r0, r3
 8010596:	f000 fc54 	bl	8010e42 <_ZNOSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>
 801059a:	4603      	mov	r3, r0
 801059c:	4618      	mov	r0, r3
 801059e:	3708      	adds	r7, #8
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <_ZNSt8__detail9__variant5__getILj1ENS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80105a4:	b590      	push	{r4, r7, lr}
 80105a6:	b083      	sub	sp, #12
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	7138      	strb	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80105ae:	6838      	ldr	r0, [r7, #0]
 80105b0:	f7fb fa88 	bl	800bac4 <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISA_E4typeE>
 80105b4:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80105b6:	4619      	mov	r1, r3
 80105b8:	4620      	mov	r0, r4
 80105ba:	f7ff ffe2 	bl	8010582 <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 80105be:	4603      	mov	r3, r0
    }
 80105c0:	4618      	mov	r0, r3
 80105c2:	370c      	adds	r7, #12
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd90      	pop	{r4, r7, pc}

080105c8 <_ZNSt8__detail9__variant5__getILj1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80105c8:	b590      	push	{r4, r7, lr}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f7fb fa6c 	bl	800baae <_ZSt7forwardISt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80105d6:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 80105d8:	4619      	mov	r1, r3
 80105da:	4620      	mov	r0, r4
 80105dc:	f7ff ffe2 	bl	80105a4 <_ZNSt8__detail9__variant5__getILj1ENS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80105e0:	4603      	mov	r3, r0
    }
 80105e2:	4618      	mov	r0, r3
 80105e4:	370c      	adds	r7, #12
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd90      	pop	{r4, r7, pc}
	...

080105ec <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>:
    get(variant<_Types...>&& __v)
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f7f7 fc29 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 80105fa:	4603      	mov	r3, r0
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	bf14      	ite	ne
 8010600:	2301      	movne	r3, #1
 8010602:	2300      	moveq	r3, #0
 8010604:	b2db      	uxtb	r3, r3
 8010606:	2b00      	cmp	r3, #0
 8010608:	d002      	beq.n	8010610 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 801060a:	4807      	ldr	r0, [pc, #28]	; (8010628 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x3c>)
 801060c:	f7f0 fcf2 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(std::move(__v));
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f7fa fcf9 	bl	800b008 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 8010616:	4603      	mov	r3, r0
 8010618:	4618      	mov	r0, r3
 801061a:	f7ff ffd5 	bl	80105c8 <_ZNSt8__detail9__variant5__getILj1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 801061e:	4603      	mov	r3, r0
    }
 8010620:	4618      	mov	r0, r3
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}
 8010628:	0801a290 	.word	0x0801a290

0801062c <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f7f1 f99b 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 801063a:	4603      	mov	r3, r0
 801063c:	2b01      	cmp	r3, #1
 801063e:	bf14      	ite	ne
 8010640:	2301      	movne	r3, #1
 8010642:	2300      	moveq	r3, #0
 8010644:	b2db      	uxtb	r3, r3
 8010646:	2b00      	cmp	r3, #0
 8010648:	d002      	beq.n	8010650 <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 801064a:	4805      	ldr	r0, [pc, #20]	; (8010660 <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 801064c:	f7f0 fcd2 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f7f2 fd0a 	bl	800306a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8010656:	4603      	mov	r3, r0
    }
 8010658:	4618      	mov	r0, r3
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	0801a290 	.word	0x0801a290

08010664 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj1EJiEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
 801066c:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4618      	mov	r0, r3
 8010672:	f7f1 fe17 	bl	80022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010676:	6838      	ldr	r0, [r7, #0]
 8010678:	f7f6 fe81 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 801067c:	4603      	mov	r3, r0
 801067e:	4619      	mov	r1, r3
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f000 fbeb 	bl	8010e5c <_ZSt28__variant_construct_by_indexILj1ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJiEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f7ff ffd0 	bl	801062c <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 801068c:	4603      	mov	r3, r0
	}
 801068e:	4618      	mov	r0, r3
 8010690:	3708      	adds	r7, #8
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}

08010696 <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8010696:	b580      	push	{r7, lr}
 8010698:	b082      	sub	sp, #8
 801069a:	af00      	add	r7, sp, #0
 801069c:	7138      	strb	r0, [r7, #4]
 801069e:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80106a0:	6838      	ldr	r0, [r7, #0]
 80106a2:	f000 fbfa 	bl	8010e9a <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80106a6:	4603      	mov	r3, r0
 80106a8:	4618      	mov	r0, r3
 80106aa:	f000 fc01 	bl	8010eb0 <_ZNOSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>
 80106ae:	4603      	mov	r3, r0
 80106b0:	4618      	mov	r0, r3
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <_ZNSt8__detail9__variant5__getILj1ENS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80106b8:	b590      	push	{r4, r7, lr}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
 80106be:	7138      	strb	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80106c2:	6838      	ldr	r0, [r7, #0]
 80106c4:	f000 fbb2 	bl	8010e2c <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80106c8:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80106ca:	4619      	mov	r1, r3
 80106cc:	4620      	mov	r0, r4
 80106ce:	f7ff ffe2 	bl	8010696 <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>
 80106d2:	4603      	mov	r3, r0
    }
 80106d4:	4618      	mov	r0, r3
 80106d6:	370c      	adds	r7, #12
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd90      	pop	{r4, r7, pc}

080106dc <_ZNSt8__detail9__variant5__getILj2ENS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80106dc:	b590      	push	{r4, r7, lr}
 80106de:	b083      	sub	sp, #12
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	7138      	strb	r0, [r7, #4]
 80106e4:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80106e6:	6838      	ldr	r0, [r7, #0]
 80106e8:	f7fb f9ec 	bl	800bac4 <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISA_E4typeE>
 80106ec:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80106ee:	4619      	mov	r1, r3
 80106f0:	4620      	mov	r0, r4
 80106f2:	f7ff ffe1 	bl	80106b8 <_ZNSt8__detail9__variant5__getILj1ENS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80106f6:	4603      	mov	r3, r0
    }
 80106f8:	4618      	mov	r0, r3
 80106fa:	370c      	adds	r7, #12
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd90      	pop	{r4, r7, pc}

08010700 <_ZNSt8__detail9__variant5__getILj2ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8010700:	b590      	push	{r4, r7, lr}
 8010702:	b083      	sub	sp, #12
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f7fb f9d0 	bl	800baae <_ZSt7forwardISt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS8_E4typeE>
 801070e:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8010710:	4619      	mov	r1, r3
 8010712:	4620      	mov	r0, r4
 8010714:	f7ff ffe2 	bl	80106dc <_ZNSt8__detail9__variant5__getILj2ENS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8010718:	4603      	mov	r3, r0
    }
 801071a:	4618      	mov	r0, r3
 801071c:	370c      	adds	r7, #12
 801071e:	46bd      	mov	sp, r7
 8010720:	bd90      	pop	{r4, r7, pc}
	...

08010724 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>:
    get(variant<_Types...>&& __v)
 8010724:	b580      	push	{r7, lr}
 8010726:	b082      	sub	sp, #8
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	f7f7 fb8d 	bl	8007e4c <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 8010732:	4603      	mov	r3, r0
 8010734:	2b02      	cmp	r3, #2
 8010736:	bf14      	ite	ne
 8010738:	2301      	movne	r3, #1
 801073a:	2300      	moveq	r3, #0
 801073c:	b2db      	uxtb	r3, r3
 801073e:	2b00      	cmp	r3, #0
 8010740:	d002      	beq.n	8010748 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8010742:	4807      	ldr	r0, [pc, #28]	; (8010760 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x3c>)
 8010744:	f7f0 fc56 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(std::move(__v));
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f7fa fc5d 	bl	800b008 <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 801074e:	4603      	mov	r3, r0
 8010750:	4618      	mov	r0, r3
 8010752:	f7ff ffd5 	bl	8010700 <_ZNSt8__detail9__variant5__getILj2ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8010756:	4603      	mov	r3, r0
    }
 8010758:	4618      	mov	r0, r3
 801075a:	3708      	adds	r7, #8
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}
 8010760:	0801a290 	.word	0x0801a290

08010764 <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f7f1 f8ff 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8010772:	4603      	mov	r3, r0
 8010774:	2b02      	cmp	r3, #2
 8010776:	bf14      	ite	ne
 8010778:	2301      	movne	r3, #1
 801077a:	2300      	moveq	r3, #0
 801077c:	b2db      	uxtb	r3, r3
 801077e:	2b00      	cmp	r3, #0
 8010780:	d002      	beq.n	8010788 <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8010782:	4805      	ldr	r0, [pc, #20]	; (8010798 <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 8010784:	f7f0 fc36 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f7f2 fd0a 	bl	80031a2 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 801078e:	4603      	mov	r3, r0
    }
 8010790:	4618      	mov	r0, r3
 8010792:	3708      	adds	r7, #8
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}
 8010798:	0801a290 	.word	0x0801a290

0801079c <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj2EJfEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 801079c:	b580      	push	{r7, lr}
 801079e:	b082      	sub	sp, #8
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7f1 fd7b 	bl	80022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 80107ae:	6838      	ldr	r0, [r7, #0]
 80107b0:	f7f6 fe1c 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80107b4:	4603      	mov	r3, r0
 80107b6:	4619      	mov	r1, r3
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f000 fb86 	bl	8010eca <_ZSt28__variant_construct_by_indexILj2ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJfEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f7ff ffd0 	bl	8010764 <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 80107c4:	4603      	mov	r3, r0
	}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3708      	adds	r7, #8
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
	...

080107d0 <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f7f1 f8c9 	bl	8001970 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80107de:	4603      	mov	r3, r0
 80107e0:	2b03      	cmp	r3, #3
 80107e2:	bf14      	ite	ne
 80107e4:	2301      	movne	r3, #1
 80107e6:	2300      	moveq	r3, #0
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d002      	beq.n	80107f4 <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 80107ee:	4805      	ldr	r0, [pc, #20]	; (8010804 <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 80107f0:	f7f0 fc00 	bl	8000ff4 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f7f2 fd82 	bl	80032fe <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80107fa:	4603      	mov	r3, r0
    }
 80107fc:	4618      	mov	r0, r3
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	0801a290 	.word	0x0801a290

08010808 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj3EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	4618      	mov	r0, r3
 8010816:	f7f1 fd45 	bl	80022a4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 801081a:	6838      	ldr	r0, [r7, #0]
 801081c:	f7f6 fd78 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8010820:	4603      	mov	r3, r0
 8010822:	4619      	mov	r1, r3
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f000 fb6f 	bl	8010f08 <_ZSt28__variant_construct_by_indexILj3ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJS6_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f7ff ffd0 	bl	80107d0 <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8010830:	4603      	mov	r3, r0
	}
 8010832:	4618      	mov	r0, r3
 8010834:	3708      	adds	r7, #8
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <_ZNSt8__detail9__variant14_UninitializedIP17Primal_expressionLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 801083a:	b480      	push	{r7}
 801083c:	b083      	sub	sp, #12
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
 8010842:	7039      	strb	r1, [r7, #0]
	: _M_storage(std::forward<_Args>(__args)...)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2200      	movs	r2, #0
 8010848:	601a      	str	r2, [r3, #0]
	{ }
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	4618      	mov	r0, r3
 801084e:	370c      	adds	r7, #12
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr

08010858 <_ZNSt8__detail9__variant15_Variadic_unionIJP17Primal_expressionP10ExpressionEEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
 8010860:	7039      	strb	r1, [r7, #0]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	4611      	mov	r1, r2
 8010866:	4618      	mov	r0, r3
 8010868:	f7ff ffe7 	bl	801083a <_ZNSt8__detail9__variant14_UninitializedIP17Primal_expressionLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	4618      	mov	r0, r3
 8010870:	3708      	adds	r7, #8
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP17Primal_expressionP10ExpressionEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 8010876:	b580      	push	{r7, lr}
 8010878:	b082      	sub	sp, #8
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
 801087e:	7039      	strb	r1, [r7, #0]
	_M_index(_Np)
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	4611      	mov	r1, r2
 8010884:	4618      	mov	r0, r3
 8010886:	f7ff ffe7 	bl	8010858 <_ZNSt8__detail9__variant15_Variadic_unionIJP17Primal_expressionP10ExpressionEEC1IJEEESt16in_place_index_tILj0EEDpOT_>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2200      	movs	r2, #0
 801088e:	711a      	strb	r2, [r3, #4]
	{ }
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	4618      	mov	r0, r3
 8010894:	3708      	adds	r7, #8
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}

0801089a <_ZNSt7variantIJP17Primal_expressionP10ExpressionEE7emplaceILj1EJS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>:
	emplace(_Args&&... __args)
 801089a:	b580      	push	{r7, lr}
 801089c:	b082      	sub	sp, #8
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
 80108a2:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	4618      	mov	r0, r3
 80108a8:	f000 fb4f 	bl	8010f4a <_ZNSt8__detail9__variant16_Variant_storageILb1EJP17Primal_expressionP10ExpressionEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 80108ac:	6838      	ldr	r0, [r7, #0]
 80108ae:	f7fa ff3d 	bl	800b72c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80108b2:	4603      	mov	r3, r0
 80108b4:	4619      	mov	r1, r3
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f000 fb54 	bl	8010f64 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJP17Primal_expressionP10ExpressionEEJS4_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f7f1 fe51 	bl	8002564 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 80108c2:	4603      	mov	r3, r0
	}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80108cc:	b480      	push	{r7}
 80108ce:	b083      	sub	sp, #12
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	4618      	mov	r0, r3
 80108d8:	370c      	adds	r7, #12
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr

080108e2 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEE7emplaceILj0EJS1_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>:
	emplace(_Args&&... __args)
 80108e2:	b580      	push	{r7, lr}
 80108e4:	b082      	sub	sp, #8
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
 80108ea:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	4618      	mov	r0, r3
 80108f0:	f000 fb2b 	bl	8010f4a <_ZNSt8__detail9__variant16_Variant_storageILb1EJP17Primal_expressionP10ExpressionEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 80108f4:	6838      	ldr	r0, [r7, #0]
 80108f6:	f7ff ffe9 	bl	80108cc <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80108fa:	4603      	mov	r3, r0
 80108fc:	4619      	mov	r1, r3
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f000 fb4f 	bl	8010fa2 <_ZSt28__variant_construct_by_indexILj0ESt7variantIJP17Primal_expressionP10ExpressionEEJS2_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f7f1 fe6b 	bl	80025e0 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 801090a:	4603      	mov	r3, r0
	}
 801090c:	4618      	mov	r0, r3
 801090e:	3708      	adds	r7, #8
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <_ZSt4moveIR13mult_operatorEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8010914:	b480      	push	{r7}
 8010916:	b083      	sub	sp, #12
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	4618      	mov	r0, r3
 8010920:	370c      	adds	r7, #12
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr

0801092a <_ZNSt6vectorI13mult_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_>:
      vector<_Tp, _Alloc>::
 801092a:	b5b0      	push	{r4, r5, r7, lr}
 801092c:	b082      	sub	sp, #8
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
 8010932:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	685a      	ldr	r2, [r3, #4]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	689b      	ldr	r3, [r3, #8]
 801093c:	429a      	cmp	r2, r3
 801093e:	d011      	beq.n	8010964 <_ZNSt6vectorI13mult_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010940:	687c      	ldr	r4, [r7, #4]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	685d      	ldr	r5, [r3, #4]
 8010946:	6838      	ldr	r0, [r7, #0]
 8010948:	f000 fb4a 	bl	8010fe0 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 801094c:	4603      	mov	r3, r0
 801094e:	461a      	mov	r2, r3
 8010950:	4629      	mov	r1, r5
 8010952:	4620      	mov	r0, r4
 8010954:	f000 fb4f 	bl	8010ff6 <_ZNSt16allocator_traitsISaI13mult_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	685b      	ldr	r3, [r3, #4]
 801095c:	1c5a      	adds	r2, r3, #1
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	605a      	str	r2, [r3, #4]
 8010962:	e00c      	b.n	801097e <_ZNSt6vectorI13mult_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f000 fb59 	bl	801101c <_ZNSt6vectorI13mult_operatorSaIS0_EE3endEv>
 801096a:	4604      	mov	r4, r0
 801096c:	6838      	ldr	r0, [r7, #0]
 801096e:	f000 fb37 	bl	8010fe0 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8010972:	4603      	mov	r3, r0
 8010974:	461a      	mov	r2, r3
 8010976:	4621      	mov	r1, r4
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f000 fb61 	bl	8011040 <_ZNSt6vectorI13mult_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
	return back();
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f000 fbd8 	bl	8011134 <_ZNSt6vectorI13mult_operatorSaIS0_EE4backEv>
 8010984:	4603      	mov	r3, r0
      }
 8010986:	4618      	mov	r0, r3
 8010988:	3708      	adds	r7, #8
 801098a:	46bd      	mov	sp, r7
 801098c:	bdb0      	pop	{r4, r5, r7, pc}

0801098e <_ZNSaIP16Power_expressionEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801098e:	b580      	push	{r7, lr}
 8010990:	b082      	sub	sp, #8
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f000 fbe7 	bl	801116a <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionEC1Ev>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	4618      	mov	r0, r3
 80109a0:	3708      	adds	r7, #8
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}

080109a6 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80109a6:	b480      	push	{r7}
 80109a8:	b083      	sub	sp, #12
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2200      	movs	r2, #0
 80109b2:	601a      	str	r2, [r3, #0]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2200      	movs	r2, #0
 80109b8:	605a      	str	r2, [r3, #4]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2200      	movs	r2, #0
 80109be:	609a      	str	r2, [r3, #8]
	{ }
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	4618      	mov	r0, r3
 80109c4:	370c      	adds	r7, #12
 80109c6:	46bd      	mov	sp, r7
 80109c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109cc:	4770      	bx	lr

080109ce <_ZNSaI13mult_operatorEC1Ev>:
 80109ce:	b580      	push	{r7, lr}
 80109d0:	b082      	sub	sp, #8
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	6078      	str	r0, [r7, #4]
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f000 fbd2 	bl	8011180 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorEC1Ev>
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	4618      	mov	r0, r3
 80109e0:	3708      	adds	r7, #8
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}

080109e6 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80109e6:	b480      	push	{r7}
 80109e8:	b083      	sub	sp, #12
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2200      	movs	r2, #0
 80109f2:	601a      	str	r2, [r3, #0]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2200      	movs	r2, #0
 80109f8:	605a      	str	r2, [r3, #4]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2200      	movs	r2, #0
 80109fe:	609a      	str	r2, [r3, #8]
	{ }
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	4618      	mov	r0, r3
 8010a04:	370c      	adds	r7, #12
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr

08010a0e <_ZSt4moveIRP16Power_expressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010a0e:	b480      	push	{r7}
 8010a10:	b083      	sub	sp, #12
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <_ZNSt6vectorIP16Power_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8010a24:	b5b0      	push	{r4, r5, r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	685a      	ldr	r2, [r3, #4]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	689b      	ldr	r3, [r3, #8]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d011      	beq.n	8010a5e <_ZNSt6vectorIP16Power_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010a3a:	687c      	ldr	r4, [r7, #4]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	685d      	ldr	r5, [r3, #4]
 8010a40:	6838      	ldr	r0, [r7, #0]
 8010a42:	f000 fba8 	bl	8011196 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010a46:	4603      	mov	r3, r0
 8010a48:	461a      	mov	r2, r3
 8010a4a:	4629      	mov	r1, r5
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	f000 fbad 	bl	80111ac <_ZNSt16allocator_traitsISaIP16Power_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	1d1a      	adds	r2, r3, #4
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	605a      	str	r2, [r3, #4]
 8010a5c:	e00c      	b.n	8010a78 <_ZNSt6vectorIP16Power_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f7f1 f855 	bl	8001b0e <_ZNSt6vectorIP16Power_expressionSaIS1_EE3endEv>
 8010a64:	4604      	mov	r4, r0
 8010a66:	6838      	ldr	r0, [r7, #0]
 8010a68:	f000 fb95 	bl	8011196 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	461a      	mov	r2, r3
 8010a70:	4621      	mov	r1, r4
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f000 fbae 	bl	80111d4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f000 fc27 	bl	80112cc <_ZNSt6vectorIP16Power_expressionSaIS1_EE4backEv>
 8010a7e:	4603      	mov	r3, r0
      }
 8010a80:	4618      	mov	r0, r3
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bdb0      	pop	{r4, r5, r7, pc}

08010a88 <_ZSt4moveIR12sum_operatorEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8010a88:	b480      	push	{r7}
 8010a8a:	b083      	sub	sp, #12
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	4618      	mov	r0, r3
 8010a94:	370c      	adds	r7, #12
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr

08010a9e <_ZNSt6vectorI12sum_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_>:
      vector<_Tp, _Alloc>::
 8010a9e:	b5b0      	push	{r4, r5, r7, lr}
 8010aa0:	b082      	sub	sp, #8
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	6078      	str	r0, [r7, #4]
 8010aa6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	685a      	ldr	r2, [r3, #4]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	689b      	ldr	r3, [r3, #8]
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d011      	beq.n	8010ad8 <_ZNSt6vectorI12sum_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010ab4:	687c      	ldr	r4, [r7, #4]
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	685d      	ldr	r5, [r3, #4]
 8010aba:	6838      	ldr	r0, [r7, #0]
 8010abc:	f000 fc21 	bl	8011302 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	4629      	mov	r1, r5
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	f000 fc26 	bl	8011318 <_ZNSt16allocator_traitsISaI12sum_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	685b      	ldr	r3, [r3, #4]
 8010ad0:	1c5a      	adds	r2, r3, #1
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	605a      	str	r2, [r3, #4]
 8010ad6:	e00c      	b.n	8010af2 <_ZNSt6vectorI12sum_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f000 fc30 	bl	801133e <_ZNSt6vectorI12sum_operatorSaIS0_EE3endEv>
 8010ade:	4604      	mov	r4, r0
 8010ae0:	6838      	ldr	r0, [r7, #0]
 8010ae2:	f000 fc0e 	bl	8011302 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	461a      	mov	r2, r3
 8010aea:	4621      	mov	r1, r4
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f000 fc37 	bl	8011360 <_ZNSt6vectorI12sum_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
	return back();
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f000 fcae 	bl	8011454 <_ZNSt6vectorI12sum_operatorSaIS0_EE4backEv>
 8010af8:	4603      	mov	r3, r0
      }
 8010afa:	4618      	mov	r0, r3
 8010afc:	3708      	adds	r7, #8
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bdb0      	pop	{r4, r5, r7, pc}

08010b02 <_ZNSaIP19Multiply_expressionEC1Ev>:
 8010b02:	b580      	push	{r7, lr}
 8010b04:	b082      	sub	sp, #8
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f000 fcbd 	bl	801148a <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionEC1Ev>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	4618      	mov	r0, r3
 8010b14:	3708      	adds	r7, #8
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010b1a:	b480      	push	{r7}
 8010b1c:	b083      	sub	sp, #12
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2200      	movs	r2, #0
 8010b26:	601a      	str	r2, [r3, #0]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	605a      	str	r2, [r3, #4]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2200      	movs	r2, #0
 8010b32:	609a      	str	r2, [r3, #8]
	{ }
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	4618      	mov	r0, r3
 8010b38:	370c      	adds	r7, #12
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b40:	4770      	bx	lr

08010b42 <_ZNSaI12sum_operatorEC1Ev>:
 8010b42:	b580      	push	{r7, lr}
 8010b44:	b082      	sub	sp, #8
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f000 fca8 	bl	80114a0 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorEC1Ev>
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	4618      	mov	r0, r3
 8010b54:	3708      	adds	r7, #8
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}

08010b5a <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010b5a:	b480      	push	{r7}
 8010b5c:	b083      	sub	sp, #12
 8010b5e:	af00      	add	r7, sp, #0
 8010b60:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2200      	movs	r2, #0
 8010b66:	601a      	str	r2, [r3, #0]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	605a      	str	r2, [r3, #4]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2200      	movs	r2, #0
 8010b72:	609a      	str	r2, [r3, #8]
	{ }
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	4618      	mov	r0, r3
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr

08010b82 <_ZSt4moveIRP19Multiply_expressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010b82:	b480      	push	{r7}
 8010b84:	b083      	sub	sp, #12
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	370c      	adds	r7, #12
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8010b98:	b5b0      	push	{r4, r5, r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	685a      	ldr	r2, [r3, #4]
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	689b      	ldr	r3, [r3, #8]
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d011      	beq.n	8010bd2 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010bae:	687c      	ldr	r4, [r7, #4]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	685d      	ldr	r5, [r3, #4]
 8010bb4:	6838      	ldr	r0, [r7, #0]
 8010bb6:	f000 fc7e 	bl	80114b6 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	461a      	mov	r2, r3
 8010bbe:	4629      	mov	r1, r5
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	f000 fc83 	bl	80114cc <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	685b      	ldr	r3, [r3, #4]
 8010bca:	1d1a      	adds	r2, r3, #4
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	605a      	str	r2, [r3, #4]
 8010bd0:	e00c      	b.n	8010bec <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f7f1 f826 	bl	8001c24 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE3endEv>
 8010bd8:	4604      	mov	r4, r0
 8010bda:	6838      	ldr	r0, [r7, #0]
 8010bdc:	f000 fc6b 	bl	80114b6 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010be0:	4603      	mov	r3, r0
 8010be2:	461a      	mov	r2, r3
 8010be4:	4621      	mov	r1, r4
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f000 fc84 	bl	80114f4 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f000 fcfd 	bl	80115ec <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE4backEv>
 8010bf2:	4603      	mov	r3, r0
      }
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bdb0      	pop	{r4, r5, r7, pc}

08010bfc <_ZNSaIP18Compare_expressionEC1Ev>:
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b082      	sub	sp, #8
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f000 fd0c 	bl	8011622 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionEC1Ev>
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3708      	adds	r7, #8
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	601a      	str	r2, [r3, #0]
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2200      	movs	r2, #0
 8010c26:	605a      	str	r2, [r3, #4]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	609a      	str	r2, [r3, #8]
	{ }
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	4618      	mov	r0, r3
 8010c32:	370c      	adds	r7, #12
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr

08010c3c <_ZSt4moveIRP18Compare_expressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010c3c:	b480      	push	{r7}
 8010c3e:	b083      	sub	sp, #12
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	4618      	mov	r0, r3
 8010c48:	370c      	adds	r7, #12
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr

08010c52 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8010c52:	b5b0      	push	{r4, r5, r7, lr}
 8010c54:	b082      	sub	sp, #8
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	6078      	str	r0, [r7, #4]
 8010c5a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	685a      	ldr	r2, [r3, #4]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	689b      	ldr	r3, [r3, #8]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d011      	beq.n	8010c8c <_ZNSt6vectorIP18Compare_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010c68:	687c      	ldr	r4, [r7, #4]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	685d      	ldr	r5, [r3, #4]
 8010c6e:	6838      	ldr	r0, [r7, #0]
 8010c70:	f000 fce2 	bl	8011638 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010c74:	4603      	mov	r3, r0
 8010c76:	461a      	mov	r2, r3
 8010c78:	4629      	mov	r1, r5
 8010c7a:	4620      	mov	r0, r4
 8010c7c:	f000 fce7 	bl	801164e <_ZNSt16allocator_traitsISaIP18Compare_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	1d1a      	adds	r2, r3, #4
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	605a      	str	r2, [r3, #4]
 8010c8a:	e00c      	b.n	8010ca6 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f7f1 f839 	bl	8001d04 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE3endEv>
 8010c92:	4604      	mov	r4, r0
 8010c94:	6838      	ldr	r0, [r7, #0]
 8010c96:	f000 fccf 	bl	8011638 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	4621      	mov	r1, r4
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f000 fce7 	bl	8011674 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f000 fd60 	bl	801176c <_ZNSt6vectorIP18Compare_expressionSaIS1_EE4backEv>
 8010cac:	4603      	mov	r3, r0
      }
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3708      	adds	r7, #8
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bdb0      	pop	{r4, r5, r7, pc}

08010cb6 <_ZNSaIP14And_expressionEC1Ev>:
 8010cb6:	b580      	push	{r7, lr}
 8010cb8:	b082      	sub	sp, #8
 8010cba:	af00      	add	r7, sp, #0
 8010cbc:	6078      	str	r0, [r7, #4]
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 fd6f 	bl	80117a2 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionEC1Ev>
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3708      	adds	r7, #8
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010cce:	b480      	push	{r7}
 8010cd0:	b083      	sub	sp, #12
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	601a      	str	r2, [r3, #0]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	605a      	str	r2, [r3, #4]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	609a      	str	r2, [r3, #8]
	{ }
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	4618      	mov	r0, r3
 8010cec:	370c      	adds	r7, #12
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf4:	4770      	bx	lr

08010cf6 <_ZSt4moveIRP14And_expressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010cf6:	b480      	push	{r7}
 8010cf8:	b083      	sub	sp, #12
 8010cfa:	af00      	add	r7, sp, #0
 8010cfc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	4618      	mov	r0, r3
 8010d02:	370c      	adds	r7, #12
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr

08010d0c <_ZNSt6vectorIP14And_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8010d0c:	b5b0      	push	{r4, r5, r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	685a      	ldr	r2, [r3, #4]
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	689b      	ldr	r3, [r3, #8]
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d011      	beq.n	8010d46 <_ZNSt6vectorIP14And_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010d22:	687c      	ldr	r4, [r7, #4]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	685d      	ldr	r5, [r3, #4]
 8010d28:	6838      	ldr	r0, [r7, #0]
 8010d2a:	f000 fd45 	bl	80117b8 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	461a      	mov	r2, r3
 8010d32:	4629      	mov	r1, r5
 8010d34:	4620      	mov	r0, r4
 8010d36:	f000 fd4a 	bl	80117ce <_ZNSt16allocator_traitsISaIP14And_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	685b      	ldr	r3, [r3, #4]
 8010d3e:	1d1a      	adds	r2, r3, #4
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	605a      	str	r2, [r3, #4]
 8010d44:	e00c      	b.n	8010d60 <_ZNSt6vectorIP14And_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f7f1 f84c 	bl	8001de4 <_ZNSt6vectorIP14And_expressionSaIS1_EE3endEv>
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	6838      	ldr	r0, [r7, #0]
 8010d50:	f000 fd32 	bl	80117b8 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010d54:	4603      	mov	r3, r0
 8010d56:	461a      	mov	r2, r3
 8010d58:	4621      	mov	r1, r4
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f000 fd4a 	bl	80117f4 <_ZNSt6vectorIP14And_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f000 fdc3 	bl	80118ec <_ZNSt6vectorIP14And_expressionSaIS1_EE4backEv>
 8010d66:	4603      	mov	r3, r0
      }
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3708      	adds	r7, #8
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bdb0      	pop	{r4, r5, r7, pc}

08010d70 <_ZSt28__variant_construct_by_indexILj5ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJSA_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8010d70:	b590      	push	{r4, r7, lr}
 8010d72:	b085      	sub	sp, #20
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
 8010d78:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2205      	movs	r2, #5
 8010d7e:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f7f1 fb8e 	bl	80024a2 <_ZNSt8__detail9__variant5__getILj5ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8010d86:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8010d88:	6838      	ldr	r0, [r7, #0]
 8010d8a:	f7fa f9e7 	bl	800b15c <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 8010d8e:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8010d90:	681c      	ldr	r4, [r3, #0]
 8010d92:	68f8      	ldr	r0, [r7, #12]
 8010d94:	f7fb fb03 	bl	800c39e <_ZSt9addressofIP13Function_callEPT_RS2_>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	2004      	movs	r0, #4
 8010d9e:	f7f0 f91d 	bl	8000fdc <_ZnwjPv>
 8010da2:	4603      	mov	r3, r0
 8010da4:	601c      	str	r4, [r3, #0]
    }
 8010da6:	bf00      	nop
 8010da8:	3714      	adds	r7, #20
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd90      	pop	{r4, r7, pc}

08010dae <_ZSt28__variant_construct_by_indexILj4ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJS8_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8010dae:	b590      	push	{r4, r7, lr}
 8010db0:	b085      	sub	sp, #20
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	6078      	str	r0, [r7, #4]
 8010db6:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2204      	movs	r2, #4
 8010dbc:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f7f1 fad7 	bl	8002372 <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8010dc4:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8010dc6:	6838      	ldr	r0, [r7, #0]
 8010dc8:	f7ff fb52 	bl	8010470 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>
 8010dcc:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8010dce:	681c      	ldr	r4, [r3, #0]
 8010dd0:	68f8      	ldr	r0, [r7, #12]
 8010dd2:	f000 fda6 	bl	8011922 <_ZSt9addressofIP8VariableEPT_RS2_>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	4619      	mov	r1, r3
 8010dda:	2004      	movs	r0, #4
 8010ddc:	f7f0 f8fe 	bl	8000fdc <_ZnwjPv>
 8010de0:	4603      	mov	r3, r0
 8010de2:	601c      	str	r4, [r3, #0]
    }
 8010de4:	bf00      	nop
 8010de6:	3714      	adds	r7, #20
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd90      	pop	{r4, r7, pc}

08010dec <_ZSt28__variant_construct_by_indexILj0ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJbEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8010dec:	b590      	push	{r4, r7, lr}
 8010dee:	b085      	sub	sp, #20
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f7f2 f8aa 	bl	8002f56 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8010e02:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8010e04:	6838      	ldr	r0, [r7, #0]
 8010e06:	f7fc fef3 	bl	800dbf0 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010e0a:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8010e0c:	781c      	ldrb	r4, [r3, #0]
 8010e0e:	68f8      	ldr	r0, [r7, #12]
 8010e10:	f7fc ff5a 	bl	800dcc8 <_ZSt9addressofIbEPT_RS0_>
 8010e14:	4603      	mov	r3, r0
 8010e16:	4619      	mov	r1, r3
 8010e18:	2001      	movs	r0, #1
 8010e1a:	f7f0 f8df 	bl	8000fdc <_ZnwjPv>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	4622      	mov	r2, r4
 8010e22:	701a      	strb	r2, [r3, #0]
    }
 8010e24:	bf00      	nop
 8010e26:	3714      	adds	r7, #20
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd90      	pop	{r4, r7, pc}

08010e2c <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010e2c:	b480      	push	{r7}
 8010e2e:	b083      	sub	sp, #12
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	4618      	mov	r0, r3
 8010e38:	370c      	adds	r7, #12
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e40:	4770      	bx	lr

08010e42 <_ZNOSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>:
      constexpr _Type&& _M_get() && noexcept
 8010e42:	b580      	push	{r7, lr}
 8010e44:	b082      	sub	sp, #8
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	6078      	str	r0, [r7, #4]
      { return std::move(_M_storage); }
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7fc fdae 	bl	800d9ae <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8010e52:	4603      	mov	r3, r0
 8010e54:	4618      	mov	r0, r3
 8010e56:	3708      	adds	r7, #8
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <_ZSt28__variant_construct_by_indexILj1ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJiEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8010e5c:	b590      	push	{r4, r7, lr}
 8010e5e:	b085      	sub	sp, #20
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2201      	movs	r2, #1
 8010e6a:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f7f2 f8fc 	bl	800306a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8010e72:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8010e74:	6838      	ldr	r0, [r7, #0]
 8010e76:	f7f6 fa82 	bl	800737e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8010e7a:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8010e7c:	681c      	ldr	r4, [r3, #0]
 8010e7e:	68f8      	ldr	r0, [r7, #12]
 8010e80:	f7fc ff0a 	bl	800dc98 <_ZSt9addressofIiEPT_RS0_>
 8010e84:	4603      	mov	r3, r0
 8010e86:	4619      	mov	r1, r3
 8010e88:	2004      	movs	r0, #4
 8010e8a:	f7f0 f8a7 	bl	8000fdc <_ZnwjPv>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	601c      	str	r4, [r3, #0]
    }
 8010e92:	bf00      	nop
 8010e94:	3714      	adds	r7, #20
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd90      	pop	{r4, r7, pc}

08010e9a <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010e9a:	b480      	push	{r7}
 8010e9c:	b083      	sub	sp, #12
 8010e9e:	af00      	add	r7, sp, #0
 8010ea0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	370c      	adds	r7, #12
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr

08010eb0 <_ZNOSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>:
      constexpr _Type&& _M_get() && noexcept
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
      { return std::move(_M_storage); }
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7fc fd9b 	bl	800d9f6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3708      	adds	r7, #8
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <_ZSt28__variant_construct_by_indexILj2ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJfEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8010eca:	b590      	push	{r4, r7, lr}
 8010ecc:	b085      	sub	sp, #20
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
 8010ed2:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2202      	movs	r2, #2
 8010ed8:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7f2 f961 	bl	80031a2 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8010ee0:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8010ee2:	6838      	ldr	r0, [r7, #0]
 8010ee4:	f7f6 fa82 	bl	80073ec <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8010ee8:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8010eea:	681c      	ldr	r4, [r3, #0]
 8010eec:	68f8      	ldr	r0, [r7, #12]
 8010eee:	f7fc fedf 	bl	800dcb0 <_ZSt9addressofIfEPT_RS0_>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	2004      	movs	r0, #4
 8010ef8:	f7f0 f870 	bl	8000fdc <_ZnwjPv>
 8010efc:	4603      	mov	r3, r0
 8010efe:	601c      	str	r4, [r3, #0]
    }
 8010f00:	bf00      	nop
 8010f02:	3714      	adds	r7, #20
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd90      	pop	{r4, r7, pc}

08010f08 <_ZSt28__variant_construct_by_indexILj3ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJS6_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8010f08:	b590      	push	{r4, r7, lr}
 8010f0a:	b085      	sub	sp, #20
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2203      	movs	r2, #3
 8010f16:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f7f2 f9f0 	bl	80032fe <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8010f1e:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8010f20:	6838      	ldr	r0, [r7, #0]
 8010f22:	f7f6 f9f5 	bl	8007310 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8010f26:	4604      	mov	r4, r0
      ::new ((void*)std::addressof(__storage))
 8010f28:	68f8      	ldr	r0, [r7, #12]
 8010f2a:	f7fc fea9 	bl	800dc80 <_ZSt9addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	4619      	mov	r1, r3
 8010f32:	2018      	movs	r0, #24
 8010f34:	f7f0 f852 	bl	8000fdc <_ZnwjPv>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	4621      	mov	r1, r4
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f005 fdd4 	bl	8016aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8010f42:	bf00      	nop
 8010f44:	3714      	adds	r7, #20
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd90      	pop	{r4, r7, pc}

08010f4a <_ZNSt8__detail9__variant16_Variant_storageILb1EJP17Primal_expressionP10ExpressionEE8_M_resetEv>:
      void _M_reset()
 8010f4a:	b480      	push	{r7}
 8010f4c:	b083      	sub	sp, #12
 8010f4e:	af00      	add	r7, sp, #0
 8010f50:	6078      	str	r0, [r7, #4]
      { _M_index = variant_npos; }
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	22ff      	movs	r2, #255	; 0xff
 8010f56:	711a      	strb	r2, [r3, #4]
 8010f58:	bf00      	nop
 8010f5a:	370c      	adds	r7, #12
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f62:	4770      	bx	lr

08010f64 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJP17Primal_expressionP10ExpressionEEJS4_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8010f64:	b590      	push	{r4, r7, lr}
 8010f66:	b085      	sub	sp, #20
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
 8010f6c:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2201      	movs	r2, #1
 8010f72:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f7f1 fae4 	bl	8002542 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>
 8010f7a:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8010f7c:	6838      	ldr	r0, [r7, #0]
 8010f7e:	f7fa fbd5 	bl	800b72c <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010f82:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8010f84:	681c      	ldr	r4, [r3, #0]
 8010f86:	68f8      	ldr	r0, [r7, #12]
 8010f88:	f000 fcd7 	bl	801193a <_ZSt9addressofIP10ExpressionEPT_RS2_>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	4619      	mov	r1, r3
 8010f90:	2004      	movs	r0, #4
 8010f92:	f7f0 f823 	bl	8000fdc <_ZnwjPv>
 8010f96:	4603      	mov	r3, r0
 8010f98:	601c      	str	r4, [r3, #0]
    }
 8010f9a:	bf00      	nop
 8010f9c:	3714      	adds	r7, #20
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd90      	pop	{r4, r7, pc}

08010fa2 <_ZSt28__variant_construct_by_indexILj0ESt7variantIJP17Primal_expressionP10ExpressionEEJS2_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8010fa2:	b590      	push	{r4, r7, lr}
 8010fa4:	b085      	sub	sp, #20
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
 8010faa:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f7f1 fb03 	bl	80025be <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>
 8010fb8:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8010fba:	6838      	ldr	r0, [r7, #0]
 8010fbc:	f7ff fc86 	bl	80108cc <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010fc0:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8010fc2:	681c      	ldr	r4, [r3, #0]
 8010fc4:	68f8      	ldr	r0, [r7, #12]
 8010fc6:	f000 fcc4 	bl	8011952 <_ZSt9addressofIP17Primal_expressionEPT_RS2_>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	4619      	mov	r1, r3
 8010fce:	2004      	movs	r0, #4
 8010fd0:	f7f0 f804 	bl	8000fdc <_ZnwjPv>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	601c      	str	r4, [r3, #0]
    }
 8010fd8:	bf00      	nop
 8010fda:	3714      	adds	r7, #20
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd90      	pop	{r4, r7, pc}

08010fe0 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010fe0:	b480      	push	{r7}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	4618      	mov	r0, r3
 8010fec:	370c      	adds	r7, #12
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff4:	4770      	bx	lr

08010ff6 <_ZNSt16allocator_traitsISaI13mult_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8010ff6:	b580      	push	{r7, lr}
 8010ff8:	b084      	sub	sp, #16
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	60f8      	str	r0, [r7, #12]
 8010ffe:	60b9      	str	r1, [r7, #8]
 8011000:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f7ff ffec 	bl	8010fe0 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8011008:	4603      	mov	r3, r0
 801100a:	461a      	mov	r2, r3
 801100c:	68b9      	ldr	r1, [r7, #8]
 801100e:	68f8      	ldr	r0, [r7, #12]
 8011010:	f000 fcab 	bl	801196a <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE9constructIS1_JS1_EEEvPT_DpOT0_>
 8011014:	bf00      	nop
 8011016:	3710      	adds	r7, #16
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <_ZNSt6vectorI13mult_operatorSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801101c:	b580      	push	{r7, lr}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	1d1a      	adds	r2, r3, #4
 8011028:	f107 030c 	add.w	r3, r7, #12
 801102c:	4611      	mov	r1, r2
 801102e:	4618      	mov	r0, r3
 8011030:	f000 fcb2 	bl	8011998 <_ZN9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	4618      	mov	r0, r3
 8011038:	3710      	adds	r7, #16
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
	...

08011040 <_ZNSt6vectorI13mult_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011040:	b5b0      	push	{r4, r5, r7, lr}
 8011042:	b08c      	sub	sp, #48	; 0x30
 8011044:	af00      	add	r7, sp, #0
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	60b9      	str	r1, [r7, #8]
 801104a:	607a      	str	r2, [r7, #4]
      const size_type __len =
 801104c:	4a38      	ldr	r2, [pc, #224]	; (8011130 <_ZNSt6vectorI13mult_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf0>)
 801104e:	2101      	movs	r1, #1
 8011050:	68f8      	ldr	r0, [r7, #12]
 8011052:	f000 fcb1 	bl	80119b8 <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc>
 8011056:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011064:	68f8      	ldr	r0, [r7, #12]
 8011066:	f000 fcee 	bl	8011a46 <_ZNSt6vectorI13mult_operatorSaIS0_EE5beginEv>
 801106a:	4603      	mov	r3, r0
 801106c:	617b      	str	r3, [r7, #20]
 801106e:	f107 0214 	add.w	r2, r7, #20
 8011072:	f107 0308 	add.w	r3, r7, #8
 8011076:	4611      	mov	r1, r2
 8011078:	4618      	mov	r0, r3
 801107a:	f000 fcf4 	bl	8011a66 <_ZN9__gnu_cxxmiIP13mult_operatorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 801107e:	4603      	mov	r3, r0
 8011080:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011086:	4618      	mov	r0, r3
 8011088:	f000 fd01 	bl	8011a8e <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE11_M_allocateEj>
 801108c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801108e:	69fb      	ldr	r3, [r7, #28]
 8011090:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011092:	68fc      	ldr	r4, [r7, #12]
 8011094:	69fa      	ldr	r2, [r7, #28]
 8011096:	6a3b      	ldr	r3, [r7, #32]
 8011098:	18d5      	adds	r5, r2, r3
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f7ff ffa0 	bl	8010fe0 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 80110a0:	4603      	mov	r3, r0
 80110a2:	461a      	mov	r2, r3
 80110a4:	4629      	mov	r1, r5
 80110a6:	4620      	mov	r0, r4
 80110a8:	f7ff ffa5 	bl	8010ff6 <_ZNSt16allocator_traitsISaI13mult_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 80110ac:	2300      	movs	r3, #0
 80110ae:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80110b0:	f107 0308 	add.w	r3, r7, #8
 80110b4:	4618      	mov	r0, r3
 80110b6:	f000 fd12 	bl	8011ade <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 80110ba:	4603      	mov	r3, r0
 80110bc:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7f1 fb0b 	bl	80026dc <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80110c6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80110c8:	69fa      	ldr	r2, [r7, #28]
 80110ca:	4621      	mov	r1, r4
 80110cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110ce:	f000 fcf2 	bl	8011ab6 <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80110d2:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80110d4:	69bb      	ldr	r3, [r7, #24]
 80110d6:	3301      	adds	r3, #1
 80110d8:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80110da:	f107 0308 	add.w	r3, r7, #8
 80110de:	4618      	mov	r0, r3
 80110e0:	f000 fcfd 	bl	8011ade <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 80110e4:	4603      	mov	r3, r0
 80110e6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7f1 faf6 	bl	80026dc <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80110f0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80110f2:	69ba      	ldr	r2, [r7, #24]
 80110f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110f6:	4620      	mov	r0, r4
 80110f8:	f000 fcdd 	bl	8011ab6 <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80110fc:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80110fe:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	689a      	ldr	r2, [r3, #8]
 8011104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011106:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 8011108:	461a      	mov	r2, r3
 801110a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801110c:	f7f2 fb26 	bl	800375c <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	69fa      	ldr	r2, [r7, #28]
 8011114:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	69ba      	ldr	r2, [r7, #24]
 801111a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801111c:	69fa      	ldr	r2, [r7, #28]
 801111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011120:	441a      	add	r2, r3
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	609a      	str	r2, [r3, #8]
    }
 8011126:	bf00      	nop
 8011128:	3730      	adds	r7, #48	; 0x30
 801112a:	46bd      	mov	sp, r7
 801112c:	bdb0      	pop	{r4, r5, r7, pc}
 801112e:	bf00      	nop
 8011130:	0801a2a4 	.word	0x0801a2a4

08011134 <_ZNSt6vectorI13mult_operatorSaIS0_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011134:	b580      	push	{r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f7ff ff6d 	bl	801101c <_ZNSt6vectorI13mult_operatorSaIS0_EE3endEv>
 8011142:	4603      	mov	r3, r0
 8011144:	60fb      	str	r3, [r7, #12]
 8011146:	f107 030c 	add.w	r3, r7, #12
 801114a:	2101      	movs	r1, #1
 801114c:	4618      	mov	r0, r3
 801114e:	f000 fcd1 	bl	8011af4 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEmiEi>
 8011152:	4603      	mov	r3, r0
 8011154:	60bb      	str	r3, [r7, #8]
 8011156:	f107 0308 	add.w	r3, r7, #8
 801115a:	4618      	mov	r0, r3
 801115c:	f000 fce2 	bl	8011b24 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEdeEv>
 8011160:	4603      	mov	r3, r0
      }
 8011162:	4618      	mov	r0, r3
 8011164:	3710      	adds	r7, #16
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}

0801116a <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801116a:	b480      	push	{r7}
 801116c:	b083      	sub	sp, #12
 801116e:	af00      	add	r7, sp, #0
 8011170:	6078      	str	r0, [r7, #4]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	4618      	mov	r0, r3
 8011176:	370c      	adds	r7, #12
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorEC1Ev>:
 8011180:	b480      	push	{r7}
 8011182:	b083      	sub	sp, #12
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	4618      	mov	r0, r3
 801118c:	370c      	adds	r7, #12
 801118e:	46bd      	mov	sp, r7
 8011190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011194:	4770      	bx	lr

08011196 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011196:	b480      	push	{r7}
 8011198:	b083      	sub	sp, #12
 801119a:	af00      	add	r7, sp, #0
 801119c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	4618      	mov	r0, r3
 80111a2:	370c      	adds	r7, #12
 80111a4:	46bd      	mov	sp, r7
 80111a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111aa:	4770      	bx	lr

080111ac <_ZNSt16allocator_traitsISaIP16Power_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	60f8      	str	r0, [r7, #12]
 80111b4:	60b9      	str	r1, [r7, #8]
 80111b6:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f7ff ffec 	bl	8011196 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80111be:	4603      	mov	r3, r0
 80111c0:	461a      	mov	r2, r3
 80111c2:	68b9      	ldr	r1, [r7, #8]
 80111c4:	68f8      	ldr	r0, [r7, #12]
 80111c6:	f000 fcb9 	bl	8011b3c <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 80111ca:	bf00      	nop
 80111cc:	3710      	adds	r7, #16
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}
	...

080111d4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80111d4:	b5b0      	push	{r4, r5, r7, lr}
 80111d6:	b08c      	sub	sp, #48	; 0x30
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80111e0:	4a39      	ldr	r2, [pc, #228]	; (80112c8 <_ZNSt6vectorIP16Power_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80111e2:	2101      	movs	r1, #1
 80111e4:	68f8      	ldr	r0, [r7, #12]
 80111e6:	f000 fcbf 	bl	8011b68 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc>
 80111ea:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	685b      	ldr	r3, [r3, #4]
 80111f6:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80111f8:	68f8      	ldr	r0, [r7, #12]
 80111fa:	f7f0 fc78 	bl	8001aee <_ZNSt6vectorIP16Power_expressionSaIS1_EE5beginEv>
 80111fe:	4603      	mov	r3, r0
 8011200:	617b      	str	r3, [r7, #20]
 8011202:	f107 0214 	add.w	r2, r7, #20
 8011206:	f107 0308 	add.w	r3, r7, #8
 801120a:	4611      	mov	r1, r2
 801120c:	4618      	mov	r0, r3
 801120e:	f000 fcf2 	bl	8011bf6 <_ZN9__gnu_cxxmiIPP16Power_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8011212:	4603      	mov	r3, r0
 8011214:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801121a:	4618      	mov	r0, r3
 801121c:	f000 fd00 	bl	8011c20 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE11_M_allocateEj>
 8011220:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011226:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011228:	6a3b      	ldr	r3, [r7, #32]
 801122a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 801122c:	69fa      	ldr	r2, [r7, #28]
 801122e:	18d5      	adds	r5, r2, r3
 8011230:	6878      	ldr	r0, [r7, #4]
 8011232:	f7ff ffb0 	bl	8011196 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011236:	4603      	mov	r3, r0
 8011238:	461a      	mov	r2, r3
 801123a:	4629      	mov	r1, r5
 801123c:	4620      	mov	r0, r4
 801123e:	f7ff ffb5 	bl	80111ac <_ZNSt16allocator_traitsISaIP16Power_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011242:	2300      	movs	r3, #0
 8011244:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011246:	f107 0308 	add.w	r3, r7, #8
 801124a:	4618      	mov	r0, r3
 801124c:	f7f1 fa6f 	bl	800272e <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8011250:	4603      	mov	r3, r0
 8011252:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	4618      	mov	r0, r3
 8011258:	f7f1 fa03 	bl	8002662 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 801125c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801125e:	69fa      	ldr	r2, [r7, #28]
 8011260:	4621      	mov	r1, r4
 8011262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011264:	f000 fcf0 	bl	8011c48 <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011268:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801126a:	69bb      	ldr	r3, [r7, #24]
 801126c:	3304      	adds	r3, #4
 801126e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011270:	f107 0308 	add.w	r3, r7, #8
 8011274:	4618      	mov	r0, r3
 8011276:	f7f1 fa5a 	bl	800272e <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 801127a:	4603      	mov	r3, r0
 801127c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	4618      	mov	r0, r3
 8011282:	f7f1 f9ee 	bl	8002662 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8011286:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011288:	69ba      	ldr	r2, [r7, #24]
 801128a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801128c:	4620      	mov	r0, r4
 801128e:	f000 fcdb 	bl	8011c48 <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011292:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011294:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	689a      	ldr	r2, [r3, #8]
 801129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801129c:	1ad3      	subs	r3, r2, r3
 801129e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80112a0:	461a      	mov	r2, r3
 80112a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80112a4:	f7f2 fa2e 	bl	8003704 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	69fa      	ldr	r2, [r7, #28]
 80112ac:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	69ba      	ldr	r2, [r7, #24]
 80112b2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80112b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b6:	009b      	lsls	r3, r3, #2
 80112b8:	69fa      	ldr	r2, [r7, #28]
 80112ba:	441a      	add	r2, r3
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	609a      	str	r2, [r3, #8]
    }
 80112c0:	bf00      	nop
 80112c2:	3730      	adds	r7, #48	; 0x30
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bdb0      	pop	{r4, r5, r7, pc}
 80112c8:	0801a2a4 	.word	0x0801a2a4

080112cc <_ZNSt6vectorIP16Power_expressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f7f0 fc1a 	bl	8001b0e <_ZNSt6vectorIP16Power_expressionSaIS1_EE3endEv>
 80112da:	4603      	mov	r3, r0
 80112dc:	60fb      	str	r3, [r7, #12]
 80112de:	f107 030c 	add.w	r3, r7, #12
 80112e2:	2101      	movs	r1, #1
 80112e4:	4618      	mov	r0, r3
 80112e6:	f000 fcc3 	bl	8011c70 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEmiEi>
 80112ea:	4603      	mov	r3, r0
 80112ec:	60bb      	str	r3, [r7, #8]
 80112ee:	f107 0308 	add.w	r3, r7, #8
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7f0 fc44 	bl	8001b80 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 80112f8:	4603      	mov	r3, r0
      }
 80112fa:	4618      	mov	r0, r3
 80112fc:	3710      	adds	r7, #16
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}

08011302 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011302:	b480      	push	{r7}
 8011304:	b083      	sub	sp, #12
 8011306:	af00      	add	r7, sp, #0
 8011308:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	4618      	mov	r0, r3
 801130e:	370c      	adds	r7, #12
 8011310:	46bd      	mov	sp, r7
 8011312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011316:	4770      	bx	lr

08011318 <_ZNSt16allocator_traitsISaI12sum_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	60f8      	str	r0, [r7, #12]
 8011320:	60b9      	str	r1, [r7, #8]
 8011322:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f7ff ffec 	bl	8011302 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 801132a:	4603      	mov	r3, r0
 801132c:	461a      	mov	r2, r3
 801132e:	68b9      	ldr	r1, [r7, #8]
 8011330:	68f8      	ldr	r0, [r7, #12]
 8011332:	f000 fcb6 	bl	8011ca2 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE9constructIS1_JS1_EEEvPT_DpOT0_>
 8011336:	bf00      	nop
 8011338:	3710      	adds	r7, #16
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}

0801133e <_ZNSt6vectorI12sum_operatorSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801133e:	b580      	push	{r7, lr}
 8011340:	b084      	sub	sp, #16
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	1d1a      	adds	r2, r3, #4
 801134a:	f107 030c 	add.w	r3, r7, #12
 801134e:	4611      	mov	r1, r2
 8011350:	4618      	mov	r0, r3
 8011352:	f000 fcbd 	bl	8011cd0 <_ZN9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	4618      	mov	r0, r3
 801135a:	3710      	adds	r7, #16
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}

08011360 <_ZNSt6vectorI12sum_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011360:	b5b0      	push	{r4, r5, r7, lr}
 8011362:	b08c      	sub	sp, #48	; 0x30
 8011364:	af00      	add	r7, sp, #0
 8011366:	60f8      	str	r0, [r7, #12]
 8011368:	60b9      	str	r1, [r7, #8]
 801136a:	607a      	str	r2, [r7, #4]
      const size_type __len =
 801136c:	4a38      	ldr	r2, [pc, #224]	; (8011450 <_ZNSt6vectorI12sum_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf0>)
 801136e:	2101      	movs	r1, #1
 8011370:	68f8      	ldr	r0, [r7, #12]
 8011372:	f000 fcbd 	bl	8011cf0 <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc>
 8011376:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011384:	68f8      	ldr	r0, [r7, #12]
 8011386:	f000 fcfa 	bl	8011d7e <_ZNSt6vectorI12sum_operatorSaIS0_EE5beginEv>
 801138a:	4603      	mov	r3, r0
 801138c:	617b      	str	r3, [r7, #20]
 801138e:	f107 0214 	add.w	r2, r7, #20
 8011392:	f107 0308 	add.w	r3, r7, #8
 8011396:	4611      	mov	r1, r2
 8011398:	4618      	mov	r0, r3
 801139a:	f000 fd00 	bl	8011d9e <_ZN9__gnu_cxxmiIP12sum_operatorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 801139e:	4603      	mov	r3, r0
 80113a0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113a6:	4618      	mov	r0, r3
 80113a8:	f000 fd0d 	bl	8011dc6 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE11_M_allocateEj>
 80113ac:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80113ae:	69fb      	ldr	r3, [r7, #28]
 80113b0:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80113b2:	68fc      	ldr	r4, [r7, #12]
 80113b4:	69fa      	ldr	r2, [r7, #28]
 80113b6:	6a3b      	ldr	r3, [r7, #32]
 80113b8:	18d5      	adds	r5, r2, r3
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f7ff ffa1 	bl	8011302 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 80113c0:	4603      	mov	r3, r0
 80113c2:	461a      	mov	r2, r3
 80113c4:	4629      	mov	r1, r5
 80113c6:	4620      	mov	r0, r4
 80113c8:	f7ff ffa6 	bl	8011318 <_ZNSt16allocator_traitsISaI12sum_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 80113cc:	2300      	movs	r3, #0
 80113ce:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80113d0:	f107 0308 	add.w	r3, r7, #8
 80113d4:	4618      	mov	r0, r3
 80113d6:	f000 fd1e 	bl	8011e16 <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 80113da:	4603      	mov	r3, r0
 80113dc:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7f1 fa11 	bl	8002808 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80113e6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80113e8:	69fa      	ldr	r2, [r7, #28]
 80113ea:	4621      	mov	r1, r4
 80113ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113ee:	f000 fcfe 	bl	8011dee <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80113f2:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80113f4:	69bb      	ldr	r3, [r7, #24]
 80113f6:	3301      	adds	r3, #1
 80113f8:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80113fa:	f107 0308 	add.w	r3, r7, #8
 80113fe:	4618      	mov	r0, r3
 8011400:	f000 fd09 	bl	8011e16 <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 8011404:	4603      	mov	r3, r0
 8011406:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	4618      	mov	r0, r3
 801140c:	f7f1 f9fc 	bl	8002808 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 8011410:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011412:	69ba      	ldr	r2, [r7, #24]
 8011414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011416:	4620      	mov	r0, r4
 8011418:	f000 fce9 	bl	8011dee <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 801141c:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 801141e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	689a      	ldr	r2, [r3, #8]
 8011424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011426:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 8011428:	461a      	mov	r2, r3
 801142a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801142c:	f7f2 f9ee 	bl	800380c <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	69fa      	ldr	r2, [r7, #28]
 8011434:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	69ba      	ldr	r2, [r7, #24]
 801143a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801143c:	69fa      	ldr	r2, [r7, #28]
 801143e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011440:	441a      	add	r2, r3
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	609a      	str	r2, [r3, #8]
    }
 8011446:	bf00      	nop
 8011448:	3730      	adds	r7, #48	; 0x30
 801144a:	46bd      	mov	sp, r7
 801144c:	bdb0      	pop	{r4, r5, r7, pc}
 801144e:	bf00      	nop
 8011450:	0801a2a4 	.word	0x0801a2a4

08011454 <_ZNSt6vectorI12sum_operatorSaIS0_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011454:	b580      	push	{r7, lr}
 8011456:	b084      	sub	sp, #16
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f7ff ff6e 	bl	801133e <_ZNSt6vectorI12sum_operatorSaIS0_EE3endEv>
 8011462:	4603      	mov	r3, r0
 8011464:	60fb      	str	r3, [r7, #12]
 8011466:	f107 030c 	add.w	r3, r7, #12
 801146a:	2101      	movs	r1, #1
 801146c:	4618      	mov	r0, r3
 801146e:	f000 fcdd 	bl	8011e2c <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEmiEi>
 8011472:	4603      	mov	r3, r0
 8011474:	60bb      	str	r3, [r7, #8]
 8011476:	f107 0308 	add.w	r3, r7, #8
 801147a:	4618      	mov	r0, r3
 801147c:	f000 fcee 	bl	8011e5c <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEdeEv>
 8011480:	4603      	mov	r3, r0
      }
 8011482:	4618      	mov	r0, r3
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionEC1Ev>:
 801148a:	b480      	push	{r7}
 801148c:	b083      	sub	sp, #12
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	4618      	mov	r0, r3
 8011496:	370c      	adds	r7, #12
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr

080114a0 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorEC1Ev>:
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	4618      	mov	r0, r3
 80114ac:	370c      	adds	r7, #12
 80114ae:	46bd      	mov	sp, r7
 80114b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b4:	4770      	bx	lr

080114b6 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80114b6:	b480      	push	{r7}
 80114b8:	b083      	sub	sp, #12
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	4618      	mov	r0, r3
 80114c2:	370c      	adds	r7, #12
 80114c4:	46bd      	mov	sp, r7
 80114c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ca:	4770      	bx	lr

080114cc <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b084      	sub	sp, #16
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	60f8      	str	r0, [r7, #12]
 80114d4:	60b9      	str	r1, [r7, #8]
 80114d6:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f7ff ffec 	bl	80114b6 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80114de:	4603      	mov	r3, r0
 80114e0:	461a      	mov	r2, r3
 80114e2:	68b9      	ldr	r1, [r7, #8]
 80114e4:	68f8      	ldr	r0, [r7, #12]
 80114e6:	f000 fcc5 	bl	8011e74 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 80114ea:	bf00      	nop
 80114ec:	3710      	adds	r7, #16
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
	...

080114f4 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80114f4:	b5b0      	push	{r4, r5, r7, lr}
 80114f6:	b08c      	sub	sp, #48	; 0x30
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	60b9      	str	r1, [r7, #8]
 80114fe:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8011500:	4a39      	ldr	r2, [pc, #228]	; (80115e8 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8011502:	2101      	movs	r1, #1
 8011504:	68f8      	ldr	r0, [r7, #12]
 8011506:	f000 fccb 	bl	8011ea0 <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc>
 801150a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011518:	68f8      	ldr	r0, [r7, #12]
 801151a:	f7f0 fb73 	bl	8001c04 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE5beginEv>
 801151e:	4603      	mov	r3, r0
 8011520:	617b      	str	r3, [r7, #20]
 8011522:	f107 0214 	add.w	r2, r7, #20
 8011526:	f107 0308 	add.w	r3, r7, #8
 801152a:	4611      	mov	r1, r2
 801152c:	4618      	mov	r0, r3
 801152e:	f000 fcfe 	bl	8011f2e <_ZN9__gnu_cxxmiIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8011532:	4603      	mov	r3, r0
 8011534:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801153a:	4618      	mov	r0, r3
 801153c:	f000 fd0c 	bl	8011f58 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE11_M_allocateEj>
 8011540:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8011542:	69fb      	ldr	r3, [r7, #28]
 8011544:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011546:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011548:	6a3b      	ldr	r3, [r7, #32]
 801154a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 801154c:	69fa      	ldr	r2, [r7, #28]
 801154e:	18d5      	adds	r5, r2, r3
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f7ff ffb0 	bl	80114b6 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011556:	4603      	mov	r3, r0
 8011558:	461a      	mov	r2, r3
 801155a:	4629      	mov	r1, r5
 801155c:	4620      	mov	r0, r4
 801155e:	f7ff ffb5 	bl	80114cc <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011562:	2300      	movs	r3, #0
 8011564:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011566:	f107 0308 	add.w	r3, r7, #8
 801156a:	4618      	mov	r0, r3
 801156c:	f7f1 f975 	bl	800285a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8011570:	4603      	mov	r3, r0
 8011572:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	4618      	mov	r0, r3
 8011578:	f7f1 f909 	bl	800278e <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 801157c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801157e:	69fa      	ldr	r2, [r7, #28]
 8011580:	4621      	mov	r1, r4
 8011582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011584:	f000 fcfc 	bl	8011f80 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011588:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801158a:	69bb      	ldr	r3, [r7, #24]
 801158c:	3304      	adds	r3, #4
 801158e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011590:	f107 0308 	add.w	r3, r7, #8
 8011594:	4618      	mov	r0, r3
 8011596:	f7f1 f960 	bl	800285a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 801159a:	4603      	mov	r3, r0
 801159c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7f1 f8f4 	bl	800278e <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 80115a6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80115a8:	69ba      	ldr	r2, [r7, #24]
 80115aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80115ac:	4620      	mov	r0, r4
 80115ae:	f000 fce7 	bl	8011f80 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80115b2:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80115b4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	689a      	ldr	r2, [r3, #8]
 80115ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115bc:	1ad3      	subs	r3, r2, r3
 80115be:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80115c0:	461a      	mov	r2, r3
 80115c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80115c4:	f7f2 f8f6 	bl	80037b4 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	69fa      	ldr	r2, [r7, #28]
 80115cc:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	69ba      	ldr	r2, [r7, #24]
 80115d2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80115d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d6:	009b      	lsls	r3, r3, #2
 80115d8:	69fa      	ldr	r2, [r7, #28]
 80115da:	441a      	add	r2, r3
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	609a      	str	r2, [r3, #8]
    }
 80115e0:	bf00      	nop
 80115e2:	3730      	adds	r7, #48	; 0x30
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bdb0      	pop	{r4, r5, r7, pc}
 80115e8:	0801a2a4 	.word	0x0801a2a4

080115ec <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b084      	sub	sp, #16
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f7f0 fb15 	bl	8001c24 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE3endEv>
 80115fa:	4603      	mov	r3, r0
 80115fc:	60fb      	str	r3, [r7, #12]
 80115fe:	f107 030c 	add.w	r3, r7, #12
 8011602:	2101      	movs	r1, #1
 8011604:	4618      	mov	r0, r3
 8011606:	f000 fccf 	bl	8011fa8 <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEmiEi>
 801160a:	4603      	mov	r3, r0
 801160c:	60bb      	str	r3, [r7, #8]
 801160e:	f107 0308 	add.w	r3, r7, #8
 8011612:	4618      	mov	r0, r3
 8011614:	f7f0 fb3f 	bl	8001c96 <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 8011618:	4603      	mov	r3, r0
      }
 801161a:	4618      	mov	r0, r3
 801161c:	3710      	adds	r7, #16
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}

08011622 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionEC1Ev>:
 8011622:	b480      	push	{r7}
 8011624:	b083      	sub	sp, #12
 8011626:	af00      	add	r7, sp, #0
 8011628:	6078      	str	r0, [r7, #4]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	4618      	mov	r0, r3
 801162e:	370c      	adds	r7, #12
 8011630:	46bd      	mov	sp, r7
 8011632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011636:	4770      	bx	lr

08011638 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011638:	b480      	push	{r7}
 801163a:	b083      	sub	sp, #12
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	4618      	mov	r0, r3
 8011644:	370c      	adds	r7, #12
 8011646:	46bd      	mov	sp, r7
 8011648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164c:	4770      	bx	lr

0801164e <_ZNSt16allocator_traitsISaIP18Compare_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 801164e:	b580      	push	{r7, lr}
 8011650:	b084      	sub	sp, #16
 8011652:	af00      	add	r7, sp, #0
 8011654:	60f8      	str	r0, [r7, #12]
 8011656:	60b9      	str	r1, [r7, #8]
 8011658:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f7ff ffec 	bl	8011638 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011660:	4603      	mov	r3, r0
 8011662:	461a      	mov	r2, r3
 8011664:	68b9      	ldr	r1, [r7, #8]
 8011666:	68f8      	ldr	r0, [r7, #12]
 8011668:	f000 fcb7 	bl	8011fda <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 801166c:	bf00      	nop
 801166e:	3710      	adds	r7, #16
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011674:	b5b0      	push	{r4, r5, r7, lr}
 8011676:	b08c      	sub	sp, #48	; 0x30
 8011678:	af00      	add	r7, sp, #0
 801167a:	60f8      	str	r0, [r7, #12]
 801167c:	60b9      	str	r1, [r7, #8]
 801167e:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8011680:	4a39      	ldr	r2, [pc, #228]	; (8011768 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8011682:	2101      	movs	r1, #1
 8011684:	68f8      	ldr	r0, [r7, #12]
 8011686:	f000 fcbe 	bl	8012006 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc>
 801168a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011698:	68f8      	ldr	r0, [r7, #12]
 801169a:	f7f0 fb23 	bl	8001ce4 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE5beginEv>
 801169e:	4603      	mov	r3, r0
 80116a0:	617b      	str	r3, [r7, #20]
 80116a2:	f107 0214 	add.w	r2, r7, #20
 80116a6:	f107 0308 	add.w	r3, r7, #8
 80116aa:	4611      	mov	r1, r2
 80116ac:	4618      	mov	r0, r3
 80116ae:	f000 fcf1 	bl	8012094 <_ZN9__gnu_cxxmiIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80116b2:	4603      	mov	r3, r0
 80116b4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116ba:	4618      	mov	r0, r3
 80116bc:	f000 fcff 	bl	80120be <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE11_M_allocateEj>
 80116c0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80116c2:	69fb      	ldr	r3, [r7, #28]
 80116c4:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80116c6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80116c8:	6a3b      	ldr	r3, [r7, #32]
 80116ca:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80116cc:	69fa      	ldr	r2, [r7, #28]
 80116ce:	18d5      	adds	r5, r2, r3
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f7ff ffb1 	bl	8011638 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80116d6:	4603      	mov	r3, r0
 80116d8:	461a      	mov	r2, r3
 80116da:	4629      	mov	r1, r5
 80116dc:	4620      	mov	r0, r4
 80116de:	f7ff ffb6 	bl	801164e <_ZNSt16allocator_traitsISaIP18Compare_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80116e2:	2300      	movs	r3, #0
 80116e4:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80116e6:	f107 0308 	add.w	r3, r7, #8
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7f1 f90e 	bl	800290c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 80116f0:	4603      	mov	r3, r0
 80116f2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7f1 f8df 	bl	80028ba <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 80116fc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80116fe:	69fa      	ldr	r2, [r7, #28]
 8011700:	4621      	mov	r1, r4
 8011702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011704:	f000 fcef 	bl	80120e6 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011708:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801170a:	69bb      	ldr	r3, [r7, #24]
 801170c:	3304      	adds	r3, #4
 801170e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011710:	f107 0308 	add.w	r3, r7, #8
 8011714:	4618      	mov	r0, r3
 8011716:	f7f1 f8f9 	bl	800290c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 801171a:	4603      	mov	r3, r0
 801171c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	4618      	mov	r0, r3
 8011722:	f7f1 f8ca 	bl	80028ba <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8011726:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011728:	69ba      	ldr	r2, [r7, #24]
 801172a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801172c:	4620      	mov	r0, r4
 801172e:	f000 fcda 	bl	80120e6 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011732:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011734:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	689a      	ldr	r2, [r3, #8]
 801173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801173c:	1ad3      	subs	r3, r2, r3
 801173e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8011740:	461a      	mov	r2, r3
 8011742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011744:	f7f2 f88e 	bl	8003864 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	69fa      	ldr	r2, [r7, #28]
 801174c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	69ba      	ldr	r2, [r7, #24]
 8011752:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011756:	009b      	lsls	r3, r3, #2
 8011758:	69fa      	ldr	r2, [r7, #28]
 801175a:	441a      	add	r2, r3
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	609a      	str	r2, [r3, #8]
    }
 8011760:	bf00      	nop
 8011762:	3730      	adds	r7, #48	; 0x30
 8011764:	46bd      	mov	sp, r7
 8011766:	bdb0      	pop	{r4, r5, r7, pc}
 8011768:	0801a2a4 	.word	0x0801a2a4

0801176c <_ZNSt6vectorIP18Compare_expressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 801176c:	b580      	push	{r7, lr}
 801176e:	b084      	sub	sp, #16
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f7f0 fac5 	bl	8001d04 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE3endEv>
 801177a:	4603      	mov	r3, r0
 801177c:	60fb      	str	r3, [r7, #12]
 801177e:	f107 030c 	add.w	r3, r7, #12
 8011782:	2101      	movs	r1, #1
 8011784:	4618      	mov	r0, r3
 8011786:	f000 fcc2 	bl	801210e <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEmiEi>
 801178a:	4603      	mov	r3, r0
 801178c:	60bb      	str	r3, [r7, #8]
 801178e:	f107 0308 	add.w	r3, r7, #8
 8011792:	4618      	mov	r0, r3
 8011794:	f7f0 faef 	bl	8001d76 <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 8011798:	4603      	mov	r3, r0
      }
 801179a:	4618      	mov	r0, r3
 801179c:	3710      	adds	r7, #16
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}

080117a2 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionEC1Ev>:
 80117a2:	b480      	push	{r7}
 80117a4:	b083      	sub	sp, #12
 80117a6:	af00      	add	r7, sp, #0
 80117a8:	6078      	str	r0, [r7, #4]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4618      	mov	r0, r3
 80117ae:	370c      	adds	r7, #12
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr

080117b8 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80117b8:	b480      	push	{r7}
 80117ba:	b083      	sub	sp, #12
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	4618      	mov	r0, r3
 80117c4:	370c      	adds	r7, #12
 80117c6:	46bd      	mov	sp, r7
 80117c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117cc:	4770      	bx	lr

080117ce <_ZNSt16allocator_traitsISaIP14And_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80117ce:	b580      	push	{r7, lr}
 80117d0:	b084      	sub	sp, #16
 80117d2:	af00      	add	r7, sp, #0
 80117d4:	60f8      	str	r0, [r7, #12]
 80117d6:	60b9      	str	r1, [r7, #8]
 80117d8:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f7ff ffec 	bl	80117b8 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80117e0:	4603      	mov	r3, r0
 80117e2:	461a      	mov	r2, r3
 80117e4:	68b9      	ldr	r1, [r7, #8]
 80117e6:	68f8      	ldr	r0, [r7, #12]
 80117e8:	f000 fcaa 	bl	8012140 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 80117ec:	bf00      	nop
 80117ee:	3710      	adds	r7, #16
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <_ZNSt6vectorIP14And_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80117f4:	b5b0      	push	{r4, r5, r7, lr}
 80117f6:	b08c      	sub	sp, #48	; 0x30
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8011800:	4a39      	ldr	r2, [pc, #228]	; (80118e8 <_ZNSt6vectorIP14And_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8011802:	2101      	movs	r1, #1
 8011804:	68f8      	ldr	r0, [r7, #12]
 8011806:	f000 fcb1 	bl	801216c <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc>
 801180a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	685b      	ldr	r3, [r3, #4]
 8011816:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	f7f0 fad3 	bl	8001dc4 <_ZNSt6vectorIP14And_expressionSaIS1_EE5beginEv>
 801181e:	4603      	mov	r3, r0
 8011820:	617b      	str	r3, [r7, #20]
 8011822:	f107 0214 	add.w	r2, r7, #20
 8011826:	f107 0308 	add.w	r3, r7, #8
 801182a:	4611      	mov	r1, r2
 801182c:	4618      	mov	r0, r3
 801182e:	f000 fce4 	bl	80121fa <_ZN9__gnu_cxxmiIPP14And_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8011832:	4603      	mov	r3, r0
 8011834:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801183a:	4618      	mov	r0, r3
 801183c:	f000 fcf2 	bl	8012224 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE11_M_allocateEj>
 8011840:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011846:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011848:	6a3b      	ldr	r3, [r7, #32]
 801184a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 801184c:	69fa      	ldr	r2, [r7, #28]
 801184e:	18d5      	adds	r5, r2, r3
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f7ff ffb1 	bl	80117b8 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011856:	4603      	mov	r3, r0
 8011858:	461a      	mov	r2, r3
 801185a:	4629      	mov	r1, r5
 801185c:	4620      	mov	r0, r4
 801185e:	f7ff ffb6 	bl	80117ce <_ZNSt16allocator_traitsISaIP14And_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011862:	2300      	movs	r3, #0
 8011864:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011866:	f107 0308 	add.w	r3, r7, #8
 801186a:	4618      	mov	r0, r3
 801186c:	f7f1 f8a7 	bl	80029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8011870:	4603      	mov	r3, r0
 8011872:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	4618      	mov	r0, r3
 8011878:	f7f1 f878 	bl	800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 801187c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801187e:	69fa      	ldr	r2, [r7, #28]
 8011880:	4621      	mov	r1, r4
 8011882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011884:	f000 fce2 	bl	801224c <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011888:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801188a:	69bb      	ldr	r3, [r7, #24]
 801188c:	3304      	adds	r3, #4
 801188e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011890:	f107 0308 	add.w	r3, r7, #8
 8011894:	4618      	mov	r0, r3
 8011896:	f7f1 f892 	bl	80029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 801189a:	4603      	mov	r3, r0
 801189c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7f1 f863 	bl	800296c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 80118a6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80118a8:	69ba      	ldr	r2, [r7, #24]
 80118aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80118ac:	4620      	mov	r0, r4
 80118ae:	f000 fccd 	bl	801224c <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80118b2:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80118b4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	689a      	ldr	r2, [r3, #8]
 80118ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118bc:	1ad3      	subs	r3, r2, r3
 80118be:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80118c0:	461a      	mov	r2, r3
 80118c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80118c4:	f7f1 fffa 	bl	80038bc <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	69fa      	ldr	r2, [r7, #28]
 80118cc:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	69ba      	ldr	r2, [r7, #24]
 80118d2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80118d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	69fa      	ldr	r2, [r7, #28]
 80118da:	441a      	add	r2, r3
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	609a      	str	r2, [r3, #8]
    }
 80118e0:	bf00      	nop
 80118e2:	3730      	adds	r7, #48	; 0x30
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bdb0      	pop	{r4, r5, r7, pc}
 80118e8:	0801a2a4 	.word	0x0801a2a4

080118ec <_ZNSt6vectorIP14And_expressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f7f0 fa75 	bl	8001de4 <_ZNSt6vectorIP14And_expressionSaIS1_EE3endEv>
 80118fa:	4603      	mov	r3, r0
 80118fc:	60fb      	str	r3, [r7, #12]
 80118fe:	f107 030c 	add.w	r3, r7, #12
 8011902:	2101      	movs	r1, #1
 8011904:	4618      	mov	r0, r3
 8011906:	f000 fcb5 	bl	8012274 <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEmiEi>
 801190a:	4603      	mov	r3, r0
 801190c:	60bb      	str	r3, [r7, #8]
 801190e:	f107 0308 	add.w	r3, r7, #8
 8011912:	4618      	mov	r0, r3
 8011914:	f7f0 fa9f 	bl	8001e56 <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 8011918:	4603      	mov	r3, r0
      }
 801191a:	4618      	mov	r0, r3
 801191c:	3710      	adds	r7, #16
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}

08011922 <_ZSt9addressofIP8VariableEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 8011922:	b580      	push	{r7, lr}
 8011924:	b082      	sub	sp, #8
 8011926:	af00      	add	r7, sp, #0
 8011928:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f7f4 f932 	bl	8005b94 <_ZSt11__addressofIP8VariableEPT_RS2_>
 8011930:	4603      	mov	r3, r0
 8011932:	4618      	mov	r0, r3
 8011934:	3708      	adds	r7, #8
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}

0801193a <_ZSt9addressofIP10ExpressionEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 801193a:	b580      	push	{r7, lr}
 801193c:	b082      	sub	sp, #8
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f000 fcaf 	bl	80122a6 <_ZSt11__addressofIP10ExpressionEPT_RS2_>
 8011948:	4603      	mov	r3, r0
 801194a:	4618      	mov	r0, r3
 801194c:	3708      	adds	r7, #8
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}

08011952 <_ZSt9addressofIP17Primal_expressionEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 8011952:	b580      	push	{r7, lr}
 8011954:	b082      	sub	sp, #8
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f000 fcae 	bl	80122bc <_ZSt11__addressofIP17Primal_expressionEPT_RS2_>
 8011960:	4603      	mov	r3, r0
 8011962:	4618      	mov	r0, r3
 8011964:	3708      	adds	r7, #8
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}

0801196a <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801196a:	b590      	push	{r4, r7, lr}
 801196c:	b085      	sub	sp, #20
 801196e:	af00      	add	r7, sp, #0
 8011970:	60f8      	str	r0, [r7, #12]
 8011972:	60b9      	str	r1, [r7, #8]
 8011974:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011976:	6878      	ldr	r0, [r7, #4]
 8011978:	f7ff fb32 	bl	8010fe0 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 801197c:	4603      	mov	r3, r0
 801197e:	781c      	ldrb	r4, [r3, #0]
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	4619      	mov	r1, r3
 8011984:	2001      	movs	r0, #1
 8011986:	f7ef fb29 	bl	8000fdc <_ZnwjPv>
 801198a:	4603      	mov	r3, r0
 801198c:	4622      	mov	r2, r4
 801198e:	701a      	strb	r2, [r3, #0]
 8011990:	bf00      	nop
 8011992:	3714      	adds	r7, #20
 8011994:	46bd      	mov	sp, r7
 8011996:	bd90      	pop	{r4, r7, pc}

08011998 <_ZN9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011998:	b480      	push	{r7}
 801199a:	b083      	sub	sp, #12
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	601a      	str	r2, [r3, #0]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	4618      	mov	r0, r3
 80119ae:	370c      	adds	r7, #12
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr

080119b8 <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80119b8:	b590      	push	{r4, r7, lr}
 80119ba:	b087      	sub	sp, #28
 80119bc:	af00      	add	r7, sp, #0
 80119be:	60f8      	str	r0, [r7, #12]
 80119c0:	60b9      	str	r1, [r7, #8]
 80119c2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80119c4:	68f8      	ldr	r0, [r7, #12]
 80119c6:	f000 fc84 	bl	80122d2 <_ZNKSt6vectorI13mult_operatorSaIS0_EE8max_sizeEv>
 80119ca:	4604      	mov	r4, r0
 80119cc:	68f8      	ldr	r0, [r7, #12]
 80119ce:	f000 fc91 	bl	80122f4 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>
 80119d2:	4603      	mov	r3, r0
 80119d4:	1ae2      	subs	r2, r4, r3
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	429a      	cmp	r2, r3
 80119da:	bf34      	ite	cc
 80119dc:	2301      	movcc	r3, #1
 80119de:	2300      	movcs	r3, #0
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d002      	beq.n	80119ec <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f004 ff8f 	bl	801690a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80119ec:	68f8      	ldr	r0, [r7, #12]
 80119ee:	f000 fc81 	bl	80122f4 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>
 80119f2:	4604      	mov	r4, r0
 80119f4:	68f8      	ldr	r0, [r7, #12]
 80119f6:	f000 fc7d 	bl	80122f4 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>
 80119fa:	4603      	mov	r3, r0
 80119fc:	613b      	str	r3, [r7, #16]
 80119fe:	f107 0208 	add.w	r2, r7, #8
 8011a02:	f107 0310 	add.w	r3, r7, #16
 8011a06:	4611      	mov	r1, r2
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7fa ff81 	bl	800c910 <_ZSt3maxIjERKT_S2_S2_>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	4423      	add	r3, r4
 8011a14:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011a16:	68f8      	ldr	r0, [r7, #12]
 8011a18:	f000 fc6c 	bl	80122f4 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>
 8011a1c:	4602      	mov	r2, r0
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	4293      	cmp	r3, r2
 8011a22:	d306      	bcc.n	8011a32 <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8011a24:	68f8      	ldr	r0, [r7, #12]
 8011a26:	f000 fc54 	bl	80122d2 <_ZNKSt6vectorI13mult_operatorSaIS0_EE8max_sizeEv>
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	4293      	cmp	r3, r2
 8011a30:	d904      	bls.n	8011a3c <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc+0x84>
 8011a32:	68f8      	ldr	r0, [r7, #12]
 8011a34:	f000 fc4d 	bl	80122d2 <_ZNKSt6vectorI13mult_operatorSaIS0_EE8max_sizeEv>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	e000      	b.n	8011a3e <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc+0x86>
 8011a3c:	697b      	ldr	r3, [r7, #20]
      }
 8011a3e:	4618      	mov	r0, r3
 8011a40:	371c      	adds	r7, #28
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd90      	pop	{r4, r7, pc}

08011a46 <_ZNSt6vectorI13mult_operatorSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8011a46:	b580      	push	{r7, lr}
 8011a48:	b084      	sub	sp, #16
 8011a4a:	af00      	add	r7, sp, #0
 8011a4c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8011a4e:	687a      	ldr	r2, [r7, #4]
 8011a50:	f107 030c 	add.w	r3, r7, #12
 8011a54:	4611      	mov	r1, r2
 8011a56:	4618      	mov	r0, r3
 8011a58:	f7ff ff9e 	bl	8011998 <_ZN9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}

08011a66 <_ZN9__gnu_cxxmiIP13mult_operatorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011a66:	b590      	push	{r4, r7, lr}
 8011a68:	b083      	sub	sp, #12
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6078      	str	r0, [r7, #4]
 8011a6e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f000 f834 	bl	8011ade <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 8011a76:	4603      	mov	r3, r0
 8011a78:	681c      	ldr	r4, [r3, #0]
 8011a7a:	6838      	ldr	r0, [r7, #0]
 8011a7c:	f000 f82f 	bl	8011ade <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 8011a80:	4603      	mov	r3, r0
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	1ae3      	subs	r3, r4, r3
 8011a86:	4618      	mov	r0, r3
 8011a88:	370c      	adds	r7, #12
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd90      	pop	{r4, r7, pc}

08011a8e <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011a8e:	b580      	push	{r7, lr}
 8011a90:	b082      	sub	sp, #8
 8011a92:	af00      	add	r7, sp, #0
 8011a94:	6078      	str	r0, [r7, #4]
 8011a96:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d006      	beq.n	8011aac <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE11_M_allocateEj+0x1e>
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	6839      	ldr	r1, [r7, #0]
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f000 fc35 	bl	8012312 <_ZNSt16allocator_traitsISaI13mult_operatorEE8allocateERS1_j>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	e000      	b.n	8011aae <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE11_M_allocateEj+0x20>
 8011aac:	2300      	movs	r3, #0
      }
 8011aae:	4618      	mov	r0, r3
 8011ab0:	3708      	adds	r7, #8
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}

08011ab6 <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8011ab6:	b590      	push	{r4, r7, lr}
 8011ab8:	b089      	sub	sp, #36	; 0x24
 8011aba:	af02      	add	r7, sp, #8
 8011abc:	60f8      	str	r0, [r7, #12]
 8011abe:	60b9      	str	r1, [r7, #8]
 8011ac0:	607a      	str	r2, [r7, #4]
 8011ac2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8011ac4:	f88d 4000 	strb.w	r4, [sp]
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	687a      	ldr	r2, [r7, #4]
 8011acc:	68b9      	ldr	r1, [r7, #8]
 8011ace:	68f8      	ldr	r0, [r7, #12]
 8011ad0:	f000 fc2e 	bl	8012330 <_ZNSt6vectorI13mult_operatorSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8011ad4:	4603      	mov	r3, r0
      }
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	371c      	adds	r7, #28
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd90      	pop	{r4, r7, pc}

08011ade <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8011ade:	b480      	push	{r7}
 8011ae0:	b083      	sub	sp, #12
 8011ae2:	af00      	add	r7, sp, #0
 8011ae4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	4618      	mov	r0, r3
 8011aea:	370c      	adds	r7, #12
 8011aec:	46bd      	mov	sp, r7
 8011aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af2:	4770      	bx	lr

08011af4 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b084      	sub	sp, #16
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681a      	ldr	r2, [r3, #0]
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	425b      	negs	r3, r3
 8011b06:	4413      	add	r3, r2
 8011b08:	60fb      	str	r3, [r7, #12]
 8011b0a:	f107 020c 	add.w	r2, r7, #12
 8011b0e:	f107 0308 	add.w	r3, r7, #8
 8011b12:	4611      	mov	r1, r2
 8011b14:	4618      	mov	r0, r3
 8011b16:	f7ff ff3f 	bl	8011998 <_ZN9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3710      	adds	r7, #16
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}

08011b24 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8011b24:	b480      	push	{r7}
 8011b26:	b083      	sub	sp, #12
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	4618      	mov	r0, r3
 8011b32:	370c      	adds	r7, #12
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr

08011b3c <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011b3c:	b590      	push	{r4, r7, lr}
 8011b3e:	b085      	sub	sp, #20
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	60f8      	str	r0, [r7, #12]
 8011b44:	60b9      	str	r1, [r7, #8]
 8011b46:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f7ff fb24 	bl	8011196 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	681c      	ldr	r4, [r3, #0]
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	4619      	mov	r1, r3
 8011b56:	2004      	movs	r0, #4
 8011b58:	f7ef fa40 	bl	8000fdc <_ZnwjPv>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	601c      	str	r4, [r3, #0]
 8011b60:	bf00      	nop
 8011b62:	3714      	adds	r7, #20
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd90      	pop	{r4, r7, pc}

08011b68 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011b68:	b590      	push	{r4, r7, lr}
 8011b6a:	b087      	sub	sp, #28
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011b74:	68f8      	ldr	r0, [r7, #12]
 8011b76:	f000 fbed 	bl	8012354 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE8max_sizeEv>
 8011b7a:	4604      	mov	r4, r0
 8011b7c:	68f8      	ldr	r0, [r7, #12]
 8011b7e:	f000 fbfa 	bl	8012376 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>
 8011b82:	4603      	mov	r3, r0
 8011b84:	1ae2      	subs	r2, r4, r3
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	429a      	cmp	r2, r3
 8011b8a:	bf34      	ite	cc
 8011b8c:	2301      	movcc	r3, #1
 8011b8e:	2300      	movcs	r3, #0
 8011b90:	b2db      	uxtb	r3, r3
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d002      	beq.n	8011b9c <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f004 feb7 	bl	801690a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8011b9c:	68f8      	ldr	r0, [r7, #12]
 8011b9e:	f000 fbea 	bl	8012376 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>
 8011ba2:	4604      	mov	r4, r0
 8011ba4:	68f8      	ldr	r0, [r7, #12]
 8011ba6:	f000 fbe6 	bl	8012376 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>
 8011baa:	4603      	mov	r3, r0
 8011bac:	613b      	str	r3, [r7, #16]
 8011bae:	f107 0208 	add.w	r2, r7, #8
 8011bb2:	f107 0310 	add.w	r3, r7, #16
 8011bb6:	4611      	mov	r1, r2
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f7fa fea9 	bl	800c910 <_ZSt3maxIjERKT_S2_S2_>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	4423      	add	r3, r4
 8011bc4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011bc6:	68f8      	ldr	r0, [r7, #12]
 8011bc8:	f000 fbd5 	bl	8012376 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>
 8011bcc:	4602      	mov	r2, r0
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	4293      	cmp	r3, r2
 8011bd2:	d306      	bcc.n	8011be2 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8011bd4:	68f8      	ldr	r0, [r7, #12]
 8011bd6:	f000 fbbd 	bl	8012354 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE8max_sizeEv>
 8011bda:	4602      	mov	r2, r0
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	4293      	cmp	r3, r2
 8011be0:	d904      	bls.n	8011bec <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 8011be2:	68f8      	ldr	r0, [r7, #12]
 8011be4:	f000 fbb6 	bl	8012354 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE8max_sizeEv>
 8011be8:	4603      	mov	r3, r0
 8011bea:	e000      	b.n	8011bee <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 8011bec:	697b      	ldr	r3, [r7, #20]
      }
 8011bee:	4618      	mov	r0, r3
 8011bf0:	371c      	adds	r7, #28
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd90      	pop	{r4, r7, pc}

08011bf6 <_ZN9__gnu_cxxmiIPP16Power_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011bf6:	b590      	push	{r4, r7, lr}
 8011bf8:	b083      	sub	sp, #12
 8011bfa:	af00      	add	r7, sp, #0
 8011bfc:	6078      	str	r0, [r7, #4]
 8011bfe:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f7f0 fd94 	bl	800272e <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8011c06:	4603      	mov	r3, r0
 8011c08:	681c      	ldr	r4, [r3, #0]
 8011c0a:	6838      	ldr	r0, [r7, #0]
 8011c0c:	f7f0 fd8f 	bl	800272e <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8011c10:	4603      	mov	r3, r0
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	1ae3      	subs	r3, r4, r3
 8011c16:	109b      	asrs	r3, r3, #2
 8011c18:	4618      	mov	r0, r3
 8011c1a:	370c      	adds	r7, #12
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd90      	pop	{r4, r7, pc}

08011c20 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d006      	beq.n	8011c3e <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE11_M_allocateEj+0x1e>
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6839      	ldr	r1, [r7, #0]
 8011c34:	4618      	mov	r0, r3
 8011c36:	f000 fbae 	bl	8012396 <_ZNSt16allocator_traitsISaIP16Power_expressionEE8allocateERS2_j>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	e000      	b.n	8011c40 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE11_M_allocateEj+0x20>
 8011c3e:	2300      	movs	r3, #0
      }
 8011c40:	4618      	mov	r0, r3
 8011c42:	3708      	adds	r7, #8
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}

08011c48 <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8011c48:	b590      	push	{r4, r7, lr}
 8011c4a:	b089      	sub	sp, #36	; 0x24
 8011c4c:	af02      	add	r7, sp, #8
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	60b9      	str	r1, [r7, #8]
 8011c52:	607a      	str	r2, [r7, #4]
 8011c54:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8011c56:	f88d 4000 	strb.w	r4, [sp]
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	687a      	ldr	r2, [r7, #4]
 8011c5e:	68b9      	ldr	r1, [r7, #8]
 8011c60:	68f8      	ldr	r0, [r7, #12]
 8011c62:	f000 fba7 	bl	80123b4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8011c66:	4603      	mov	r3, r0
      }
 8011c68:	4618      	mov	r0, r3
 8011c6a:	371c      	adds	r7, #28
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd90      	pop	{r4, r7, pc}

08011c70 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
 8011c78:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681a      	ldr	r2, [r3, #0]
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	009b      	lsls	r3, r3, #2
 8011c82:	425b      	negs	r3, r3
 8011c84:	4413      	add	r3, r2
 8011c86:	60fb      	str	r3, [r7, #12]
 8011c88:	f107 020c 	add.w	r2, r7, #12
 8011c8c:	f107 0308 	add.w	r3, r7, #8
 8011c90:	4611      	mov	r1, r2
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7f0 fd3b 	bl	800270e <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3710      	adds	r7, #16
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011ca2:	b590      	push	{r4, r7, lr}
 8011ca4:	b085      	sub	sp, #20
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	60f8      	str	r0, [r7, #12]
 8011caa:	60b9      	str	r1, [r7, #8]
 8011cac:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f7ff fb27 	bl	8011302 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	781c      	ldrb	r4, [r3, #0]
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	4619      	mov	r1, r3
 8011cbc:	2001      	movs	r0, #1
 8011cbe:	f7ef f98d 	bl	8000fdc <_ZnwjPv>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	4622      	mov	r2, r4
 8011cc6:	701a      	strb	r2, [r3, #0]
 8011cc8:	bf00      	nop
 8011cca:	3714      	adds	r7, #20
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd90      	pop	{r4, r7, pc}

08011cd0 <_ZN9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011cd0:	b480      	push	{r7}
 8011cd2:	b083      	sub	sp, #12
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	681a      	ldr	r2, [r3, #0]
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	601a      	str	r2, [r3, #0]
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	370c      	adds	r7, #12
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr

08011cf0 <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011cf0:	b590      	push	{r4, r7, lr}
 8011cf2:	b087      	sub	sp, #28
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	60f8      	str	r0, [r7, #12]
 8011cf8:	60b9      	str	r1, [r7, #8]
 8011cfa:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011cfc:	68f8      	ldr	r0, [r7, #12]
 8011cfe:	f000 fb6b 	bl	80123d8 <_ZNKSt6vectorI12sum_operatorSaIS0_EE8max_sizeEv>
 8011d02:	4604      	mov	r4, r0
 8011d04:	68f8      	ldr	r0, [r7, #12]
 8011d06:	f000 fb78 	bl	80123fa <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	1ae2      	subs	r2, r4, r3
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	429a      	cmp	r2, r3
 8011d12:	bf34      	ite	cc
 8011d14:	2301      	movcc	r3, #1
 8011d16:	2300      	movcs	r3, #0
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d002      	beq.n	8011d24 <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f004 fdf3 	bl	801690a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8011d24:	68f8      	ldr	r0, [r7, #12]
 8011d26:	f000 fb68 	bl	80123fa <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>
 8011d2a:	4604      	mov	r4, r0
 8011d2c:	68f8      	ldr	r0, [r7, #12]
 8011d2e:	f000 fb64 	bl	80123fa <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>
 8011d32:	4603      	mov	r3, r0
 8011d34:	613b      	str	r3, [r7, #16]
 8011d36:	f107 0208 	add.w	r2, r7, #8
 8011d3a:	f107 0310 	add.w	r3, r7, #16
 8011d3e:	4611      	mov	r1, r2
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7fa fde5 	bl	800c910 <_ZSt3maxIjERKT_S2_S2_>
 8011d46:	4603      	mov	r3, r0
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	4423      	add	r3, r4
 8011d4c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011d4e:	68f8      	ldr	r0, [r7, #12]
 8011d50:	f000 fb53 	bl	80123fa <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>
 8011d54:	4602      	mov	r2, r0
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	4293      	cmp	r3, r2
 8011d5a:	d306      	bcc.n	8011d6a <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8011d5c:	68f8      	ldr	r0, [r7, #12]
 8011d5e:	f000 fb3b 	bl	80123d8 <_ZNKSt6vectorI12sum_operatorSaIS0_EE8max_sizeEv>
 8011d62:	4602      	mov	r2, r0
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	4293      	cmp	r3, r2
 8011d68:	d904      	bls.n	8011d74 <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc+0x84>
 8011d6a:	68f8      	ldr	r0, [r7, #12]
 8011d6c:	f000 fb34 	bl	80123d8 <_ZNKSt6vectorI12sum_operatorSaIS0_EE8max_sizeEv>
 8011d70:	4603      	mov	r3, r0
 8011d72:	e000      	b.n	8011d76 <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc+0x86>
 8011d74:	697b      	ldr	r3, [r7, #20]
      }
 8011d76:	4618      	mov	r0, r3
 8011d78:	371c      	adds	r7, #28
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd90      	pop	{r4, r7, pc}

08011d7e <_ZNSt6vectorI12sum_operatorSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8011d7e:	b580      	push	{r7, lr}
 8011d80:	b084      	sub	sp, #16
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	f107 030c 	add.w	r3, r7, #12
 8011d8c:	4611      	mov	r1, r2
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7ff ff9e 	bl	8011cd0 <_ZN9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	4618      	mov	r0, r3
 8011d98:	3710      	adds	r7, #16
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}

08011d9e <_ZN9__gnu_cxxmiIP12sum_operatorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011d9e:	b590      	push	{r4, r7, lr}
 8011da0:	b083      	sub	sp, #12
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
 8011da6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f000 f834 	bl	8011e16 <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 8011dae:	4603      	mov	r3, r0
 8011db0:	681c      	ldr	r4, [r3, #0]
 8011db2:	6838      	ldr	r0, [r7, #0]
 8011db4:	f000 f82f 	bl	8011e16 <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 8011db8:	4603      	mov	r3, r0
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	1ae3      	subs	r3, r4, r3
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	370c      	adds	r7, #12
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd90      	pop	{r4, r7, pc}

08011dc6 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011dc6:	b580      	push	{r7, lr}
 8011dc8:	b082      	sub	sp, #8
 8011dca:	af00      	add	r7, sp, #0
 8011dcc:	6078      	str	r0, [r7, #4]
 8011dce:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d006      	beq.n	8011de4 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE11_M_allocateEj+0x1e>
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	6839      	ldr	r1, [r7, #0]
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f000 fb1c 	bl	8012418 <_ZNSt16allocator_traitsISaI12sum_operatorEE8allocateERS1_j>
 8011de0:	4603      	mov	r3, r0
 8011de2:	e000      	b.n	8011de6 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE11_M_allocateEj+0x20>
 8011de4:	2300      	movs	r3, #0
      }
 8011de6:	4618      	mov	r0, r3
 8011de8:	3708      	adds	r7, #8
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}

08011dee <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8011dee:	b590      	push	{r4, r7, lr}
 8011df0:	b089      	sub	sp, #36	; 0x24
 8011df2:	af02      	add	r7, sp, #8
 8011df4:	60f8      	str	r0, [r7, #12]
 8011df6:	60b9      	str	r1, [r7, #8]
 8011df8:	607a      	str	r2, [r7, #4]
 8011dfa:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8011dfc:	f88d 4000 	strb.w	r4, [sp]
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	687a      	ldr	r2, [r7, #4]
 8011e04:	68b9      	ldr	r1, [r7, #8]
 8011e06:	68f8      	ldr	r0, [r7, #12]
 8011e08:	f000 fb15 	bl	8012436 <_ZNSt6vectorI12sum_operatorSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8011e0c:	4603      	mov	r3, r0
      }
 8011e0e:	4618      	mov	r0, r3
 8011e10:	371c      	adds	r7, #28
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd90      	pop	{r4, r7, pc}

08011e16 <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8011e16:	b480      	push	{r7}
 8011e18:	b083      	sub	sp, #12
 8011e1a:	af00      	add	r7, sp, #0
 8011e1c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	4618      	mov	r0, r3
 8011e22:	370c      	adds	r7, #12
 8011e24:	46bd      	mov	sp, r7
 8011e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2a:	4770      	bx	lr

08011e2c <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b084      	sub	sp, #16
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681a      	ldr	r2, [r3, #0]
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	425b      	negs	r3, r3
 8011e3e:	4413      	add	r3, r2
 8011e40:	60fb      	str	r3, [r7, #12]
 8011e42:	f107 020c 	add.w	r2, r7, #12
 8011e46:	f107 0308 	add.w	r3, r7, #8
 8011e4a:	4611      	mov	r1, r2
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7ff ff3f 	bl	8011cd0 <_ZN9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	4618      	mov	r0, r3
 8011e56:	3710      	adds	r7, #16
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}

08011e5c <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8011e5c:	b480      	push	{r7}
 8011e5e:	b083      	sub	sp, #12
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	4618      	mov	r0, r3
 8011e6a:	370c      	adds	r7, #12
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e72:	4770      	bx	lr

08011e74 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011e74:	b590      	push	{r4, r7, lr}
 8011e76:	b085      	sub	sp, #20
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	60f8      	str	r0, [r7, #12]
 8011e7c:	60b9      	str	r1, [r7, #8]
 8011e7e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011e80:	6878      	ldr	r0, [r7, #4]
 8011e82:	f7ff fb18 	bl	80114b6 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011e86:	4603      	mov	r3, r0
 8011e88:	681c      	ldr	r4, [r3, #0]
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	4619      	mov	r1, r3
 8011e8e:	2004      	movs	r0, #4
 8011e90:	f7ef f8a4 	bl	8000fdc <_ZnwjPv>
 8011e94:	4603      	mov	r3, r0
 8011e96:	601c      	str	r4, [r3, #0]
 8011e98:	bf00      	nop
 8011e9a:	3714      	adds	r7, #20
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd90      	pop	{r4, r7, pc}

08011ea0 <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011ea0:	b590      	push	{r4, r7, lr}
 8011ea2:	b087      	sub	sp, #28
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	60f8      	str	r0, [r7, #12]
 8011ea8:	60b9      	str	r1, [r7, #8]
 8011eaa:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011eac:	68f8      	ldr	r0, [r7, #12]
 8011eae:	f000 fad4 	bl	801245a <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE8max_sizeEv>
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	68f8      	ldr	r0, [r7, #12]
 8011eb6:	f000 fae1 	bl	801247c <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	1ae2      	subs	r2, r4, r3
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	bf34      	ite	cc
 8011ec4:	2301      	movcc	r3, #1
 8011ec6:	2300      	movcs	r3, #0
 8011ec8:	b2db      	uxtb	r3, r3
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d002      	beq.n	8011ed4 <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f004 fd1b 	bl	801690a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8011ed4:	68f8      	ldr	r0, [r7, #12]
 8011ed6:	f000 fad1 	bl	801247c <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>
 8011eda:	4604      	mov	r4, r0
 8011edc:	68f8      	ldr	r0, [r7, #12]
 8011ede:	f000 facd 	bl	801247c <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	613b      	str	r3, [r7, #16]
 8011ee6:	f107 0208 	add.w	r2, r7, #8
 8011eea:	f107 0310 	add.w	r3, r7, #16
 8011eee:	4611      	mov	r1, r2
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7fa fd0d 	bl	800c910 <_ZSt3maxIjERKT_S2_S2_>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	4423      	add	r3, r4
 8011efc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011efe:	68f8      	ldr	r0, [r7, #12]
 8011f00:	f000 fabc 	bl	801247c <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>
 8011f04:	4602      	mov	r2, r0
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	4293      	cmp	r3, r2
 8011f0a:	d306      	bcc.n	8011f1a <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8011f0c:	68f8      	ldr	r0, [r7, #12]
 8011f0e:	f000 faa4 	bl	801245a <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE8max_sizeEv>
 8011f12:	4602      	mov	r2, r0
 8011f14:	697b      	ldr	r3, [r7, #20]
 8011f16:	4293      	cmp	r3, r2
 8011f18:	d904      	bls.n	8011f24 <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 8011f1a:	68f8      	ldr	r0, [r7, #12]
 8011f1c:	f000 fa9d 	bl	801245a <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE8max_sizeEv>
 8011f20:	4603      	mov	r3, r0
 8011f22:	e000      	b.n	8011f26 <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 8011f24:	697b      	ldr	r3, [r7, #20]
      }
 8011f26:	4618      	mov	r0, r3
 8011f28:	371c      	adds	r7, #28
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd90      	pop	{r4, r7, pc}

08011f2e <_ZN9__gnu_cxxmiIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011f2e:	b590      	push	{r4, r7, lr}
 8011f30:	b083      	sub	sp, #12
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	6078      	str	r0, [r7, #4]
 8011f36:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f7f0 fc8e 	bl	800285a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	681c      	ldr	r4, [r3, #0]
 8011f42:	6838      	ldr	r0, [r7, #0]
 8011f44:	f7f0 fc89 	bl	800285a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	1ae3      	subs	r3, r4, r3
 8011f4e:	109b      	asrs	r3, r3, #2
 8011f50:	4618      	mov	r0, r3
 8011f52:	370c      	adds	r7, #12
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd90      	pop	{r4, r7, pc}

08011f58 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d006      	beq.n	8011f76 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE11_M_allocateEj+0x1e>
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	6839      	ldr	r1, [r7, #0]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f000 fa95 	bl	801249c <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE8allocateERS2_j>
 8011f72:	4603      	mov	r3, r0
 8011f74:	e000      	b.n	8011f78 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE11_M_allocateEj+0x20>
 8011f76:	2300      	movs	r3, #0
      }
 8011f78:	4618      	mov	r0, r3
 8011f7a:	3708      	adds	r7, #8
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}

08011f80 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8011f80:	b590      	push	{r4, r7, lr}
 8011f82:	b089      	sub	sp, #36	; 0x24
 8011f84:	af02      	add	r7, sp, #8
 8011f86:	60f8      	str	r0, [r7, #12]
 8011f88:	60b9      	str	r1, [r7, #8]
 8011f8a:	607a      	str	r2, [r7, #4]
 8011f8c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8011f8e:	f88d 4000 	strb.w	r4, [sp]
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	687a      	ldr	r2, [r7, #4]
 8011f96:	68b9      	ldr	r1, [r7, #8]
 8011f98:	68f8      	ldr	r0, [r7, #12]
 8011f9a:	f000 fa8e 	bl	80124ba <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8011f9e:	4603      	mov	r3, r0
      }
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	371c      	adds	r7, #28
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd90      	pop	{r4, r7, pc}

08011fa8 <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681a      	ldr	r2, [r3, #0]
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	009b      	lsls	r3, r3, #2
 8011fba:	425b      	negs	r3, r3
 8011fbc:	4413      	add	r3, r2
 8011fbe:	60fb      	str	r3, [r7, #12]
 8011fc0:	f107 020c 	add.w	r2, r7, #12
 8011fc4:	f107 0308 	add.w	r3, r7, #8
 8011fc8:	4611      	mov	r1, r2
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f7f0 fc35 	bl	800283a <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}

08011fda <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011fda:	b590      	push	{r4, r7, lr}
 8011fdc:	b085      	sub	sp, #20
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	60f8      	str	r0, [r7, #12]
 8011fe2:	60b9      	str	r1, [r7, #8]
 8011fe4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f7ff fb26 	bl	8011638 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011fec:	4603      	mov	r3, r0
 8011fee:	681c      	ldr	r4, [r3, #0]
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	2004      	movs	r0, #4
 8011ff6:	f7ee fff1 	bl	8000fdc <_ZnwjPv>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	601c      	str	r4, [r3, #0]
 8011ffe:	bf00      	nop
 8012000:	3714      	adds	r7, #20
 8012002:	46bd      	mov	sp, r7
 8012004:	bd90      	pop	{r4, r7, pc}

08012006 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8012006:	b590      	push	{r4, r7, lr}
 8012008:	b087      	sub	sp, #28
 801200a:	af00      	add	r7, sp, #0
 801200c:	60f8      	str	r0, [r7, #12]
 801200e:	60b9      	str	r1, [r7, #8]
 8012010:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8012012:	68f8      	ldr	r0, [r7, #12]
 8012014:	f000 fa63 	bl	80124de <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE8max_sizeEv>
 8012018:	4604      	mov	r4, r0
 801201a:	68f8      	ldr	r0, [r7, #12]
 801201c:	f000 fa70 	bl	8012500 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>
 8012020:	4603      	mov	r3, r0
 8012022:	1ae2      	subs	r2, r4, r3
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	429a      	cmp	r2, r3
 8012028:	bf34      	ite	cc
 801202a:	2301      	movcc	r3, #1
 801202c:	2300      	movcs	r3, #0
 801202e:	b2db      	uxtb	r3, r3
 8012030:	2b00      	cmp	r3, #0
 8012032:	d002      	beq.n	801203a <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f004 fc68 	bl	801690a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801203a:	68f8      	ldr	r0, [r7, #12]
 801203c:	f000 fa60 	bl	8012500 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>
 8012040:	4604      	mov	r4, r0
 8012042:	68f8      	ldr	r0, [r7, #12]
 8012044:	f000 fa5c 	bl	8012500 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>
 8012048:	4603      	mov	r3, r0
 801204a:	613b      	str	r3, [r7, #16]
 801204c:	f107 0208 	add.w	r2, r7, #8
 8012050:	f107 0310 	add.w	r3, r7, #16
 8012054:	4611      	mov	r1, r2
 8012056:	4618      	mov	r0, r3
 8012058:	f7fa fc5a 	bl	800c910 <_ZSt3maxIjERKT_S2_S2_>
 801205c:	4603      	mov	r3, r0
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	4423      	add	r3, r4
 8012062:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012064:	68f8      	ldr	r0, [r7, #12]
 8012066:	f000 fa4b 	bl	8012500 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>
 801206a:	4602      	mov	r2, r0
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	4293      	cmp	r3, r2
 8012070:	d306      	bcc.n	8012080 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8012072:	68f8      	ldr	r0, [r7, #12]
 8012074:	f000 fa33 	bl	80124de <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE8max_sizeEv>
 8012078:	4602      	mov	r2, r0
 801207a:	697b      	ldr	r3, [r7, #20]
 801207c:	4293      	cmp	r3, r2
 801207e:	d904      	bls.n	801208a <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 8012080:	68f8      	ldr	r0, [r7, #12]
 8012082:	f000 fa2c 	bl	80124de <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE8max_sizeEv>
 8012086:	4603      	mov	r3, r0
 8012088:	e000      	b.n	801208c <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 801208a:	697b      	ldr	r3, [r7, #20]
      }
 801208c:	4618      	mov	r0, r3
 801208e:	371c      	adds	r7, #28
 8012090:	46bd      	mov	sp, r7
 8012092:	bd90      	pop	{r4, r7, pc}

08012094 <_ZN9__gnu_cxxmiIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8012094:	b590      	push	{r4, r7, lr}
 8012096:	b083      	sub	sp, #12
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f7f0 fc34 	bl	800290c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 80120a4:	4603      	mov	r3, r0
 80120a6:	681c      	ldr	r4, [r3, #0]
 80120a8:	6838      	ldr	r0, [r7, #0]
 80120aa:	f7f0 fc2f 	bl	800290c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 80120ae:	4603      	mov	r3, r0
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	1ae3      	subs	r3, r4, r3
 80120b4:	109b      	asrs	r3, r3, #2
 80120b6:	4618      	mov	r0, r3
 80120b8:	370c      	adds	r7, #12
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd90      	pop	{r4, r7, pc}

080120be <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80120be:	b580      	push	{r7, lr}
 80120c0:	b082      	sub	sp, #8
 80120c2:	af00      	add	r7, sp, #0
 80120c4:	6078      	str	r0, [r7, #4]
 80120c6:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d006      	beq.n	80120dc <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE11_M_allocateEj+0x1e>
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	6839      	ldr	r1, [r7, #0]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f000 fa24 	bl	8012520 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE8allocateERS2_j>
 80120d8:	4603      	mov	r3, r0
 80120da:	e000      	b.n	80120de <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE11_M_allocateEj+0x20>
 80120dc:	2300      	movs	r3, #0
      }
 80120de:	4618      	mov	r0, r3
 80120e0:	3708      	adds	r7, #8
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}

080120e6 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80120e6:	b590      	push	{r4, r7, lr}
 80120e8:	b089      	sub	sp, #36	; 0x24
 80120ea:	af02      	add	r7, sp, #8
 80120ec:	60f8      	str	r0, [r7, #12]
 80120ee:	60b9      	str	r1, [r7, #8]
 80120f0:	607a      	str	r2, [r7, #4]
 80120f2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80120f4:	f88d 4000 	strb.w	r4, [sp]
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	687a      	ldr	r2, [r7, #4]
 80120fc:	68b9      	ldr	r1, [r7, #8]
 80120fe:	68f8      	ldr	r0, [r7, #12]
 8012100:	f000 fa1d 	bl	801253e <_ZNSt6vectorIP18Compare_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8012104:	4603      	mov	r3, r0
      }
 8012106:	4618      	mov	r0, r3
 8012108:	371c      	adds	r7, #28
 801210a:	46bd      	mov	sp, r7
 801210c:	bd90      	pop	{r4, r7, pc}

0801210e <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 801210e:	b580      	push	{r7, lr}
 8012110:	b084      	sub	sp, #16
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]
 8012116:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681a      	ldr	r2, [r3, #0]
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	009b      	lsls	r3, r3, #2
 8012120:	425b      	negs	r3, r3
 8012122:	4413      	add	r3, r2
 8012124:	60fb      	str	r3, [r7, #12]
 8012126:	f107 020c 	add.w	r2, r7, #12
 801212a:	f107 0308 	add.w	r3, r7, #8
 801212e:	4611      	mov	r1, r2
 8012130:	4618      	mov	r0, r3
 8012132:	f7f0 fbdb 	bl	80028ec <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	4618      	mov	r0, r3
 801213a:	3710      	adds	r7, #16
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}

08012140 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8012140:	b590      	push	{r4, r7, lr}
 8012142:	b085      	sub	sp, #20
 8012144:	af00      	add	r7, sp, #0
 8012146:	60f8      	str	r0, [r7, #12]
 8012148:	60b9      	str	r1, [r7, #8]
 801214a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f7ff fb33 	bl	80117b8 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8012152:	4603      	mov	r3, r0
 8012154:	681c      	ldr	r4, [r3, #0]
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	4619      	mov	r1, r3
 801215a:	2004      	movs	r0, #4
 801215c:	f7ee ff3e 	bl	8000fdc <_ZnwjPv>
 8012160:	4603      	mov	r3, r0
 8012162:	601c      	str	r4, [r3, #0]
 8012164:	bf00      	nop
 8012166:	3714      	adds	r7, #20
 8012168:	46bd      	mov	sp, r7
 801216a:	bd90      	pop	{r4, r7, pc}

0801216c <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801216c:	b590      	push	{r4, r7, lr}
 801216e:	b087      	sub	sp, #28
 8012170:	af00      	add	r7, sp, #0
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8012178:	68f8      	ldr	r0, [r7, #12]
 801217a:	f000 f9f2 	bl	8012562 <_ZNKSt6vectorIP14And_expressionSaIS1_EE8max_sizeEv>
 801217e:	4604      	mov	r4, r0
 8012180:	68f8      	ldr	r0, [r7, #12]
 8012182:	f000 f9ff 	bl	8012584 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 8012186:	4603      	mov	r3, r0
 8012188:	1ae2      	subs	r2, r4, r3
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	429a      	cmp	r2, r3
 801218e:	bf34      	ite	cc
 8012190:	2301      	movcc	r3, #1
 8012192:	2300      	movcs	r3, #0
 8012194:	b2db      	uxtb	r3, r3
 8012196:	2b00      	cmp	r3, #0
 8012198:	d002      	beq.n	80121a0 <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f004 fbb5 	bl	801690a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80121a0:	68f8      	ldr	r0, [r7, #12]
 80121a2:	f000 f9ef 	bl	8012584 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 80121a6:	4604      	mov	r4, r0
 80121a8:	68f8      	ldr	r0, [r7, #12]
 80121aa:	f000 f9eb 	bl	8012584 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 80121ae:	4603      	mov	r3, r0
 80121b0:	613b      	str	r3, [r7, #16]
 80121b2:	f107 0208 	add.w	r2, r7, #8
 80121b6:	f107 0310 	add.w	r3, r7, #16
 80121ba:	4611      	mov	r1, r2
 80121bc:	4618      	mov	r0, r3
 80121be:	f7fa fba7 	bl	800c910 <_ZSt3maxIjERKT_S2_S2_>
 80121c2:	4603      	mov	r3, r0
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	4423      	add	r3, r4
 80121c8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80121ca:	68f8      	ldr	r0, [r7, #12]
 80121cc:	f000 f9da 	bl	8012584 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 80121d0:	4602      	mov	r2, r0
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	4293      	cmp	r3, r2
 80121d6:	d306      	bcc.n	80121e6 <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80121d8:	68f8      	ldr	r0, [r7, #12]
 80121da:	f000 f9c2 	bl	8012562 <_ZNKSt6vectorIP14And_expressionSaIS1_EE8max_sizeEv>
 80121de:	4602      	mov	r2, r0
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	4293      	cmp	r3, r2
 80121e4:	d904      	bls.n	80121f0 <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	f000 f9bb 	bl	8012562 <_ZNKSt6vectorIP14And_expressionSaIS1_EE8max_sizeEv>
 80121ec:	4603      	mov	r3, r0
 80121ee:	e000      	b.n	80121f2 <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 80121f0:	697b      	ldr	r3, [r7, #20]
      }
 80121f2:	4618      	mov	r0, r3
 80121f4:	371c      	adds	r7, #28
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd90      	pop	{r4, r7, pc}

080121fa <_ZN9__gnu_cxxmiIPP14And_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80121fa:	b590      	push	{r4, r7, lr}
 80121fc:	b083      	sub	sp, #12
 80121fe:	af00      	add	r7, sp, #0
 8012200:	6078      	str	r0, [r7, #4]
 8012202:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f7f0 fbda 	bl	80029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 801220a:	4603      	mov	r3, r0
 801220c:	681c      	ldr	r4, [r3, #0]
 801220e:	6838      	ldr	r0, [r7, #0]
 8012210:	f7f0 fbd5 	bl	80029be <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8012214:	4603      	mov	r3, r0
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	1ae3      	subs	r3, r4, r3
 801221a:	109b      	asrs	r3, r3, #2
 801221c:	4618      	mov	r0, r3
 801221e:	370c      	adds	r7, #12
 8012220:	46bd      	mov	sp, r7
 8012222:	bd90      	pop	{r4, r7, pc}

08012224 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8012224:	b580      	push	{r7, lr}
 8012226:	b082      	sub	sp, #8
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d006      	beq.n	8012242 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE11_M_allocateEj+0x1e>
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	6839      	ldr	r1, [r7, #0]
 8012238:	4618      	mov	r0, r3
 801223a:	f000 f9b3 	bl	80125a4 <_ZNSt16allocator_traitsISaIP14And_expressionEE8allocateERS2_j>
 801223e:	4603      	mov	r3, r0
 8012240:	e000      	b.n	8012244 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE11_M_allocateEj+0x20>
 8012242:	2300      	movs	r3, #0
      }
 8012244:	4618      	mov	r0, r3
 8012246:	3708      	adds	r7, #8
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}

0801224c <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801224c:	b590      	push	{r4, r7, lr}
 801224e:	b089      	sub	sp, #36	; 0x24
 8012250:	af02      	add	r7, sp, #8
 8012252:	60f8      	str	r0, [r7, #12]
 8012254:	60b9      	str	r1, [r7, #8]
 8012256:	607a      	str	r2, [r7, #4]
 8012258:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801225a:	f88d 4000 	strb.w	r4, [sp]
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	687a      	ldr	r2, [r7, #4]
 8012262:	68b9      	ldr	r1, [r7, #8]
 8012264:	68f8      	ldr	r0, [r7, #12]
 8012266:	f000 f9ac 	bl	80125c2 <_ZNSt6vectorIP14And_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 801226a:	4603      	mov	r3, r0
      }
 801226c:	4618      	mov	r0, r3
 801226e:	371c      	adds	r7, #28
 8012270:	46bd      	mov	sp, r7
 8012272:	bd90      	pop	{r4, r7, pc}

08012274 <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8012274:	b580      	push	{r7, lr}
 8012276:	b084      	sub	sp, #16
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	009b      	lsls	r3, r3, #2
 8012286:	425b      	negs	r3, r3
 8012288:	4413      	add	r3, r2
 801228a:	60fb      	str	r3, [r7, #12]
 801228c:	f107 020c 	add.w	r2, r7, #12
 8012290:	f107 0308 	add.w	r3, r7, #8
 8012294:	4611      	mov	r1, r2
 8012296:	4618      	mov	r0, r3
 8012298:	f7f0 fb81 	bl	800299e <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	4618      	mov	r0, r3
 80122a0:	3710      	adds	r7, #16
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}

080122a6 <_ZSt11__addressofIP10ExpressionEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80122a6:	b480      	push	{r7}
 80122a8:	b083      	sub	sp, #12
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	4618      	mov	r0, r3
 80122b2:	370c      	adds	r7, #12
 80122b4:	46bd      	mov	sp, r7
 80122b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ba:	4770      	bx	lr

080122bc <_ZSt11__addressofIP17Primal_expressionEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	4618      	mov	r0, r3
 80122c8:	370c      	adds	r7, #12
 80122ca:	46bd      	mov	sp, r7
 80122cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d0:	4770      	bx	lr

080122d2 <_ZNKSt6vectorI13mult_operatorSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80122d2:	b580      	push	{r7, lr}
 80122d4:	b082      	sub	sp, #8
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	4618      	mov	r0, r3
 80122de:	f000 f99c 	bl	801261a <_ZNKSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80122e2:	4603      	mov	r3, r0
 80122e4:	4618      	mov	r0, r3
 80122e6:	f000 f97e 	bl	80125e6 <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_max_sizeERKS1_>
 80122ea:	4603      	mov	r3, r0
 80122ec:	4618      	mov	r0, r3
 80122ee:	3708      	adds	r7, #8
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80122f4:	b480      	push	{r7}
 80122f6:	b083      	sub	sp, #12
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	685a      	ldr	r2, [r3, #4]
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	1ad3      	subs	r3, r2, r3
 8012306:	4618      	mov	r0, r3
 8012308:	370c      	adds	r7, #12
 801230a:	46bd      	mov	sp, r7
 801230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012310:	4770      	bx	lr

08012312 <_ZNSt16allocator_traitsISaI13mult_operatorEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8012312:	b580      	push	{r7, lr}
 8012314:	b082      	sub	sp, #8
 8012316:	af00      	add	r7, sp, #0
 8012318:	6078      	str	r0, [r7, #4]
 801231a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801231c:	2200      	movs	r2, #0
 801231e:	6839      	ldr	r1, [r7, #0]
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f000 f985 	bl	8012630 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE8allocateEjPKv>
 8012326:	4603      	mov	r3, r0
 8012328:	4618      	mov	r0, r3
 801232a:	3708      	adds	r7, #8
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}

08012330 <_ZNSt6vectorI13mult_operatorSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	60f8      	str	r0, [r7, #12]
 8012338:	60b9      	str	r1, [r7, #8]
 801233a:	607a      	str	r2, [r7, #4]
 801233c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	687a      	ldr	r2, [r7, #4]
 8012342:	68b9      	ldr	r1, [r7, #8]
 8012344:	68f8      	ldr	r0, [r7, #12]
 8012346:	f000 f990 	bl	801266a <_ZSt12__relocate_aIP13mult_operatorS1_SaIS0_EET0_T_S4_S3_RT1_>
 801234a:	4603      	mov	r3, r0
      }
 801234c:	4618      	mov	r0, r3
 801234e:	3710      	adds	r7, #16
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}

08012354 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012354:	b580      	push	{r7, lr}
 8012356:	b082      	sub	sp, #8
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	4618      	mov	r0, r3
 8012360:	f000 f9ba 	bl	80126d8 <_ZNKSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8012364:	4603      	mov	r3, r0
 8012366:	4618      	mov	r0, r3
 8012368:	f000 f99c 	bl	80126a4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_max_sizeERKS2_>
 801236c:	4603      	mov	r3, r0
 801236e:	4618      	mov	r0, r3
 8012370:	3708      	adds	r7, #8
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}

08012376 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012376:	b480      	push	{r7}
 8012378:	b083      	sub	sp, #12
 801237a:	af00      	add	r7, sp, #0
 801237c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	685a      	ldr	r2, [r3, #4]
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	1ad3      	subs	r3, r2, r3
 8012388:	109b      	asrs	r3, r3, #2
 801238a:	4618      	mov	r0, r3
 801238c:	370c      	adds	r7, #12
 801238e:	46bd      	mov	sp, r7
 8012390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012394:	4770      	bx	lr

08012396 <_ZNSt16allocator_traitsISaIP16Power_expressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012396:	b580      	push	{r7, lr}
 8012398:	b082      	sub	sp, #8
 801239a:	af00      	add	r7, sp, #0
 801239c:	6078      	str	r0, [r7, #4]
 801239e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80123a0:	2200      	movs	r2, #0
 80123a2:	6839      	ldr	r1, [r7, #0]
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f000 f9a2 	bl	80126ee <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE8allocateEjPKv>
 80123aa:	4603      	mov	r3, r0
 80123ac:	4618      	mov	r0, r3
 80123ae:	3708      	adds	r7, #8
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b084      	sub	sp, #16
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	60f8      	str	r0, [r7, #12]
 80123bc:	60b9      	str	r1, [r7, #8]
 80123be:	607a      	str	r2, [r7, #4]
 80123c0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	687a      	ldr	r2, [r7, #4]
 80123c6:	68b9      	ldr	r1, [r7, #8]
 80123c8:	68f8      	ldr	r0, [r7, #12]
 80123ca:	f000 f9af 	bl	801272c <_ZSt12__relocate_aIPP16Power_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 80123ce:	4603      	mov	r3, r0
      }
 80123d0:	4618      	mov	r0, r3
 80123d2:	3710      	adds	r7, #16
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <_ZNKSt6vectorI12sum_operatorSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	4618      	mov	r0, r3
 80123e4:	f000 f9d9 	bl	801279a <_ZNKSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80123e8:	4603      	mov	r3, r0
 80123ea:	4618      	mov	r0, r3
 80123ec:	f000 f9bb 	bl	8012766 <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_max_sizeERKS1_>
 80123f0:	4603      	mov	r3, r0
 80123f2:	4618      	mov	r0, r3
 80123f4:	3708      	adds	r7, #8
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}

080123fa <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80123fa:	b480      	push	{r7}
 80123fc:	b083      	sub	sp, #12
 80123fe:	af00      	add	r7, sp, #0
 8012400:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	685a      	ldr	r2, [r3, #4]
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	1ad3      	subs	r3, r2, r3
 801240c:	4618      	mov	r0, r3
 801240e:	370c      	adds	r7, #12
 8012410:	46bd      	mov	sp, r7
 8012412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012416:	4770      	bx	lr

08012418 <_ZNSt16allocator_traitsISaI12sum_operatorEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8012422:	2200      	movs	r2, #0
 8012424:	6839      	ldr	r1, [r7, #0]
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f000 f9c2 	bl	80127b0 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE8allocateEjPKv>
 801242c:	4603      	mov	r3, r0
 801242e:	4618      	mov	r0, r3
 8012430:	3708      	adds	r7, #8
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}

08012436 <_ZNSt6vectorI12sum_operatorSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012436:	b580      	push	{r7, lr}
 8012438:	b084      	sub	sp, #16
 801243a:	af00      	add	r7, sp, #0
 801243c:	60f8      	str	r0, [r7, #12]
 801243e:	60b9      	str	r1, [r7, #8]
 8012440:	607a      	str	r2, [r7, #4]
 8012442:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	687a      	ldr	r2, [r7, #4]
 8012448:	68b9      	ldr	r1, [r7, #8]
 801244a:	68f8      	ldr	r0, [r7, #12]
 801244c:	f000 f9cd 	bl	80127ea <_ZSt12__relocate_aIP12sum_operatorS1_SaIS0_EET0_T_S4_S3_RT1_>
 8012450:	4603      	mov	r3, r0
      }
 8012452:	4618      	mov	r0, r3
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}

0801245a <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801245a:	b580      	push	{r7, lr}
 801245c:	b082      	sub	sp, #8
 801245e:	af00      	add	r7, sp, #0
 8012460:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	4618      	mov	r0, r3
 8012466:	f000 f9f7 	bl	8012858 <_ZNKSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 801246a:	4603      	mov	r3, r0
 801246c:	4618      	mov	r0, r3
 801246e:	f000 f9d9 	bl	8012824 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_max_sizeERKS2_>
 8012472:	4603      	mov	r3, r0
 8012474:	4618      	mov	r0, r3
 8012476:	3708      	adds	r7, #8
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}

0801247c <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801247c:	b480      	push	{r7}
 801247e:	b083      	sub	sp, #12
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	685a      	ldr	r2, [r3, #4]
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	1ad3      	subs	r3, r2, r3
 801248e:	109b      	asrs	r3, r3, #2
 8012490:	4618      	mov	r0, r3
 8012492:	370c      	adds	r7, #12
 8012494:	46bd      	mov	sp, r7
 8012496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249a:	4770      	bx	lr

0801249c <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801249c:	b580      	push	{r7, lr}
 801249e:	b082      	sub	sp, #8
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80124a6:	2200      	movs	r2, #0
 80124a8:	6839      	ldr	r1, [r7, #0]
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f000 f9df 	bl	801286e <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE8allocateEjPKv>
 80124b0:	4603      	mov	r3, r0
 80124b2:	4618      	mov	r0, r3
 80124b4:	3708      	adds	r7, #8
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}

080124ba <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80124ba:	b580      	push	{r7, lr}
 80124bc:	b084      	sub	sp, #16
 80124be:	af00      	add	r7, sp, #0
 80124c0:	60f8      	str	r0, [r7, #12]
 80124c2:	60b9      	str	r1, [r7, #8]
 80124c4:	607a      	str	r2, [r7, #4]
 80124c6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	687a      	ldr	r2, [r7, #4]
 80124cc:	68b9      	ldr	r1, [r7, #8]
 80124ce:	68f8      	ldr	r0, [r7, #12]
 80124d0:	f000 f9ec 	bl	80128ac <_ZSt12__relocate_aIPP19Multiply_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 80124d4:	4603      	mov	r3, r0
      }
 80124d6:	4618      	mov	r0, r3
 80124d8:	3710      	adds	r7, #16
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}

080124de <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80124de:	b580      	push	{r7, lr}
 80124e0:	b082      	sub	sp, #8
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	4618      	mov	r0, r3
 80124ea:	f000 fa16 	bl	801291a <_ZNKSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 80124ee:	4603      	mov	r3, r0
 80124f0:	4618      	mov	r0, r3
 80124f2:	f000 f9f8 	bl	80128e6 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_max_sizeERKS2_>
 80124f6:	4603      	mov	r3, r0
 80124f8:	4618      	mov	r0, r3
 80124fa:	3708      	adds	r7, #8
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}

08012500 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012500:	b480      	push	{r7}
 8012502:	b083      	sub	sp, #12
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	685a      	ldr	r2, [r3, #4]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	1ad3      	subs	r3, r2, r3
 8012512:	109b      	asrs	r3, r3, #2
 8012514:	4618      	mov	r0, r3
 8012516:	370c      	adds	r7, #12
 8012518:	46bd      	mov	sp, r7
 801251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251e:	4770      	bx	lr

08012520 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012520:	b580      	push	{r7, lr}
 8012522:	b082      	sub	sp, #8
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
 8012528:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801252a:	2200      	movs	r2, #0
 801252c:	6839      	ldr	r1, [r7, #0]
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f000 f9fe 	bl	8012930 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE8allocateEjPKv>
 8012534:	4603      	mov	r3, r0
 8012536:	4618      	mov	r0, r3
 8012538:	3708      	adds	r7, #8
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}

0801253e <_ZNSt6vectorIP18Compare_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801253e:	b580      	push	{r7, lr}
 8012540:	b084      	sub	sp, #16
 8012542:	af00      	add	r7, sp, #0
 8012544:	60f8      	str	r0, [r7, #12]
 8012546:	60b9      	str	r1, [r7, #8]
 8012548:	607a      	str	r2, [r7, #4]
 801254a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	687a      	ldr	r2, [r7, #4]
 8012550:	68b9      	ldr	r1, [r7, #8]
 8012552:	68f8      	ldr	r0, [r7, #12]
 8012554:	f000 fa0b 	bl	801296e <_ZSt12__relocate_aIPP18Compare_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012558:	4603      	mov	r3, r0
      }
 801255a:	4618      	mov	r0, r3
 801255c:	3710      	adds	r7, #16
 801255e:	46bd      	mov	sp, r7
 8012560:	bd80      	pop	{r7, pc}

08012562 <_ZNKSt6vectorIP14And_expressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012562:	b580      	push	{r7, lr}
 8012564:	b082      	sub	sp, #8
 8012566:	af00      	add	r7, sp, #0
 8012568:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4618      	mov	r0, r3
 801256e:	f000 fa35 	bl	80129dc <_ZNKSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8012572:	4603      	mov	r3, r0
 8012574:	4618      	mov	r0, r3
 8012576:	f000 fa17 	bl	80129a8 <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_max_sizeERKS2_>
 801257a:	4603      	mov	r3, r0
 801257c:	4618      	mov	r0, r3
 801257e:	3708      	adds	r7, #8
 8012580:	46bd      	mov	sp, r7
 8012582:	bd80      	pop	{r7, pc}

08012584 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012584:	b480      	push	{r7}
 8012586:	b083      	sub	sp, #12
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	685a      	ldr	r2, [r3, #4]
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	1ad3      	subs	r3, r2, r3
 8012596:	109b      	asrs	r3, r3, #2
 8012598:	4618      	mov	r0, r3
 801259a:	370c      	adds	r7, #12
 801259c:	46bd      	mov	sp, r7
 801259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a2:	4770      	bx	lr

080125a4 <_ZNSt16allocator_traitsISaIP14And_expressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b082      	sub	sp, #8
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
 80125ac:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80125ae:	2200      	movs	r2, #0
 80125b0:	6839      	ldr	r1, [r7, #0]
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f000 fa1d 	bl	80129f2 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE8allocateEjPKv>
 80125b8:	4603      	mov	r3, r0
 80125ba:	4618      	mov	r0, r3
 80125bc:	3708      	adds	r7, #8
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}

080125c2 <_ZNSt6vectorIP14And_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80125c2:	b580      	push	{r7, lr}
 80125c4:	b084      	sub	sp, #16
 80125c6:	af00      	add	r7, sp, #0
 80125c8:	60f8      	str	r0, [r7, #12]
 80125ca:	60b9      	str	r1, [r7, #8]
 80125cc:	607a      	str	r2, [r7, #4]
 80125ce:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	687a      	ldr	r2, [r7, #4]
 80125d4:	68b9      	ldr	r1, [r7, #8]
 80125d6:	68f8      	ldr	r0, [r7, #12]
 80125d8:	f000 fa2a 	bl	8012a30 <_ZSt12__relocate_aIPP14And_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 80125dc:	4603      	mov	r3, r0
      }
 80125de:	4618      	mov	r0, r3
 80125e0:	3710      	adds	r7, #16
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}

080125e6 <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80125e6:	b580      	push	{r7, lr}
 80125e8:	b084      	sub	sp, #16
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80125ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80125f2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f000 fa38 	bl	8012a6a <_ZNSt16allocator_traitsISaI13mult_operatorEE8max_sizeERKS1_>
 80125fa:	4603      	mov	r3, r0
 80125fc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80125fe:	f107 0208 	add.w	r2, r7, #8
 8012602:	f107 030c 	add.w	r3, r7, #12
 8012606:	4611      	mov	r1, r2
 8012608:	4618      	mov	r0, r3
 801260a:	f7fa fef4 	bl	800d3f6 <_ZSt3minIjERKT_S2_S2_>
 801260e:	4603      	mov	r3, r0
 8012610:	681b      	ldr	r3, [r3, #0]
      }
 8012612:	4618      	mov	r0, r3
 8012614:	3710      	adds	r7, #16
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}

0801261a <_ZNKSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801261a:	b480      	push	{r7}
 801261c:	b083      	sub	sp, #12
 801261e:	af00      	add	r7, sp, #0
 8012620:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	4618      	mov	r0, r3
 8012626:	370c      	adds	r7, #12
 8012628:	46bd      	mov	sp, r7
 801262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262e:	4770      	bx	lr

08012630 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012630:	b580      	push	{r7, lr}
 8012632:	b084      	sub	sp, #16
 8012634:	af00      	add	r7, sp, #0
 8012636:	60f8      	str	r0, [r7, #12]
 8012638:	60b9      	str	r1, [r7, #8]
 801263a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 801263c:	68f8      	ldr	r0, [r7, #12]
 801263e:	f000 fa20 	bl	8012a82 <_ZNK9__gnu_cxx13new_allocatorI13mult_operatorE8max_sizeEv>
 8012642:	4602      	mov	r2, r0
 8012644:	68bb      	ldr	r3, [r7, #8]
 8012646:	4293      	cmp	r3, r2
 8012648:	bf8c      	ite	hi
 801264a:	2301      	movhi	r3, #1
 801264c:	2300      	movls	r3, #0
 801264e:	b2db      	uxtb	r3, r3
 8012650:	2b00      	cmp	r3, #0
 8012652:	d001      	beq.n	8012658 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8012654:	f004 f950 	bl	80168f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012658:	68b8      	ldr	r0, [r7, #8]
 801265a:	f004 f888 	bl	801676e <_Znwj>
 801265e:	4603      	mov	r3, r0
 8012660:	bf00      	nop
      }
 8012662:	4618      	mov	r0, r3
 8012664:	3710      	adds	r7, #16
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}

0801266a <_ZSt12__relocate_aIP13mult_operatorS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 801266a:	b5b0      	push	{r4, r5, r7, lr}
 801266c:	b084      	sub	sp, #16
 801266e:	af00      	add	r7, sp, #0
 8012670:	60f8      	str	r0, [r7, #12]
 8012672:	60b9      	str	r1, [r7, #8]
 8012674:	607a      	str	r2, [r7, #4]
 8012676:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012678:	68f8      	ldr	r0, [r7, #12]
 801267a:	f000 fa0e 	bl	8012a9a <_ZSt12__niter_baseIP13mult_operatorET_S2_>
 801267e:	4604      	mov	r4, r0
 8012680:	68b8      	ldr	r0, [r7, #8]
 8012682:	f000 fa0a 	bl	8012a9a <_ZSt12__niter_baseIP13mult_operatorET_S2_>
 8012686:	4605      	mov	r5, r0
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f000 fa06 	bl	8012a9a <_ZSt12__niter_baseIP13mult_operatorET_S2_>
 801268e:	4602      	mov	r2, r0
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	4629      	mov	r1, r5
 8012694:	4620      	mov	r0, r4
 8012696:	f000 fa0b 	bl	8012ab0 <_ZSt14__relocate_a_1I13mult_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 801269a:	4603      	mov	r3, r0
    }
 801269c:	4618      	mov	r0, r3
 801269e:	3710      	adds	r7, #16
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bdb0      	pop	{r4, r5, r7, pc}

080126a4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b084      	sub	sp, #16
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80126ac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80126b0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f000 fa17 	bl	8012ae6 <_ZNSt16allocator_traitsISaIP16Power_expressionEE8max_sizeERKS2_>
 80126b8:	4603      	mov	r3, r0
 80126ba:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80126bc:	f107 0208 	add.w	r2, r7, #8
 80126c0:	f107 030c 	add.w	r3, r7, #12
 80126c4:	4611      	mov	r1, r2
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7fa fe95 	bl	800d3f6 <_ZSt3minIjERKT_S2_S2_>
 80126cc:	4603      	mov	r3, r0
 80126ce:	681b      	ldr	r3, [r3, #0]
      }
 80126d0:	4618      	mov	r0, r3
 80126d2:	3710      	adds	r7, #16
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}

080126d8 <_ZNKSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80126d8:	b480      	push	{r7}
 80126da:	b083      	sub	sp, #12
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	4618      	mov	r0, r3
 80126e4:	370c      	adds	r7, #12
 80126e6:	46bd      	mov	sp, r7
 80126e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ec:	4770      	bx	lr

080126ee <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80126ee:	b580      	push	{r7, lr}
 80126f0:	b084      	sub	sp, #16
 80126f2:	af00      	add	r7, sp, #0
 80126f4:	60f8      	str	r0, [r7, #12]
 80126f6:	60b9      	str	r1, [r7, #8]
 80126f8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80126fa:	68f8      	ldr	r0, [r7, #12]
 80126fc:	f000 f9ff 	bl	8012afe <_ZNK9__gnu_cxx13new_allocatorIP16Power_expressionE8max_sizeEv>
 8012700:	4602      	mov	r2, r0
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	4293      	cmp	r3, r2
 8012706:	bf8c      	ite	hi
 8012708:	2301      	movhi	r3, #1
 801270a:	2300      	movls	r3, #0
 801270c:	b2db      	uxtb	r3, r3
 801270e:	2b00      	cmp	r3, #0
 8012710:	d001      	beq.n	8012716 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8012712:	f004 f8f1 	bl	80168f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	009b      	lsls	r3, r3, #2
 801271a:	4618      	mov	r0, r3
 801271c:	f004 f827 	bl	801676e <_Znwj>
 8012720:	4603      	mov	r3, r0
 8012722:	bf00      	nop
      }
 8012724:	4618      	mov	r0, r3
 8012726:	3710      	adds	r7, #16
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <_ZSt12__relocate_aIPP16Power_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 801272c:	b5b0      	push	{r4, r5, r7, lr}
 801272e:	b084      	sub	sp, #16
 8012730:	af00      	add	r7, sp, #0
 8012732:	60f8      	str	r0, [r7, #12]
 8012734:	60b9      	str	r1, [r7, #8]
 8012736:	607a      	str	r2, [r7, #4]
 8012738:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 801273a:	68f8      	ldr	r0, [r7, #12]
 801273c:	f000 f9eb 	bl	8012b16 <_ZSt12__niter_baseIPP16Power_expressionET_S3_>
 8012740:	4604      	mov	r4, r0
 8012742:	68b8      	ldr	r0, [r7, #8]
 8012744:	f000 f9e7 	bl	8012b16 <_ZSt12__niter_baseIPP16Power_expressionET_S3_>
 8012748:	4605      	mov	r5, r0
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 f9e3 	bl	8012b16 <_ZSt12__niter_baseIPP16Power_expressionET_S3_>
 8012750:	4602      	mov	r2, r0
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	4629      	mov	r1, r5
 8012756:	4620      	mov	r0, r4
 8012758:	f000 f9e8 	bl	8012b2c <_ZSt14__relocate_a_1IP16Power_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 801275c:	4603      	mov	r3, r0
    }
 801275e:	4618      	mov	r0, r3
 8012760:	3710      	adds	r7, #16
 8012762:	46bd      	mov	sp, r7
 8012764:	bdb0      	pop	{r4, r5, r7, pc}

08012766 <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012766:	b580      	push	{r7, lr}
 8012768:	b084      	sub	sp, #16
 801276a:	af00      	add	r7, sp, #0
 801276c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801276e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012772:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f000 f9f7 	bl	8012b68 <_ZNSt16allocator_traitsISaI12sum_operatorEE8max_sizeERKS1_>
 801277a:	4603      	mov	r3, r0
 801277c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801277e:	f107 0208 	add.w	r2, r7, #8
 8012782:	f107 030c 	add.w	r3, r7, #12
 8012786:	4611      	mov	r1, r2
 8012788:	4618      	mov	r0, r3
 801278a:	f7fa fe34 	bl	800d3f6 <_ZSt3minIjERKT_S2_S2_>
 801278e:	4603      	mov	r3, r0
 8012790:	681b      	ldr	r3, [r3, #0]
      }
 8012792:	4618      	mov	r0, r3
 8012794:	3710      	adds	r7, #16
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}

0801279a <_ZNKSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801279a:	b480      	push	{r7}
 801279c:	b083      	sub	sp, #12
 801279e:	af00      	add	r7, sp, #0
 80127a0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	4618      	mov	r0, r3
 80127a6:	370c      	adds	r7, #12
 80127a8:	46bd      	mov	sp, r7
 80127aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ae:	4770      	bx	lr

080127b0 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b084      	sub	sp, #16
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	60f8      	str	r0, [r7, #12]
 80127b8:	60b9      	str	r1, [r7, #8]
 80127ba:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80127bc:	68f8      	ldr	r0, [r7, #12]
 80127be:	f000 f9df 	bl	8012b80 <_ZNK9__gnu_cxx13new_allocatorI12sum_operatorE8max_sizeEv>
 80127c2:	4602      	mov	r2, r0
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	4293      	cmp	r3, r2
 80127c8:	bf8c      	ite	hi
 80127ca:	2301      	movhi	r3, #1
 80127cc:	2300      	movls	r3, #0
 80127ce:	b2db      	uxtb	r3, r3
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d001      	beq.n	80127d8 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80127d4:	f004 f890 	bl	80168f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80127d8:	68b8      	ldr	r0, [r7, #8]
 80127da:	f003 ffc8 	bl	801676e <_Znwj>
 80127de:	4603      	mov	r3, r0
 80127e0:	bf00      	nop
      }
 80127e2:	4618      	mov	r0, r3
 80127e4:	3710      	adds	r7, #16
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}

080127ea <_ZSt12__relocate_aIP12sum_operatorS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80127ea:	b5b0      	push	{r4, r5, r7, lr}
 80127ec:	b084      	sub	sp, #16
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	60f8      	str	r0, [r7, #12]
 80127f2:	60b9      	str	r1, [r7, #8]
 80127f4:	607a      	str	r2, [r7, #4]
 80127f6:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80127f8:	68f8      	ldr	r0, [r7, #12]
 80127fa:	f000 f9cd 	bl	8012b98 <_ZSt12__niter_baseIP12sum_operatorET_S2_>
 80127fe:	4604      	mov	r4, r0
 8012800:	68b8      	ldr	r0, [r7, #8]
 8012802:	f000 f9c9 	bl	8012b98 <_ZSt12__niter_baseIP12sum_operatorET_S2_>
 8012806:	4605      	mov	r5, r0
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f000 f9c5 	bl	8012b98 <_ZSt12__niter_baseIP12sum_operatorET_S2_>
 801280e:	4602      	mov	r2, r0
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	4629      	mov	r1, r5
 8012814:	4620      	mov	r0, r4
 8012816:	f000 f9ca 	bl	8012bae <_ZSt14__relocate_a_1I12sum_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 801281a:	4603      	mov	r3, r0
    }
 801281c:	4618      	mov	r0, r3
 801281e:	3710      	adds	r7, #16
 8012820:	46bd      	mov	sp, r7
 8012822:	bdb0      	pop	{r4, r5, r7, pc}

08012824 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801282c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012830:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f000 f9d6 	bl	8012be4 <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE8max_sizeERKS2_>
 8012838:	4603      	mov	r3, r0
 801283a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801283c:	f107 0208 	add.w	r2, r7, #8
 8012840:	f107 030c 	add.w	r3, r7, #12
 8012844:	4611      	mov	r1, r2
 8012846:	4618      	mov	r0, r3
 8012848:	f7fa fdd5 	bl	800d3f6 <_ZSt3minIjERKT_S2_S2_>
 801284c:	4603      	mov	r3, r0
 801284e:	681b      	ldr	r3, [r3, #0]
      }
 8012850:	4618      	mov	r0, r3
 8012852:	3710      	adds	r7, #16
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <_ZNKSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012858:	b480      	push	{r7}
 801285a:	b083      	sub	sp, #12
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	4618      	mov	r0, r3
 8012864:	370c      	adds	r7, #12
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr

0801286e <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801286e:	b580      	push	{r7, lr}
 8012870:	b084      	sub	sp, #16
 8012872:	af00      	add	r7, sp, #0
 8012874:	60f8      	str	r0, [r7, #12]
 8012876:	60b9      	str	r1, [r7, #8]
 8012878:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 801287a:	68f8      	ldr	r0, [r7, #12]
 801287c:	f000 f9be 	bl	8012bfc <_ZNK9__gnu_cxx13new_allocatorIP19Multiply_expressionE8max_sizeEv>
 8012880:	4602      	mov	r2, r0
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	4293      	cmp	r3, r2
 8012886:	bf8c      	ite	hi
 8012888:	2301      	movhi	r3, #1
 801288a:	2300      	movls	r3, #0
 801288c:	b2db      	uxtb	r3, r3
 801288e:	2b00      	cmp	r3, #0
 8012890:	d001      	beq.n	8012896 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8012892:	f004 f831 	bl	80168f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	009b      	lsls	r3, r3, #2
 801289a:	4618      	mov	r0, r3
 801289c:	f003 ff67 	bl	801676e <_Znwj>
 80128a0:	4603      	mov	r3, r0
 80128a2:	bf00      	nop
      }
 80128a4:	4618      	mov	r0, r3
 80128a6:	3710      	adds	r7, #16
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}

080128ac <_ZSt12__relocate_aIPP19Multiply_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80128ac:	b5b0      	push	{r4, r5, r7, lr}
 80128ae:	b084      	sub	sp, #16
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	60f8      	str	r0, [r7, #12]
 80128b4:	60b9      	str	r1, [r7, #8]
 80128b6:	607a      	str	r2, [r7, #4]
 80128b8:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80128ba:	68f8      	ldr	r0, [r7, #12]
 80128bc:	f000 f9aa 	bl	8012c14 <_ZSt12__niter_baseIPP19Multiply_expressionET_S3_>
 80128c0:	4604      	mov	r4, r0
 80128c2:	68b8      	ldr	r0, [r7, #8]
 80128c4:	f000 f9a6 	bl	8012c14 <_ZSt12__niter_baseIPP19Multiply_expressionET_S3_>
 80128c8:	4605      	mov	r5, r0
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f000 f9a2 	bl	8012c14 <_ZSt12__niter_baseIPP19Multiply_expressionET_S3_>
 80128d0:	4602      	mov	r2, r0
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	4629      	mov	r1, r5
 80128d6:	4620      	mov	r0, r4
 80128d8:	f000 f9a7 	bl	8012c2a <_ZSt14__relocate_a_1IP19Multiply_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80128dc:	4603      	mov	r3, r0
    }
 80128de:	4618      	mov	r0, r3
 80128e0:	3710      	adds	r7, #16
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bdb0      	pop	{r4, r5, r7, pc}

080128e6 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80128e6:	b580      	push	{r7, lr}
 80128e8:	b084      	sub	sp, #16
 80128ea:	af00      	add	r7, sp, #0
 80128ec:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80128ee:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80128f2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	f000 f9b6 	bl	8012c66 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE8max_sizeERKS2_>
 80128fa:	4603      	mov	r3, r0
 80128fc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80128fe:	f107 0208 	add.w	r2, r7, #8
 8012902:	f107 030c 	add.w	r3, r7, #12
 8012906:	4611      	mov	r1, r2
 8012908:	4618      	mov	r0, r3
 801290a:	f7fa fd74 	bl	800d3f6 <_ZSt3minIjERKT_S2_S2_>
 801290e:	4603      	mov	r3, r0
 8012910:	681b      	ldr	r3, [r3, #0]
      }
 8012912:	4618      	mov	r0, r3
 8012914:	3710      	adds	r7, #16
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}

0801291a <_ZNKSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801291a:	b480      	push	{r7}
 801291c:	b083      	sub	sp, #12
 801291e:	af00      	add	r7, sp, #0
 8012920:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	4618      	mov	r0, r3
 8012926:	370c      	adds	r7, #12
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr

08012930 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012930:	b580      	push	{r7, lr}
 8012932:	b084      	sub	sp, #16
 8012934:	af00      	add	r7, sp, #0
 8012936:	60f8      	str	r0, [r7, #12]
 8012938:	60b9      	str	r1, [r7, #8]
 801293a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 801293c:	68f8      	ldr	r0, [r7, #12]
 801293e:	f000 f99e 	bl	8012c7e <_ZNK9__gnu_cxx13new_allocatorIP18Compare_expressionE8max_sizeEv>
 8012942:	4602      	mov	r2, r0
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	4293      	cmp	r3, r2
 8012948:	bf8c      	ite	hi
 801294a:	2301      	movhi	r3, #1
 801294c:	2300      	movls	r3, #0
 801294e:	b2db      	uxtb	r3, r3
 8012950:	2b00      	cmp	r3, #0
 8012952:	d001      	beq.n	8012958 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8012954:	f003 ffd0 	bl	80168f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	009b      	lsls	r3, r3, #2
 801295c:	4618      	mov	r0, r3
 801295e:	f003 ff06 	bl	801676e <_Znwj>
 8012962:	4603      	mov	r3, r0
 8012964:	bf00      	nop
      }
 8012966:	4618      	mov	r0, r3
 8012968:	3710      	adds	r7, #16
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}

0801296e <_ZSt12__relocate_aIPP18Compare_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 801296e:	b5b0      	push	{r4, r5, r7, lr}
 8012970:	b084      	sub	sp, #16
 8012972:	af00      	add	r7, sp, #0
 8012974:	60f8      	str	r0, [r7, #12]
 8012976:	60b9      	str	r1, [r7, #8]
 8012978:	607a      	str	r2, [r7, #4]
 801297a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 801297c:	68f8      	ldr	r0, [r7, #12]
 801297e:	f000 f98a 	bl	8012c96 <_ZSt12__niter_baseIPP18Compare_expressionET_S3_>
 8012982:	4604      	mov	r4, r0
 8012984:	68b8      	ldr	r0, [r7, #8]
 8012986:	f000 f986 	bl	8012c96 <_ZSt12__niter_baseIPP18Compare_expressionET_S3_>
 801298a:	4605      	mov	r5, r0
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f000 f982 	bl	8012c96 <_ZSt12__niter_baseIPP18Compare_expressionET_S3_>
 8012992:	4602      	mov	r2, r0
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	4629      	mov	r1, r5
 8012998:	4620      	mov	r0, r4
 801299a:	f000 f987 	bl	8012cac <_ZSt14__relocate_a_1IP18Compare_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 801299e:	4603      	mov	r3, r0
    }
 80129a0:	4618      	mov	r0, r3
 80129a2:	3710      	adds	r7, #16
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bdb0      	pop	{r4, r5, r7, pc}

080129a8 <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b084      	sub	sp, #16
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80129b0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80129b4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f000 f996 	bl	8012ce8 <_ZNSt16allocator_traitsISaIP14And_expressionEE8max_sizeERKS2_>
 80129bc:	4603      	mov	r3, r0
 80129be:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80129c0:	f107 0208 	add.w	r2, r7, #8
 80129c4:	f107 030c 	add.w	r3, r7, #12
 80129c8:	4611      	mov	r1, r2
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7fa fd13 	bl	800d3f6 <_ZSt3minIjERKT_S2_S2_>
 80129d0:	4603      	mov	r3, r0
 80129d2:	681b      	ldr	r3, [r3, #0]
      }
 80129d4:	4618      	mov	r0, r3
 80129d6:	3710      	adds	r7, #16
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}

080129dc <_ZNKSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80129dc:	b480      	push	{r7}
 80129de:	b083      	sub	sp, #12
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	4618      	mov	r0, r3
 80129e8:	370c      	adds	r7, #12
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr

080129f2 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80129f2:	b580      	push	{r7, lr}
 80129f4:	b084      	sub	sp, #16
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	60f8      	str	r0, [r7, #12]
 80129fa:	60b9      	str	r1, [r7, #8]
 80129fc:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80129fe:	68f8      	ldr	r0, [r7, #12]
 8012a00:	f000 f97e 	bl	8012d00 <_ZNK9__gnu_cxx13new_allocatorIP14And_expressionE8max_sizeEv>
 8012a04:	4602      	mov	r2, r0
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	4293      	cmp	r3, r2
 8012a0a:	bf8c      	ite	hi
 8012a0c:	2301      	movhi	r3, #1
 8012a0e:	2300      	movls	r3, #0
 8012a10:	b2db      	uxtb	r3, r3
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d001      	beq.n	8012a1a <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8012a16:	f003 ff6f 	bl	80168f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	009b      	lsls	r3, r3, #2
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f003 fea5 	bl	801676e <_Znwj>
 8012a24:	4603      	mov	r3, r0
 8012a26:	bf00      	nop
      }
 8012a28:	4618      	mov	r0, r3
 8012a2a:	3710      	adds	r7, #16
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}

08012a30 <_ZSt12__relocate_aIPP14And_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8012a30:	b5b0      	push	{r4, r5, r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	60f8      	str	r0, [r7, #12]
 8012a38:	60b9      	str	r1, [r7, #8]
 8012a3a:	607a      	str	r2, [r7, #4]
 8012a3c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012a3e:	68f8      	ldr	r0, [r7, #12]
 8012a40:	f000 f96a 	bl	8012d18 <_ZSt12__niter_baseIPP14And_expressionET_S3_>
 8012a44:	4604      	mov	r4, r0
 8012a46:	68b8      	ldr	r0, [r7, #8]
 8012a48:	f000 f966 	bl	8012d18 <_ZSt12__niter_baseIPP14And_expressionET_S3_>
 8012a4c:	4605      	mov	r5, r0
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f000 f962 	bl	8012d18 <_ZSt12__niter_baseIPP14And_expressionET_S3_>
 8012a54:	4602      	mov	r2, r0
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	4629      	mov	r1, r5
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	f000 f967 	bl	8012d2e <_ZSt14__relocate_a_1IP14And_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8012a60:	4603      	mov	r3, r0
    }
 8012a62:	4618      	mov	r0, r3
 8012a64:	3710      	adds	r7, #16
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bdb0      	pop	{r4, r5, r7, pc}

08012a6a <_ZNSt16allocator_traitsISaI13mult_operatorEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 8012a6a:	b580      	push	{r7, lr}
 8012a6c:	b082      	sub	sp, #8
 8012a6e:	af00      	add	r7, sp, #0
 8012a70:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f000 f805 	bl	8012a82 <_ZNK9__gnu_cxx13new_allocatorI13mult_operatorE8max_sizeEv>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	3708      	adds	r7, #8
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd80      	pop	{r7, pc}

08012a82 <_ZNK9__gnu_cxx13new_allocatorI13mult_operatorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8012a82:	b480      	push	{r7}
 8012a84:	b083      	sub	sp, #12
 8012a86:	af00      	add	r7, sp, #0
 8012a88:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8012a8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 8012a8e:	4618      	mov	r0, r3
 8012a90:	370c      	adds	r7, #12
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr

08012a9a <_ZSt12__niter_baseIP13mult_operatorET_S2_>:
    __niter_base(_Iterator __it)
 8012a9a:	b480      	push	{r7}
 8012a9c:	b083      	sub	sp, #12
 8012a9e:	af00      	add	r7, sp, #0
 8012aa0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	370c      	adds	r7, #12
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aae:	4770      	bx	lr

08012ab0 <_ZSt14__relocate_a_1I13mult_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b086      	sub	sp, #24
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	60f8      	str	r0, [r7, #12]
 8012ab8:	60b9      	str	r1, [r7, #8]
 8012aba:	607a      	str	r2, [r7, #4]
 8012abc:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8012abe:	68ba      	ldr	r2, [r7, #8]
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	1ad3      	subs	r3, r2, r3
 8012ac4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	dd05      	ble.n	8012ad8 <_ZSt14__relocate_a_1I13mult_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012acc:	697b      	ldr	r3, [r7, #20]
 8012ace:	461a      	mov	r2, r3
 8012ad0:	68f9      	ldr	r1, [r7, #12]
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f004 f9f8 	bl	8016ec8 <memmove>
      return __result + __count;
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	4413      	add	r3, r2
    }
 8012ade:	4618      	mov	r0, r3
 8012ae0:	3718      	adds	r7, #24
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd80      	pop	{r7, pc}

08012ae6 <_ZNSt16allocator_traitsISaIP16Power_expressionEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8012ae6:	b580      	push	{r7, lr}
 8012ae8:	b082      	sub	sp, #8
 8012aea:	af00      	add	r7, sp, #0
 8012aec:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f000 f805 	bl	8012afe <_ZNK9__gnu_cxx13new_allocatorIP16Power_expressionE8max_sizeEv>
 8012af4:	4603      	mov	r3, r0
 8012af6:	4618      	mov	r0, r3
 8012af8:	3708      	adds	r7, #8
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}

08012afe <_ZNK9__gnu_cxx13new_allocatorIP16Power_expressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8012afe:	b480      	push	{r7}
 8012b00:	b083      	sub	sp, #12
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8012b06:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	370c      	adds	r7, #12
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b14:	4770      	bx	lr

08012b16 <_ZSt12__niter_baseIPP16Power_expressionET_S3_>:
    __niter_base(_Iterator __it)
 8012b16:	b480      	push	{r7}
 8012b18:	b083      	sub	sp, #12
 8012b1a:	af00      	add	r7, sp, #0
 8012b1c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	4618      	mov	r0, r3
 8012b22:	370c      	adds	r7, #12
 8012b24:	46bd      	mov	sp, r7
 8012b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2a:	4770      	bx	lr

08012b2c <_ZSt14__relocate_a_1IP16Power_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b086      	sub	sp, #24
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	60f8      	str	r0, [r7, #12]
 8012b34:	60b9      	str	r1, [r7, #8]
 8012b36:	607a      	str	r2, [r7, #4]
 8012b38:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8012b3a:	68ba      	ldr	r2, [r7, #8]
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	1ad3      	subs	r3, r2, r3
 8012b40:	109b      	asrs	r3, r3, #2
 8012b42:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	dd06      	ble.n	8012b58 <_ZSt14__relocate_a_1IP16Power_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	009b      	lsls	r3, r3, #2
 8012b4e:	461a      	mov	r2, r3
 8012b50:	68f9      	ldr	r1, [r7, #12]
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f004 f9b8 	bl	8016ec8 <memmove>
      return __result + __count;
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	009b      	lsls	r3, r3, #2
 8012b5c:	687a      	ldr	r2, [r7, #4]
 8012b5e:	4413      	add	r3, r2
    }
 8012b60:	4618      	mov	r0, r3
 8012b62:	3718      	adds	r7, #24
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <_ZNSt16allocator_traitsISaI12sum_operatorEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f000 f805 	bl	8012b80 <_ZNK9__gnu_cxx13new_allocatorI12sum_operatorE8max_sizeEv>
 8012b76:	4603      	mov	r3, r0
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3708      	adds	r7, #8
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}

08012b80 <_ZNK9__gnu_cxx13new_allocatorI12sum_operatorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8012b80:	b480      	push	{r7}
 8012b82:	b083      	sub	sp, #12
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8012b88:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	370c      	adds	r7, #12
 8012b90:	46bd      	mov	sp, r7
 8012b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b96:	4770      	bx	lr

08012b98 <_ZSt12__niter_baseIP12sum_operatorET_S2_>:
    __niter_base(_Iterator __it)
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	370c      	adds	r7, #12
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr

08012bae <_ZSt14__relocate_a_1I12sum_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8012bae:	b580      	push	{r7, lr}
 8012bb0:	b086      	sub	sp, #24
 8012bb2:	af00      	add	r7, sp, #0
 8012bb4:	60f8      	str	r0, [r7, #12]
 8012bb6:	60b9      	str	r1, [r7, #8]
 8012bb8:	607a      	str	r2, [r7, #4]
 8012bba:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8012bbc:	68ba      	ldr	r2, [r7, #8]
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	1ad3      	subs	r3, r2, r3
 8012bc2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	dd05      	ble.n	8012bd6 <_ZSt14__relocate_a_1I12sum_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	461a      	mov	r2, r3
 8012bce:	68f9      	ldr	r1, [r7, #12]
 8012bd0:	6878      	ldr	r0, [r7, #4]
 8012bd2:	f004 f979 	bl	8016ec8 <memmove>
      return __result + __count;
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	4413      	add	r3, r2
    }
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3718      	adds	r7, #24
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f000 f805 	bl	8012bfc <_ZNK9__gnu_cxx13new_allocatorIP19Multiply_expressionE8max_sizeEv>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3708      	adds	r7, #8
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}

08012bfc <_ZNK9__gnu_cxx13new_allocatorIP19Multiply_expressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8012bfc:	b480      	push	{r7}
 8012bfe:	b083      	sub	sp, #12
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8012c04:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8012c08:	4618      	mov	r0, r3
 8012c0a:	370c      	adds	r7, #12
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c12:	4770      	bx	lr

08012c14 <_ZSt12__niter_baseIPP19Multiply_expressionET_S3_>:
    __niter_base(_Iterator __it)
 8012c14:	b480      	push	{r7}
 8012c16:	b083      	sub	sp, #12
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	4618      	mov	r0, r3
 8012c20:	370c      	adds	r7, #12
 8012c22:	46bd      	mov	sp, r7
 8012c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c28:	4770      	bx	lr

08012c2a <_ZSt14__relocate_a_1IP19Multiply_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8012c2a:	b580      	push	{r7, lr}
 8012c2c:	b086      	sub	sp, #24
 8012c2e:	af00      	add	r7, sp, #0
 8012c30:	60f8      	str	r0, [r7, #12]
 8012c32:	60b9      	str	r1, [r7, #8]
 8012c34:	607a      	str	r2, [r7, #4]
 8012c36:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8012c38:	68ba      	ldr	r2, [r7, #8]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	1ad3      	subs	r3, r2, r3
 8012c3e:	109b      	asrs	r3, r3, #2
 8012c40:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	dd06      	ble.n	8012c56 <_ZSt14__relocate_a_1IP19Multiply_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012c48:	697b      	ldr	r3, [r7, #20]
 8012c4a:	009b      	lsls	r3, r3, #2
 8012c4c:	461a      	mov	r2, r3
 8012c4e:	68f9      	ldr	r1, [r7, #12]
 8012c50:	6878      	ldr	r0, [r7, #4]
 8012c52:	f004 f939 	bl	8016ec8 <memmove>
      return __result + __count;
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	009b      	lsls	r3, r3, #2
 8012c5a:	687a      	ldr	r2, [r7, #4]
 8012c5c:	4413      	add	r3, r2
    }
 8012c5e:	4618      	mov	r0, r3
 8012c60:	3718      	adds	r7, #24
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}

08012c66 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8012c66:	b580      	push	{r7, lr}
 8012c68:	b082      	sub	sp, #8
 8012c6a:	af00      	add	r7, sp, #0
 8012c6c:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f000 f805 	bl	8012c7e <_ZNK9__gnu_cxx13new_allocatorIP18Compare_expressionE8max_sizeEv>
 8012c74:	4603      	mov	r3, r0
 8012c76:	4618      	mov	r0, r3
 8012c78:	3708      	adds	r7, #8
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bd80      	pop	{r7, pc}

08012c7e <_ZNK9__gnu_cxx13new_allocatorIP18Compare_expressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8012c7e:	b480      	push	{r7}
 8012c80:	b083      	sub	sp, #12
 8012c82:	af00      	add	r7, sp, #0
 8012c84:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8012c86:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	370c      	adds	r7, #12
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c94:	4770      	bx	lr

08012c96 <_ZSt12__niter_baseIPP18Compare_expressionET_S3_>:
    __niter_base(_Iterator __it)
 8012c96:	b480      	push	{r7}
 8012c98:	b083      	sub	sp, #12
 8012c9a:	af00      	add	r7, sp, #0
 8012c9c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	370c      	adds	r7, #12
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012caa:	4770      	bx	lr

08012cac <_ZSt14__relocate_a_1IP18Compare_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b086      	sub	sp, #24
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	60b9      	str	r1, [r7, #8]
 8012cb6:	607a      	str	r2, [r7, #4]
 8012cb8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8012cba:	68ba      	ldr	r2, [r7, #8]
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	1ad3      	subs	r3, r2, r3
 8012cc0:	109b      	asrs	r3, r3, #2
 8012cc2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	dd06      	ble.n	8012cd8 <_ZSt14__relocate_a_1IP18Compare_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012cca:	697b      	ldr	r3, [r7, #20]
 8012ccc:	009b      	lsls	r3, r3, #2
 8012cce:	461a      	mov	r2, r3
 8012cd0:	68f9      	ldr	r1, [r7, #12]
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f004 f8f8 	bl	8016ec8 <memmove>
      return __result + __count;
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	4413      	add	r3, r2
    }
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3718      	adds	r7, #24
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}

08012ce8 <_ZNSt16allocator_traitsISaIP14And_expressionEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b082      	sub	sp, #8
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f000 f805 	bl	8012d00 <_ZNK9__gnu_cxx13new_allocatorIP14And_expressionE8max_sizeEv>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	3708      	adds	r7, #8
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <_ZNK9__gnu_cxx13new_allocatorIP14And_expressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8012d00:	b480      	push	{r7}
 8012d02:	b083      	sub	sp, #12
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8012d08:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	370c      	adds	r7, #12
 8012d10:	46bd      	mov	sp, r7
 8012d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d16:	4770      	bx	lr

08012d18 <_ZSt12__niter_baseIPP14And_expressionET_S3_>:
    __niter_base(_Iterator __it)
 8012d18:	b480      	push	{r7}
 8012d1a:	b083      	sub	sp, #12
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	4618      	mov	r0, r3
 8012d24:	370c      	adds	r7, #12
 8012d26:	46bd      	mov	sp, r7
 8012d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2c:	4770      	bx	lr

08012d2e <_ZSt14__relocate_a_1IP14And_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8012d2e:	b580      	push	{r7, lr}
 8012d30:	b086      	sub	sp, #24
 8012d32:	af00      	add	r7, sp, #0
 8012d34:	60f8      	str	r0, [r7, #12]
 8012d36:	60b9      	str	r1, [r7, #8]
 8012d38:	607a      	str	r2, [r7, #4]
 8012d3a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8012d3c:	68ba      	ldr	r2, [r7, #8]
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	1ad3      	subs	r3, r2, r3
 8012d42:	109b      	asrs	r3, r3, #2
 8012d44:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	dd06      	ble.n	8012d5a <_ZSt14__relocate_a_1IP14And_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	009b      	lsls	r3, r3, #2
 8012d50:	461a      	mov	r2, r3
 8012d52:	68f9      	ldr	r1, [r7, #12]
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f004 f8b7 	bl	8016ec8 <memmove>
      return __result + __count;
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	009b      	lsls	r3, r3, #2
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	4413      	add	r3, r2
    }
 8012d62:	4618      	mov	r0, r3
 8012d64:	3718      	adds	r7, #24
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
	...

08012d6c <_Z41__static_initialization_and_destruction_0ii>:
 8012d6c:	b590      	push	{r4, r7, lr}
 8012d6e:	b0e7      	sub	sp, #412	; 0x19c
 8012d70:	af02      	add	r7, sp, #8
 8012d72:	1d3b      	adds	r3, r7, #4
 8012d74:	6018      	str	r0, [r3, #0]
 8012d76:	463b      	mov	r3, r7
 8012d78:	6019      	str	r1, [r3, #0]
 8012d7a:	1d3b      	adds	r3, r7, #4
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	f040 819d 	bne.w	80130be <_Z41__static_initialization_and_destruction_0ii+0x352>
 8012d84:	463b      	mov	r3, r7
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d8c:	4293      	cmp	r3, r2
 8012d8e:	f040 8196 	bne.w	80130be <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8012d92:	f107 0314 	add.w	r3, r7, #20
 8012d96:	4618      	mov	r0, r3
 8012d98:	2322      	movs	r3, #34	; 0x22
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	2100      	movs	r1, #0
 8012d9e:	f004 f8ad 	bl	8016efc <memset>
 8012da2:	f107 0314 	add.w	r3, r7, #20
 8012da6:	223a      	movs	r2, #58	; 0x3a
 8012da8:	701a      	strb	r2, [r3, #0]
 8012daa:	f107 0314 	add.w	r3, r7, #20
 8012dae:	2201      	movs	r2, #1
 8012db0:	705a      	strb	r2, [r3, #1]
 8012db2:	f107 0314 	add.w	r3, r7, #20
 8012db6:	220a      	movs	r2, #10
 8012db8:	709a      	strb	r2, [r3, #2]
 8012dba:	f107 0314 	add.w	r3, r7, #20
 8012dbe:	220a      	movs	r2, #10
 8012dc0:	70da      	strb	r2, [r3, #3]
 8012dc2:	f107 0314 	add.w	r3, r7, #20
 8012dc6:	222c      	movs	r2, #44	; 0x2c
 8012dc8:	711a      	strb	r2, [r3, #4]
 8012dca:	f107 0314 	add.w	r3, r7, #20
 8012dce:	220c      	movs	r2, #12
 8012dd0:	715a      	strb	r2, [r3, #5]
 8012dd2:	f107 0314 	add.w	r3, r7, #20
 8012dd6:	222e      	movs	r2, #46	; 0x2e
 8012dd8:	719a      	strb	r2, [r3, #6]
 8012dda:	f107 0314 	add.w	r3, r7, #20
 8012dde:	220b      	movs	r2, #11
 8012de0:	71da      	strb	r2, [r3, #7]
 8012de2:	f107 0314 	add.w	r3, r7, #20
 8012de6:	225b      	movs	r2, #91	; 0x5b
 8012de8:	721a      	strb	r2, [r3, #8]
 8012dea:	f107 0314 	add.w	r3, r7, #20
 8012dee:	220d      	movs	r2, #13
 8012df0:	725a      	strb	r2, [r3, #9]
 8012df2:	f107 0314 	add.w	r3, r7, #20
 8012df6:	225d      	movs	r2, #93	; 0x5d
 8012df8:	729a      	strb	r2, [r3, #10]
 8012dfa:	f107 0314 	add.w	r3, r7, #20
 8012dfe:	220e      	movs	r2, #14
 8012e00:	72da      	strb	r2, [r3, #11]
 8012e02:	f107 0314 	add.w	r3, r7, #20
 8012e06:	227c      	movs	r2, #124	; 0x7c
 8012e08:	731a      	strb	r2, [r3, #12]
 8012e0a:	f107 0314 	add.w	r3, r7, #20
 8012e0e:	2215      	movs	r2, #21
 8012e10:	735a      	strb	r2, [r3, #13]
 8012e12:	f107 0314 	add.w	r3, r7, #20
 8012e16:	2226      	movs	r2, #38	; 0x26
 8012e18:	739a      	strb	r2, [r3, #14]
 8012e1a:	f107 0314 	add.w	r3, r7, #20
 8012e1e:	2216      	movs	r2, #22
 8012e20:	73da      	strb	r2, [r3, #15]
 8012e22:	f107 0314 	add.w	r3, r7, #20
 8012e26:	222b      	movs	r2, #43	; 0x2b
 8012e28:	741a      	strb	r2, [r3, #16]
 8012e2a:	f107 0314 	add.w	r3, r7, #20
 8012e2e:	221f      	movs	r2, #31
 8012e30:	745a      	strb	r2, [r3, #17]
 8012e32:	f107 0314 	add.w	r3, r7, #20
 8012e36:	222d      	movs	r2, #45	; 0x2d
 8012e38:	749a      	strb	r2, [r3, #18]
 8012e3a:	f107 0314 	add.w	r3, r7, #20
 8012e3e:	2220      	movs	r2, #32
 8012e40:	74da      	strb	r2, [r3, #19]
 8012e42:	f107 0314 	add.w	r3, r7, #20
 8012e46:	222a      	movs	r2, #42	; 0x2a
 8012e48:	751a      	strb	r2, [r3, #20]
 8012e4a:	f107 0314 	add.w	r3, r7, #20
 8012e4e:	2221      	movs	r2, #33	; 0x21
 8012e50:	755a      	strb	r2, [r3, #21]
 8012e52:	f107 0314 	add.w	r3, r7, #20
 8012e56:	222f      	movs	r2, #47	; 0x2f
 8012e58:	759a      	strb	r2, [r3, #22]
 8012e5a:	f107 0314 	add.w	r3, r7, #20
 8012e5e:	2222      	movs	r2, #34	; 0x22
 8012e60:	75da      	strb	r2, [r3, #23]
 8012e62:	f107 0314 	add.w	r3, r7, #20
 8012e66:	225e      	movs	r2, #94	; 0x5e
 8012e68:	761a      	strb	r2, [r3, #24]
 8012e6a:	f107 0314 	add.w	r3, r7, #20
 8012e6e:	2223      	movs	r2, #35	; 0x23
 8012e70:	765a      	strb	r2, [r3, #25]
 8012e72:	f107 0314 	add.w	r3, r7, #20
 8012e76:	2225      	movs	r2, #37	; 0x25
 8012e78:	769a      	strb	r2, [r3, #26]
 8012e7a:	f107 0314 	add.w	r3, r7, #20
 8012e7e:	2224      	movs	r2, #36	; 0x24
 8012e80:	76da      	strb	r2, [r3, #27]
 8012e82:	f107 0314 	add.w	r3, r7, #20
 8012e86:	2228      	movs	r2, #40	; 0x28
 8012e88:	771a      	strb	r2, [r3, #28]
 8012e8a:	f107 0314 	add.w	r3, r7, #20
 8012e8e:	2226      	movs	r2, #38	; 0x26
 8012e90:	775a      	strb	r2, [r3, #29]
 8012e92:	f107 0314 	add.w	r3, r7, #20
 8012e96:	2229      	movs	r2, #41	; 0x29
 8012e98:	779a      	strb	r2, [r3, #30]
 8012e9a:	f107 0314 	add.w	r3, r7, #20
 8012e9e:	2227      	movs	r2, #39	; 0x27
 8012ea0:	77da      	strb	r2, [r3, #31]
 8012ea2:	f107 0314 	add.w	r3, r7, #20
 8012ea6:	2225      	movs	r2, #37	; 0x25
 8012ea8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8012eac:	f107 030c 	add.w	r3, r7, #12
 8012eb0:	f107 0214 	add.w	r2, r7, #20
 8012eb4:	601a      	str	r2, [r3, #0]
 8012eb6:	f107 030c 	add.w	r3, r7, #12
 8012eba:	2211      	movs	r2, #17
 8012ebc:	605a      	str	r2, [r3, #4]
 8012ebe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7ee fc13 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8012ec8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8012ecc:	f107 020c 	add.w	r2, r7, #12
 8012ed0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012ed4:	9300      	str	r3, [sp, #0]
 8012ed6:	460b      	mov	r3, r1
 8012ed8:	ca06      	ldmia	r2, {r1, r2}
 8012eda:	4885      	ldr	r0, [pc, #532]	; (80130f0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8012edc:	f7ee fc1f 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8012ee0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f7ee fc0e 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8012eea:	2305      	movs	r3, #5
 8012eec:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8012ef0:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8012ef4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012ef8:	497e      	ldr	r1, [pc, #504]	; (80130f4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7ee f8d4 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8012f00:	2306      	movs	r3, #6
 8012f02:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8012f06:	f207 1263 	addw	r2, r7, #355	; 0x163
 8012f0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012f0e:	331c      	adds	r3, #28
 8012f10:	4979      	ldr	r1, [pc, #484]	; (80130f8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8012f12:	4618      	mov	r0, r3
 8012f14:	f7ee f8f0 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8012f18:	2307      	movs	r3, #7
 8012f1a:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8012f1e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8012f22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012f26:	3338      	adds	r3, #56	; 0x38
 8012f28:	4974      	ldr	r1, [pc, #464]	; (80130fc <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7ee f8e4 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8012f30:	2308      	movs	r3, #8
 8012f32:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8012f36:	f207 1265 	addw	r2, r7, #357	; 0x165
 8012f3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012f3e:	3354      	adds	r3, #84	; 0x54
 8012f40:	496f      	ldr	r1, [pc, #444]	; (8013100 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7ee f8b0 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8012f48:	2309      	movs	r3, #9
 8012f4a:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8012f4e:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8012f52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012f56:	3370      	adds	r3, #112	; 0x70
 8012f58:	496a      	ldr	r1, [pc, #424]	; (8013104 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7ee f8f4 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8012f60:	2310      	movs	r3, #16
 8012f62:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8012f66:	f207 1267 	addw	r2, r7, #359	; 0x167
 8012f6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012f6e:	338c      	adds	r3, #140	; 0x8c
 8012f70:	4965      	ldr	r1, [pc, #404]	; (8013108 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7ee f910 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8012f78:	2311      	movs	r3, #17
 8012f7a:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8012f7e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8012f82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012f86:	33a8      	adds	r3, #168	; 0xa8
 8012f88:	4960      	ldr	r1, [pc, #384]	; (801310c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7ee f8dc 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8012f90:	2312      	movs	r3, #18
 8012f92:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8012f96:	f207 1269 	addw	r2, r7, #361	; 0x169
 8012f9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012f9e:	33c4      	adds	r3, #196	; 0xc4
 8012fa0:	495b      	ldr	r1, [pc, #364]	; (8013110 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7ee f880 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8012fa8:	2313      	movs	r3, #19
 8012faa:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8012fae:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8012fb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012fb6:	33e0      	adds	r3, #224	; 0xe0
 8012fb8:	4956      	ldr	r1, [pc, #344]	; (8013114 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f7ee f89c 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8012fc0:	2314      	movs	r3, #20
 8012fc2:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8012fc6:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8012fca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012fce:	33fc      	adds	r3, #252	; 0xfc
 8012fd0:	4951      	ldr	r1, [pc, #324]	; (8013118 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7ee f908 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8012fd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012fdc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012fe0:	601a      	str	r2, [r3, #0]
 8012fe2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012fe6:	220a      	movs	r2, #10
 8012fe8:	605a      	str	r2, [r3, #4]
 8012fea:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f7ee fc22 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8012ff4:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8012ff8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012ffc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013000:	9300      	str	r3, [sp, #0]
 8013002:	460b      	mov	r3, r1
 8013004:	ca06      	ldmia	r2, {r1, r2}
 8013006:	4845      	ldr	r0, [pc, #276]	; (801311c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8013008:	f7ee fc2e 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 801300c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013010:	4618      	mov	r0, r3
 8013012:	f7ee fc1d 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8013016:	f107 0448 	add.w	r4, r7, #72	; 0x48
 801301a:	f504 748c 	add.w	r4, r4, #280	; 0x118
 801301e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013022:	429c      	cmp	r4, r3
 8013024:	d004      	beq.n	8013030 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8013026:	3c1c      	subs	r4, #28
 8013028:	4620      	mov	r0, r4
 801302a:	f7ee f830 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 801302e:	e7f6      	b.n	801301e <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8013030:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013034:	2200      	movs	r2, #0
 8013036:	601a      	str	r2, [r3, #0]
 8013038:	605a      	str	r2, [r3, #4]
 801303a:	609a      	str	r2, [r3, #8]
 801303c:	233c      	movs	r3, #60	; 0x3c
 801303e:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8013042:	231b      	movs	r3, #27
 8013044:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8013048:	231c      	movs	r3, #28
 801304a:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 801304e:	233e      	movs	r3, #62	; 0x3e
 8013050:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8013054:	2319      	movs	r3, #25
 8013056:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 801305a:	231a      	movs	r3, #26
 801305c:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8013060:	233d      	movs	r3, #61	; 0x3d
 8013062:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8013066:	2318      	movs	r3, #24
 8013068:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 801306c:	231d      	movs	r3, #29
 801306e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8013072:	2321      	movs	r3, #33	; 0x21
 8013074:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8013078:	2317      	movs	r3, #23
 801307a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 801307e:	231e      	movs	r3, #30
 8013080:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8013084:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013088:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801308c:	2304      	movs	r3, #4
 801308e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8013092:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8013096:	4618      	mov	r0, r3
 8013098:	f7ee fc16 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 801309c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80130a0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80130a4:	9300      	str	r3, [sp, #0]
 80130a6:	4613      	mov	r3, r2
 80130a8:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 80130ac:	ca06      	ldmia	r2, {r1, r2}
 80130ae:	481c      	ldr	r0, [pc, #112]	; (8013120 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80130b0:	f7ee fc22 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80130b4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7ee fc11 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 80130be:	1d3b      	adds	r3, r7, #4
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d10e      	bne.n	80130e4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80130c6:	463b      	mov	r3, r7
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130ce:	4293      	cmp	r3, r2
 80130d0:	d108      	bne.n	80130e4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80130d2:	4813      	ldr	r0, [pc, #76]	; (8013120 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80130d4:	f7f2 ff40 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 80130d8:	4810      	ldr	r0, [pc, #64]	; (801311c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80130da:	f7f2 ff4a 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 80130de:	4804      	ldr	r0, [pc, #16]	; (80130f0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80130e0:	f7f2 ff54 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80130e4:	bf00      	nop
 80130e6:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd90      	pop	{r4, r7, pc}
 80130ee:	bf00      	nop
 80130f0:	20000368 	.word	0x20000368
 80130f4:	0801a2ec 	.word	0x0801a2ec
 80130f8:	0801a2f4 	.word	0x0801a2f4
 80130fc:	0801a2fc 	.word	0x0801a2fc
 8013100:	0801a304 	.word	0x0801a304
 8013104:	0801a30c 	.word	0x0801a30c
 8013108:	0801a314 	.word	0x0801a314
 801310c:	0801a318 	.word	0x0801a318
 8013110:	0801a320 	.word	0x0801a320
 8013114:	0801a328 	.word	0x0801a328
 8013118:	0801a330 	.word	0x0801a330
 801311c:	20000380 	.word	0x20000380
 8013120:	20000398 	.word	0x20000398

08013124 <_GLOBAL__sub_I__ZN6Parser31parse_variable_or_function_callEP17Primal_expression>:
 8013124:	b580      	push	{r7, lr}
 8013126:	af00      	add	r7, sp, #0
 8013128:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801312c:	2001      	movs	r0, #1
 801312e:	f7ff fe1d 	bl	8012d6c <_Z41__static_initialization_and_destruction_0ii>
 8013132:	bd80      	pop	{r7, pc}

08013134 <_GLOBAL__sub_D__ZN6Parser31parse_variable_or_function_callEP17Primal_expression>:
 8013134:	b580      	push	{r7, lr}
 8013136:	af00      	add	r7, sp, #0
 8013138:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801313c:	2000      	movs	r0, #0
 801313e:	f7ff fe15 	bl	8012d6c <_Z41__static_initialization_and_destruction_0ii>
 8013142:	bd80      	pop	{r7, pc}

08013144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013148:	f000 feb3 	bl	8013eb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801314c:	f000 f80a 	bl	8013164 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8013150:	f000 f8e0 	bl	8013314 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8013154:	f000 f8aa 	bl	80132ac <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  my_main_run(&huart1);
 8013158:	4801      	ldr	r0, [pc, #4]	; (8013160 <main+0x1c>)
 801315a:	f000 fae5 	bl	8013728 <_Z11my_main_runP20__UART_HandleTypeDef>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 801315e:	e7fe      	b.n	801315e <main+0x1a>
 8013160:	200003f8 	.word	0x200003f8

08013164 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b0b4      	sub	sp, #208	; 0xd0
 8013168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801316a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801316e:	2230      	movs	r2, #48	; 0x30
 8013170:	2100      	movs	r1, #0
 8013172:	4618      	mov	r0, r3
 8013174:	f003 fec2 	bl	8016efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013178:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801317c:	2200      	movs	r2, #0
 801317e:	601a      	str	r2, [r3, #0]
 8013180:	605a      	str	r2, [r3, #4]
 8013182:	609a      	str	r2, [r3, #8]
 8013184:	60da      	str	r2, [r3, #12]
 8013186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013188:	f107 0308 	add.w	r3, r7, #8
 801318c:	2284      	movs	r2, #132	; 0x84
 801318e:	2100      	movs	r1, #0
 8013190:	4618      	mov	r0, r3
 8013192:	f003 feb3 	bl	8016efc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8013196:	4b43      	ldr	r3, [pc, #268]	; (80132a4 <_Z18SystemClock_Configv+0x140>)
 8013198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801319a:	4a42      	ldr	r2, [pc, #264]	; (80132a4 <_Z18SystemClock_Configv+0x140>)
 801319c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80131a0:	6413      	str	r3, [r2, #64]	; 0x40
 80131a2:	4b40      	ldr	r3, [pc, #256]	; (80132a4 <_Z18SystemClock_Configv+0x140>)
 80131a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80131aa:	607b      	str	r3, [r7, #4]
 80131ac:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80131ae:	4b3e      	ldr	r3, [pc, #248]	; (80132a8 <_Z18SystemClock_Configv+0x144>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	4a3d      	ldr	r2, [pc, #244]	; (80132a8 <_Z18SystemClock_Configv+0x144>)
 80131b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80131b8:	6013      	str	r3, [r2, #0]
 80131ba:	4b3b      	ldr	r3, [pc, #236]	; (80132a8 <_Z18SystemClock_Configv+0x144>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80131c2:	603b      	str	r3, [r7, #0]
 80131c4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80131c6:	2302      	movs	r3, #2
 80131c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80131cc:	2301      	movs	r3, #1
 80131ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80131d2:	2310      	movs	r3, #16
 80131d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80131d8:	2302      	movs	r3, #2
 80131da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80131de:	2300      	movs	r3, #0
 80131e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80131e4:	2308      	movs	r3, #8
 80131e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80131ea:	23d8      	movs	r3, #216	; 0xd8
 80131ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80131f0:	2302      	movs	r3, #2
 80131f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80131f6:	2302      	movs	r3, #2
 80131f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80131fc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013200:	4618      	mov	r0, r3
 8013202:	f001 fa77 	bl	80146f4 <HAL_RCC_OscConfig>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	bf14      	ite	ne
 801320c:	2301      	movne	r3, #1
 801320e:	2300      	moveq	r3, #0
 8013210:	b2db      	uxtb	r3, r3
 8013212:	2b00      	cmp	r3, #0
 8013214:	d001      	beq.n	801321a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8013216:	f000 f895 	bl	8013344 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 801321a:	f001 fa1b 	bl	8014654 <HAL_PWREx_EnableOverDrive>
 801321e:	4603      	mov	r3, r0
 8013220:	2b00      	cmp	r3, #0
 8013222:	bf14      	ite	ne
 8013224:	2301      	movne	r3, #1
 8013226:	2300      	moveq	r3, #0
 8013228:	b2db      	uxtb	r3, r3
 801322a:	2b00      	cmp	r3, #0
 801322c:	d001      	beq.n	8013232 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 801322e:	f000 f889 	bl	8013344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013232:	230f      	movs	r3, #15
 8013234:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013238:	2302      	movs	r3, #2
 801323a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801323e:	2300      	movs	r3, #0
 8013240:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013244:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801324c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8013254:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013258:	2107      	movs	r1, #7
 801325a:	4618      	mov	r0, r3
 801325c:	f001 fcee 	bl	8014c3c <HAL_RCC_ClockConfig>
 8013260:	4603      	mov	r3, r0
 8013262:	2b00      	cmp	r3, #0
 8013264:	bf14      	ite	ne
 8013266:	2301      	movne	r3, #1
 8013268:	2300      	moveq	r3, #0
 801326a:	b2db      	uxtb	r3, r3
 801326c:	2b00      	cmp	r3, #0
 801326e:	d001      	beq.n	8013274 <_Z18SystemClock_Configv+0x110>
  {
    Error_Handler();
 8013270:	f000 f868 	bl	8013344 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8013274:	2340      	movs	r3, #64	; 0x40
 8013276:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8013278:	2300      	movs	r3, #0
 801327a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801327c:	f107 0308 	add.w	r3, r7, #8
 8013280:	4618      	mov	r0, r3
 8013282:	f001 feb1 	bl	8014fe8 <HAL_RCCEx_PeriphCLKConfig>
 8013286:	4603      	mov	r3, r0
 8013288:	2b00      	cmp	r3, #0
 801328a:	bf14      	ite	ne
 801328c:	2301      	movne	r3, #1
 801328e:	2300      	moveq	r3, #0
 8013290:	b2db      	uxtb	r3, r3
 8013292:	2b00      	cmp	r3, #0
 8013294:	d001      	beq.n	801329a <_Z18SystemClock_Configv+0x136>
  {
    Error_Handler();
 8013296:	f000 f855 	bl	8013344 <Error_Handler>
  }
}
 801329a:	bf00      	nop
 801329c:	37d0      	adds	r7, #208	; 0xd0
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}
 80132a2:	bf00      	nop
 80132a4:	40023800 	.word	0x40023800
 80132a8:	40007000 	.word	0x40007000

080132ac <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80132b0:	4b16      	ldr	r3, [pc, #88]	; (801330c <_ZL19MX_USART1_UART_Initv+0x60>)
 80132b2:	4a17      	ldr	r2, [pc, #92]	; (8013310 <_ZL19MX_USART1_UART_Initv+0x64>)
 80132b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80132b6:	4b15      	ldr	r3, [pc, #84]	; (801330c <_ZL19MX_USART1_UART_Initv+0x60>)
 80132b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80132bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80132be:	4b13      	ldr	r3, [pc, #76]	; (801330c <_ZL19MX_USART1_UART_Initv+0x60>)
 80132c0:	2200      	movs	r2, #0
 80132c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80132c4:	4b11      	ldr	r3, [pc, #68]	; (801330c <_ZL19MX_USART1_UART_Initv+0x60>)
 80132c6:	2200      	movs	r2, #0
 80132c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80132ca:	4b10      	ldr	r3, [pc, #64]	; (801330c <_ZL19MX_USART1_UART_Initv+0x60>)
 80132cc:	2200      	movs	r2, #0
 80132ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80132d0:	4b0e      	ldr	r3, [pc, #56]	; (801330c <_ZL19MX_USART1_UART_Initv+0x60>)
 80132d2:	220c      	movs	r2, #12
 80132d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80132d6:	4b0d      	ldr	r3, [pc, #52]	; (801330c <_ZL19MX_USART1_UART_Initv+0x60>)
 80132d8:	2200      	movs	r2, #0
 80132da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80132dc:	4b0b      	ldr	r3, [pc, #44]	; (801330c <_ZL19MX_USART1_UART_Initv+0x60>)
 80132de:	2200      	movs	r2, #0
 80132e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80132e2:	4b0a      	ldr	r3, [pc, #40]	; (801330c <_ZL19MX_USART1_UART_Initv+0x60>)
 80132e4:	2200      	movs	r2, #0
 80132e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80132e8:	4b08      	ldr	r3, [pc, #32]	; (801330c <_ZL19MX_USART1_UART_Initv+0x60>)
 80132ea:	2200      	movs	r2, #0
 80132ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80132ee:	4807      	ldr	r0, [pc, #28]	; (801330c <_ZL19MX_USART1_UART_Initv+0x60>)
 80132f0:	f002 fa6a 	bl	80157c8 <HAL_UART_Init>
 80132f4:	4603      	mov	r3, r0
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	bf14      	ite	ne
 80132fa:	2301      	movne	r3, #1
 80132fc:	2300      	moveq	r3, #0
 80132fe:	b2db      	uxtb	r3, r3
 8013300:	2b00      	cmp	r3, #0
 8013302:	d001      	beq.n	8013308 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8013304:	f000 f81e 	bl	8013344 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8013308:	bf00      	nop
 801330a:	bd80      	pop	{r7, pc}
 801330c:	200003f8 	.word	0x200003f8
 8013310:	40011000 	.word	0x40011000

08013314 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8013314:	b480      	push	{r7}
 8013316:	b083      	sub	sp, #12
 8013318:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801331a:	4b09      	ldr	r3, [pc, #36]	; (8013340 <_ZL12MX_GPIO_Initv+0x2c>)
 801331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801331e:	4a08      	ldr	r2, [pc, #32]	; (8013340 <_ZL12MX_GPIO_Initv+0x2c>)
 8013320:	f043 0301 	orr.w	r3, r3, #1
 8013324:	6313      	str	r3, [r2, #48]	; 0x30
 8013326:	4b06      	ldr	r3, [pc, #24]	; (8013340 <_ZL12MX_GPIO_Initv+0x2c>)
 8013328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801332a:	f003 0301 	and.w	r3, r3, #1
 801332e:	607b      	str	r3, [r7, #4]
 8013330:	687b      	ldr	r3, [r7, #4]

}
 8013332:	bf00      	nop
 8013334:	370c      	adds	r7, #12
 8013336:	46bd      	mov	sp, r7
 8013338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333c:	4770      	bx	lr
 801333e:	bf00      	nop
 8013340:	40023800 	.word	0x40023800

08013344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013344:	b480      	push	{r7}
 8013346:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8013348:	b672      	cpsid	i
}
 801334a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801334c:	e7fe      	b.n	801334c <Error_Handler+0x8>
	...

08013350 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8013350:	b590      	push	{r4, r7, lr}
 8013352:	b0e7      	sub	sp, #412	; 0x19c
 8013354:	af02      	add	r7, sp, #8
 8013356:	1d3b      	adds	r3, r7, #4
 8013358:	6018      	str	r0, [r3, #0]
 801335a:	463b      	mov	r3, r7
 801335c:	6019      	str	r1, [r3, #0]
 801335e:	1d3b      	adds	r3, r7, #4
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	2b01      	cmp	r3, #1
 8013364:	f040 819d 	bne.w	80136a2 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8013368:	463b      	mov	r3, r7
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013370:	4293      	cmp	r3, r2
 8013372:	f040 8196 	bne.w	80136a2 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8013376:	f107 0314 	add.w	r3, r7, #20
 801337a:	4618      	mov	r0, r3
 801337c:	2322      	movs	r3, #34	; 0x22
 801337e:	461a      	mov	r2, r3
 8013380:	2100      	movs	r1, #0
 8013382:	f003 fdbb 	bl	8016efc <memset>
 8013386:	f107 0314 	add.w	r3, r7, #20
 801338a:	223a      	movs	r2, #58	; 0x3a
 801338c:	701a      	strb	r2, [r3, #0]
 801338e:	f107 0314 	add.w	r3, r7, #20
 8013392:	2201      	movs	r2, #1
 8013394:	705a      	strb	r2, [r3, #1]
 8013396:	f107 0314 	add.w	r3, r7, #20
 801339a:	220a      	movs	r2, #10
 801339c:	709a      	strb	r2, [r3, #2]
 801339e:	f107 0314 	add.w	r3, r7, #20
 80133a2:	220a      	movs	r2, #10
 80133a4:	70da      	strb	r2, [r3, #3]
 80133a6:	f107 0314 	add.w	r3, r7, #20
 80133aa:	222c      	movs	r2, #44	; 0x2c
 80133ac:	711a      	strb	r2, [r3, #4]
 80133ae:	f107 0314 	add.w	r3, r7, #20
 80133b2:	220c      	movs	r2, #12
 80133b4:	715a      	strb	r2, [r3, #5]
 80133b6:	f107 0314 	add.w	r3, r7, #20
 80133ba:	222e      	movs	r2, #46	; 0x2e
 80133bc:	719a      	strb	r2, [r3, #6]
 80133be:	f107 0314 	add.w	r3, r7, #20
 80133c2:	220b      	movs	r2, #11
 80133c4:	71da      	strb	r2, [r3, #7]
 80133c6:	f107 0314 	add.w	r3, r7, #20
 80133ca:	225b      	movs	r2, #91	; 0x5b
 80133cc:	721a      	strb	r2, [r3, #8]
 80133ce:	f107 0314 	add.w	r3, r7, #20
 80133d2:	220d      	movs	r2, #13
 80133d4:	725a      	strb	r2, [r3, #9]
 80133d6:	f107 0314 	add.w	r3, r7, #20
 80133da:	225d      	movs	r2, #93	; 0x5d
 80133dc:	729a      	strb	r2, [r3, #10]
 80133de:	f107 0314 	add.w	r3, r7, #20
 80133e2:	220e      	movs	r2, #14
 80133e4:	72da      	strb	r2, [r3, #11]
 80133e6:	f107 0314 	add.w	r3, r7, #20
 80133ea:	227c      	movs	r2, #124	; 0x7c
 80133ec:	731a      	strb	r2, [r3, #12]
 80133ee:	f107 0314 	add.w	r3, r7, #20
 80133f2:	2215      	movs	r2, #21
 80133f4:	735a      	strb	r2, [r3, #13]
 80133f6:	f107 0314 	add.w	r3, r7, #20
 80133fa:	2226      	movs	r2, #38	; 0x26
 80133fc:	739a      	strb	r2, [r3, #14]
 80133fe:	f107 0314 	add.w	r3, r7, #20
 8013402:	2216      	movs	r2, #22
 8013404:	73da      	strb	r2, [r3, #15]
 8013406:	f107 0314 	add.w	r3, r7, #20
 801340a:	222b      	movs	r2, #43	; 0x2b
 801340c:	741a      	strb	r2, [r3, #16]
 801340e:	f107 0314 	add.w	r3, r7, #20
 8013412:	221f      	movs	r2, #31
 8013414:	745a      	strb	r2, [r3, #17]
 8013416:	f107 0314 	add.w	r3, r7, #20
 801341a:	222d      	movs	r2, #45	; 0x2d
 801341c:	749a      	strb	r2, [r3, #18]
 801341e:	f107 0314 	add.w	r3, r7, #20
 8013422:	2220      	movs	r2, #32
 8013424:	74da      	strb	r2, [r3, #19]
 8013426:	f107 0314 	add.w	r3, r7, #20
 801342a:	222a      	movs	r2, #42	; 0x2a
 801342c:	751a      	strb	r2, [r3, #20]
 801342e:	f107 0314 	add.w	r3, r7, #20
 8013432:	2221      	movs	r2, #33	; 0x21
 8013434:	755a      	strb	r2, [r3, #21]
 8013436:	f107 0314 	add.w	r3, r7, #20
 801343a:	222f      	movs	r2, #47	; 0x2f
 801343c:	759a      	strb	r2, [r3, #22]
 801343e:	f107 0314 	add.w	r3, r7, #20
 8013442:	2222      	movs	r2, #34	; 0x22
 8013444:	75da      	strb	r2, [r3, #23]
 8013446:	f107 0314 	add.w	r3, r7, #20
 801344a:	225e      	movs	r2, #94	; 0x5e
 801344c:	761a      	strb	r2, [r3, #24]
 801344e:	f107 0314 	add.w	r3, r7, #20
 8013452:	2223      	movs	r2, #35	; 0x23
 8013454:	765a      	strb	r2, [r3, #25]
 8013456:	f107 0314 	add.w	r3, r7, #20
 801345a:	2225      	movs	r2, #37	; 0x25
 801345c:	769a      	strb	r2, [r3, #26]
 801345e:	f107 0314 	add.w	r3, r7, #20
 8013462:	2224      	movs	r2, #36	; 0x24
 8013464:	76da      	strb	r2, [r3, #27]
 8013466:	f107 0314 	add.w	r3, r7, #20
 801346a:	2228      	movs	r2, #40	; 0x28
 801346c:	771a      	strb	r2, [r3, #28]
 801346e:	f107 0314 	add.w	r3, r7, #20
 8013472:	2226      	movs	r2, #38	; 0x26
 8013474:	775a      	strb	r2, [r3, #29]
 8013476:	f107 0314 	add.w	r3, r7, #20
 801347a:	2229      	movs	r2, #41	; 0x29
 801347c:	779a      	strb	r2, [r3, #30]
 801347e:	f107 0314 	add.w	r3, r7, #20
 8013482:	2227      	movs	r2, #39	; 0x27
 8013484:	77da      	strb	r2, [r3, #31]
 8013486:	f107 0314 	add.w	r3, r7, #20
 801348a:	2225      	movs	r2, #37	; 0x25
 801348c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8013490:	f107 030c 	add.w	r3, r7, #12
 8013494:	f107 0214 	add.w	r2, r7, #20
 8013498:	601a      	str	r2, [r3, #0]
 801349a:	f107 030c 	add.w	r3, r7, #12
 801349e:	2211      	movs	r2, #17
 80134a0:	605a      	str	r2, [r3, #4]
 80134a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80134a6:	4618      	mov	r0, r3
 80134a8:	f7ee f921 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 80134ac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80134b0:	f107 020c 	add.w	r2, r7, #12
 80134b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80134b8:	9300      	str	r3, [sp, #0]
 80134ba:	460b      	mov	r3, r1
 80134bc:	ca06      	ldmia	r2, {r1, r2}
 80134be:	4885      	ldr	r0, [pc, #532]	; (80136d4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80134c0:	f7ee f92d 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80134c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7ee f91c 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 80134ce:	2305      	movs	r3, #5
 80134d0:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80134d4:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80134d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134dc:	497e      	ldr	r1, [pc, #504]	; (80136d8 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80134de:	4618      	mov	r0, r3
 80134e0:	f7ed fde2 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80134e4:	2306      	movs	r3, #6
 80134e6:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80134ea:	f207 1263 	addw	r2, r7, #355	; 0x163
 80134ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134f2:	331c      	adds	r3, #28
 80134f4:	4979      	ldr	r1, [pc, #484]	; (80136dc <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7ed fdfe 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80134fc:	2307      	movs	r3, #7
 80134fe:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8013502:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8013506:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801350a:	3338      	adds	r3, #56	; 0x38
 801350c:	4974      	ldr	r1, [pc, #464]	; (80136e0 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 801350e:	4618      	mov	r0, r3
 8013510:	f7ed fdf2 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8013514:	2308      	movs	r3, #8
 8013516:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 801351a:	f207 1265 	addw	r2, r7, #357	; 0x165
 801351e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013522:	3354      	adds	r3, #84	; 0x54
 8013524:	496f      	ldr	r1, [pc, #444]	; (80136e4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8013526:	4618      	mov	r0, r3
 8013528:	f7ed fdbe 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 801352c:	2309      	movs	r3, #9
 801352e:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8013532:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8013536:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801353a:	3370      	adds	r3, #112	; 0x70
 801353c:	496a      	ldr	r1, [pc, #424]	; (80136e8 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 801353e:	4618      	mov	r0, r3
 8013540:	f7ed fe02 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8013544:	2310      	movs	r3, #16
 8013546:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 801354a:	f207 1267 	addw	r2, r7, #359	; 0x167
 801354e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013552:	338c      	adds	r3, #140	; 0x8c
 8013554:	4965      	ldr	r1, [pc, #404]	; (80136ec <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013556:	4618      	mov	r0, r3
 8013558:	f7ed fe1e 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 801355c:	2311      	movs	r3, #17
 801355e:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8013562:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8013566:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801356a:	33a8      	adds	r3, #168	; 0xa8
 801356c:	4960      	ldr	r1, [pc, #384]	; (80136f0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 801356e:	4618      	mov	r0, r3
 8013570:	f7ed fdea 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8013574:	2312      	movs	r3, #18
 8013576:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 801357a:	f207 1269 	addw	r2, r7, #361	; 0x169
 801357e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013582:	33c4      	adds	r3, #196	; 0xc4
 8013584:	495b      	ldr	r1, [pc, #364]	; (80136f4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8013586:	4618      	mov	r0, r3
 8013588:	f7ed fd8e 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 801358c:	2313      	movs	r3, #19
 801358e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8013592:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8013596:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801359a:	33e0      	adds	r3, #224	; 0xe0
 801359c:	4956      	ldr	r1, [pc, #344]	; (80136f8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 801359e:	4618      	mov	r0, r3
 80135a0:	f7ed fdaa 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 80135a4:	2314      	movs	r3, #20
 80135a6:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 80135aa:	f207 126b 	addw	r2, r7, #363	; 0x16b
 80135ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80135b2:	33fc      	adds	r3, #252	; 0xfc
 80135b4:	4951      	ldr	r1, [pc, #324]	; (80136fc <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7ed fe16 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 80135bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80135c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80135c4:	601a      	str	r2, [r3, #0]
 80135c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80135ca:	220a      	movs	r2, #10
 80135cc:	605a      	str	r2, [r3, #4]
 80135ce:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7ee f930 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80135d8:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80135dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80135e0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80135e4:	9300      	str	r3, [sp, #0]
 80135e6:	460b      	mov	r3, r1
 80135e8:	ca06      	ldmia	r2, {r1, r2}
 80135ea:	4845      	ldr	r0, [pc, #276]	; (8013700 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80135ec:	f7ee f93c 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80135f0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7ee f92b 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80135fa:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80135fe:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8013602:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013606:	429c      	cmp	r4, r3
 8013608:	d004      	beq.n	8013614 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 801360a:	3c1c      	subs	r4, #28
 801360c:	4620      	mov	r0, r4
 801360e:	f7ed fd3e 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8013612:	e7f6      	b.n	8013602 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8013614:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013618:	2200      	movs	r2, #0
 801361a:	601a      	str	r2, [r3, #0]
 801361c:	605a      	str	r2, [r3, #4]
 801361e:	609a      	str	r2, [r3, #8]
 8013620:	233c      	movs	r3, #60	; 0x3c
 8013622:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8013626:	231b      	movs	r3, #27
 8013628:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 801362c:	231c      	movs	r3, #28
 801362e:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8013632:	233e      	movs	r3, #62	; 0x3e
 8013634:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8013638:	2319      	movs	r3, #25
 801363a:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 801363e:	231a      	movs	r3, #26
 8013640:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8013644:	233d      	movs	r3, #61	; 0x3d
 8013646:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 801364a:	2318      	movs	r3, #24
 801364c:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8013650:	231d      	movs	r3, #29
 8013652:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8013656:	2321      	movs	r3, #33	; 0x21
 8013658:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 801365c:	2317      	movs	r3, #23
 801365e:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8013662:	231e      	movs	r3, #30
 8013664:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8013668:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801366c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8013670:	2304      	movs	r3, #4
 8013672:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8013676:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801367a:	4618      	mov	r0, r3
 801367c:	f7ee f924 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8013680:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8013684:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8013688:	9300      	str	r3, [sp, #0]
 801368a:	4613      	mov	r3, r2
 801368c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8013690:	ca06      	ldmia	r2, {r1, r2}
 8013692:	481c      	ldr	r0, [pc, #112]	; (8013704 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013694:	f7ee f930 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8013698:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801369c:	4618      	mov	r0, r3
 801369e:	f7ee f91f 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 80136a2:	1d3b      	adds	r3, r7, #4
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d10e      	bne.n	80136c8 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80136aa:	463b      	mov	r3, r7
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136b2:	4293      	cmp	r3, r2
 80136b4:	d108      	bne.n	80136c8 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80136b6:	4813      	ldr	r0, [pc, #76]	; (8013704 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80136b8:	f7f2 fc4e 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 80136bc:	4810      	ldr	r0, [pc, #64]	; (8013700 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80136be:	f7f2 fc58 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 80136c2:	4804      	ldr	r0, [pc, #16]	; (80136d4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80136c4:	f7f2 fc62 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80136c8:	bf00      	nop
 80136ca:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd90      	pop	{r4, r7, pc}
 80136d2:	bf00      	nop
 80136d4:	200003b0 	.word	0x200003b0
 80136d8:	0801a360 	.word	0x0801a360
 80136dc:	0801a368 	.word	0x0801a368
 80136e0:	0801a370 	.word	0x0801a370
 80136e4:	0801a378 	.word	0x0801a378
 80136e8:	0801a380 	.word	0x0801a380
 80136ec:	0801a388 	.word	0x0801a388
 80136f0:	0801a38c 	.word	0x0801a38c
 80136f4:	0801a394 	.word	0x0801a394
 80136f8:	0801a39c 	.word	0x0801a39c
 80136fc:	0801a3a4 	.word	0x0801a3a4
 8013700:	200003c8 	.word	0x200003c8
 8013704:	200003e0 	.word	0x200003e0

08013708 <_GLOBAL__sub_I_huart1>:
 8013708:	b580      	push	{r7, lr}
 801370a:	af00      	add	r7, sp, #0
 801370c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013710:	2001      	movs	r0, #1
 8013712:	f7ff fe1d 	bl	8013350 <_Z41__static_initialization_and_destruction_0ii>
 8013716:	bd80      	pop	{r7, pc}

08013718 <_GLOBAL__sub_D_huart1>:
 8013718:	b580      	push	{r7, lr}
 801371a:	af00      	add	r7, sp, #0
 801371c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013720:	2000      	movs	r0, #0
 8013722:	f7ff fe15 	bl	8013350 <_Z41__static_initialization_and_destruction_0ii>
 8013726:	bd80      	pop	{r7, pc}

08013728 <_Z11my_main_runP20__UART_HandleTypeDef>:
#include "my_main.h"

// main function called after setup from CUBEMX
void my_main_run(UART_HandleTypeDef* huart)
{
 8013728:	b590      	push	{r4, r7, lr}
 801372a:	b0a3      	sub	sp, #140	; 0x8c
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
	Source Com(huart);
 8013730:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013734:	6879      	ldr	r1, [r7, #4]
 8013736:	4618      	mov	r0, r3
 8013738:	f7fa fcbe 	bl	800e0b8 <_ZN6SourceC1EP20__UART_HandleTypeDef>
	Transmitter Trans(huart);
 801373c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013740:	6879      	ldr	r1, [r7, #4]
 8013742:	4618      	mov	r0, r3
 8013744:	f7fb fd7a 	bl	800f23c <_ZN11TransmitterC1EP20__UART_HandleTypeDef>
	Lexer Lex(&Com);
 8013748:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801374c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013750:	4611      	mov	r1, r2
 8013752:	4618      	mov	r0, r3
 8013754:	f7f2 feb1 	bl	80064ba <_ZN5LexerC1EP6Source>
	Parser Par(&Lex, &Trans);
 8013758:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801375c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8013760:	f107 030c 	add.w	r3, r7, #12
 8013764:	4618      	mov	r0, r3
 8013766:	f7f5 ffcb 	bl	8009700 <_ZN6ParserC1EP5LexerP11Transmitter>

	Program* P = Par.parse_program();
 801376a:	f107 030c 	add.w	r3, r7, #12
 801376e:	4618      	mov	r0, r3
 8013770:	f7f6 ffa6 	bl	800a6c0 <_ZN6Parser13parse_programEv>
 8013774:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	delete P;
 8013778:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 801377c:	2c00      	cmp	r4, #0
 801377e:	d006      	beq.n	801378e <_Z11my_main_runP20__UART_HandleTypeDef+0x66>
 8013780:	4620      	mov	r0, r4
 8013782:	f7f5 ffd3 	bl	800972c <_ZN7ProgramD1Ev>
 8013786:	210c      	movs	r1, #12
 8013788:	4620      	mov	r0, r4
 801378a:	f002 ffee 	bl	801676a <_ZdlPvj>

	for(;;)
 801378e:	e7fe      	b.n	801378e <_Z11my_main_runP20__UART_HandleTypeDef+0x66>

08013790 <_Z41__static_initialization_and_destruction_0ii>:
	{

	}
}
 8013790:	b590      	push	{r4, r7, lr}
 8013792:	b0e7      	sub	sp, #412	; 0x19c
 8013794:	af02      	add	r7, sp, #8
 8013796:	1d3b      	adds	r3, r7, #4
 8013798:	6018      	str	r0, [r3, #0]
 801379a:	463b      	mov	r3, r7
 801379c:	6019      	str	r1, [r3, #0]
 801379e:	1d3b      	adds	r3, r7, #4
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	2b01      	cmp	r3, #1
 80137a4:	f040 819d 	bne.w	8013ae2 <_Z41__static_initialization_and_destruction_0ii+0x352>
 80137a8:	463b      	mov	r3, r7
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80137b0:	4293      	cmp	r3, r2
 80137b2:	f040 8196 	bne.w	8013ae2 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 80137b6:	f107 0314 	add.w	r3, r7, #20
 80137ba:	4618      	mov	r0, r3
 80137bc:	2322      	movs	r3, #34	; 0x22
 80137be:	461a      	mov	r2, r3
 80137c0:	2100      	movs	r1, #0
 80137c2:	f003 fb9b 	bl	8016efc <memset>
 80137c6:	f107 0314 	add.w	r3, r7, #20
 80137ca:	223a      	movs	r2, #58	; 0x3a
 80137cc:	701a      	strb	r2, [r3, #0]
 80137ce:	f107 0314 	add.w	r3, r7, #20
 80137d2:	2201      	movs	r2, #1
 80137d4:	705a      	strb	r2, [r3, #1]
 80137d6:	f107 0314 	add.w	r3, r7, #20
 80137da:	220a      	movs	r2, #10
 80137dc:	709a      	strb	r2, [r3, #2]
 80137de:	f107 0314 	add.w	r3, r7, #20
 80137e2:	220a      	movs	r2, #10
 80137e4:	70da      	strb	r2, [r3, #3]
 80137e6:	f107 0314 	add.w	r3, r7, #20
 80137ea:	222c      	movs	r2, #44	; 0x2c
 80137ec:	711a      	strb	r2, [r3, #4]
 80137ee:	f107 0314 	add.w	r3, r7, #20
 80137f2:	220c      	movs	r2, #12
 80137f4:	715a      	strb	r2, [r3, #5]
 80137f6:	f107 0314 	add.w	r3, r7, #20
 80137fa:	222e      	movs	r2, #46	; 0x2e
 80137fc:	719a      	strb	r2, [r3, #6]
 80137fe:	f107 0314 	add.w	r3, r7, #20
 8013802:	220b      	movs	r2, #11
 8013804:	71da      	strb	r2, [r3, #7]
 8013806:	f107 0314 	add.w	r3, r7, #20
 801380a:	225b      	movs	r2, #91	; 0x5b
 801380c:	721a      	strb	r2, [r3, #8]
 801380e:	f107 0314 	add.w	r3, r7, #20
 8013812:	220d      	movs	r2, #13
 8013814:	725a      	strb	r2, [r3, #9]
 8013816:	f107 0314 	add.w	r3, r7, #20
 801381a:	225d      	movs	r2, #93	; 0x5d
 801381c:	729a      	strb	r2, [r3, #10]
 801381e:	f107 0314 	add.w	r3, r7, #20
 8013822:	220e      	movs	r2, #14
 8013824:	72da      	strb	r2, [r3, #11]
 8013826:	f107 0314 	add.w	r3, r7, #20
 801382a:	227c      	movs	r2, #124	; 0x7c
 801382c:	731a      	strb	r2, [r3, #12]
 801382e:	f107 0314 	add.w	r3, r7, #20
 8013832:	2215      	movs	r2, #21
 8013834:	735a      	strb	r2, [r3, #13]
 8013836:	f107 0314 	add.w	r3, r7, #20
 801383a:	2226      	movs	r2, #38	; 0x26
 801383c:	739a      	strb	r2, [r3, #14]
 801383e:	f107 0314 	add.w	r3, r7, #20
 8013842:	2216      	movs	r2, #22
 8013844:	73da      	strb	r2, [r3, #15]
 8013846:	f107 0314 	add.w	r3, r7, #20
 801384a:	222b      	movs	r2, #43	; 0x2b
 801384c:	741a      	strb	r2, [r3, #16]
 801384e:	f107 0314 	add.w	r3, r7, #20
 8013852:	221f      	movs	r2, #31
 8013854:	745a      	strb	r2, [r3, #17]
 8013856:	f107 0314 	add.w	r3, r7, #20
 801385a:	222d      	movs	r2, #45	; 0x2d
 801385c:	749a      	strb	r2, [r3, #18]
 801385e:	f107 0314 	add.w	r3, r7, #20
 8013862:	2220      	movs	r2, #32
 8013864:	74da      	strb	r2, [r3, #19]
 8013866:	f107 0314 	add.w	r3, r7, #20
 801386a:	222a      	movs	r2, #42	; 0x2a
 801386c:	751a      	strb	r2, [r3, #20]
 801386e:	f107 0314 	add.w	r3, r7, #20
 8013872:	2221      	movs	r2, #33	; 0x21
 8013874:	755a      	strb	r2, [r3, #21]
 8013876:	f107 0314 	add.w	r3, r7, #20
 801387a:	222f      	movs	r2, #47	; 0x2f
 801387c:	759a      	strb	r2, [r3, #22]
 801387e:	f107 0314 	add.w	r3, r7, #20
 8013882:	2222      	movs	r2, #34	; 0x22
 8013884:	75da      	strb	r2, [r3, #23]
 8013886:	f107 0314 	add.w	r3, r7, #20
 801388a:	225e      	movs	r2, #94	; 0x5e
 801388c:	761a      	strb	r2, [r3, #24]
 801388e:	f107 0314 	add.w	r3, r7, #20
 8013892:	2223      	movs	r2, #35	; 0x23
 8013894:	765a      	strb	r2, [r3, #25]
 8013896:	f107 0314 	add.w	r3, r7, #20
 801389a:	2225      	movs	r2, #37	; 0x25
 801389c:	769a      	strb	r2, [r3, #26]
 801389e:	f107 0314 	add.w	r3, r7, #20
 80138a2:	2224      	movs	r2, #36	; 0x24
 80138a4:	76da      	strb	r2, [r3, #27]
 80138a6:	f107 0314 	add.w	r3, r7, #20
 80138aa:	2228      	movs	r2, #40	; 0x28
 80138ac:	771a      	strb	r2, [r3, #28]
 80138ae:	f107 0314 	add.w	r3, r7, #20
 80138b2:	2226      	movs	r2, #38	; 0x26
 80138b4:	775a      	strb	r2, [r3, #29]
 80138b6:	f107 0314 	add.w	r3, r7, #20
 80138ba:	2229      	movs	r2, #41	; 0x29
 80138bc:	779a      	strb	r2, [r3, #30]
 80138be:	f107 0314 	add.w	r3, r7, #20
 80138c2:	2227      	movs	r2, #39	; 0x27
 80138c4:	77da      	strb	r2, [r3, #31]
 80138c6:	f107 0314 	add.w	r3, r7, #20
 80138ca:	2225      	movs	r2, #37	; 0x25
 80138cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80138d0:	f107 030c 	add.w	r3, r7, #12
 80138d4:	f107 0214 	add.w	r2, r7, #20
 80138d8:	601a      	str	r2, [r3, #0]
 80138da:	f107 030c 	add.w	r3, r7, #12
 80138de:	2211      	movs	r2, #17
 80138e0:	605a      	str	r2, [r3, #4]
 80138e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80138e6:	4618      	mov	r0, r3
 80138e8:	f7ed ff01 	bl	80016ee <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 80138ec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80138f0:	f107 020c 	add.w	r2, r7, #12
 80138f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80138f8:	9300      	str	r3, [sp, #0]
 80138fa:	460b      	mov	r3, r1
 80138fc:	ca06      	ldmia	r2, {r1, r2}
 80138fe:	4885      	ldr	r0, [pc, #532]	; (8013b14 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8013900:	f7ed ff0d 	bl	800171e <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8013904:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013908:	4618      	mov	r0, r3
 801390a:	f7ed fefc 	bl	8001706 <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 801390e:	2305      	movs	r3, #5
 8013910:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8013914:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8013918:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801391c:	497e      	ldr	r1, [pc, #504]	; (8013b18 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 801391e:	4618      	mov	r0, r3
 8013920:	f7ed fbc2 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8013924:	2306      	movs	r3, #6
 8013926:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 801392a:	f207 1263 	addw	r2, r7, #355	; 0x163
 801392e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013932:	331c      	adds	r3, #28
 8013934:	4979      	ldr	r1, [pc, #484]	; (8013b1c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8013936:	4618      	mov	r0, r3
 8013938:	f7ed fbde 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 801393c:	2307      	movs	r3, #7
 801393e:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8013942:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8013946:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801394a:	3338      	adds	r3, #56	; 0x38
 801394c:	4974      	ldr	r1, [pc, #464]	; (8013b20 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 801394e:	4618      	mov	r0, r3
 8013950:	f7ed fbd2 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8013954:	2308      	movs	r3, #8
 8013956:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 801395a:	f207 1265 	addw	r2, r7, #357	; 0x165
 801395e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013962:	3354      	adds	r3, #84	; 0x54
 8013964:	496f      	ldr	r1, [pc, #444]	; (8013b24 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8013966:	4618      	mov	r0, r3
 8013968:	f7ed fb9e 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 801396c:	2309      	movs	r3, #9
 801396e:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8013972:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8013976:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801397a:	3370      	adds	r3, #112	; 0x70
 801397c:	496a      	ldr	r1, [pc, #424]	; (8013b28 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 801397e:	4618      	mov	r0, r3
 8013980:	f7ed fbe2 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8013984:	2310      	movs	r3, #16
 8013986:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 801398a:	f207 1267 	addw	r2, r7, #359	; 0x167
 801398e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013992:	338c      	adds	r3, #140	; 0x8c
 8013994:	4965      	ldr	r1, [pc, #404]	; (8013b2c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013996:	4618      	mov	r0, r3
 8013998:	f7ed fbfe 	bl	8001198 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 801399c:	2311      	movs	r3, #17
 801399e:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 80139a2:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80139a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139aa:	33a8      	adds	r3, #168	; 0xa8
 80139ac:	4960      	ldr	r1, [pc, #384]	; (8013b30 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7ed fbca 	bl	8001148 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 80139b4:	2312      	movs	r3, #18
 80139b6:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 80139ba:	f207 1269 	addw	r2, r7, #361	; 0x169
 80139be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139c2:	33c4      	adds	r3, #196	; 0xc4
 80139c4:	495b      	ldr	r1, [pc, #364]	; (8013b34 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7ed fb6e 	bl	80010a8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 80139cc:	2313      	movs	r3, #19
 80139ce:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 80139d2:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 80139d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139da:	33e0      	adds	r3, #224	; 0xe0
 80139dc:	4956      	ldr	r1, [pc, #344]	; (8013b38 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 80139de:	4618      	mov	r0, r3
 80139e0:	f7ed fb8a 	bl	80010f8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 80139e4:	2314      	movs	r3, #20
 80139e6:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 80139ea:	f207 126b 	addw	r2, r7, #363	; 0x16b
 80139ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139f2:	33fc      	adds	r3, #252	; 0xfc
 80139f4:	4951      	ldr	r1, [pc, #324]	; (8013b3c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7ed fbf6 	bl	80011e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 80139fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013a00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8013a04:	601a      	str	r2, [r3, #0]
 8013a06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013a0a:	220a      	movs	r2, #10
 8013a0c:	605a      	str	r2, [r3, #4]
 8013a0e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7ed ff10 	bl	8001838 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8013a18:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8013a1c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013a20:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013a24:	9300      	str	r3, [sp, #0]
 8013a26:	460b      	mov	r3, r1
 8013a28:	ca06      	ldmia	r2, {r1, r2}
 8013a2a:	4845      	ldr	r0, [pc, #276]	; (8013b40 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8013a2c:	f7ed ff1c 	bl	8001868 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8013a30:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013a34:	4618      	mov	r0, r3
 8013a36:	f7ed ff0b 	bl	8001850 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8013a3a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8013a3e:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8013a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a46:	429c      	cmp	r4, r3
 8013a48:	d004      	beq.n	8013a54 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8013a4a:	3c1c      	subs	r4, #28
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	f7ed fb1e 	bl	800108e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8013a52:	e7f6      	b.n	8013a42 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8013a54:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013a58:	2200      	movs	r2, #0
 8013a5a:	601a      	str	r2, [r3, #0]
 8013a5c:	605a      	str	r2, [r3, #4]
 8013a5e:	609a      	str	r2, [r3, #8]
 8013a60:	233c      	movs	r3, #60	; 0x3c
 8013a62:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8013a66:	231b      	movs	r3, #27
 8013a68:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8013a6c:	231c      	movs	r3, #28
 8013a6e:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8013a72:	233e      	movs	r3, #62	; 0x3e
 8013a74:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8013a78:	2319      	movs	r3, #25
 8013a7a:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8013a7e:	231a      	movs	r3, #26
 8013a80:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8013a84:	233d      	movs	r3, #61	; 0x3d
 8013a86:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8013a8a:	2318      	movs	r3, #24
 8013a8c:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8013a90:	231d      	movs	r3, #29
 8013a92:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8013a96:	2321      	movs	r3, #33	; 0x21
 8013a98:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8013a9c:	2317      	movs	r3, #23
 8013a9e:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8013aa2:	231e      	movs	r3, #30
 8013aa4:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8013aa8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013aac:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8013ab0:	2304      	movs	r3, #4
 8013ab2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8013ab6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7ed ff04 	bl	80018c8 <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8013ac0:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8013ac4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8013ac8:	9300      	str	r3, [sp, #0]
 8013aca:	4613      	mov	r3, r2
 8013acc:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8013ad0:	ca06      	ldmia	r2, {r1, r2}
 8013ad2:	481c      	ldr	r0, [pc, #112]	; (8013b44 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013ad4:	f7ed ff10 	bl	80018f8 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8013ad8:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7ed feff 	bl	80018e0 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8013ae2:	1d3b      	adds	r3, r7, #4
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d10e      	bne.n	8013b08 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8013aea:	463b      	mov	r3, r7
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013af2:	4293      	cmp	r3, r2
 8013af4:	d108      	bne.n	8013b08 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8013af6:	4813      	ldr	r0, [pc, #76]	; (8013b44 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013af8:	f7f2 fa2e 	bl	8005f58 <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8013afc:	4810      	ldr	r0, [pc, #64]	; (8013b40 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8013afe:	f7f2 fa38 	bl	8005f72 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8013b02:	4804      	ldr	r0, [pc, #16]	; (8013b14 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8013b04:	f7f2 fa42 	bl	8005f8c <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8013b08:	bf00      	nop
 8013b0a:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd90      	pop	{r4, r7, pc}
 8013b12:	bf00      	nop
 8013b14:	2000047c 	.word	0x2000047c
 8013b18:	0801a3d4 	.word	0x0801a3d4
 8013b1c:	0801a3dc 	.word	0x0801a3dc
 8013b20:	0801a3e4 	.word	0x0801a3e4
 8013b24:	0801a3ec 	.word	0x0801a3ec
 8013b28:	0801a3f4 	.word	0x0801a3f4
 8013b2c:	0801a3fc 	.word	0x0801a3fc
 8013b30:	0801a400 	.word	0x0801a400
 8013b34:	0801a408 	.word	0x0801a408
 8013b38:	0801a410 	.word	0x0801a410
 8013b3c:	0801a418 	.word	0x0801a418
 8013b40:	20000494 	.word	0x20000494
 8013b44:	200004ac 	.word	0x200004ac

08013b48 <_GLOBAL__sub_I__Z11my_main_runP20__UART_HandleTypeDef>:
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	af00      	add	r7, sp, #0
 8013b4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013b50:	2001      	movs	r0, #1
 8013b52:	f7ff fe1d 	bl	8013790 <_Z41__static_initialization_and_destruction_0ii>
 8013b56:	bd80      	pop	{r7, pc}

08013b58 <_GLOBAL__sub_D__Z11my_main_runP20__UART_HandleTypeDef>:
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	af00      	add	r7, sp, #0
 8013b5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013b60:	2000      	movs	r0, #0
 8013b62:	f7ff fe15 	bl	8013790 <_Z41__static_initialization_and_destruction_0ii>
 8013b66:	bd80      	pop	{r7, pc}

08013b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b083      	sub	sp, #12
 8013b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8013b6e:	4b0f      	ldr	r3, [pc, #60]	; (8013bac <HAL_MspInit+0x44>)
 8013b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b72:	4a0e      	ldr	r2, [pc, #56]	; (8013bac <HAL_MspInit+0x44>)
 8013b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013b78:	6413      	str	r3, [r2, #64]	; 0x40
 8013b7a:	4b0c      	ldr	r3, [pc, #48]	; (8013bac <HAL_MspInit+0x44>)
 8013b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013b82:	607b      	str	r3, [r7, #4]
 8013b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013b86:	4b09      	ldr	r3, [pc, #36]	; (8013bac <HAL_MspInit+0x44>)
 8013b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b8a:	4a08      	ldr	r2, [pc, #32]	; (8013bac <HAL_MspInit+0x44>)
 8013b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013b90:	6453      	str	r3, [r2, #68]	; 0x44
 8013b92:	4b06      	ldr	r3, [pc, #24]	; (8013bac <HAL_MspInit+0x44>)
 8013b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013b9a:	603b      	str	r3, [r7, #0]
 8013b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013b9e:	bf00      	nop
 8013ba0:	370c      	adds	r7, #12
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba8:	4770      	bx	lr
 8013baa:	bf00      	nop
 8013bac:	40023800 	.word	0x40023800

08013bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b08a      	sub	sp, #40	; 0x28
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013bb8:	f107 0314 	add.w	r3, r7, #20
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	601a      	str	r2, [r3, #0]
 8013bc0:	605a      	str	r2, [r3, #4]
 8013bc2:	609a      	str	r2, [r3, #8]
 8013bc4:	60da      	str	r2, [r3, #12]
 8013bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	4a1b      	ldr	r2, [pc, #108]	; (8013c3c <HAL_UART_MspInit+0x8c>)
 8013bce:	4293      	cmp	r3, r2
 8013bd0:	d130      	bne.n	8013c34 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8013bd2:	4b1b      	ldr	r3, [pc, #108]	; (8013c40 <HAL_UART_MspInit+0x90>)
 8013bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bd6:	4a1a      	ldr	r2, [pc, #104]	; (8013c40 <HAL_UART_MspInit+0x90>)
 8013bd8:	f043 0310 	orr.w	r3, r3, #16
 8013bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8013bde:	4b18      	ldr	r3, [pc, #96]	; (8013c40 <HAL_UART_MspInit+0x90>)
 8013be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013be2:	f003 0310 	and.w	r3, r3, #16
 8013be6:	613b      	str	r3, [r7, #16]
 8013be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013bea:	4b15      	ldr	r3, [pc, #84]	; (8013c40 <HAL_UART_MspInit+0x90>)
 8013bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bee:	4a14      	ldr	r2, [pc, #80]	; (8013c40 <HAL_UART_MspInit+0x90>)
 8013bf0:	f043 0301 	orr.w	r3, r3, #1
 8013bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8013bf6:	4b12      	ldr	r3, [pc, #72]	; (8013c40 <HAL_UART_MspInit+0x90>)
 8013bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bfa:	f003 0301 	and.w	r3, r3, #1
 8013bfe:	60fb      	str	r3, [r7, #12]
 8013c00:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8013c02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8013c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c08:	2302      	movs	r3, #2
 8013c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c10:	2303      	movs	r3, #3
 8013c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8013c14:	2307      	movs	r3, #7
 8013c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013c18:	f107 0314 	add.w	r3, r7, #20
 8013c1c:	4619      	mov	r1, r3
 8013c1e:	4809      	ldr	r0, [pc, #36]	; (8013c44 <HAL_UART_MspInit+0x94>)
 8013c20:	f000 fb6c 	bl	80142fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013c24:	2200      	movs	r2, #0
 8013c26:	2100      	movs	r1, #0
 8013c28:	2025      	movs	r0, #37	; 0x25
 8013c2a:	f000 fa9e 	bl	801416a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013c2e:	2025      	movs	r0, #37	; 0x25
 8013c30:	f000 fab7 	bl	80141a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8013c34:	bf00      	nop
 8013c36:	3728      	adds	r7, #40	; 0x28
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}
 8013c3c:	40011000 	.word	0x40011000
 8013c40:	40023800 	.word	0x40023800
 8013c44:	40020000 	.word	0x40020000

08013c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8013c48:	b480      	push	{r7}
 8013c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8013c4c:	e7fe      	b.n	8013c4c <NMI_Handler+0x4>

08013c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013c4e:	b480      	push	{r7}
 8013c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013c52:	e7fe      	b.n	8013c52 <HardFault_Handler+0x4>

08013c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8013c54:	b480      	push	{r7}
 8013c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8013c58:	e7fe      	b.n	8013c58 <MemManage_Handler+0x4>

08013c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8013c5a:	b480      	push	{r7}
 8013c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8013c5e:	e7fe      	b.n	8013c5e <BusFault_Handler+0x4>

08013c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8013c60:	b480      	push	{r7}
 8013c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8013c64:	e7fe      	b.n	8013c64 <UsageFault_Handler+0x4>

08013c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8013c66:	b480      	push	{r7}
 8013c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8013c6a:	bf00      	nop
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr

08013c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8013c74:	b480      	push	{r7}
 8013c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8013c78:	bf00      	nop
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c80:	4770      	bx	lr

08013c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8013c82:	b480      	push	{r7}
 8013c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8013c86:	bf00      	nop
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8e:	4770      	bx	lr

08013c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8013c94:	f000 f94a 	bl	8013f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8013c98:	bf00      	nop
 8013c9a:	bd80      	pop	{r7, pc}

08013c9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8013ca0:	4802      	ldr	r0, [pc, #8]	; (8013cac <USART1_IRQHandler+0x10>)
 8013ca2:	f001 ff43 	bl	8015b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8013ca6:	bf00      	nop
 8013ca8:	bd80      	pop	{r7, pc}
 8013caa:	bf00      	nop
 8013cac:	200003f8 	.word	0x200003f8

08013cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013cb0:	b480      	push	{r7}
 8013cb2:	af00      	add	r7, sp, #0
	return 1;
 8013cb4:	2301      	movs	r3, #1
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbe:	4770      	bx	lr

08013cc0 <_kill>:

int _kill(int pid, int sig)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b082      	sub	sp, #8
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
 8013cc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8013cca:	f003 f875 	bl	8016db8 <__errno>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	2216      	movs	r2, #22
 8013cd2:	601a      	str	r2, [r3, #0]
	return -1;
 8013cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	3708      	adds	r7, #8
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}

08013ce0 <_exit>:

void _exit (int status)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8013ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8013cec:	6878      	ldr	r0, [r7, #4]
 8013cee:	f7ff ffe7 	bl	8013cc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8013cf2:	e7fe      	b.n	8013cf2 <_exit+0x12>

08013cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b086      	sub	sp, #24
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	60f8      	str	r0, [r7, #12]
 8013cfc:	60b9      	str	r1, [r7, #8]
 8013cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013d00:	2300      	movs	r3, #0
 8013d02:	617b      	str	r3, [r7, #20]
 8013d04:	e00a      	b.n	8013d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8013d06:	f3af 8000 	nop.w
 8013d0a:	4601      	mov	r1, r0
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	1c5a      	adds	r2, r3, #1
 8013d10:	60ba      	str	r2, [r7, #8]
 8013d12:	b2ca      	uxtb	r2, r1
 8013d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013d16:	697b      	ldr	r3, [r7, #20]
 8013d18:	3301      	adds	r3, #1
 8013d1a:	617b      	str	r3, [r7, #20]
 8013d1c:	697a      	ldr	r2, [r7, #20]
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	429a      	cmp	r2, r3
 8013d22:	dbf0      	blt.n	8013d06 <_read+0x12>
	}

return len;
 8013d24:	687b      	ldr	r3, [r7, #4]
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	3718      	adds	r7, #24
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}

08013d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8013d2e:	b580      	push	{r7, lr}
 8013d30:	b086      	sub	sp, #24
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	60f8      	str	r0, [r7, #12]
 8013d36:	60b9      	str	r1, [r7, #8]
 8013d38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	617b      	str	r3, [r7, #20]
 8013d3e:	e009      	b.n	8013d54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8013d40:	68bb      	ldr	r3, [r7, #8]
 8013d42:	1c5a      	adds	r2, r3, #1
 8013d44:	60ba      	str	r2, [r7, #8]
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	3301      	adds	r3, #1
 8013d52:	617b      	str	r3, [r7, #20]
 8013d54:	697a      	ldr	r2, [r7, #20]
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	429a      	cmp	r2, r3
 8013d5a:	dbf1      	blt.n	8013d40 <_write+0x12>
	}
	return len;
 8013d5c:	687b      	ldr	r3, [r7, #4]
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3718      	adds	r7, #24
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}

08013d66 <_close>:

int _close(int file)
{
 8013d66:	b480      	push	{r7}
 8013d68:	b083      	sub	sp, #12
 8013d6a:	af00      	add	r7, sp, #0
 8013d6c:	6078      	str	r0, [r7, #4]
	return -1;
 8013d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	370c      	adds	r7, #12
 8013d76:	46bd      	mov	sp, r7
 8013d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7c:	4770      	bx	lr

08013d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8013d7e:	b480      	push	{r7}
 8013d80:	b083      	sub	sp, #12
 8013d82:	af00      	add	r7, sp, #0
 8013d84:	6078      	str	r0, [r7, #4]
 8013d86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013d8e:	605a      	str	r2, [r3, #4]
	return 0;
 8013d90:	2300      	movs	r3, #0
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	370c      	adds	r7, #12
 8013d96:	46bd      	mov	sp, r7
 8013d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9c:	4770      	bx	lr

08013d9e <_isatty>:

int _isatty(int file)
{
 8013d9e:	b480      	push	{r7}
 8013da0:	b083      	sub	sp, #12
 8013da2:	af00      	add	r7, sp, #0
 8013da4:	6078      	str	r0, [r7, #4]
	return 1;
 8013da6:	2301      	movs	r3, #1
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	370c      	adds	r7, #12
 8013dac:	46bd      	mov	sp, r7
 8013dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db2:	4770      	bx	lr

08013db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013db4:	b480      	push	{r7}
 8013db6:	b085      	sub	sp, #20
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	60f8      	str	r0, [r7, #12]
 8013dbc:	60b9      	str	r1, [r7, #8]
 8013dbe:	607a      	str	r2, [r7, #4]
	return 0;
 8013dc0:	2300      	movs	r3, #0
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3714      	adds	r7, #20
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dcc:	4770      	bx	lr
	...

08013dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b086      	sub	sp, #24
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013dd8:	4a14      	ldr	r2, [pc, #80]	; (8013e2c <_sbrk+0x5c>)
 8013dda:	4b15      	ldr	r3, [pc, #84]	; (8013e30 <_sbrk+0x60>)
 8013ddc:	1ad3      	subs	r3, r2, r3
 8013dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8013de4:	4b13      	ldr	r3, [pc, #76]	; (8013e34 <_sbrk+0x64>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d102      	bne.n	8013df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8013dec:	4b11      	ldr	r3, [pc, #68]	; (8013e34 <_sbrk+0x64>)
 8013dee:	4a12      	ldr	r2, [pc, #72]	; (8013e38 <_sbrk+0x68>)
 8013df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8013df2:	4b10      	ldr	r3, [pc, #64]	; (8013e34 <_sbrk+0x64>)
 8013df4:	681a      	ldr	r2, [r3, #0]
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	4413      	add	r3, r2
 8013dfa:	693a      	ldr	r2, [r7, #16]
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d207      	bcs.n	8013e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8013e00:	f002 ffda 	bl	8016db8 <__errno>
 8013e04:	4603      	mov	r3, r0
 8013e06:	220c      	movs	r2, #12
 8013e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8013e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8013e0e:	e009      	b.n	8013e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8013e10:	4b08      	ldr	r3, [pc, #32]	; (8013e34 <_sbrk+0x64>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8013e16:	4b07      	ldr	r3, [pc, #28]	; (8013e34 <_sbrk+0x64>)
 8013e18:	681a      	ldr	r2, [r3, #0]
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	4413      	add	r3, r2
 8013e1e:	4a05      	ldr	r2, [pc, #20]	; (8013e34 <_sbrk+0x64>)
 8013e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8013e22:	68fb      	ldr	r3, [r7, #12]
}
 8013e24:	4618      	mov	r0, r3
 8013e26:	3718      	adds	r7, #24
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}
 8013e2c:	20050000 	.word	0x20050000
 8013e30:	00000400 	.word	0x00000400
 8013e34:	200004c4 	.word	0x200004c4
 8013e38:	200004e8 	.word	0x200004e8

08013e3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8013e3c:	b480      	push	{r7}
 8013e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8013e40:	4b06      	ldr	r3, [pc, #24]	; (8013e5c <SystemInit+0x20>)
 8013e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013e46:	4a05      	ldr	r2, [pc, #20]	; (8013e5c <SystemInit+0x20>)
 8013e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8013e50:	bf00      	nop
 8013e52:	46bd      	mov	sp, r7
 8013e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e58:	4770      	bx	lr
 8013e5a:	bf00      	nop
 8013e5c:	e000ed00 	.word	0xe000ed00

08013e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8013e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8013e64:	480d      	ldr	r0, [pc, #52]	; (8013e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8013e66:	490e      	ldr	r1, [pc, #56]	; (8013ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8013e68:	4a0e      	ldr	r2, [pc, #56]	; (8013ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8013e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013e6c:	e002      	b.n	8013e74 <LoopCopyDataInit>

08013e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8013e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013e72:	3304      	adds	r3, #4

08013e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013e78:	d3f9      	bcc.n	8013e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8013e7a:	4a0b      	ldr	r2, [pc, #44]	; (8013ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8013e7c:	4c0b      	ldr	r4, [pc, #44]	; (8013eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8013e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013e80:	e001      	b.n	8013e86 <LoopFillZerobss>

08013e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013e84:	3204      	adds	r2, #4

08013e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013e88:	d3fb      	bcc.n	8013e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8013e8a:	f7ff ffd7 	bl	8013e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8013e8e:	f002 ff99 	bl	8016dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013e92:	f7ff f957 	bl	8013144 <main>
  bx  lr    
 8013e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8013e98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8013e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8013ea0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8013ea4:	0801a9b4 	.word	0x0801a9b4
  ldr r2, =_sbss
 8013ea8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8013eac:	200004e8 	.word	0x200004e8

08013eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013eb0:	e7fe      	b.n	8013eb0 <ADC_IRQHandler>

08013eb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013eb2:	b580      	push	{r7, lr}
 8013eb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013eb6:	2003      	movs	r0, #3
 8013eb8:	f000 f94c 	bl	8014154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8013ebc:	200f      	movs	r0, #15
 8013ebe:	f000 f805 	bl	8013ecc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8013ec2:	f7ff fe51 	bl	8013b68 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8013ec6:	2300      	movs	r3, #0
}
 8013ec8:	4618      	mov	r0, r3
 8013eca:	bd80      	pop	{r7, pc}

08013ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b082      	sub	sp, #8
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8013ed4:	4b12      	ldr	r3, [pc, #72]	; (8013f20 <HAL_InitTick+0x54>)
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	4b12      	ldr	r3, [pc, #72]	; (8013f24 <HAL_InitTick+0x58>)
 8013eda:	781b      	ldrb	r3, [r3, #0]
 8013edc:	4619      	mov	r1, r3
 8013ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8013ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8013eea:	4618      	mov	r0, r3
 8013eec:	f000 f967 	bl	80141be <HAL_SYSTICK_Config>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d001      	beq.n	8013efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	e00e      	b.n	8013f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2b0f      	cmp	r3, #15
 8013efe:	d80a      	bhi.n	8013f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8013f00:	2200      	movs	r2, #0
 8013f02:	6879      	ldr	r1, [r7, #4]
 8013f04:	f04f 30ff 	mov.w	r0, #4294967295
 8013f08:	f000 f92f 	bl	801416a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8013f0c:	4a06      	ldr	r2, [pc, #24]	; (8013f28 <HAL_InitTick+0x5c>)
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8013f12:	2300      	movs	r3, #0
 8013f14:	e000      	b.n	8013f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8013f16:	2301      	movs	r3, #1
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3708      	adds	r7, #8
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}
 8013f20:	20000000 	.word	0x20000000
 8013f24:	20000008 	.word	0x20000008
 8013f28:	20000004 	.word	0x20000004

08013f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8013f2c:	b480      	push	{r7}
 8013f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8013f30:	4b06      	ldr	r3, [pc, #24]	; (8013f4c <HAL_IncTick+0x20>)
 8013f32:	781b      	ldrb	r3, [r3, #0]
 8013f34:	461a      	mov	r2, r3
 8013f36:	4b06      	ldr	r3, [pc, #24]	; (8013f50 <HAL_IncTick+0x24>)
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	4413      	add	r3, r2
 8013f3c:	4a04      	ldr	r2, [pc, #16]	; (8013f50 <HAL_IncTick+0x24>)
 8013f3e:	6013      	str	r3, [r2, #0]
}
 8013f40:	bf00      	nop
 8013f42:	46bd      	mov	sp, r7
 8013f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f48:	4770      	bx	lr
 8013f4a:	bf00      	nop
 8013f4c:	20000008 	.word	0x20000008
 8013f50:	200004d4 	.word	0x200004d4

08013f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013f54:	b480      	push	{r7}
 8013f56:	af00      	add	r7, sp, #0
  return uwTick;
 8013f58:	4b03      	ldr	r3, [pc, #12]	; (8013f68 <HAL_GetTick+0x14>)
 8013f5a:	681b      	ldr	r3, [r3, #0]
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f64:	4770      	bx	lr
 8013f66:	bf00      	nop
 8013f68:	200004d4 	.word	0x200004d4

08013f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b084      	sub	sp, #16
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013f74:	f7ff ffee 	bl	8013f54 <HAL_GetTick>
 8013f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f84:	d005      	beq.n	8013f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8013f86:	4b0a      	ldr	r3, [pc, #40]	; (8013fb0 <HAL_Delay+0x44>)
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	461a      	mov	r2, r3
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	4413      	add	r3, r2
 8013f90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8013f92:	bf00      	nop
 8013f94:	f7ff ffde 	bl	8013f54 <HAL_GetTick>
 8013f98:	4602      	mov	r2, r0
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	1ad3      	subs	r3, r2, r3
 8013f9e:	68fa      	ldr	r2, [r7, #12]
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	d8f7      	bhi.n	8013f94 <HAL_Delay+0x28>
  {
  }
}
 8013fa4:	bf00      	nop
 8013fa6:	bf00      	nop
 8013fa8:	3710      	adds	r7, #16
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}
 8013fae:	bf00      	nop
 8013fb0:	20000008 	.word	0x20000008

08013fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013fb4:	b480      	push	{r7}
 8013fb6:	b085      	sub	sp, #20
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	f003 0307 	and.w	r3, r3, #7
 8013fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8013fc4:	4b0b      	ldr	r3, [pc, #44]	; (8013ff4 <__NVIC_SetPriorityGrouping+0x40>)
 8013fc6:	68db      	ldr	r3, [r3, #12]
 8013fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8013fca:	68ba      	ldr	r2, [r7, #8]
 8013fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8013fd0:	4013      	ands	r3, r2
 8013fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8013fdc:	4b06      	ldr	r3, [pc, #24]	; (8013ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8013fde:	4313      	orrs	r3, r2
 8013fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8013fe2:	4a04      	ldr	r2, [pc, #16]	; (8013ff4 <__NVIC_SetPriorityGrouping+0x40>)
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	60d3      	str	r3, [r2, #12]
}
 8013fe8:	bf00      	nop
 8013fea:	3714      	adds	r7, #20
 8013fec:	46bd      	mov	sp, r7
 8013fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff2:	4770      	bx	lr
 8013ff4:	e000ed00 	.word	0xe000ed00
 8013ff8:	05fa0000 	.word	0x05fa0000

08013ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8013ffc:	b480      	push	{r7}
 8013ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8014000:	4b04      	ldr	r3, [pc, #16]	; (8014014 <__NVIC_GetPriorityGrouping+0x18>)
 8014002:	68db      	ldr	r3, [r3, #12]
 8014004:	0a1b      	lsrs	r3, r3, #8
 8014006:	f003 0307 	and.w	r3, r3, #7
}
 801400a:	4618      	mov	r0, r3
 801400c:	46bd      	mov	sp, r7
 801400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014012:	4770      	bx	lr
 8014014:	e000ed00 	.word	0xe000ed00

08014018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014018:	b480      	push	{r7}
 801401a:	b083      	sub	sp, #12
 801401c:	af00      	add	r7, sp, #0
 801401e:	4603      	mov	r3, r0
 8014020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014026:	2b00      	cmp	r3, #0
 8014028:	db0b      	blt.n	8014042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801402a:	79fb      	ldrb	r3, [r7, #7]
 801402c:	f003 021f 	and.w	r2, r3, #31
 8014030:	4907      	ldr	r1, [pc, #28]	; (8014050 <__NVIC_EnableIRQ+0x38>)
 8014032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014036:	095b      	lsrs	r3, r3, #5
 8014038:	2001      	movs	r0, #1
 801403a:	fa00 f202 	lsl.w	r2, r0, r2
 801403e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8014042:	bf00      	nop
 8014044:	370c      	adds	r7, #12
 8014046:	46bd      	mov	sp, r7
 8014048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404c:	4770      	bx	lr
 801404e:	bf00      	nop
 8014050:	e000e100 	.word	0xe000e100

08014054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014054:	b480      	push	{r7}
 8014056:	b083      	sub	sp, #12
 8014058:	af00      	add	r7, sp, #0
 801405a:	4603      	mov	r3, r0
 801405c:	6039      	str	r1, [r7, #0]
 801405e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014064:	2b00      	cmp	r3, #0
 8014066:	db0a      	blt.n	801407e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	b2da      	uxtb	r2, r3
 801406c:	490c      	ldr	r1, [pc, #48]	; (80140a0 <__NVIC_SetPriority+0x4c>)
 801406e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014072:	0112      	lsls	r2, r2, #4
 8014074:	b2d2      	uxtb	r2, r2
 8014076:	440b      	add	r3, r1
 8014078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801407c:	e00a      	b.n	8014094 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	b2da      	uxtb	r2, r3
 8014082:	4908      	ldr	r1, [pc, #32]	; (80140a4 <__NVIC_SetPriority+0x50>)
 8014084:	79fb      	ldrb	r3, [r7, #7]
 8014086:	f003 030f 	and.w	r3, r3, #15
 801408a:	3b04      	subs	r3, #4
 801408c:	0112      	lsls	r2, r2, #4
 801408e:	b2d2      	uxtb	r2, r2
 8014090:	440b      	add	r3, r1
 8014092:	761a      	strb	r2, [r3, #24]
}
 8014094:	bf00      	nop
 8014096:	370c      	adds	r7, #12
 8014098:	46bd      	mov	sp, r7
 801409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409e:	4770      	bx	lr
 80140a0:	e000e100 	.word	0xe000e100
 80140a4:	e000ed00 	.word	0xe000ed00

080140a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80140a8:	b480      	push	{r7}
 80140aa:	b089      	sub	sp, #36	; 0x24
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	60f8      	str	r0, [r7, #12]
 80140b0:	60b9      	str	r1, [r7, #8]
 80140b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	f003 0307 	and.w	r3, r3, #7
 80140ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80140bc:	69fb      	ldr	r3, [r7, #28]
 80140be:	f1c3 0307 	rsb	r3, r3, #7
 80140c2:	2b04      	cmp	r3, #4
 80140c4:	bf28      	it	cs
 80140c6:	2304      	movcs	r3, #4
 80140c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80140ca:	69fb      	ldr	r3, [r7, #28]
 80140cc:	3304      	adds	r3, #4
 80140ce:	2b06      	cmp	r3, #6
 80140d0:	d902      	bls.n	80140d8 <NVIC_EncodePriority+0x30>
 80140d2:	69fb      	ldr	r3, [r7, #28]
 80140d4:	3b03      	subs	r3, #3
 80140d6:	e000      	b.n	80140da <NVIC_EncodePriority+0x32>
 80140d8:	2300      	movs	r3, #0
 80140da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80140dc:	f04f 32ff 	mov.w	r2, #4294967295
 80140e0:	69bb      	ldr	r3, [r7, #24]
 80140e2:	fa02 f303 	lsl.w	r3, r2, r3
 80140e6:	43da      	mvns	r2, r3
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	401a      	ands	r2, r3
 80140ec:	697b      	ldr	r3, [r7, #20]
 80140ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80140f0:	f04f 31ff 	mov.w	r1, #4294967295
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	fa01 f303 	lsl.w	r3, r1, r3
 80140fa:	43d9      	mvns	r1, r3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014100:	4313      	orrs	r3, r2
         );
}
 8014102:	4618      	mov	r0, r3
 8014104:	3724      	adds	r7, #36	; 0x24
 8014106:	46bd      	mov	sp, r7
 8014108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410c:	4770      	bx	lr
	...

08014110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	3b01      	subs	r3, #1
 801411c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014120:	d301      	bcc.n	8014126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8014122:	2301      	movs	r3, #1
 8014124:	e00f      	b.n	8014146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8014126:	4a0a      	ldr	r2, [pc, #40]	; (8014150 <SysTick_Config+0x40>)
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	3b01      	subs	r3, #1
 801412c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801412e:	210f      	movs	r1, #15
 8014130:	f04f 30ff 	mov.w	r0, #4294967295
 8014134:	f7ff ff8e 	bl	8014054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8014138:	4b05      	ldr	r3, [pc, #20]	; (8014150 <SysTick_Config+0x40>)
 801413a:	2200      	movs	r2, #0
 801413c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801413e:	4b04      	ldr	r3, [pc, #16]	; (8014150 <SysTick_Config+0x40>)
 8014140:	2207      	movs	r2, #7
 8014142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8014144:	2300      	movs	r3, #0
}
 8014146:	4618      	mov	r0, r3
 8014148:	3708      	adds	r7, #8
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}
 801414e:	bf00      	nop
 8014150:	e000e010 	.word	0xe000e010

08014154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014154:	b580      	push	{r7, lr}
 8014156:	b082      	sub	sp, #8
 8014158:	af00      	add	r7, sp, #0
 801415a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f7ff ff29 	bl	8013fb4 <__NVIC_SetPriorityGrouping>
}
 8014162:	bf00      	nop
 8014164:	3708      	adds	r7, #8
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}

0801416a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801416a:	b580      	push	{r7, lr}
 801416c:	b086      	sub	sp, #24
 801416e:	af00      	add	r7, sp, #0
 8014170:	4603      	mov	r3, r0
 8014172:	60b9      	str	r1, [r7, #8]
 8014174:	607a      	str	r2, [r7, #4]
 8014176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8014178:	2300      	movs	r3, #0
 801417a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801417c:	f7ff ff3e 	bl	8013ffc <__NVIC_GetPriorityGrouping>
 8014180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8014182:	687a      	ldr	r2, [r7, #4]
 8014184:	68b9      	ldr	r1, [r7, #8]
 8014186:	6978      	ldr	r0, [r7, #20]
 8014188:	f7ff ff8e 	bl	80140a8 <NVIC_EncodePriority>
 801418c:	4602      	mov	r2, r0
 801418e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014192:	4611      	mov	r1, r2
 8014194:	4618      	mov	r0, r3
 8014196:	f7ff ff5d 	bl	8014054 <__NVIC_SetPriority>
}
 801419a:	bf00      	nop
 801419c:	3718      	adds	r7, #24
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}

080141a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80141a2:	b580      	push	{r7, lr}
 80141a4:	b082      	sub	sp, #8
 80141a6:	af00      	add	r7, sp, #0
 80141a8:	4603      	mov	r3, r0
 80141aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80141ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7ff ff31 	bl	8014018 <__NVIC_EnableIRQ>
}
 80141b6:	bf00      	nop
 80141b8:	3708      	adds	r7, #8
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bd80      	pop	{r7, pc}

080141be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80141be:	b580      	push	{r7, lr}
 80141c0:	b082      	sub	sp, #8
 80141c2:	af00      	add	r7, sp, #0
 80141c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80141c6:	6878      	ldr	r0, [r7, #4]
 80141c8:	f7ff ffa2 	bl	8014110 <SysTick_Config>
 80141cc:	4603      	mov	r3, r0
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3708      	adds	r7, #8
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}

080141d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80141d6:	b580      	push	{r7, lr}
 80141d8:	b084      	sub	sp, #16
 80141da:	af00      	add	r7, sp, #0
 80141dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80141e4:	f7ff feb6 	bl	8013f54 <HAL_GetTick>
 80141e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80141f0:	b2db      	uxtb	r3, r3
 80141f2:	2b02      	cmp	r3, #2
 80141f4:	d008      	beq.n	8014208 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	2280      	movs	r2, #128	; 0x80
 80141fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	2200      	movs	r2, #0
 8014200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8014204:	2301      	movs	r3, #1
 8014206:	e052      	b.n	80142ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	681a      	ldr	r2, [r3, #0]
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	f022 0216 	bic.w	r2, r2, #22
 8014216:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	695a      	ldr	r2, [r3, #20]
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014226:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801422c:	2b00      	cmp	r3, #0
 801422e:	d103      	bne.n	8014238 <HAL_DMA_Abort+0x62>
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014234:	2b00      	cmp	r3, #0
 8014236:	d007      	beq.n	8014248 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	681a      	ldr	r2, [r3, #0]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	f022 0208 	bic.w	r2, r2, #8
 8014246:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	681a      	ldr	r2, [r3, #0]
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	f022 0201 	bic.w	r2, r2, #1
 8014256:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8014258:	e013      	b.n	8014282 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801425a:	f7ff fe7b 	bl	8013f54 <HAL_GetTick>
 801425e:	4602      	mov	r2, r0
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	1ad3      	subs	r3, r2, r3
 8014264:	2b05      	cmp	r3, #5
 8014266:	d90c      	bls.n	8014282 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	2220      	movs	r2, #32
 801426c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2200      	movs	r2, #0
 8014272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2203      	movs	r2, #3
 801427a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 801427e:	2303      	movs	r3, #3
 8014280:	e015      	b.n	80142ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	f003 0301 	and.w	r3, r3, #1
 801428c:	2b00      	cmp	r3, #0
 801428e:	d1e4      	bne.n	801425a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014294:	223f      	movs	r2, #63	; 0x3f
 8014296:	409a      	lsls	r2, r3
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2200      	movs	r2, #0
 80142a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	2201      	movs	r2, #1
 80142a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80142ac:	2300      	movs	r3, #0
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	3710      	adds	r7, #16
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}

080142b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80142b6:	b480      	push	{r7}
 80142b8:	b083      	sub	sp, #12
 80142ba:	af00      	add	r7, sp, #0
 80142bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80142c4:	b2db      	uxtb	r3, r3
 80142c6:	2b02      	cmp	r3, #2
 80142c8:	d004      	beq.n	80142d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	2280      	movs	r2, #128	; 0x80
 80142ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80142d0:	2301      	movs	r3, #1
 80142d2:	e00c      	b.n	80142ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2205      	movs	r2, #5
 80142d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	681a      	ldr	r2, [r3, #0]
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	f022 0201 	bic.w	r2, r2, #1
 80142ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80142ec:	2300      	movs	r3, #0
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	370c      	adds	r7, #12
 80142f2:	46bd      	mov	sp, r7
 80142f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f8:	4770      	bx	lr
	...

080142fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80142fc:	b480      	push	{r7}
 80142fe:	b089      	sub	sp, #36	; 0x24
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
 8014304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8014306:	2300      	movs	r3, #0
 8014308:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 801430a:	2300      	movs	r3, #0
 801430c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 801430e:	2300      	movs	r3, #0
 8014310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8014312:	2300      	movs	r3, #0
 8014314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8014316:	2300      	movs	r3, #0
 8014318:	61fb      	str	r3, [r7, #28]
 801431a:	e175      	b.n	8014608 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 801431c:	2201      	movs	r2, #1
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	fa02 f303 	lsl.w	r3, r2, r3
 8014324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	697a      	ldr	r2, [r7, #20]
 801432c:	4013      	ands	r3, r2
 801432e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8014330:	693a      	ldr	r2, [r7, #16]
 8014332:	697b      	ldr	r3, [r7, #20]
 8014334:	429a      	cmp	r2, r3
 8014336:	f040 8164 	bne.w	8014602 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801433a:	683b      	ldr	r3, [r7, #0]
 801433c:	685b      	ldr	r3, [r3, #4]
 801433e:	2b01      	cmp	r3, #1
 8014340:	d00b      	beq.n	801435a <HAL_GPIO_Init+0x5e>
 8014342:	683b      	ldr	r3, [r7, #0]
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	2b02      	cmp	r3, #2
 8014348:	d007      	beq.n	801435a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801434a:	683b      	ldr	r3, [r7, #0]
 801434c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801434e:	2b11      	cmp	r3, #17
 8014350:	d003      	beq.n	801435a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	685b      	ldr	r3, [r3, #4]
 8014356:	2b12      	cmp	r3, #18
 8014358:	d130      	bne.n	80143bc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	689b      	ldr	r3, [r3, #8]
 801435e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8014360:	69fb      	ldr	r3, [r7, #28]
 8014362:	005b      	lsls	r3, r3, #1
 8014364:	2203      	movs	r2, #3
 8014366:	fa02 f303 	lsl.w	r3, r2, r3
 801436a:	43db      	mvns	r3, r3
 801436c:	69ba      	ldr	r2, [r7, #24]
 801436e:	4013      	ands	r3, r2
 8014370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8014372:	683b      	ldr	r3, [r7, #0]
 8014374:	68da      	ldr	r2, [r3, #12]
 8014376:	69fb      	ldr	r3, [r7, #28]
 8014378:	005b      	lsls	r3, r3, #1
 801437a:	fa02 f303 	lsl.w	r3, r2, r3
 801437e:	69ba      	ldr	r2, [r7, #24]
 8014380:	4313      	orrs	r3, r2
 8014382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	69ba      	ldr	r2, [r7, #24]
 8014388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	685b      	ldr	r3, [r3, #4]
 801438e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8014390:	2201      	movs	r2, #1
 8014392:	69fb      	ldr	r3, [r7, #28]
 8014394:	fa02 f303 	lsl.w	r3, r2, r3
 8014398:	43db      	mvns	r3, r3
 801439a:	69ba      	ldr	r2, [r7, #24]
 801439c:	4013      	ands	r3, r2
 801439e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	685b      	ldr	r3, [r3, #4]
 80143a4:	091b      	lsrs	r3, r3, #4
 80143a6:	f003 0201 	and.w	r2, r3, #1
 80143aa:	69fb      	ldr	r3, [r7, #28]
 80143ac:	fa02 f303 	lsl.w	r3, r2, r3
 80143b0:	69ba      	ldr	r2, [r7, #24]
 80143b2:	4313      	orrs	r3, r2
 80143b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	69ba      	ldr	r2, [r7, #24]
 80143ba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	68db      	ldr	r3, [r3, #12]
 80143c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80143c2:	69fb      	ldr	r3, [r7, #28]
 80143c4:	005b      	lsls	r3, r3, #1
 80143c6:	2203      	movs	r2, #3
 80143c8:	fa02 f303 	lsl.w	r3, r2, r3
 80143cc:	43db      	mvns	r3, r3
 80143ce:	69ba      	ldr	r2, [r7, #24]
 80143d0:	4013      	ands	r3, r2
 80143d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	689a      	ldr	r2, [r3, #8]
 80143d8:	69fb      	ldr	r3, [r7, #28]
 80143da:	005b      	lsls	r3, r3, #1
 80143dc:	fa02 f303 	lsl.w	r3, r2, r3
 80143e0:	69ba      	ldr	r2, [r7, #24]
 80143e2:	4313      	orrs	r3, r2
 80143e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	69ba      	ldr	r2, [r7, #24]
 80143ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	685b      	ldr	r3, [r3, #4]
 80143f0:	2b02      	cmp	r3, #2
 80143f2:	d003      	beq.n	80143fc <HAL_GPIO_Init+0x100>
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	685b      	ldr	r3, [r3, #4]
 80143f8:	2b12      	cmp	r3, #18
 80143fa:	d123      	bne.n	8014444 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80143fc:	69fb      	ldr	r3, [r7, #28]
 80143fe:	08da      	lsrs	r2, r3, #3
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	3208      	adds	r2, #8
 8014404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801440a:	69fb      	ldr	r3, [r7, #28]
 801440c:	f003 0307 	and.w	r3, r3, #7
 8014410:	009b      	lsls	r3, r3, #2
 8014412:	220f      	movs	r2, #15
 8014414:	fa02 f303 	lsl.w	r3, r2, r3
 8014418:	43db      	mvns	r3, r3
 801441a:	69ba      	ldr	r2, [r7, #24]
 801441c:	4013      	ands	r3, r2
 801441e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8014420:	683b      	ldr	r3, [r7, #0]
 8014422:	691a      	ldr	r2, [r3, #16]
 8014424:	69fb      	ldr	r3, [r7, #28]
 8014426:	f003 0307 	and.w	r3, r3, #7
 801442a:	009b      	lsls	r3, r3, #2
 801442c:	fa02 f303 	lsl.w	r3, r2, r3
 8014430:	69ba      	ldr	r2, [r7, #24]
 8014432:	4313      	orrs	r3, r2
 8014434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8014436:	69fb      	ldr	r3, [r7, #28]
 8014438:	08da      	lsrs	r2, r3, #3
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	3208      	adds	r2, #8
 801443e:	69b9      	ldr	r1, [r7, #24]
 8014440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801444a:	69fb      	ldr	r3, [r7, #28]
 801444c:	005b      	lsls	r3, r3, #1
 801444e:	2203      	movs	r2, #3
 8014450:	fa02 f303 	lsl.w	r3, r2, r3
 8014454:	43db      	mvns	r3, r3
 8014456:	69ba      	ldr	r2, [r7, #24]
 8014458:	4013      	ands	r3, r2
 801445a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	f003 0203 	and.w	r2, r3, #3
 8014464:	69fb      	ldr	r3, [r7, #28]
 8014466:	005b      	lsls	r3, r3, #1
 8014468:	fa02 f303 	lsl.w	r3, r2, r3
 801446c:	69ba      	ldr	r2, [r7, #24]
 801446e:	4313      	orrs	r3, r2
 8014470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	69ba      	ldr	r2, [r7, #24]
 8014476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	685b      	ldr	r3, [r3, #4]
 801447c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014480:	2b00      	cmp	r3, #0
 8014482:	f000 80be 	beq.w	8014602 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014486:	4b66      	ldr	r3, [pc, #408]	; (8014620 <HAL_GPIO_Init+0x324>)
 8014488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801448a:	4a65      	ldr	r2, [pc, #404]	; (8014620 <HAL_GPIO_Init+0x324>)
 801448c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014490:	6453      	str	r3, [r2, #68]	; 0x44
 8014492:	4b63      	ldr	r3, [pc, #396]	; (8014620 <HAL_GPIO_Init+0x324>)
 8014494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801449a:	60fb      	str	r3, [r7, #12]
 801449c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 801449e:	4a61      	ldr	r2, [pc, #388]	; (8014624 <HAL_GPIO_Init+0x328>)
 80144a0:	69fb      	ldr	r3, [r7, #28]
 80144a2:	089b      	lsrs	r3, r3, #2
 80144a4:	3302      	adds	r3, #2
 80144a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80144ac:	69fb      	ldr	r3, [r7, #28]
 80144ae:	f003 0303 	and.w	r3, r3, #3
 80144b2:	009b      	lsls	r3, r3, #2
 80144b4:	220f      	movs	r2, #15
 80144b6:	fa02 f303 	lsl.w	r3, r2, r3
 80144ba:	43db      	mvns	r3, r3
 80144bc:	69ba      	ldr	r2, [r7, #24]
 80144be:	4013      	ands	r3, r2
 80144c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	4a58      	ldr	r2, [pc, #352]	; (8014628 <HAL_GPIO_Init+0x32c>)
 80144c6:	4293      	cmp	r3, r2
 80144c8:	d037      	beq.n	801453a <HAL_GPIO_Init+0x23e>
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	4a57      	ldr	r2, [pc, #348]	; (801462c <HAL_GPIO_Init+0x330>)
 80144ce:	4293      	cmp	r3, r2
 80144d0:	d031      	beq.n	8014536 <HAL_GPIO_Init+0x23a>
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	4a56      	ldr	r2, [pc, #344]	; (8014630 <HAL_GPIO_Init+0x334>)
 80144d6:	4293      	cmp	r3, r2
 80144d8:	d02b      	beq.n	8014532 <HAL_GPIO_Init+0x236>
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	4a55      	ldr	r2, [pc, #340]	; (8014634 <HAL_GPIO_Init+0x338>)
 80144de:	4293      	cmp	r3, r2
 80144e0:	d025      	beq.n	801452e <HAL_GPIO_Init+0x232>
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	4a54      	ldr	r2, [pc, #336]	; (8014638 <HAL_GPIO_Init+0x33c>)
 80144e6:	4293      	cmp	r3, r2
 80144e8:	d01f      	beq.n	801452a <HAL_GPIO_Init+0x22e>
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	4a53      	ldr	r2, [pc, #332]	; (801463c <HAL_GPIO_Init+0x340>)
 80144ee:	4293      	cmp	r3, r2
 80144f0:	d019      	beq.n	8014526 <HAL_GPIO_Init+0x22a>
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	4a52      	ldr	r2, [pc, #328]	; (8014640 <HAL_GPIO_Init+0x344>)
 80144f6:	4293      	cmp	r3, r2
 80144f8:	d013      	beq.n	8014522 <HAL_GPIO_Init+0x226>
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	4a51      	ldr	r2, [pc, #324]	; (8014644 <HAL_GPIO_Init+0x348>)
 80144fe:	4293      	cmp	r3, r2
 8014500:	d00d      	beq.n	801451e <HAL_GPIO_Init+0x222>
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	4a50      	ldr	r2, [pc, #320]	; (8014648 <HAL_GPIO_Init+0x34c>)
 8014506:	4293      	cmp	r3, r2
 8014508:	d007      	beq.n	801451a <HAL_GPIO_Init+0x21e>
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	4a4f      	ldr	r2, [pc, #316]	; (801464c <HAL_GPIO_Init+0x350>)
 801450e:	4293      	cmp	r3, r2
 8014510:	d101      	bne.n	8014516 <HAL_GPIO_Init+0x21a>
 8014512:	2309      	movs	r3, #9
 8014514:	e012      	b.n	801453c <HAL_GPIO_Init+0x240>
 8014516:	230a      	movs	r3, #10
 8014518:	e010      	b.n	801453c <HAL_GPIO_Init+0x240>
 801451a:	2308      	movs	r3, #8
 801451c:	e00e      	b.n	801453c <HAL_GPIO_Init+0x240>
 801451e:	2307      	movs	r3, #7
 8014520:	e00c      	b.n	801453c <HAL_GPIO_Init+0x240>
 8014522:	2306      	movs	r3, #6
 8014524:	e00a      	b.n	801453c <HAL_GPIO_Init+0x240>
 8014526:	2305      	movs	r3, #5
 8014528:	e008      	b.n	801453c <HAL_GPIO_Init+0x240>
 801452a:	2304      	movs	r3, #4
 801452c:	e006      	b.n	801453c <HAL_GPIO_Init+0x240>
 801452e:	2303      	movs	r3, #3
 8014530:	e004      	b.n	801453c <HAL_GPIO_Init+0x240>
 8014532:	2302      	movs	r3, #2
 8014534:	e002      	b.n	801453c <HAL_GPIO_Init+0x240>
 8014536:	2301      	movs	r3, #1
 8014538:	e000      	b.n	801453c <HAL_GPIO_Init+0x240>
 801453a:	2300      	movs	r3, #0
 801453c:	69fa      	ldr	r2, [r7, #28]
 801453e:	f002 0203 	and.w	r2, r2, #3
 8014542:	0092      	lsls	r2, r2, #2
 8014544:	4093      	lsls	r3, r2
 8014546:	69ba      	ldr	r2, [r7, #24]
 8014548:	4313      	orrs	r3, r2
 801454a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 801454c:	4935      	ldr	r1, [pc, #212]	; (8014624 <HAL_GPIO_Init+0x328>)
 801454e:	69fb      	ldr	r3, [r7, #28]
 8014550:	089b      	lsrs	r3, r3, #2
 8014552:	3302      	adds	r3, #2
 8014554:	69ba      	ldr	r2, [r7, #24]
 8014556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801455a:	4b3d      	ldr	r3, [pc, #244]	; (8014650 <HAL_GPIO_Init+0x354>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8014560:	693b      	ldr	r3, [r7, #16]
 8014562:	43db      	mvns	r3, r3
 8014564:	69ba      	ldr	r2, [r7, #24]
 8014566:	4013      	ands	r3, r2
 8014568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801456a:	683b      	ldr	r3, [r7, #0]
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014572:	2b00      	cmp	r3, #0
 8014574:	d003      	beq.n	801457e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8014576:	69ba      	ldr	r2, [r7, #24]
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	4313      	orrs	r3, r2
 801457c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801457e:	4a34      	ldr	r2, [pc, #208]	; (8014650 <HAL_GPIO_Init+0x354>)
 8014580:	69bb      	ldr	r3, [r7, #24]
 8014582:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8014584:	4b32      	ldr	r3, [pc, #200]	; (8014650 <HAL_GPIO_Init+0x354>)
 8014586:	685b      	ldr	r3, [r3, #4]
 8014588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801458a:	693b      	ldr	r3, [r7, #16]
 801458c:	43db      	mvns	r3, r3
 801458e:	69ba      	ldr	r2, [r7, #24]
 8014590:	4013      	ands	r3, r2
 8014592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	685b      	ldr	r3, [r3, #4]
 8014598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801459c:	2b00      	cmp	r3, #0
 801459e:	d003      	beq.n	80145a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80145a0:	69ba      	ldr	r2, [r7, #24]
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	4313      	orrs	r3, r2
 80145a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80145a8:	4a29      	ldr	r2, [pc, #164]	; (8014650 <HAL_GPIO_Init+0x354>)
 80145aa:	69bb      	ldr	r3, [r7, #24]
 80145ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80145ae:	4b28      	ldr	r3, [pc, #160]	; (8014650 <HAL_GPIO_Init+0x354>)
 80145b0:	689b      	ldr	r3, [r3, #8]
 80145b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80145b4:	693b      	ldr	r3, [r7, #16]
 80145b6:	43db      	mvns	r3, r3
 80145b8:	69ba      	ldr	r2, [r7, #24]
 80145ba:	4013      	ands	r3, r2
 80145bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	685b      	ldr	r3, [r3, #4]
 80145c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d003      	beq.n	80145d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80145ca:	69ba      	ldr	r2, [r7, #24]
 80145cc:	693b      	ldr	r3, [r7, #16]
 80145ce:	4313      	orrs	r3, r2
 80145d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80145d2:	4a1f      	ldr	r2, [pc, #124]	; (8014650 <HAL_GPIO_Init+0x354>)
 80145d4:	69bb      	ldr	r3, [r7, #24]
 80145d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80145d8:	4b1d      	ldr	r3, [pc, #116]	; (8014650 <HAL_GPIO_Init+0x354>)
 80145da:	68db      	ldr	r3, [r3, #12]
 80145dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80145de:	693b      	ldr	r3, [r7, #16]
 80145e0:	43db      	mvns	r3, r3
 80145e2:	69ba      	ldr	r2, [r7, #24]
 80145e4:	4013      	ands	r3, r2
 80145e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	685b      	ldr	r3, [r3, #4]
 80145ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d003      	beq.n	80145fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80145f4:	69ba      	ldr	r2, [r7, #24]
 80145f6:	693b      	ldr	r3, [r7, #16]
 80145f8:	4313      	orrs	r3, r2
 80145fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80145fc:	4a14      	ldr	r2, [pc, #80]	; (8014650 <HAL_GPIO_Init+0x354>)
 80145fe:	69bb      	ldr	r3, [r7, #24]
 8014600:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	3301      	adds	r3, #1
 8014606:	61fb      	str	r3, [r7, #28]
 8014608:	69fb      	ldr	r3, [r7, #28]
 801460a:	2b0f      	cmp	r3, #15
 801460c:	f67f ae86 	bls.w	801431c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8014610:	bf00      	nop
 8014612:	bf00      	nop
 8014614:	3724      	adds	r7, #36	; 0x24
 8014616:	46bd      	mov	sp, r7
 8014618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461c:	4770      	bx	lr
 801461e:	bf00      	nop
 8014620:	40023800 	.word	0x40023800
 8014624:	40013800 	.word	0x40013800
 8014628:	40020000 	.word	0x40020000
 801462c:	40020400 	.word	0x40020400
 8014630:	40020800 	.word	0x40020800
 8014634:	40020c00 	.word	0x40020c00
 8014638:	40021000 	.word	0x40021000
 801463c:	40021400 	.word	0x40021400
 8014640:	40021800 	.word	0x40021800
 8014644:	40021c00 	.word	0x40021c00
 8014648:	40022000 	.word	0x40022000
 801464c:	40022400 	.word	0x40022400
 8014650:	40013c00 	.word	0x40013c00

08014654 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 801465a:	2300      	movs	r3, #0
 801465c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801465e:	4b23      	ldr	r3, [pc, #140]	; (80146ec <HAL_PWREx_EnableOverDrive+0x98>)
 8014660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014662:	4a22      	ldr	r2, [pc, #136]	; (80146ec <HAL_PWREx_EnableOverDrive+0x98>)
 8014664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014668:	6413      	str	r3, [r2, #64]	; 0x40
 801466a:	4b20      	ldr	r3, [pc, #128]	; (80146ec <HAL_PWREx_EnableOverDrive+0x98>)
 801466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801466e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014672:	603b      	str	r3, [r7, #0]
 8014674:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8014676:	4b1e      	ldr	r3, [pc, #120]	; (80146f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	4a1d      	ldr	r2, [pc, #116]	; (80146f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 801467c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014680:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014682:	f7ff fc67 	bl	8013f54 <HAL_GetTick>
 8014686:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8014688:	e009      	b.n	801469e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801468a:	f7ff fc63 	bl	8013f54 <HAL_GetTick>
 801468e:	4602      	mov	r2, r0
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	1ad3      	subs	r3, r2, r3
 8014694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014698:	d901      	bls.n	801469e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 801469a:	2303      	movs	r3, #3
 801469c:	e022      	b.n	80146e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801469e:	4b14      	ldr	r3, [pc, #80]	; (80146f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80146a0:	685b      	ldr	r3, [r3, #4]
 80146a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80146a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80146aa:	d1ee      	bne.n	801468a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80146ac:	4b10      	ldr	r3, [pc, #64]	; (80146f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	4a0f      	ldr	r2, [pc, #60]	; (80146f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80146b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80146b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80146b8:	f7ff fc4c 	bl	8013f54 <HAL_GetTick>
 80146bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80146be:	e009      	b.n	80146d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80146c0:	f7ff fc48 	bl	8013f54 <HAL_GetTick>
 80146c4:	4602      	mov	r2, r0
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	1ad3      	subs	r3, r2, r3
 80146ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80146ce:	d901      	bls.n	80146d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80146d0:	2303      	movs	r3, #3
 80146d2:	e007      	b.n	80146e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80146d4:	4b06      	ldr	r3, [pc, #24]	; (80146f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80146dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80146e0:	d1ee      	bne.n	80146c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80146e2:	2300      	movs	r3, #0
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	3708      	adds	r7, #8
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}
 80146ec:	40023800 	.word	0x40023800
 80146f0:	40007000 	.word	0x40007000

080146f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b086      	sub	sp, #24
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80146fc:	2300      	movs	r3, #0
 80146fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d101      	bne.n	801470a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8014706:	2301      	movs	r3, #1
 8014708:	e291      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	f003 0301 	and.w	r3, r3, #1
 8014712:	2b00      	cmp	r3, #0
 8014714:	f000 8087 	beq.w	8014826 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014718:	4b96      	ldr	r3, [pc, #600]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 801471a:	689b      	ldr	r3, [r3, #8]
 801471c:	f003 030c 	and.w	r3, r3, #12
 8014720:	2b04      	cmp	r3, #4
 8014722:	d00c      	beq.n	801473e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8014724:	4b93      	ldr	r3, [pc, #588]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014726:	689b      	ldr	r3, [r3, #8]
 8014728:	f003 030c 	and.w	r3, r3, #12
 801472c:	2b08      	cmp	r3, #8
 801472e:	d112      	bne.n	8014756 <HAL_RCC_OscConfig+0x62>
 8014730:	4b90      	ldr	r3, [pc, #576]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014732:	685b      	ldr	r3, [r3, #4]
 8014734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801473c:	d10b      	bne.n	8014756 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801473e:	4b8d      	ldr	r3, [pc, #564]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014746:	2b00      	cmp	r3, #0
 8014748:	d06c      	beq.n	8014824 <HAL_RCC_OscConfig+0x130>
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	685b      	ldr	r3, [r3, #4]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d168      	bne.n	8014824 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8014752:	2301      	movs	r3, #1
 8014754:	e26b      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	685b      	ldr	r3, [r3, #4]
 801475a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801475e:	d106      	bne.n	801476e <HAL_RCC_OscConfig+0x7a>
 8014760:	4b84      	ldr	r3, [pc, #528]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	4a83      	ldr	r2, [pc, #524]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801476a:	6013      	str	r3, [r2, #0]
 801476c:	e02e      	b.n	80147cc <HAL_RCC_OscConfig+0xd8>
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	685b      	ldr	r3, [r3, #4]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d10c      	bne.n	8014790 <HAL_RCC_OscConfig+0x9c>
 8014776:	4b7f      	ldr	r3, [pc, #508]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	4a7e      	ldr	r2, [pc, #504]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 801477c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014780:	6013      	str	r3, [r2, #0]
 8014782:	4b7c      	ldr	r3, [pc, #496]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	4a7b      	ldr	r2, [pc, #492]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801478c:	6013      	str	r3, [r2, #0]
 801478e:	e01d      	b.n	80147cc <HAL_RCC_OscConfig+0xd8>
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	685b      	ldr	r3, [r3, #4]
 8014794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014798:	d10c      	bne.n	80147b4 <HAL_RCC_OscConfig+0xc0>
 801479a:	4b76      	ldr	r3, [pc, #472]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	4a75      	ldr	r2, [pc, #468]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 80147a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80147a4:	6013      	str	r3, [r2, #0]
 80147a6:	4b73      	ldr	r3, [pc, #460]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	4a72      	ldr	r2, [pc, #456]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 80147ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80147b0:	6013      	str	r3, [r2, #0]
 80147b2:	e00b      	b.n	80147cc <HAL_RCC_OscConfig+0xd8>
 80147b4:	4b6f      	ldr	r3, [pc, #444]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	4a6e      	ldr	r2, [pc, #440]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 80147ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80147be:	6013      	str	r3, [r2, #0]
 80147c0:	4b6c      	ldr	r3, [pc, #432]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	4a6b      	ldr	r2, [pc, #428]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 80147c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80147ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	685b      	ldr	r3, [r3, #4]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d013      	beq.n	80147fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80147d4:	f7ff fbbe 	bl	8013f54 <HAL_GetTick>
 80147d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80147da:	e008      	b.n	80147ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80147dc:	f7ff fbba 	bl	8013f54 <HAL_GetTick>
 80147e0:	4602      	mov	r2, r0
 80147e2:	693b      	ldr	r3, [r7, #16]
 80147e4:	1ad3      	subs	r3, r2, r3
 80147e6:	2b64      	cmp	r3, #100	; 0x64
 80147e8:	d901      	bls.n	80147ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80147ea:	2303      	movs	r3, #3
 80147ec:	e21f      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80147ee:	4b61      	ldr	r3, [pc, #388]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d0f0      	beq.n	80147dc <HAL_RCC_OscConfig+0xe8>
 80147fa:	e014      	b.n	8014826 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80147fc:	f7ff fbaa 	bl	8013f54 <HAL_GetTick>
 8014800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014802:	e008      	b.n	8014816 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014804:	f7ff fba6 	bl	8013f54 <HAL_GetTick>
 8014808:	4602      	mov	r2, r0
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	1ad3      	subs	r3, r2, r3
 801480e:	2b64      	cmp	r3, #100	; 0x64
 8014810:	d901      	bls.n	8014816 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8014812:	2303      	movs	r3, #3
 8014814:	e20b      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014816:	4b57      	ldr	r3, [pc, #348]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801481e:	2b00      	cmp	r3, #0
 8014820:	d1f0      	bne.n	8014804 <HAL_RCC_OscConfig+0x110>
 8014822:	e000      	b.n	8014826 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	f003 0302 	and.w	r3, r3, #2
 801482e:	2b00      	cmp	r3, #0
 8014830:	d069      	beq.n	8014906 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8014832:	4b50      	ldr	r3, [pc, #320]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014834:	689b      	ldr	r3, [r3, #8]
 8014836:	f003 030c 	and.w	r3, r3, #12
 801483a:	2b00      	cmp	r3, #0
 801483c:	d00b      	beq.n	8014856 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801483e:	4b4d      	ldr	r3, [pc, #308]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014840:	689b      	ldr	r3, [r3, #8]
 8014842:	f003 030c 	and.w	r3, r3, #12
 8014846:	2b08      	cmp	r3, #8
 8014848:	d11c      	bne.n	8014884 <HAL_RCC_OscConfig+0x190>
 801484a:	4b4a      	ldr	r3, [pc, #296]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 801484c:	685b      	ldr	r3, [r3, #4]
 801484e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014852:	2b00      	cmp	r3, #0
 8014854:	d116      	bne.n	8014884 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014856:	4b47      	ldr	r3, [pc, #284]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	f003 0302 	and.w	r3, r3, #2
 801485e:	2b00      	cmp	r3, #0
 8014860:	d005      	beq.n	801486e <HAL_RCC_OscConfig+0x17a>
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	68db      	ldr	r3, [r3, #12]
 8014866:	2b01      	cmp	r3, #1
 8014868:	d001      	beq.n	801486e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801486a:	2301      	movs	r3, #1
 801486c:	e1df      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801486e:	4b41      	ldr	r3, [pc, #260]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	691b      	ldr	r3, [r3, #16]
 801487a:	00db      	lsls	r3, r3, #3
 801487c:	493d      	ldr	r1, [pc, #244]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 801487e:	4313      	orrs	r3, r2
 8014880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014882:	e040      	b.n	8014906 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	68db      	ldr	r3, [r3, #12]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d023      	beq.n	80148d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801488c:	4b39      	ldr	r3, [pc, #228]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	4a38      	ldr	r2, [pc, #224]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014892:	f043 0301 	orr.w	r3, r3, #1
 8014896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014898:	f7ff fb5c 	bl	8013f54 <HAL_GetTick>
 801489c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801489e:	e008      	b.n	80148b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80148a0:	f7ff fb58 	bl	8013f54 <HAL_GetTick>
 80148a4:	4602      	mov	r2, r0
 80148a6:	693b      	ldr	r3, [r7, #16]
 80148a8:	1ad3      	subs	r3, r2, r3
 80148aa:	2b02      	cmp	r3, #2
 80148ac:	d901      	bls.n	80148b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80148ae:	2303      	movs	r3, #3
 80148b0:	e1bd      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80148b2:	4b30      	ldr	r3, [pc, #192]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	f003 0302 	and.w	r3, r3, #2
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d0f0      	beq.n	80148a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80148be:	4b2d      	ldr	r3, [pc, #180]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	691b      	ldr	r3, [r3, #16]
 80148ca:	00db      	lsls	r3, r3, #3
 80148cc:	4929      	ldr	r1, [pc, #164]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 80148ce:	4313      	orrs	r3, r2
 80148d0:	600b      	str	r3, [r1, #0]
 80148d2:	e018      	b.n	8014906 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80148d4:	4b27      	ldr	r3, [pc, #156]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	4a26      	ldr	r2, [pc, #152]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 80148da:	f023 0301 	bic.w	r3, r3, #1
 80148de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80148e0:	f7ff fb38 	bl	8013f54 <HAL_GetTick>
 80148e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80148e6:	e008      	b.n	80148fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80148e8:	f7ff fb34 	bl	8013f54 <HAL_GetTick>
 80148ec:	4602      	mov	r2, r0
 80148ee:	693b      	ldr	r3, [r7, #16]
 80148f0:	1ad3      	subs	r3, r2, r3
 80148f2:	2b02      	cmp	r3, #2
 80148f4:	d901      	bls.n	80148fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80148f6:	2303      	movs	r3, #3
 80148f8:	e199      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80148fa:	4b1e      	ldr	r3, [pc, #120]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	f003 0302 	and.w	r3, r3, #2
 8014902:	2b00      	cmp	r3, #0
 8014904:	d1f0      	bne.n	80148e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	f003 0308 	and.w	r3, r3, #8
 801490e:	2b00      	cmp	r3, #0
 8014910:	d038      	beq.n	8014984 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	695b      	ldr	r3, [r3, #20]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d019      	beq.n	801494e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801491a:	4b16      	ldr	r3, [pc, #88]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 801491c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801491e:	4a15      	ldr	r2, [pc, #84]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014920:	f043 0301 	orr.w	r3, r3, #1
 8014924:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014926:	f7ff fb15 	bl	8013f54 <HAL_GetTick>
 801492a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801492c:	e008      	b.n	8014940 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801492e:	f7ff fb11 	bl	8013f54 <HAL_GetTick>
 8014932:	4602      	mov	r2, r0
 8014934:	693b      	ldr	r3, [r7, #16]
 8014936:	1ad3      	subs	r3, r2, r3
 8014938:	2b02      	cmp	r3, #2
 801493a:	d901      	bls.n	8014940 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801493c:	2303      	movs	r3, #3
 801493e:	e176      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014940:	4b0c      	ldr	r3, [pc, #48]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014944:	f003 0302 	and.w	r3, r3, #2
 8014948:	2b00      	cmp	r3, #0
 801494a:	d0f0      	beq.n	801492e <HAL_RCC_OscConfig+0x23a>
 801494c:	e01a      	b.n	8014984 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801494e:	4b09      	ldr	r3, [pc, #36]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014952:	4a08      	ldr	r2, [pc, #32]	; (8014974 <HAL_RCC_OscConfig+0x280>)
 8014954:	f023 0301 	bic.w	r3, r3, #1
 8014958:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801495a:	f7ff fafb 	bl	8013f54 <HAL_GetTick>
 801495e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014960:	e00a      	b.n	8014978 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014962:	f7ff faf7 	bl	8013f54 <HAL_GetTick>
 8014966:	4602      	mov	r2, r0
 8014968:	693b      	ldr	r3, [r7, #16]
 801496a:	1ad3      	subs	r3, r2, r3
 801496c:	2b02      	cmp	r3, #2
 801496e:	d903      	bls.n	8014978 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8014970:	2303      	movs	r3, #3
 8014972:	e15c      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
 8014974:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014978:	4b91      	ldr	r3, [pc, #580]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 801497a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801497c:	f003 0302 	and.w	r3, r3, #2
 8014980:	2b00      	cmp	r3, #0
 8014982:	d1ee      	bne.n	8014962 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	f003 0304 	and.w	r3, r3, #4
 801498c:	2b00      	cmp	r3, #0
 801498e:	f000 80a4 	beq.w	8014ada <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014992:	4b8b      	ldr	r3, [pc, #556]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801499a:	2b00      	cmp	r3, #0
 801499c:	d10d      	bne.n	80149ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801499e:	4b88      	ldr	r3, [pc, #544]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 80149a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149a2:	4a87      	ldr	r2, [pc, #540]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 80149a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80149a8:	6413      	str	r3, [r2, #64]	; 0x40
 80149aa:	4b85      	ldr	r3, [pc, #532]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 80149ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80149b2:	60bb      	str	r3, [r7, #8]
 80149b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80149b6:	2301      	movs	r3, #1
 80149b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80149ba:	4b82      	ldr	r3, [pc, #520]	; (8014bc4 <HAL_RCC_OscConfig+0x4d0>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d118      	bne.n	80149f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80149c6:	4b7f      	ldr	r3, [pc, #508]	; (8014bc4 <HAL_RCC_OscConfig+0x4d0>)
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	4a7e      	ldr	r2, [pc, #504]	; (8014bc4 <HAL_RCC_OscConfig+0x4d0>)
 80149cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80149d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80149d2:	f7ff fabf 	bl	8013f54 <HAL_GetTick>
 80149d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80149d8:	e008      	b.n	80149ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80149da:	f7ff fabb 	bl	8013f54 <HAL_GetTick>
 80149de:	4602      	mov	r2, r0
 80149e0:	693b      	ldr	r3, [r7, #16]
 80149e2:	1ad3      	subs	r3, r2, r3
 80149e4:	2b64      	cmp	r3, #100	; 0x64
 80149e6:	d901      	bls.n	80149ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80149e8:	2303      	movs	r3, #3
 80149ea:	e120      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80149ec:	4b75      	ldr	r3, [pc, #468]	; (8014bc4 <HAL_RCC_OscConfig+0x4d0>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d0f0      	beq.n	80149da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	689b      	ldr	r3, [r3, #8]
 80149fc:	2b01      	cmp	r3, #1
 80149fe:	d106      	bne.n	8014a0e <HAL_RCC_OscConfig+0x31a>
 8014a00:	4b6f      	ldr	r3, [pc, #444]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a04:	4a6e      	ldr	r2, [pc, #440]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a06:	f043 0301 	orr.w	r3, r3, #1
 8014a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8014a0c:	e02d      	b.n	8014a6a <HAL_RCC_OscConfig+0x376>
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	689b      	ldr	r3, [r3, #8]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d10c      	bne.n	8014a30 <HAL_RCC_OscConfig+0x33c>
 8014a16:	4b6a      	ldr	r3, [pc, #424]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a1a:	4a69      	ldr	r2, [pc, #420]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a1c:	f023 0301 	bic.w	r3, r3, #1
 8014a20:	6713      	str	r3, [r2, #112]	; 0x70
 8014a22:	4b67      	ldr	r3, [pc, #412]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a26:	4a66      	ldr	r2, [pc, #408]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a28:	f023 0304 	bic.w	r3, r3, #4
 8014a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8014a2e:	e01c      	b.n	8014a6a <HAL_RCC_OscConfig+0x376>
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	689b      	ldr	r3, [r3, #8]
 8014a34:	2b05      	cmp	r3, #5
 8014a36:	d10c      	bne.n	8014a52 <HAL_RCC_OscConfig+0x35e>
 8014a38:	4b61      	ldr	r3, [pc, #388]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a3c:	4a60      	ldr	r2, [pc, #384]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a3e:	f043 0304 	orr.w	r3, r3, #4
 8014a42:	6713      	str	r3, [r2, #112]	; 0x70
 8014a44:	4b5e      	ldr	r3, [pc, #376]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a48:	4a5d      	ldr	r2, [pc, #372]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a4a:	f043 0301 	orr.w	r3, r3, #1
 8014a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8014a50:	e00b      	b.n	8014a6a <HAL_RCC_OscConfig+0x376>
 8014a52:	4b5b      	ldr	r3, [pc, #364]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a56:	4a5a      	ldr	r2, [pc, #360]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a58:	f023 0301 	bic.w	r3, r3, #1
 8014a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8014a5e:	4b58      	ldr	r3, [pc, #352]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a62:	4a57      	ldr	r2, [pc, #348]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a64:	f023 0304 	bic.w	r3, r3, #4
 8014a68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	689b      	ldr	r3, [r3, #8]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d015      	beq.n	8014a9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014a72:	f7ff fa6f 	bl	8013f54 <HAL_GetTick>
 8014a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014a78:	e00a      	b.n	8014a90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014a7a:	f7ff fa6b 	bl	8013f54 <HAL_GetTick>
 8014a7e:	4602      	mov	r2, r0
 8014a80:	693b      	ldr	r3, [r7, #16]
 8014a82:	1ad3      	subs	r3, r2, r3
 8014a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8014a88:	4293      	cmp	r3, r2
 8014a8a:	d901      	bls.n	8014a90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8014a8c:	2303      	movs	r3, #3
 8014a8e:	e0ce      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014a90:	4b4b      	ldr	r3, [pc, #300]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a94:	f003 0302 	and.w	r3, r3, #2
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d0ee      	beq.n	8014a7a <HAL_RCC_OscConfig+0x386>
 8014a9c:	e014      	b.n	8014ac8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014a9e:	f7ff fa59 	bl	8013f54 <HAL_GetTick>
 8014aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014aa4:	e00a      	b.n	8014abc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014aa6:	f7ff fa55 	bl	8013f54 <HAL_GetTick>
 8014aaa:	4602      	mov	r2, r0
 8014aac:	693b      	ldr	r3, [r7, #16]
 8014aae:	1ad3      	subs	r3, r2, r3
 8014ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8014ab4:	4293      	cmp	r3, r2
 8014ab6:	d901      	bls.n	8014abc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8014ab8:	2303      	movs	r3, #3
 8014aba:	e0b8      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014abc:	4b40      	ldr	r3, [pc, #256]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ac0:	f003 0302 	and.w	r3, r3, #2
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d1ee      	bne.n	8014aa6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8014ac8:	7dfb      	ldrb	r3, [r7, #23]
 8014aca:	2b01      	cmp	r3, #1
 8014acc:	d105      	bne.n	8014ada <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014ace:	4b3c      	ldr	r3, [pc, #240]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ad2:	4a3b      	ldr	r2, [pc, #236]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014ad8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	699b      	ldr	r3, [r3, #24]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	f000 80a4 	beq.w	8014c2c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014ae4:	4b36      	ldr	r3, [pc, #216]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014ae6:	689b      	ldr	r3, [r3, #8]
 8014ae8:	f003 030c 	and.w	r3, r3, #12
 8014aec:	2b08      	cmp	r3, #8
 8014aee:	d06b      	beq.n	8014bc8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	699b      	ldr	r3, [r3, #24]
 8014af4:	2b02      	cmp	r3, #2
 8014af6:	d149      	bne.n	8014b8c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014af8:	4b31      	ldr	r3, [pc, #196]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	4a30      	ldr	r2, [pc, #192]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014b04:	f7ff fa26 	bl	8013f54 <HAL_GetTick>
 8014b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014b0a:	e008      	b.n	8014b1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014b0c:	f7ff fa22 	bl	8013f54 <HAL_GetTick>
 8014b10:	4602      	mov	r2, r0
 8014b12:	693b      	ldr	r3, [r7, #16]
 8014b14:	1ad3      	subs	r3, r2, r3
 8014b16:	2b02      	cmp	r3, #2
 8014b18:	d901      	bls.n	8014b1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8014b1a:	2303      	movs	r3, #3
 8014b1c:	e087      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014b1e:	4b28      	ldr	r3, [pc, #160]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d1f0      	bne.n	8014b0c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	69da      	ldr	r2, [r3, #28]
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	6a1b      	ldr	r3, [r3, #32]
 8014b32:	431a      	orrs	r2, r3
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b38:	019b      	lsls	r3, r3, #6
 8014b3a:	431a      	orrs	r2, r3
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b40:	085b      	lsrs	r3, r3, #1
 8014b42:	3b01      	subs	r3, #1
 8014b44:	041b      	lsls	r3, r3, #16
 8014b46:	431a      	orrs	r2, r3
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b4c:	061b      	lsls	r3, r3, #24
 8014b4e:	4313      	orrs	r3, r2
 8014b50:	4a1b      	ldr	r2, [pc, #108]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014b52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014b56:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014b58:	4b19      	ldr	r3, [pc, #100]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	4a18      	ldr	r2, [pc, #96]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014b64:	f7ff f9f6 	bl	8013f54 <HAL_GetTick>
 8014b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014b6a:	e008      	b.n	8014b7e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014b6c:	f7ff f9f2 	bl	8013f54 <HAL_GetTick>
 8014b70:	4602      	mov	r2, r0
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	1ad3      	subs	r3, r2, r3
 8014b76:	2b02      	cmp	r3, #2
 8014b78:	d901      	bls.n	8014b7e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8014b7a:	2303      	movs	r3, #3
 8014b7c:	e057      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014b7e:	4b10      	ldr	r3, [pc, #64]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d0f0      	beq.n	8014b6c <HAL_RCC_OscConfig+0x478>
 8014b8a:	e04f      	b.n	8014c2c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014b8c:	4b0c      	ldr	r3, [pc, #48]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	4a0b      	ldr	r2, [pc, #44]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014b98:	f7ff f9dc 	bl	8013f54 <HAL_GetTick>
 8014b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014b9e:	e008      	b.n	8014bb2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014ba0:	f7ff f9d8 	bl	8013f54 <HAL_GetTick>
 8014ba4:	4602      	mov	r2, r0
 8014ba6:	693b      	ldr	r3, [r7, #16]
 8014ba8:	1ad3      	subs	r3, r2, r3
 8014baa:	2b02      	cmp	r3, #2
 8014bac:	d901      	bls.n	8014bb2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8014bae:	2303      	movs	r3, #3
 8014bb0:	e03d      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014bb2:	4b03      	ldr	r3, [pc, #12]	; (8014bc0 <HAL_RCC_OscConfig+0x4cc>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d1f0      	bne.n	8014ba0 <HAL_RCC_OscConfig+0x4ac>
 8014bbe:	e035      	b.n	8014c2c <HAL_RCC_OscConfig+0x538>
 8014bc0:	40023800 	.word	0x40023800
 8014bc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8014bc8:	4b1b      	ldr	r3, [pc, #108]	; (8014c38 <HAL_RCC_OscConfig+0x544>)
 8014bca:	685b      	ldr	r3, [r3, #4]
 8014bcc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	699b      	ldr	r3, [r3, #24]
 8014bd2:	2b01      	cmp	r3, #1
 8014bd4:	d028      	beq.n	8014c28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014be0:	429a      	cmp	r2, r3
 8014be2:	d121      	bne.n	8014c28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014bee:	429a      	cmp	r2, r3
 8014bf0:	d11a      	bne.n	8014c28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8014bf2:	68fa      	ldr	r2, [r7, #12]
 8014bf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8014bf8:	4013      	ands	r3, r2
 8014bfa:	687a      	ldr	r2, [r7, #4]
 8014bfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014bfe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014c00:	4293      	cmp	r3, r2
 8014c02:	d111      	bne.n	8014c28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c0e:	085b      	lsrs	r3, r3, #1
 8014c10:	3b01      	subs	r3, #1
 8014c12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d107      	bne.n	8014c28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8014c24:	429a      	cmp	r2, r3
 8014c26:	d001      	beq.n	8014c2c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8014c28:	2301      	movs	r3, #1
 8014c2a:	e000      	b.n	8014c2e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8014c2c:	2300      	movs	r3, #0
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3718      	adds	r7, #24
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}
 8014c36:	bf00      	nop
 8014c38:	40023800 	.word	0x40023800

08014c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b084      	sub	sp, #16
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
 8014c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8014c46:	2300      	movs	r3, #0
 8014c48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d101      	bne.n	8014c54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8014c50:	2301      	movs	r3, #1
 8014c52:	e0d0      	b.n	8014df6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8014c54:	4b6a      	ldr	r3, [pc, #424]	; (8014e00 <HAL_RCC_ClockConfig+0x1c4>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	f003 030f 	and.w	r3, r3, #15
 8014c5c:	683a      	ldr	r2, [r7, #0]
 8014c5e:	429a      	cmp	r2, r3
 8014c60:	d910      	bls.n	8014c84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014c62:	4b67      	ldr	r3, [pc, #412]	; (8014e00 <HAL_RCC_ClockConfig+0x1c4>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	f023 020f 	bic.w	r2, r3, #15
 8014c6a:	4965      	ldr	r1, [pc, #404]	; (8014e00 <HAL_RCC_ClockConfig+0x1c4>)
 8014c6c:	683b      	ldr	r3, [r7, #0]
 8014c6e:	4313      	orrs	r3, r2
 8014c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014c72:	4b63      	ldr	r3, [pc, #396]	; (8014e00 <HAL_RCC_ClockConfig+0x1c4>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	f003 030f 	and.w	r3, r3, #15
 8014c7a:	683a      	ldr	r2, [r7, #0]
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d001      	beq.n	8014c84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8014c80:	2301      	movs	r3, #1
 8014c82:	e0b8      	b.n	8014df6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	f003 0302 	and.w	r3, r3, #2
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d020      	beq.n	8014cd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	f003 0304 	and.w	r3, r3, #4
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d005      	beq.n	8014ca8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8014c9c:	4b59      	ldr	r3, [pc, #356]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014c9e:	689b      	ldr	r3, [r3, #8]
 8014ca0:	4a58      	ldr	r2, [pc, #352]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8014ca6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	f003 0308 	and.w	r3, r3, #8
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d005      	beq.n	8014cc0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8014cb4:	4b53      	ldr	r3, [pc, #332]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014cb6:	689b      	ldr	r3, [r3, #8]
 8014cb8:	4a52      	ldr	r2, [pc, #328]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8014cbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014cc0:	4b50      	ldr	r3, [pc, #320]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014cc2:	689b      	ldr	r3, [r3, #8]
 8014cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	689b      	ldr	r3, [r3, #8]
 8014ccc:	494d      	ldr	r1, [pc, #308]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014cce:	4313      	orrs	r3, r2
 8014cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	f003 0301 	and.w	r3, r3, #1
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d040      	beq.n	8014d60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	685b      	ldr	r3, [r3, #4]
 8014ce2:	2b01      	cmp	r3, #1
 8014ce4:	d107      	bne.n	8014cf6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014ce6:	4b47      	ldr	r3, [pc, #284]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d115      	bne.n	8014d1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	e07f      	b.n	8014df6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	685b      	ldr	r3, [r3, #4]
 8014cfa:	2b02      	cmp	r3, #2
 8014cfc:	d107      	bne.n	8014d0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014cfe:	4b41      	ldr	r3, [pc, #260]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d109      	bne.n	8014d1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	e073      	b.n	8014df6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014d0e:	4b3d      	ldr	r3, [pc, #244]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	f003 0302 	and.w	r3, r3, #2
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d101      	bne.n	8014d1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8014d1a:	2301      	movs	r3, #1
 8014d1c:	e06b      	b.n	8014df6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014d1e:	4b39      	ldr	r3, [pc, #228]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014d20:	689b      	ldr	r3, [r3, #8]
 8014d22:	f023 0203 	bic.w	r2, r3, #3
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	685b      	ldr	r3, [r3, #4]
 8014d2a:	4936      	ldr	r1, [pc, #216]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014d2c:	4313      	orrs	r3, r2
 8014d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014d30:	f7ff f910 	bl	8013f54 <HAL_GetTick>
 8014d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014d36:	e00a      	b.n	8014d4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014d38:	f7ff f90c 	bl	8013f54 <HAL_GetTick>
 8014d3c:	4602      	mov	r2, r0
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	1ad3      	subs	r3, r2, r3
 8014d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8014d46:	4293      	cmp	r3, r2
 8014d48:	d901      	bls.n	8014d4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8014d4a:	2303      	movs	r3, #3
 8014d4c:	e053      	b.n	8014df6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014d4e:	4b2d      	ldr	r3, [pc, #180]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014d50:	689b      	ldr	r3, [r3, #8]
 8014d52:	f003 020c 	and.w	r2, r3, #12
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	685b      	ldr	r3, [r3, #4]
 8014d5a:	009b      	lsls	r3, r3, #2
 8014d5c:	429a      	cmp	r2, r3
 8014d5e:	d1eb      	bne.n	8014d38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8014d60:	4b27      	ldr	r3, [pc, #156]	; (8014e00 <HAL_RCC_ClockConfig+0x1c4>)
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	f003 030f 	and.w	r3, r3, #15
 8014d68:	683a      	ldr	r2, [r7, #0]
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d210      	bcs.n	8014d90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014d6e:	4b24      	ldr	r3, [pc, #144]	; (8014e00 <HAL_RCC_ClockConfig+0x1c4>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	f023 020f 	bic.w	r2, r3, #15
 8014d76:	4922      	ldr	r1, [pc, #136]	; (8014e00 <HAL_RCC_ClockConfig+0x1c4>)
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	4313      	orrs	r3, r2
 8014d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014d7e:	4b20      	ldr	r3, [pc, #128]	; (8014e00 <HAL_RCC_ClockConfig+0x1c4>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	f003 030f 	and.w	r3, r3, #15
 8014d86:	683a      	ldr	r2, [r7, #0]
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	d001      	beq.n	8014d90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8014d8c:	2301      	movs	r3, #1
 8014d8e:	e032      	b.n	8014df6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	f003 0304 	and.w	r3, r3, #4
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d008      	beq.n	8014dae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014d9c:	4b19      	ldr	r3, [pc, #100]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014d9e:	689b      	ldr	r3, [r3, #8]
 8014da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	68db      	ldr	r3, [r3, #12]
 8014da8:	4916      	ldr	r1, [pc, #88]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014daa:	4313      	orrs	r3, r2
 8014dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	f003 0308 	and.w	r3, r3, #8
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d009      	beq.n	8014dce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8014dba:	4b12      	ldr	r3, [pc, #72]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014dbc:	689b      	ldr	r3, [r3, #8]
 8014dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	691b      	ldr	r3, [r3, #16]
 8014dc6:	00db      	lsls	r3, r3, #3
 8014dc8:	490e      	ldr	r1, [pc, #56]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014dca:	4313      	orrs	r3, r2
 8014dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8014dce:	f000 f821 	bl	8014e14 <HAL_RCC_GetSysClockFreq>
 8014dd2:	4602      	mov	r2, r0
 8014dd4:	4b0b      	ldr	r3, [pc, #44]	; (8014e04 <HAL_RCC_ClockConfig+0x1c8>)
 8014dd6:	689b      	ldr	r3, [r3, #8]
 8014dd8:	091b      	lsrs	r3, r3, #4
 8014dda:	f003 030f 	and.w	r3, r3, #15
 8014dde:	490a      	ldr	r1, [pc, #40]	; (8014e08 <HAL_RCC_ClockConfig+0x1cc>)
 8014de0:	5ccb      	ldrb	r3, [r1, r3]
 8014de2:	fa22 f303 	lsr.w	r3, r2, r3
 8014de6:	4a09      	ldr	r2, [pc, #36]	; (8014e0c <HAL_RCC_ClockConfig+0x1d0>)
 8014de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8014dea:	4b09      	ldr	r3, [pc, #36]	; (8014e10 <HAL_RCC_ClockConfig+0x1d4>)
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	4618      	mov	r0, r3
 8014df0:	f7ff f86c 	bl	8013ecc <HAL_InitTick>

  return HAL_OK;
 8014df4:	2300      	movs	r3, #0
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	3710      	adds	r7, #16
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}
 8014dfe:	bf00      	nop
 8014e00:	40023c00 	.word	0x40023c00
 8014e04:	40023800 	.word	0x40023800
 8014e08:	0801a494 	.word	0x0801a494
 8014e0c:	20000000 	.word	0x20000000
 8014e10:	20000004 	.word	0x20000004

08014e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014e14:	b5b0      	push	{r4, r5, r7, lr}
 8014e16:	b084      	sub	sp, #16
 8014e18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8014e1a:	2100      	movs	r1, #0
 8014e1c:	6079      	str	r1, [r7, #4]
 8014e1e:	2100      	movs	r1, #0
 8014e20:	60f9      	str	r1, [r7, #12]
 8014e22:	2100      	movs	r1, #0
 8014e24:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8014e26:	2100      	movs	r1, #0
 8014e28:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014e2a:	4952      	ldr	r1, [pc, #328]	; (8014f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8014e2c:	6889      	ldr	r1, [r1, #8]
 8014e2e:	f001 010c 	and.w	r1, r1, #12
 8014e32:	2908      	cmp	r1, #8
 8014e34:	d00d      	beq.n	8014e52 <HAL_RCC_GetSysClockFreq+0x3e>
 8014e36:	2908      	cmp	r1, #8
 8014e38:	f200 8094 	bhi.w	8014f64 <HAL_RCC_GetSysClockFreq+0x150>
 8014e3c:	2900      	cmp	r1, #0
 8014e3e:	d002      	beq.n	8014e46 <HAL_RCC_GetSysClockFreq+0x32>
 8014e40:	2904      	cmp	r1, #4
 8014e42:	d003      	beq.n	8014e4c <HAL_RCC_GetSysClockFreq+0x38>
 8014e44:	e08e      	b.n	8014f64 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8014e46:	4b4c      	ldr	r3, [pc, #304]	; (8014f78 <HAL_RCC_GetSysClockFreq+0x164>)
 8014e48:	60bb      	str	r3, [r7, #8]
      break;
 8014e4a:	e08e      	b.n	8014f6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8014e4c:	4b4b      	ldr	r3, [pc, #300]	; (8014f7c <HAL_RCC_GetSysClockFreq+0x168>)
 8014e4e:	60bb      	str	r3, [r7, #8]
      break;
 8014e50:	e08b      	b.n	8014f6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014e52:	4948      	ldr	r1, [pc, #288]	; (8014f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8014e54:	6849      	ldr	r1, [r1, #4]
 8014e56:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8014e5a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8014e5c:	4945      	ldr	r1, [pc, #276]	; (8014f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8014e5e:	6849      	ldr	r1, [r1, #4]
 8014e60:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8014e64:	2900      	cmp	r1, #0
 8014e66:	d024      	beq.n	8014eb2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014e68:	4942      	ldr	r1, [pc, #264]	; (8014f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8014e6a:	6849      	ldr	r1, [r1, #4]
 8014e6c:	0989      	lsrs	r1, r1, #6
 8014e6e:	4608      	mov	r0, r1
 8014e70:	f04f 0100 	mov.w	r1, #0
 8014e74:	f240 14ff 	movw	r4, #511	; 0x1ff
 8014e78:	f04f 0500 	mov.w	r5, #0
 8014e7c:	ea00 0204 	and.w	r2, r0, r4
 8014e80:	ea01 0305 	and.w	r3, r1, r5
 8014e84:	493d      	ldr	r1, [pc, #244]	; (8014f7c <HAL_RCC_GetSysClockFreq+0x168>)
 8014e86:	fb01 f003 	mul.w	r0, r1, r3
 8014e8a:	2100      	movs	r1, #0
 8014e8c:	fb01 f102 	mul.w	r1, r1, r2
 8014e90:	1844      	adds	r4, r0, r1
 8014e92:	493a      	ldr	r1, [pc, #232]	; (8014f7c <HAL_RCC_GetSysClockFreq+0x168>)
 8014e94:	fba2 0101 	umull	r0, r1, r2, r1
 8014e98:	1863      	adds	r3, r4, r1
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	461a      	mov	r2, r3
 8014ea0:	f04f 0300 	mov.w	r3, #0
 8014ea4:	f7eb fee8 	bl	8000c78 <__aeabi_uldivmod>
 8014ea8:	4602      	mov	r2, r0
 8014eaa:	460b      	mov	r3, r1
 8014eac:	4613      	mov	r3, r2
 8014eae:	60fb      	str	r3, [r7, #12]
 8014eb0:	e04a      	b.n	8014f48 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014eb2:	4b30      	ldr	r3, [pc, #192]	; (8014f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8014eb4:	685b      	ldr	r3, [r3, #4]
 8014eb6:	099b      	lsrs	r3, r3, #6
 8014eb8:	461a      	mov	r2, r3
 8014eba:	f04f 0300 	mov.w	r3, #0
 8014ebe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8014ec2:	f04f 0100 	mov.w	r1, #0
 8014ec6:	ea02 0400 	and.w	r4, r2, r0
 8014eca:	ea03 0501 	and.w	r5, r3, r1
 8014ece:	4620      	mov	r0, r4
 8014ed0:	4629      	mov	r1, r5
 8014ed2:	f04f 0200 	mov.w	r2, #0
 8014ed6:	f04f 0300 	mov.w	r3, #0
 8014eda:	014b      	lsls	r3, r1, #5
 8014edc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8014ee0:	0142      	lsls	r2, r0, #5
 8014ee2:	4610      	mov	r0, r2
 8014ee4:	4619      	mov	r1, r3
 8014ee6:	1b00      	subs	r0, r0, r4
 8014ee8:	eb61 0105 	sbc.w	r1, r1, r5
 8014eec:	f04f 0200 	mov.w	r2, #0
 8014ef0:	f04f 0300 	mov.w	r3, #0
 8014ef4:	018b      	lsls	r3, r1, #6
 8014ef6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8014efa:	0182      	lsls	r2, r0, #6
 8014efc:	1a12      	subs	r2, r2, r0
 8014efe:	eb63 0301 	sbc.w	r3, r3, r1
 8014f02:	f04f 0000 	mov.w	r0, #0
 8014f06:	f04f 0100 	mov.w	r1, #0
 8014f0a:	00d9      	lsls	r1, r3, #3
 8014f0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014f10:	00d0      	lsls	r0, r2, #3
 8014f12:	4602      	mov	r2, r0
 8014f14:	460b      	mov	r3, r1
 8014f16:	1912      	adds	r2, r2, r4
 8014f18:	eb45 0303 	adc.w	r3, r5, r3
 8014f1c:	f04f 0000 	mov.w	r0, #0
 8014f20:	f04f 0100 	mov.w	r1, #0
 8014f24:	0299      	lsls	r1, r3, #10
 8014f26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8014f2a:	0290      	lsls	r0, r2, #10
 8014f2c:	4602      	mov	r2, r0
 8014f2e:	460b      	mov	r3, r1
 8014f30:	4610      	mov	r0, r2
 8014f32:	4619      	mov	r1, r3
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	461a      	mov	r2, r3
 8014f38:	f04f 0300 	mov.w	r3, #0
 8014f3c:	f7eb fe9c 	bl	8000c78 <__aeabi_uldivmod>
 8014f40:	4602      	mov	r2, r0
 8014f42:	460b      	mov	r3, r1
 8014f44:	4613      	mov	r3, r2
 8014f46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8014f48:	4b0a      	ldr	r3, [pc, #40]	; (8014f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8014f4a:	685b      	ldr	r3, [r3, #4]
 8014f4c:	0c1b      	lsrs	r3, r3, #16
 8014f4e:	f003 0303 	and.w	r3, r3, #3
 8014f52:	3301      	adds	r3, #1
 8014f54:	005b      	lsls	r3, r3, #1
 8014f56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8014f58:	68fa      	ldr	r2, [r7, #12]
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f60:	60bb      	str	r3, [r7, #8]
      break;
 8014f62:	e002      	b.n	8014f6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8014f64:	4b04      	ldr	r3, [pc, #16]	; (8014f78 <HAL_RCC_GetSysClockFreq+0x164>)
 8014f66:	60bb      	str	r3, [r7, #8]
      break;
 8014f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8014f6a:	68bb      	ldr	r3, [r7, #8]
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	3710      	adds	r7, #16
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bdb0      	pop	{r4, r5, r7, pc}
 8014f74:	40023800 	.word	0x40023800
 8014f78:	00f42400 	.word	0x00f42400
 8014f7c:	017d7840 	.word	0x017d7840

08014f80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014f80:	b480      	push	{r7}
 8014f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014f84:	4b03      	ldr	r3, [pc, #12]	; (8014f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8014f86:	681b      	ldr	r3, [r3, #0]
}
 8014f88:	4618      	mov	r0, r3
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f90:	4770      	bx	lr
 8014f92:	bf00      	nop
 8014f94:	20000000 	.word	0x20000000

08014f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8014f9c:	f7ff fff0 	bl	8014f80 <HAL_RCC_GetHCLKFreq>
 8014fa0:	4602      	mov	r2, r0
 8014fa2:	4b05      	ldr	r3, [pc, #20]	; (8014fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8014fa4:	689b      	ldr	r3, [r3, #8]
 8014fa6:	0a9b      	lsrs	r3, r3, #10
 8014fa8:	f003 0307 	and.w	r3, r3, #7
 8014fac:	4903      	ldr	r1, [pc, #12]	; (8014fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8014fae:	5ccb      	ldrb	r3, [r1, r3]
 8014fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	bd80      	pop	{r7, pc}
 8014fb8:	40023800 	.word	0x40023800
 8014fbc:	0801a4a4 	.word	0x0801a4a4

08014fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8014fc4:	f7ff ffdc 	bl	8014f80 <HAL_RCC_GetHCLKFreq>
 8014fc8:	4602      	mov	r2, r0
 8014fca:	4b05      	ldr	r3, [pc, #20]	; (8014fe0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8014fcc:	689b      	ldr	r3, [r3, #8]
 8014fce:	0b5b      	lsrs	r3, r3, #13
 8014fd0:	f003 0307 	and.w	r3, r3, #7
 8014fd4:	4903      	ldr	r1, [pc, #12]	; (8014fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8014fd6:	5ccb      	ldrb	r3, [r1, r3]
 8014fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	bd80      	pop	{r7, pc}
 8014fe0:	40023800 	.word	0x40023800
 8014fe4:	0801a4a4 	.word	0x0801a4a4

08014fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b088      	sub	sp, #32
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8015000:	2300      	movs	r3, #0
 8015002:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	f003 0301 	and.w	r3, r3, #1
 801500c:	2b00      	cmp	r3, #0
 801500e:	d012      	beq.n	8015036 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8015010:	4b69      	ldr	r3, [pc, #420]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015012:	689b      	ldr	r3, [r3, #8]
 8015014:	4a68      	ldr	r2, [pc, #416]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015016:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801501a:	6093      	str	r3, [r2, #8]
 801501c:	4b66      	ldr	r3, [pc, #408]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801501e:	689a      	ldr	r2, [r3, #8]
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015024:	4964      	ldr	r1, [pc, #400]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015026:	4313      	orrs	r3, r2
 8015028:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801502e:	2b00      	cmp	r3, #0
 8015030:	d101      	bne.n	8015036 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8015032:	2301      	movs	r3, #1
 8015034:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801503e:	2b00      	cmp	r3, #0
 8015040:	d017      	beq.n	8015072 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015042:	4b5d      	ldr	r3, [pc, #372]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015050:	4959      	ldr	r1, [pc, #356]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015052:	4313      	orrs	r3, r2
 8015054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801505c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015060:	d101      	bne.n	8015066 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8015062:	2301      	movs	r3, #1
 8015064:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801506a:	2b00      	cmp	r3, #0
 801506c:	d101      	bne.n	8015072 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801506e:	2301      	movs	r3, #1
 8015070:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801507a:	2b00      	cmp	r3, #0
 801507c:	d017      	beq.n	80150ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801507e:	4b4e      	ldr	r3, [pc, #312]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015084:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801508c:	494a      	ldr	r1, [pc, #296]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801508e:	4313      	orrs	r3, r2
 8015090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801509c:	d101      	bne.n	80150a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801509e:	2301      	movs	r3, #1
 80150a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d101      	bne.n	80150ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80150aa:	2301      	movs	r3, #1
 80150ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d001      	beq.n	80150be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80150ba:	2301      	movs	r3, #1
 80150bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	f003 0320 	and.w	r3, r3, #32
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	f000 808b 	beq.w	80151e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80150cc:	4b3a      	ldr	r3, [pc, #232]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80150ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150d0:	4a39      	ldr	r2, [pc, #228]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80150d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80150d6:	6413      	str	r3, [r2, #64]	; 0x40
 80150d8:	4b37      	ldr	r3, [pc, #220]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80150da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80150e0:	60bb      	str	r3, [r7, #8]
 80150e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80150e4:	4b35      	ldr	r3, [pc, #212]	; (80151bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	4a34      	ldr	r2, [pc, #208]	; (80151bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80150ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80150ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80150f0:	f7fe ff30 	bl	8013f54 <HAL_GetTick>
 80150f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80150f6:	e008      	b.n	801510a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80150f8:	f7fe ff2c 	bl	8013f54 <HAL_GetTick>
 80150fc:	4602      	mov	r2, r0
 80150fe:	697b      	ldr	r3, [r7, #20]
 8015100:	1ad3      	subs	r3, r2, r3
 8015102:	2b64      	cmp	r3, #100	; 0x64
 8015104:	d901      	bls.n	801510a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8015106:	2303      	movs	r3, #3
 8015108:	e357      	b.n	80157ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801510a:	4b2c      	ldr	r3, [pc, #176]	; (80151bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015112:	2b00      	cmp	r3, #0
 8015114:	d0f0      	beq.n	80150f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8015116:	4b28      	ldr	r3, [pc, #160]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801511a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801511e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8015120:	693b      	ldr	r3, [r7, #16]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d035      	beq.n	8015192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801512a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801512e:	693a      	ldr	r2, [r7, #16]
 8015130:	429a      	cmp	r2, r3
 8015132:	d02e      	beq.n	8015192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8015134:	4b20      	ldr	r3, [pc, #128]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801513c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801513e:	4b1e      	ldr	r3, [pc, #120]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015142:	4a1d      	ldr	r2, [pc, #116]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015148:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801514a:	4b1b      	ldr	r3, [pc, #108]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801514e:	4a1a      	ldr	r2, [pc, #104]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015154:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8015156:	4a18      	ldr	r2, [pc, #96]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801515c:	4b16      	ldr	r3, [pc, #88]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801515e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015160:	f003 0301 	and.w	r3, r3, #1
 8015164:	2b01      	cmp	r3, #1
 8015166:	d114      	bne.n	8015192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015168:	f7fe fef4 	bl	8013f54 <HAL_GetTick>
 801516c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801516e:	e00a      	b.n	8015186 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015170:	f7fe fef0 	bl	8013f54 <HAL_GetTick>
 8015174:	4602      	mov	r2, r0
 8015176:	697b      	ldr	r3, [r7, #20]
 8015178:	1ad3      	subs	r3, r2, r3
 801517a:	f241 3288 	movw	r2, #5000	; 0x1388
 801517e:	4293      	cmp	r3, r2
 8015180:	d901      	bls.n	8015186 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8015182:	2303      	movs	r3, #3
 8015184:	e319      	b.n	80157ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015186:	4b0c      	ldr	r3, [pc, #48]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801518a:	f003 0302 	and.w	r3, r3, #2
 801518e:	2b00      	cmp	r3, #0
 8015190:	d0ee      	beq.n	8015170 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801519a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801519e:	d111      	bne.n	80151c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80151a0:	4b05      	ldr	r3, [pc, #20]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80151a2:	689b      	ldr	r3, [r3, #8]
 80151a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80151ac:	4b04      	ldr	r3, [pc, #16]	; (80151c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80151ae:	400b      	ands	r3, r1
 80151b0:	4901      	ldr	r1, [pc, #4]	; (80151b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80151b2:	4313      	orrs	r3, r2
 80151b4:	608b      	str	r3, [r1, #8]
 80151b6:	e00b      	b.n	80151d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80151b8:	40023800 	.word	0x40023800
 80151bc:	40007000 	.word	0x40007000
 80151c0:	0ffffcff 	.word	0x0ffffcff
 80151c4:	4bb1      	ldr	r3, [pc, #708]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80151c6:	689b      	ldr	r3, [r3, #8]
 80151c8:	4ab0      	ldr	r2, [pc, #704]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80151ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80151ce:	6093      	str	r3, [r2, #8]
 80151d0:	4bae      	ldr	r3, [pc, #696]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80151d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80151dc:	49ab      	ldr	r1, [pc, #684]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80151de:	4313      	orrs	r3, r2
 80151e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	f003 0310 	and.w	r3, r3, #16
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d010      	beq.n	8015210 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80151ee:	4ba7      	ldr	r3, [pc, #668]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80151f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80151f4:	4aa5      	ldr	r2, [pc, #660]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80151f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80151fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80151fe:	4ba3      	ldr	r3, [pc, #652]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015200:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015208:	49a0      	ldr	r1, [pc, #640]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801520a:	4313      	orrs	r3, r2
 801520c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015218:	2b00      	cmp	r3, #0
 801521a:	d00a      	beq.n	8015232 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801521c:	4b9b      	ldr	r3, [pc, #620]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801521e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015222:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801522a:	4998      	ldr	r1, [pc, #608]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801522c:	4313      	orrs	r3, r2
 801522e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801523a:	2b00      	cmp	r3, #0
 801523c:	d00a      	beq.n	8015254 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801523e:	4b93      	ldr	r3, [pc, #588]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015244:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801524c:	498f      	ldr	r1, [pc, #572]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801524e:	4313      	orrs	r3, r2
 8015250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801525c:	2b00      	cmp	r3, #0
 801525e:	d00a      	beq.n	8015276 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015260:	4b8a      	ldr	r3, [pc, #552]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015266:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801526e:	4987      	ldr	r1, [pc, #540]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015270:	4313      	orrs	r3, r2
 8015272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801527e:	2b00      	cmp	r3, #0
 8015280:	d00a      	beq.n	8015298 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8015282:	4b82      	ldr	r3, [pc, #520]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015288:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015290:	497e      	ldr	r1, [pc, #504]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015292:	4313      	orrs	r3, r2
 8015294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d00a      	beq.n	80152ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80152a4:	4b79      	ldr	r3, [pc, #484]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80152a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80152aa:	f023 0203 	bic.w	r2, r3, #3
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152b2:	4976      	ldr	r1, [pc, #472]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80152b4:	4313      	orrs	r3, r2
 80152b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d00a      	beq.n	80152dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80152c6:	4b71      	ldr	r3, [pc, #452]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80152c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80152cc:	f023 020c 	bic.w	r2, r3, #12
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80152d4:	496d      	ldr	r1, [pc, #436]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80152d6:	4313      	orrs	r3, r2
 80152d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d00a      	beq.n	80152fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80152e8:	4b68      	ldr	r3, [pc, #416]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80152ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80152ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80152f6:	4965      	ldr	r1, [pc, #404]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80152f8:	4313      	orrs	r3, r2
 80152fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015306:	2b00      	cmp	r3, #0
 8015308:	d00a      	beq.n	8015320 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801530a:	4b60      	ldr	r3, [pc, #384]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015310:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015318:	495c      	ldr	r1, [pc, #368]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801531a:	4313      	orrs	r3, r2
 801531c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015328:	2b00      	cmp	r3, #0
 801532a:	d00a      	beq.n	8015342 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801532c:	4b57      	ldr	r3, [pc, #348]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801532e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801533a:	4954      	ldr	r1, [pc, #336]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801533c:	4313      	orrs	r3, r2
 801533e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801534a:	2b00      	cmp	r3, #0
 801534c:	d00a      	beq.n	8015364 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801534e:	4b4f      	ldr	r3, [pc, #316]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015354:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801535c:	494b      	ldr	r1, [pc, #300]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801535e:	4313      	orrs	r3, r2
 8015360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801536c:	2b00      	cmp	r3, #0
 801536e:	d00a      	beq.n	8015386 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8015370:	4b46      	ldr	r3, [pc, #280]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015376:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801537e:	4943      	ldr	r1, [pc, #268]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015380:	4313      	orrs	r3, r2
 8015382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801538e:	2b00      	cmp	r3, #0
 8015390:	d00a      	beq.n	80153a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8015392:	4b3e      	ldr	r3, [pc, #248]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015398:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80153a0:	493a      	ldr	r1, [pc, #232]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80153a2:	4313      	orrs	r3, r2
 80153a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d00a      	beq.n	80153ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80153b4:	4b35      	ldr	r3, [pc, #212]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80153b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80153ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80153c2:	4932      	ldr	r1, [pc, #200]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80153c4:	4313      	orrs	r3, r2
 80153c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d011      	beq.n	80153fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80153d6:	4b2d      	ldr	r3, [pc, #180]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80153d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80153dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80153e4:	4929      	ldr	r1, [pc, #164]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80153e6:	4313      	orrs	r3, r2
 80153e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80153f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80153f4:	d101      	bne.n	80153fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80153f6:	2301      	movs	r3, #1
 80153f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	f003 0308 	and.w	r3, r3, #8
 8015402:	2b00      	cmp	r3, #0
 8015404:	d001      	beq.n	801540a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8015406:	2301      	movs	r3, #1
 8015408:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015412:	2b00      	cmp	r3, #0
 8015414:	d00a      	beq.n	801542c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8015416:	4b1d      	ldr	r3, [pc, #116]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801541c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015424:	4919      	ldr	r1, [pc, #100]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015426:	4313      	orrs	r3, r2
 8015428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015434:	2b00      	cmp	r3, #0
 8015436:	d00b      	beq.n	8015450 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8015438:	4b14      	ldr	r3, [pc, #80]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801543e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015448:	4910      	ldr	r1, [pc, #64]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801544a:	4313      	orrs	r3, r2
 801544c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8015450:	69fb      	ldr	r3, [r7, #28]
 8015452:	2b01      	cmp	r3, #1
 8015454:	d006      	beq.n	8015464 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801545e:	2b00      	cmp	r3, #0
 8015460:	f000 80d9 	beq.w	8015616 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8015464:	4b09      	ldr	r3, [pc, #36]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	4a08      	ldr	r2, [pc, #32]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801546a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801546e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015470:	f7fe fd70 	bl	8013f54 <HAL_GetTick>
 8015474:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8015476:	e00b      	b.n	8015490 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8015478:	f7fe fd6c 	bl	8013f54 <HAL_GetTick>
 801547c:	4602      	mov	r2, r0
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	1ad3      	subs	r3, r2, r3
 8015482:	2b64      	cmp	r3, #100	; 0x64
 8015484:	d904      	bls.n	8015490 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8015486:	2303      	movs	r3, #3
 8015488:	e197      	b.n	80157ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 801548a:	bf00      	nop
 801548c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8015490:	4b6c      	ldr	r3, [pc, #432]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015498:	2b00      	cmp	r3, #0
 801549a:	d1ed      	bne.n	8015478 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	f003 0301 	and.w	r3, r3, #1
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d021      	beq.n	80154ec <HAL_RCCEx_PeriphCLKConfig+0x504>
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d11d      	bne.n	80154ec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80154b0:	4b64      	ldr	r3, [pc, #400]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80154b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80154b6:	0c1b      	lsrs	r3, r3, #16
 80154b8:	f003 0303 	and.w	r3, r3, #3
 80154bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80154be:	4b61      	ldr	r3, [pc, #388]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80154c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80154c4:	0e1b      	lsrs	r3, r3, #24
 80154c6:	f003 030f 	and.w	r3, r3, #15
 80154ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	685b      	ldr	r3, [r3, #4]
 80154d0:	019a      	lsls	r2, r3, #6
 80154d2:	693b      	ldr	r3, [r7, #16]
 80154d4:	041b      	lsls	r3, r3, #16
 80154d6:	431a      	orrs	r2, r3
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	061b      	lsls	r3, r3, #24
 80154dc:	431a      	orrs	r2, r3
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	689b      	ldr	r3, [r3, #8]
 80154e2:	071b      	lsls	r3, r3, #28
 80154e4:	4957      	ldr	r1, [pc, #348]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80154e6:	4313      	orrs	r3, r2
 80154e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d004      	beq.n	8015502 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015500:	d00a      	beq.n	8015518 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801550a:	2b00      	cmp	r3, #0
 801550c:	d02e      	beq.n	801556c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015516:	d129      	bne.n	801556c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8015518:	4b4a      	ldr	r3, [pc, #296]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801551a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801551e:	0c1b      	lsrs	r3, r3, #16
 8015520:	f003 0303 	and.w	r3, r3, #3
 8015524:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8015526:	4b47      	ldr	r3, [pc, #284]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801552c:	0f1b      	lsrs	r3, r3, #28
 801552e:	f003 0307 	and.w	r3, r3, #7
 8015532:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	685b      	ldr	r3, [r3, #4]
 8015538:	019a      	lsls	r2, r3, #6
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	041b      	lsls	r3, r3, #16
 801553e:	431a      	orrs	r2, r3
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	68db      	ldr	r3, [r3, #12]
 8015544:	061b      	lsls	r3, r3, #24
 8015546:	431a      	orrs	r2, r3
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	071b      	lsls	r3, r3, #28
 801554c:	493d      	ldr	r1, [pc, #244]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801554e:	4313      	orrs	r3, r2
 8015550:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8015554:	4b3b      	ldr	r3, [pc, #236]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801555a:	f023 021f 	bic.w	r2, r3, #31
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015562:	3b01      	subs	r3, #1
 8015564:	4937      	ldr	r1, [pc, #220]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015566:	4313      	orrs	r3, r2
 8015568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015574:	2b00      	cmp	r3, #0
 8015576:	d01d      	beq.n	80155b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8015578:	4b32      	ldr	r3, [pc, #200]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801557a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801557e:	0e1b      	lsrs	r3, r3, #24
 8015580:	f003 030f 	and.w	r3, r3, #15
 8015584:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8015586:	4b2f      	ldr	r3, [pc, #188]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801558c:	0f1b      	lsrs	r3, r3, #28
 801558e:	f003 0307 	and.w	r3, r3, #7
 8015592:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	685b      	ldr	r3, [r3, #4]
 8015598:	019a      	lsls	r2, r3, #6
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	691b      	ldr	r3, [r3, #16]
 801559e:	041b      	lsls	r3, r3, #16
 80155a0:	431a      	orrs	r2, r3
 80155a2:	693b      	ldr	r3, [r7, #16]
 80155a4:	061b      	lsls	r3, r3, #24
 80155a6:	431a      	orrs	r2, r3
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	071b      	lsls	r3, r3, #28
 80155ac:	4925      	ldr	r1, [pc, #148]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80155ae:	4313      	orrs	r3, r2
 80155b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d011      	beq.n	80155e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	685b      	ldr	r3, [r3, #4]
 80155c4:	019a      	lsls	r2, r3, #6
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	691b      	ldr	r3, [r3, #16]
 80155ca:	041b      	lsls	r3, r3, #16
 80155cc:	431a      	orrs	r2, r3
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	68db      	ldr	r3, [r3, #12]
 80155d2:	061b      	lsls	r3, r3, #24
 80155d4:	431a      	orrs	r2, r3
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	689b      	ldr	r3, [r3, #8]
 80155da:	071b      	lsls	r3, r3, #28
 80155dc:	4919      	ldr	r1, [pc, #100]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80155de:	4313      	orrs	r3, r2
 80155e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80155e4:	4b17      	ldr	r3, [pc, #92]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	4a16      	ldr	r2, [pc, #88]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80155ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80155ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80155f0:	f7fe fcb0 	bl	8013f54 <HAL_GetTick>
 80155f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80155f6:	e008      	b.n	801560a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80155f8:	f7fe fcac 	bl	8013f54 <HAL_GetTick>
 80155fc:	4602      	mov	r2, r0
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	1ad3      	subs	r3, r2, r3
 8015602:	2b64      	cmp	r3, #100	; 0x64
 8015604:	d901      	bls.n	801560a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8015606:	2303      	movs	r3, #3
 8015608:	e0d7      	b.n	80157ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801560a:	4b0e      	ldr	r3, [pc, #56]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015612:	2b00      	cmp	r3, #0
 8015614:	d0f0      	beq.n	80155f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8015616:	69bb      	ldr	r3, [r7, #24]
 8015618:	2b01      	cmp	r3, #1
 801561a:	f040 80cd 	bne.w	80157b8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801561e:	4b09      	ldr	r3, [pc, #36]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	4a08      	ldr	r2, [pc, #32]	; (8015644 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801562a:	f7fe fc93 	bl	8013f54 <HAL_GetTick>
 801562e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8015630:	e00a      	b.n	8015648 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8015632:	f7fe fc8f 	bl	8013f54 <HAL_GetTick>
 8015636:	4602      	mov	r2, r0
 8015638:	697b      	ldr	r3, [r7, #20]
 801563a:	1ad3      	subs	r3, r2, r3
 801563c:	2b64      	cmp	r3, #100	; 0x64
 801563e:	d903      	bls.n	8015648 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8015640:	2303      	movs	r3, #3
 8015642:	e0ba      	b.n	80157ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8015644:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8015648:	4b5e      	ldr	r3, [pc, #376]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015654:	d0ed      	beq.n	8015632 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801565e:	2b00      	cmp	r3, #0
 8015660:	d003      	beq.n	801566a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015666:	2b00      	cmp	r3, #0
 8015668:	d009      	beq.n	801567e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8015672:	2b00      	cmp	r3, #0
 8015674:	d02e      	beq.n	80156d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801567a:	2b00      	cmp	r3, #0
 801567c:	d12a      	bne.n	80156d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801567e:	4b51      	ldr	r3, [pc, #324]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015684:	0c1b      	lsrs	r3, r3, #16
 8015686:	f003 0303 	and.w	r3, r3, #3
 801568a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801568c:	4b4d      	ldr	r3, [pc, #308]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015692:	0f1b      	lsrs	r3, r3, #28
 8015694:	f003 0307 	and.w	r3, r3, #7
 8015698:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	695b      	ldr	r3, [r3, #20]
 801569e:	019a      	lsls	r2, r3, #6
 80156a0:	693b      	ldr	r3, [r7, #16]
 80156a2:	041b      	lsls	r3, r3, #16
 80156a4:	431a      	orrs	r2, r3
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	699b      	ldr	r3, [r3, #24]
 80156aa:	061b      	lsls	r3, r3, #24
 80156ac:	431a      	orrs	r2, r3
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	071b      	lsls	r3, r3, #28
 80156b2:	4944      	ldr	r1, [pc, #272]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80156b4:	4313      	orrs	r3, r2
 80156b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80156ba:	4b42      	ldr	r3, [pc, #264]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80156bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80156c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156c8:	3b01      	subs	r3, #1
 80156ca:	021b      	lsls	r3, r3, #8
 80156cc:	493d      	ldr	r1, [pc, #244]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80156ce:	4313      	orrs	r3, r2
 80156d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d022      	beq.n	8015726 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80156e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80156e8:	d11d      	bne.n	8015726 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80156ea:	4b36      	ldr	r3, [pc, #216]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80156ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80156f0:	0e1b      	lsrs	r3, r3, #24
 80156f2:	f003 030f 	and.w	r3, r3, #15
 80156f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80156f8:	4b32      	ldr	r3, [pc, #200]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80156fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80156fe:	0f1b      	lsrs	r3, r3, #28
 8015700:	f003 0307 	and.w	r3, r3, #7
 8015704:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	695b      	ldr	r3, [r3, #20]
 801570a:	019a      	lsls	r2, r3, #6
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	6a1b      	ldr	r3, [r3, #32]
 8015710:	041b      	lsls	r3, r3, #16
 8015712:	431a      	orrs	r2, r3
 8015714:	693b      	ldr	r3, [r7, #16]
 8015716:	061b      	lsls	r3, r3, #24
 8015718:	431a      	orrs	r2, r3
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	071b      	lsls	r3, r3, #28
 801571e:	4929      	ldr	r1, [pc, #164]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015720:	4313      	orrs	r3, r2
 8015722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	f003 0308 	and.w	r3, r3, #8
 801572e:	2b00      	cmp	r3, #0
 8015730:	d028      	beq.n	8015784 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8015732:	4b24      	ldr	r3, [pc, #144]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015738:	0e1b      	lsrs	r3, r3, #24
 801573a:	f003 030f 	and.w	r3, r3, #15
 801573e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8015740:	4b20      	ldr	r3, [pc, #128]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015746:	0c1b      	lsrs	r3, r3, #16
 8015748:	f003 0303 	and.w	r3, r3, #3
 801574c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	695b      	ldr	r3, [r3, #20]
 8015752:	019a      	lsls	r2, r3, #6
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	041b      	lsls	r3, r3, #16
 8015758:	431a      	orrs	r2, r3
 801575a:	693b      	ldr	r3, [r7, #16]
 801575c:	061b      	lsls	r3, r3, #24
 801575e:	431a      	orrs	r2, r3
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	69db      	ldr	r3, [r3, #28]
 8015764:	071b      	lsls	r3, r3, #28
 8015766:	4917      	ldr	r1, [pc, #92]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015768:	4313      	orrs	r3, r2
 801576a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801576e:	4b15      	ldr	r3, [pc, #84]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015774:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801577c:	4911      	ldr	r1, [pc, #68]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801577e:	4313      	orrs	r3, r2
 8015780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8015784:	4b0f      	ldr	r3, [pc, #60]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	4a0e      	ldr	r2, [pc, #56]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801578a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801578e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015790:	f7fe fbe0 	bl	8013f54 <HAL_GetTick>
 8015794:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8015796:	e008      	b.n	80157aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8015798:	f7fe fbdc 	bl	8013f54 <HAL_GetTick>
 801579c:	4602      	mov	r2, r0
 801579e:	697b      	ldr	r3, [r7, #20]
 80157a0:	1ad3      	subs	r3, r2, r3
 80157a2:	2b64      	cmp	r3, #100	; 0x64
 80157a4:	d901      	bls.n	80157aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80157a6:	2303      	movs	r3, #3
 80157a8:	e007      	b.n	80157ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80157aa:	4b06      	ldr	r3, [pc, #24]	; (80157c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80157b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80157b6:	d1ef      	bne.n	8015798 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80157b8:	2300      	movs	r3, #0
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3720      	adds	r7, #32
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	40023800 	.word	0x40023800

080157c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b082      	sub	sp, #8
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d101      	bne.n	80157da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80157d6:	2301      	movs	r3, #1
 80157d8:	e040      	b.n	801585c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d106      	bne.n	80157f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	2200      	movs	r2, #0
 80157e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f7fe f9e0 	bl	8013bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2224      	movs	r2, #36	; 0x24
 80157f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	681a      	ldr	r2, [r3, #0]
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	f022 0201 	bic.w	r2, r2, #1
 8015804:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015806:	6878      	ldr	r0, [r7, #4]
 8015808:	f000 fb9c 	bl	8015f44 <UART_SetConfig>
 801580c:	4603      	mov	r3, r0
 801580e:	2b01      	cmp	r3, #1
 8015810:	d101      	bne.n	8015816 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8015812:	2301      	movs	r3, #1
 8015814:	e022      	b.n	801585c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801581a:	2b00      	cmp	r3, #0
 801581c:	d002      	beq.n	8015824 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	f000 fdf2 	bl	8016408 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	685a      	ldr	r2, [r3, #4]
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	689a      	ldr	r2, [r3, #8]
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	681a      	ldr	r2, [r3, #0]
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	f042 0201 	orr.w	r2, r2, #1
 8015852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015854:	6878      	ldr	r0, [r7, #4]
 8015856:	f000 fe79 	bl	801654c <UART_CheckIdleState>
 801585a:	4603      	mov	r3, r0
}
 801585c:	4618      	mov	r0, r3
 801585e:	3708      	adds	r7, #8
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}

08015864 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b08a      	sub	sp, #40	; 0x28
 8015868:	af02      	add	r7, sp, #8
 801586a:	60f8      	str	r0, [r7, #12]
 801586c:	60b9      	str	r1, [r7, #8]
 801586e:	603b      	str	r3, [r7, #0]
 8015870:	4613      	mov	r3, r2
 8015872:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015878:	2b20      	cmp	r3, #32
 801587a:	f040 8081 	bne.w	8015980 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d002      	beq.n	801588a <HAL_UART_Transmit+0x26>
 8015884:	88fb      	ldrh	r3, [r7, #6]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d101      	bne.n	801588e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801588a:	2301      	movs	r3, #1
 801588c:	e079      	b.n	8015982 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8015894:	2b01      	cmp	r3, #1
 8015896:	d101      	bne.n	801589c <HAL_UART_Transmit+0x38>
 8015898:	2302      	movs	r3, #2
 801589a:	e072      	b.n	8015982 <HAL_UART_Transmit+0x11e>
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	2201      	movs	r2, #1
 80158a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	2200      	movs	r2, #0
 80158a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	2221      	movs	r2, #33	; 0x21
 80158b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80158b2:	f7fe fb4f 	bl	8013f54 <HAL_GetTick>
 80158b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	88fa      	ldrh	r2, [r7, #6]
 80158bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	88fa      	ldrh	r2, [r7, #6]
 80158c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	689b      	ldr	r3, [r3, #8]
 80158cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80158d0:	d108      	bne.n	80158e4 <HAL_UART_Transmit+0x80>
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	691b      	ldr	r3, [r3, #16]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d104      	bne.n	80158e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80158da:	2300      	movs	r3, #0
 80158dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80158de:	68bb      	ldr	r3, [r7, #8]
 80158e0:	61bb      	str	r3, [r7, #24]
 80158e2:	e003      	b.n	80158ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80158e4:	68bb      	ldr	r3, [r7, #8]
 80158e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80158e8:	2300      	movs	r3, #0
 80158ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	2200      	movs	r2, #0
 80158f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80158f4:	e02c      	b.n	8015950 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80158f6:	683b      	ldr	r3, [r7, #0]
 80158f8:	9300      	str	r3, [sp, #0]
 80158fa:	697b      	ldr	r3, [r7, #20]
 80158fc:	2200      	movs	r2, #0
 80158fe:	2180      	movs	r1, #128	; 0x80
 8015900:	68f8      	ldr	r0, [r7, #12]
 8015902:	f000 fe56 	bl	80165b2 <UART_WaitOnFlagUntilTimeout>
 8015906:	4603      	mov	r3, r0
 8015908:	2b00      	cmp	r3, #0
 801590a:	d001      	beq.n	8015910 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 801590c:	2303      	movs	r3, #3
 801590e:	e038      	b.n	8015982 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8015910:	69fb      	ldr	r3, [r7, #28]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d10b      	bne.n	801592e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015916:	69bb      	ldr	r3, [r7, #24]
 8015918:	881b      	ldrh	r3, [r3, #0]
 801591a:	461a      	mov	r2, r3
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015924:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8015926:	69bb      	ldr	r3, [r7, #24]
 8015928:	3302      	adds	r3, #2
 801592a:	61bb      	str	r3, [r7, #24]
 801592c:	e007      	b.n	801593e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801592e:	69fb      	ldr	r3, [r7, #28]
 8015930:	781a      	ldrb	r2, [r3, #0]
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8015938:	69fb      	ldr	r3, [r7, #28]
 801593a:	3301      	adds	r3, #1
 801593c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8015944:	b29b      	uxth	r3, r3
 8015946:	3b01      	subs	r3, #1
 8015948:	b29a      	uxth	r2, r3
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8015956:	b29b      	uxth	r3, r3
 8015958:	2b00      	cmp	r3, #0
 801595a:	d1cc      	bne.n	80158f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	9300      	str	r3, [sp, #0]
 8015960:	697b      	ldr	r3, [r7, #20]
 8015962:	2200      	movs	r2, #0
 8015964:	2140      	movs	r1, #64	; 0x40
 8015966:	68f8      	ldr	r0, [r7, #12]
 8015968:	f000 fe23 	bl	80165b2 <UART_WaitOnFlagUntilTimeout>
 801596c:	4603      	mov	r3, r0
 801596e:	2b00      	cmp	r3, #0
 8015970:	d001      	beq.n	8015976 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8015972:	2303      	movs	r3, #3
 8015974:	e005      	b.n	8015982 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	2220      	movs	r2, #32
 801597a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 801597c:	2300      	movs	r3, #0
 801597e:	e000      	b.n	8015982 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8015980:	2302      	movs	r3, #2
  }
}
 8015982:	4618      	mov	r0, r3
 8015984:	3720      	adds	r7, #32
 8015986:	46bd      	mov	sp, r7
 8015988:	bd80      	pop	{r7, pc}

0801598a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801598a:	b580      	push	{r7, lr}
 801598c:	b08a      	sub	sp, #40	; 0x28
 801598e:	af02      	add	r7, sp, #8
 8015990:	60f8      	str	r0, [r7, #12]
 8015992:	60b9      	str	r1, [r7, #8]
 8015994:	603b      	str	r3, [r7, #0]
 8015996:	4613      	mov	r3, r2
 8015998:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801599e:	2b20      	cmp	r3, #32
 80159a0:	f040 80be 	bne.w	8015b20 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80159a4:	68bb      	ldr	r3, [r7, #8]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d002      	beq.n	80159b0 <HAL_UART_Receive+0x26>
 80159aa:	88fb      	ldrh	r3, [r7, #6]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d101      	bne.n	80159b4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80159b0:	2301      	movs	r3, #1
 80159b2:	e0b6      	b.n	8015b22 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80159ba:	2b01      	cmp	r3, #1
 80159bc:	d101      	bne.n	80159c2 <HAL_UART_Receive+0x38>
 80159be:	2302      	movs	r3, #2
 80159c0:	e0af      	b.n	8015b22 <HAL_UART_Receive+0x198>
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	2201      	movs	r2, #1
 80159c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	2200      	movs	r2, #0
 80159ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	2222      	movs	r2, #34	; 0x22
 80159d6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	2200      	movs	r2, #0
 80159dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80159de:	f7fe fab9 	bl	8013f54 <HAL_GetTick>
 80159e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	88fa      	ldrh	r2, [r7, #6]
 80159e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	88fa      	ldrh	r2, [r7, #6]
 80159f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	689b      	ldr	r3, [r3, #8]
 80159f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80159fc:	d10e      	bne.n	8015a1c <HAL_UART_Receive+0x92>
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	691b      	ldr	r3, [r3, #16]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d105      	bne.n	8015a12 <HAL_UART_Receive+0x88>
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015a0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8015a10:	e02d      	b.n	8015a6e <HAL_UART_Receive+0xe4>
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	22ff      	movs	r2, #255	; 0xff
 8015a16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8015a1a:	e028      	b.n	8015a6e <HAL_UART_Receive+0xe4>
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	689b      	ldr	r3, [r3, #8]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d10d      	bne.n	8015a40 <HAL_UART_Receive+0xb6>
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	691b      	ldr	r3, [r3, #16]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d104      	bne.n	8015a36 <HAL_UART_Receive+0xac>
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	22ff      	movs	r2, #255	; 0xff
 8015a30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8015a34:	e01b      	b.n	8015a6e <HAL_UART_Receive+0xe4>
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	227f      	movs	r2, #127	; 0x7f
 8015a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8015a3e:	e016      	b.n	8015a6e <HAL_UART_Receive+0xe4>
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	689b      	ldr	r3, [r3, #8]
 8015a44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015a48:	d10d      	bne.n	8015a66 <HAL_UART_Receive+0xdc>
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	691b      	ldr	r3, [r3, #16]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d104      	bne.n	8015a5c <HAL_UART_Receive+0xd2>
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	227f      	movs	r2, #127	; 0x7f
 8015a56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8015a5a:	e008      	b.n	8015a6e <HAL_UART_Receive+0xe4>
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	223f      	movs	r2, #63	; 0x3f
 8015a60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8015a64:	e003      	b.n	8015a6e <HAL_UART_Receive+0xe4>
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	2200      	movs	r2, #0
 8015a6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015a74:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	689b      	ldr	r3, [r3, #8]
 8015a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a7e:	d108      	bne.n	8015a92 <HAL_UART_Receive+0x108>
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	691b      	ldr	r3, [r3, #16]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d104      	bne.n	8015a92 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8015a88:	2300      	movs	r3, #0
 8015a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015a8c:	68bb      	ldr	r3, [r7, #8]
 8015a8e:	61bb      	str	r3, [r7, #24]
 8015a90:	e003      	b.n	8015a9a <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8015a92:	68bb      	ldr	r3, [r7, #8]
 8015a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015a96:	2300      	movs	r3, #0
 8015a98:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8015aa2:	e032      	b.n	8015b0a <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	9300      	str	r3, [sp, #0]
 8015aa8:	697b      	ldr	r3, [r7, #20]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	2120      	movs	r1, #32
 8015aae:	68f8      	ldr	r0, [r7, #12]
 8015ab0:	f000 fd7f 	bl	80165b2 <UART_WaitOnFlagUntilTimeout>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d001      	beq.n	8015abe <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8015aba:	2303      	movs	r3, #3
 8015abc:	e031      	b.n	8015b22 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8015abe:	69fb      	ldr	r3, [r7, #28]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d10c      	bne.n	8015ade <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aca:	b29a      	uxth	r2, r3
 8015acc:	8a7b      	ldrh	r3, [r7, #18]
 8015ace:	4013      	ands	r3, r2
 8015ad0:	b29a      	uxth	r2, r3
 8015ad2:	69bb      	ldr	r3, [r7, #24]
 8015ad4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8015ad6:	69bb      	ldr	r3, [r7, #24]
 8015ad8:	3302      	adds	r3, #2
 8015ada:	61bb      	str	r3, [r7, #24]
 8015adc:	e00c      	b.n	8015af8 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ae4:	b2da      	uxtb	r2, r3
 8015ae6:	8a7b      	ldrh	r3, [r7, #18]
 8015ae8:	b2db      	uxtb	r3, r3
 8015aea:	4013      	ands	r3, r2
 8015aec:	b2da      	uxtb	r2, r3
 8015aee:	69fb      	ldr	r3, [r7, #28]
 8015af0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8015af2:	69fb      	ldr	r3, [r7, #28]
 8015af4:	3301      	adds	r3, #1
 8015af6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8015afe:	b29b      	uxth	r3, r3
 8015b00:	3b01      	subs	r3, #1
 8015b02:	b29a      	uxth	r2, r3
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8015b10:	b29b      	uxth	r3, r3
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d1c6      	bne.n	8015aa4 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	2220      	movs	r2, #32
 8015b1a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	e000      	b.n	8015b22 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8015b20:	2302      	movs	r3, #2
  }
}
 8015b22:	4618      	mov	r0, r3
 8015b24:	3720      	adds	r7, #32
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}
	...

08015b2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b088      	sub	sp, #32
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	69db      	ldr	r3, [r3, #28]
 8015b3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	689b      	ldr	r3, [r3, #8]
 8015b4a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8015b4c:	69fa      	ldr	r2, [r7, #28]
 8015b4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8015b52:	4013      	ands	r3, r2
 8015b54:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8015b56:	693b      	ldr	r3, [r7, #16]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d113      	bne.n	8015b84 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8015b5c:	69fb      	ldr	r3, [r7, #28]
 8015b5e:	f003 0320 	and.w	r3, r3, #32
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d00e      	beq.n	8015b84 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8015b66:	69bb      	ldr	r3, [r7, #24]
 8015b68:	f003 0320 	and.w	r3, r3, #32
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d009      	beq.n	8015b84 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	f000 81b9 	beq.w	8015eec <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015b7e:	6878      	ldr	r0, [r7, #4]
 8015b80:	4798      	blx	r3
      }
      return;
 8015b82:	e1b3      	b.n	8015eec <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8015b84:	693b      	ldr	r3, [r7, #16]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	f000 80e3 	beq.w	8015d52 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	f003 0301 	and.w	r3, r3, #1
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d105      	bne.n	8015ba2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8015b96:	69ba      	ldr	r2, [r7, #24]
 8015b98:	4ba5      	ldr	r3, [pc, #660]	; (8015e30 <HAL_UART_IRQHandler+0x304>)
 8015b9a:	4013      	ands	r3, r2
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	f000 80d8 	beq.w	8015d52 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015ba2:	69fb      	ldr	r3, [r7, #28]
 8015ba4:	f003 0301 	and.w	r3, r3, #1
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d010      	beq.n	8015bce <HAL_UART_IRQHandler+0xa2>
 8015bac:	69bb      	ldr	r3, [r7, #24]
 8015bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d00b      	beq.n	8015bce <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	2201      	movs	r2, #1
 8015bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015bc4:	f043 0201 	orr.w	r2, r3, #1
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015bce:	69fb      	ldr	r3, [r7, #28]
 8015bd0:	f003 0302 	and.w	r3, r3, #2
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d010      	beq.n	8015bfa <HAL_UART_IRQHandler+0xce>
 8015bd8:	697b      	ldr	r3, [r7, #20]
 8015bda:	f003 0301 	and.w	r3, r3, #1
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d00b      	beq.n	8015bfa <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	2202      	movs	r2, #2
 8015be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015bf0:	f043 0204 	orr.w	r2, r3, #4
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015bfa:	69fb      	ldr	r3, [r7, #28]
 8015bfc:	f003 0304 	and.w	r3, r3, #4
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d010      	beq.n	8015c26 <HAL_UART_IRQHandler+0xfa>
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	f003 0301 	and.w	r3, r3, #1
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d00b      	beq.n	8015c26 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	2204      	movs	r2, #4
 8015c14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015c1c:	f043 0202 	orr.w	r2, r3, #2
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8015c26:	69fb      	ldr	r3, [r7, #28]
 8015c28:	f003 0308 	and.w	r3, r3, #8
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d015      	beq.n	8015c5c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8015c30:	69bb      	ldr	r3, [r7, #24]
 8015c32:	f003 0320 	and.w	r3, r3, #32
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d104      	bne.n	8015c44 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8015c3a:	697b      	ldr	r3, [r7, #20]
 8015c3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d00b      	beq.n	8015c5c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	2208      	movs	r2, #8
 8015c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015c52:	f043 0208 	orr.w	r2, r3, #8
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8015c5c:	69fb      	ldr	r3, [r7, #28]
 8015c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d011      	beq.n	8015c8a <HAL_UART_IRQHandler+0x15e>
 8015c66:	69bb      	ldr	r3, [r7, #24]
 8015c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d00c      	beq.n	8015c8a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015c78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015c80:	f043 0220 	orr.w	r2, r3, #32
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	f000 812d 	beq.w	8015ef0 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8015c96:	69fb      	ldr	r3, [r7, #28]
 8015c98:	f003 0320 	and.w	r3, r3, #32
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d00c      	beq.n	8015cba <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8015ca0:	69bb      	ldr	r3, [r7, #24]
 8015ca2:	f003 0320 	and.w	r3, r3, #32
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d007      	beq.n	8015cba <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d003      	beq.n	8015cba <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015cc0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	689b      	ldr	r3, [r3, #8]
 8015cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ccc:	2b40      	cmp	r3, #64	; 0x40
 8015cce:	d004      	beq.n	8015cda <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d031      	beq.n	8015d3e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8015cda:	6878      	ldr	r0, [r7, #4]
 8015cdc:	f000 fce5 	bl	80166aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	689b      	ldr	r3, [r3, #8]
 8015ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015cea:	2b40      	cmp	r3, #64	; 0x40
 8015cec:	d123      	bne.n	8015d36 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	689a      	ldr	r2, [r3, #8]
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015cfc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d013      	beq.n	8015d2e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d0a:	4a4a      	ldr	r2, [pc, #296]	; (8015e34 <HAL_UART_IRQHandler+0x308>)
 8015d0c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7fe facf 	bl	80142b6 <HAL_DMA_Abort_IT>
 8015d18:	4603      	mov	r3, r0
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d017      	beq.n	8015d4e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015d24:	687a      	ldr	r2, [r7, #4]
 8015d26:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8015d28:	4610      	mov	r0, r2
 8015d2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d2c:	e00f      	b.n	8015d4e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8015d2e:	6878      	ldr	r0, [r7, #4]
 8015d30:	f000 f8f2 	bl	8015f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d34:	e00b      	b.n	8015d4e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015d36:	6878      	ldr	r0, [r7, #4]
 8015d38:	f000 f8ee 	bl	8015f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d3c:	e007      	b.n	8015d4e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8015d3e:	6878      	ldr	r0, [r7, #4]
 8015d40:	f000 f8ea 	bl	8015f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2200      	movs	r2, #0
 8015d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8015d4c:	e0d0      	b.n	8015ef0 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d4e:	bf00      	nop
    return;
 8015d50:	e0ce      	b.n	8015ef0 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015d56:	2b01      	cmp	r3, #1
 8015d58:	f040 80a7 	bne.w	8015eaa <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8015d5c:	69fb      	ldr	r3, [r7, #28]
 8015d5e:	f003 0310 	and.w	r3, r3, #16
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	f000 80a1 	beq.w	8015eaa <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8015d68:	69bb      	ldr	r3, [r7, #24]
 8015d6a:	f003 0310 	and.w	r3, r3, #16
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	f000 809b 	beq.w	8015eaa <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	2210      	movs	r2, #16
 8015d7a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	689b      	ldr	r3, [r3, #8]
 8015d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d86:	2b40      	cmp	r3, #64	; 0x40
 8015d88:	d156      	bne.n	8015e38 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	685b      	ldr	r3, [r3, #4]
 8015d92:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8015d94:	893b      	ldrh	r3, [r7, #8]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	f000 80ac 	beq.w	8015ef4 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8015da2:	893a      	ldrh	r2, [r7, #8]
 8015da4:	429a      	cmp	r2, r3
 8015da6:	f080 80a5 	bcs.w	8015ef4 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	893a      	ldrh	r2, [r7, #8]
 8015dae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015db6:	69db      	ldr	r3, [r3, #28]
 8015db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015dbc:	d02a      	beq.n	8015e14 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	681a      	ldr	r2, [r3, #0]
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015dcc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	689a      	ldr	r2, [r3, #8]
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	f022 0201 	bic.w	r2, r2, #1
 8015ddc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	689a      	ldr	r2, [r3, #8]
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015dec:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	2220      	movs	r2, #32
 8015df2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2200      	movs	r2, #0
 8015df8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	681a      	ldr	r2, [r3, #0]
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	f022 0210 	bic.w	r2, r2, #16
 8015e08:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e0e:	4618      	mov	r0, r3
 8015e10:	f7fe f9e1 	bl	80141d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8015e20:	b29b      	uxth	r3, r3
 8015e22:	1ad3      	subs	r3, r2, r3
 8015e24:	b29b      	uxth	r3, r3
 8015e26:	4619      	mov	r1, r3
 8015e28:	6878      	ldr	r0, [r7, #4]
 8015e2a:	f000 f87f 	bl	8015f2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8015e2e:	e061      	b.n	8015ef4 <HAL_UART_IRQHandler+0x3c8>
 8015e30:	04000120 	.word	0x04000120
 8015e34:	08016709 	.word	0x08016709
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8015e44:	b29b      	uxth	r3, r3
 8015e46:	1ad3      	subs	r3, r2, r3
 8015e48:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8015e50:	b29b      	uxth	r3, r3
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d050      	beq.n	8015ef8 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8015e56:	897b      	ldrh	r3, [r7, #10]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d04d      	beq.n	8015ef8 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	681a      	ldr	r2, [r3, #0]
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8015e6a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	689a      	ldr	r2, [r3, #8]
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	f022 0201 	bic.w	r2, r2, #1
 8015e7a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	2220      	movs	r2, #32
 8015e80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2200      	movs	r2, #0
 8015e86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	681a      	ldr	r2, [r3, #0]
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	f022 0210 	bic.w	r2, r2, #16
 8015e9c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8015e9e:	897b      	ldrh	r3, [r7, #10]
 8015ea0:	4619      	mov	r1, r3
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f000 f842 	bl	8015f2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8015ea8:	e026      	b.n	8015ef8 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8015eaa:	69fb      	ldr	r3, [r7, #28]
 8015eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d00d      	beq.n	8015ed0 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8015eb4:	69bb      	ldr	r3, [r7, #24]
 8015eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d008      	beq.n	8015ed0 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d01a      	beq.n	8015efc <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015eca:	6878      	ldr	r0, [r7, #4]
 8015ecc:	4798      	blx	r3
    }
    return;
 8015ece:	e015      	b.n	8015efc <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8015ed0:	69fb      	ldr	r3, [r7, #28]
 8015ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d011      	beq.n	8015efe <HAL_UART_IRQHandler+0x3d2>
 8015eda:	69bb      	ldr	r3, [r7, #24]
 8015edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d00c      	beq.n	8015efe <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f000 fc25 	bl	8016734 <UART_EndTransmit_IT>
    return;
 8015eea:	e008      	b.n	8015efe <HAL_UART_IRQHandler+0x3d2>
      return;
 8015eec:	bf00      	nop
 8015eee:	e006      	b.n	8015efe <HAL_UART_IRQHandler+0x3d2>
    return;
 8015ef0:	bf00      	nop
 8015ef2:	e004      	b.n	8015efe <HAL_UART_IRQHandler+0x3d2>
      return;
 8015ef4:	bf00      	nop
 8015ef6:	e002      	b.n	8015efe <HAL_UART_IRQHandler+0x3d2>
      return;
 8015ef8:	bf00      	nop
 8015efa:	e000      	b.n	8015efe <HAL_UART_IRQHandler+0x3d2>
    return;
 8015efc:	bf00      	nop
  }

}
 8015efe:	3720      	adds	r7, #32
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd80      	pop	{r7, pc}

08015f04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8015f04:	b480      	push	{r7}
 8015f06:	b083      	sub	sp, #12
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8015f0c:	bf00      	nop
 8015f0e:	370c      	adds	r7, #12
 8015f10:	46bd      	mov	sp, r7
 8015f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f16:	4770      	bx	lr

08015f18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8015f18:	b480      	push	{r7}
 8015f1a:	b083      	sub	sp, #12
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8015f20:	bf00      	nop
 8015f22:	370c      	adds	r7, #12
 8015f24:	46bd      	mov	sp, r7
 8015f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2a:	4770      	bx	lr

08015f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8015f2c:	b480      	push	{r7}
 8015f2e:	b083      	sub	sp, #12
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
 8015f34:	460b      	mov	r3, r1
 8015f36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8015f38:	bf00      	nop
 8015f3a:	370c      	adds	r7, #12
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f42:	4770      	bx	lr

08015f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b088      	sub	sp, #32
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	689a      	ldr	r2, [r3, #8]
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	691b      	ldr	r3, [r3, #16]
 8015f58:	431a      	orrs	r2, r3
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	695b      	ldr	r3, [r3, #20]
 8015f5e:	431a      	orrs	r2, r3
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	69db      	ldr	r3, [r3, #28]
 8015f64:	4313      	orrs	r3, r2
 8015f66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	681a      	ldr	r2, [r3, #0]
 8015f6e:	4ba7      	ldr	r3, [pc, #668]	; (801620c <UART_SetConfig+0x2c8>)
 8015f70:	4013      	ands	r3, r2
 8015f72:	687a      	ldr	r2, [r7, #4]
 8015f74:	6812      	ldr	r2, [r2, #0]
 8015f76:	6979      	ldr	r1, [r7, #20]
 8015f78:	430b      	orrs	r3, r1
 8015f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	685b      	ldr	r3, [r3, #4]
 8015f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	68da      	ldr	r2, [r3, #12]
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	430a      	orrs	r2, r1
 8015f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	699b      	ldr	r3, [r3, #24]
 8015f96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	6a1b      	ldr	r3, [r3, #32]
 8015f9c:	697a      	ldr	r2, [r7, #20]
 8015f9e:	4313      	orrs	r3, r2
 8015fa0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	689b      	ldr	r3, [r3, #8]
 8015fa8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	697a      	ldr	r2, [r7, #20]
 8015fb2:	430a      	orrs	r2, r1
 8015fb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	4a95      	ldr	r2, [pc, #596]	; (8016210 <UART_SetConfig+0x2cc>)
 8015fbc:	4293      	cmp	r3, r2
 8015fbe:	d120      	bne.n	8016002 <UART_SetConfig+0xbe>
 8015fc0:	4b94      	ldr	r3, [pc, #592]	; (8016214 <UART_SetConfig+0x2d0>)
 8015fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015fc6:	f003 0303 	and.w	r3, r3, #3
 8015fca:	2b03      	cmp	r3, #3
 8015fcc:	d816      	bhi.n	8015ffc <UART_SetConfig+0xb8>
 8015fce:	a201      	add	r2, pc, #4	; (adr r2, 8015fd4 <UART_SetConfig+0x90>)
 8015fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fd4:	08015fe5 	.word	0x08015fe5
 8015fd8:	08015ff1 	.word	0x08015ff1
 8015fdc:	08015feb 	.word	0x08015feb
 8015fe0:	08015ff7 	.word	0x08015ff7
 8015fe4:	2301      	movs	r3, #1
 8015fe6:	77fb      	strb	r3, [r7, #31]
 8015fe8:	e14f      	b.n	801628a <UART_SetConfig+0x346>
 8015fea:	2302      	movs	r3, #2
 8015fec:	77fb      	strb	r3, [r7, #31]
 8015fee:	e14c      	b.n	801628a <UART_SetConfig+0x346>
 8015ff0:	2304      	movs	r3, #4
 8015ff2:	77fb      	strb	r3, [r7, #31]
 8015ff4:	e149      	b.n	801628a <UART_SetConfig+0x346>
 8015ff6:	2308      	movs	r3, #8
 8015ff8:	77fb      	strb	r3, [r7, #31]
 8015ffa:	e146      	b.n	801628a <UART_SetConfig+0x346>
 8015ffc:	2310      	movs	r3, #16
 8015ffe:	77fb      	strb	r3, [r7, #31]
 8016000:	e143      	b.n	801628a <UART_SetConfig+0x346>
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	4a84      	ldr	r2, [pc, #528]	; (8016218 <UART_SetConfig+0x2d4>)
 8016008:	4293      	cmp	r3, r2
 801600a:	d132      	bne.n	8016072 <UART_SetConfig+0x12e>
 801600c:	4b81      	ldr	r3, [pc, #516]	; (8016214 <UART_SetConfig+0x2d0>)
 801600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016012:	f003 030c 	and.w	r3, r3, #12
 8016016:	2b0c      	cmp	r3, #12
 8016018:	d828      	bhi.n	801606c <UART_SetConfig+0x128>
 801601a:	a201      	add	r2, pc, #4	; (adr r2, 8016020 <UART_SetConfig+0xdc>)
 801601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016020:	08016055 	.word	0x08016055
 8016024:	0801606d 	.word	0x0801606d
 8016028:	0801606d 	.word	0x0801606d
 801602c:	0801606d 	.word	0x0801606d
 8016030:	08016061 	.word	0x08016061
 8016034:	0801606d 	.word	0x0801606d
 8016038:	0801606d 	.word	0x0801606d
 801603c:	0801606d 	.word	0x0801606d
 8016040:	0801605b 	.word	0x0801605b
 8016044:	0801606d 	.word	0x0801606d
 8016048:	0801606d 	.word	0x0801606d
 801604c:	0801606d 	.word	0x0801606d
 8016050:	08016067 	.word	0x08016067
 8016054:	2300      	movs	r3, #0
 8016056:	77fb      	strb	r3, [r7, #31]
 8016058:	e117      	b.n	801628a <UART_SetConfig+0x346>
 801605a:	2302      	movs	r3, #2
 801605c:	77fb      	strb	r3, [r7, #31]
 801605e:	e114      	b.n	801628a <UART_SetConfig+0x346>
 8016060:	2304      	movs	r3, #4
 8016062:	77fb      	strb	r3, [r7, #31]
 8016064:	e111      	b.n	801628a <UART_SetConfig+0x346>
 8016066:	2308      	movs	r3, #8
 8016068:	77fb      	strb	r3, [r7, #31]
 801606a:	e10e      	b.n	801628a <UART_SetConfig+0x346>
 801606c:	2310      	movs	r3, #16
 801606e:	77fb      	strb	r3, [r7, #31]
 8016070:	e10b      	b.n	801628a <UART_SetConfig+0x346>
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	4a69      	ldr	r2, [pc, #420]	; (801621c <UART_SetConfig+0x2d8>)
 8016078:	4293      	cmp	r3, r2
 801607a:	d120      	bne.n	80160be <UART_SetConfig+0x17a>
 801607c:	4b65      	ldr	r3, [pc, #404]	; (8016214 <UART_SetConfig+0x2d0>)
 801607e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016082:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8016086:	2b30      	cmp	r3, #48	; 0x30
 8016088:	d013      	beq.n	80160b2 <UART_SetConfig+0x16e>
 801608a:	2b30      	cmp	r3, #48	; 0x30
 801608c:	d814      	bhi.n	80160b8 <UART_SetConfig+0x174>
 801608e:	2b20      	cmp	r3, #32
 8016090:	d009      	beq.n	80160a6 <UART_SetConfig+0x162>
 8016092:	2b20      	cmp	r3, #32
 8016094:	d810      	bhi.n	80160b8 <UART_SetConfig+0x174>
 8016096:	2b00      	cmp	r3, #0
 8016098:	d002      	beq.n	80160a0 <UART_SetConfig+0x15c>
 801609a:	2b10      	cmp	r3, #16
 801609c:	d006      	beq.n	80160ac <UART_SetConfig+0x168>
 801609e:	e00b      	b.n	80160b8 <UART_SetConfig+0x174>
 80160a0:	2300      	movs	r3, #0
 80160a2:	77fb      	strb	r3, [r7, #31]
 80160a4:	e0f1      	b.n	801628a <UART_SetConfig+0x346>
 80160a6:	2302      	movs	r3, #2
 80160a8:	77fb      	strb	r3, [r7, #31]
 80160aa:	e0ee      	b.n	801628a <UART_SetConfig+0x346>
 80160ac:	2304      	movs	r3, #4
 80160ae:	77fb      	strb	r3, [r7, #31]
 80160b0:	e0eb      	b.n	801628a <UART_SetConfig+0x346>
 80160b2:	2308      	movs	r3, #8
 80160b4:	77fb      	strb	r3, [r7, #31]
 80160b6:	e0e8      	b.n	801628a <UART_SetConfig+0x346>
 80160b8:	2310      	movs	r3, #16
 80160ba:	77fb      	strb	r3, [r7, #31]
 80160bc:	e0e5      	b.n	801628a <UART_SetConfig+0x346>
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	4a57      	ldr	r2, [pc, #348]	; (8016220 <UART_SetConfig+0x2dc>)
 80160c4:	4293      	cmp	r3, r2
 80160c6:	d120      	bne.n	801610a <UART_SetConfig+0x1c6>
 80160c8:	4b52      	ldr	r3, [pc, #328]	; (8016214 <UART_SetConfig+0x2d0>)
 80160ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80160ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80160d2:	2bc0      	cmp	r3, #192	; 0xc0
 80160d4:	d013      	beq.n	80160fe <UART_SetConfig+0x1ba>
 80160d6:	2bc0      	cmp	r3, #192	; 0xc0
 80160d8:	d814      	bhi.n	8016104 <UART_SetConfig+0x1c0>
 80160da:	2b80      	cmp	r3, #128	; 0x80
 80160dc:	d009      	beq.n	80160f2 <UART_SetConfig+0x1ae>
 80160de:	2b80      	cmp	r3, #128	; 0x80
 80160e0:	d810      	bhi.n	8016104 <UART_SetConfig+0x1c0>
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d002      	beq.n	80160ec <UART_SetConfig+0x1a8>
 80160e6:	2b40      	cmp	r3, #64	; 0x40
 80160e8:	d006      	beq.n	80160f8 <UART_SetConfig+0x1b4>
 80160ea:	e00b      	b.n	8016104 <UART_SetConfig+0x1c0>
 80160ec:	2300      	movs	r3, #0
 80160ee:	77fb      	strb	r3, [r7, #31]
 80160f0:	e0cb      	b.n	801628a <UART_SetConfig+0x346>
 80160f2:	2302      	movs	r3, #2
 80160f4:	77fb      	strb	r3, [r7, #31]
 80160f6:	e0c8      	b.n	801628a <UART_SetConfig+0x346>
 80160f8:	2304      	movs	r3, #4
 80160fa:	77fb      	strb	r3, [r7, #31]
 80160fc:	e0c5      	b.n	801628a <UART_SetConfig+0x346>
 80160fe:	2308      	movs	r3, #8
 8016100:	77fb      	strb	r3, [r7, #31]
 8016102:	e0c2      	b.n	801628a <UART_SetConfig+0x346>
 8016104:	2310      	movs	r3, #16
 8016106:	77fb      	strb	r3, [r7, #31]
 8016108:	e0bf      	b.n	801628a <UART_SetConfig+0x346>
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	4a45      	ldr	r2, [pc, #276]	; (8016224 <UART_SetConfig+0x2e0>)
 8016110:	4293      	cmp	r3, r2
 8016112:	d125      	bne.n	8016160 <UART_SetConfig+0x21c>
 8016114:	4b3f      	ldr	r3, [pc, #252]	; (8016214 <UART_SetConfig+0x2d0>)
 8016116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801611a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801611e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016122:	d017      	beq.n	8016154 <UART_SetConfig+0x210>
 8016124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016128:	d817      	bhi.n	801615a <UART_SetConfig+0x216>
 801612a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801612e:	d00b      	beq.n	8016148 <UART_SetConfig+0x204>
 8016130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016134:	d811      	bhi.n	801615a <UART_SetConfig+0x216>
 8016136:	2b00      	cmp	r3, #0
 8016138:	d003      	beq.n	8016142 <UART_SetConfig+0x1fe>
 801613a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801613e:	d006      	beq.n	801614e <UART_SetConfig+0x20a>
 8016140:	e00b      	b.n	801615a <UART_SetConfig+0x216>
 8016142:	2300      	movs	r3, #0
 8016144:	77fb      	strb	r3, [r7, #31]
 8016146:	e0a0      	b.n	801628a <UART_SetConfig+0x346>
 8016148:	2302      	movs	r3, #2
 801614a:	77fb      	strb	r3, [r7, #31]
 801614c:	e09d      	b.n	801628a <UART_SetConfig+0x346>
 801614e:	2304      	movs	r3, #4
 8016150:	77fb      	strb	r3, [r7, #31]
 8016152:	e09a      	b.n	801628a <UART_SetConfig+0x346>
 8016154:	2308      	movs	r3, #8
 8016156:	77fb      	strb	r3, [r7, #31]
 8016158:	e097      	b.n	801628a <UART_SetConfig+0x346>
 801615a:	2310      	movs	r3, #16
 801615c:	77fb      	strb	r3, [r7, #31]
 801615e:	e094      	b.n	801628a <UART_SetConfig+0x346>
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	4a30      	ldr	r2, [pc, #192]	; (8016228 <UART_SetConfig+0x2e4>)
 8016166:	4293      	cmp	r3, r2
 8016168:	d125      	bne.n	80161b6 <UART_SetConfig+0x272>
 801616a:	4b2a      	ldr	r3, [pc, #168]	; (8016214 <UART_SetConfig+0x2d0>)
 801616c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016170:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8016174:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8016178:	d017      	beq.n	80161aa <UART_SetConfig+0x266>
 801617a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801617e:	d817      	bhi.n	80161b0 <UART_SetConfig+0x26c>
 8016180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016184:	d00b      	beq.n	801619e <UART_SetConfig+0x25a>
 8016186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801618a:	d811      	bhi.n	80161b0 <UART_SetConfig+0x26c>
 801618c:	2b00      	cmp	r3, #0
 801618e:	d003      	beq.n	8016198 <UART_SetConfig+0x254>
 8016190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016194:	d006      	beq.n	80161a4 <UART_SetConfig+0x260>
 8016196:	e00b      	b.n	80161b0 <UART_SetConfig+0x26c>
 8016198:	2301      	movs	r3, #1
 801619a:	77fb      	strb	r3, [r7, #31]
 801619c:	e075      	b.n	801628a <UART_SetConfig+0x346>
 801619e:	2302      	movs	r3, #2
 80161a0:	77fb      	strb	r3, [r7, #31]
 80161a2:	e072      	b.n	801628a <UART_SetConfig+0x346>
 80161a4:	2304      	movs	r3, #4
 80161a6:	77fb      	strb	r3, [r7, #31]
 80161a8:	e06f      	b.n	801628a <UART_SetConfig+0x346>
 80161aa:	2308      	movs	r3, #8
 80161ac:	77fb      	strb	r3, [r7, #31]
 80161ae:	e06c      	b.n	801628a <UART_SetConfig+0x346>
 80161b0:	2310      	movs	r3, #16
 80161b2:	77fb      	strb	r3, [r7, #31]
 80161b4:	e069      	b.n	801628a <UART_SetConfig+0x346>
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	4a1c      	ldr	r2, [pc, #112]	; (801622c <UART_SetConfig+0x2e8>)
 80161bc:	4293      	cmp	r3, r2
 80161be:	d137      	bne.n	8016230 <UART_SetConfig+0x2ec>
 80161c0:	4b14      	ldr	r3, [pc, #80]	; (8016214 <UART_SetConfig+0x2d0>)
 80161c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80161c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80161ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80161ce:	d017      	beq.n	8016200 <UART_SetConfig+0x2bc>
 80161d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80161d4:	d817      	bhi.n	8016206 <UART_SetConfig+0x2c2>
 80161d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80161da:	d00b      	beq.n	80161f4 <UART_SetConfig+0x2b0>
 80161dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80161e0:	d811      	bhi.n	8016206 <UART_SetConfig+0x2c2>
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d003      	beq.n	80161ee <UART_SetConfig+0x2aa>
 80161e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80161ea:	d006      	beq.n	80161fa <UART_SetConfig+0x2b6>
 80161ec:	e00b      	b.n	8016206 <UART_SetConfig+0x2c2>
 80161ee:	2300      	movs	r3, #0
 80161f0:	77fb      	strb	r3, [r7, #31]
 80161f2:	e04a      	b.n	801628a <UART_SetConfig+0x346>
 80161f4:	2302      	movs	r3, #2
 80161f6:	77fb      	strb	r3, [r7, #31]
 80161f8:	e047      	b.n	801628a <UART_SetConfig+0x346>
 80161fa:	2304      	movs	r3, #4
 80161fc:	77fb      	strb	r3, [r7, #31]
 80161fe:	e044      	b.n	801628a <UART_SetConfig+0x346>
 8016200:	2308      	movs	r3, #8
 8016202:	77fb      	strb	r3, [r7, #31]
 8016204:	e041      	b.n	801628a <UART_SetConfig+0x346>
 8016206:	2310      	movs	r3, #16
 8016208:	77fb      	strb	r3, [r7, #31]
 801620a:	e03e      	b.n	801628a <UART_SetConfig+0x346>
 801620c:	efff69f3 	.word	0xefff69f3
 8016210:	40011000 	.word	0x40011000
 8016214:	40023800 	.word	0x40023800
 8016218:	40004400 	.word	0x40004400
 801621c:	40004800 	.word	0x40004800
 8016220:	40004c00 	.word	0x40004c00
 8016224:	40005000 	.word	0x40005000
 8016228:	40011400 	.word	0x40011400
 801622c:	40007800 	.word	0x40007800
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	4a71      	ldr	r2, [pc, #452]	; (80163fc <UART_SetConfig+0x4b8>)
 8016236:	4293      	cmp	r3, r2
 8016238:	d125      	bne.n	8016286 <UART_SetConfig+0x342>
 801623a:	4b71      	ldr	r3, [pc, #452]	; (8016400 <UART_SetConfig+0x4bc>)
 801623c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016240:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8016244:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8016248:	d017      	beq.n	801627a <UART_SetConfig+0x336>
 801624a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801624e:	d817      	bhi.n	8016280 <UART_SetConfig+0x33c>
 8016250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016254:	d00b      	beq.n	801626e <UART_SetConfig+0x32a>
 8016256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801625a:	d811      	bhi.n	8016280 <UART_SetConfig+0x33c>
 801625c:	2b00      	cmp	r3, #0
 801625e:	d003      	beq.n	8016268 <UART_SetConfig+0x324>
 8016260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016264:	d006      	beq.n	8016274 <UART_SetConfig+0x330>
 8016266:	e00b      	b.n	8016280 <UART_SetConfig+0x33c>
 8016268:	2300      	movs	r3, #0
 801626a:	77fb      	strb	r3, [r7, #31]
 801626c:	e00d      	b.n	801628a <UART_SetConfig+0x346>
 801626e:	2302      	movs	r3, #2
 8016270:	77fb      	strb	r3, [r7, #31]
 8016272:	e00a      	b.n	801628a <UART_SetConfig+0x346>
 8016274:	2304      	movs	r3, #4
 8016276:	77fb      	strb	r3, [r7, #31]
 8016278:	e007      	b.n	801628a <UART_SetConfig+0x346>
 801627a:	2308      	movs	r3, #8
 801627c:	77fb      	strb	r3, [r7, #31]
 801627e:	e004      	b.n	801628a <UART_SetConfig+0x346>
 8016280:	2310      	movs	r3, #16
 8016282:	77fb      	strb	r3, [r7, #31]
 8016284:	e001      	b.n	801628a <UART_SetConfig+0x346>
 8016286:	2310      	movs	r3, #16
 8016288:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	69db      	ldr	r3, [r3, #28]
 801628e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016292:	d15b      	bne.n	801634c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8016294:	7ffb      	ldrb	r3, [r7, #31]
 8016296:	2b08      	cmp	r3, #8
 8016298:	d827      	bhi.n	80162ea <UART_SetConfig+0x3a6>
 801629a:	a201      	add	r2, pc, #4	; (adr r2, 80162a0 <UART_SetConfig+0x35c>)
 801629c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162a0:	080162c5 	.word	0x080162c5
 80162a4:	080162cd 	.word	0x080162cd
 80162a8:	080162d5 	.word	0x080162d5
 80162ac:	080162eb 	.word	0x080162eb
 80162b0:	080162db 	.word	0x080162db
 80162b4:	080162eb 	.word	0x080162eb
 80162b8:	080162eb 	.word	0x080162eb
 80162bc:	080162eb 	.word	0x080162eb
 80162c0:	080162e3 	.word	0x080162e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80162c4:	f7fe fe68 	bl	8014f98 <HAL_RCC_GetPCLK1Freq>
 80162c8:	61b8      	str	r0, [r7, #24]
        break;
 80162ca:	e013      	b.n	80162f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80162cc:	f7fe fe78 	bl	8014fc0 <HAL_RCC_GetPCLK2Freq>
 80162d0:	61b8      	str	r0, [r7, #24]
        break;
 80162d2:	e00f      	b.n	80162f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80162d4:	4b4b      	ldr	r3, [pc, #300]	; (8016404 <UART_SetConfig+0x4c0>)
 80162d6:	61bb      	str	r3, [r7, #24]
        break;
 80162d8:	e00c      	b.n	80162f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80162da:	f7fe fd9b 	bl	8014e14 <HAL_RCC_GetSysClockFreq>
 80162de:	61b8      	str	r0, [r7, #24]
        break;
 80162e0:	e008      	b.n	80162f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80162e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80162e6:	61bb      	str	r3, [r7, #24]
        break;
 80162e8:	e004      	b.n	80162f4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80162ea:	2300      	movs	r3, #0
 80162ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80162ee:	2301      	movs	r3, #1
 80162f0:	77bb      	strb	r3, [r7, #30]
        break;
 80162f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80162f4:	69bb      	ldr	r3, [r7, #24]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d074      	beq.n	80163e4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80162fa:	69bb      	ldr	r3, [r7, #24]
 80162fc:	005a      	lsls	r2, r3, #1
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	685b      	ldr	r3, [r3, #4]
 8016302:	085b      	lsrs	r3, r3, #1
 8016304:	441a      	add	r2, r3
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	685b      	ldr	r3, [r3, #4]
 801630a:	fbb2 f3f3 	udiv	r3, r2, r3
 801630e:	b29b      	uxth	r3, r3
 8016310:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016312:	693b      	ldr	r3, [r7, #16]
 8016314:	2b0f      	cmp	r3, #15
 8016316:	d916      	bls.n	8016346 <UART_SetConfig+0x402>
 8016318:	693b      	ldr	r3, [r7, #16]
 801631a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801631e:	d212      	bcs.n	8016346 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016320:	693b      	ldr	r3, [r7, #16]
 8016322:	b29b      	uxth	r3, r3
 8016324:	f023 030f 	bic.w	r3, r3, #15
 8016328:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	085b      	lsrs	r3, r3, #1
 801632e:	b29b      	uxth	r3, r3
 8016330:	f003 0307 	and.w	r3, r3, #7
 8016334:	b29a      	uxth	r2, r3
 8016336:	89fb      	ldrh	r3, [r7, #14]
 8016338:	4313      	orrs	r3, r2
 801633a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	89fa      	ldrh	r2, [r7, #14]
 8016342:	60da      	str	r2, [r3, #12]
 8016344:	e04e      	b.n	80163e4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8016346:	2301      	movs	r3, #1
 8016348:	77bb      	strb	r3, [r7, #30]
 801634a:	e04b      	b.n	80163e4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 801634c:	7ffb      	ldrb	r3, [r7, #31]
 801634e:	2b08      	cmp	r3, #8
 8016350:	d827      	bhi.n	80163a2 <UART_SetConfig+0x45e>
 8016352:	a201      	add	r2, pc, #4	; (adr r2, 8016358 <UART_SetConfig+0x414>)
 8016354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016358:	0801637d 	.word	0x0801637d
 801635c:	08016385 	.word	0x08016385
 8016360:	0801638d 	.word	0x0801638d
 8016364:	080163a3 	.word	0x080163a3
 8016368:	08016393 	.word	0x08016393
 801636c:	080163a3 	.word	0x080163a3
 8016370:	080163a3 	.word	0x080163a3
 8016374:	080163a3 	.word	0x080163a3
 8016378:	0801639b 	.word	0x0801639b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801637c:	f7fe fe0c 	bl	8014f98 <HAL_RCC_GetPCLK1Freq>
 8016380:	61b8      	str	r0, [r7, #24]
        break;
 8016382:	e013      	b.n	80163ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016384:	f7fe fe1c 	bl	8014fc0 <HAL_RCC_GetPCLK2Freq>
 8016388:	61b8      	str	r0, [r7, #24]
        break;
 801638a:	e00f      	b.n	80163ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801638c:	4b1d      	ldr	r3, [pc, #116]	; (8016404 <UART_SetConfig+0x4c0>)
 801638e:	61bb      	str	r3, [r7, #24]
        break;
 8016390:	e00c      	b.n	80163ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016392:	f7fe fd3f 	bl	8014e14 <HAL_RCC_GetSysClockFreq>
 8016396:	61b8      	str	r0, [r7, #24]
        break;
 8016398:	e008      	b.n	80163ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801639a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801639e:	61bb      	str	r3, [r7, #24]
        break;
 80163a0:	e004      	b.n	80163ac <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80163a2:	2300      	movs	r3, #0
 80163a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80163a6:	2301      	movs	r3, #1
 80163a8:	77bb      	strb	r3, [r7, #30]
        break;
 80163aa:	bf00      	nop
    }

    if (pclk != 0U)
 80163ac:	69bb      	ldr	r3, [r7, #24]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d018      	beq.n	80163e4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	685b      	ldr	r3, [r3, #4]
 80163b6:	085a      	lsrs	r2, r3, #1
 80163b8:	69bb      	ldr	r3, [r7, #24]
 80163ba:	441a      	add	r2, r3
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	685b      	ldr	r3, [r3, #4]
 80163c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80163c4:	b29b      	uxth	r3, r3
 80163c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80163c8:	693b      	ldr	r3, [r7, #16]
 80163ca:	2b0f      	cmp	r3, #15
 80163cc:	d908      	bls.n	80163e0 <UART_SetConfig+0x49c>
 80163ce:	693b      	ldr	r3, [r7, #16]
 80163d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80163d4:	d204      	bcs.n	80163e0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	693a      	ldr	r2, [r7, #16]
 80163dc:	60da      	str	r2, [r3, #12]
 80163de:	e001      	b.n	80163e4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80163e0:	2301      	movs	r3, #1
 80163e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	2200      	movs	r2, #0
 80163e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	2200      	movs	r2, #0
 80163ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80163f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80163f2:	4618      	mov	r0, r3
 80163f4:	3720      	adds	r7, #32
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bd80      	pop	{r7, pc}
 80163fa:	bf00      	nop
 80163fc:	40007c00 	.word	0x40007c00
 8016400:	40023800 	.word	0x40023800
 8016404:	00f42400 	.word	0x00f42400

08016408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016408:	b480      	push	{r7}
 801640a:	b083      	sub	sp, #12
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016414:	f003 0301 	and.w	r3, r3, #1
 8016418:	2b00      	cmp	r3, #0
 801641a:	d00a      	beq.n	8016432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	685b      	ldr	r3, [r3, #4]
 8016422:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	430a      	orrs	r2, r1
 8016430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016436:	f003 0302 	and.w	r3, r3, #2
 801643a:	2b00      	cmp	r3, #0
 801643c:	d00a      	beq.n	8016454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	685b      	ldr	r3, [r3, #4]
 8016444:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	430a      	orrs	r2, r1
 8016452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016458:	f003 0304 	and.w	r3, r3, #4
 801645c:	2b00      	cmp	r3, #0
 801645e:	d00a      	beq.n	8016476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	685b      	ldr	r3, [r3, #4]
 8016466:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	430a      	orrs	r2, r1
 8016474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801647a:	f003 0308 	and.w	r3, r3, #8
 801647e:	2b00      	cmp	r3, #0
 8016480:	d00a      	beq.n	8016498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	685b      	ldr	r3, [r3, #4]
 8016488:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	430a      	orrs	r2, r1
 8016496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801649c:	f003 0310 	and.w	r3, r3, #16
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d00a      	beq.n	80164ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	689b      	ldr	r3, [r3, #8]
 80164aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	430a      	orrs	r2, r1
 80164b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164be:	f003 0320 	and.w	r3, r3, #32
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d00a      	beq.n	80164dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	689b      	ldr	r3, [r3, #8]
 80164cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	430a      	orrs	r2, r1
 80164da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d01a      	beq.n	801651e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	685b      	ldr	r3, [r3, #4]
 80164ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	430a      	orrs	r2, r1
 80164fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016506:	d10a      	bne.n	801651e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	685b      	ldr	r3, [r3, #4]
 801650e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	430a      	orrs	r2, r1
 801651c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016526:	2b00      	cmp	r3, #0
 8016528:	d00a      	beq.n	8016540 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	685b      	ldr	r3, [r3, #4]
 8016530:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	430a      	orrs	r2, r1
 801653e:	605a      	str	r2, [r3, #4]
  }
}
 8016540:	bf00      	nop
 8016542:	370c      	adds	r7, #12
 8016544:	46bd      	mov	sp, r7
 8016546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654a:	4770      	bx	lr

0801654c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b086      	sub	sp, #24
 8016550:	af02      	add	r7, sp, #8
 8016552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	2200      	movs	r2, #0
 8016558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801655c:	f7fd fcfa 	bl	8013f54 <HAL_GetTick>
 8016560:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	f003 0308 	and.w	r3, r3, #8
 801656c:	2b08      	cmp	r3, #8
 801656e:	d10e      	bne.n	801658e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016574:	9300      	str	r3, [sp, #0]
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	2200      	movs	r2, #0
 801657a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801657e:	6878      	ldr	r0, [r7, #4]
 8016580:	f000 f817 	bl	80165b2 <UART_WaitOnFlagUntilTimeout>
 8016584:	4603      	mov	r3, r0
 8016586:	2b00      	cmp	r3, #0
 8016588:	d001      	beq.n	801658e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801658a:	2303      	movs	r3, #3
 801658c:	e00d      	b.n	80165aa <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	2220      	movs	r2, #32
 8016592:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	2220      	movs	r2, #32
 8016598:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	2200      	movs	r2, #0
 801659e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	2200      	movs	r2, #0
 80165a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80165a8:	2300      	movs	r3, #0
}
 80165aa:	4618      	mov	r0, r3
 80165ac:	3710      	adds	r7, #16
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}

080165b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80165b2:	b580      	push	{r7, lr}
 80165b4:	b084      	sub	sp, #16
 80165b6:	af00      	add	r7, sp, #0
 80165b8:	60f8      	str	r0, [r7, #12]
 80165ba:	60b9      	str	r1, [r7, #8]
 80165bc:	603b      	str	r3, [r7, #0]
 80165be:	4613      	mov	r3, r2
 80165c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80165c2:	e05e      	b.n	8016682 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80165c4:	69bb      	ldr	r3, [r7, #24]
 80165c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165ca:	d05a      	beq.n	8016682 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80165cc:	f7fd fcc2 	bl	8013f54 <HAL_GetTick>
 80165d0:	4602      	mov	r2, r0
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	1ad3      	subs	r3, r2, r3
 80165d6:	69ba      	ldr	r2, [r7, #24]
 80165d8:	429a      	cmp	r2, r3
 80165da:	d302      	bcc.n	80165e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80165dc:	69bb      	ldr	r3, [r7, #24]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d11b      	bne.n	801661a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	681a      	ldr	r2, [r3, #0]
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80165f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	689a      	ldr	r2, [r3, #8]
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	f022 0201 	bic.w	r2, r2, #1
 8016600:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	2220      	movs	r2, #32
 8016606:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	2220      	movs	r2, #32
 801660c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	2200      	movs	r2, #0
 8016612:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8016616:	2303      	movs	r3, #3
 8016618:	e043      	b.n	80166a2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	f003 0304 	and.w	r3, r3, #4
 8016624:	2b00      	cmp	r3, #0
 8016626:	d02c      	beq.n	8016682 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	69db      	ldr	r3, [r3, #28]
 801662e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016636:	d124      	bne.n	8016682 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016640:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	681a      	ldr	r2, [r3, #0]
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8016650:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	689a      	ldr	r2, [r3, #8]
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	f022 0201 	bic.w	r2, r2, #1
 8016660:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	2220      	movs	r2, #32
 8016666:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	2220      	movs	r2, #32
 801666c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	2220      	movs	r2, #32
 8016672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	2200      	movs	r2, #0
 801667a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 801667e:	2303      	movs	r3, #3
 8016680:	e00f      	b.n	80166a2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	69da      	ldr	r2, [r3, #28]
 8016688:	68bb      	ldr	r3, [r7, #8]
 801668a:	4013      	ands	r3, r2
 801668c:	68ba      	ldr	r2, [r7, #8]
 801668e:	429a      	cmp	r2, r3
 8016690:	bf0c      	ite	eq
 8016692:	2301      	moveq	r3, #1
 8016694:	2300      	movne	r3, #0
 8016696:	b2db      	uxtb	r3, r3
 8016698:	461a      	mov	r2, r3
 801669a:	79fb      	ldrb	r3, [r7, #7]
 801669c:	429a      	cmp	r2, r3
 801669e:	d091      	beq.n	80165c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80166a0:	2300      	movs	r3, #0
}
 80166a2:	4618      	mov	r0, r3
 80166a4:	3710      	adds	r7, #16
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}

080166aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80166aa:	b480      	push	{r7}
 80166ac:	b083      	sub	sp, #12
 80166ae:	af00      	add	r7, sp, #0
 80166b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	681a      	ldr	r2, [r3, #0]
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80166c0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	689a      	ldr	r2, [r3, #8]
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	f022 0201 	bic.w	r2, r2, #1
 80166d0:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80166d6:	2b01      	cmp	r3, #1
 80166d8:	d107      	bne.n	80166ea <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	681a      	ldr	r2, [r3, #0]
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	f022 0210 	bic.w	r2, r2, #16
 80166e8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	2220      	movs	r2, #32
 80166ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	2200      	movs	r2, #0
 80166f4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	2200      	movs	r2, #0
 80166fa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80166fc:	bf00      	nop
 80166fe:	370c      	adds	r7, #12
 8016700:	46bd      	mov	sp, r7
 8016702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016706:	4770      	bx	lr

08016708 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b084      	sub	sp, #16
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016714:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	2200      	movs	r2, #0
 801671a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	2200      	movs	r2, #0
 8016722:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016726:	68f8      	ldr	r0, [r7, #12]
 8016728:	f7ff fbf6 	bl	8015f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801672c:	bf00      	nop
 801672e:	3710      	adds	r7, #16
 8016730:	46bd      	mov	sp, r7
 8016732:	bd80      	pop	{r7, pc}

08016734 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016734:	b580      	push	{r7, lr}
 8016736:	b082      	sub	sp, #8
 8016738:	af00      	add	r7, sp, #0
 801673a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	681a      	ldr	r2, [r3, #0]
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801674a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	2220      	movs	r2, #32
 8016750:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	2200      	movs	r2, #0
 8016756:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f7ff fbd3 	bl	8015f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801675e:	bf00      	nop
 8016760:	3708      	adds	r7, #8
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}

08016766 <_ZdlPv>:
 8016766:	f000 bb8b 	b.w	8016e80 <free>

0801676a <_ZdlPvj>:
 801676a:	f7ff bffc 	b.w	8016766 <_ZdlPv>

0801676e <_Znwj>:
 801676e:	2801      	cmp	r0, #1
 8016770:	bf38      	it	cc
 8016772:	2001      	movcc	r0, #1
 8016774:	b510      	push	{r4, lr}
 8016776:	4604      	mov	r4, r0
 8016778:	4620      	mov	r0, r4
 801677a:	f000 fb79 	bl	8016e70 <malloc>
 801677e:	b930      	cbnz	r0, 801678e <_Znwj+0x20>
 8016780:	f000 fb0a 	bl	8016d98 <_ZSt15get_new_handlerv>
 8016784:	b908      	cbnz	r0, 801678a <_Znwj+0x1c>
 8016786:	f000 fb0f 	bl	8016da8 <abort>
 801678a:	4780      	blx	r0
 801678c:	e7f4      	b.n	8016778 <_Znwj+0xa>
 801678e:	bd10      	pop	{r4, pc}

08016790 <_ZNSaIcEC1Ev>:
 8016790:	4770      	bx	lr

08016792 <_ZNSaIcED1Ev>:
 8016792:	4770      	bx	lr

08016794 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8016794:	68c3      	ldr	r3, [r0, #12]
 8016796:	689a      	ldr	r2, [r3, #8]
 8016798:	60c2      	str	r2, [r0, #12]
 801679a:	b510      	push	{r4, lr}
 801679c:	b102      	cbz	r2, 80167a0 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 801679e:	6050      	str	r0, [r2, #4]
 80167a0:	6842      	ldr	r2, [r0, #4]
 80167a2:	605a      	str	r2, [r3, #4]
 80167a4:	680c      	ldr	r4, [r1, #0]
 80167a6:	4284      	cmp	r4, r0
 80167a8:	d103      	bne.n	80167b2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 80167aa:	600b      	str	r3, [r1, #0]
 80167ac:	6098      	str	r0, [r3, #8]
 80167ae:	6043      	str	r3, [r0, #4]
 80167b0:	bd10      	pop	{r4, pc}
 80167b2:	6891      	ldr	r1, [r2, #8]
 80167b4:	4281      	cmp	r1, r0
 80167b6:	bf0c      	ite	eq
 80167b8:	6093      	streq	r3, [r2, #8]
 80167ba:	60d3      	strne	r3, [r2, #12]
 80167bc:	e7f6      	b.n	80167ac <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080167be <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80167be:	6883      	ldr	r3, [r0, #8]
 80167c0:	68da      	ldr	r2, [r3, #12]
 80167c2:	6082      	str	r2, [r0, #8]
 80167c4:	b510      	push	{r4, lr}
 80167c6:	b102      	cbz	r2, 80167ca <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80167c8:	6050      	str	r0, [r2, #4]
 80167ca:	6842      	ldr	r2, [r0, #4]
 80167cc:	605a      	str	r2, [r3, #4]
 80167ce:	680c      	ldr	r4, [r1, #0]
 80167d0:	4284      	cmp	r4, r0
 80167d2:	d103      	bne.n	80167dc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 80167d4:	600b      	str	r3, [r1, #0]
 80167d6:	60d8      	str	r0, [r3, #12]
 80167d8:	6043      	str	r3, [r0, #4]
 80167da:	bd10      	pop	{r4, pc}
 80167dc:	68d1      	ldr	r1, [r2, #12]
 80167de:	4281      	cmp	r1, r0
 80167e0:	bf0c      	ite	eq
 80167e2:	60d3      	streq	r3, [r2, #12]
 80167e4:	6093      	strne	r3, [r2, #8]
 80167e6:	e7f6      	b.n	80167d6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

080167e8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80167e8:	7803      	ldrb	r3, [r0, #0]
 80167ea:	b933      	cbnz	r3, 80167fa <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80167ec:	6843      	ldr	r3, [r0, #4]
 80167ee:	685b      	ldr	r3, [r3, #4]
 80167f0:	4283      	cmp	r3, r0
 80167f2:	d102      	bne.n	80167fa <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80167f4:	68db      	ldr	r3, [r3, #12]
 80167f6:	4618      	mov	r0, r3
 80167f8:	4770      	bx	lr
 80167fa:	6882      	ldr	r2, [r0, #8]
 80167fc:	b122      	cbz	r2, 8016808 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 80167fe:	4613      	mov	r3, r2
 8016800:	68d2      	ldr	r2, [r2, #12]
 8016802:	2a00      	cmp	r2, #0
 8016804:	d1fb      	bne.n	80167fe <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8016806:	e7f6      	b.n	80167f6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8016808:	6843      	ldr	r3, [r0, #4]
 801680a:	689a      	ldr	r2, [r3, #8]
 801680c:	4282      	cmp	r2, r0
 801680e:	d1f2      	bne.n	80167f6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8016810:	4618      	mov	r0, r3
 8016812:	685b      	ldr	r3, [r3, #4]
 8016814:	e7f9      	b.n	801680a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08016816 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8016816:	68c3      	ldr	r3, [r0, #12]
 8016818:	b123      	cbz	r3, 8016824 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 801681a:	4618      	mov	r0, r3
 801681c:	689b      	ldr	r3, [r3, #8]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d1fb      	bne.n	801681a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8016822:	4770      	bx	lr
 8016824:	6843      	ldr	r3, [r0, #4]
 8016826:	68da      	ldr	r2, [r3, #12]
 8016828:	4282      	cmp	r2, r0
 801682a:	d102      	bne.n	8016832 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 801682c:	4618      	mov	r0, r3
 801682e:	685b      	ldr	r3, [r3, #4]
 8016830:	e7f9      	b.n	8016826 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 8016832:	68c2      	ldr	r2, [r0, #12]
 8016834:	4293      	cmp	r3, r2
 8016836:	bf18      	it	ne
 8016838:	4618      	movne	r0, r3
 801683a:	4770      	bx	lr

0801683c <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 801683c:	f7ff bfd4 	b.w	80167e8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08016840 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8016840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016844:	461e      	mov	r6, r3
 8016846:	f103 0804 	add.w	r8, r3, #4
 801684a:	2300      	movs	r3, #0
 801684c:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8016850:	460c      	mov	r4, r1
 8016852:	604a      	str	r2, [r1, #4]
 8016854:	700b      	strb	r3, [r1, #0]
 8016856:	b300      	cbz	r0, 801689a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8016858:	4296      	cmp	r6, r2
 801685a:	6091      	str	r1, [r2, #8]
 801685c:	d118      	bne.n	8016890 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 801685e:	6071      	str	r1, [r6, #4]
 8016860:	60f4      	str	r4, [r6, #12]
 8016862:	2701      	movs	r7, #1
 8016864:	f04f 0900 	mov.w	r9, #0
 8016868:	6873      	ldr	r3, [r6, #4]
 801686a:	42a3      	cmp	r3, r4
 801686c:	d03f      	beq.n	80168ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 801686e:	6860      	ldr	r0, [r4, #4]
 8016870:	7802      	ldrb	r2, [r0, #0]
 8016872:	2a00      	cmp	r2, #0
 8016874:	d13c      	bne.n	80168f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 8016876:	6845      	ldr	r5, [r0, #4]
 8016878:	68ab      	ldr	r3, [r5, #8]
 801687a:	4298      	cmp	r0, r3
 801687c:	d123      	bne.n	80168c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 801687e:	68eb      	ldr	r3, [r5, #12]
 8016880:	b183      	cbz	r3, 80168a4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8016882:	781a      	ldrb	r2, [r3, #0]
 8016884:	b972      	cbnz	r2, 80168a4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8016886:	7007      	strb	r7, [r0, #0]
 8016888:	701f      	strb	r7, [r3, #0]
 801688a:	702a      	strb	r2, [r5, #0]
 801688c:	462c      	mov	r4, r5
 801688e:	e7eb      	b.n	8016868 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8016890:	68b3      	ldr	r3, [r6, #8]
 8016892:	4293      	cmp	r3, r2
 8016894:	d1e5      	bne.n	8016862 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8016896:	60b1      	str	r1, [r6, #8]
 8016898:	e7e3      	b.n	8016862 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801689a:	60d1      	str	r1, [r2, #12]
 801689c:	68f3      	ldr	r3, [r6, #12]
 801689e:	4293      	cmp	r3, r2
 80168a0:	d1df      	bne.n	8016862 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80168a2:	e7dd      	b.n	8016860 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 80168a4:	68c3      	ldr	r3, [r0, #12]
 80168a6:	42a3      	cmp	r3, r4
 80168a8:	d103      	bne.n	80168b2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 80168aa:	4641      	mov	r1, r8
 80168ac:	f7ff ff72 	bl	8016794 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80168b0:	4604      	mov	r4, r0
 80168b2:	6863      	ldr	r3, [r4, #4]
 80168b4:	4641      	mov	r1, r8
 80168b6:	701f      	strb	r7, [r3, #0]
 80168b8:	4628      	mov	r0, r5
 80168ba:	f885 9000 	strb.w	r9, [r5]
 80168be:	f7ff ff7e 	bl	80167be <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80168c2:	4625      	mov	r5, r4
 80168c4:	e7e2      	b.n	801688c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 80168c6:	b113      	cbz	r3, 80168ce <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 80168c8:	781a      	ldrb	r2, [r3, #0]
 80168ca:	2a00      	cmp	r2, #0
 80168cc:	d0db      	beq.n	8016886 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 80168ce:	6883      	ldr	r3, [r0, #8]
 80168d0:	42a3      	cmp	r3, r4
 80168d2:	d103      	bne.n	80168dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 80168d4:	4641      	mov	r1, r8
 80168d6:	f7ff ff72 	bl	80167be <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80168da:	4604      	mov	r4, r0
 80168dc:	6863      	ldr	r3, [r4, #4]
 80168de:	4641      	mov	r1, r8
 80168e0:	701f      	strb	r7, [r3, #0]
 80168e2:	4628      	mov	r0, r5
 80168e4:	f885 9000 	strb.w	r9, [r5]
 80168e8:	f7ff ff54 	bl	8016794 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80168ec:	e7e9      	b.n	80168c2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 80168ee:	4623      	mov	r3, r4
 80168f0:	2201      	movs	r2, #1
 80168f2:	701a      	strb	r2, [r3, #0]
 80168f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080168f8 <_ZSt17__throw_bad_allocv>:
 80168f8:	b508      	push	{r3, lr}
 80168fa:	f000 fa55 	bl	8016da8 <abort>

080168fe <_ZSt19__throw_logic_errorPKc>:
 80168fe:	b508      	push	{r3, lr}
 8016900:	f000 fa52 	bl	8016da8 <abort>

08016904 <_ZSt24__throw_invalid_argumentPKc>:
 8016904:	b508      	push	{r3, lr}
 8016906:	f000 fa4f 	bl	8016da8 <abort>

0801690a <_ZSt20__throw_length_errorPKc>:
 801690a:	b508      	push	{r3, lr}
 801690c:	f000 fa4c 	bl	8016da8 <abort>

08016910 <_ZSt20__throw_out_of_rangePKc>:
 8016910:	b508      	push	{r3, lr}
 8016912:	f000 fa49 	bl	8016da8 <abort>

08016916 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8016916:	b10a      	cbz	r2, 801691c <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8016918:	f000 baba 	b.w	8016e90 <memcmp>
 801691c:	4610      	mov	r0, r2
 801691e:	4770      	bx	lr

08016920 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8016920:	b10a      	cbz	r2, 8016926 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8016922:	f000 bac3 	b.w	8016eac <memcpy>
 8016926:	4770      	bx	lr

08016928 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8016928:	6001      	str	r1, [r0, #0]
 801692a:	4770      	bx	lr

0801692c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 801692c:	6800      	ldr	r0, [r0, #0]
 801692e:	4770      	bx	lr

08016930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8016930:	3008      	adds	r0, #8
 8016932:	4770      	bx	lr

08016934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8016934:	6081      	str	r1, [r0, #8]
 8016936:	4770      	bx	lr

08016938 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8016938:	6803      	ldr	r3, [r0, #0]
 801693a:	6041      	str	r1, [r0, #4]
 801693c:	2200      	movs	r2, #0
 801693e:	545a      	strb	r2, [r3, r1]
 8016940:	4770      	bx	lr
	...

08016944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8016944:	b508      	push	{r3, lr}
 8016946:	680b      	ldr	r3, [r1, #0]
 8016948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801694c:	d302      	bcc.n	8016954 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801694e:	480d      	ldr	r0, [pc, #52]	; (8016984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8016950:	f7ff ffdb 	bl	801690a <_ZSt20__throw_length_errorPKc>
 8016954:	4293      	cmp	r3, r2
 8016956:	d90b      	bls.n	8016970 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8016958:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801695c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8016960:	d206      	bcs.n	8016970 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8016962:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8016966:	bf2a      	itet	cs
 8016968:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 801696c:	6008      	strcc	r0, [r1, #0]
 801696e:	600b      	strcs	r3, [r1, #0]
 8016970:	6808      	ldr	r0, [r1, #0]
 8016972:	3001      	adds	r0, #1
 8016974:	d501      	bpl.n	801697a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8016976:	f7ff ffbf 	bl	80168f8 <_ZSt17__throw_bad_allocv>
 801697a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801697e:	f7ff bef6 	b.w	801676e <_Znwj>
 8016982:	bf00      	nop
 8016984:	0801a4ac 	.word	0x0801a4ac

08016988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8016988:	f850 3b08 	ldr.w	r3, [r0], #8
 801698c:	4283      	cmp	r3, r0
 801698e:	d002      	beq.n	8016996 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8016990:	4618      	mov	r0, r3
 8016992:	f7ff bee8 	b.w	8016766 <_ZdlPv>
 8016996:	4770      	bx	lr

08016998 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8016998:	6840      	ldr	r0, [r0, #4]
 801699a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801699e:	3901      	subs	r1, #1
 80169a0:	1a09      	subs	r1, r1, r0
 80169a2:	4291      	cmp	r1, r2
 80169a4:	b508      	push	{r3, lr}
 80169a6:	d202      	bcs.n	80169ae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80169a8:	4618      	mov	r0, r3
 80169aa:	f7ff ffae 	bl	801690a <_ZSt20__throw_length_errorPKc>
 80169ae:	bd08      	pop	{r3, pc}

080169b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80169b0:	2a01      	cmp	r2, #1
 80169b2:	b510      	push	{r4, lr}
 80169b4:	d102      	bne.n	80169bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80169b6:	780a      	ldrb	r2, [r1, #0]
 80169b8:	7002      	strb	r2, [r0, #0]
 80169ba:	bd10      	pop	{r4, pc}
 80169bc:	f7ff ffb0 	bl	8016920 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80169c0:	e7fb      	b.n	80169ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080169c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80169c2:	2a01      	cmp	r2, #1
 80169c4:	b430      	push	{r4, r5}
 80169c6:	d103      	bne.n	80169d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80169c8:	780b      	ldrb	r3, [r1, #0]
 80169ca:	7003      	strb	r3, [r0, #0]
 80169cc:	bc30      	pop	{r4, r5}
 80169ce:	4770      	bx	lr
 80169d0:	2a00      	cmp	r2, #0
 80169d2:	d0fb      	beq.n	80169cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80169d4:	bc30      	pop	{r4, r5}
 80169d6:	f000 ba77 	b.w	8016ec8 <memmove>

080169da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80169da:	b508      	push	{r3, lr}
 80169dc:	1a52      	subs	r2, r2, r1
 80169de:	f7ff ffe7 	bl	80169b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80169e2:	bd08      	pop	{r3, pc}

080169e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80169e4:	b508      	push	{r3, lr}
 80169e6:	1a52      	subs	r2, r2, r1
 80169e8:	f7ff ffe2 	bl	80169b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80169ec:	bd08      	pop	{r3, pc}

080169ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80169ee:	4288      	cmp	r0, r1
 80169f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169f2:	4604      	mov	r4, r0
 80169f4:	460e      	mov	r6, r1
 80169f6:	d01e      	beq.n	8016a36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 80169f8:	4603      	mov	r3, r0
 80169fa:	684d      	ldr	r5, [r1, #4]
 80169fc:	f853 2b08 	ldr.w	r2, [r3], #8
 8016a00:	429a      	cmp	r2, r3
 8016a02:	bf14      	ite	ne
 8016a04:	6882      	ldrne	r2, [r0, #8]
 8016a06:	220f      	moveq	r2, #15
 8016a08:	42aa      	cmp	r2, r5
 8016a0a:	d20a      	bcs.n	8016a22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8016a0c:	a901      	add	r1, sp, #4
 8016a0e:	9501      	str	r5, [sp, #4]
 8016a10:	f7ff ff98 	bl	8016944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8016a14:	4607      	mov	r7, r0
 8016a16:	4620      	mov	r0, r4
 8016a18:	f7ff ffb6 	bl	8016988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8016a1c:	9b01      	ldr	r3, [sp, #4]
 8016a1e:	6027      	str	r7, [r4, #0]
 8016a20:	60a3      	str	r3, [r4, #8]
 8016a22:	b125      	cbz	r5, 8016a2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 8016a24:	6831      	ldr	r1, [r6, #0]
 8016a26:	6820      	ldr	r0, [r4, #0]
 8016a28:	462a      	mov	r2, r5
 8016a2a:	f7ff ffc1 	bl	80169b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016a2e:	6823      	ldr	r3, [r4, #0]
 8016a30:	6065      	str	r5, [r4, #4]
 8016a32:	2200      	movs	r2, #0
 8016a34:	555a      	strb	r2, [r3, r5]
 8016a36:	b003      	add	sp, #12
 8016a38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016a3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8016a3a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016a3e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016a40:	461f      	mov	r7, r3
 8016a42:	6843      	ldr	r3, [r0, #4]
 8016a44:	eb01 0802 	add.w	r8, r1, r2
 8016a48:	1ab2      	subs	r2, r6, r2
 8016a4a:	441a      	add	r2, r3
 8016a4c:	eba3 0908 	sub.w	r9, r3, r8
 8016a50:	4603      	mov	r3, r0
 8016a52:	9201      	str	r2, [sp, #4]
 8016a54:	f853 2b08 	ldr.w	r2, [r3], #8
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	bf18      	it	ne
 8016a5c:	6882      	ldrne	r2, [r0, #8]
 8016a5e:	460d      	mov	r5, r1
 8016a60:	bf08      	it	eq
 8016a62:	220f      	moveq	r2, #15
 8016a64:	a901      	add	r1, sp, #4
 8016a66:	4604      	mov	r4, r0
 8016a68:	f7ff ff6c 	bl	8016944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8016a6c:	4682      	mov	sl, r0
 8016a6e:	b11d      	cbz	r5, 8016a78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8016a70:	6821      	ldr	r1, [r4, #0]
 8016a72:	462a      	mov	r2, r5
 8016a74:	f7ff ff9c 	bl	80169b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016a78:	b137      	cbz	r7, 8016a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8016a7a:	b12e      	cbz	r6, 8016a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8016a7c:	4632      	mov	r2, r6
 8016a7e:	4639      	mov	r1, r7
 8016a80:	eb0a 0005 	add.w	r0, sl, r5
 8016a84:	f7ff ff94 	bl	80169b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016a88:	f1b9 0f00 	cmp.w	r9, #0
 8016a8c:	d007      	beq.n	8016a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8016a8e:	6821      	ldr	r1, [r4, #0]
 8016a90:	4435      	add	r5, r6
 8016a92:	464a      	mov	r2, r9
 8016a94:	4441      	add	r1, r8
 8016a96:	eb0a 0005 	add.w	r0, sl, r5
 8016a9a:	f7ff ff89 	bl	80169b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016a9e:	4620      	mov	r0, r4
 8016aa0:	f7ff ff72 	bl	8016988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8016aa4:	9b01      	ldr	r3, [sp, #4]
 8016aa6:	f8c4 a000 	str.w	sl, [r4]
 8016aaa:	60a3      	str	r3, [r4, #8]
 8016aac:	b002      	add	sp, #8
 8016aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016ab2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 8016ab2:	b538      	push	{r3, r4, r5, lr}
 8016ab4:	4604      	mov	r4, r0
 8016ab6:	4615      	mov	r5, r2
 8016ab8:	4608      	mov	r0, r1
 8016aba:	4411      	add	r1, r2
 8016abc:	6862      	ldr	r2, [r4, #4]
 8016abe:	1a52      	subs	r2, r2, r1
 8016ac0:	d005      	beq.n	8016ace <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8016ac2:	b125      	cbz	r5, 8016ace <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8016ac4:	6823      	ldr	r3, [r4, #0]
 8016ac6:	4419      	add	r1, r3
 8016ac8:	4418      	add	r0, r3
 8016aca:	f7ff ff7a 	bl	80169c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8016ace:	6862      	ldr	r2, [r4, #4]
 8016ad0:	6823      	ldr	r3, [r4, #0]
 8016ad2:	1b55      	subs	r5, r2, r5
 8016ad4:	2200      	movs	r2, #0
 8016ad6:	6065      	str	r5, [r4, #4]
 8016ad8:	555a      	strb	r2, [r3, r5]
 8016ada:	bd38      	pop	{r3, r4, r5, pc}

08016adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8016adc:	f100 0208 	add.w	r2, r0, #8
 8016ae0:	6002      	str	r2, [r0, #0]
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	6042      	str	r2, [r0, #4]
 8016ae6:	7202      	strb	r2, [r0, #8]
 8016ae8:	4770      	bx	lr

08016aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8016aea:	b570      	push	{r4, r5, r6, lr}
 8016aec:	4604      	mov	r4, r0
 8016aee:	460e      	mov	r6, r1
 8016af0:	3008      	adds	r0, #8
 8016af2:	6020      	str	r0, [r4, #0]
 8016af4:	f856 3b08 	ldr.w	r3, [r6], #8
 8016af8:	429e      	cmp	r6, r3
 8016afa:	460d      	mov	r5, r1
 8016afc:	d10b      	bne.n	8016b16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8016afe:	2210      	movs	r2, #16
 8016b00:	4631      	mov	r1, r6
 8016b02:	f7ff ff0d 	bl	8016920 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8016b06:	686b      	ldr	r3, [r5, #4]
 8016b08:	6063      	str	r3, [r4, #4]
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	602e      	str	r6, [r5, #0]
 8016b0e:	606b      	str	r3, [r5, #4]
 8016b10:	722b      	strb	r3, [r5, #8]
 8016b12:	4620      	mov	r0, r4
 8016b14:	bd70      	pop	{r4, r5, r6, pc}
 8016b16:	6023      	str	r3, [r4, #0]
 8016b18:	688b      	ldr	r3, [r1, #8]
 8016b1a:	60a3      	str	r3, [r4, #8]
 8016b1c:	e7f3      	b.n	8016b06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08016b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8016b1e:	b510      	push	{r4, lr}
 8016b20:	4604      	mov	r4, r0
 8016b22:	f7ff ff31 	bl	8016988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8016b26:	4620      	mov	r0, r4
 8016b28:	bd10      	pop	{r4, pc}

08016b2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8016b2a:	b510      	push	{r4, lr}
 8016b2c:	4604      	mov	r4, r0
 8016b2e:	f7ff ff5e 	bl	80169ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8016b32:	4620      	mov	r0, r4
 8016b34:	bd10      	pop	{r4, pc}

08016b36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8016b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b38:	460d      	mov	r5, r1
 8016b3a:	f851 3b08 	ldr.w	r3, [r1], #8
 8016b3e:	686a      	ldr	r2, [r5, #4]
 8016b40:	4299      	cmp	r1, r3
 8016b42:	4604      	mov	r4, r0
 8016b44:	6800      	ldr	r0, [r0, #0]
 8016b46:	d10d      	bne.n	8016b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8016b48:	b10a      	cbz	r2, 8016b4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 8016b4a:	f7ff ff31 	bl	80169b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016b4e:	686b      	ldr	r3, [r5, #4]
 8016b50:	6822      	ldr	r2, [r4, #0]
 8016b52:	6063      	str	r3, [r4, #4]
 8016b54:	2100      	movs	r1, #0
 8016b56:	54d1      	strb	r1, [r2, r3]
 8016b58:	682a      	ldr	r2, [r5, #0]
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	606b      	str	r3, [r5, #4]
 8016b5e:	7013      	strb	r3, [r2, #0]
 8016b60:	4620      	mov	r0, r4
 8016b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b64:	e9c4 3200 	strd	r3, r2, [r4]
 8016b68:	f104 0708 	add.w	r7, r4, #8
 8016b6c:	42b8      	cmp	r0, r7
 8016b6e:	68ab      	ldr	r3, [r5, #8]
 8016b70:	bf18      	it	ne
 8016b72:	68a6      	ldrne	r6, [r4, #8]
 8016b74:	60a3      	str	r3, [r4, #8]
 8016b76:	bf08      	it	eq
 8016b78:	2000      	moveq	r0, #0
 8016b7a:	b110      	cbz	r0, 8016b82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 8016b7c:	6028      	str	r0, [r5, #0]
 8016b7e:	60ae      	str	r6, [r5, #8]
 8016b80:	e7ea      	b.n	8016b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 8016b82:	6029      	str	r1, [r5, #0]
 8016b84:	e7e8      	b.n	8016b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

08016b86 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8016b86:	6840      	ldr	r0, [r0, #4]
 8016b88:	4770      	bx	lr

08016b8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8016b8a:	6840      	ldr	r0, [r0, #4]
 8016b8c:	4770      	bx	lr

08016b8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8016b8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b90:	4605      	mov	r5, r0
 8016b92:	6843      	ldr	r3, [r0, #4]
 8016b94:	4299      	cmp	r1, r3
 8016b96:	bf2c      	ite	cs
 8016b98:	9101      	strcs	r1, [sp, #4]
 8016b9a:	9301      	strcc	r3, [sp, #4]
 8016b9c:	f855 1b08 	ldr.w	r1, [r5], #8
 8016ba0:	428d      	cmp	r5, r1
 8016ba2:	bf18      	it	ne
 8016ba4:	6882      	ldrne	r2, [r0, #8]
 8016ba6:	4604      	mov	r4, r0
 8016ba8:	9801      	ldr	r0, [sp, #4]
 8016baa:	bf08      	it	eq
 8016bac:	220f      	moveq	r2, #15
 8016bae:	4290      	cmp	r0, r2
 8016bb0:	d012      	beq.n	8016bd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
 8016bb2:	d801      	bhi.n	8016bb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x2a>
 8016bb4:	280f      	cmp	r0, #15
 8016bb6:	d911      	bls.n	8016bdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4e>
 8016bb8:	a901      	add	r1, sp, #4
 8016bba:	4620      	mov	r0, r4
 8016bbc:	f7ff fec2 	bl	8016944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8016bc0:	6862      	ldr	r2, [r4, #4]
 8016bc2:	6821      	ldr	r1, [r4, #0]
 8016bc4:	3201      	adds	r2, #1
 8016bc6:	4605      	mov	r5, r0
 8016bc8:	f7ff fef2 	bl	80169b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016bcc:	4620      	mov	r0, r4
 8016bce:	f7ff fedb 	bl	8016988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8016bd2:	9b01      	ldr	r3, [sp, #4]
 8016bd4:	6025      	str	r5, [r4, #0]
 8016bd6:	60a3      	str	r3, [r4, #8]
 8016bd8:	b003      	add	sp, #12
 8016bda:	bd30      	pop	{r4, r5, pc}
 8016bdc:	428d      	cmp	r5, r1
 8016bde:	d0fb      	beq.n	8016bd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
 8016be0:	1c5a      	adds	r2, r3, #1
 8016be2:	4628      	mov	r0, r5
 8016be4:	f7ff fee4 	bl	80169b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016be8:	6820      	ldr	r0, [r4, #0]
 8016bea:	f7ff fdbc 	bl	8016766 <_ZdlPv>
 8016bee:	6025      	str	r5, [r4, #0]
 8016bf0:	e7f2      	b.n	8016bd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>

08016bf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>:
 8016bf2:	6843      	ldr	r3, [r0, #4]
 8016bf4:	6800      	ldr	r0, [r0, #0]
 8016bf6:	3b01      	subs	r3, #1
 8016bf8:	4418      	add	r0, r3
 8016bfa:	4770      	bx	lr

08016bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c00:	f853 2b08 	ldr.w	r2, [r3], #8
 8016c04:	6846      	ldr	r6, [r0, #4]
 8016c06:	429a      	cmp	r2, r3
 8016c08:	bf18      	it	ne
 8016c0a:	6883      	ldrne	r3, [r0, #8]
 8016c0c:	f106 0501 	add.w	r5, r6, #1
 8016c10:	bf08      	it	eq
 8016c12:	230f      	moveq	r3, #15
 8016c14:	429d      	cmp	r5, r3
 8016c16:	4604      	mov	r4, r0
 8016c18:	460f      	mov	r7, r1
 8016c1a:	d906      	bls.n	8016c2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 8016c1c:	2301      	movs	r3, #1
 8016c1e:	9300      	str	r3, [sp, #0]
 8016c20:	2300      	movs	r3, #0
 8016c22:	461a      	mov	r2, r3
 8016c24:	4631      	mov	r1, r6
 8016c26:	f7ff ff08 	bl	8016a3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8016c2a:	6823      	ldr	r3, [r4, #0]
 8016c2c:	559f      	strb	r7, [r3, r6]
 8016c2e:	6823      	ldr	r3, [r4, #0]
 8016c30:	6065      	str	r5, [r4, #4]
 8016c32:	2200      	movs	r2, #0
 8016c34:	555a      	strb	r2, [r3, r5]
 8016c36:	b003      	add	sp, #12
 8016c38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016c3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>:
 8016c3a:	b508      	push	{r3, lr}
 8016c3c:	6841      	ldr	r1, [r0, #4]
 8016c3e:	2201      	movs	r2, #1
 8016c40:	3901      	subs	r1, #1
 8016c42:	f7ff ff36 	bl	8016ab2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 8016c46:	bd08      	pop	{r3, pc}

08016c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8016c48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016c4a:	4604      	mov	r4, r0
 8016c4c:	4623      	mov	r3, r4
 8016c4e:	6840      	ldr	r0, [r0, #4]
 8016c50:	f853 6b08 	ldr.w	r6, [r3], #8
 8016c54:	429e      	cmp	r6, r3
 8016c56:	bf18      	it	ne
 8016c58:	68a3      	ldrne	r3, [r4, #8]
 8016c5a:	eb00 0502 	add.w	r5, r0, r2
 8016c5e:	bf08      	it	eq
 8016c60:	230f      	moveq	r3, #15
 8016c62:	429d      	cmp	r5, r3
 8016c64:	d80a      	bhi.n	8016c7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8016c66:	b112      	cbz	r2, 8016c6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8016c68:	4430      	add	r0, r6
 8016c6a:	f7ff fea1 	bl	80169b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016c6e:	6823      	ldr	r3, [r4, #0]
 8016c70:	6065      	str	r5, [r4, #4]
 8016c72:	2200      	movs	r2, #0
 8016c74:	4620      	mov	r0, r4
 8016c76:	555a      	strb	r2, [r3, r5]
 8016c78:	b002      	add	sp, #8
 8016c7a:	bd70      	pop	{r4, r5, r6, pc}
 8016c7c:	9200      	str	r2, [sp, #0]
 8016c7e:	460b      	mov	r3, r1
 8016c80:	2200      	movs	r2, #0
 8016c82:	4601      	mov	r1, r0
 8016c84:	4620      	mov	r0, r4
 8016c86:	f7ff fed8 	bl	8016a3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8016c8a:	e7f0      	b.n	8016c6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08016c8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8016c8c:	b508      	push	{r3, lr}
 8016c8e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8016c92:	f7ff ffd9 	bl	8016c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8016c96:	bd08      	pop	{r3, pc}

08016c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8016c98:	b570      	push	{r4, r5, r6, lr}
 8016c9a:	4b06      	ldr	r3, [pc, #24]	; (8016cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8016c9c:	4604      	mov	r4, r0
 8016c9e:	460d      	mov	r5, r1
 8016ca0:	4616      	mov	r6, r2
 8016ca2:	2100      	movs	r1, #0
 8016ca4:	f7ff fe78 	bl	8016998 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8016ca8:	4632      	mov	r2, r6
 8016caa:	4629      	mov	r1, r5
 8016cac:	4620      	mov	r0, r4
 8016cae:	f7ff ffcb 	bl	8016c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8016cb2:	bd70      	pop	{r4, r5, r6, pc}
 8016cb4:	0801a4c4 	.word	0x0801a4c4

08016cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8016cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016cba:	4604      	mov	r4, r0
 8016cbc:	4608      	mov	r0, r1
 8016cbe:	460d      	mov	r5, r1
 8016cc0:	f7e9 faf6 	bl	80002b0 <strlen>
 8016cc4:	4b06      	ldr	r3, [pc, #24]	; (8016ce0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8016cc6:	9001      	str	r0, [sp, #4]
 8016cc8:	4602      	mov	r2, r0
 8016cca:	2100      	movs	r1, #0
 8016ccc:	4620      	mov	r0, r4
 8016cce:	f7ff fe63 	bl	8016998 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8016cd2:	9a01      	ldr	r2, [sp, #4]
 8016cd4:	4629      	mov	r1, r5
 8016cd6:	4620      	mov	r0, r4
 8016cd8:	f7ff ffb6 	bl	8016c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8016cdc:	b003      	add	sp, #12
 8016cde:	bd30      	pop	{r4, r5, pc}
 8016ce0:	0801a4c4 	.word	0x0801a4c4

08016ce4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8016ce4:	6800      	ldr	r0, [r0, #0]
 8016ce6:	4770      	bx	lr

08016ce8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 8016ce8:	b538      	push	{r3, r4, r5, lr}
 8016cea:	6845      	ldr	r5, [r0, #4]
 8016cec:	684c      	ldr	r4, [r1, #4]
 8016cee:	6800      	ldr	r0, [r0, #0]
 8016cf0:	6809      	ldr	r1, [r1, #0]
 8016cf2:	42a5      	cmp	r5, r4
 8016cf4:	462a      	mov	r2, r5
 8016cf6:	bf28      	it	cs
 8016cf8:	4622      	movcs	r2, r4
 8016cfa:	f7ff fe0c 	bl	8016916 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8016cfe:	b900      	cbnz	r0, 8016d02 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 8016d00:	1b28      	subs	r0, r5, r4
 8016d02:	bd38      	pop	{r3, r4, r5, pc}

08016d04 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8016d04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016d06:	6846      	ldr	r6, [r0, #4]
 8016d08:	9101      	str	r1, [sp, #4]
 8016d0a:	4605      	mov	r5, r0
 8016d0c:	4608      	mov	r0, r1
 8016d0e:	f7e9 facf 	bl	80002b0 <strlen>
 8016d12:	4286      	cmp	r6, r0
 8016d14:	4604      	mov	r4, r0
 8016d16:	4632      	mov	r2, r6
 8016d18:	9901      	ldr	r1, [sp, #4]
 8016d1a:	bf28      	it	cs
 8016d1c:	4602      	movcs	r2, r0
 8016d1e:	6828      	ldr	r0, [r5, #0]
 8016d20:	f7ff fdf9 	bl	8016916 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8016d24:	b900      	cbnz	r0, 8016d28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8016d26:	1b30      	subs	r0, r6, r4
 8016d28:	b002      	add	sp, #8
 8016d2a:	bd70      	pop	{r4, r5, r6, pc}

08016d2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8016d2c:	6001      	str	r1, [r0, #0]
 8016d2e:	4770      	bx	lr

08016d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8016d30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016d32:	4604      	mov	r4, r0
 8016d34:	4616      	mov	r6, r2
 8016d36:	460d      	mov	r5, r1
 8016d38:	b919      	cbnz	r1, 8016d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8016d3a:	b112      	cbz	r2, 8016d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8016d3c:	480d      	ldr	r0, [pc, #52]	; (8016d74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8016d3e:	f7ff fdde 	bl	80168fe <_ZSt19__throw_logic_errorPKc>
 8016d42:	1b73      	subs	r3, r6, r5
 8016d44:	2b0f      	cmp	r3, #15
 8016d46:	9301      	str	r3, [sp, #4]
 8016d48:	d907      	bls.n	8016d5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	a901      	add	r1, sp, #4
 8016d4e:	4620      	mov	r0, r4
 8016d50:	f7ff fdf8 	bl	8016944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8016d54:	9b01      	ldr	r3, [sp, #4]
 8016d56:	6020      	str	r0, [r4, #0]
 8016d58:	60a3      	str	r3, [r4, #8]
 8016d5a:	4632      	mov	r2, r6
 8016d5c:	4629      	mov	r1, r5
 8016d5e:	6820      	ldr	r0, [r4, #0]
 8016d60:	f7ff fe3b 	bl	80169da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8016d64:	9b01      	ldr	r3, [sp, #4]
 8016d66:	6822      	ldr	r2, [r4, #0]
 8016d68:	6063      	str	r3, [r4, #4]
 8016d6a:	2100      	movs	r1, #0
 8016d6c:	54d1      	strb	r1, [r2, r3]
 8016d6e:	b002      	add	sp, #8
 8016d70:	bd70      	pop	{r4, r5, r6, pc}
 8016d72:	bf00      	nop
 8016d74:	0801a4d9 	.word	0x0801a4d9

08016d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8016d78:	b538      	push	{r3, r4, r5, lr}
 8016d7a:	f100 0308 	add.w	r3, r0, #8
 8016d7e:	6003      	str	r3, [r0, #0]
 8016d80:	e9d1 5200 	ldrd	r5, r2, [r1]
 8016d84:	4604      	mov	r4, r0
 8016d86:	f04f 0300 	mov.w	r3, #0
 8016d8a:	442a      	add	r2, r5
 8016d8c:	4629      	mov	r1, r5
 8016d8e:	f7ff ffcf 	bl	8016d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8016d92:	4620      	mov	r0, r4
 8016d94:	bd38      	pop	{r3, r4, r5, pc}
	...

08016d98 <_ZSt15get_new_handlerv>:
 8016d98:	4b02      	ldr	r3, [pc, #8]	; (8016da4 <_ZSt15get_new_handlerv+0xc>)
 8016d9a:	6818      	ldr	r0, [r3, #0]
 8016d9c:	f3bf 8f5b 	dmb	ish
 8016da0:	4770      	bx	lr
 8016da2:	bf00      	nop
 8016da4:	200004c8 	.word	0x200004c8

08016da8 <abort>:
 8016da8:	b508      	push	{r3, lr}
 8016daa:	2006      	movs	r0, #6
 8016dac:	f000 f990 	bl	80170d0 <raise>
 8016db0:	2001      	movs	r0, #1
 8016db2:	f7fc ff95 	bl	8013ce0 <_exit>
	...

08016db8 <__errno>:
 8016db8:	4b01      	ldr	r3, [pc, #4]	; (8016dc0 <__errno+0x8>)
 8016dba:	6818      	ldr	r0, [r3, #0]
 8016dbc:	4770      	bx	lr
 8016dbe:	bf00      	nop
 8016dc0:	2000000c 	.word	0x2000000c

08016dc4 <__libc_init_array>:
 8016dc4:	b570      	push	{r4, r5, r6, lr}
 8016dc6:	4d0d      	ldr	r5, [pc, #52]	; (8016dfc <__libc_init_array+0x38>)
 8016dc8:	4c0d      	ldr	r4, [pc, #52]	; (8016e00 <__libc_init_array+0x3c>)
 8016dca:	1b64      	subs	r4, r4, r5
 8016dcc:	10a4      	asrs	r4, r4, #2
 8016dce:	2600      	movs	r6, #0
 8016dd0:	42a6      	cmp	r6, r4
 8016dd2:	d109      	bne.n	8016de8 <__libc_init_array+0x24>
 8016dd4:	4d0b      	ldr	r5, [pc, #44]	; (8016e04 <__libc_init_array+0x40>)
 8016dd6:	4c0c      	ldr	r4, [pc, #48]	; (8016e08 <__libc_init_array+0x44>)
 8016dd8:	f003 f814 	bl	8019e04 <_init>
 8016ddc:	1b64      	subs	r4, r4, r5
 8016dde:	10a4      	asrs	r4, r4, #2
 8016de0:	2600      	movs	r6, #0
 8016de2:	42a6      	cmp	r6, r4
 8016de4:	d105      	bne.n	8016df2 <__libc_init_array+0x2e>
 8016de6:	bd70      	pop	{r4, r5, r6, pc}
 8016de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8016dec:	4798      	blx	r3
 8016dee:	3601      	adds	r6, #1
 8016df0:	e7ee      	b.n	8016dd0 <__libc_init_array+0xc>
 8016df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8016df6:	4798      	blx	r3
 8016df8:	3601      	adds	r6, #1
 8016dfa:	e7f2      	b.n	8016de2 <__libc_init_array+0x1e>
 8016dfc:	0801a96c 	.word	0x0801a96c
 8016e00:	0801a96c 	.word	0x0801a96c
 8016e04:	0801a96c 	.word	0x0801a96c
 8016e08:	0801a990 	.word	0x0801a990

08016e0c <isalnum>:
 8016e0c:	4b02      	ldr	r3, [pc, #8]	; (8016e18 <isalnum+0xc>)
 8016e0e:	4418      	add	r0, r3
 8016e10:	7840      	ldrb	r0, [r0, #1]
 8016e12:	f000 0007 	and.w	r0, r0, #7
 8016e16:	4770      	bx	lr
 8016e18:	0801a58d 	.word	0x0801a58d

08016e1c <isalpha>:
 8016e1c:	4b02      	ldr	r3, [pc, #8]	; (8016e28 <isalpha+0xc>)
 8016e1e:	4418      	add	r0, r3
 8016e20:	7840      	ldrb	r0, [r0, #1]
 8016e22:	f000 0003 	and.w	r0, r0, #3
 8016e26:	4770      	bx	lr
 8016e28:	0801a58d 	.word	0x0801a58d

08016e2c <isspace>:
 8016e2c:	4b02      	ldr	r3, [pc, #8]	; (8016e38 <isspace+0xc>)
 8016e2e:	4418      	add	r0, r3
 8016e30:	7840      	ldrb	r0, [r0, #1]
 8016e32:	f000 0008 	and.w	r0, r0, #8
 8016e36:	4770      	bx	lr
 8016e38:	0801a58d 	.word	0x0801a58d

08016e3c <__itoa>:
 8016e3c:	1e93      	subs	r3, r2, #2
 8016e3e:	2b22      	cmp	r3, #34	; 0x22
 8016e40:	b510      	push	{r4, lr}
 8016e42:	460c      	mov	r4, r1
 8016e44:	d904      	bls.n	8016e50 <__itoa+0x14>
 8016e46:	2300      	movs	r3, #0
 8016e48:	700b      	strb	r3, [r1, #0]
 8016e4a:	461c      	mov	r4, r3
 8016e4c:	4620      	mov	r0, r4
 8016e4e:	bd10      	pop	{r4, pc}
 8016e50:	2a0a      	cmp	r2, #10
 8016e52:	d109      	bne.n	8016e68 <__itoa+0x2c>
 8016e54:	2800      	cmp	r0, #0
 8016e56:	da07      	bge.n	8016e68 <__itoa+0x2c>
 8016e58:	232d      	movs	r3, #45	; 0x2d
 8016e5a:	700b      	strb	r3, [r1, #0]
 8016e5c:	4240      	negs	r0, r0
 8016e5e:	2101      	movs	r1, #1
 8016e60:	4421      	add	r1, r4
 8016e62:	f001 f85f 	bl	8017f24 <__utoa>
 8016e66:	e7f1      	b.n	8016e4c <__itoa+0x10>
 8016e68:	2100      	movs	r1, #0
 8016e6a:	e7f9      	b.n	8016e60 <__itoa+0x24>

08016e6c <itoa>:
 8016e6c:	f7ff bfe6 	b.w	8016e3c <__itoa>

08016e70 <malloc>:
 8016e70:	4b02      	ldr	r3, [pc, #8]	; (8016e7c <malloc+0xc>)
 8016e72:	4601      	mov	r1, r0
 8016e74:	6818      	ldr	r0, [r3, #0]
 8016e76:	f000 b899 	b.w	8016fac <_malloc_r>
 8016e7a:	bf00      	nop
 8016e7c:	2000000c 	.word	0x2000000c

08016e80 <free>:
 8016e80:	4b02      	ldr	r3, [pc, #8]	; (8016e8c <free+0xc>)
 8016e82:	4601      	mov	r1, r0
 8016e84:	6818      	ldr	r0, [r3, #0]
 8016e86:	f000 b841 	b.w	8016f0c <_free_r>
 8016e8a:	bf00      	nop
 8016e8c:	2000000c 	.word	0x2000000c

08016e90 <memcmp>:
 8016e90:	b530      	push	{r4, r5, lr}
 8016e92:	3901      	subs	r1, #1
 8016e94:	2400      	movs	r4, #0
 8016e96:	42a2      	cmp	r2, r4
 8016e98:	d101      	bne.n	8016e9e <memcmp+0xe>
 8016e9a:	2000      	movs	r0, #0
 8016e9c:	e005      	b.n	8016eaa <memcmp+0x1a>
 8016e9e:	5d03      	ldrb	r3, [r0, r4]
 8016ea0:	3401      	adds	r4, #1
 8016ea2:	5d0d      	ldrb	r5, [r1, r4]
 8016ea4:	42ab      	cmp	r3, r5
 8016ea6:	d0f6      	beq.n	8016e96 <memcmp+0x6>
 8016ea8:	1b58      	subs	r0, r3, r5
 8016eaa:	bd30      	pop	{r4, r5, pc}

08016eac <memcpy>:
 8016eac:	440a      	add	r2, r1
 8016eae:	4291      	cmp	r1, r2
 8016eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8016eb4:	d100      	bne.n	8016eb8 <memcpy+0xc>
 8016eb6:	4770      	bx	lr
 8016eb8:	b510      	push	{r4, lr}
 8016eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ec2:	4291      	cmp	r1, r2
 8016ec4:	d1f9      	bne.n	8016eba <memcpy+0xe>
 8016ec6:	bd10      	pop	{r4, pc}

08016ec8 <memmove>:
 8016ec8:	4288      	cmp	r0, r1
 8016eca:	b510      	push	{r4, lr}
 8016ecc:	eb01 0402 	add.w	r4, r1, r2
 8016ed0:	d902      	bls.n	8016ed8 <memmove+0x10>
 8016ed2:	4284      	cmp	r4, r0
 8016ed4:	4623      	mov	r3, r4
 8016ed6:	d807      	bhi.n	8016ee8 <memmove+0x20>
 8016ed8:	1e43      	subs	r3, r0, #1
 8016eda:	42a1      	cmp	r1, r4
 8016edc:	d008      	beq.n	8016ef0 <memmove+0x28>
 8016ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016ee6:	e7f8      	b.n	8016eda <memmove+0x12>
 8016ee8:	4402      	add	r2, r0
 8016eea:	4601      	mov	r1, r0
 8016eec:	428a      	cmp	r2, r1
 8016eee:	d100      	bne.n	8016ef2 <memmove+0x2a>
 8016ef0:	bd10      	pop	{r4, pc}
 8016ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016efa:	e7f7      	b.n	8016eec <memmove+0x24>

08016efc <memset>:
 8016efc:	4402      	add	r2, r0
 8016efe:	4603      	mov	r3, r0
 8016f00:	4293      	cmp	r3, r2
 8016f02:	d100      	bne.n	8016f06 <memset+0xa>
 8016f04:	4770      	bx	lr
 8016f06:	f803 1b01 	strb.w	r1, [r3], #1
 8016f0a:	e7f9      	b.n	8016f00 <memset+0x4>

08016f0c <_free_r>:
 8016f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f0e:	2900      	cmp	r1, #0
 8016f10:	d048      	beq.n	8016fa4 <_free_r+0x98>
 8016f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f16:	9001      	str	r0, [sp, #4]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8016f1e:	bfb8      	it	lt
 8016f20:	18e4      	addlt	r4, r4, r3
 8016f22:	f001 fbc3 	bl	80186ac <__malloc_lock>
 8016f26:	4a20      	ldr	r2, [pc, #128]	; (8016fa8 <_free_r+0x9c>)
 8016f28:	9801      	ldr	r0, [sp, #4]
 8016f2a:	6813      	ldr	r3, [r2, #0]
 8016f2c:	4615      	mov	r5, r2
 8016f2e:	b933      	cbnz	r3, 8016f3e <_free_r+0x32>
 8016f30:	6063      	str	r3, [r4, #4]
 8016f32:	6014      	str	r4, [r2, #0]
 8016f34:	b003      	add	sp, #12
 8016f36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f3a:	f001 bbbd 	b.w	80186b8 <__malloc_unlock>
 8016f3e:	42a3      	cmp	r3, r4
 8016f40:	d90b      	bls.n	8016f5a <_free_r+0x4e>
 8016f42:	6821      	ldr	r1, [r4, #0]
 8016f44:	1862      	adds	r2, r4, r1
 8016f46:	4293      	cmp	r3, r2
 8016f48:	bf04      	itt	eq
 8016f4a:	681a      	ldreq	r2, [r3, #0]
 8016f4c:	685b      	ldreq	r3, [r3, #4]
 8016f4e:	6063      	str	r3, [r4, #4]
 8016f50:	bf04      	itt	eq
 8016f52:	1852      	addeq	r2, r2, r1
 8016f54:	6022      	streq	r2, [r4, #0]
 8016f56:	602c      	str	r4, [r5, #0]
 8016f58:	e7ec      	b.n	8016f34 <_free_r+0x28>
 8016f5a:	461a      	mov	r2, r3
 8016f5c:	685b      	ldr	r3, [r3, #4]
 8016f5e:	b10b      	cbz	r3, 8016f64 <_free_r+0x58>
 8016f60:	42a3      	cmp	r3, r4
 8016f62:	d9fa      	bls.n	8016f5a <_free_r+0x4e>
 8016f64:	6811      	ldr	r1, [r2, #0]
 8016f66:	1855      	adds	r5, r2, r1
 8016f68:	42a5      	cmp	r5, r4
 8016f6a:	d10b      	bne.n	8016f84 <_free_r+0x78>
 8016f6c:	6824      	ldr	r4, [r4, #0]
 8016f6e:	4421      	add	r1, r4
 8016f70:	1854      	adds	r4, r2, r1
 8016f72:	42a3      	cmp	r3, r4
 8016f74:	6011      	str	r1, [r2, #0]
 8016f76:	d1dd      	bne.n	8016f34 <_free_r+0x28>
 8016f78:	681c      	ldr	r4, [r3, #0]
 8016f7a:	685b      	ldr	r3, [r3, #4]
 8016f7c:	6053      	str	r3, [r2, #4]
 8016f7e:	4421      	add	r1, r4
 8016f80:	6011      	str	r1, [r2, #0]
 8016f82:	e7d7      	b.n	8016f34 <_free_r+0x28>
 8016f84:	d902      	bls.n	8016f8c <_free_r+0x80>
 8016f86:	230c      	movs	r3, #12
 8016f88:	6003      	str	r3, [r0, #0]
 8016f8a:	e7d3      	b.n	8016f34 <_free_r+0x28>
 8016f8c:	6825      	ldr	r5, [r4, #0]
 8016f8e:	1961      	adds	r1, r4, r5
 8016f90:	428b      	cmp	r3, r1
 8016f92:	bf04      	itt	eq
 8016f94:	6819      	ldreq	r1, [r3, #0]
 8016f96:	685b      	ldreq	r3, [r3, #4]
 8016f98:	6063      	str	r3, [r4, #4]
 8016f9a:	bf04      	itt	eq
 8016f9c:	1949      	addeq	r1, r1, r5
 8016f9e:	6021      	streq	r1, [r4, #0]
 8016fa0:	6054      	str	r4, [r2, #4]
 8016fa2:	e7c7      	b.n	8016f34 <_free_r+0x28>
 8016fa4:	b003      	add	sp, #12
 8016fa6:	bd30      	pop	{r4, r5, pc}
 8016fa8:	200004cc 	.word	0x200004cc

08016fac <_malloc_r>:
 8016fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fae:	1ccd      	adds	r5, r1, #3
 8016fb0:	f025 0503 	bic.w	r5, r5, #3
 8016fb4:	3508      	adds	r5, #8
 8016fb6:	2d0c      	cmp	r5, #12
 8016fb8:	bf38      	it	cc
 8016fba:	250c      	movcc	r5, #12
 8016fbc:	2d00      	cmp	r5, #0
 8016fbe:	4606      	mov	r6, r0
 8016fc0:	db01      	blt.n	8016fc6 <_malloc_r+0x1a>
 8016fc2:	42a9      	cmp	r1, r5
 8016fc4:	d903      	bls.n	8016fce <_malloc_r+0x22>
 8016fc6:	230c      	movs	r3, #12
 8016fc8:	6033      	str	r3, [r6, #0]
 8016fca:	2000      	movs	r0, #0
 8016fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fce:	f001 fb6d 	bl	80186ac <__malloc_lock>
 8016fd2:	4921      	ldr	r1, [pc, #132]	; (8017058 <_malloc_r+0xac>)
 8016fd4:	680a      	ldr	r2, [r1, #0]
 8016fd6:	4614      	mov	r4, r2
 8016fd8:	b99c      	cbnz	r4, 8017002 <_malloc_r+0x56>
 8016fda:	4f20      	ldr	r7, [pc, #128]	; (801705c <_malloc_r+0xb0>)
 8016fdc:	683b      	ldr	r3, [r7, #0]
 8016fde:	b923      	cbnz	r3, 8016fea <_malloc_r+0x3e>
 8016fe0:	4621      	mov	r1, r4
 8016fe2:	4630      	mov	r0, r6
 8016fe4:	f000 f83c 	bl	8017060 <_sbrk_r>
 8016fe8:	6038      	str	r0, [r7, #0]
 8016fea:	4629      	mov	r1, r5
 8016fec:	4630      	mov	r0, r6
 8016fee:	f000 f837 	bl	8017060 <_sbrk_r>
 8016ff2:	1c43      	adds	r3, r0, #1
 8016ff4:	d123      	bne.n	801703e <_malloc_r+0x92>
 8016ff6:	230c      	movs	r3, #12
 8016ff8:	6033      	str	r3, [r6, #0]
 8016ffa:	4630      	mov	r0, r6
 8016ffc:	f001 fb5c 	bl	80186b8 <__malloc_unlock>
 8017000:	e7e3      	b.n	8016fca <_malloc_r+0x1e>
 8017002:	6823      	ldr	r3, [r4, #0]
 8017004:	1b5b      	subs	r3, r3, r5
 8017006:	d417      	bmi.n	8017038 <_malloc_r+0x8c>
 8017008:	2b0b      	cmp	r3, #11
 801700a:	d903      	bls.n	8017014 <_malloc_r+0x68>
 801700c:	6023      	str	r3, [r4, #0]
 801700e:	441c      	add	r4, r3
 8017010:	6025      	str	r5, [r4, #0]
 8017012:	e004      	b.n	801701e <_malloc_r+0x72>
 8017014:	6863      	ldr	r3, [r4, #4]
 8017016:	42a2      	cmp	r2, r4
 8017018:	bf0c      	ite	eq
 801701a:	600b      	streq	r3, [r1, #0]
 801701c:	6053      	strne	r3, [r2, #4]
 801701e:	4630      	mov	r0, r6
 8017020:	f001 fb4a 	bl	80186b8 <__malloc_unlock>
 8017024:	f104 000b 	add.w	r0, r4, #11
 8017028:	1d23      	adds	r3, r4, #4
 801702a:	f020 0007 	bic.w	r0, r0, #7
 801702e:	1ac2      	subs	r2, r0, r3
 8017030:	d0cc      	beq.n	8016fcc <_malloc_r+0x20>
 8017032:	1a1b      	subs	r3, r3, r0
 8017034:	50a3      	str	r3, [r4, r2]
 8017036:	e7c9      	b.n	8016fcc <_malloc_r+0x20>
 8017038:	4622      	mov	r2, r4
 801703a:	6864      	ldr	r4, [r4, #4]
 801703c:	e7cc      	b.n	8016fd8 <_malloc_r+0x2c>
 801703e:	1cc4      	adds	r4, r0, #3
 8017040:	f024 0403 	bic.w	r4, r4, #3
 8017044:	42a0      	cmp	r0, r4
 8017046:	d0e3      	beq.n	8017010 <_malloc_r+0x64>
 8017048:	1a21      	subs	r1, r4, r0
 801704a:	4630      	mov	r0, r6
 801704c:	f000 f808 	bl	8017060 <_sbrk_r>
 8017050:	3001      	adds	r0, #1
 8017052:	d1dd      	bne.n	8017010 <_malloc_r+0x64>
 8017054:	e7cf      	b.n	8016ff6 <_malloc_r+0x4a>
 8017056:	bf00      	nop
 8017058:	200004cc 	.word	0x200004cc
 801705c:	200004d0 	.word	0x200004d0

08017060 <_sbrk_r>:
 8017060:	b538      	push	{r3, r4, r5, lr}
 8017062:	4d06      	ldr	r5, [pc, #24]	; (801707c <_sbrk_r+0x1c>)
 8017064:	2300      	movs	r3, #0
 8017066:	4604      	mov	r4, r0
 8017068:	4608      	mov	r0, r1
 801706a:	602b      	str	r3, [r5, #0]
 801706c:	f7fc feb0 	bl	8013dd0 <_sbrk>
 8017070:	1c43      	adds	r3, r0, #1
 8017072:	d102      	bne.n	801707a <_sbrk_r+0x1a>
 8017074:	682b      	ldr	r3, [r5, #0]
 8017076:	b103      	cbz	r3, 801707a <_sbrk_r+0x1a>
 8017078:	6023      	str	r3, [r4, #0]
 801707a:	bd38      	pop	{r3, r4, r5, pc}
 801707c:	200004d8 	.word	0x200004d8

08017080 <_raise_r>:
 8017080:	291f      	cmp	r1, #31
 8017082:	b538      	push	{r3, r4, r5, lr}
 8017084:	4604      	mov	r4, r0
 8017086:	460d      	mov	r5, r1
 8017088:	d904      	bls.n	8017094 <_raise_r+0x14>
 801708a:	2316      	movs	r3, #22
 801708c:	6003      	str	r3, [r0, #0]
 801708e:	f04f 30ff 	mov.w	r0, #4294967295
 8017092:	bd38      	pop	{r3, r4, r5, pc}
 8017094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017096:	b112      	cbz	r2, 801709e <_raise_r+0x1e>
 8017098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801709c:	b94b      	cbnz	r3, 80170b2 <_raise_r+0x32>
 801709e:	4620      	mov	r0, r4
 80170a0:	f000 f830 	bl	8017104 <_getpid_r>
 80170a4:	462a      	mov	r2, r5
 80170a6:	4601      	mov	r1, r0
 80170a8:	4620      	mov	r0, r4
 80170aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80170ae:	f000 b817 	b.w	80170e0 <_kill_r>
 80170b2:	2b01      	cmp	r3, #1
 80170b4:	d00a      	beq.n	80170cc <_raise_r+0x4c>
 80170b6:	1c59      	adds	r1, r3, #1
 80170b8:	d103      	bne.n	80170c2 <_raise_r+0x42>
 80170ba:	2316      	movs	r3, #22
 80170bc:	6003      	str	r3, [r0, #0]
 80170be:	2001      	movs	r0, #1
 80170c0:	e7e7      	b.n	8017092 <_raise_r+0x12>
 80170c2:	2400      	movs	r4, #0
 80170c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80170c8:	4628      	mov	r0, r5
 80170ca:	4798      	blx	r3
 80170cc:	2000      	movs	r0, #0
 80170ce:	e7e0      	b.n	8017092 <_raise_r+0x12>

080170d0 <raise>:
 80170d0:	4b02      	ldr	r3, [pc, #8]	; (80170dc <raise+0xc>)
 80170d2:	4601      	mov	r1, r0
 80170d4:	6818      	ldr	r0, [r3, #0]
 80170d6:	f7ff bfd3 	b.w	8017080 <_raise_r>
 80170da:	bf00      	nop
 80170dc:	2000000c 	.word	0x2000000c

080170e0 <_kill_r>:
 80170e0:	b538      	push	{r3, r4, r5, lr}
 80170e2:	4d07      	ldr	r5, [pc, #28]	; (8017100 <_kill_r+0x20>)
 80170e4:	2300      	movs	r3, #0
 80170e6:	4604      	mov	r4, r0
 80170e8:	4608      	mov	r0, r1
 80170ea:	4611      	mov	r1, r2
 80170ec:	602b      	str	r3, [r5, #0]
 80170ee:	f7fc fde7 	bl	8013cc0 <_kill>
 80170f2:	1c43      	adds	r3, r0, #1
 80170f4:	d102      	bne.n	80170fc <_kill_r+0x1c>
 80170f6:	682b      	ldr	r3, [r5, #0]
 80170f8:	b103      	cbz	r3, 80170fc <_kill_r+0x1c>
 80170fa:	6023      	str	r3, [r4, #0]
 80170fc:	bd38      	pop	{r3, r4, r5, pc}
 80170fe:	bf00      	nop
 8017100:	200004d8 	.word	0x200004d8

08017104 <_getpid_r>:
 8017104:	f7fc bdd4 	b.w	8013cb0 <_getpid>

08017108 <sulp>:
 8017108:	b570      	push	{r4, r5, r6, lr}
 801710a:	4604      	mov	r4, r0
 801710c:	460d      	mov	r5, r1
 801710e:	ec45 4b10 	vmov	d0, r4, r5
 8017112:	4616      	mov	r6, r2
 8017114:	f001 fe42 	bl	8018d9c <__ulp>
 8017118:	ec51 0b10 	vmov	r0, r1, d0
 801711c:	b17e      	cbz	r6, 801713e <sulp+0x36>
 801711e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017122:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017126:	2b00      	cmp	r3, #0
 8017128:	dd09      	ble.n	801713e <sulp+0x36>
 801712a:	051b      	lsls	r3, r3, #20
 801712c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017130:	2400      	movs	r4, #0
 8017132:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8017136:	4622      	mov	r2, r4
 8017138:	462b      	mov	r3, r5
 801713a:	f7e9 fa7d 	bl	8000638 <__aeabi_dmul>
 801713e:	bd70      	pop	{r4, r5, r6, pc}

08017140 <_strtod_l>:
 8017140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017144:	b0a3      	sub	sp, #140	; 0x8c
 8017146:	461f      	mov	r7, r3
 8017148:	2300      	movs	r3, #0
 801714a:	931e      	str	r3, [sp, #120]	; 0x78
 801714c:	4ba4      	ldr	r3, [pc, #656]	; (80173e0 <_strtod_l+0x2a0>)
 801714e:	9219      	str	r2, [sp, #100]	; 0x64
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	9307      	str	r3, [sp, #28]
 8017154:	4604      	mov	r4, r0
 8017156:	4618      	mov	r0, r3
 8017158:	4688      	mov	r8, r1
 801715a:	f7e9 f8a9 	bl	80002b0 <strlen>
 801715e:	f04f 0a00 	mov.w	sl, #0
 8017162:	4605      	mov	r5, r0
 8017164:	f04f 0b00 	mov.w	fp, #0
 8017168:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801716c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801716e:	781a      	ldrb	r2, [r3, #0]
 8017170:	2a2b      	cmp	r2, #43	; 0x2b
 8017172:	d04c      	beq.n	801720e <_strtod_l+0xce>
 8017174:	d839      	bhi.n	80171ea <_strtod_l+0xaa>
 8017176:	2a0d      	cmp	r2, #13
 8017178:	d832      	bhi.n	80171e0 <_strtod_l+0xa0>
 801717a:	2a08      	cmp	r2, #8
 801717c:	d832      	bhi.n	80171e4 <_strtod_l+0xa4>
 801717e:	2a00      	cmp	r2, #0
 8017180:	d03c      	beq.n	80171fc <_strtod_l+0xbc>
 8017182:	2300      	movs	r3, #0
 8017184:	930e      	str	r3, [sp, #56]	; 0x38
 8017186:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017188:	7833      	ldrb	r3, [r6, #0]
 801718a:	2b30      	cmp	r3, #48	; 0x30
 801718c:	f040 80b4 	bne.w	80172f8 <_strtod_l+0x1b8>
 8017190:	7873      	ldrb	r3, [r6, #1]
 8017192:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017196:	2b58      	cmp	r3, #88	; 0x58
 8017198:	d16c      	bne.n	8017274 <_strtod_l+0x134>
 801719a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801719c:	9301      	str	r3, [sp, #4]
 801719e:	ab1e      	add	r3, sp, #120	; 0x78
 80171a0:	9702      	str	r7, [sp, #8]
 80171a2:	9300      	str	r3, [sp, #0]
 80171a4:	4a8f      	ldr	r2, [pc, #572]	; (80173e4 <_strtod_l+0x2a4>)
 80171a6:	ab1f      	add	r3, sp, #124	; 0x7c
 80171a8:	a91d      	add	r1, sp, #116	; 0x74
 80171aa:	4620      	mov	r0, r4
 80171ac:	f000 ff64 	bl	8018078 <__gethex>
 80171b0:	f010 0707 	ands.w	r7, r0, #7
 80171b4:	4605      	mov	r5, r0
 80171b6:	d005      	beq.n	80171c4 <_strtod_l+0x84>
 80171b8:	2f06      	cmp	r7, #6
 80171ba:	d12a      	bne.n	8017212 <_strtod_l+0xd2>
 80171bc:	3601      	adds	r6, #1
 80171be:	2300      	movs	r3, #0
 80171c0:	961d      	str	r6, [sp, #116]	; 0x74
 80171c2:	930e      	str	r3, [sp, #56]	; 0x38
 80171c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	f040 8596 	bne.w	8017cf8 <_strtod_l+0xbb8>
 80171cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171ce:	b1db      	cbz	r3, 8017208 <_strtod_l+0xc8>
 80171d0:	4652      	mov	r2, sl
 80171d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80171d6:	ec43 2b10 	vmov	d0, r2, r3
 80171da:	b023      	add	sp, #140	; 0x8c
 80171dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171e0:	2a20      	cmp	r2, #32
 80171e2:	d1ce      	bne.n	8017182 <_strtod_l+0x42>
 80171e4:	3301      	adds	r3, #1
 80171e6:	931d      	str	r3, [sp, #116]	; 0x74
 80171e8:	e7c0      	b.n	801716c <_strtod_l+0x2c>
 80171ea:	2a2d      	cmp	r2, #45	; 0x2d
 80171ec:	d1c9      	bne.n	8017182 <_strtod_l+0x42>
 80171ee:	2201      	movs	r2, #1
 80171f0:	920e      	str	r2, [sp, #56]	; 0x38
 80171f2:	1c5a      	adds	r2, r3, #1
 80171f4:	921d      	str	r2, [sp, #116]	; 0x74
 80171f6:	785b      	ldrb	r3, [r3, #1]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d1c4      	bne.n	8017186 <_strtod_l+0x46>
 80171fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80171fe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017202:	2b00      	cmp	r3, #0
 8017204:	f040 8576 	bne.w	8017cf4 <_strtod_l+0xbb4>
 8017208:	4652      	mov	r2, sl
 801720a:	465b      	mov	r3, fp
 801720c:	e7e3      	b.n	80171d6 <_strtod_l+0x96>
 801720e:	2200      	movs	r2, #0
 8017210:	e7ee      	b.n	80171f0 <_strtod_l+0xb0>
 8017212:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017214:	b13a      	cbz	r2, 8017226 <_strtod_l+0xe6>
 8017216:	2135      	movs	r1, #53	; 0x35
 8017218:	a820      	add	r0, sp, #128	; 0x80
 801721a:	f001 feca 	bl	8018fb2 <__copybits>
 801721e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017220:	4620      	mov	r0, r4
 8017222:	f001 fa8f 	bl	8018744 <_Bfree>
 8017226:	3f01      	subs	r7, #1
 8017228:	2f05      	cmp	r7, #5
 801722a:	d807      	bhi.n	801723c <_strtod_l+0xfc>
 801722c:	e8df f007 	tbb	[pc, r7]
 8017230:	1d180b0e 	.word	0x1d180b0e
 8017234:	030e      	.short	0x030e
 8017236:	f04f 0b00 	mov.w	fp, #0
 801723a:	46da      	mov	sl, fp
 801723c:	0728      	lsls	r0, r5, #28
 801723e:	d5c1      	bpl.n	80171c4 <_strtod_l+0x84>
 8017240:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8017244:	e7be      	b.n	80171c4 <_strtod_l+0x84>
 8017246:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801724a:	e7f7      	b.n	801723c <_strtod_l+0xfc>
 801724c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8017250:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017252:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017256:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801725a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801725e:	e7ed      	b.n	801723c <_strtod_l+0xfc>
 8017260:	f8df b184 	ldr.w	fp, [pc, #388]	; 80173e8 <_strtod_l+0x2a8>
 8017264:	f04f 0a00 	mov.w	sl, #0
 8017268:	e7e8      	b.n	801723c <_strtod_l+0xfc>
 801726a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801726e:	f04f 3aff 	mov.w	sl, #4294967295
 8017272:	e7e3      	b.n	801723c <_strtod_l+0xfc>
 8017274:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017276:	1c5a      	adds	r2, r3, #1
 8017278:	921d      	str	r2, [sp, #116]	; 0x74
 801727a:	785b      	ldrb	r3, [r3, #1]
 801727c:	2b30      	cmp	r3, #48	; 0x30
 801727e:	d0f9      	beq.n	8017274 <_strtod_l+0x134>
 8017280:	2b00      	cmp	r3, #0
 8017282:	d09f      	beq.n	80171c4 <_strtod_l+0x84>
 8017284:	2301      	movs	r3, #1
 8017286:	f04f 0900 	mov.w	r9, #0
 801728a:	9304      	str	r3, [sp, #16]
 801728c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801728e:	930a      	str	r3, [sp, #40]	; 0x28
 8017290:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017294:	464f      	mov	r7, r9
 8017296:	220a      	movs	r2, #10
 8017298:	981d      	ldr	r0, [sp, #116]	; 0x74
 801729a:	7806      	ldrb	r6, [r0, #0]
 801729c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80172a0:	b2d9      	uxtb	r1, r3
 80172a2:	2909      	cmp	r1, #9
 80172a4:	d92a      	bls.n	80172fc <_strtod_l+0x1bc>
 80172a6:	9907      	ldr	r1, [sp, #28]
 80172a8:	462a      	mov	r2, r5
 80172aa:	f001 fee3 	bl	8019074 <strncmp>
 80172ae:	b398      	cbz	r0, 8017318 <_strtod_l+0x1d8>
 80172b0:	2000      	movs	r0, #0
 80172b2:	4633      	mov	r3, r6
 80172b4:	463d      	mov	r5, r7
 80172b6:	9007      	str	r0, [sp, #28]
 80172b8:	4602      	mov	r2, r0
 80172ba:	2b65      	cmp	r3, #101	; 0x65
 80172bc:	d001      	beq.n	80172c2 <_strtod_l+0x182>
 80172be:	2b45      	cmp	r3, #69	; 0x45
 80172c0:	d118      	bne.n	80172f4 <_strtod_l+0x1b4>
 80172c2:	b91d      	cbnz	r5, 80172cc <_strtod_l+0x18c>
 80172c4:	9b04      	ldr	r3, [sp, #16]
 80172c6:	4303      	orrs	r3, r0
 80172c8:	d098      	beq.n	80171fc <_strtod_l+0xbc>
 80172ca:	2500      	movs	r5, #0
 80172cc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80172d0:	f108 0301 	add.w	r3, r8, #1
 80172d4:	931d      	str	r3, [sp, #116]	; 0x74
 80172d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80172da:	2b2b      	cmp	r3, #43	; 0x2b
 80172dc:	d075      	beq.n	80173ca <_strtod_l+0x28a>
 80172de:	2b2d      	cmp	r3, #45	; 0x2d
 80172e0:	d07b      	beq.n	80173da <_strtod_l+0x29a>
 80172e2:	f04f 0c00 	mov.w	ip, #0
 80172e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80172ea:	2909      	cmp	r1, #9
 80172ec:	f240 8082 	bls.w	80173f4 <_strtod_l+0x2b4>
 80172f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80172f4:	2600      	movs	r6, #0
 80172f6:	e09d      	b.n	8017434 <_strtod_l+0x2f4>
 80172f8:	2300      	movs	r3, #0
 80172fa:	e7c4      	b.n	8017286 <_strtod_l+0x146>
 80172fc:	2f08      	cmp	r7, #8
 80172fe:	bfd8      	it	le
 8017300:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8017302:	f100 0001 	add.w	r0, r0, #1
 8017306:	bfda      	itte	le
 8017308:	fb02 3301 	mlale	r3, r2, r1, r3
 801730c:	9309      	strle	r3, [sp, #36]	; 0x24
 801730e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8017312:	3701      	adds	r7, #1
 8017314:	901d      	str	r0, [sp, #116]	; 0x74
 8017316:	e7bf      	b.n	8017298 <_strtod_l+0x158>
 8017318:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801731a:	195a      	adds	r2, r3, r5
 801731c:	921d      	str	r2, [sp, #116]	; 0x74
 801731e:	5d5b      	ldrb	r3, [r3, r5]
 8017320:	2f00      	cmp	r7, #0
 8017322:	d037      	beq.n	8017394 <_strtod_l+0x254>
 8017324:	9007      	str	r0, [sp, #28]
 8017326:	463d      	mov	r5, r7
 8017328:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801732c:	2a09      	cmp	r2, #9
 801732e:	d912      	bls.n	8017356 <_strtod_l+0x216>
 8017330:	2201      	movs	r2, #1
 8017332:	e7c2      	b.n	80172ba <_strtod_l+0x17a>
 8017334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017336:	1c5a      	adds	r2, r3, #1
 8017338:	921d      	str	r2, [sp, #116]	; 0x74
 801733a:	785b      	ldrb	r3, [r3, #1]
 801733c:	3001      	adds	r0, #1
 801733e:	2b30      	cmp	r3, #48	; 0x30
 8017340:	d0f8      	beq.n	8017334 <_strtod_l+0x1f4>
 8017342:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8017346:	2a08      	cmp	r2, #8
 8017348:	f200 84db 	bhi.w	8017d02 <_strtod_l+0xbc2>
 801734c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801734e:	9007      	str	r0, [sp, #28]
 8017350:	2000      	movs	r0, #0
 8017352:	920a      	str	r2, [sp, #40]	; 0x28
 8017354:	4605      	mov	r5, r0
 8017356:	3b30      	subs	r3, #48	; 0x30
 8017358:	f100 0201 	add.w	r2, r0, #1
 801735c:	d014      	beq.n	8017388 <_strtod_l+0x248>
 801735e:	9907      	ldr	r1, [sp, #28]
 8017360:	4411      	add	r1, r2
 8017362:	9107      	str	r1, [sp, #28]
 8017364:	462a      	mov	r2, r5
 8017366:	eb00 0e05 	add.w	lr, r0, r5
 801736a:	210a      	movs	r1, #10
 801736c:	4572      	cmp	r2, lr
 801736e:	d113      	bne.n	8017398 <_strtod_l+0x258>
 8017370:	182a      	adds	r2, r5, r0
 8017372:	2a08      	cmp	r2, #8
 8017374:	f105 0501 	add.w	r5, r5, #1
 8017378:	4405      	add	r5, r0
 801737a:	dc1c      	bgt.n	80173b6 <_strtod_l+0x276>
 801737c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801737e:	220a      	movs	r2, #10
 8017380:	fb02 3301 	mla	r3, r2, r1, r3
 8017384:	9309      	str	r3, [sp, #36]	; 0x24
 8017386:	2200      	movs	r2, #0
 8017388:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801738a:	1c59      	adds	r1, r3, #1
 801738c:	911d      	str	r1, [sp, #116]	; 0x74
 801738e:	785b      	ldrb	r3, [r3, #1]
 8017390:	4610      	mov	r0, r2
 8017392:	e7c9      	b.n	8017328 <_strtod_l+0x1e8>
 8017394:	4638      	mov	r0, r7
 8017396:	e7d2      	b.n	801733e <_strtod_l+0x1fe>
 8017398:	2a08      	cmp	r2, #8
 801739a:	dc04      	bgt.n	80173a6 <_strtod_l+0x266>
 801739c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801739e:	434e      	muls	r6, r1
 80173a0:	9609      	str	r6, [sp, #36]	; 0x24
 80173a2:	3201      	adds	r2, #1
 80173a4:	e7e2      	b.n	801736c <_strtod_l+0x22c>
 80173a6:	f102 0c01 	add.w	ip, r2, #1
 80173aa:	f1bc 0f10 	cmp.w	ip, #16
 80173ae:	bfd8      	it	le
 80173b0:	fb01 f909 	mulle.w	r9, r1, r9
 80173b4:	e7f5      	b.n	80173a2 <_strtod_l+0x262>
 80173b6:	2d10      	cmp	r5, #16
 80173b8:	bfdc      	itt	le
 80173ba:	220a      	movle	r2, #10
 80173bc:	fb02 3909 	mlale	r9, r2, r9, r3
 80173c0:	e7e1      	b.n	8017386 <_strtod_l+0x246>
 80173c2:	2300      	movs	r3, #0
 80173c4:	9307      	str	r3, [sp, #28]
 80173c6:	2201      	movs	r2, #1
 80173c8:	e77c      	b.n	80172c4 <_strtod_l+0x184>
 80173ca:	f04f 0c00 	mov.w	ip, #0
 80173ce:	f108 0302 	add.w	r3, r8, #2
 80173d2:	931d      	str	r3, [sp, #116]	; 0x74
 80173d4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80173d8:	e785      	b.n	80172e6 <_strtod_l+0x1a6>
 80173da:	f04f 0c01 	mov.w	ip, #1
 80173de:	e7f6      	b.n	80173ce <_strtod_l+0x28e>
 80173e0:	0801a708 	.word	0x0801a708
 80173e4:	0801a514 	.word	0x0801a514
 80173e8:	7ff00000 	.word	0x7ff00000
 80173ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80173ee:	1c59      	adds	r1, r3, #1
 80173f0:	911d      	str	r1, [sp, #116]	; 0x74
 80173f2:	785b      	ldrb	r3, [r3, #1]
 80173f4:	2b30      	cmp	r3, #48	; 0x30
 80173f6:	d0f9      	beq.n	80173ec <_strtod_l+0x2ac>
 80173f8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80173fc:	2908      	cmp	r1, #8
 80173fe:	f63f af79 	bhi.w	80172f4 <_strtod_l+0x1b4>
 8017402:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8017406:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017408:	9308      	str	r3, [sp, #32]
 801740a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801740c:	1c59      	adds	r1, r3, #1
 801740e:	911d      	str	r1, [sp, #116]	; 0x74
 8017410:	785b      	ldrb	r3, [r3, #1]
 8017412:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8017416:	2e09      	cmp	r6, #9
 8017418:	d937      	bls.n	801748a <_strtod_l+0x34a>
 801741a:	9e08      	ldr	r6, [sp, #32]
 801741c:	1b89      	subs	r1, r1, r6
 801741e:	2908      	cmp	r1, #8
 8017420:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8017424:	dc02      	bgt.n	801742c <_strtod_l+0x2ec>
 8017426:	4576      	cmp	r6, lr
 8017428:	bfa8      	it	ge
 801742a:	4676      	movge	r6, lr
 801742c:	f1bc 0f00 	cmp.w	ip, #0
 8017430:	d000      	beq.n	8017434 <_strtod_l+0x2f4>
 8017432:	4276      	negs	r6, r6
 8017434:	2d00      	cmp	r5, #0
 8017436:	d14f      	bne.n	80174d8 <_strtod_l+0x398>
 8017438:	9904      	ldr	r1, [sp, #16]
 801743a:	4301      	orrs	r1, r0
 801743c:	f47f aec2 	bne.w	80171c4 <_strtod_l+0x84>
 8017440:	2a00      	cmp	r2, #0
 8017442:	f47f aedb 	bne.w	80171fc <_strtod_l+0xbc>
 8017446:	2b69      	cmp	r3, #105	; 0x69
 8017448:	d027      	beq.n	801749a <_strtod_l+0x35a>
 801744a:	dc24      	bgt.n	8017496 <_strtod_l+0x356>
 801744c:	2b49      	cmp	r3, #73	; 0x49
 801744e:	d024      	beq.n	801749a <_strtod_l+0x35a>
 8017450:	2b4e      	cmp	r3, #78	; 0x4e
 8017452:	f47f aed3 	bne.w	80171fc <_strtod_l+0xbc>
 8017456:	499e      	ldr	r1, [pc, #632]	; (80176d0 <_strtod_l+0x590>)
 8017458:	a81d      	add	r0, sp, #116	; 0x74
 801745a:	f001 f865 	bl	8018528 <__match>
 801745e:	2800      	cmp	r0, #0
 8017460:	f43f aecc 	beq.w	80171fc <_strtod_l+0xbc>
 8017464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017466:	781b      	ldrb	r3, [r3, #0]
 8017468:	2b28      	cmp	r3, #40	; 0x28
 801746a:	d12d      	bne.n	80174c8 <_strtod_l+0x388>
 801746c:	4999      	ldr	r1, [pc, #612]	; (80176d4 <_strtod_l+0x594>)
 801746e:	aa20      	add	r2, sp, #128	; 0x80
 8017470:	a81d      	add	r0, sp, #116	; 0x74
 8017472:	f001 f86d 	bl	8018550 <__hexnan>
 8017476:	2805      	cmp	r0, #5
 8017478:	d126      	bne.n	80174c8 <_strtod_l+0x388>
 801747a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801747c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8017480:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017484:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017488:	e69c      	b.n	80171c4 <_strtod_l+0x84>
 801748a:	210a      	movs	r1, #10
 801748c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017490:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017494:	e7b9      	b.n	801740a <_strtod_l+0x2ca>
 8017496:	2b6e      	cmp	r3, #110	; 0x6e
 8017498:	e7db      	b.n	8017452 <_strtod_l+0x312>
 801749a:	498f      	ldr	r1, [pc, #572]	; (80176d8 <_strtod_l+0x598>)
 801749c:	a81d      	add	r0, sp, #116	; 0x74
 801749e:	f001 f843 	bl	8018528 <__match>
 80174a2:	2800      	cmp	r0, #0
 80174a4:	f43f aeaa 	beq.w	80171fc <_strtod_l+0xbc>
 80174a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80174aa:	498c      	ldr	r1, [pc, #560]	; (80176dc <_strtod_l+0x59c>)
 80174ac:	3b01      	subs	r3, #1
 80174ae:	a81d      	add	r0, sp, #116	; 0x74
 80174b0:	931d      	str	r3, [sp, #116]	; 0x74
 80174b2:	f001 f839 	bl	8018528 <__match>
 80174b6:	b910      	cbnz	r0, 80174be <_strtod_l+0x37e>
 80174b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80174ba:	3301      	adds	r3, #1
 80174bc:	931d      	str	r3, [sp, #116]	; 0x74
 80174be:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80176ec <_strtod_l+0x5ac>
 80174c2:	f04f 0a00 	mov.w	sl, #0
 80174c6:	e67d      	b.n	80171c4 <_strtod_l+0x84>
 80174c8:	4885      	ldr	r0, [pc, #532]	; (80176e0 <_strtod_l+0x5a0>)
 80174ca:	f001 fdc5 	bl	8019058 <nan>
 80174ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 80174d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80174d6:	e675      	b.n	80171c4 <_strtod_l+0x84>
 80174d8:	9b07      	ldr	r3, [sp, #28]
 80174da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80174dc:	1af3      	subs	r3, r6, r3
 80174de:	2f00      	cmp	r7, #0
 80174e0:	bf08      	it	eq
 80174e2:	462f      	moveq	r7, r5
 80174e4:	2d10      	cmp	r5, #16
 80174e6:	9308      	str	r3, [sp, #32]
 80174e8:	46a8      	mov	r8, r5
 80174ea:	bfa8      	it	ge
 80174ec:	f04f 0810 	movge.w	r8, #16
 80174f0:	f7e9 f828 	bl	8000544 <__aeabi_ui2d>
 80174f4:	2d09      	cmp	r5, #9
 80174f6:	4682      	mov	sl, r0
 80174f8:	468b      	mov	fp, r1
 80174fa:	dd13      	ble.n	8017524 <_strtod_l+0x3e4>
 80174fc:	4b79      	ldr	r3, [pc, #484]	; (80176e4 <_strtod_l+0x5a4>)
 80174fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017502:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8017506:	f7e9 f897 	bl	8000638 <__aeabi_dmul>
 801750a:	4682      	mov	sl, r0
 801750c:	4648      	mov	r0, r9
 801750e:	468b      	mov	fp, r1
 8017510:	f7e9 f818 	bl	8000544 <__aeabi_ui2d>
 8017514:	4602      	mov	r2, r0
 8017516:	460b      	mov	r3, r1
 8017518:	4650      	mov	r0, sl
 801751a:	4659      	mov	r1, fp
 801751c:	f7e8 fed6 	bl	80002cc <__adddf3>
 8017520:	4682      	mov	sl, r0
 8017522:	468b      	mov	fp, r1
 8017524:	2d0f      	cmp	r5, #15
 8017526:	dc38      	bgt.n	801759a <_strtod_l+0x45a>
 8017528:	9b08      	ldr	r3, [sp, #32]
 801752a:	2b00      	cmp	r3, #0
 801752c:	f43f ae4a 	beq.w	80171c4 <_strtod_l+0x84>
 8017530:	dd24      	ble.n	801757c <_strtod_l+0x43c>
 8017532:	2b16      	cmp	r3, #22
 8017534:	dc0b      	bgt.n	801754e <_strtod_l+0x40e>
 8017536:	4d6b      	ldr	r5, [pc, #428]	; (80176e4 <_strtod_l+0x5a4>)
 8017538:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801753c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017540:	4652      	mov	r2, sl
 8017542:	465b      	mov	r3, fp
 8017544:	f7e9 f878 	bl	8000638 <__aeabi_dmul>
 8017548:	4682      	mov	sl, r0
 801754a:	468b      	mov	fp, r1
 801754c:	e63a      	b.n	80171c4 <_strtod_l+0x84>
 801754e:	9a08      	ldr	r2, [sp, #32]
 8017550:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8017554:	4293      	cmp	r3, r2
 8017556:	db20      	blt.n	801759a <_strtod_l+0x45a>
 8017558:	4c62      	ldr	r4, [pc, #392]	; (80176e4 <_strtod_l+0x5a4>)
 801755a:	f1c5 050f 	rsb	r5, r5, #15
 801755e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8017562:	4652      	mov	r2, sl
 8017564:	465b      	mov	r3, fp
 8017566:	e9d1 0100 	ldrd	r0, r1, [r1]
 801756a:	f7e9 f865 	bl	8000638 <__aeabi_dmul>
 801756e:	9b08      	ldr	r3, [sp, #32]
 8017570:	1b5d      	subs	r5, r3, r5
 8017572:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8017576:	e9d4 2300 	ldrd	r2, r3, [r4]
 801757a:	e7e3      	b.n	8017544 <_strtod_l+0x404>
 801757c:	9b08      	ldr	r3, [sp, #32]
 801757e:	3316      	adds	r3, #22
 8017580:	db0b      	blt.n	801759a <_strtod_l+0x45a>
 8017582:	9b07      	ldr	r3, [sp, #28]
 8017584:	4a57      	ldr	r2, [pc, #348]	; (80176e4 <_strtod_l+0x5a4>)
 8017586:	1b9e      	subs	r6, r3, r6
 8017588:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801758c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017590:	4650      	mov	r0, sl
 8017592:	4659      	mov	r1, fp
 8017594:	f7e9 f97a 	bl	800088c <__aeabi_ddiv>
 8017598:	e7d6      	b.n	8017548 <_strtod_l+0x408>
 801759a:	9b08      	ldr	r3, [sp, #32]
 801759c:	eba5 0808 	sub.w	r8, r5, r8
 80175a0:	4498      	add	r8, r3
 80175a2:	f1b8 0f00 	cmp.w	r8, #0
 80175a6:	dd71      	ble.n	801768c <_strtod_l+0x54c>
 80175a8:	f018 030f 	ands.w	r3, r8, #15
 80175ac:	d00a      	beq.n	80175c4 <_strtod_l+0x484>
 80175ae:	494d      	ldr	r1, [pc, #308]	; (80176e4 <_strtod_l+0x5a4>)
 80175b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80175b4:	4652      	mov	r2, sl
 80175b6:	465b      	mov	r3, fp
 80175b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80175bc:	f7e9 f83c 	bl	8000638 <__aeabi_dmul>
 80175c0:	4682      	mov	sl, r0
 80175c2:	468b      	mov	fp, r1
 80175c4:	f038 080f 	bics.w	r8, r8, #15
 80175c8:	d04d      	beq.n	8017666 <_strtod_l+0x526>
 80175ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80175ce:	dd22      	ble.n	8017616 <_strtod_l+0x4d6>
 80175d0:	2500      	movs	r5, #0
 80175d2:	462e      	mov	r6, r5
 80175d4:	9509      	str	r5, [sp, #36]	; 0x24
 80175d6:	9507      	str	r5, [sp, #28]
 80175d8:	2322      	movs	r3, #34	; 0x22
 80175da:	f8df b110 	ldr.w	fp, [pc, #272]	; 80176ec <_strtod_l+0x5ac>
 80175de:	6023      	str	r3, [r4, #0]
 80175e0:	f04f 0a00 	mov.w	sl, #0
 80175e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	f43f adec 	beq.w	80171c4 <_strtod_l+0x84>
 80175ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80175ee:	4620      	mov	r0, r4
 80175f0:	f001 f8a8 	bl	8018744 <_Bfree>
 80175f4:	9907      	ldr	r1, [sp, #28]
 80175f6:	4620      	mov	r0, r4
 80175f8:	f001 f8a4 	bl	8018744 <_Bfree>
 80175fc:	4631      	mov	r1, r6
 80175fe:	4620      	mov	r0, r4
 8017600:	f001 f8a0 	bl	8018744 <_Bfree>
 8017604:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017606:	4620      	mov	r0, r4
 8017608:	f001 f89c 	bl	8018744 <_Bfree>
 801760c:	4629      	mov	r1, r5
 801760e:	4620      	mov	r0, r4
 8017610:	f001 f898 	bl	8018744 <_Bfree>
 8017614:	e5d6      	b.n	80171c4 <_strtod_l+0x84>
 8017616:	2300      	movs	r3, #0
 8017618:	ea4f 1828 	mov.w	r8, r8, asr #4
 801761c:	4650      	mov	r0, sl
 801761e:	4659      	mov	r1, fp
 8017620:	4699      	mov	r9, r3
 8017622:	f1b8 0f01 	cmp.w	r8, #1
 8017626:	dc21      	bgt.n	801766c <_strtod_l+0x52c>
 8017628:	b10b      	cbz	r3, 801762e <_strtod_l+0x4ee>
 801762a:	4682      	mov	sl, r0
 801762c:	468b      	mov	fp, r1
 801762e:	4b2e      	ldr	r3, [pc, #184]	; (80176e8 <_strtod_l+0x5a8>)
 8017630:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017634:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017638:	4652      	mov	r2, sl
 801763a:	465b      	mov	r3, fp
 801763c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017640:	f7e8 fffa 	bl	8000638 <__aeabi_dmul>
 8017644:	4b29      	ldr	r3, [pc, #164]	; (80176ec <_strtod_l+0x5ac>)
 8017646:	460a      	mov	r2, r1
 8017648:	400b      	ands	r3, r1
 801764a:	4929      	ldr	r1, [pc, #164]	; (80176f0 <_strtod_l+0x5b0>)
 801764c:	428b      	cmp	r3, r1
 801764e:	4682      	mov	sl, r0
 8017650:	d8be      	bhi.n	80175d0 <_strtod_l+0x490>
 8017652:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017656:	428b      	cmp	r3, r1
 8017658:	bf86      	itte	hi
 801765a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80176f4 <_strtod_l+0x5b4>
 801765e:	f04f 3aff 	movhi.w	sl, #4294967295
 8017662:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017666:	2300      	movs	r3, #0
 8017668:	9304      	str	r3, [sp, #16]
 801766a:	e081      	b.n	8017770 <_strtod_l+0x630>
 801766c:	f018 0f01 	tst.w	r8, #1
 8017670:	d007      	beq.n	8017682 <_strtod_l+0x542>
 8017672:	4b1d      	ldr	r3, [pc, #116]	; (80176e8 <_strtod_l+0x5a8>)
 8017674:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801767c:	f7e8 ffdc 	bl	8000638 <__aeabi_dmul>
 8017680:	2301      	movs	r3, #1
 8017682:	f109 0901 	add.w	r9, r9, #1
 8017686:	ea4f 0868 	mov.w	r8, r8, asr #1
 801768a:	e7ca      	b.n	8017622 <_strtod_l+0x4e2>
 801768c:	d0eb      	beq.n	8017666 <_strtod_l+0x526>
 801768e:	f1c8 0800 	rsb	r8, r8, #0
 8017692:	f018 020f 	ands.w	r2, r8, #15
 8017696:	d00a      	beq.n	80176ae <_strtod_l+0x56e>
 8017698:	4b12      	ldr	r3, [pc, #72]	; (80176e4 <_strtod_l+0x5a4>)
 801769a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801769e:	4650      	mov	r0, sl
 80176a0:	4659      	mov	r1, fp
 80176a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176a6:	f7e9 f8f1 	bl	800088c <__aeabi_ddiv>
 80176aa:	4682      	mov	sl, r0
 80176ac:	468b      	mov	fp, r1
 80176ae:	ea5f 1828 	movs.w	r8, r8, asr #4
 80176b2:	d0d8      	beq.n	8017666 <_strtod_l+0x526>
 80176b4:	f1b8 0f1f 	cmp.w	r8, #31
 80176b8:	dd1e      	ble.n	80176f8 <_strtod_l+0x5b8>
 80176ba:	2500      	movs	r5, #0
 80176bc:	462e      	mov	r6, r5
 80176be:	9509      	str	r5, [sp, #36]	; 0x24
 80176c0:	9507      	str	r5, [sp, #28]
 80176c2:	2322      	movs	r3, #34	; 0x22
 80176c4:	f04f 0a00 	mov.w	sl, #0
 80176c8:	f04f 0b00 	mov.w	fp, #0
 80176cc:	6023      	str	r3, [r4, #0]
 80176ce:	e789      	b.n	80175e4 <_strtod_l+0x4a4>
 80176d0:	0801a511 	.word	0x0801a511
 80176d4:	0801a528 	.word	0x0801a528
 80176d8:	0801a508 	.word	0x0801a508
 80176dc:	0801a50b 	.word	0x0801a50b
 80176e0:	0801a8cf 	.word	0x0801a8cf
 80176e4:	0801a7c0 	.word	0x0801a7c0
 80176e8:	0801a798 	.word	0x0801a798
 80176ec:	7ff00000 	.word	0x7ff00000
 80176f0:	7ca00000 	.word	0x7ca00000
 80176f4:	7fefffff 	.word	0x7fefffff
 80176f8:	f018 0310 	ands.w	r3, r8, #16
 80176fc:	bf18      	it	ne
 80176fe:	236a      	movne	r3, #106	; 0x6a
 8017700:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8017ab8 <_strtod_l+0x978>
 8017704:	9304      	str	r3, [sp, #16]
 8017706:	4650      	mov	r0, sl
 8017708:	4659      	mov	r1, fp
 801770a:	2300      	movs	r3, #0
 801770c:	f018 0f01 	tst.w	r8, #1
 8017710:	d004      	beq.n	801771c <_strtod_l+0x5dc>
 8017712:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017716:	f7e8 ff8f 	bl	8000638 <__aeabi_dmul>
 801771a:	2301      	movs	r3, #1
 801771c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017720:	f109 0908 	add.w	r9, r9, #8
 8017724:	d1f2      	bne.n	801770c <_strtod_l+0x5cc>
 8017726:	b10b      	cbz	r3, 801772c <_strtod_l+0x5ec>
 8017728:	4682      	mov	sl, r0
 801772a:	468b      	mov	fp, r1
 801772c:	9b04      	ldr	r3, [sp, #16]
 801772e:	b1bb      	cbz	r3, 8017760 <_strtod_l+0x620>
 8017730:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017734:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017738:	2b00      	cmp	r3, #0
 801773a:	4659      	mov	r1, fp
 801773c:	dd10      	ble.n	8017760 <_strtod_l+0x620>
 801773e:	2b1f      	cmp	r3, #31
 8017740:	f340 8128 	ble.w	8017994 <_strtod_l+0x854>
 8017744:	2b34      	cmp	r3, #52	; 0x34
 8017746:	bfde      	ittt	le
 8017748:	3b20      	suble	r3, #32
 801774a:	f04f 32ff 	movle.w	r2, #4294967295
 801774e:	fa02 f303 	lslle.w	r3, r2, r3
 8017752:	f04f 0a00 	mov.w	sl, #0
 8017756:	bfcc      	ite	gt
 8017758:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801775c:	ea03 0b01 	andle.w	fp, r3, r1
 8017760:	2200      	movs	r2, #0
 8017762:	2300      	movs	r3, #0
 8017764:	4650      	mov	r0, sl
 8017766:	4659      	mov	r1, fp
 8017768:	f7e9 f9ce 	bl	8000b08 <__aeabi_dcmpeq>
 801776c:	2800      	cmp	r0, #0
 801776e:	d1a4      	bne.n	80176ba <_strtod_l+0x57a>
 8017770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017772:	9300      	str	r3, [sp, #0]
 8017774:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017776:	462b      	mov	r3, r5
 8017778:	463a      	mov	r2, r7
 801777a:	4620      	mov	r0, r4
 801777c:	f001 f84e 	bl	801881c <__s2b>
 8017780:	9009      	str	r0, [sp, #36]	; 0x24
 8017782:	2800      	cmp	r0, #0
 8017784:	f43f af24 	beq.w	80175d0 <_strtod_l+0x490>
 8017788:	9b07      	ldr	r3, [sp, #28]
 801778a:	1b9e      	subs	r6, r3, r6
 801778c:	9b08      	ldr	r3, [sp, #32]
 801778e:	2b00      	cmp	r3, #0
 8017790:	bfb4      	ite	lt
 8017792:	4633      	movlt	r3, r6
 8017794:	2300      	movge	r3, #0
 8017796:	9310      	str	r3, [sp, #64]	; 0x40
 8017798:	9b08      	ldr	r3, [sp, #32]
 801779a:	2500      	movs	r5, #0
 801779c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80177a0:	9318      	str	r3, [sp, #96]	; 0x60
 80177a2:	462e      	mov	r6, r5
 80177a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177a6:	4620      	mov	r0, r4
 80177a8:	6859      	ldr	r1, [r3, #4]
 80177aa:	f000 ff8b 	bl	80186c4 <_Balloc>
 80177ae:	9007      	str	r0, [sp, #28]
 80177b0:	2800      	cmp	r0, #0
 80177b2:	f43f af11 	beq.w	80175d8 <_strtod_l+0x498>
 80177b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177b8:	691a      	ldr	r2, [r3, #16]
 80177ba:	3202      	adds	r2, #2
 80177bc:	f103 010c 	add.w	r1, r3, #12
 80177c0:	0092      	lsls	r2, r2, #2
 80177c2:	300c      	adds	r0, #12
 80177c4:	f7ff fb72 	bl	8016eac <memcpy>
 80177c8:	ec4b ab10 	vmov	d0, sl, fp
 80177cc:	aa20      	add	r2, sp, #128	; 0x80
 80177ce:	a91f      	add	r1, sp, #124	; 0x7c
 80177d0:	4620      	mov	r0, r4
 80177d2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80177d6:	f001 fb5d 	bl	8018e94 <__d2b>
 80177da:	901e      	str	r0, [sp, #120]	; 0x78
 80177dc:	2800      	cmp	r0, #0
 80177de:	f43f aefb 	beq.w	80175d8 <_strtod_l+0x498>
 80177e2:	2101      	movs	r1, #1
 80177e4:	4620      	mov	r0, r4
 80177e6:	f001 f8b3 	bl	8018950 <__i2b>
 80177ea:	4606      	mov	r6, r0
 80177ec:	2800      	cmp	r0, #0
 80177ee:	f43f aef3 	beq.w	80175d8 <_strtod_l+0x498>
 80177f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80177f4:	9904      	ldr	r1, [sp, #16]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	bfab      	itete	ge
 80177fa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80177fc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80177fe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8017800:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8017804:	bfac      	ite	ge
 8017806:	eb03 0902 	addge.w	r9, r3, r2
 801780a:	1ad7      	sublt	r7, r2, r3
 801780c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801780e:	eba3 0801 	sub.w	r8, r3, r1
 8017812:	4490      	add	r8, r2
 8017814:	4ba3      	ldr	r3, [pc, #652]	; (8017aa4 <_strtod_l+0x964>)
 8017816:	f108 38ff 	add.w	r8, r8, #4294967295
 801781a:	4598      	cmp	r8, r3
 801781c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017820:	f280 80cc 	bge.w	80179bc <_strtod_l+0x87c>
 8017824:	eba3 0308 	sub.w	r3, r3, r8
 8017828:	2b1f      	cmp	r3, #31
 801782a:	eba2 0203 	sub.w	r2, r2, r3
 801782e:	f04f 0101 	mov.w	r1, #1
 8017832:	f300 80b6 	bgt.w	80179a2 <_strtod_l+0x862>
 8017836:	fa01 f303 	lsl.w	r3, r1, r3
 801783a:	9311      	str	r3, [sp, #68]	; 0x44
 801783c:	2300      	movs	r3, #0
 801783e:	930c      	str	r3, [sp, #48]	; 0x30
 8017840:	eb09 0802 	add.w	r8, r9, r2
 8017844:	9b04      	ldr	r3, [sp, #16]
 8017846:	45c1      	cmp	r9, r8
 8017848:	4417      	add	r7, r2
 801784a:	441f      	add	r7, r3
 801784c:	464b      	mov	r3, r9
 801784e:	bfa8      	it	ge
 8017850:	4643      	movge	r3, r8
 8017852:	42bb      	cmp	r3, r7
 8017854:	bfa8      	it	ge
 8017856:	463b      	movge	r3, r7
 8017858:	2b00      	cmp	r3, #0
 801785a:	bfc2      	ittt	gt
 801785c:	eba8 0803 	subgt.w	r8, r8, r3
 8017860:	1aff      	subgt	r7, r7, r3
 8017862:	eba9 0903 	subgt.w	r9, r9, r3
 8017866:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017868:	2b00      	cmp	r3, #0
 801786a:	dd17      	ble.n	801789c <_strtod_l+0x75c>
 801786c:	4631      	mov	r1, r6
 801786e:	461a      	mov	r2, r3
 8017870:	4620      	mov	r0, r4
 8017872:	f001 f929 	bl	8018ac8 <__pow5mult>
 8017876:	4606      	mov	r6, r0
 8017878:	2800      	cmp	r0, #0
 801787a:	f43f aead 	beq.w	80175d8 <_strtod_l+0x498>
 801787e:	4601      	mov	r1, r0
 8017880:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017882:	4620      	mov	r0, r4
 8017884:	f001 f87a 	bl	801897c <__multiply>
 8017888:	900f      	str	r0, [sp, #60]	; 0x3c
 801788a:	2800      	cmp	r0, #0
 801788c:	f43f aea4 	beq.w	80175d8 <_strtod_l+0x498>
 8017890:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017892:	4620      	mov	r0, r4
 8017894:	f000 ff56 	bl	8018744 <_Bfree>
 8017898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801789a:	931e      	str	r3, [sp, #120]	; 0x78
 801789c:	f1b8 0f00 	cmp.w	r8, #0
 80178a0:	f300 8091 	bgt.w	80179c6 <_strtod_l+0x886>
 80178a4:	9b08      	ldr	r3, [sp, #32]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	dd08      	ble.n	80178bc <_strtod_l+0x77c>
 80178aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80178ac:	9907      	ldr	r1, [sp, #28]
 80178ae:	4620      	mov	r0, r4
 80178b0:	f001 f90a 	bl	8018ac8 <__pow5mult>
 80178b4:	9007      	str	r0, [sp, #28]
 80178b6:	2800      	cmp	r0, #0
 80178b8:	f43f ae8e 	beq.w	80175d8 <_strtod_l+0x498>
 80178bc:	2f00      	cmp	r7, #0
 80178be:	dd08      	ble.n	80178d2 <_strtod_l+0x792>
 80178c0:	9907      	ldr	r1, [sp, #28]
 80178c2:	463a      	mov	r2, r7
 80178c4:	4620      	mov	r0, r4
 80178c6:	f001 f959 	bl	8018b7c <__lshift>
 80178ca:	9007      	str	r0, [sp, #28]
 80178cc:	2800      	cmp	r0, #0
 80178ce:	f43f ae83 	beq.w	80175d8 <_strtod_l+0x498>
 80178d2:	f1b9 0f00 	cmp.w	r9, #0
 80178d6:	dd08      	ble.n	80178ea <_strtod_l+0x7aa>
 80178d8:	4631      	mov	r1, r6
 80178da:	464a      	mov	r2, r9
 80178dc:	4620      	mov	r0, r4
 80178de:	f001 f94d 	bl	8018b7c <__lshift>
 80178e2:	4606      	mov	r6, r0
 80178e4:	2800      	cmp	r0, #0
 80178e6:	f43f ae77 	beq.w	80175d8 <_strtod_l+0x498>
 80178ea:	9a07      	ldr	r2, [sp, #28]
 80178ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80178ee:	4620      	mov	r0, r4
 80178f0:	f001 f9cc 	bl	8018c8c <__mdiff>
 80178f4:	4605      	mov	r5, r0
 80178f6:	2800      	cmp	r0, #0
 80178f8:	f43f ae6e 	beq.w	80175d8 <_strtod_l+0x498>
 80178fc:	68c3      	ldr	r3, [r0, #12]
 80178fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8017900:	2300      	movs	r3, #0
 8017902:	60c3      	str	r3, [r0, #12]
 8017904:	4631      	mov	r1, r6
 8017906:	f001 f9a5 	bl	8018c54 <__mcmp>
 801790a:	2800      	cmp	r0, #0
 801790c:	da65      	bge.n	80179da <_strtod_l+0x89a>
 801790e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017910:	ea53 030a 	orrs.w	r3, r3, sl
 8017914:	f040 8087 	bne.w	8017a26 <_strtod_l+0x8e6>
 8017918:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801791c:	2b00      	cmp	r3, #0
 801791e:	f040 8082 	bne.w	8017a26 <_strtod_l+0x8e6>
 8017922:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017926:	0d1b      	lsrs	r3, r3, #20
 8017928:	051b      	lsls	r3, r3, #20
 801792a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801792e:	d97a      	bls.n	8017a26 <_strtod_l+0x8e6>
 8017930:	696b      	ldr	r3, [r5, #20]
 8017932:	b913      	cbnz	r3, 801793a <_strtod_l+0x7fa>
 8017934:	692b      	ldr	r3, [r5, #16]
 8017936:	2b01      	cmp	r3, #1
 8017938:	dd75      	ble.n	8017a26 <_strtod_l+0x8e6>
 801793a:	4629      	mov	r1, r5
 801793c:	2201      	movs	r2, #1
 801793e:	4620      	mov	r0, r4
 8017940:	f001 f91c 	bl	8018b7c <__lshift>
 8017944:	4631      	mov	r1, r6
 8017946:	4605      	mov	r5, r0
 8017948:	f001 f984 	bl	8018c54 <__mcmp>
 801794c:	2800      	cmp	r0, #0
 801794e:	dd6a      	ble.n	8017a26 <_strtod_l+0x8e6>
 8017950:	9904      	ldr	r1, [sp, #16]
 8017952:	4a55      	ldr	r2, [pc, #340]	; (8017aa8 <_strtod_l+0x968>)
 8017954:	465b      	mov	r3, fp
 8017956:	2900      	cmp	r1, #0
 8017958:	f000 8085 	beq.w	8017a66 <_strtod_l+0x926>
 801795c:	ea02 010b 	and.w	r1, r2, fp
 8017960:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017964:	dc7f      	bgt.n	8017a66 <_strtod_l+0x926>
 8017966:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801796a:	f77f aeaa 	ble.w	80176c2 <_strtod_l+0x582>
 801796e:	4a4f      	ldr	r2, [pc, #316]	; (8017aac <_strtod_l+0x96c>)
 8017970:	2300      	movs	r3, #0
 8017972:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8017976:	4650      	mov	r0, sl
 8017978:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801797c:	4659      	mov	r1, fp
 801797e:	f7e8 fe5b 	bl	8000638 <__aeabi_dmul>
 8017982:	460b      	mov	r3, r1
 8017984:	4303      	orrs	r3, r0
 8017986:	bf08      	it	eq
 8017988:	2322      	moveq	r3, #34	; 0x22
 801798a:	4682      	mov	sl, r0
 801798c:	468b      	mov	fp, r1
 801798e:	bf08      	it	eq
 8017990:	6023      	streq	r3, [r4, #0]
 8017992:	e62b      	b.n	80175ec <_strtod_l+0x4ac>
 8017994:	f04f 32ff 	mov.w	r2, #4294967295
 8017998:	fa02 f303 	lsl.w	r3, r2, r3
 801799c:	ea03 0a0a 	and.w	sl, r3, sl
 80179a0:	e6de      	b.n	8017760 <_strtod_l+0x620>
 80179a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80179a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80179aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80179ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80179b2:	fa01 f308 	lsl.w	r3, r1, r8
 80179b6:	930c      	str	r3, [sp, #48]	; 0x30
 80179b8:	9111      	str	r1, [sp, #68]	; 0x44
 80179ba:	e741      	b.n	8017840 <_strtod_l+0x700>
 80179bc:	2300      	movs	r3, #0
 80179be:	930c      	str	r3, [sp, #48]	; 0x30
 80179c0:	2301      	movs	r3, #1
 80179c2:	9311      	str	r3, [sp, #68]	; 0x44
 80179c4:	e73c      	b.n	8017840 <_strtod_l+0x700>
 80179c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80179c8:	4642      	mov	r2, r8
 80179ca:	4620      	mov	r0, r4
 80179cc:	f001 f8d6 	bl	8018b7c <__lshift>
 80179d0:	901e      	str	r0, [sp, #120]	; 0x78
 80179d2:	2800      	cmp	r0, #0
 80179d4:	f47f af66 	bne.w	80178a4 <_strtod_l+0x764>
 80179d8:	e5fe      	b.n	80175d8 <_strtod_l+0x498>
 80179da:	465f      	mov	r7, fp
 80179dc:	d16e      	bne.n	8017abc <_strtod_l+0x97c>
 80179de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80179e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80179e4:	b342      	cbz	r2, 8017a38 <_strtod_l+0x8f8>
 80179e6:	4a32      	ldr	r2, [pc, #200]	; (8017ab0 <_strtod_l+0x970>)
 80179e8:	4293      	cmp	r3, r2
 80179ea:	d128      	bne.n	8017a3e <_strtod_l+0x8fe>
 80179ec:	9b04      	ldr	r3, [sp, #16]
 80179ee:	4650      	mov	r0, sl
 80179f0:	b1eb      	cbz	r3, 8017a2e <_strtod_l+0x8ee>
 80179f2:	4a2d      	ldr	r2, [pc, #180]	; (8017aa8 <_strtod_l+0x968>)
 80179f4:	403a      	ands	r2, r7
 80179f6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80179fa:	f04f 31ff 	mov.w	r1, #4294967295
 80179fe:	d819      	bhi.n	8017a34 <_strtod_l+0x8f4>
 8017a00:	0d12      	lsrs	r2, r2, #20
 8017a02:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017a06:	fa01 f303 	lsl.w	r3, r1, r3
 8017a0a:	4298      	cmp	r0, r3
 8017a0c:	d117      	bne.n	8017a3e <_strtod_l+0x8fe>
 8017a0e:	4b29      	ldr	r3, [pc, #164]	; (8017ab4 <_strtod_l+0x974>)
 8017a10:	429f      	cmp	r7, r3
 8017a12:	d102      	bne.n	8017a1a <_strtod_l+0x8da>
 8017a14:	3001      	adds	r0, #1
 8017a16:	f43f addf 	beq.w	80175d8 <_strtod_l+0x498>
 8017a1a:	4b23      	ldr	r3, [pc, #140]	; (8017aa8 <_strtod_l+0x968>)
 8017a1c:	403b      	ands	r3, r7
 8017a1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017a22:	f04f 0a00 	mov.w	sl, #0
 8017a26:	9b04      	ldr	r3, [sp, #16]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d1a0      	bne.n	801796e <_strtod_l+0x82e>
 8017a2c:	e5de      	b.n	80175ec <_strtod_l+0x4ac>
 8017a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8017a32:	e7ea      	b.n	8017a0a <_strtod_l+0x8ca>
 8017a34:	460b      	mov	r3, r1
 8017a36:	e7e8      	b.n	8017a0a <_strtod_l+0x8ca>
 8017a38:	ea53 030a 	orrs.w	r3, r3, sl
 8017a3c:	d088      	beq.n	8017950 <_strtod_l+0x810>
 8017a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a40:	b1db      	cbz	r3, 8017a7a <_strtod_l+0x93a>
 8017a42:	423b      	tst	r3, r7
 8017a44:	d0ef      	beq.n	8017a26 <_strtod_l+0x8e6>
 8017a46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a48:	9a04      	ldr	r2, [sp, #16]
 8017a4a:	4650      	mov	r0, sl
 8017a4c:	4659      	mov	r1, fp
 8017a4e:	b1c3      	cbz	r3, 8017a82 <_strtod_l+0x942>
 8017a50:	f7ff fb5a 	bl	8017108 <sulp>
 8017a54:	4602      	mov	r2, r0
 8017a56:	460b      	mov	r3, r1
 8017a58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017a5c:	f7e8 fc36 	bl	80002cc <__adddf3>
 8017a60:	4682      	mov	sl, r0
 8017a62:	468b      	mov	fp, r1
 8017a64:	e7df      	b.n	8017a26 <_strtod_l+0x8e6>
 8017a66:	4013      	ands	r3, r2
 8017a68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017a6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017a70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017a74:	f04f 3aff 	mov.w	sl, #4294967295
 8017a78:	e7d5      	b.n	8017a26 <_strtod_l+0x8e6>
 8017a7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017a7c:	ea13 0f0a 	tst.w	r3, sl
 8017a80:	e7e0      	b.n	8017a44 <_strtod_l+0x904>
 8017a82:	f7ff fb41 	bl	8017108 <sulp>
 8017a86:	4602      	mov	r2, r0
 8017a88:	460b      	mov	r3, r1
 8017a8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017a8e:	f7e8 fc1b 	bl	80002c8 <__aeabi_dsub>
 8017a92:	2200      	movs	r2, #0
 8017a94:	2300      	movs	r3, #0
 8017a96:	4682      	mov	sl, r0
 8017a98:	468b      	mov	fp, r1
 8017a9a:	f7e9 f835 	bl	8000b08 <__aeabi_dcmpeq>
 8017a9e:	2800      	cmp	r0, #0
 8017aa0:	d0c1      	beq.n	8017a26 <_strtod_l+0x8e6>
 8017aa2:	e60e      	b.n	80176c2 <_strtod_l+0x582>
 8017aa4:	fffffc02 	.word	0xfffffc02
 8017aa8:	7ff00000 	.word	0x7ff00000
 8017aac:	39500000 	.word	0x39500000
 8017ab0:	000fffff 	.word	0x000fffff
 8017ab4:	7fefffff 	.word	0x7fefffff
 8017ab8:	0801a540 	.word	0x0801a540
 8017abc:	4631      	mov	r1, r6
 8017abe:	4628      	mov	r0, r5
 8017ac0:	f001 fa44 	bl	8018f4c <__ratio>
 8017ac4:	ec59 8b10 	vmov	r8, r9, d0
 8017ac8:	ee10 0a10 	vmov	r0, s0
 8017acc:	2200      	movs	r2, #0
 8017ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017ad2:	4649      	mov	r1, r9
 8017ad4:	f7e9 f82c 	bl	8000b30 <__aeabi_dcmple>
 8017ad8:	2800      	cmp	r0, #0
 8017ada:	d07c      	beq.n	8017bd6 <_strtod_l+0xa96>
 8017adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d04c      	beq.n	8017b7c <_strtod_l+0xa3c>
 8017ae2:	4b95      	ldr	r3, [pc, #596]	; (8017d38 <_strtod_l+0xbf8>)
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017aea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017d38 <_strtod_l+0xbf8>
 8017aee:	f04f 0800 	mov.w	r8, #0
 8017af2:	4b92      	ldr	r3, [pc, #584]	; (8017d3c <_strtod_l+0xbfc>)
 8017af4:	403b      	ands	r3, r7
 8017af6:	9311      	str	r3, [sp, #68]	; 0x44
 8017af8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017afa:	4b91      	ldr	r3, [pc, #580]	; (8017d40 <_strtod_l+0xc00>)
 8017afc:	429a      	cmp	r2, r3
 8017afe:	f040 80b2 	bne.w	8017c66 <_strtod_l+0xb26>
 8017b02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017b0a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017b0e:	ec4b ab10 	vmov	d0, sl, fp
 8017b12:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8017b16:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017b1a:	f001 f93f 	bl	8018d9c <__ulp>
 8017b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017b22:	ec53 2b10 	vmov	r2, r3, d0
 8017b26:	f7e8 fd87 	bl	8000638 <__aeabi_dmul>
 8017b2a:	4652      	mov	r2, sl
 8017b2c:	465b      	mov	r3, fp
 8017b2e:	f7e8 fbcd 	bl	80002cc <__adddf3>
 8017b32:	460b      	mov	r3, r1
 8017b34:	4981      	ldr	r1, [pc, #516]	; (8017d3c <_strtod_l+0xbfc>)
 8017b36:	4a83      	ldr	r2, [pc, #524]	; (8017d44 <_strtod_l+0xc04>)
 8017b38:	4019      	ands	r1, r3
 8017b3a:	4291      	cmp	r1, r2
 8017b3c:	4682      	mov	sl, r0
 8017b3e:	d95e      	bls.n	8017bfe <_strtod_l+0xabe>
 8017b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b42:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017b46:	4293      	cmp	r3, r2
 8017b48:	d103      	bne.n	8017b52 <_strtod_l+0xa12>
 8017b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b4c:	3301      	adds	r3, #1
 8017b4e:	f43f ad43 	beq.w	80175d8 <_strtod_l+0x498>
 8017b52:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8017d50 <_strtod_l+0xc10>
 8017b56:	f04f 3aff 	mov.w	sl, #4294967295
 8017b5a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017b5c:	4620      	mov	r0, r4
 8017b5e:	f000 fdf1 	bl	8018744 <_Bfree>
 8017b62:	9907      	ldr	r1, [sp, #28]
 8017b64:	4620      	mov	r0, r4
 8017b66:	f000 fded 	bl	8018744 <_Bfree>
 8017b6a:	4631      	mov	r1, r6
 8017b6c:	4620      	mov	r0, r4
 8017b6e:	f000 fde9 	bl	8018744 <_Bfree>
 8017b72:	4629      	mov	r1, r5
 8017b74:	4620      	mov	r0, r4
 8017b76:	f000 fde5 	bl	8018744 <_Bfree>
 8017b7a:	e613      	b.n	80177a4 <_strtod_l+0x664>
 8017b7c:	f1ba 0f00 	cmp.w	sl, #0
 8017b80:	d11b      	bne.n	8017bba <_strtod_l+0xa7a>
 8017b82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017b86:	b9f3      	cbnz	r3, 8017bc6 <_strtod_l+0xa86>
 8017b88:	4b6b      	ldr	r3, [pc, #428]	; (8017d38 <_strtod_l+0xbf8>)
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	4640      	mov	r0, r8
 8017b8e:	4649      	mov	r1, r9
 8017b90:	f7e8 ffc4 	bl	8000b1c <__aeabi_dcmplt>
 8017b94:	b9d0      	cbnz	r0, 8017bcc <_strtod_l+0xa8c>
 8017b96:	4640      	mov	r0, r8
 8017b98:	4649      	mov	r1, r9
 8017b9a:	4b6b      	ldr	r3, [pc, #428]	; (8017d48 <_strtod_l+0xc08>)
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	f7e8 fd4b 	bl	8000638 <__aeabi_dmul>
 8017ba2:	4680      	mov	r8, r0
 8017ba4:	4689      	mov	r9, r1
 8017ba6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017baa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8017bae:	931b      	str	r3, [sp, #108]	; 0x6c
 8017bb0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8017bb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017bb8:	e79b      	b.n	8017af2 <_strtod_l+0x9b2>
 8017bba:	f1ba 0f01 	cmp.w	sl, #1
 8017bbe:	d102      	bne.n	8017bc6 <_strtod_l+0xa86>
 8017bc0:	2f00      	cmp	r7, #0
 8017bc2:	f43f ad7e 	beq.w	80176c2 <_strtod_l+0x582>
 8017bc6:	4b61      	ldr	r3, [pc, #388]	; (8017d4c <_strtod_l+0xc0c>)
 8017bc8:	2200      	movs	r2, #0
 8017bca:	e78c      	b.n	8017ae6 <_strtod_l+0x9a6>
 8017bcc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017d48 <_strtod_l+0xc08>
 8017bd0:	f04f 0800 	mov.w	r8, #0
 8017bd4:	e7e7      	b.n	8017ba6 <_strtod_l+0xa66>
 8017bd6:	4b5c      	ldr	r3, [pc, #368]	; (8017d48 <_strtod_l+0xc08>)
 8017bd8:	4640      	mov	r0, r8
 8017bda:	4649      	mov	r1, r9
 8017bdc:	2200      	movs	r2, #0
 8017bde:	f7e8 fd2b 	bl	8000638 <__aeabi_dmul>
 8017be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017be4:	4680      	mov	r8, r0
 8017be6:	4689      	mov	r9, r1
 8017be8:	b933      	cbnz	r3, 8017bf8 <_strtod_l+0xab8>
 8017bea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017bee:	9012      	str	r0, [sp, #72]	; 0x48
 8017bf0:	9313      	str	r3, [sp, #76]	; 0x4c
 8017bf2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017bf6:	e7dd      	b.n	8017bb4 <_strtod_l+0xa74>
 8017bf8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8017bfc:	e7f9      	b.n	8017bf2 <_strtod_l+0xab2>
 8017bfe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017c02:	9b04      	ldr	r3, [sp, #16]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d1a8      	bne.n	8017b5a <_strtod_l+0xa1a>
 8017c08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017c0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017c0e:	0d1b      	lsrs	r3, r3, #20
 8017c10:	051b      	lsls	r3, r3, #20
 8017c12:	429a      	cmp	r2, r3
 8017c14:	d1a1      	bne.n	8017b5a <_strtod_l+0xa1a>
 8017c16:	4640      	mov	r0, r8
 8017c18:	4649      	mov	r1, r9
 8017c1a:	f7e9 f845 	bl	8000ca8 <__aeabi_d2lz>
 8017c1e:	f7e8 fcdd 	bl	80005dc <__aeabi_l2d>
 8017c22:	4602      	mov	r2, r0
 8017c24:	460b      	mov	r3, r1
 8017c26:	4640      	mov	r0, r8
 8017c28:	4649      	mov	r1, r9
 8017c2a:	f7e8 fb4d 	bl	80002c8 <__aeabi_dsub>
 8017c2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017c30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017c34:	ea43 030a 	orr.w	r3, r3, sl
 8017c38:	4313      	orrs	r3, r2
 8017c3a:	4680      	mov	r8, r0
 8017c3c:	4689      	mov	r9, r1
 8017c3e:	d053      	beq.n	8017ce8 <_strtod_l+0xba8>
 8017c40:	a335      	add	r3, pc, #212	; (adr r3, 8017d18 <_strtod_l+0xbd8>)
 8017c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c46:	f7e8 ff69 	bl	8000b1c <__aeabi_dcmplt>
 8017c4a:	2800      	cmp	r0, #0
 8017c4c:	f47f acce 	bne.w	80175ec <_strtod_l+0x4ac>
 8017c50:	a333      	add	r3, pc, #204	; (adr r3, 8017d20 <_strtod_l+0xbe0>)
 8017c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c56:	4640      	mov	r0, r8
 8017c58:	4649      	mov	r1, r9
 8017c5a:	f7e8 ff7d 	bl	8000b58 <__aeabi_dcmpgt>
 8017c5e:	2800      	cmp	r0, #0
 8017c60:	f43f af7b 	beq.w	8017b5a <_strtod_l+0xa1a>
 8017c64:	e4c2      	b.n	80175ec <_strtod_l+0x4ac>
 8017c66:	9b04      	ldr	r3, [sp, #16]
 8017c68:	b333      	cbz	r3, 8017cb8 <_strtod_l+0xb78>
 8017c6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017c6c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017c70:	d822      	bhi.n	8017cb8 <_strtod_l+0xb78>
 8017c72:	a32d      	add	r3, pc, #180	; (adr r3, 8017d28 <_strtod_l+0xbe8>)
 8017c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c78:	4640      	mov	r0, r8
 8017c7a:	4649      	mov	r1, r9
 8017c7c:	f7e8 ff58 	bl	8000b30 <__aeabi_dcmple>
 8017c80:	b1a0      	cbz	r0, 8017cac <_strtod_l+0xb6c>
 8017c82:	4649      	mov	r1, r9
 8017c84:	4640      	mov	r0, r8
 8017c86:	f7e8 ff87 	bl	8000b98 <__aeabi_d2uiz>
 8017c8a:	2801      	cmp	r0, #1
 8017c8c:	bf38      	it	cc
 8017c8e:	2001      	movcc	r0, #1
 8017c90:	f7e8 fc58 	bl	8000544 <__aeabi_ui2d>
 8017c94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c96:	4680      	mov	r8, r0
 8017c98:	4689      	mov	r9, r1
 8017c9a:	bb13      	cbnz	r3, 8017ce2 <_strtod_l+0xba2>
 8017c9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017ca0:	9014      	str	r0, [sp, #80]	; 0x50
 8017ca2:	9315      	str	r3, [sp, #84]	; 0x54
 8017ca4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017ca8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017cae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017cb0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017cb4:	1a9b      	subs	r3, r3, r2
 8017cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8017cb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017cbc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017cc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017cc4:	f001 f86a 	bl	8018d9c <__ulp>
 8017cc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017ccc:	ec53 2b10 	vmov	r2, r3, d0
 8017cd0:	f7e8 fcb2 	bl	8000638 <__aeabi_dmul>
 8017cd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017cd8:	f7e8 faf8 	bl	80002cc <__adddf3>
 8017cdc:	4682      	mov	sl, r0
 8017cde:	468b      	mov	fp, r1
 8017ce0:	e78f      	b.n	8017c02 <_strtod_l+0xac2>
 8017ce2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8017ce6:	e7dd      	b.n	8017ca4 <_strtod_l+0xb64>
 8017ce8:	a311      	add	r3, pc, #68	; (adr r3, 8017d30 <_strtod_l+0xbf0>)
 8017cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cee:	f7e8 ff15 	bl	8000b1c <__aeabi_dcmplt>
 8017cf2:	e7b4      	b.n	8017c5e <_strtod_l+0xb1e>
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	930e      	str	r3, [sp, #56]	; 0x38
 8017cf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017cfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017cfc:	6013      	str	r3, [r2, #0]
 8017cfe:	f7ff ba65 	b.w	80171cc <_strtod_l+0x8c>
 8017d02:	2b65      	cmp	r3, #101	; 0x65
 8017d04:	f43f ab5d 	beq.w	80173c2 <_strtod_l+0x282>
 8017d08:	2b45      	cmp	r3, #69	; 0x45
 8017d0a:	f43f ab5a 	beq.w	80173c2 <_strtod_l+0x282>
 8017d0e:	2201      	movs	r2, #1
 8017d10:	f7ff bb92 	b.w	8017438 <_strtod_l+0x2f8>
 8017d14:	f3af 8000 	nop.w
 8017d18:	94a03595 	.word	0x94a03595
 8017d1c:	3fdfffff 	.word	0x3fdfffff
 8017d20:	35afe535 	.word	0x35afe535
 8017d24:	3fe00000 	.word	0x3fe00000
 8017d28:	ffc00000 	.word	0xffc00000
 8017d2c:	41dfffff 	.word	0x41dfffff
 8017d30:	94a03595 	.word	0x94a03595
 8017d34:	3fcfffff 	.word	0x3fcfffff
 8017d38:	3ff00000 	.word	0x3ff00000
 8017d3c:	7ff00000 	.word	0x7ff00000
 8017d40:	7fe00000 	.word	0x7fe00000
 8017d44:	7c9fffff 	.word	0x7c9fffff
 8017d48:	3fe00000 	.word	0x3fe00000
 8017d4c:	bff00000 	.word	0xbff00000
 8017d50:	7fefffff 	.word	0x7fefffff

08017d54 <strtof>:
 8017d54:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8017d58:	4e26      	ldr	r6, [pc, #152]	; (8017df4 <strtof+0xa0>)
 8017d5a:	4b27      	ldr	r3, [pc, #156]	; (8017df8 <strtof+0xa4>)
 8017d5c:	460a      	mov	r2, r1
 8017d5e:	ed2d 8b02 	vpush	{d8}
 8017d62:	4601      	mov	r1, r0
 8017d64:	6830      	ldr	r0, [r6, #0]
 8017d66:	f7ff f9eb 	bl	8017140 <_strtod_l>
 8017d6a:	ec55 4b10 	vmov	r4, r5, d0
 8017d6e:	ee10 2a10 	vmov	r2, s0
 8017d72:	ee10 0a10 	vmov	r0, s0
 8017d76:	462b      	mov	r3, r5
 8017d78:	4629      	mov	r1, r5
 8017d7a:	f7e8 fef7 	bl	8000b6c <__aeabi_dcmpun>
 8017d7e:	b190      	cbz	r0, 8017da6 <strtof+0x52>
 8017d80:	2d00      	cmp	r5, #0
 8017d82:	481e      	ldr	r0, [pc, #120]	; (8017dfc <strtof+0xa8>)
 8017d84:	da09      	bge.n	8017d9a <strtof+0x46>
 8017d86:	f001 f96f 	bl	8019068 <nanf>
 8017d8a:	eeb1 8a40 	vneg.f32	s16, s0
 8017d8e:	eeb0 0a48 	vmov.f32	s0, s16
 8017d92:	ecbd 8b02 	vpop	{d8}
 8017d96:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8017d9a:	ecbd 8b02 	vpop	{d8}
 8017d9e:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8017da2:	f001 b961 	b.w	8019068 <nanf>
 8017da6:	4620      	mov	r0, r4
 8017da8:	4629      	mov	r1, r5
 8017daa:	f7e8 ff15 	bl	8000bd8 <__aeabi_d2f>
 8017dae:	ee08 0a10 	vmov	s16, r0
 8017db2:	eddf 7a13 	vldr	s15, [pc, #76]	; 8017e00 <strtof+0xac>
 8017db6:	eeb0 7ac8 	vabs.f32	s14, s16
 8017dba:	eeb4 7a67 	vcmp.f32	s14, s15
 8017dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dc2:	dde4      	ble.n	8017d8e <strtof+0x3a>
 8017dc4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8017dc8:	4b0e      	ldr	r3, [pc, #56]	; (8017e04 <strtof+0xb0>)
 8017dca:	f04f 32ff 	mov.w	r2, #4294967295
 8017dce:	4620      	mov	r0, r4
 8017dd0:	4649      	mov	r1, r9
 8017dd2:	f7e8 fecb 	bl	8000b6c <__aeabi_dcmpun>
 8017dd6:	b940      	cbnz	r0, 8017dea <strtof+0x96>
 8017dd8:	4b0a      	ldr	r3, [pc, #40]	; (8017e04 <strtof+0xb0>)
 8017dda:	f04f 32ff 	mov.w	r2, #4294967295
 8017dde:	4620      	mov	r0, r4
 8017de0:	4649      	mov	r1, r9
 8017de2:	f7e8 fea5 	bl	8000b30 <__aeabi_dcmple>
 8017de6:	2800      	cmp	r0, #0
 8017de8:	d0d1      	beq.n	8017d8e <strtof+0x3a>
 8017dea:	6833      	ldr	r3, [r6, #0]
 8017dec:	2222      	movs	r2, #34	; 0x22
 8017dee:	601a      	str	r2, [r3, #0]
 8017df0:	e7cd      	b.n	8017d8e <strtof+0x3a>
 8017df2:	bf00      	nop
 8017df4:	2000000c 	.word	0x2000000c
 8017df8:	20000074 	.word	0x20000074
 8017dfc:	0801a8cf 	.word	0x0801a8cf
 8017e00:	7f7fffff 	.word	0x7f7fffff
 8017e04:	7fefffff 	.word	0x7fefffff

08017e08 <_strtol_l.isra.0>:
 8017e08:	2b01      	cmp	r3, #1
 8017e0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e0e:	d001      	beq.n	8017e14 <_strtol_l.isra.0+0xc>
 8017e10:	2b24      	cmp	r3, #36	; 0x24
 8017e12:	d906      	bls.n	8017e22 <_strtol_l.isra.0+0x1a>
 8017e14:	f7fe ffd0 	bl	8016db8 <__errno>
 8017e18:	2316      	movs	r3, #22
 8017e1a:	6003      	str	r3, [r0, #0]
 8017e1c:	2000      	movs	r0, #0
 8017e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e22:	4f3a      	ldr	r7, [pc, #232]	; (8017f0c <_strtol_l.isra.0+0x104>)
 8017e24:	468e      	mov	lr, r1
 8017e26:	4676      	mov	r6, lr
 8017e28:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017e2c:	5de5      	ldrb	r5, [r4, r7]
 8017e2e:	f015 0508 	ands.w	r5, r5, #8
 8017e32:	d1f8      	bne.n	8017e26 <_strtol_l.isra.0+0x1e>
 8017e34:	2c2d      	cmp	r4, #45	; 0x2d
 8017e36:	d134      	bne.n	8017ea2 <_strtol_l.isra.0+0x9a>
 8017e38:	f89e 4000 	ldrb.w	r4, [lr]
 8017e3c:	f04f 0801 	mov.w	r8, #1
 8017e40:	f106 0e02 	add.w	lr, r6, #2
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d05c      	beq.n	8017f02 <_strtol_l.isra.0+0xfa>
 8017e48:	2b10      	cmp	r3, #16
 8017e4a:	d10c      	bne.n	8017e66 <_strtol_l.isra.0+0x5e>
 8017e4c:	2c30      	cmp	r4, #48	; 0x30
 8017e4e:	d10a      	bne.n	8017e66 <_strtol_l.isra.0+0x5e>
 8017e50:	f89e 4000 	ldrb.w	r4, [lr]
 8017e54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017e58:	2c58      	cmp	r4, #88	; 0x58
 8017e5a:	d14d      	bne.n	8017ef8 <_strtol_l.isra.0+0xf0>
 8017e5c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017e60:	2310      	movs	r3, #16
 8017e62:	f10e 0e02 	add.w	lr, lr, #2
 8017e66:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8017e6a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017e6e:	2600      	movs	r6, #0
 8017e70:	fbbc f9f3 	udiv	r9, ip, r3
 8017e74:	4635      	mov	r5, r6
 8017e76:	fb03 ca19 	mls	sl, r3, r9, ip
 8017e7a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017e7e:	2f09      	cmp	r7, #9
 8017e80:	d818      	bhi.n	8017eb4 <_strtol_l.isra.0+0xac>
 8017e82:	463c      	mov	r4, r7
 8017e84:	42a3      	cmp	r3, r4
 8017e86:	dd24      	ble.n	8017ed2 <_strtol_l.isra.0+0xca>
 8017e88:	2e00      	cmp	r6, #0
 8017e8a:	db1f      	blt.n	8017ecc <_strtol_l.isra.0+0xc4>
 8017e8c:	45a9      	cmp	r9, r5
 8017e8e:	d31d      	bcc.n	8017ecc <_strtol_l.isra.0+0xc4>
 8017e90:	d101      	bne.n	8017e96 <_strtol_l.isra.0+0x8e>
 8017e92:	45a2      	cmp	sl, r4
 8017e94:	db1a      	blt.n	8017ecc <_strtol_l.isra.0+0xc4>
 8017e96:	fb05 4503 	mla	r5, r5, r3, r4
 8017e9a:	2601      	movs	r6, #1
 8017e9c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017ea0:	e7eb      	b.n	8017e7a <_strtol_l.isra.0+0x72>
 8017ea2:	2c2b      	cmp	r4, #43	; 0x2b
 8017ea4:	bf08      	it	eq
 8017ea6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8017eaa:	46a8      	mov	r8, r5
 8017eac:	bf08      	it	eq
 8017eae:	f106 0e02 	addeq.w	lr, r6, #2
 8017eb2:	e7c7      	b.n	8017e44 <_strtol_l.isra.0+0x3c>
 8017eb4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017eb8:	2f19      	cmp	r7, #25
 8017eba:	d801      	bhi.n	8017ec0 <_strtol_l.isra.0+0xb8>
 8017ebc:	3c37      	subs	r4, #55	; 0x37
 8017ebe:	e7e1      	b.n	8017e84 <_strtol_l.isra.0+0x7c>
 8017ec0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017ec4:	2f19      	cmp	r7, #25
 8017ec6:	d804      	bhi.n	8017ed2 <_strtol_l.isra.0+0xca>
 8017ec8:	3c57      	subs	r4, #87	; 0x57
 8017eca:	e7db      	b.n	8017e84 <_strtol_l.isra.0+0x7c>
 8017ecc:	f04f 36ff 	mov.w	r6, #4294967295
 8017ed0:	e7e4      	b.n	8017e9c <_strtol_l.isra.0+0x94>
 8017ed2:	2e00      	cmp	r6, #0
 8017ed4:	da05      	bge.n	8017ee2 <_strtol_l.isra.0+0xda>
 8017ed6:	2322      	movs	r3, #34	; 0x22
 8017ed8:	6003      	str	r3, [r0, #0]
 8017eda:	4665      	mov	r5, ip
 8017edc:	b942      	cbnz	r2, 8017ef0 <_strtol_l.isra.0+0xe8>
 8017ede:	4628      	mov	r0, r5
 8017ee0:	e79d      	b.n	8017e1e <_strtol_l.isra.0+0x16>
 8017ee2:	f1b8 0f00 	cmp.w	r8, #0
 8017ee6:	d000      	beq.n	8017eea <_strtol_l.isra.0+0xe2>
 8017ee8:	426d      	negs	r5, r5
 8017eea:	2a00      	cmp	r2, #0
 8017eec:	d0f7      	beq.n	8017ede <_strtol_l.isra.0+0xd6>
 8017eee:	b10e      	cbz	r6, 8017ef4 <_strtol_l.isra.0+0xec>
 8017ef0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8017ef4:	6011      	str	r1, [r2, #0]
 8017ef6:	e7f2      	b.n	8017ede <_strtol_l.isra.0+0xd6>
 8017ef8:	2430      	movs	r4, #48	; 0x30
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d1b3      	bne.n	8017e66 <_strtol_l.isra.0+0x5e>
 8017efe:	2308      	movs	r3, #8
 8017f00:	e7b1      	b.n	8017e66 <_strtol_l.isra.0+0x5e>
 8017f02:	2c30      	cmp	r4, #48	; 0x30
 8017f04:	d0a4      	beq.n	8017e50 <_strtol_l.isra.0+0x48>
 8017f06:	230a      	movs	r3, #10
 8017f08:	e7ad      	b.n	8017e66 <_strtol_l.isra.0+0x5e>
 8017f0a:	bf00      	nop
 8017f0c:	0801a58e 	.word	0x0801a58e

08017f10 <strtol>:
 8017f10:	4613      	mov	r3, r2
 8017f12:	460a      	mov	r2, r1
 8017f14:	4601      	mov	r1, r0
 8017f16:	4802      	ldr	r0, [pc, #8]	; (8017f20 <strtol+0x10>)
 8017f18:	6800      	ldr	r0, [r0, #0]
 8017f1a:	f7ff bf75 	b.w	8017e08 <_strtol_l.isra.0>
 8017f1e:	bf00      	nop
 8017f20:	2000000c 	.word	0x2000000c

08017f24 <__utoa>:
 8017f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f26:	4c1f      	ldr	r4, [pc, #124]	; (8017fa4 <__utoa+0x80>)
 8017f28:	b08b      	sub	sp, #44	; 0x2c
 8017f2a:	4605      	mov	r5, r0
 8017f2c:	460b      	mov	r3, r1
 8017f2e:	466e      	mov	r6, sp
 8017f30:	f104 0c20 	add.w	ip, r4, #32
 8017f34:	6820      	ldr	r0, [r4, #0]
 8017f36:	6861      	ldr	r1, [r4, #4]
 8017f38:	4637      	mov	r7, r6
 8017f3a:	c703      	stmia	r7!, {r0, r1}
 8017f3c:	3408      	adds	r4, #8
 8017f3e:	4564      	cmp	r4, ip
 8017f40:	463e      	mov	r6, r7
 8017f42:	d1f7      	bne.n	8017f34 <__utoa+0x10>
 8017f44:	7921      	ldrb	r1, [r4, #4]
 8017f46:	7139      	strb	r1, [r7, #4]
 8017f48:	1e91      	subs	r1, r2, #2
 8017f4a:	6820      	ldr	r0, [r4, #0]
 8017f4c:	6038      	str	r0, [r7, #0]
 8017f4e:	2922      	cmp	r1, #34	; 0x22
 8017f50:	f04f 0100 	mov.w	r1, #0
 8017f54:	d904      	bls.n	8017f60 <__utoa+0x3c>
 8017f56:	7019      	strb	r1, [r3, #0]
 8017f58:	460b      	mov	r3, r1
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	b00b      	add	sp, #44	; 0x2c
 8017f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f60:	1e58      	subs	r0, r3, #1
 8017f62:	4684      	mov	ip, r0
 8017f64:	fbb5 f7f2 	udiv	r7, r5, r2
 8017f68:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8017f6c:	fb02 5617 	mls	r6, r2, r7, r5
 8017f70:	4476      	add	r6, lr
 8017f72:	460c      	mov	r4, r1
 8017f74:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8017f78:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8017f7c:	462e      	mov	r6, r5
 8017f7e:	42b2      	cmp	r2, r6
 8017f80:	f101 0101 	add.w	r1, r1, #1
 8017f84:	463d      	mov	r5, r7
 8017f86:	d9ed      	bls.n	8017f64 <__utoa+0x40>
 8017f88:	2200      	movs	r2, #0
 8017f8a:	545a      	strb	r2, [r3, r1]
 8017f8c:	1919      	adds	r1, r3, r4
 8017f8e:	1aa5      	subs	r5, r4, r2
 8017f90:	42aa      	cmp	r2, r5
 8017f92:	dae2      	bge.n	8017f5a <__utoa+0x36>
 8017f94:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8017f98:	780e      	ldrb	r6, [r1, #0]
 8017f9a:	7006      	strb	r6, [r0, #0]
 8017f9c:	3201      	adds	r2, #1
 8017f9e:	f801 5901 	strb.w	r5, [r1], #-1
 8017fa2:	e7f4      	b.n	8017f8e <__utoa+0x6a>
 8017fa4:	0801a568 	.word	0x0801a568

08017fa8 <rshift>:
 8017fa8:	6903      	ldr	r3, [r0, #16]
 8017faa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017fae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017fb2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017fb6:	f100 0414 	add.w	r4, r0, #20
 8017fba:	dd45      	ble.n	8018048 <rshift+0xa0>
 8017fbc:	f011 011f 	ands.w	r1, r1, #31
 8017fc0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017fc4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017fc8:	d10c      	bne.n	8017fe4 <rshift+0x3c>
 8017fca:	f100 0710 	add.w	r7, r0, #16
 8017fce:	4629      	mov	r1, r5
 8017fd0:	42b1      	cmp	r1, r6
 8017fd2:	d334      	bcc.n	801803e <rshift+0x96>
 8017fd4:	1a9b      	subs	r3, r3, r2
 8017fd6:	009b      	lsls	r3, r3, #2
 8017fd8:	1eea      	subs	r2, r5, #3
 8017fda:	4296      	cmp	r6, r2
 8017fdc:	bf38      	it	cc
 8017fde:	2300      	movcc	r3, #0
 8017fe0:	4423      	add	r3, r4
 8017fe2:	e015      	b.n	8018010 <rshift+0x68>
 8017fe4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017fe8:	f1c1 0820 	rsb	r8, r1, #32
 8017fec:	40cf      	lsrs	r7, r1
 8017fee:	f105 0e04 	add.w	lr, r5, #4
 8017ff2:	46a1      	mov	r9, r4
 8017ff4:	4576      	cmp	r6, lr
 8017ff6:	46f4      	mov	ip, lr
 8017ff8:	d815      	bhi.n	8018026 <rshift+0x7e>
 8017ffa:	1a9b      	subs	r3, r3, r2
 8017ffc:	009a      	lsls	r2, r3, #2
 8017ffe:	3a04      	subs	r2, #4
 8018000:	3501      	adds	r5, #1
 8018002:	42ae      	cmp	r6, r5
 8018004:	bf38      	it	cc
 8018006:	2200      	movcc	r2, #0
 8018008:	18a3      	adds	r3, r4, r2
 801800a:	50a7      	str	r7, [r4, r2]
 801800c:	b107      	cbz	r7, 8018010 <rshift+0x68>
 801800e:	3304      	adds	r3, #4
 8018010:	1b1a      	subs	r2, r3, r4
 8018012:	42a3      	cmp	r3, r4
 8018014:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018018:	bf08      	it	eq
 801801a:	2300      	moveq	r3, #0
 801801c:	6102      	str	r2, [r0, #16]
 801801e:	bf08      	it	eq
 8018020:	6143      	streq	r3, [r0, #20]
 8018022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018026:	f8dc c000 	ldr.w	ip, [ip]
 801802a:	fa0c fc08 	lsl.w	ip, ip, r8
 801802e:	ea4c 0707 	orr.w	r7, ip, r7
 8018032:	f849 7b04 	str.w	r7, [r9], #4
 8018036:	f85e 7b04 	ldr.w	r7, [lr], #4
 801803a:	40cf      	lsrs	r7, r1
 801803c:	e7da      	b.n	8017ff4 <rshift+0x4c>
 801803e:	f851 cb04 	ldr.w	ip, [r1], #4
 8018042:	f847 cf04 	str.w	ip, [r7, #4]!
 8018046:	e7c3      	b.n	8017fd0 <rshift+0x28>
 8018048:	4623      	mov	r3, r4
 801804a:	e7e1      	b.n	8018010 <rshift+0x68>

0801804c <__hexdig_fun>:
 801804c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018050:	2b09      	cmp	r3, #9
 8018052:	d802      	bhi.n	801805a <__hexdig_fun+0xe>
 8018054:	3820      	subs	r0, #32
 8018056:	b2c0      	uxtb	r0, r0
 8018058:	4770      	bx	lr
 801805a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801805e:	2b05      	cmp	r3, #5
 8018060:	d801      	bhi.n	8018066 <__hexdig_fun+0x1a>
 8018062:	3847      	subs	r0, #71	; 0x47
 8018064:	e7f7      	b.n	8018056 <__hexdig_fun+0xa>
 8018066:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801806a:	2b05      	cmp	r3, #5
 801806c:	d801      	bhi.n	8018072 <__hexdig_fun+0x26>
 801806e:	3827      	subs	r0, #39	; 0x27
 8018070:	e7f1      	b.n	8018056 <__hexdig_fun+0xa>
 8018072:	2000      	movs	r0, #0
 8018074:	4770      	bx	lr
	...

08018078 <__gethex>:
 8018078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801807c:	ed2d 8b02 	vpush	{d8}
 8018080:	b089      	sub	sp, #36	; 0x24
 8018082:	ee08 0a10 	vmov	s16, r0
 8018086:	9304      	str	r3, [sp, #16]
 8018088:	4bbc      	ldr	r3, [pc, #752]	; (801837c <__gethex+0x304>)
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	9301      	str	r3, [sp, #4]
 801808e:	4618      	mov	r0, r3
 8018090:	468b      	mov	fp, r1
 8018092:	4690      	mov	r8, r2
 8018094:	f7e8 f90c 	bl	80002b0 <strlen>
 8018098:	9b01      	ldr	r3, [sp, #4]
 801809a:	f8db 2000 	ldr.w	r2, [fp]
 801809e:	4403      	add	r3, r0
 80180a0:	4682      	mov	sl, r0
 80180a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80180a6:	9305      	str	r3, [sp, #20]
 80180a8:	1c93      	adds	r3, r2, #2
 80180aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80180ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80180b2:	32fe      	adds	r2, #254	; 0xfe
 80180b4:	18d1      	adds	r1, r2, r3
 80180b6:	461f      	mov	r7, r3
 80180b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80180bc:	9100      	str	r1, [sp, #0]
 80180be:	2830      	cmp	r0, #48	; 0x30
 80180c0:	d0f8      	beq.n	80180b4 <__gethex+0x3c>
 80180c2:	f7ff ffc3 	bl	801804c <__hexdig_fun>
 80180c6:	4604      	mov	r4, r0
 80180c8:	2800      	cmp	r0, #0
 80180ca:	d13a      	bne.n	8018142 <__gethex+0xca>
 80180cc:	9901      	ldr	r1, [sp, #4]
 80180ce:	4652      	mov	r2, sl
 80180d0:	4638      	mov	r0, r7
 80180d2:	f000 ffcf 	bl	8019074 <strncmp>
 80180d6:	4605      	mov	r5, r0
 80180d8:	2800      	cmp	r0, #0
 80180da:	d168      	bne.n	80181ae <__gethex+0x136>
 80180dc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80180e0:	eb07 060a 	add.w	r6, r7, sl
 80180e4:	f7ff ffb2 	bl	801804c <__hexdig_fun>
 80180e8:	2800      	cmp	r0, #0
 80180ea:	d062      	beq.n	80181b2 <__gethex+0x13a>
 80180ec:	4633      	mov	r3, r6
 80180ee:	7818      	ldrb	r0, [r3, #0]
 80180f0:	2830      	cmp	r0, #48	; 0x30
 80180f2:	461f      	mov	r7, r3
 80180f4:	f103 0301 	add.w	r3, r3, #1
 80180f8:	d0f9      	beq.n	80180ee <__gethex+0x76>
 80180fa:	f7ff ffa7 	bl	801804c <__hexdig_fun>
 80180fe:	2301      	movs	r3, #1
 8018100:	fab0 f480 	clz	r4, r0
 8018104:	0964      	lsrs	r4, r4, #5
 8018106:	4635      	mov	r5, r6
 8018108:	9300      	str	r3, [sp, #0]
 801810a:	463a      	mov	r2, r7
 801810c:	4616      	mov	r6, r2
 801810e:	3201      	adds	r2, #1
 8018110:	7830      	ldrb	r0, [r6, #0]
 8018112:	f7ff ff9b 	bl	801804c <__hexdig_fun>
 8018116:	2800      	cmp	r0, #0
 8018118:	d1f8      	bne.n	801810c <__gethex+0x94>
 801811a:	9901      	ldr	r1, [sp, #4]
 801811c:	4652      	mov	r2, sl
 801811e:	4630      	mov	r0, r6
 8018120:	f000 ffa8 	bl	8019074 <strncmp>
 8018124:	b980      	cbnz	r0, 8018148 <__gethex+0xd0>
 8018126:	b94d      	cbnz	r5, 801813c <__gethex+0xc4>
 8018128:	eb06 050a 	add.w	r5, r6, sl
 801812c:	462a      	mov	r2, r5
 801812e:	4616      	mov	r6, r2
 8018130:	3201      	adds	r2, #1
 8018132:	7830      	ldrb	r0, [r6, #0]
 8018134:	f7ff ff8a 	bl	801804c <__hexdig_fun>
 8018138:	2800      	cmp	r0, #0
 801813a:	d1f8      	bne.n	801812e <__gethex+0xb6>
 801813c:	1bad      	subs	r5, r5, r6
 801813e:	00ad      	lsls	r5, r5, #2
 8018140:	e004      	b.n	801814c <__gethex+0xd4>
 8018142:	2400      	movs	r4, #0
 8018144:	4625      	mov	r5, r4
 8018146:	e7e0      	b.n	801810a <__gethex+0x92>
 8018148:	2d00      	cmp	r5, #0
 801814a:	d1f7      	bne.n	801813c <__gethex+0xc4>
 801814c:	7833      	ldrb	r3, [r6, #0]
 801814e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018152:	2b50      	cmp	r3, #80	; 0x50
 8018154:	d13b      	bne.n	80181ce <__gethex+0x156>
 8018156:	7873      	ldrb	r3, [r6, #1]
 8018158:	2b2b      	cmp	r3, #43	; 0x2b
 801815a:	d02c      	beq.n	80181b6 <__gethex+0x13e>
 801815c:	2b2d      	cmp	r3, #45	; 0x2d
 801815e:	d02e      	beq.n	80181be <__gethex+0x146>
 8018160:	1c71      	adds	r1, r6, #1
 8018162:	f04f 0900 	mov.w	r9, #0
 8018166:	7808      	ldrb	r0, [r1, #0]
 8018168:	f7ff ff70 	bl	801804c <__hexdig_fun>
 801816c:	1e43      	subs	r3, r0, #1
 801816e:	b2db      	uxtb	r3, r3
 8018170:	2b18      	cmp	r3, #24
 8018172:	d82c      	bhi.n	80181ce <__gethex+0x156>
 8018174:	f1a0 0210 	sub.w	r2, r0, #16
 8018178:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801817c:	f7ff ff66 	bl	801804c <__hexdig_fun>
 8018180:	1e43      	subs	r3, r0, #1
 8018182:	b2db      	uxtb	r3, r3
 8018184:	2b18      	cmp	r3, #24
 8018186:	d91d      	bls.n	80181c4 <__gethex+0x14c>
 8018188:	f1b9 0f00 	cmp.w	r9, #0
 801818c:	d000      	beq.n	8018190 <__gethex+0x118>
 801818e:	4252      	negs	r2, r2
 8018190:	4415      	add	r5, r2
 8018192:	f8cb 1000 	str.w	r1, [fp]
 8018196:	b1e4      	cbz	r4, 80181d2 <__gethex+0x15a>
 8018198:	9b00      	ldr	r3, [sp, #0]
 801819a:	2b00      	cmp	r3, #0
 801819c:	bf14      	ite	ne
 801819e:	2700      	movne	r7, #0
 80181a0:	2706      	moveq	r7, #6
 80181a2:	4638      	mov	r0, r7
 80181a4:	b009      	add	sp, #36	; 0x24
 80181a6:	ecbd 8b02 	vpop	{d8}
 80181aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181ae:	463e      	mov	r6, r7
 80181b0:	4625      	mov	r5, r4
 80181b2:	2401      	movs	r4, #1
 80181b4:	e7ca      	b.n	801814c <__gethex+0xd4>
 80181b6:	f04f 0900 	mov.w	r9, #0
 80181ba:	1cb1      	adds	r1, r6, #2
 80181bc:	e7d3      	b.n	8018166 <__gethex+0xee>
 80181be:	f04f 0901 	mov.w	r9, #1
 80181c2:	e7fa      	b.n	80181ba <__gethex+0x142>
 80181c4:	230a      	movs	r3, #10
 80181c6:	fb03 0202 	mla	r2, r3, r2, r0
 80181ca:	3a10      	subs	r2, #16
 80181cc:	e7d4      	b.n	8018178 <__gethex+0x100>
 80181ce:	4631      	mov	r1, r6
 80181d0:	e7df      	b.n	8018192 <__gethex+0x11a>
 80181d2:	1bf3      	subs	r3, r6, r7
 80181d4:	3b01      	subs	r3, #1
 80181d6:	4621      	mov	r1, r4
 80181d8:	2b07      	cmp	r3, #7
 80181da:	dc0b      	bgt.n	80181f4 <__gethex+0x17c>
 80181dc:	ee18 0a10 	vmov	r0, s16
 80181e0:	f000 fa70 	bl	80186c4 <_Balloc>
 80181e4:	4604      	mov	r4, r0
 80181e6:	b940      	cbnz	r0, 80181fa <__gethex+0x182>
 80181e8:	4b65      	ldr	r3, [pc, #404]	; (8018380 <__gethex+0x308>)
 80181ea:	4602      	mov	r2, r0
 80181ec:	21de      	movs	r1, #222	; 0xde
 80181ee:	4865      	ldr	r0, [pc, #404]	; (8018384 <__gethex+0x30c>)
 80181f0:	f000 ff60 	bl	80190b4 <__assert_func>
 80181f4:	3101      	adds	r1, #1
 80181f6:	105b      	asrs	r3, r3, #1
 80181f8:	e7ee      	b.n	80181d8 <__gethex+0x160>
 80181fa:	f100 0914 	add.w	r9, r0, #20
 80181fe:	f04f 0b00 	mov.w	fp, #0
 8018202:	f1ca 0301 	rsb	r3, sl, #1
 8018206:	f8cd 9008 	str.w	r9, [sp, #8]
 801820a:	f8cd b000 	str.w	fp, [sp]
 801820e:	9306      	str	r3, [sp, #24]
 8018210:	42b7      	cmp	r7, r6
 8018212:	d340      	bcc.n	8018296 <__gethex+0x21e>
 8018214:	9802      	ldr	r0, [sp, #8]
 8018216:	9b00      	ldr	r3, [sp, #0]
 8018218:	f840 3b04 	str.w	r3, [r0], #4
 801821c:	eba0 0009 	sub.w	r0, r0, r9
 8018220:	1080      	asrs	r0, r0, #2
 8018222:	0146      	lsls	r6, r0, #5
 8018224:	6120      	str	r0, [r4, #16]
 8018226:	4618      	mov	r0, r3
 8018228:	f000 fb42 	bl	80188b0 <__hi0bits>
 801822c:	1a30      	subs	r0, r6, r0
 801822e:	f8d8 6000 	ldr.w	r6, [r8]
 8018232:	42b0      	cmp	r0, r6
 8018234:	dd63      	ble.n	80182fe <__gethex+0x286>
 8018236:	1b87      	subs	r7, r0, r6
 8018238:	4639      	mov	r1, r7
 801823a:	4620      	mov	r0, r4
 801823c:	f000 fedc 	bl	8018ff8 <__any_on>
 8018240:	4682      	mov	sl, r0
 8018242:	b1a8      	cbz	r0, 8018270 <__gethex+0x1f8>
 8018244:	1e7b      	subs	r3, r7, #1
 8018246:	1159      	asrs	r1, r3, #5
 8018248:	f003 021f 	and.w	r2, r3, #31
 801824c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018250:	f04f 0a01 	mov.w	sl, #1
 8018254:	fa0a f202 	lsl.w	r2, sl, r2
 8018258:	420a      	tst	r2, r1
 801825a:	d009      	beq.n	8018270 <__gethex+0x1f8>
 801825c:	4553      	cmp	r3, sl
 801825e:	dd05      	ble.n	801826c <__gethex+0x1f4>
 8018260:	1eb9      	subs	r1, r7, #2
 8018262:	4620      	mov	r0, r4
 8018264:	f000 fec8 	bl	8018ff8 <__any_on>
 8018268:	2800      	cmp	r0, #0
 801826a:	d145      	bne.n	80182f8 <__gethex+0x280>
 801826c:	f04f 0a02 	mov.w	sl, #2
 8018270:	4639      	mov	r1, r7
 8018272:	4620      	mov	r0, r4
 8018274:	f7ff fe98 	bl	8017fa8 <rshift>
 8018278:	443d      	add	r5, r7
 801827a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801827e:	42ab      	cmp	r3, r5
 8018280:	da4c      	bge.n	801831c <__gethex+0x2a4>
 8018282:	ee18 0a10 	vmov	r0, s16
 8018286:	4621      	mov	r1, r4
 8018288:	f000 fa5c 	bl	8018744 <_Bfree>
 801828c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801828e:	2300      	movs	r3, #0
 8018290:	6013      	str	r3, [r2, #0]
 8018292:	27a3      	movs	r7, #163	; 0xa3
 8018294:	e785      	b.n	80181a2 <__gethex+0x12a>
 8018296:	1e73      	subs	r3, r6, #1
 8018298:	9a05      	ldr	r2, [sp, #20]
 801829a:	9303      	str	r3, [sp, #12]
 801829c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80182a0:	4293      	cmp	r3, r2
 80182a2:	d019      	beq.n	80182d8 <__gethex+0x260>
 80182a4:	f1bb 0f20 	cmp.w	fp, #32
 80182a8:	d107      	bne.n	80182ba <__gethex+0x242>
 80182aa:	9b02      	ldr	r3, [sp, #8]
 80182ac:	9a00      	ldr	r2, [sp, #0]
 80182ae:	f843 2b04 	str.w	r2, [r3], #4
 80182b2:	9302      	str	r3, [sp, #8]
 80182b4:	2300      	movs	r3, #0
 80182b6:	9300      	str	r3, [sp, #0]
 80182b8:	469b      	mov	fp, r3
 80182ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80182be:	f7ff fec5 	bl	801804c <__hexdig_fun>
 80182c2:	9b00      	ldr	r3, [sp, #0]
 80182c4:	f000 000f 	and.w	r0, r0, #15
 80182c8:	fa00 f00b 	lsl.w	r0, r0, fp
 80182cc:	4303      	orrs	r3, r0
 80182ce:	9300      	str	r3, [sp, #0]
 80182d0:	f10b 0b04 	add.w	fp, fp, #4
 80182d4:	9b03      	ldr	r3, [sp, #12]
 80182d6:	e00d      	b.n	80182f4 <__gethex+0x27c>
 80182d8:	9b03      	ldr	r3, [sp, #12]
 80182da:	9a06      	ldr	r2, [sp, #24]
 80182dc:	4413      	add	r3, r2
 80182de:	42bb      	cmp	r3, r7
 80182e0:	d3e0      	bcc.n	80182a4 <__gethex+0x22c>
 80182e2:	4618      	mov	r0, r3
 80182e4:	9901      	ldr	r1, [sp, #4]
 80182e6:	9307      	str	r3, [sp, #28]
 80182e8:	4652      	mov	r2, sl
 80182ea:	f000 fec3 	bl	8019074 <strncmp>
 80182ee:	9b07      	ldr	r3, [sp, #28]
 80182f0:	2800      	cmp	r0, #0
 80182f2:	d1d7      	bne.n	80182a4 <__gethex+0x22c>
 80182f4:	461e      	mov	r6, r3
 80182f6:	e78b      	b.n	8018210 <__gethex+0x198>
 80182f8:	f04f 0a03 	mov.w	sl, #3
 80182fc:	e7b8      	b.n	8018270 <__gethex+0x1f8>
 80182fe:	da0a      	bge.n	8018316 <__gethex+0x29e>
 8018300:	1a37      	subs	r7, r6, r0
 8018302:	4621      	mov	r1, r4
 8018304:	ee18 0a10 	vmov	r0, s16
 8018308:	463a      	mov	r2, r7
 801830a:	f000 fc37 	bl	8018b7c <__lshift>
 801830e:	1bed      	subs	r5, r5, r7
 8018310:	4604      	mov	r4, r0
 8018312:	f100 0914 	add.w	r9, r0, #20
 8018316:	f04f 0a00 	mov.w	sl, #0
 801831a:	e7ae      	b.n	801827a <__gethex+0x202>
 801831c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018320:	42a8      	cmp	r0, r5
 8018322:	dd72      	ble.n	801840a <__gethex+0x392>
 8018324:	1b45      	subs	r5, r0, r5
 8018326:	42ae      	cmp	r6, r5
 8018328:	dc36      	bgt.n	8018398 <__gethex+0x320>
 801832a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801832e:	2b02      	cmp	r3, #2
 8018330:	d02a      	beq.n	8018388 <__gethex+0x310>
 8018332:	2b03      	cmp	r3, #3
 8018334:	d02c      	beq.n	8018390 <__gethex+0x318>
 8018336:	2b01      	cmp	r3, #1
 8018338:	d115      	bne.n	8018366 <__gethex+0x2ee>
 801833a:	42ae      	cmp	r6, r5
 801833c:	d113      	bne.n	8018366 <__gethex+0x2ee>
 801833e:	2e01      	cmp	r6, #1
 8018340:	d10b      	bne.n	801835a <__gethex+0x2e2>
 8018342:	9a04      	ldr	r2, [sp, #16]
 8018344:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018348:	6013      	str	r3, [r2, #0]
 801834a:	2301      	movs	r3, #1
 801834c:	6123      	str	r3, [r4, #16]
 801834e:	f8c9 3000 	str.w	r3, [r9]
 8018352:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018354:	2762      	movs	r7, #98	; 0x62
 8018356:	601c      	str	r4, [r3, #0]
 8018358:	e723      	b.n	80181a2 <__gethex+0x12a>
 801835a:	1e71      	subs	r1, r6, #1
 801835c:	4620      	mov	r0, r4
 801835e:	f000 fe4b 	bl	8018ff8 <__any_on>
 8018362:	2800      	cmp	r0, #0
 8018364:	d1ed      	bne.n	8018342 <__gethex+0x2ca>
 8018366:	ee18 0a10 	vmov	r0, s16
 801836a:	4621      	mov	r1, r4
 801836c:	f000 f9ea 	bl	8018744 <_Bfree>
 8018370:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018372:	2300      	movs	r3, #0
 8018374:	6013      	str	r3, [r2, #0]
 8018376:	2750      	movs	r7, #80	; 0x50
 8018378:	e713      	b.n	80181a2 <__gethex+0x12a>
 801837a:	bf00      	nop
 801837c:	0801a708 	.word	0x0801a708
 8018380:	0801a68e 	.word	0x0801a68e
 8018384:	0801a69f 	.word	0x0801a69f
 8018388:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801838a:	2b00      	cmp	r3, #0
 801838c:	d1eb      	bne.n	8018366 <__gethex+0x2ee>
 801838e:	e7d8      	b.n	8018342 <__gethex+0x2ca>
 8018390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018392:	2b00      	cmp	r3, #0
 8018394:	d1d5      	bne.n	8018342 <__gethex+0x2ca>
 8018396:	e7e6      	b.n	8018366 <__gethex+0x2ee>
 8018398:	1e6f      	subs	r7, r5, #1
 801839a:	f1ba 0f00 	cmp.w	sl, #0
 801839e:	d131      	bne.n	8018404 <__gethex+0x38c>
 80183a0:	b127      	cbz	r7, 80183ac <__gethex+0x334>
 80183a2:	4639      	mov	r1, r7
 80183a4:	4620      	mov	r0, r4
 80183a6:	f000 fe27 	bl	8018ff8 <__any_on>
 80183aa:	4682      	mov	sl, r0
 80183ac:	117b      	asrs	r3, r7, #5
 80183ae:	2101      	movs	r1, #1
 80183b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80183b4:	f007 071f 	and.w	r7, r7, #31
 80183b8:	fa01 f707 	lsl.w	r7, r1, r7
 80183bc:	421f      	tst	r7, r3
 80183be:	4629      	mov	r1, r5
 80183c0:	4620      	mov	r0, r4
 80183c2:	bf18      	it	ne
 80183c4:	f04a 0a02 	orrne.w	sl, sl, #2
 80183c8:	1b76      	subs	r6, r6, r5
 80183ca:	f7ff fded 	bl	8017fa8 <rshift>
 80183ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80183d2:	2702      	movs	r7, #2
 80183d4:	f1ba 0f00 	cmp.w	sl, #0
 80183d8:	d048      	beq.n	801846c <__gethex+0x3f4>
 80183da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80183de:	2b02      	cmp	r3, #2
 80183e0:	d015      	beq.n	801840e <__gethex+0x396>
 80183e2:	2b03      	cmp	r3, #3
 80183e4:	d017      	beq.n	8018416 <__gethex+0x39e>
 80183e6:	2b01      	cmp	r3, #1
 80183e8:	d109      	bne.n	80183fe <__gethex+0x386>
 80183ea:	f01a 0f02 	tst.w	sl, #2
 80183ee:	d006      	beq.n	80183fe <__gethex+0x386>
 80183f0:	f8d9 0000 	ldr.w	r0, [r9]
 80183f4:	ea4a 0a00 	orr.w	sl, sl, r0
 80183f8:	f01a 0f01 	tst.w	sl, #1
 80183fc:	d10e      	bne.n	801841c <__gethex+0x3a4>
 80183fe:	f047 0710 	orr.w	r7, r7, #16
 8018402:	e033      	b.n	801846c <__gethex+0x3f4>
 8018404:	f04f 0a01 	mov.w	sl, #1
 8018408:	e7d0      	b.n	80183ac <__gethex+0x334>
 801840a:	2701      	movs	r7, #1
 801840c:	e7e2      	b.n	80183d4 <__gethex+0x35c>
 801840e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018410:	f1c3 0301 	rsb	r3, r3, #1
 8018414:	9315      	str	r3, [sp, #84]	; 0x54
 8018416:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018418:	2b00      	cmp	r3, #0
 801841a:	d0f0      	beq.n	80183fe <__gethex+0x386>
 801841c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018420:	f104 0314 	add.w	r3, r4, #20
 8018424:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018428:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801842c:	f04f 0c00 	mov.w	ip, #0
 8018430:	4618      	mov	r0, r3
 8018432:	f853 2b04 	ldr.w	r2, [r3], #4
 8018436:	f1b2 3fff 	cmp.w	r2, #4294967295
 801843a:	d01c      	beq.n	8018476 <__gethex+0x3fe>
 801843c:	3201      	adds	r2, #1
 801843e:	6002      	str	r2, [r0, #0]
 8018440:	2f02      	cmp	r7, #2
 8018442:	f104 0314 	add.w	r3, r4, #20
 8018446:	d13f      	bne.n	80184c8 <__gethex+0x450>
 8018448:	f8d8 2000 	ldr.w	r2, [r8]
 801844c:	3a01      	subs	r2, #1
 801844e:	42b2      	cmp	r2, r6
 8018450:	d10a      	bne.n	8018468 <__gethex+0x3f0>
 8018452:	1171      	asrs	r1, r6, #5
 8018454:	2201      	movs	r2, #1
 8018456:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801845a:	f006 061f 	and.w	r6, r6, #31
 801845e:	fa02 f606 	lsl.w	r6, r2, r6
 8018462:	421e      	tst	r6, r3
 8018464:	bf18      	it	ne
 8018466:	4617      	movne	r7, r2
 8018468:	f047 0720 	orr.w	r7, r7, #32
 801846c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801846e:	601c      	str	r4, [r3, #0]
 8018470:	9b04      	ldr	r3, [sp, #16]
 8018472:	601d      	str	r5, [r3, #0]
 8018474:	e695      	b.n	80181a2 <__gethex+0x12a>
 8018476:	4299      	cmp	r1, r3
 8018478:	f843 cc04 	str.w	ip, [r3, #-4]
 801847c:	d8d8      	bhi.n	8018430 <__gethex+0x3b8>
 801847e:	68a3      	ldr	r3, [r4, #8]
 8018480:	459b      	cmp	fp, r3
 8018482:	db19      	blt.n	80184b8 <__gethex+0x440>
 8018484:	6861      	ldr	r1, [r4, #4]
 8018486:	ee18 0a10 	vmov	r0, s16
 801848a:	3101      	adds	r1, #1
 801848c:	f000 f91a 	bl	80186c4 <_Balloc>
 8018490:	4681      	mov	r9, r0
 8018492:	b918      	cbnz	r0, 801849c <__gethex+0x424>
 8018494:	4b1a      	ldr	r3, [pc, #104]	; (8018500 <__gethex+0x488>)
 8018496:	4602      	mov	r2, r0
 8018498:	2184      	movs	r1, #132	; 0x84
 801849a:	e6a8      	b.n	80181ee <__gethex+0x176>
 801849c:	6922      	ldr	r2, [r4, #16]
 801849e:	3202      	adds	r2, #2
 80184a0:	f104 010c 	add.w	r1, r4, #12
 80184a4:	0092      	lsls	r2, r2, #2
 80184a6:	300c      	adds	r0, #12
 80184a8:	f7fe fd00 	bl	8016eac <memcpy>
 80184ac:	4621      	mov	r1, r4
 80184ae:	ee18 0a10 	vmov	r0, s16
 80184b2:	f000 f947 	bl	8018744 <_Bfree>
 80184b6:	464c      	mov	r4, r9
 80184b8:	6923      	ldr	r3, [r4, #16]
 80184ba:	1c5a      	adds	r2, r3, #1
 80184bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80184c0:	6122      	str	r2, [r4, #16]
 80184c2:	2201      	movs	r2, #1
 80184c4:	615a      	str	r2, [r3, #20]
 80184c6:	e7bb      	b.n	8018440 <__gethex+0x3c8>
 80184c8:	6922      	ldr	r2, [r4, #16]
 80184ca:	455a      	cmp	r2, fp
 80184cc:	dd0b      	ble.n	80184e6 <__gethex+0x46e>
 80184ce:	2101      	movs	r1, #1
 80184d0:	4620      	mov	r0, r4
 80184d2:	f7ff fd69 	bl	8017fa8 <rshift>
 80184d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80184da:	3501      	adds	r5, #1
 80184dc:	42ab      	cmp	r3, r5
 80184de:	f6ff aed0 	blt.w	8018282 <__gethex+0x20a>
 80184e2:	2701      	movs	r7, #1
 80184e4:	e7c0      	b.n	8018468 <__gethex+0x3f0>
 80184e6:	f016 061f 	ands.w	r6, r6, #31
 80184ea:	d0fa      	beq.n	80184e2 <__gethex+0x46a>
 80184ec:	449a      	add	sl, r3
 80184ee:	f1c6 0620 	rsb	r6, r6, #32
 80184f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80184f6:	f000 f9db 	bl	80188b0 <__hi0bits>
 80184fa:	42b0      	cmp	r0, r6
 80184fc:	dbe7      	blt.n	80184ce <__gethex+0x456>
 80184fe:	e7f0      	b.n	80184e2 <__gethex+0x46a>
 8018500:	0801a68e 	.word	0x0801a68e

08018504 <L_shift>:
 8018504:	f1c2 0208 	rsb	r2, r2, #8
 8018508:	0092      	lsls	r2, r2, #2
 801850a:	b570      	push	{r4, r5, r6, lr}
 801850c:	f1c2 0620 	rsb	r6, r2, #32
 8018510:	6843      	ldr	r3, [r0, #4]
 8018512:	6804      	ldr	r4, [r0, #0]
 8018514:	fa03 f506 	lsl.w	r5, r3, r6
 8018518:	432c      	orrs	r4, r5
 801851a:	40d3      	lsrs	r3, r2
 801851c:	6004      	str	r4, [r0, #0]
 801851e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018522:	4288      	cmp	r0, r1
 8018524:	d3f4      	bcc.n	8018510 <L_shift+0xc>
 8018526:	bd70      	pop	{r4, r5, r6, pc}

08018528 <__match>:
 8018528:	b530      	push	{r4, r5, lr}
 801852a:	6803      	ldr	r3, [r0, #0]
 801852c:	3301      	adds	r3, #1
 801852e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018532:	b914      	cbnz	r4, 801853a <__match+0x12>
 8018534:	6003      	str	r3, [r0, #0]
 8018536:	2001      	movs	r0, #1
 8018538:	bd30      	pop	{r4, r5, pc}
 801853a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801853e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018542:	2d19      	cmp	r5, #25
 8018544:	bf98      	it	ls
 8018546:	3220      	addls	r2, #32
 8018548:	42a2      	cmp	r2, r4
 801854a:	d0f0      	beq.n	801852e <__match+0x6>
 801854c:	2000      	movs	r0, #0
 801854e:	e7f3      	b.n	8018538 <__match+0x10>

08018550 <__hexnan>:
 8018550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018554:	680b      	ldr	r3, [r1, #0]
 8018556:	6801      	ldr	r1, [r0, #0]
 8018558:	115e      	asrs	r6, r3, #5
 801855a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801855e:	f013 031f 	ands.w	r3, r3, #31
 8018562:	b087      	sub	sp, #28
 8018564:	bf18      	it	ne
 8018566:	3604      	addne	r6, #4
 8018568:	2500      	movs	r5, #0
 801856a:	1f37      	subs	r7, r6, #4
 801856c:	4682      	mov	sl, r0
 801856e:	4690      	mov	r8, r2
 8018570:	9301      	str	r3, [sp, #4]
 8018572:	f846 5c04 	str.w	r5, [r6, #-4]
 8018576:	46b9      	mov	r9, r7
 8018578:	463c      	mov	r4, r7
 801857a:	9502      	str	r5, [sp, #8]
 801857c:	46ab      	mov	fp, r5
 801857e:	784a      	ldrb	r2, [r1, #1]
 8018580:	1c4b      	adds	r3, r1, #1
 8018582:	9303      	str	r3, [sp, #12]
 8018584:	b342      	cbz	r2, 80185d8 <__hexnan+0x88>
 8018586:	4610      	mov	r0, r2
 8018588:	9105      	str	r1, [sp, #20]
 801858a:	9204      	str	r2, [sp, #16]
 801858c:	f7ff fd5e 	bl	801804c <__hexdig_fun>
 8018590:	2800      	cmp	r0, #0
 8018592:	d14f      	bne.n	8018634 <__hexnan+0xe4>
 8018594:	9a04      	ldr	r2, [sp, #16]
 8018596:	9905      	ldr	r1, [sp, #20]
 8018598:	2a20      	cmp	r2, #32
 801859a:	d818      	bhi.n	80185ce <__hexnan+0x7e>
 801859c:	9b02      	ldr	r3, [sp, #8]
 801859e:	459b      	cmp	fp, r3
 80185a0:	dd13      	ble.n	80185ca <__hexnan+0x7a>
 80185a2:	454c      	cmp	r4, r9
 80185a4:	d206      	bcs.n	80185b4 <__hexnan+0x64>
 80185a6:	2d07      	cmp	r5, #7
 80185a8:	dc04      	bgt.n	80185b4 <__hexnan+0x64>
 80185aa:	462a      	mov	r2, r5
 80185ac:	4649      	mov	r1, r9
 80185ae:	4620      	mov	r0, r4
 80185b0:	f7ff ffa8 	bl	8018504 <L_shift>
 80185b4:	4544      	cmp	r4, r8
 80185b6:	d950      	bls.n	801865a <__hexnan+0x10a>
 80185b8:	2300      	movs	r3, #0
 80185ba:	f1a4 0904 	sub.w	r9, r4, #4
 80185be:	f844 3c04 	str.w	r3, [r4, #-4]
 80185c2:	f8cd b008 	str.w	fp, [sp, #8]
 80185c6:	464c      	mov	r4, r9
 80185c8:	461d      	mov	r5, r3
 80185ca:	9903      	ldr	r1, [sp, #12]
 80185cc:	e7d7      	b.n	801857e <__hexnan+0x2e>
 80185ce:	2a29      	cmp	r2, #41	; 0x29
 80185d0:	d156      	bne.n	8018680 <__hexnan+0x130>
 80185d2:	3102      	adds	r1, #2
 80185d4:	f8ca 1000 	str.w	r1, [sl]
 80185d8:	f1bb 0f00 	cmp.w	fp, #0
 80185dc:	d050      	beq.n	8018680 <__hexnan+0x130>
 80185de:	454c      	cmp	r4, r9
 80185e0:	d206      	bcs.n	80185f0 <__hexnan+0xa0>
 80185e2:	2d07      	cmp	r5, #7
 80185e4:	dc04      	bgt.n	80185f0 <__hexnan+0xa0>
 80185e6:	462a      	mov	r2, r5
 80185e8:	4649      	mov	r1, r9
 80185ea:	4620      	mov	r0, r4
 80185ec:	f7ff ff8a 	bl	8018504 <L_shift>
 80185f0:	4544      	cmp	r4, r8
 80185f2:	d934      	bls.n	801865e <__hexnan+0x10e>
 80185f4:	f1a8 0204 	sub.w	r2, r8, #4
 80185f8:	4623      	mov	r3, r4
 80185fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80185fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8018602:	429f      	cmp	r7, r3
 8018604:	d2f9      	bcs.n	80185fa <__hexnan+0xaa>
 8018606:	1b3b      	subs	r3, r7, r4
 8018608:	f023 0303 	bic.w	r3, r3, #3
 801860c:	3304      	adds	r3, #4
 801860e:	3401      	adds	r4, #1
 8018610:	3e03      	subs	r6, #3
 8018612:	42b4      	cmp	r4, r6
 8018614:	bf88      	it	hi
 8018616:	2304      	movhi	r3, #4
 8018618:	4443      	add	r3, r8
 801861a:	2200      	movs	r2, #0
 801861c:	f843 2b04 	str.w	r2, [r3], #4
 8018620:	429f      	cmp	r7, r3
 8018622:	d2fb      	bcs.n	801861c <__hexnan+0xcc>
 8018624:	683b      	ldr	r3, [r7, #0]
 8018626:	b91b      	cbnz	r3, 8018630 <__hexnan+0xe0>
 8018628:	4547      	cmp	r7, r8
 801862a:	d127      	bne.n	801867c <__hexnan+0x12c>
 801862c:	2301      	movs	r3, #1
 801862e:	603b      	str	r3, [r7, #0]
 8018630:	2005      	movs	r0, #5
 8018632:	e026      	b.n	8018682 <__hexnan+0x132>
 8018634:	3501      	adds	r5, #1
 8018636:	2d08      	cmp	r5, #8
 8018638:	f10b 0b01 	add.w	fp, fp, #1
 801863c:	dd06      	ble.n	801864c <__hexnan+0xfc>
 801863e:	4544      	cmp	r4, r8
 8018640:	d9c3      	bls.n	80185ca <__hexnan+0x7a>
 8018642:	2300      	movs	r3, #0
 8018644:	f844 3c04 	str.w	r3, [r4, #-4]
 8018648:	2501      	movs	r5, #1
 801864a:	3c04      	subs	r4, #4
 801864c:	6822      	ldr	r2, [r4, #0]
 801864e:	f000 000f 	and.w	r0, r0, #15
 8018652:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018656:	6022      	str	r2, [r4, #0]
 8018658:	e7b7      	b.n	80185ca <__hexnan+0x7a>
 801865a:	2508      	movs	r5, #8
 801865c:	e7b5      	b.n	80185ca <__hexnan+0x7a>
 801865e:	9b01      	ldr	r3, [sp, #4]
 8018660:	2b00      	cmp	r3, #0
 8018662:	d0df      	beq.n	8018624 <__hexnan+0xd4>
 8018664:	f04f 32ff 	mov.w	r2, #4294967295
 8018668:	f1c3 0320 	rsb	r3, r3, #32
 801866c:	fa22 f303 	lsr.w	r3, r2, r3
 8018670:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018674:	401a      	ands	r2, r3
 8018676:	f846 2c04 	str.w	r2, [r6, #-4]
 801867a:	e7d3      	b.n	8018624 <__hexnan+0xd4>
 801867c:	3f04      	subs	r7, #4
 801867e:	e7d1      	b.n	8018624 <__hexnan+0xd4>
 8018680:	2004      	movs	r0, #4
 8018682:	b007      	add	sp, #28
 8018684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018688 <__ascii_mbtowc>:
 8018688:	b082      	sub	sp, #8
 801868a:	b901      	cbnz	r1, 801868e <__ascii_mbtowc+0x6>
 801868c:	a901      	add	r1, sp, #4
 801868e:	b142      	cbz	r2, 80186a2 <__ascii_mbtowc+0x1a>
 8018690:	b14b      	cbz	r3, 80186a6 <__ascii_mbtowc+0x1e>
 8018692:	7813      	ldrb	r3, [r2, #0]
 8018694:	600b      	str	r3, [r1, #0]
 8018696:	7812      	ldrb	r2, [r2, #0]
 8018698:	1e10      	subs	r0, r2, #0
 801869a:	bf18      	it	ne
 801869c:	2001      	movne	r0, #1
 801869e:	b002      	add	sp, #8
 80186a0:	4770      	bx	lr
 80186a2:	4610      	mov	r0, r2
 80186a4:	e7fb      	b.n	801869e <__ascii_mbtowc+0x16>
 80186a6:	f06f 0001 	mvn.w	r0, #1
 80186aa:	e7f8      	b.n	801869e <__ascii_mbtowc+0x16>

080186ac <__malloc_lock>:
 80186ac:	4801      	ldr	r0, [pc, #4]	; (80186b4 <__malloc_lock+0x8>)
 80186ae:	f000 bd32 	b.w	8019116 <__retarget_lock_acquire_recursive>
 80186b2:	bf00      	nop
 80186b4:	200004e0 	.word	0x200004e0

080186b8 <__malloc_unlock>:
 80186b8:	4801      	ldr	r0, [pc, #4]	; (80186c0 <__malloc_unlock+0x8>)
 80186ba:	f000 bd2d 	b.w	8019118 <__retarget_lock_release_recursive>
 80186be:	bf00      	nop
 80186c0:	200004e0 	.word	0x200004e0

080186c4 <_Balloc>:
 80186c4:	b570      	push	{r4, r5, r6, lr}
 80186c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80186c8:	4604      	mov	r4, r0
 80186ca:	460d      	mov	r5, r1
 80186cc:	b976      	cbnz	r6, 80186ec <_Balloc+0x28>
 80186ce:	2010      	movs	r0, #16
 80186d0:	f7fe fbce 	bl	8016e70 <malloc>
 80186d4:	4602      	mov	r2, r0
 80186d6:	6260      	str	r0, [r4, #36]	; 0x24
 80186d8:	b920      	cbnz	r0, 80186e4 <_Balloc+0x20>
 80186da:	4b18      	ldr	r3, [pc, #96]	; (801873c <_Balloc+0x78>)
 80186dc:	4818      	ldr	r0, [pc, #96]	; (8018740 <_Balloc+0x7c>)
 80186de:	2166      	movs	r1, #102	; 0x66
 80186e0:	f000 fce8 	bl	80190b4 <__assert_func>
 80186e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80186e8:	6006      	str	r6, [r0, #0]
 80186ea:	60c6      	str	r6, [r0, #12]
 80186ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80186ee:	68f3      	ldr	r3, [r6, #12]
 80186f0:	b183      	cbz	r3, 8018714 <_Balloc+0x50>
 80186f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80186f4:	68db      	ldr	r3, [r3, #12]
 80186f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80186fa:	b9b8      	cbnz	r0, 801872c <_Balloc+0x68>
 80186fc:	2101      	movs	r1, #1
 80186fe:	fa01 f605 	lsl.w	r6, r1, r5
 8018702:	1d72      	adds	r2, r6, #5
 8018704:	0092      	lsls	r2, r2, #2
 8018706:	4620      	mov	r0, r4
 8018708:	f000 fc97 	bl	801903a <_calloc_r>
 801870c:	b160      	cbz	r0, 8018728 <_Balloc+0x64>
 801870e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018712:	e00e      	b.n	8018732 <_Balloc+0x6e>
 8018714:	2221      	movs	r2, #33	; 0x21
 8018716:	2104      	movs	r1, #4
 8018718:	4620      	mov	r0, r4
 801871a:	f000 fc8e 	bl	801903a <_calloc_r>
 801871e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018720:	60f0      	str	r0, [r6, #12]
 8018722:	68db      	ldr	r3, [r3, #12]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d1e4      	bne.n	80186f2 <_Balloc+0x2e>
 8018728:	2000      	movs	r0, #0
 801872a:	bd70      	pop	{r4, r5, r6, pc}
 801872c:	6802      	ldr	r2, [r0, #0]
 801872e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018732:	2300      	movs	r3, #0
 8018734:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018738:	e7f7      	b.n	801872a <_Balloc+0x66>
 801873a:	bf00      	nop
 801873c:	0801a71c 	.word	0x0801a71c
 8018740:	0801a733 	.word	0x0801a733

08018744 <_Bfree>:
 8018744:	b570      	push	{r4, r5, r6, lr}
 8018746:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018748:	4605      	mov	r5, r0
 801874a:	460c      	mov	r4, r1
 801874c:	b976      	cbnz	r6, 801876c <_Bfree+0x28>
 801874e:	2010      	movs	r0, #16
 8018750:	f7fe fb8e 	bl	8016e70 <malloc>
 8018754:	4602      	mov	r2, r0
 8018756:	6268      	str	r0, [r5, #36]	; 0x24
 8018758:	b920      	cbnz	r0, 8018764 <_Bfree+0x20>
 801875a:	4b09      	ldr	r3, [pc, #36]	; (8018780 <_Bfree+0x3c>)
 801875c:	4809      	ldr	r0, [pc, #36]	; (8018784 <_Bfree+0x40>)
 801875e:	218a      	movs	r1, #138	; 0x8a
 8018760:	f000 fca8 	bl	80190b4 <__assert_func>
 8018764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018768:	6006      	str	r6, [r0, #0]
 801876a:	60c6      	str	r6, [r0, #12]
 801876c:	b13c      	cbz	r4, 801877e <_Bfree+0x3a>
 801876e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018770:	6862      	ldr	r2, [r4, #4]
 8018772:	68db      	ldr	r3, [r3, #12]
 8018774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018778:	6021      	str	r1, [r4, #0]
 801877a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801877e:	bd70      	pop	{r4, r5, r6, pc}
 8018780:	0801a71c 	.word	0x0801a71c
 8018784:	0801a733 	.word	0x0801a733

08018788 <__multadd>:
 8018788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801878c:	690e      	ldr	r6, [r1, #16]
 801878e:	4607      	mov	r7, r0
 8018790:	4698      	mov	r8, r3
 8018792:	460c      	mov	r4, r1
 8018794:	f101 0014 	add.w	r0, r1, #20
 8018798:	2300      	movs	r3, #0
 801879a:	6805      	ldr	r5, [r0, #0]
 801879c:	b2a9      	uxth	r1, r5
 801879e:	fb02 8101 	mla	r1, r2, r1, r8
 80187a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80187a6:	0c2d      	lsrs	r5, r5, #16
 80187a8:	fb02 c505 	mla	r5, r2, r5, ip
 80187ac:	b289      	uxth	r1, r1
 80187ae:	3301      	adds	r3, #1
 80187b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80187b4:	429e      	cmp	r6, r3
 80187b6:	f840 1b04 	str.w	r1, [r0], #4
 80187ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80187be:	dcec      	bgt.n	801879a <__multadd+0x12>
 80187c0:	f1b8 0f00 	cmp.w	r8, #0
 80187c4:	d022      	beq.n	801880c <__multadd+0x84>
 80187c6:	68a3      	ldr	r3, [r4, #8]
 80187c8:	42b3      	cmp	r3, r6
 80187ca:	dc19      	bgt.n	8018800 <__multadd+0x78>
 80187cc:	6861      	ldr	r1, [r4, #4]
 80187ce:	4638      	mov	r0, r7
 80187d0:	3101      	adds	r1, #1
 80187d2:	f7ff ff77 	bl	80186c4 <_Balloc>
 80187d6:	4605      	mov	r5, r0
 80187d8:	b928      	cbnz	r0, 80187e6 <__multadd+0x5e>
 80187da:	4602      	mov	r2, r0
 80187dc:	4b0d      	ldr	r3, [pc, #52]	; (8018814 <__multadd+0x8c>)
 80187de:	480e      	ldr	r0, [pc, #56]	; (8018818 <__multadd+0x90>)
 80187e0:	21b5      	movs	r1, #181	; 0xb5
 80187e2:	f000 fc67 	bl	80190b4 <__assert_func>
 80187e6:	6922      	ldr	r2, [r4, #16]
 80187e8:	3202      	adds	r2, #2
 80187ea:	f104 010c 	add.w	r1, r4, #12
 80187ee:	0092      	lsls	r2, r2, #2
 80187f0:	300c      	adds	r0, #12
 80187f2:	f7fe fb5b 	bl	8016eac <memcpy>
 80187f6:	4621      	mov	r1, r4
 80187f8:	4638      	mov	r0, r7
 80187fa:	f7ff ffa3 	bl	8018744 <_Bfree>
 80187fe:	462c      	mov	r4, r5
 8018800:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018804:	3601      	adds	r6, #1
 8018806:	f8c3 8014 	str.w	r8, [r3, #20]
 801880a:	6126      	str	r6, [r4, #16]
 801880c:	4620      	mov	r0, r4
 801880e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018812:	bf00      	nop
 8018814:	0801a68e 	.word	0x0801a68e
 8018818:	0801a733 	.word	0x0801a733

0801881c <__s2b>:
 801881c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018820:	460c      	mov	r4, r1
 8018822:	4615      	mov	r5, r2
 8018824:	461f      	mov	r7, r3
 8018826:	2209      	movs	r2, #9
 8018828:	3308      	adds	r3, #8
 801882a:	4606      	mov	r6, r0
 801882c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018830:	2100      	movs	r1, #0
 8018832:	2201      	movs	r2, #1
 8018834:	429a      	cmp	r2, r3
 8018836:	db09      	blt.n	801884c <__s2b+0x30>
 8018838:	4630      	mov	r0, r6
 801883a:	f7ff ff43 	bl	80186c4 <_Balloc>
 801883e:	b940      	cbnz	r0, 8018852 <__s2b+0x36>
 8018840:	4602      	mov	r2, r0
 8018842:	4b19      	ldr	r3, [pc, #100]	; (80188a8 <__s2b+0x8c>)
 8018844:	4819      	ldr	r0, [pc, #100]	; (80188ac <__s2b+0x90>)
 8018846:	21ce      	movs	r1, #206	; 0xce
 8018848:	f000 fc34 	bl	80190b4 <__assert_func>
 801884c:	0052      	lsls	r2, r2, #1
 801884e:	3101      	adds	r1, #1
 8018850:	e7f0      	b.n	8018834 <__s2b+0x18>
 8018852:	9b08      	ldr	r3, [sp, #32]
 8018854:	6143      	str	r3, [r0, #20]
 8018856:	2d09      	cmp	r5, #9
 8018858:	f04f 0301 	mov.w	r3, #1
 801885c:	6103      	str	r3, [r0, #16]
 801885e:	dd16      	ble.n	801888e <__s2b+0x72>
 8018860:	f104 0909 	add.w	r9, r4, #9
 8018864:	46c8      	mov	r8, r9
 8018866:	442c      	add	r4, r5
 8018868:	f818 3b01 	ldrb.w	r3, [r8], #1
 801886c:	4601      	mov	r1, r0
 801886e:	3b30      	subs	r3, #48	; 0x30
 8018870:	220a      	movs	r2, #10
 8018872:	4630      	mov	r0, r6
 8018874:	f7ff ff88 	bl	8018788 <__multadd>
 8018878:	45a0      	cmp	r8, r4
 801887a:	d1f5      	bne.n	8018868 <__s2b+0x4c>
 801887c:	f1a5 0408 	sub.w	r4, r5, #8
 8018880:	444c      	add	r4, r9
 8018882:	1b2d      	subs	r5, r5, r4
 8018884:	1963      	adds	r3, r4, r5
 8018886:	42bb      	cmp	r3, r7
 8018888:	db04      	blt.n	8018894 <__s2b+0x78>
 801888a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801888e:	340a      	adds	r4, #10
 8018890:	2509      	movs	r5, #9
 8018892:	e7f6      	b.n	8018882 <__s2b+0x66>
 8018894:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018898:	4601      	mov	r1, r0
 801889a:	3b30      	subs	r3, #48	; 0x30
 801889c:	220a      	movs	r2, #10
 801889e:	4630      	mov	r0, r6
 80188a0:	f7ff ff72 	bl	8018788 <__multadd>
 80188a4:	e7ee      	b.n	8018884 <__s2b+0x68>
 80188a6:	bf00      	nop
 80188a8:	0801a68e 	.word	0x0801a68e
 80188ac:	0801a733 	.word	0x0801a733

080188b0 <__hi0bits>:
 80188b0:	0c03      	lsrs	r3, r0, #16
 80188b2:	041b      	lsls	r3, r3, #16
 80188b4:	b9d3      	cbnz	r3, 80188ec <__hi0bits+0x3c>
 80188b6:	0400      	lsls	r0, r0, #16
 80188b8:	2310      	movs	r3, #16
 80188ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80188be:	bf04      	itt	eq
 80188c0:	0200      	lsleq	r0, r0, #8
 80188c2:	3308      	addeq	r3, #8
 80188c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80188c8:	bf04      	itt	eq
 80188ca:	0100      	lsleq	r0, r0, #4
 80188cc:	3304      	addeq	r3, #4
 80188ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80188d2:	bf04      	itt	eq
 80188d4:	0080      	lsleq	r0, r0, #2
 80188d6:	3302      	addeq	r3, #2
 80188d8:	2800      	cmp	r0, #0
 80188da:	db05      	blt.n	80188e8 <__hi0bits+0x38>
 80188dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80188e0:	f103 0301 	add.w	r3, r3, #1
 80188e4:	bf08      	it	eq
 80188e6:	2320      	moveq	r3, #32
 80188e8:	4618      	mov	r0, r3
 80188ea:	4770      	bx	lr
 80188ec:	2300      	movs	r3, #0
 80188ee:	e7e4      	b.n	80188ba <__hi0bits+0xa>

080188f0 <__lo0bits>:
 80188f0:	6803      	ldr	r3, [r0, #0]
 80188f2:	f013 0207 	ands.w	r2, r3, #7
 80188f6:	4601      	mov	r1, r0
 80188f8:	d00b      	beq.n	8018912 <__lo0bits+0x22>
 80188fa:	07da      	lsls	r2, r3, #31
 80188fc:	d424      	bmi.n	8018948 <__lo0bits+0x58>
 80188fe:	0798      	lsls	r0, r3, #30
 8018900:	bf49      	itett	mi
 8018902:	085b      	lsrmi	r3, r3, #1
 8018904:	089b      	lsrpl	r3, r3, #2
 8018906:	2001      	movmi	r0, #1
 8018908:	600b      	strmi	r3, [r1, #0]
 801890a:	bf5c      	itt	pl
 801890c:	600b      	strpl	r3, [r1, #0]
 801890e:	2002      	movpl	r0, #2
 8018910:	4770      	bx	lr
 8018912:	b298      	uxth	r0, r3
 8018914:	b9b0      	cbnz	r0, 8018944 <__lo0bits+0x54>
 8018916:	0c1b      	lsrs	r3, r3, #16
 8018918:	2010      	movs	r0, #16
 801891a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801891e:	bf04      	itt	eq
 8018920:	0a1b      	lsreq	r3, r3, #8
 8018922:	3008      	addeq	r0, #8
 8018924:	071a      	lsls	r2, r3, #28
 8018926:	bf04      	itt	eq
 8018928:	091b      	lsreq	r3, r3, #4
 801892a:	3004      	addeq	r0, #4
 801892c:	079a      	lsls	r2, r3, #30
 801892e:	bf04      	itt	eq
 8018930:	089b      	lsreq	r3, r3, #2
 8018932:	3002      	addeq	r0, #2
 8018934:	07da      	lsls	r2, r3, #31
 8018936:	d403      	bmi.n	8018940 <__lo0bits+0x50>
 8018938:	085b      	lsrs	r3, r3, #1
 801893a:	f100 0001 	add.w	r0, r0, #1
 801893e:	d005      	beq.n	801894c <__lo0bits+0x5c>
 8018940:	600b      	str	r3, [r1, #0]
 8018942:	4770      	bx	lr
 8018944:	4610      	mov	r0, r2
 8018946:	e7e8      	b.n	801891a <__lo0bits+0x2a>
 8018948:	2000      	movs	r0, #0
 801894a:	4770      	bx	lr
 801894c:	2020      	movs	r0, #32
 801894e:	4770      	bx	lr

08018950 <__i2b>:
 8018950:	b510      	push	{r4, lr}
 8018952:	460c      	mov	r4, r1
 8018954:	2101      	movs	r1, #1
 8018956:	f7ff feb5 	bl	80186c4 <_Balloc>
 801895a:	4602      	mov	r2, r0
 801895c:	b928      	cbnz	r0, 801896a <__i2b+0x1a>
 801895e:	4b05      	ldr	r3, [pc, #20]	; (8018974 <__i2b+0x24>)
 8018960:	4805      	ldr	r0, [pc, #20]	; (8018978 <__i2b+0x28>)
 8018962:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018966:	f000 fba5 	bl	80190b4 <__assert_func>
 801896a:	2301      	movs	r3, #1
 801896c:	6144      	str	r4, [r0, #20]
 801896e:	6103      	str	r3, [r0, #16]
 8018970:	bd10      	pop	{r4, pc}
 8018972:	bf00      	nop
 8018974:	0801a68e 	.word	0x0801a68e
 8018978:	0801a733 	.word	0x0801a733

0801897c <__multiply>:
 801897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018980:	4614      	mov	r4, r2
 8018982:	690a      	ldr	r2, [r1, #16]
 8018984:	6923      	ldr	r3, [r4, #16]
 8018986:	429a      	cmp	r2, r3
 8018988:	bfb8      	it	lt
 801898a:	460b      	movlt	r3, r1
 801898c:	460d      	mov	r5, r1
 801898e:	bfbc      	itt	lt
 8018990:	4625      	movlt	r5, r4
 8018992:	461c      	movlt	r4, r3
 8018994:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018998:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801899c:	68ab      	ldr	r3, [r5, #8]
 801899e:	6869      	ldr	r1, [r5, #4]
 80189a0:	eb0a 0709 	add.w	r7, sl, r9
 80189a4:	42bb      	cmp	r3, r7
 80189a6:	b085      	sub	sp, #20
 80189a8:	bfb8      	it	lt
 80189aa:	3101      	addlt	r1, #1
 80189ac:	f7ff fe8a 	bl	80186c4 <_Balloc>
 80189b0:	b930      	cbnz	r0, 80189c0 <__multiply+0x44>
 80189b2:	4602      	mov	r2, r0
 80189b4:	4b42      	ldr	r3, [pc, #264]	; (8018ac0 <__multiply+0x144>)
 80189b6:	4843      	ldr	r0, [pc, #268]	; (8018ac4 <__multiply+0x148>)
 80189b8:	f240 115d 	movw	r1, #349	; 0x15d
 80189bc:	f000 fb7a 	bl	80190b4 <__assert_func>
 80189c0:	f100 0614 	add.w	r6, r0, #20
 80189c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80189c8:	4633      	mov	r3, r6
 80189ca:	2200      	movs	r2, #0
 80189cc:	4543      	cmp	r3, r8
 80189ce:	d31e      	bcc.n	8018a0e <__multiply+0x92>
 80189d0:	f105 0c14 	add.w	ip, r5, #20
 80189d4:	f104 0314 	add.w	r3, r4, #20
 80189d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80189dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80189e0:	9202      	str	r2, [sp, #8]
 80189e2:	ebac 0205 	sub.w	r2, ip, r5
 80189e6:	3a15      	subs	r2, #21
 80189e8:	f022 0203 	bic.w	r2, r2, #3
 80189ec:	3204      	adds	r2, #4
 80189ee:	f105 0115 	add.w	r1, r5, #21
 80189f2:	458c      	cmp	ip, r1
 80189f4:	bf38      	it	cc
 80189f6:	2204      	movcc	r2, #4
 80189f8:	9201      	str	r2, [sp, #4]
 80189fa:	9a02      	ldr	r2, [sp, #8]
 80189fc:	9303      	str	r3, [sp, #12]
 80189fe:	429a      	cmp	r2, r3
 8018a00:	d808      	bhi.n	8018a14 <__multiply+0x98>
 8018a02:	2f00      	cmp	r7, #0
 8018a04:	dc55      	bgt.n	8018ab2 <__multiply+0x136>
 8018a06:	6107      	str	r7, [r0, #16]
 8018a08:	b005      	add	sp, #20
 8018a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a0e:	f843 2b04 	str.w	r2, [r3], #4
 8018a12:	e7db      	b.n	80189cc <__multiply+0x50>
 8018a14:	f8b3 a000 	ldrh.w	sl, [r3]
 8018a18:	f1ba 0f00 	cmp.w	sl, #0
 8018a1c:	d020      	beq.n	8018a60 <__multiply+0xe4>
 8018a1e:	f105 0e14 	add.w	lr, r5, #20
 8018a22:	46b1      	mov	r9, r6
 8018a24:	2200      	movs	r2, #0
 8018a26:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018a2a:	f8d9 b000 	ldr.w	fp, [r9]
 8018a2e:	b2a1      	uxth	r1, r4
 8018a30:	fa1f fb8b 	uxth.w	fp, fp
 8018a34:	fb0a b101 	mla	r1, sl, r1, fp
 8018a38:	4411      	add	r1, r2
 8018a3a:	f8d9 2000 	ldr.w	r2, [r9]
 8018a3e:	0c24      	lsrs	r4, r4, #16
 8018a40:	0c12      	lsrs	r2, r2, #16
 8018a42:	fb0a 2404 	mla	r4, sl, r4, r2
 8018a46:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018a4a:	b289      	uxth	r1, r1
 8018a4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018a50:	45f4      	cmp	ip, lr
 8018a52:	f849 1b04 	str.w	r1, [r9], #4
 8018a56:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018a5a:	d8e4      	bhi.n	8018a26 <__multiply+0xaa>
 8018a5c:	9901      	ldr	r1, [sp, #4]
 8018a5e:	5072      	str	r2, [r6, r1]
 8018a60:	9a03      	ldr	r2, [sp, #12]
 8018a62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018a66:	3304      	adds	r3, #4
 8018a68:	f1b9 0f00 	cmp.w	r9, #0
 8018a6c:	d01f      	beq.n	8018aae <__multiply+0x132>
 8018a6e:	6834      	ldr	r4, [r6, #0]
 8018a70:	f105 0114 	add.w	r1, r5, #20
 8018a74:	46b6      	mov	lr, r6
 8018a76:	f04f 0a00 	mov.w	sl, #0
 8018a7a:	880a      	ldrh	r2, [r1, #0]
 8018a7c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018a80:	fb09 b202 	mla	r2, r9, r2, fp
 8018a84:	4492      	add	sl, r2
 8018a86:	b2a4      	uxth	r4, r4
 8018a88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018a8c:	f84e 4b04 	str.w	r4, [lr], #4
 8018a90:	f851 4b04 	ldr.w	r4, [r1], #4
 8018a94:	f8be 2000 	ldrh.w	r2, [lr]
 8018a98:	0c24      	lsrs	r4, r4, #16
 8018a9a:	fb09 2404 	mla	r4, r9, r4, r2
 8018a9e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8018aa2:	458c      	cmp	ip, r1
 8018aa4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018aa8:	d8e7      	bhi.n	8018a7a <__multiply+0xfe>
 8018aaa:	9a01      	ldr	r2, [sp, #4]
 8018aac:	50b4      	str	r4, [r6, r2]
 8018aae:	3604      	adds	r6, #4
 8018ab0:	e7a3      	b.n	80189fa <__multiply+0x7e>
 8018ab2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d1a5      	bne.n	8018a06 <__multiply+0x8a>
 8018aba:	3f01      	subs	r7, #1
 8018abc:	e7a1      	b.n	8018a02 <__multiply+0x86>
 8018abe:	bf00      	nop
 8018ac0:	0801a68e 	.word	0x0801a68e
 8018ac4:	0801a733 	.word	0x0801a733

08018ac8 <__pow5mult>:
 8018ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018acc:	4615      	mov	r5, r2
 8018ace:	f012 0203 	ands.w	r2, r2, #3
 8018ad2:	4606      	mov	r6, r0
 8018ad4:	460f      	mov	r7, r1
 8018ad6:	d007      	beq.n	8018ae8 <__pow5mult+0x20>
 8018ad8:	4c25      	ldr	r4, [pc, #148]	; (8018b70 <__pow5mult+0xa8>)
 8018ada:	3a01      	subs	r2, #1
 8018adc:	2300      	movs	r3, #0
 8018ade:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018ae2:	f7ff fe51 	bl	8018788 <__multadd>
 8018ae6:	4607      	mov	r7, r0
 8018ae8:	10ad      	asrs	r5, r5, #2
 8018aea:	d03d      	beq.n	8018b68 <__pow5mult+0xa0>
 8018aec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018aee:	b97c      	cbnz	r4, 8018b10 <__pow5mult+0x48>
 8018af0:	2010      	movs	r0, #16
 8018af2:	f7fe f9bd 	bl	8016e70 <malloc>
 8018af6:	4602      	mov	r2, r0
 8018af8:	6270      	str	r0, [r6, #36]	; 0x24
 8018afa:	b928      	cbnz	r0, 8018b08 <__pow5mult+0x40>
 8018afc:	4b1d      	ldr	r3, [pc, #116]	; (8018b74 <__pow5mult+0xac>)
 8018afe:	481e      	ldr	r0, [pc, #120]	; (8018b78 <__pow5mult+0xb0>)
 8018b00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018b04:	f000 fad6 	bl	80190b4 <__assert_func>
 8018b08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018b0c:	6004      	str	r4, [r0, #0]
 8018b0e:	60c4      	str	r4, [r0, #12]
 8018b10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018b14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018b18:	b94c      	cbnz	r4, 8018b2e <__pow5mult+0x66>
 8018b1a:	f240 2171 	movw	r1, #625	; 0x271
 8018b1e:	4630      	mov	r0, r6
 8018b20:	f7ff ff16 	bl	8018950 <__i2b>
 8018b24:	2300      	movs	r3, #0
 8018b26:	f8c8 0008 	str.w	r0, [r8, #8]
 8018b2a:	4604      	mov	r4, r0
 8018b2c:	6003      	str	r3, [r0, #0]
 8018b2e:	f04f 0900 	mov.w	r9, #0
 8018b32:	07eb      	lsls	r3, r5, #31
 8018b34:	d50a      	bpl.n	8018b4c <__pow5mult+0x84>
 8018b36:	4639      	mov	r1, r7
 8018b38:	4622      	mov	r2, r4
 8018b3a:	4630      	mov	r0, r6
 8018b3c:	f7ff ff1e 	bl	801897c <__multiply>
 8018b40:	4639      	mov	r1, r7
 8018b42:	4680      	mov	r8, r0
 8018b44:	4630      	mov	r0, r6
 8018b46:	f7ff fdfd 	bl	8018744 <_Bfree>
 8018b4a:	4647      	mov	r7, r8
 8018b4c:	106d      	asrs	r5, r5, #1
 8018b4e:	d00b      	beq.n	8018b68 <__pow5mult+0xa0>
 8018b50:	6820      	ldr	r0, [r4, #0]
 8018b52:	b938      	cbnz	r0, 8018b64 <__pow5mult+0x9c>
 8018b54:	4622      	mov	r2, r4
 8018b56:	4621      	mov	r1, r4
 8018b58:	4630      	mov	r0, r6
 8018b5a:	f7ff ff0f 	bl	801897c <__multiply>
 8018b5e:	6020      	str	r0, [r4, #0]
 8018b60:	f8c0 9000 	str.w	r9, [r0]
 8018b64:	4604      	mov	r4, r0
 8018b66:	e7e4      	b.n	8018b32 <__pow5mult+0x6a>
 8018b68:	4638      	mov	r0, r7
 8018b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b6e:	bf00      	nop
 8018b70:	0801a888 	.word	0x0801a888
 8018b74:	0801a71c 	.word	0x0801a71c
 8018b78:	0801a733 	.word	0x0801a733

08018b7c <__lshift>:
 8018b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b80:	460c      	mov	r4, r1
 8018b82:	6849      	ldr	r1, [r1, #4]
 8018b84:	6923      	ldr	r3, [r4, #16]
 8018b86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018b8a:	68a3      	ldr	r3, [r4, #8]
 8018b8c:	4607      	mov	r7, r0
 8018b8e:	4691      	mov	r9, r2
 8018b90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018b94:	f108 0601 	add.w	r6, r8, #1
 8018b98:	42b3      	cmp	r3, r6
 8018b9a:	db0b      	blt.n	8018bb4 <__lshift+0x38>
 8018b9c:	4638      	mov	r0, r7
 8018b9e:	f7ff fd91 	bl	80186c4 <_Balloc>
 8018ba2:	4605      	mov	r5, r0
 8018ba4:	b948      	cbnz	r0, 8018bba <__lshift+0x3e>
 8018ba6:	4602      	mov	r2, r0
 8018ba8:	4b28      	ldr	r3, [pc, #160]	; (8018c4c <__lshift+0xd0>)
 8018baa:	4829      	ldr	r0, [pc, #164]	; (8018c50 <__lshift+0xd4>)
 8018bac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018bb0:	f000 fa80 	bl	80190b4 <__assert_func>
 8018bb4:	3101      	adds	r1, #1
 8018bb6:	005b      	lsls	r3, r3, #1
 8018bb8:	e7ee      	b.n	8018b98 <__lshift+0x1c>
 8018bba:	2300      	movs	r3, #0
 8018bbc:	f100 0114 	add.w	r1, r0, #20
 8018bc0:	f100 0210 	add.w	r2, r0, #16
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	4553      	cmp	r3, sl
 8018bc8:	db33      	blt.n	8018c32 <__lshift+0xb6>
 8018bca:	6920      	ldr	r0, [r4, #16]
 8018bcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018bd0:	f104 0314 	add.w	r3, r4, #20
 8018bd4:	f019 091f 	ands.w	r9, r9, #31
 8018bd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018bdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018be0:	d02b      	beq.n	8018c3a <__lshift+0xbe>
 8018be2:	f1c9 0e20 	rsb	lr, r9, #32
 8018be6:	468a      	mov	sl, r1
 8018be8:	2200      	movs	r2, #0
 8018bea:	6818      	ldr	r0, [r3, #0]
 8018bec:	fa00 f009 	lsl.w	r0, r0, r9
 8018bf0:	4302      	orrs	r2, r0
 8018bf2:	f84a 2b04 	str.w	r2, [sl], #4
 8018bf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018bfa:	459c      	cmp	ip, r3
 8018bfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8018c00:	d8f3      	bhi.n	8018bea <__lshift+0x6e>
 8018c02:	ebac 0304 	sub.w	r3, ip, r4
 8018c06:	3b15      	subs	r3, #21
 8018c08:	f023 0303 	bic.w	r3, r3, #3
 8018c0c:	3304      	adds	r3, #4
 8018c0e:	f104 0015 	add.w	r0, r4, #21
 8018c12:	4584      	cmp	ip, r0
 8018c14:	bf38      	it	cc
 8018c16:	2304      	movcc	r3, #4
 8018c18:	50ca      	str	r2, [r1, r3]
 8018c1a:	b10a      	cbz	r2, 8018c20 <__lshift+0xa4>
 8018c1c:	f108 0602 	add.w	r6, r8, #2
 8018c20:	3e01      	subs	r6, #1
 8018c22:	4638      	mov	r0, r7
 8018c24:	612e      	str	r6, [r5, #16]
 8018c26:	4621      	mov	r1, r4
 8018c28:	f7ff fd8c 	bl	8018744 <_Bfree>
 8018c2c:	4628      	mov	r0, r5
 8018c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c32:	f842 0f04 	str.w	r0, [r2, #4]!
 8018c36:	3301      	adds	r3, #1
 8018c38:	e7c5      	b.n	8018bc6 <__lshift+0x4a>
 8018c3a:	3904      	subs	r1, #4
 8018c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c40:	f841 2f04 	str.w	r2, [r1, #4]!
 8018c44:	459c      	cmp	ip, r3
 8018c46:	d8f9      	bhi.n	8018c3c <__lshift+0xc0>
 8018c48:	e7ea      	b.n	8018c20 <__lshift+0xa4>
 8018c4a:	bf00      	nop
 8018c4c:	0801a68e 	.word	0x0801a68e
 8018c50:	0801a733 	.word	0x0801a733

08018c54 <__mcmp>:
 8018c54:	b530      	push	{r4, r5, lr}
 8018c56:	6902      	ldr	r2, [r0, #16]
 8018c58:	690c      	ldr	r4, [r1, #16]
 8018c5a:	1b12      	subs	r2, r2, r4
 8018c5c:	d10e      	bne.n	8018c7c <__mcmp+0x28>
 8018c5e:	f100 0314 	add.w	r3, r0, #20
 8018c62:	3114      	adds	r1, #20
 8018c64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018c68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018c6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018c70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018c74:	42a5      	cmp	r5, r4
 8018c76:	d003      	beq.n	8018c80 <__mcmp+0x2c>
 8018c78:	d305      	bcc.n	8018c86 <__mcmp+0x32>
 8018c7a:	2201      	movs	r2, #1
 8018c7c:	4610      	mov	r0, r2
 8018c7e:	bd30      	pop	{r4, r5, pc}
 8018c80:	4283      	cmp	r3, r0
 8018c82:	d3f3      	bcc.n	8018c6c <__mcmp+0x18>
 8018c84:	e7fa      	b.n	8018c7c <__mcmp+0x28>
 8018c86:	f04f 32ff 	mov.w	r2, #4294967295
 8018c8a:	e7f7      	b.n	8018c7c <__mcmp+0x28>

08018c8c <__mdiff>:
 8018c8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c90:	460c      	mov	r4, r1
 8018c92:	4606      	mov	r6, r0
 8018c94:	4611      	mov	r1, r2
 8018c96:	4620      	mov	r0, r4
 8018c98:	4617      	mov	r7, r2
 8018c9a:	f7ff ffdb 	bl	8018c54 <__mcmp>
 8018c9e:	1e05      	subs	r5, r0, #0
 8018ca0:	d110      	bne.n	8018cc4 <__mdiff+0x38>
 8018ca2:	4629      	mov	r1, r5
 8018ca4:	4630      	mov	r0, r6
 8018ca6:	f7ff fd0d 	bl	80186c4 <_Balloc>
 8018caa:	b930      	cbnz	r0, 8018cba <__mdiff+0x2e>
 8018cac:	4b39      	ldr	r3, [pc, #228]	; (8018d94 <__mdiff+0x108>)
 8018cae:	4602      	mov	r2, r0
 8018cb0:	f240 2132 	movw	r1, #562	; 0x232
 8018cb4:	4838      	ldr	r0, [pc, #224]	; (8018d98 <__mdiff+0x10c>)
 8018cb6:	f000 f9fd 	bl	80190b4 <__assert_func>
 8018cba:	2301      	movs	r3, #1
 8018cbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018cc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cc4:	bfa4      	itt	ge
 8018cc6:	463b      	movge	r3, r7
 8018cc8:	4627      	movge	r7, r4
 8018cca:	4630      	mov	r0, r6
 8018ccc:	6879      	ldr	r1, [r7, #4]
 8018cce:	bfa6      	itte	ge
 8018cd0:	461c      	movge	r4, r3
 8018cd2:	2500      	movge	r5, #0
 8018cd4:	2501      	movlt	r5, #1
 8018cd6:	f7ff fcf5 	bl	80186c4 <_Balloc>
 8018cda:	b920      	cbnz	r0, 8018ce6 <__mdiff+0x5a>
 8018cdc:	4b2d      	ldr	r3, [pc, #180]	; (8018d94 <__mdiff+0x108>)
 8018cde:	4602      	mov	r2, r0
 8018ce0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018ce4:	e7e6      	b.n	8018cb4 <__mdiff+0x28>
 8018ce6:	693e      	ldr	r6, [r7, #16]
 8018ce8:	60c5      	str	r5, [r0, #12]
 8018cea:	6925      	ldr	r5, [r4, #16]
 8018cec:	f107 0114 	add.w	r1, r7, #20
 8018cf0:	f104 0914 	add.w	r9, r4, #20
 8018cf4:	f100 0e14 	add.w	lr, r0, #20
 8018cf8:	f107 0210 	add.w	r2, r7, #16
 8018cfc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018d00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8018d04:	46f2      	mov	sl, lr
 8018d06:	2700      	movs	r7, #0
 8018d08:	f859 3b04 	ldr.w	r3, [r9], #4
 8018d0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018d10:	fa1f f883 	uxth.w	r8, r3
 8018d14:	fa17 f78b 	uxtah	r7, r7, fp
 8018d18:	0c1b      	lsrs	r3, r3, #16
 8018d1a:	eba7 0808 	sub.w	r8, r7, r8
 8018d1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018d22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018d26:	fa1f f888 	uxth.w	r8, r8
 8018d2a:	141f      	asrs	r7, r3, #16
 8018d2c:	454d      	cmp	r5, r9
 8018d2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018d32:	f84a 3b04 	str.w	r3, [sl], #4
 8018d36:	d8e7      	bhi.n	8018d08 <__mdiff+0x7c>
 8018d38:	1b2b      	subs	r3, r5, r4
 8018d3a:	3b15      	subs	r3, #21
 8018d3c:	f023 0303 	bic.w	r3, r3, #3
 8018d40:	3304      	adds	r3, #4
 8018d42:	3415      	adds	r4, #21
 8018d44:	42a5      	cmp	r5, r4
 8018d46:	bf38      	it	cc
 8018d48:	2304      	movcc	r3, #4
 8018d4a:	4419      	add	r1, r3
 8018d4c:	4473      	add	r3, lr
 8018d4e:	469e      	mov	lr, r3
 8018d50:	460d      	mov	r5, r1
 8018d52:	4565      	cmp	r5, ip
 8018d54:	d30e      	bcc.n	8018d74 <__mdiff+0xe8>
 8018d56:	f10c 0203 	add.w	r2, ip, #3
 8018d5a:	1a52      	subs	r2, r2, r1
 8018d5c:	f022 0203 	bic.w	r2, r2, #3
 8018d60:	3903      	subs	r1, #3
 8018d62:	458c      	cmp	ip, r1
 8018d64:	bf38      	it	cc
 8018d66:	2200      	movcc	r2, #0
 8018d68:	441a      	add	r2, r3
 8018d6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018d6e:	b17b      	cbz	r3, 8018d90 <__mdiff+0x104>
 8018d70:	6106      	str	r6, [r0, #16]
 8018d72:	e7a5      	b.n	8018cc0 <__mdiff+0x34>
 8018d74:	f855 8b04 	ldr.w	r8, [r5], #4
 8018d78:	fa17 f488 	uxtah	r4, r7, r8
 8018d7c:	1422      	asrs	r2, r4, #16
 8018d7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8018d82:	b2a4      	uxth	r4, r4
 8018d84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8018d88:	f84e 4b04 	str.w	r4, [lr], #4
 8018d8c:	1417      	asrs	r7, r2, #16
 8018d8e:	e7e0      	b.n	8018d52 <__mdiff+0xc6>
 8018d90:	3e01      	subs	r6, #1
 8018d92:	e7ea      	b.n	8018d6a <__mdiff+0xde>
 8018d94:	0801a68e 	.word	0x0801a68e
 8018d98:	0801a733 	.word	0x0801a733

08018d9c <__ulp>:
 8018d9c:	b082      	sub	sp, #8
 8018d9e:	ed8d 0b00 	vstr	d0, [sp]
 8018da2:	9b01      	ldr	r3, [sp, #4]
 8018da4:	4912      	ldr	r1, [pc, #72]	; (8018df0 <__ulp+0x54>)
 8018da6:	4019      	ands	r1, r3
 8018da8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018dac:	2900      	cmp	r1, #0
 8018dae:	dd05      	ble.n	8018dbc <__ulp+0x20>
 8018db0:	2200      	movs	r2, #0
 8018db2:	460b      	mov	r3, r1
 8018db4:	ec43 2b10 	vmov	d0, r2, r3
 8018db8:	b002      	add	sp, #8
 8018dba:	4770      	bx	lr
 8018dbc:	4249      	negs	r1, r1
 8018dbe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018dc2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018dc6:	f04f 0200 	mov.w	r2, #0
 8018dca:	f04f 0300 	mov.w	r3, #0
 8018dce:	da04      	bge.n	8018dda <__ulp+0x3e>
 8018dd0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018dd4:	fa41 f300 	asr.w	r3, r1, r0
 8018dd8:	e7ec      	b.n	8018db4 <__ulp+0x18>
 8018dda:	f1a0 0114 	sub.w	r1, r0, #20
 8018dde:	291e      	cmp	r1, #30
 8018de0:	bfda      	itte	le
 8018de2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018de6:	fa20 f101 	lsrle.w	r1, r0, r1
 8018dea:	2101      	movgt	r1, #1
 8018dec:	460a      	mov	r2, r1
 8018dee:	e7e1      	b.n	8018db4 <__ulp+0x18>
 8018df0:	7ff00000 	.word	0x7ff00000

08018df4 <__b2d>:
 8018df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018df6:	6905      	ldr	r5, [r0, #16]
 8018df8:	f100 0714 	add.w	r7, r0, #20
 8018dfc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018e00:	1f2e      	subs	r6, r5, #4
 8018e02:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018e06:	4620      	mov	r0, r4
 8018e08:	f7ff fd52 	bl	80188b0 <__hi0bits>
 8018e0c:	f1c0 0320 	rsb	r3, r0, #32
 8018e10:	280a      	cmp	r0, #10
 8018e12:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018e90 <__b2d+0x9c>
 8018e16:	600b      	str	r3, [r1, #0]
 8018e18:	dc14      	bgt.n	8018e44 <__b2d+0x50>
 8018e1a:	f1c0 0e0b 	rsb	lr, r0, #11
 8018e1e:	fa24 f10e 	lsr.w	r1, r4, lr
 8018e22:	42b7      	cmp	r7, r6
 8018e24:	ea41 030c 	orr.w	r3, r1, ip
 8018e28:	bf34      	ite	cc
 8018e2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018e2e:	2100      	movcs	r1, #0
 8018e30:	3015      	adds	r0, #21
 8018e32:	fa04 f000 	lsl.w	r0, r4, r0
 8018e36:	fa21 f10e 	lsr.w	r1, r1, lr
 8018e3a:	ea40 0201 	orr.w	r2, r0, r1
 8018e3e:	ec43 2b10 	vmov	d0, r2, r3
 8018e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e44:	42b7      	cmp	r7, r6
 8018e46:	bf3a      	itte	cc
 8018e48:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018e4c:	f1a5 0608 	subcc.w	r6, r5, #8
 8018e50:	2100      	movcs	r1, #0
 8018e52:	380b      	subs	r0, #11
 8018e54:	d017      	beq.n	8018e86 <__b2d+0x92>
 8018e56:	f1c0 0c20 	rsb	ip, r0, #32
 8018e5a:	fa04 f500 	lsl.w	r5, r4, r0
 8018e5e:	42be      	cmp	r6, r7
 8018e60:	fa21 f40c 	lsr.w	r4, r1, ip
 8018e64:	ea45 0504 	orr.w	r5, r5, r4
 8018e68:	bf8c      	ite	hi
 8018e6a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018e6e:	2400      	movls	r4, #0
 8018e70:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018e74:	fa01 f000 	lsl.w	r0, r1, r0
 8018e78:	fa24 f40c 	lsr.w	r4, r4, ip
 8018e7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018e80:	ea40 0204 	orr.w	r2, r0, r4
 8018e84:	e7db      	b.n	8018e3e <__b2d+0x4a>
 8018e86:	ea44 030c 	orr.w	r3, r4, ip
 8018e8a:	460a      	mov	r2, r1
 8018e8c:	e7d7      	b.n	8018e3e <__b2d+0x4a>
 8018e8e:	bf00      	nop
 8018e90:	3ff00000 	.word	0x3ff00000

08018e94 <__d2b>:
 8018e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018e98:	4689      	mov	r9, r1
 8018e9a:	2101      	movs	r1, #1
 8018e9c:	ec57 6b10 	vmov	r6, r7, d0
 8018ea0:	4690      	mov	r8, r2
 8018ea2:	f7ff fc0f 	bl	80186c4 <_Balloc>
 8018ea6:	4604      	mov	r4, r0
 8018ea8:	b930      	cbnz	r0, 8018eb8 <__d2b+0x24>
 8018eaa:	4602      	mov	r2, r0
 8018eac:	4b25      	ldr	r3, [pc, #148]	; (8018f44 <__d2b+0xb0>)
 8018eae:	4826      	ldr	r0, [pc, #152]	; (8018f48 <__d2b+0xb4>)
 8018eb0:	f240 310a 	movw	r1, #778	; 0x30a
 8018eb4:	f000 f8fe 	bl	80190b4 <__assert_func>
 8018eb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018ebc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018ec0:	bb35      	cbnz	r5, 8018f10 <__d2b+0x7c>
 8018ec2:	2e00      	cmp	r6, #0
 8018ec4:	9301      	str	r3, [sp, #4]
 8018ec6:	d028      	beq.n	8018f1a <__d2b+0x86>
 8018ec8:	4668      	mov	r0, sp
 8018eca:	9600      	str	r6, [sp, #0]
 8018ecc:	f7ff fd10 	bl	80188f0 <__lo0bits>
 8018ed0:	9900      	ldr	r1, [sp, #0]
 8018ed2:	b300      	cbz	r0, 8018f16 <__d2b+0x82>
 8018ed4:	9a01      	ldr	r2, [sp, #4]
 8018ed6:	f1c0 0320 	rsb	r3, r0, #32
 8018eda:	fa02 f303 	lsl.w	r3, r2, r3
 8018ede:	430b      	orrs	r3, r1
 8018ee0:	40c2      	lsrs	r2, r0
 8018ee2:	6163      	str	r3, [r4, #20]
 8018ee4:	9201      	str	r2, [sp, #4]
 8018ee6:	9b01      	ldr	r3, [sp, #4]
 8018ee8:	61a3      	str	r3, [r4, #24]
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	bf14      	ite	ne
 8018eee:	2202      	movne	r2, #2
 8018ef0:	2201      	moveq	r2, #1
 8018ef2:	6122      	str	r2, [r4, #16]
 8018ef4:	b1d5      	cbz	r5, 8018f2c <__d2b+0x98>
 8018ef6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018efa:	4405      	add	r5, r0
 8018efc:	f8c9 5000 	str.w	r5, [r9]
 8018f00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018f04:	f8c8 0000 	str.w	r0, [r8]
 8018f08:	4620      	mov	r0, r4
 8018f0a:	b003      	add	sp, #12
 8018f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018f14:	e7d5      	b.n	8018ec2 <__d2b+0x2e>
 8018f16:	6161      	str	r1, [r4, #20]
 8018f18:	e7e5      	b.n	8018ee6 <__d2b+0x52>
 8018f1a:	a801      	add	r0, sp, #4
 8018f1c:	f7ff fce8 	bl	80188f0 <__lo0bits>
 8018f20:	9b01      	ldr	r3, [sp, #4]
 8018f22:	6163      	str	r3, [r4, #20]
 8018f24:	2201      	movs	r2, #1
 8018f26:	6122      	str	r2, [r4, #16]
 8018f28:	3020      	adds	r0, #32
 8018f2a:	e7e3      	b.n	8018ef4 <__d2b+0x60>
 8018f2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018f30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018f34:	f8c9 0000 	str.w	r0, [r9]
 8018f38:	6918      	ldr	r0, [r3, #16]
 8018f3a:	f7ff fcb9 	bl	80188b0 <__hi0bits>
 8018f3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018f42:	e7df      	b.n	8018f04 <__d2b+0x70>
 8018f44:	0801a68e 	.word	0x0801a68e
 8018f48:	0801a733 	.word	0x0801a733

08018f4c <__ratio>:
 8018f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f50:	4688      	mov	r8, r1
 8018f52:	4669      	mov	r1, sp
 8018f54:	4681      	mov	r9, r0
 8018f56:	f7ff ff4d 	bl	8018df4 <__b2d>
 8018f5a:	a901      	add	r1, sp, #4
 8018f5c:	4640      	mov	r0, r8
 8018f5e:	ec55 4b10 	vmov	r4, r5, d0
 8018f62:	f7ff ff47 	bl	8018df4 <__b2d>
 8018f66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018f6a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018f6e:	eba3 0c02 	sub.w	ip, r3, r2
 8018f72:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018f76:	1a9b      	subs	r3, r3, r2
 8018f78:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018f7c:	ec51 0b10 	vmov	r0, r1, d0
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	bfd6      	itet	le
 8018f84:	460a      	movle	r2, r1
 8018f86:	462a      	movgt	r2, r5
 8018f88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018f8c:	468b      	mov	fp, r1
 8018f8e:	462f      	mov	r7, r5
 8018f90:	bfd4      	ite	le
 8018f92:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018f96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018f9a:	4620      	mov	r0, r4
 8018f9c:	ee10 2a10 	vmov	r2, s0
 8018fa0:	465b      	mov	r3, fp
 8018fa2:	4639      	mov	r1, r7
 8018fa4:	f7e7 fc72 	bl	800088c <__aeabi_ddiv>
 8018fa8:	ec41 0b10 	vmov	d0, r0, r1
 8018fac:	b003      	add	sp, #12
 8018fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018fb2 <__copybits>:
 8018fb2:	3901      	subs	r1, #1
 8018fb4:	b570      	push	{r4, r5, r6, lr}
 8018fb6:	1149      	asrs	r1, r1, #5
 8018fb8:	6914      	ldr	r4, [r2, #16]
 8018fba:	3101      	adds	r1, #1
 8018fbc:	f102 0314 	add.w	r3, r2, #20
 8018fc0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018fc4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018fc8:	1f05      	subs	r5, r0, #4
 8018fca:	42a3      	cmp	r3, r4
 8018fcc:	d30c      	bcc.n	8018fe8 <__copybits+0x36>
 8018fce:	1aa3      	subs	r3, r4, r2
 8018fd0:	3b11      	subs	r3, #17
 8018fd2:	f023 0303 	bic.w	r3, r3, #3
 8018fd6:	3211      	adds	r2, #17
 8018fd8:	42a2      	cmp	r2, r4
 8018fda:	bf88      	it	hi
 8018fdc:	2300      	movhi	r3, #0
 8018fde:	4418      	add	r0, r3
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	4288      	cmp	r0, r1
 8018fe4:	d305      	bcc.n	8018ff2 <__copybits+0x40>
 8018fe6:	bd70      	pop	{r4, r5, r6, pc}
 8018fe8:	f853 6b04 	ldr.w	r6, [r3], #4
 8018fec:	f845 6f04 	str.w	r6, [r5, #4]!
 8018ff0:	e7eb      	b.n	8018fca <__copybits+0x18>
 8018ff2:	f840 3b04 	str.w	r3, [r0], #4
 8018ff6:	e7f4      	b.n	8018fe2 <__copybits+0x30>

08018ff8 <__any_on>:
 8018ff8:	f100 0214 	add.w	r2, r0, #20
 8018ffc:	6900      	ldr	r0, [r0, #16]
 8018ffe:	114b      	asrs	r3, r1, #5
 8019000:	4298      	cmp	r0, r3
 8019002:	b510      	push	{r4, lr}
 8019004:	db11      	blt.n	801902a <__any_on+0x32>
 8019006:	dd0a      	ble.n	801901e <__any_on+0x26>
 8019008:	f011 011f 	ands.w	r1, r1, #31
 801900c:	d007      	beq.n	801901e <__any_on+0x26>
 801900e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019012:	fa24 f001 	lsr.w	r0, r4, r1
 8019016:	fa00 f101 	lsl.w	r1, r0, r1
 801901a:	428c      	cmp	r4, r1
 801901c:	d10b      	bne.n	8019036 <__any_on+0x3e>
 801901e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019022:	4293      	cmp	r3, r2
 8019024:	d803      	bhi.n	801902e <__any_on+0x36>
 8019026:	2000      	movs	r0, #0
 8019028:	bd10      	pop	{r4, pc}
 801902a:	4603      	mov	r3, r0
 801902c:	e7f7      	b.n	801901e <__any_on+0x26>
 801902e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019032:	2900      	cmp	r1, #0
 8019034:	d0f5      	beq.n	8019022 <__any_on+0x2a>
 8019036:	2001      	movs	r0, #1
 8019038:	e7f6      	b.n	8019028 <__any_on+0x30>

0801903a <_calloc_r>:
 801903a:	b513      	push	{r0, r1, r4, lr}
 801903c:	434a      	muls	r2, r1
 801903e:	4611      	mov	r1, r2
 8019040:	9201      	str	r2, [sp, #4]
 8019042:	f7fd ffb3 	bl	8016fac <_malloc_r>
 8019046:	4604      	mov	r4, r0
 8019048:	b118      	cbz	r0, 8019052 <_calloc_r+0x18>
 801904a:	9a01      	ldr	r2, [sp, #4]
 801904c:	2100      	movs	r1, #0
 801904e:	f7fd ff55 	bl	8016efc <memset>
 8019052:	4620      	mov	r0, r4
 8019054:	b002      	add	sp, #8
 8019056:	bd10      	pop	{r4, pc}

08019058 <nan>:
 8019058:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019060 <nan+0x8>
 801905c:	4770      	bx	lr
 801905e:	bf00      	nop
 8019060:	00000000 	.word	0x00000000
 8019064:	7ff80000 	.word	0x7ff80000

08019068 <nanf>:
 8019068:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019070 <nanf+0x8>
 801906c:	4770      	bx	lr
 801906e:	bf00      	nop
 8019070:	7fc00000 	.word	0x7fc00000

08019074 <strncmp>:
 8019074:	b510      	push	{r4, lr}
 8019076:	b16a      	cbz	r2, 8019094 <strncmp+0x20>
 8019078:	3901      	subs	r1, #1
 801907a:	1884      	adds	r4, r0, r2
 801907c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019080:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019084:	4293      	cmp	r3, r2
 8019086:	d103      	bne.n	8019090 <strncmp+0x1c>
 8019088:	42a0      	cmp	r0, r4
 801908a:	d001      	beq.n	8019090 <strncmp+0x1c>
 801908c:	2b00      	cmp	r3, #0
 801908e:	d1f5      	bne.n	801907c <strncmp+0x8>
 8019090:	1a98      	subs	r0, r3, r2
 8019092:	bd10      	pop	{r4, pc}
 8019094:	4610      	mov	r0, r2
 8019096:	e7fc      	b.n	8019092 <strncmp+0x1e>

08019098 <__ascii_wctomb>:
 8019098:	b149      	cbz	r1, 80190ae <__ascii_wctomb+0x16>
 801909a:	2aff      	cmp	r2, #255	; 0xff
 801909c:	bf85      	ittet	hi
 801909e:	238a      	movhi	r3, #138	; 0x8a
 80190a0:	6003      	strhi	r3, [r0, #0]
 80190a2:	700a      	strbls	r2, [r1, #0]
 80190a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80190a8:	bf98      	it	ls
 80190aa:	2001      	movls	r0, #1
 80190ac:	4770      	bx	lr
 80190ae:	4608      	mov	r0, r1
 80190b0:	4770      	bx	lr
	...

080190b4 <__assert_func>:
 80190b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80190b6:	4614      	mov	r4, r2
 80190b8:	461a      	mov	r2, r3
 80190ba:	4b09      	ldr	r3, [pc, #36]	; (80190e0 <__assert_func+0x2c>)
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	4605      	mov	r5, r0
 80190c0:	68d8      	ldr	r0, [r3, #12]
 80190c2:	b14c      	cbz	r4, 80190d8 <__assert_func+0x24>
 80190c4:	4b07      	ldr	r3, [pc, #28]	; (80190e4 <__assert_func+0x30>)
 80190c6:	9100      	str	r1, [sp, #0]
 80190c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80190cc:	4906      	ldr	r1, [pc, #24]	; (80190e8 <__assert_func+0x34>)
 80190ce:	462b      	mov	r3, r5
 80190d0:	f000 f80e 	bl	80190f0 <fiprintf>
 80190d4:	f7fd fe68 	bl	8016da8 <abort>
 80190d8:	4b04      	ldr	r3, [pc, #16]	; (80190ec <__assert_func+0x38>)
 80190da:	461c      	mov	r4, r3
 80190dc:	e7f3      	b.n	80190c6 <__assert_func+0x12>
 80190de:	bf00      	nop
 80190e0:	2000000c 	.word	0x2000000c
 80190e4:	0801a894 	.word	0x0801a894
 80190e8:	0801a8a1 	.word	0x0801a8a1
 80190ec:	0801a8cf 	.word	0x0801a8cf

080190f0 <fiprintf>:
 80190f0:	b40e      	push	{r1, r2, r3}
 80190f2:	b503      	push	{r0, r1, lr}
 80190f4:	4601      	mov	r1, r0
 80190f6:	ab03      	add	r3, sp, #12
 80190f8:	4805      	ldr	r0, [pc, #20]	; (8019110 <fiprintf+0x20>)
 80190fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80190fe:	6800      	ldr	r0, [r0, #0]
 8019100:	9301      	str	r3, [sp, #4]
 8019102:	f000 f833 	bl	801916c <_vfiprintf_r>
 8019106:	b002      	add	sp, #8
 8019108:	f85d eb04 	ldr.w	lr, [sp], #4
 801910c:	b003      	add	sp, #12
 801910e:	4770      	bx	lr
 8019110:	2000000c 	.word	0x2000000c

08019114 <__retarget_lock_init_recursive>:
 8019114:	4770      	bx	lr

08019116 <__retarget_lock_acquire_recursive>:
 8019116:	4770      	bx	lr

08019118 <__retarget_lock_release_recursive>:
 8019118:	4770      	bx	lr

0801911a <__sfputc_r>:
 801911a:	6893      	ldr	r3, [r2, #8]
 801911c:	3b01      	subs	r3, #1
 801911e:	2b00      	cmp	r3, #0
 8019120:	b410      	push	{r4}
 8019122:	6093      	str	r3, [r2, #8]
 8019124:	da08      	bge.n	8019138 <__sfputc_r+0x1e>
 8019126:	6994      	ldr	r4, [r2, #24]
 8019128:	42a3      	cmp	r3, r4
 801912a:	db01      	blt.n	8019130 <__sfputc_r+0x16>
 801912c:	290a      	cmp	r1, #10
 801912e:	d103      	bne.n	8019138 <__sfputc_r+0x1e>
 8019130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019134:	f000 bade 	b.w	80196f4 <__swbuf_r>
 8019138:	6813      	ldr	r3, [r2, #0]
 801913a:	1c58      	adds	r0, r3, #1
 801913c:	6010      	str	r0, [r2, #0]
 801913e:	7019      	strb	r1, [r3, #0]
 8019140:	4608      	mov	r0, r1
 8019142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019146:	4770      	bx	lr

08019148 <__sfputs_r>:
 8019148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801914a:	4606      	mov	r6, r0
 801914c:	460f      	mov	r7, r1
 801914e:	4614      	mov	r4, r2
 8019150:	18d5      	adds	r5, r2, r3
 8019152:	42ac      	cmp	r4, r5
 8019154:	d101      	bne.n	801915a <__sfputs_r+0x12>
 8019156:	2000      	movs	r0, #0
 8019158:	e007      	b.n	801916a <__sfputs_r+0x22>
 801915a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801915e:	463a      	mov	r2, r7
 8019160:	4630      	mov	r0, r6
 8019162:	f7ff ffda 	bl	801911a <__sfputc_r>
 8019166:	1c43      	adds	r3, r0, #1
 8019168:	d1f3      	bne.n	8019152 <__sfputs_r+0xa>
 801916a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801916c <_vfiprintf_r>:
 801916c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019170:	460d      	mov	r5, r1
 8019172:	b09d      	sub	sp, #116	; 0x74
 8019174:	4614      	mov	r4, r2
 8019176:	4698      	mov	r8, r3
 8019178:	4606      	mov	r6, r0
 801917a:	b118      	cbz	r0, 8019184 <_vfiprintf_r+0x18>
 801917c:	6983      	ldr	r3, [r0, #24]
 801917e:	b90b      	cbnz	r3, 8019184 <_vfiprintf_r+0x18>
 8019180:	f000 fc92 	bl	8019aa8 <__sinit>
 8019184:	4b89      	ldr	r3, [pc, #548]	; (80193ac <_vfiprintf_r+0x240>)
 8019186:	429d      	cmp	r5, r3
 8019188:	d11b      	bne.n	80191c2 <_vfiprintf_r+0x56>
 801918a:	6875      	ldr	r5, [r6, #4]
 801918c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801918e:	07d9      	lsls	r1, r3, #31
 8019190:	d405      	bmi.n	801919e <_vfiprintf_r+0x32>
 8019192:	89ab      	ldrh	r3, [r5, #12]
 8019194:	059a      	lsls	r2, r3, #22
 8019196:	d402      	bmi.n	801919e <_vfiprintf_r+0x32>
 8019198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801919a:	f7ff ffbc 	bl	8019116 <__retarget_lock_acquire_recursive>
 801919e:	89ab      	ldrh	r3, [r5, #12]
 80191a0:	071b      	lsls	r3, r3, #28
 80191a2:	d501      	bpl.n	80191a8 <_vfiprintf_r+0x3c>
 80191a4:	692b      	ldr	r3, [r5, #16]
 80191a6:	b9eb      	cbnz	r3, 80191e4 <_vfiprintf_r+0x78>
 80191a8:	4629      	mov	r1, r5
 80191aa:	4630      	mov	r0, r6
 80191ac:	f000 faf4 	bl	8019798 <__swsetup_r>
 80191b0:	b1c0      	cbz	r0, 80191e4 <_vfiprintf_r+0x78>
 80191b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80191b4:	07dc      	lsls	r4, r3, #31
 80191b6:	d50e      	bpl.n	80191d6 <_vfiprintf_r+0x6a>
 80191b8:	f04f 30ff 	mov.w	r0, #4294967295
 80191bc:	b01d      	add	sp, #116	; 0x74
 80191be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191c2:	4b7b      	ldr	r3, [pc, #492]	; (80193b0 <_vfiprintf_r+0x244>)
 80191c4:	429d      	cmp	r5, r3
 80191c6:	d101      	bne.n	80191cc <_vfiprintf_r+0x60>
 80191c8:	68b5      	ldr	r5, [r6, #8]
 80191ca:	e7df      	b.n	801918c <_vfiprintf_r+0x20>
 80191cc:	4b79      	ldr	r3, [pc, #484]	; (80193b4 <_vfiprintf_r+0x248>)
 80191ce:	429d      	cmp	r5, r3
 80191d0:	bf08      	it	eq
 80191d2:	68f5      	ldreq	r5, [r6, #12]
 80191d4:	e7da      	b.n	801918c <_vfiprintf_r+0x20>
 80191d6:	89ab      	ldrh	r3, [r5, #12]
 80191d8:	0598      	lsls	r0, r3, #22
 80191da:	d4ed      	bmi.n	80191b8 <_vfiprintf_r+0x4c>
 80191dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80191de:	f7ff ff9b 	bl	8019118 <__retarget_lock_release_recursive>
 80191e2:	e7e9      	b.n	80191b8 <_vfiprintf_r+0x4c>
 80191e4:	2300      	movs	r3, #0
 80191e6:	9309      	str	r3, [sp, #36]	; 0x24
 80191e8:	2320      	movs	r3, #32
 80191ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80191ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80191f2:	2330      	movs	r3, #48	; 0x30
 80191f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80193b8 <_vfiprintf_r+0x24c>
 80191f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80191fc:	f04f 0901 	mov.w	r9, #1
 8019200:	4623      	mov	r3, r4
 8019202:	469a      	mov	sl, r3
 8019204:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019208:	b10a      	cbz	r2, 801920e <_vfiprintf_r+0xa2>
 801920a:	2a25      	cmp	r2, #37	; 0x25
 801920c:	d1f9      	bne.n	8019202 <_vfiprintf_r+0x96>
 801920e:	ebba 0b04 	subs.w	fp, sl, r4
 8019212:	d00b      	beq.n	801922c <_vfiprintf_r+0xc0>
 8019214:	465b      	mov	r3, fp
 8019216:	4622      	mov	r2, r4
 8019218:	4629      	mov	r1, r5
 801921a:	4630      	mov	r0, r6
 801921c:	f7ff ff94 	bl	8019148 <__sfputs_r>
 8019220:	3001      	adds	r0, #1
 8019222:	f000 80aa 	beq.w	801937a <_vfiprintf_r+0x20e>
 8019226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019228:	445a      	add	r2, fp
 801922a:	9209      	str	r2, [sp, #36]	; 0x24
 801922c:	f89a 3000 	ldrb.w	r3, [sl]
 8019230:	2b00      	cmp	r3, #0
 8019232:	f000 80a2 	beq.w	801937a <_vfiprintf_r+0x20e>
 8019236:	2300      	movs	r3, #0
 8019238:	f04f 32ff 	mov.w	r2, #4294967295
 801923c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019240:	f10a 0a01 	add.w	sl, sl, #1
 8019244:	9304      	str	r3, [sp, #16]
 8019246:	9307      	str	r3, [sp, #28]
 8019248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801924c:	931a      	str	r3, [sp, #104]	; 0x68
 801924e:	4654      	mov	r4, sl
 8019250:	2205      	movs	r2, #5
 8019252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019256:	4858      	ldr	r0, [pc, #352]	; (80193b8 <_vfiprintf_r+0x24c>)
 8019258:	f7e6 ffda 	bl	8000210 <memchr>
 801925c:	9a04      	ldr	r2, [sp, #16]
 801925e:	b9d8      	cbnz	r0, 8019298 <_vfiprintf_r+0x12c>
 8019260:	06d1      	lsls	r1, r2, #27
 8019262:	bf44      	itt	mi
 8019264:	2320      	movmi	r3, #32
 8019266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801926a:	0713      	lsls	r3, r2, #28
 801926c:	bf44      	itt	mi
 801926e:	232b      	movmi	r3, #43	; 0x2b
 8019270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019274:	f89a 3000 	ldrb.w	r3, [sl]
 8019278:	2b2a      	cmp	r3, #42	; 0x2a
 801927a:	d015      	beq.n	80192a8 <_vfiprintf_r+0x13c>
 801927c:	9a07      	ldr	r2, [sp, #28]
 801927e:	4654      	mov	r4, sl
 8019280:	2000      	movs	r0, #0
 8019282:	f04f 0c0a 	mov.w	ip, #10
 8019286:	4621      	mov	r1, r4
 8019288:	f811 3b01 	ldrb.w	r3, [r1], #1
 801928c:	3b30      	subs	r3, #48	; 0x30
 801928e:	2b09      	cmp	r3, #9
 8019290:	d94e      	bls.n	8019330 <_vfiprintf_r+0x1c4>
 8019292:	b1b0      	cbz	r0, 80192c2 <_vfiprintf_r+0x156>
 8019294:	9207      	str	r2, [sp, #28]
 8019296:	e014      	b.n	80192c2 <_vfiprintf_r+0x156>
 8019298:	eba0 0308 	sub.w	r3, r0, r8
 801929c:	fa09 f303 	lsl.w	r3, r9, r3
 80192a0:	4313      	orrs	r3, r2
 80192a2:	9304      	str	r3, [sp, #16]
 80192a4:	46a2      	mov	sl, r4
 80192a6:	e7d2      	b.n	801924e <_vfiprintf_r+0xe2>
 80192a8:	9b03      	ldr	r3, [sp, #12]
 80192aa:	1d19      	adds	r1, r3, #4
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	9103      	str	r1, [sp, #12]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	bfbb      	ittet	lt
 80192b4:	425b      	neglt	r3, r3
 80192b6:	f042 0202 	orrlt.w	r2, r2, #2
 80192ba:	9307      	strge	r3, [sp, #28]
 80192bc:	9307      	strlt	r3, [sp, #28]
 80192be:	bfb8      	it	lt
 80192c0:	9204      	strlt	r2, [sp, #16]
 80192c2:	7823      	ldrb	r3, [r4, #0]
 80192c4:	2b2e      	cmp	r3, #46	; 0x2e
 80192c6:	d10c      	bne.n	80192e2 <_vfiprintf_r+0x176>
 80192c8:	7863      	ldrb	r3, [r4, #1]
 80192ca:	2b2a      	cmp	r3, #42	; 0x2a
 80192cc:	d135      	bne.n	801933a <_vfiprintf_r+0x1ce>
 80192ce:	9b03      	ldr	r3, [sp, #12]
 80192d0:	1d1a      	adds	r2, r3, #4
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	9203      	str	r2, [sp, #12]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	bfb8      	it	lt
 80192da:	f04f 33ff 	movlt.w	r3, #4294967295
 80192de:	3402      	adds	r4, #2
 80192e0:	9305      	str	r3, [sp, #20]
 80192e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80193c8 <_vfiprintf_r+0x25c>
 80192e6:	7821      	ldrb	r1, [r4, #0]
 80192e8:	2203      	movs	r2, #3
 80192ea:	4650      	mov	r0, sl
 80192ec:	f7e6 ff90 	bl	8000210 <memchr>
 80192f0:	b140      	cbz	r0, 8019304 <_vfiprintf_r+0x198>
 80192f2:	2340      	movs	r3, #64	; 0x40
 80192f4:	eba0 000a 	sub.w	r0, r0, sl
 80192f8:	fa03 f000 	lsl.w	r0, r3, r0
 80192fc:	9b04      	ldr	r3, [sp, #16]
 80192fe:	4303      	orrs	r3, r0
 8019300:	3401      	adds	r4, #1
 8019302:	9304      	str	r3, [sp, #16]
 8019304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019308:	482c      	ldr	r0, [pc, #176]	; (80193bc <_vfiprintf_r+0x250>)
 801930a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801930e:	2206      	movs	r2, #6
 8019310:	f7e6 ff7e 	bl	8000210 <memchr>
 8019314:	2800      	cmp	r0, #0
 8019316:	d03f      	beq.n	8019398 <_vfiprintf_r+0x22c>
 8019318:	4b29      	ldr	r3, [pc, #164]	; (80193c0 <_vfiprintf_r+0x254>)
 801931a:	bb1b      	cbnz	r3, 8019364 <_vfiprintf_r+0x1f8>
 801931c:	9b03      	ldr	r3, [sp, #12]
 801931e:	3307      	adds	r3, #7
 8019320:	f023 0307 	bic.w	r3, r3, #7
 8019324:	3308      	adds	r3, #8
 8019326:	9303      	str	r3, [sp, #12]
 8019328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801932a:	443b      	add	r3, r7
 801932c:	9309      	str	r3, [sp, #36]	; 0x24
 801932e:	e767      	b.n	8019200 <_vfiprintf_r+0x94>
 8019330:	fb0c 3202 	mla	r2, ip, r2, r3
 8019334:	460c      	mov	r4, r1
 8019336:	2001      	movs	r0, #1
 8019338:	e7a5      	b.n	8019286 <_vfiprintf_r+0x11a>
 801933a:	2300      	movs	r3, #0
 801933c:	3401      	adds	r4, #1
 801933e:	9305      	str	r3, [sp, #20]
 8019340:	4619      	mov	r1, r3
 8019342:	f04f 0c0a 	mov.w	ip, #10
 8019346:	4620      	mov	r0, r4
 8019348:	f810 2b01 	ldrb.w	r2, [r0], #1
 801934c:	3a30      	subs	r2, #48	; 0x30
 801934e:	2a09      	cmp	r2, #9
 8019350:	d903      	bls.n	801935a <_vfiprintf_r+0x1ee>
 8019352:	2b00      	cmp	r3, #0
 8019354:	d0c5      	beq.n	80192e2 <_vfiprintf_r+0x176>
 8019356:	9105      	str	r1, [sp, #20]
 8019358:	e7c3      	b.n	80192e2 <_vfiprintf_r+0x176>
 801935a:	fb0c 2101 	mla	r1, ip, r1, r2
 801935e:	4604      	mov	r4, r0
 8019360:	2301      	movs	r3, #1
 8019362:	e7f0      	b.n	8019346 <_vfiprintf_r+0x1da>
 8019364:	ab03      	add	r3, sp, #12
 8019366:	9300      	str	r3, [sp, #0]
 8019368:	462a      	mov	r2, r5
 801936a:	4b16      	ldr	r3, [pc, #88]	; (80193c4 <_vfiprintf_r+0x258>)
 801936c:	a904      	add	r1, sp, #16
 801936e:	4630      	mov	r0, r6
 8019370:	f3af 8000 	nop.w
 8019374:	4607      	mov	r7, r0
 8019376:	1c78      	adds	r0, r7, #1
 8019378:	d1d6      	bne.n	8019328 <_vfiprintf_r+0x1bc>
 801937a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801937c:	07d9      	lsls	r1, r3, #31
 801937e:	d405      	bmi.n	801938c <_vfiprintf_r+0x220>
 8019380:	89ab      	ldrh	r3, [r5, #12]
 8019382:	059a      	lsls	r2, r3, #22
 8019384:	d402      	bmi.n	801938c <_vfiprintf_r+0x220>
 8019386:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019388:	f7ff fec6 	bl	8019118 <__retarget_lock_release_recursive>
 801938c:	89ab      	ldrh	r3, [r5, #12]
 801938e:	065b      	lsls	r3, r3, #25
 8019390:	f53f af12 	bmi.w	80191b8 <_vfiprintf_r+0x4c>
 8019394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019396:	e711      	b.n	80191bc <_vfiprintf_r+0x50>
 8019398:	ab03      	add	r3, sp, #12
 801939a:	9300      	str	r3, [sp, #0]
 801939c:	462a      	mov	r2, r5
 801939e:	4b09      	ldr	r3, [pc, #36]	; (80193c4 <_vfiprintf_r+0x258>)
 80193a0:	a904      	add	r1, sp, #16
 80193a2:	4630      	mov	r0, r6
 80193a4:	f000 f880 	bl	80194a8 <_printf_i>
 80193a8:	e7e4      	b.n	8019374 <_vfiprintf_r+0x208>
 80193aa:	bf00      	nop
 80193ac:	0801a924 	.word	0x0801a924
 80193b0:	0801a944 	.word	0x0801a944
 80193b4:	0801a904 	.word	0x0801a904
 80193b8:	0801a8d0 	.word	0x0801a8d0
 80193bc:	0801a8da 	.word	0x0801a8da
 80193c0:	00000000 	.word	0x00000000
 80193c4:	08019149 	.word	0x08019149
 80193c8:	0801a8d6 	.word	0x0801a8d6

080193cc <_printf_common>:
 80193cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193d0:	4616      	mov	r6, r2
 80193d2:	4699      	mov	r9, r3
 80193d4:	688a      	ldr	r2, [r1, #8]
 80193d6:	690b      	ldr	r3, [r1, #16]
 80193d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80193dc:	4293      	cmp	r3, r2
 80193de:	bfb8      	it	lt
 80193e0:	4613      	movlt	r3, r2
 80193e2:	6033      	str	r3, [r6, #0]
 80193e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80193e8:	4607      	mov	r7, r0
 80193ea:	460c      	mov	r4, r1
 80193ec:	b10a      	cbz	r2, 80193f2 <_printf_common+0x26>
 80193ee:	3301      	adds	r3, #1
 80193f0:	6033      	str	r3, [r6, #0]
 80193f2:	6823      	ldr	r3, [r4, #0]
 80193f4:	0699      	lsls	r1, r3, #26
 80193f6:	bf42      	ittt	mi
 80193f8:	6833      	ldrmi	r3, [r6, #0]
 80193fa:	3302      	addmi	r3, #2
 80193fc:	6033      	strmi	r3, [r6, #0]
 80193fe:	6825      	ldr	r5, [r4, #0]
 8019400:	f015 0506 	ands.w	r5, r5, #6
 8019404:	d106      	bne.n	8019414 <_printf_common+0x48>
 8019406:	f104 0a19 	add.w	sl, r4, #25
 801940a:	68e3      	ldr	r3, [r4, #12]
 801940c:	6832      	ldr	r2, [r6, #0]
 801940e:	1a9b      	subs	r3, r3, r2
 8019410:	42ab      	cmp	r3, r5
 8019412:	dc26      	bgt.n	8019462 <_printf_common+0x96>
 8019414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019418:	1e13      	subs	r3, r2, #0
 801941a:	6822      	ldr	r2, [r4, #0]
 801941c:	bf18      	it	ne
 801941e:	2301      	movne	r3, #1
 8019420:	0692      	lsls	r2, r2, #26
 8019422:	d42b      	bmi.n	801947c <_printf_common+0xb0>
 8019424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019428:	4649      	mov	r1, r9
 801942a:	4638      	mov	r0, r7
 801942c:	47c0      	blx	r8
 801942e:	3001      	adds	r0, #1
 8019430:	d01e      	beq.n	8019470 <_printf_common+0xa4>
 8019432:	6823      	ldr	r3, [r4, #0]
 8019434:	68e5      	ldr	r5, [r4, #12]
 8019436:	6832      	ldr	r2, [r6, #0]
 8019438:	f003 0306 	and.w	r3, r3, #6
 801943c:	2b04      	cmp	r3, #4
 801943e:	bf08      	it	eq
 8019440:	1aad      	subeq	r5, r5, r2
 8019442:	68a3      	ldr	r3, [r4, #8]
 8019444:	6922      	ldr	r2, [r4, #16]
 8019446:	bf0c      	ite	eq
 8019448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801944c:	2500      	movne	r5, #0
 801944e:	4293      	cmp	r3, r2
 8019450:	bfc4      	itt	gt
 8019452:	1a9b      	subgt	r3, r3, r2
 8019454:	18ed      	addgt	r5, r5, r3
 8019456:	2600      	movs	r6, #0
 8019458:	341a      	adds	r4, #26
 801945a:	42b5      	cmp	r5, r6
 801945c:	d11a      	bne.n	8019494 <_printf_common+0xc8>
 801945e:	2000      	movs	r0, #0
 8019460:	e008      	b.n	8019474 <_printf_common+0xa8>
 8019462:	2301      	movs	r3, #1
 8019464:	4652      	mov	r2, sl
 8019466:	4649      	mov	r1, r9
 8019468:	4638      	mov	r0, r7
 801946a:	47c0      	blx	r8
 801946c:	3001      	adds	r0, #1
 801946e:	d103      	bne.n	8019478 <_printf_common+0xac>
 8019470:	f04f 30ff 	mov.w	r0, #4294967295
 8019474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019478:	3501      	adds	r5, #1
 801947a:	e7c6      	b.n	801940a <_printf_common+0x3e>
 801947c:	18e1      	adds	r1, r4, r3
 801947e:	1c5a      	adds	r2, r3, #1
 8019480:	2030      	movs	r0, #48	; 0x30
 8019482:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019486:	4422      	add	r2, r4
 8019488:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801948c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019490:	3302      	adds	r3, #2
 8019492:	e7c7      	b.n	8019424 <_printf_common+0x58>
 8019494:	2301      	movs	r3, #1
 8019496:	4622      	mov	r2, r4
 8019498:	4649      	mov	r1, r9
 801949a:	4638      	mov	r0, r7
 801949c:	47c0      	blx	r8
 801949e:	3001      	adds	r0, #1
 80194a0:	d0e6      	beq.n	8019470 <_printf_common+0xa4>
 80194a2:	3601      	adds	r6, #1
 80194a4:	e7d9      	b.n	801945a <_printf_common+0x8e>
	...

080194a8 <_printf_i>:
 80194a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80194ac:	460c      	mov	r4, r1
 80194ae:	4691      	mov	r9, r2
 80194b0:	7e27      	ldrb	r7, [r4, #24]
 80194b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80194b4:	2f78      	cmp	r7, #120	; 0x78
 80194b6:	4680      	mov	r8, r0
 80194b8:	469a      	mov	sl, r3
 80194ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80194be:	d807      	bhi.n	80194d0 <_printf_i+0x28>
 80194c0:	2f62      	cmp	r7, #98	; 0x62
 80194c2:	d80a      	bhi.n	80194da <_printf_i+0x32>
 80194c4:	2f00      	cmp	r7, #0
 80194c6:	f000 80d8 	beq.w	801967a <_printf_i+0x1d2>
 80194ca:	2f58      	cmp	r7, #88	; 0x58
 80194cc:	f000 80a3 	beq.w	8019616 <_printf_i+0x16e>
 80194d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80194d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80194d8:	e03a      	b.n	8019550 <_printf_i+0xa8>
 80194da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80194de:	2b15      	cmp	r3, #21
 80194e0:	d8f6      	bhi.n	80194d0 <_printf_i+0x28>
 80194e2:	a001      	add	r0, pc, #4	; (adr r0, 80194e8 <_printf_i+0x40>)
 80194e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80194e8:	08019541 	.word	0x08019541
 80194ec:	08019555 	.word	0x08019555
 80194f0:	080194d1 	.word	0x080194d1
 80194f4:	080194d1 	.word	0x080194d1
 80194f8:	080194d1 	.word	0x080194d1
 80194fc:	080194d1 	.word	0x080194d1
 8019500:	08019555 	.word	0x08019555
 8019504:	080194d1 	.word	0x080194d1
 8019508:	080194d1 	.word	0x080194d1
 801950c:	080194d1 	.word	0x080194d1
 8019510:	080194d1 	.word	0x080194d1
 8019514:	08019661 	.word	0x08019661
 8019518:	08019585 	.word	0x08019585
 801951c:	08019643 	.word	0x08019643
 8019520:	080194d1 	.word	0x080194d1
 8019524:	080194d1 	.word	0x080194d1
 8019528:	08019683 	.word	0x08019683
 801952c:	080194d1 	.word	0x080194d1
 8019530:	08019585 	.word	0x08019585
 8019534:	080194d1 	.word	0x080194d1
 8019538:	080194d1 	.word	0x080194d1
 801953c:	0801964b 	.word	0x0801964b
 8019540:	680b      	ldr	r3, [r1, #0]
 8019542:	1d1a      	adds	r2, r3, #4
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	600a      	str	r2, [r1, #0]
 8019548:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801954c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019550:	2301      	movs	r3, #1
 8019552:	e0a3      	b.n	801969c <_printf_i+0x1f4>
 8019554:	6825      	ldr	r5, [r4, #0]
 8019556:	6808      	ldr	r0, [r1, #0]
 8019558:	062e      	lsls	r6, r5, #24
 801955a:	f100 0304 	add.w	r3, r0, #4
 801955e:	d50a      	bpl.n	8019576 <_printf_i+0xce>
 8019560:	6805      	ldr	r5, [r0, #0]
 8019562:	600b      	str	r3, [r1, #0]
 8019564:	2d00      	cmp	r5, #0
 8019566:	da03      	bge.n	8019570 <_printf_i+0xc8>
 8019568:	232d      	movs	r3, #45	; 0x2d
 801956a:	426d      	negs	r5, r5
 801956c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019570:	485e      	ldr	r0, [pc, #376]	; (80196ec <_printf_i+0x244>)
 8019572:	230a      	movs	r3, #10
 8019574:	e019      	b.n	80195aa <_printf_i+0x102>
 8019576:	f015 0f40 	tst.w	r5, #64	; 0x40
 801957a:	6805      	ldr	r5, [r0, #0]
 801957c:	600b      	str	r3, [r1, #0]
 801957e:	bf18      	it	ne
 8019580:	b22d      	sxthne	r5, r5
 8019582:	e7ef      	b.n	8019564 <_printf_i+0xbc>
 8019584:	680b      	ldr	r3, [r1, #0]
 8019586:	6825      	ldr	r5, [r4, #0]
 8019588:	1d18      	adds	r0, r3, #4
 801958a:	6008      	str	r0, [r1, #0]
 801958c:	0628      	lsls	r0, r5, #24
 801958e:	d501      	bpl.n	8019594 <_printf_i+0xec>
 8019590:	681d      	ldr	r5, [r3, #0]
 8019592:	e002      	b.n	801959a <_printf_i+0xf2>
 8019594:	0669      	lsls	r1, r5, #25
 8019596:	d5fb      	bpl.n	8019590 <_printf_i+0xe8>
 8019598:	881d      	ldrh	r5, [r3, #0]
 801959a:	4854      	ldr	r0, [pc, #336]	; (80196ec <_printf_i+0x244>)
 801959c:	2f6f      	cmp	r7, #111	; 0x6f
 801959e:	bf0c      	ite	eq
 80195a0:	2308      	moveq	r3, #8
 80195a2:	230a      	movne	r3, #10
 80195a4:	2100      	movs	r1, #0
 80195a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80195aa:	6866      	ldr	r6, [r4, #4]
 80195ac:	60a6      	str	r6, [r4, #8]
 80195ae:	2e00      	cmp	r6, #0
 80195b0:	bfa2      	ittt	ge
 80195b2:	6821      	ldrge	r1, [r4, #0]
 80195b4:	f021 0104 	bicge.w	r1, r1, #4
 80195b8:	6021      	strge	r1, [r4, #0]
 80195ba:	b90d      	cbnz	r5, 80195c0 <_printf_i+0x118>
 80195bc:	2e00      	cmp	r6, #0
 80195be:	d04d      	beq.n	801965c <_printf_i+0x1b4>
 80195c0:	4616      	mov	r6, r2
 80195c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80195c6:	fb03 5711 	mls	r7, r3, r1, r5
 80195ca:	5dc7      	ldrb	r7, [r0, r7]
 80195cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80195d0:	462f      	mov	r7, r5
 80195d2:	42bb      	cmp	r3, r7
 80195d4:	460d      	mov	r5, r1
 80195d6:	d9f4      	bls.n	80195c2 <_printf_i+0x11a>
 80195d8:	2b08      	cmp	r3, #8
 80195da:	d10b      	bne.n	80195f4 <_printf_i+0x14c>
 80195dc:	6823      	ldr	r3, [r4, #0]
 80195de:	07df      	lsls	r7, r3, #31
 80195e0:	d508      	bpl.n	80195f4 <_printf_i+0x14c>
 80195e2:	6923      	ldr	r3, [r4, #16]
 80195e4:	6861      	ldr	r1, [r4, #4]
 80195e6:	4299      	cmp	r1, r3
 80195e8:	bfde      	ittt	le
 80195ea:	2330      	movle	r3, #48	; 0x30
 80195ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80195f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80195f4:	1b92      	subs	r2, r2, r6
 80195f6:	6122      	str	r2, [r4, #16]
 80195f8:	f8cd a000 	str.w	sl, [sp]
 80195fc:	464b      	mov	r3, r9
 80195fe:	aa03      	add	r2, sp, #12
 8019600:	4621      	mov	r1, r4
 8019602:	4640      	mov	r0, r8
 8019604:	f7ff fee2 	bl	80193cc <_printf_common>
 8019608:	3001      	adds	r0, #1
 801960a:	d14c      	bne.n	80196a6 <_printf_i+0x1fe>
 801960c:	f04f 30ff 	mov.w	r0, #4294967295
 8019610:	b004      	add	sp, #16
 8019612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019616:	4835      	ldr	r0, [pc, #212]	; (80196ec <_printf_i+0x244>)
 8019618:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801961c:	6823      	ldr	r3, [r4, #0]
 801961e:	680e      	ldr	r6, [r1, #0]
 8019620:	061f      	lsls	r7, r3, #24
 8019622:	f856 5b04 	ldr.w	r5, [r6], #4
 8019626:	600e      	str	r6, [r1, #0]
 8019628:	d514      	bpl.n	8019654 <_printf_i+0x1ac>
 801962a:	07d9      	lsls	r1, r3, #31
 801962c:	bf44      	itt	mi
 801962e:	f043 0320 	orrmi.w	r3, r3, #32
 8019632:	6023      	strmi	r3, [r4, #0]
 8019634:	b91d      	cbnz	r5, 801963e <_printf_i+0x196>
 8019636:	6823      	ldr	r3, [r4, #0]
 8019638:	f023 0320 	bic.w	r3, r3, #32
 801963c:	6023      	str	r3, [r4, #0]
 801963e:	2310      	movs	r3, #16
 8019640:	e7b0      	b.n	80195a4 <_printf_i+0xfc>
 8019642:	6823      	ldr	r3, [r4, #0]
 8019644:	f043 0320 	orr.w	r3, r3, #32
 8019648:	6023      	str	r3, [r4, #0]
 801964a:	2378      	movs	r3, #120	; 0x78
 801964c:	4828      	ldr	r0, [pc, #160]	; (80196f0 <_printf_i+0x248>)
 801964e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019652:	e7e3      	b.n	801961c <_printf_i+0x174>
 8019654:	065e      	lsls	r6, r3, #25
 8019656:	bf48      	it	mi
 8019658:	b2ad      	uxthmi	r5, r5
 801965a:	e7e6      	b.n	801962a <_printf_i+0x182>
 801965c:	4616      	mov	r6, r2
 801965e:	e7bb      	b.n	80195d8 <_printf_i+0x130>
 8019660:	680b      	ldr	r3, [r1, #0]
 8019662:	6826      	ldr	r6, [r4, #0]
 8019664:	6960      	ldr	r0, [r4, #20]
 8019666:	1d1d      	adds	r5, r3, #4
 8019668:	600d      	str	r5, [r1, #0]
 801966a:	0635      	lsls	r5, r6, #24
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	d501      	bpl.n	8019674 <_printf_i+0x1cc>
 8019670:	6018      	str	r0, [r3, #0]
 8019672:	e002      	b.n	801967a <_printf_i+0x1d2>
 8019674:	0671      	lsls	r1, r6, #25
 8019676:	d5fb      	bpl.n	8019670 <_printf_i+0x1c8>
 8019678:	8018      	strh	r0, [r3, #0]
 801967a:	2300      	movs	r3, #0
 801967c:	6123      	str	r3, [r4, #16]
 801967e:	4616      	mov	r6, r2
 8019680:	e7ba      	b.n	80195f8 <_printf_i+0x150>
 8019682:	680b      	ldr	r3, [r1, #0]
 8019684:	1d1a      	adds	r2, r3, #4
 8019686:	600a      	str	r2, [r1, #0]
 8019688:	681e      	ldr	r6, [r3, #0]
 801968a:	6862      	ldr	r2, [r4, #4]
 801968c:	2100      	movs	r1, #0
 801968e:	4630      	mov	r0, r6
 8019690:	f7e6 fdbe 	bl	8000210 <memchr>
 8019694:	b108      	cbz	r0, 801969a <_printf_i+0x1f2>
 8019696:	1b80      	subs	r0, r0, r6
 8019698:	6060      	str	r0, [r4, #4]
 801969a:	6863      	ldr	r3, [r4, #4]
 801969c:	6123      	str	r3, [r4, #16]
 801969e:	2300      	movs	r3, #0
 80196a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80196a4:	e7a8      	b.n	80195f8 <_printf_i+0x150>
 80196a6:	6923      	ldr	r3, [r4, #16]
 80196a8:	4632      	mov	r2, r6
 80196aa:	4649      	mov	r1, r9
 80196ac:	4640      	mov	r0, r8
 80196ae:	47d0      	blx	sl
 80196b0:	3001      	adds	r0, #1
 80196b2:	d0ab      	beq.n	801960c <_printf_i+0x164>
 80196b4:	6823      	ldr	r3, [r4, #0]
 80196b6:	079b      	lsls	r3, r3, #30
 80196b8:	d413      	bmi.n	80196e2 <_printf_i+0x23a>
 80196ba:	68e0      	ldr	r0, [r4, #12]
 80196bc:	9b03      	ldr	r3, [sp, #12]
 80196be:	4298      	cmp	r0, r3
 80196c0:	bfb8      	it	lt
 80196c2:	4618      	movlt	r0, r3
 80196c4:	e7a4      	b.n	8019610 <_printf_i+0x168>
 80196c6:	2301      	movs	r3, #1
 80196c8:	4632      	mov	r2, r6
 80196ca:	4649      	mov	r1, r9
 80196cc:	4640      	mov	r0, r8
 80196ce:	47d0      	blx	sl
 80196d0:	3001      	adds	r0, #1
 80196d2:	d09b      	beq.n	801960c <_printf_i+0x164>
 80196d4:	3501      	adds	r5, #1
 80196d6:	68e3      	ldr	r3, [r4, #12]
 80196d8:	9903      	ldr	r1, [sp, #12]
 80196da:	1a5b      	subs	r3, r3, r1
 80196dc:	42ab      	cmp	r3, r5
 80196de:	dcf2      	bgt.n	80196c6 <_printf_i+0x21e>
 80196e0:	e7eb      	b.n	80196ba <_printf_i+0x212>
 80196e2:	2500      	movs	r5, #0
 80196e4:	f104 0619 	add.w	r6, r4, #25
 80196e8:	e7f5      	b.n	80196d6 <_printf_i+0x22e>
 80196ea:	bf00      	nop
 80196ec:	0801a8e1 	.word	0x0801a8e1
 80196f0:	0801a8f2 	.word	0x0801a8f2

080196f4 <__swbuf_r>:
 80196f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196f6:	460e      	mov	r6, r1
 80196f8:	4614      	mov	r4, r2
 80196fa:	4605      	mov	r5, r0
 80196fc:	b118      	cbz	r0, 8019706 <__swbuf_r+0x12>
 80196fe:	6983      	ldr	r3, [r0, #24]
 8019700:	b90b      	cbnz	r3, 8019706 <__swbuf_r+0x12>
 8019702:	f000 f9d1 	bl	8019aa8 <__sinit>
 8019706:	4b21      	ldr	r3, [pc, #132]	; (801978c <__swbuf_r+0x98>)
 8019708:	429c      	cmp	r4, r3
 801970a:	d12b      	bne.n	8019764 <__swbuf_r+0x70>
 801970c:	686c      	ldr	r4, [r5, #4]
 801970e:	69a3      	ldr	r3, [r4, #24]
 8019710:	60a3      	str	r3, [r4, #8]
 8019712:	89a3      	ldrh	r3, [r4, #12]
 8019714:	071a      	lsls	r2, r3, #28
 8019716:	d52f      	bpl.n	8019778 <__swbuf_r+0x84>
 8019718:	6923      	ldr	r3, [r4, #16]
 801971a:	b36b      	cbz	r3, 8019778 <__swbuf_r+0x84>
 801971c:	6923      	ldr	r3, [r4, #16]
 801971e:	6820      	ldr	r0, [r4, #0]
 8019720:	1ac0      	subs	r0, r0, r3
 8019722:	6963      	ldr	r3, [r4, #20]
 8019724:	b2f6      	uxtb	r6, r6
 8019726:	4283      	cmp	r3, r0
 8019728:	4637      	mov	r7, r6
 801972a:	dc04      	bgt.n	8019736 <__swbuf_r+0x42>
 801972c:	4621      	mov	r1, r4
 801972e:	4628      	mov	r0, r5
 8019730:	f000 f926 	bl	8019980 <_fflush_r>
 8019734:	bb30      	cbnz	r0, 8019784 <__swbuf_r+0x90>
 8019736:	68a3      	ldr	r3, [r4, #8]
 8019738:	3b01      	subs	r3, #1
 801973a:	60a3      	str	r3, [r4, #8]
 801973c:	6823      	ldr	r3, [r4, #0]
 801973e:	1c5a      	adds	r2, r3, #1
 8019740:	6022      	str	r2, [r4, #0]
 8019742:	701e      	strb	r6, [r3, #0]
 8019744:	6963      	ldr	r3, [r4, #20]
 8019746:	3001      	adds	r0, #1
 8019748:	4283      	cmp	r3, r0
 801974a:	d004      	beq.n	8019756 <__swbuf_r+0x62>
 801974c:	89a3      	ldrh	r3, [r4, #12]
 801974e:	07db      	lsls	r3, r3, #31
 8019750:	d506      	bpl.n	8019760 <__swbuf_r+0x6c>
 8019752:	2e0a      	cmp	r6, #10
 8019754:	d104      	bne.n	8019760 <__swbuf_r+0x6c>
 8019756:	4621      	mov	r1, r4
 8019758:	4628      	mov	r0, r5
 801975a:	f000 f911 	bl	8019980 <_fflush_r>
 801975e:	b988      	cbnz	r0, 8019784 <__swbuf_r+0x90>
 8019760:	4638      	mov	r0, r7
 8019762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019764:	4b0a      	ldr	r3, [pc, #40]	; (8019790 <__swbuf_r+0x9c>)
 8019766:	429c      	cmp	r4, r3
 8019768:	d101      	bne.n	801976e <__swbuf_r+0x7a>
 801976a:	68ac      	ldr	r4, [r5, #8]
 801976c:	e7cf      	b.n	801970e <__swbuf_r+0x1a>
 801976e:	4b09      	ldr	r3, [pc, #36]	; (8019794 <__swbuf_r+0xa0>)
 8019770:	429c      	cmp	r4, r3
 8019772:	bf08      	it	eq
 8019774:	68ec      	ldreq	r4, [r5, #12]
 8019776:	e7ca      	b.n	801970e <__swbuf_r+0x1a>
 8019778:	4621      	mov	r1, r4
 801977a:	4628      	mov	r0, r5
 801977c:	f000 f80c 	bl	8019798 <__swsetup_r>
 8019780:	2800      	cmp	r0, #0
 8019782:	d0cb      	beq.n	801971c <__swbuf_r+0x28>
 8019784:	f04f 37ff 	mov.w	r7, #4294967295
 8019788:	e7ea      	b.n	8019760 <__swbuf_r+0x6c>
 801978a:	bf00      	nop
 801978c:	0801a924 	.word	0x0801a924
 8019790:	0801a944 	.word	0x0801a944
 8019794:	0801a904 	.word	0x0801a904

08019798 <__swsetup_r>:
 8019798:	4b32      	ldr	r3, [pc, #200]	; (8019864 <__swsetup_r+0xcc>)
 801979a:	b570      	push	{r4, r5, r6, lr}
 801979c:	681d      	ldr	r5, [r3, #0]
 801979e:	4606      	mov	r6, r0
 80197a0:	460c      	mov	r4, r1
 80197a2:	b125      	cbz	r5, 80197ae <__swsetup_r+0x16>
 80197a4:	69ab      	ldr	r3, [r5, #24]
 80197a6:	b913      	cbnz	r3, 80197ae <__swsetup_r+0x16>
 80197a8:	4628      	mov	r0, r5
 80197aa:	f000 f97d 	bl	8019aa8 <__sinit>
 80197ae:	4b2e      	ldr	r3, [pc, #184]	; (8019868 <__swsetup_r+0xd0>)
 80197b0:	429c      	cmp	r4, r3
 80197b2:	d10f      	bne.n	80197d4 <__swsetup_r+0x3c>
 80197b4:	686c      	ldr	r4, [r5, #4]
 80197b6:	89a3      	ldrh	r3, [r4, #12]
 80197b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80197bc:	0719      	lsls	r1, r3, #28
 80197be:	d42c      	bmi.n	801981a <__swsetup_r+0x82>
 80197c0:	06dd      	lsls	r5, r3, #27
 80197c2:	d411      	bmi.n	80197e8 <__swsetup_r+0x50>
 80197c4:	2309      	movs	r3, #9
 80197c6:	6033      	str	r3, [r6, #0]
 80197c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80197cc:	81a3      	strh	r3, [r4, #12]
 80197ce:	f04f 30ff 	mov.w	r0, #4294967295
 80197d2:	e03e      	b.n	8019852 <__swsetup_r+0xba>
 80197d4:	4b25      	ldr	r3, [pc, #148]	; (801986c <__swsetup_r+0xd4>)
 80197d6:	429c      	cmp	r4, r3
 80197d8:	d101      	bne.n	80197de <__swsetup_r+0x46>
 80197da:	68ac      	ldr	r4, [r5, #8]
 80197dc:	e7eb      	b.n	80197b6 <__swsetup_r+0x1e>
 80197de:	4b24      	ldr	r3, [pc, #144]	; (8019870 <__swsetup_r+0xd8>)
 80197e0:	429c      	cmp	r4, r3
 80197e2:	bf08      	it	eq
 80197e4:	68ec      	ldreq	r4, [r5, #12]
 80197e6:	e7e6      	b.n	80197b6 <__swsetup_r+0x1e>
 80197e8:	0758      	lsls	r0, r3, #29
 80197ea:	d512      	bpl.n	8019812 <__swsetup_r+0x7a>
 80197ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80197ee:	b141      	cbz	r1, 8019802 <__swsetup_r+0x6a>
 80197f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80197f4:	4299      	cmp	r1, r3
 80197f6:	d002      	beq.n	80197fe <__swsetup_r+0x66>
 80197f8:	4630      	mov	r0, r6
 80197fa:	f7fd fb87 	bl	8016f0c <_free_r>
 80197fe:	2300      	movs	r3, #0
 8019800:	6363      	str	r3, [r4, #52]	; 0x34
 8019802:	89a3      	ldrh	r3, [r4, #12]
 8019804:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019808:	81a3      	strh	r3, [r4, #12]
 801980a:	2300      	movs	r3, #0
 801980c:	6063      	str	r3, [r4, #4]
 801980e:	6923      	ldr	r3, [r4, #16]
 8019810:	6023      	str	r3, [r4, #0]
 8019812:	89a3      	ldrh	r3, [r4, #12]
 8019814:	f043 0308 	orr.w	r3, r3, #8
 8019818:	81a3      	strh	r3, [r4, #12]
 801981a:	6923      	ldr	r3, [r4, #16]
 801981c:	b94b      	cbnz	r3, 8019832 <__swsetup_r+0x9a>
 801981e:	89a3      	ldrh	r3, [r4, #12]
 8019820:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019828:	d003      	beq.n	8019832 <__swsetup_r+0x9a>
 801982a:	4621      	mov	r1, r4
 801982c:	4630      	mov	r0, r6
 801982e:	f000 f9fd 	bl	8019c2c <__smakebuf_r>
 8019832:	89a0      	ldrh	r0, [r4, #12]
 8019834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019838:	f010 0301 	ands.w	r3, r0, #1
 801983c:	d00a      	beq.n	8019854 <__swsetup_r+0xbc>
 801983e:	2300      	movs	r3, #0
 8019840:	60a3      	str	r3, [r4, #8]
 8019842:	6963      	ldr	r3, [r4, #20]
 8019844:	425b      	negs	r3, r3
 8019846:	61a3      	str	r3, [r4, #24]
 8019848:	6923      	ldr	r3, [r4, #16]
 801984a:	b943      	cbnz	r3, 801985e <__swsetup_r+0xc6>
 801984c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019850:	d1ba      	bne.n	80197c8 <__swsetup_r+0x30>
 8019852:	bd70      	pop	{r4, r5, r6, pc}
 8019854:	0781      	lsls	r1, r0, #30
 8019856:	bf58      	it	pl
 8019858:	6963      	ldrpl	r3, [r4, #20]
 801985a:	60a3      	str	r3, [r4, #8]
 801985c:	e7f4      	b.n	8019848 <__swsetup_r+0xb0>
 801985e:	2000      	movs	r0, #0
 8019860:	e7f7      	b.n	8019852 <__swsetup_r+0xba>
 8019862:	bf00      	nop
 8019864:	2000000c 	.word	0x2000000c
 8019868:	0801a924 	.word	0x0801a924
 801986c:	0801a944 	.word	0x0801a944
 8019870:	0801a904 	.word	0x0801a904

08019874 <__sflush_r>:
 8019874:	898a      	ldrh	r2, [r1, #12]
 8019876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801987a:	4605      	mov	r5, r0
 801987c:	0710      	lsls	r0, r2, #28
 801987e:	460c      	mov	r4, r1
 8019880:	d458      	bmi.n	8019934 <__sflush_r+0xc0>
 8019882:	684b      	ldr	r3, [r1, #4]
 8019884:	2b00      	cmp	r3, #0
 8019886:	dc05      	bgt.n	8019894 <__sflush_r+0x20>
 8019888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801988a:	2b00      	cmp	r3, #0
 801988c:	dc02      	bgt.n	8019894 <__sflush_r+0x20>
 801988e:	2000      	movs	r0, #0
 8019890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019896:	2e00      	cmp	r6, #0
 8019898:	d0f9      	beq.n	801988e <__sflush_r+0x1a>
 801989a:	2300      	movs	r3, #0
 801989c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80198a0:	682f      	ldr	r7, [r5, #0]
 80198a2:	602b      	str	r3, [r5, #0]
 80198a4:	d032      	beq.n	801990c <__sflush_r+0x98>
 80198a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80198a8:	89a3      	ldrh	r3, [r4, #12]
 80198aa:	075a      	lsls	r2, r3, #29
 80198ac:	d505      	bpl.n	80198ba <__sflush_r+0x46>
 80198ae:	6863      	ldr	r3, [r4, #4]
 80198b0:	1ac0      	subs	r0, r0, r3
 80198b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80198b4:	b10b      	cbz	r3, 80198ba <__sflush_r+0x46>
 80198b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80198b8:	1ac0      	subs	r0, r0, r3
 80198ba:	2300      	movs	r3, #0
 80198bc:	4602      	mov	r2, r0
 80198be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80198c0:	6a21      	ldr	r1, [r4, #32]
 80198c2:	4628      	mov	r0, r5
 80198c4:	47b0      	blx	r6
 80198c6:	1c43      	adds	r3, r0, #1
 80198c8:	89a3      	ldrh	r3, [r4, #12]
 80198ca:	d106      	bne.n	80198da <__sflush_r+0x66>
 80198cc:	6829      	ldr	r1, [r5, #0]
 80198ce:	291d      	cmp	r1, #29
 80198d0:	d82c      	bhi.n	801992c <__sflush_r+0xb8>
 80198d2:	4a2a      	ldr	r2, [pc, #168]	; (801997c <__sflush_r+0x108>)
 80198d4:	40ca      	lsrs	r2, r1
 80198d6:	07d6      	lsls	r6, r2, #31
 80198d8:	d528      	bpl.n	801992c <__sflush_r+0xb8>
 80198da:	2200      	movs	r2, #0
 80198dc:	6062      	str	r2, [r4, #4]
 80198de:	04d9      	lsls	r1, r3, #19
 80198e0:	6922      	ldr	r2, [r4, #16]
 80198e2:	6022      	str	r2, [r4, #0]
 80198e4:	d504      	bpl.n	80198f0 <__sflush_r+0x7c>
 80198e6:	1c42      	adds	r2, r0, #1
 80198e8:	d101      	bne.n	80198ee <__sflush_r+0x7a>
 80198ea:	682b      	ldr	r3, [r5, #0]
 80198ec:	b903      	cbnz	r3, 80198f0 <__sflush_r+0x7c>
 80198ee:	6560      	str	r0, [r4, #84]	; 0x54
 80198f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80198f2:	602f      	str	r7, [r5, #0]
 80198f4:	2900      	cmp	r1, #0
 80198f6:	d0ca      	beq.n	801988e <__sflush_r+0x1a>
 80198f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80198fc:	4299      	cmp	r1, r3
 80198fe:	d002      	beq.n	8019906 <__sflush_r+0x92>
 8019900:	4628      	mov	r0, r5
 8019902:	f7fd fb03 	bl	8016f0c <_free_r>
 8019906:	2000      	movs	r0, #0
 8019908:	6360      	str	r0, [r4, #52]	; 0x34
 801990a:	e7c1      	b.n	8019890 <__sflush_r+0x1c>
 801990c:	6a21      	ldr	r1, [r4, #32]
 801990e:	2301      	movs	r3, #1
 8019910:	4628      	mov	r0, r5
 8019912:	47b0      	blx	r6
 8019914:	1c41      	adds	r1, r0, #1
 8019916:	d1c7      	bne.n	80198a8 <__sflush_r+0x34>
 8019918:	682b      	ldr	r3, [r5, #0]
 801991a:	2b00      	cmp	r3, #0
 801991c:	d0c4      	beq.n	80198a8 <__sflush_r+0x34>
 801991e:	2b1d      	cmp	r3, #29
 8019920:	d001      	beq.n	8019926 <__sflush_r+0xb2>
 8019922:	2b16      	cmp	r3, #22
 8019924:	d101      	bne.n	801992a <__sflush_r+0xb6>
 8019926:	602f      	str	r7, [r5, #0]
 8019928:	e7b1      	b.n	801988e <__sflush_r+0x1a>
 801992a:	89a3      	ldrh	r3, [r4, #12]
 801992c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019930:	81a3      	strh	r3, [r4, #12]
 8019932:	e7ad      	b.n	8019890 <__sflush_r+0x1c>
 8019934:	690f      	ldr	r7, [r1, #16]
 8019936:	2f00      	cmp	r7, #0
 8019938:	d0a9      	beq.n	801988e <__sflush_r+0x1a>
 801993a:	0793      	lsls	r3, r2, #30
 801993c:	680e      	ldr	r6, [r1, #0]
 801993e:	bf08      	it	eq
 8019940:	694b      	ldreq	r3, [r1, #20]
 8019942:	600f      	str	r7, [r1, #0]
 8019944:	bf18      	it	ne
 8019946:	2300      	movne	r3, #0
 8019948:	eba6 0807 	sub.w	r8, r6, r7
 801994c:	608b      	str	r3, [r1, #8]
 801994e:	f1b8 0f00 	cmp.w	r8, #0
 8019952:	dd9c      	ble.n	801988e <__sflush_r+0x1a>
 8019954:	6a21      	ldr	r1, [r4, #32]
 8019956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019958:	4643      	mov	r3, r8
 801995a:	463a      	mov	r2, r7
 801995c:	4628      	mov	r0, r5
 801995e:	47b0      	blx	r6
 8019960:	2800      	cmp	r0, #0
 8019962:	dc06      	bgt.n	8019972 <__sflush_r+0xfe>
 8019964:	89a3      	ldrh	r3, [r4, #12]
 8019966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801996a:	81a3      	strh	r3, [r4, #12]
 801996c:	f04f 30ff 	mov.w	r0, #4294967295
 8019970:	e78e      	b.n	8019890 <__sflush_r+0x1c>
 8019972:	4407      	add	r7, r0
 8019974:	eba8 0800 	sub.w	r8, r8, r0
 8019978:	e7e9      	b.n	801994e <__sflush_r+0xda>
 801997a:	bf00      	nop
 801997c:	20400001 	.word	0x20400001

08019980 <_fflush_r>:
 8019980:	b538      	push	{r3, r4, r5, lr}
 8019982:	690b      	ldr	r3, [r1, #16]
 8019984:	4605      	mov	r5, r0
 8019986:	460c      	mov	r4, r1
 8019988:	b913      	cbnz	r3, 8019990 <_fflush_r+0x10>
 801998a:	2500      	movs	r5, #0
 801998c:	4628      	mov	r0, r5
 801998e:	bd38      	pop	{r3, r4, r5, pc}
 8019990:	b118      	cbz	r0, 801999a <_fflush_r+0x1a>
 8019992:	6983      	ldr	r3, [r0, #24]
 8019994:	b90b      	cbnz	r3, 801999a <_fflush_r+0x1a>
 8019996:	f000 f887 	bl	8019aa8 <__sinit>
 801999a:	4b14      	ldr	r3, [pc, #80]	; (80199ec <_fflush_r+0x6c>)
 801999c:	429c      	cmp	r4, r3
 801999e:	d11b      	bne.n	80199d8 <_fflush_r+0x58>
 80199a0:	686c      	ldr	r4, [r5, #4]
 80199a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d0ef      	beq.n	801998a <_fflush_r+0xa>
 80199aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80199ac:	07d0      	lsls	r0, r2, #31
 80199ae:	d404      	bmi.n	80199ba <_fflush_r+0x3a>
 80199b0:	0599      	lsls	r1, r3, #22
 80199b2:	d402      	bmi.n	80199ba <_fflush_r+0x3a>
 80199b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199b6:	f7ff fbae 	bl	8019116 <__retarget_lock_acquire_recursive>
 80199ba:	4628      	mov	r0, r5
 80199bc:	4621      	mov	r1, r4
 80199be:	f7ff ff59 	bl	8019874 <__sflush_r>
 80199c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80199c4:	07da      	lsls	r2, r3, #31
 80199c6:	4605      	mov	r5, r0
 80199c8:	d4e0      	bmi.n	801998c <_fflush_r+0xc>
 80199ca:	89a3      	ldrh	r3, [r4, #12]
 80199cc:	059b      	lsls	r3, r3, #22
 80199ce:	d4dd      	bmi.n	801998c <_fflush_r+0xc>
 80199d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199d2:	f7ff fba1 	bl	8019118 <__retarget_lock_release_recursive>
 80199d6:	e7d9      	b.n	801998c <_fflush_r+0xc>
 80199d8:	4b05      	ldr	r3, [pc, #20]	; (80199f0 <_fflush_r+0x70>)
 80199da:	429c      	cmp	r4, r3
 80199dc:	d101      	bne.n	80199e2 <_fflush_r+0x62>
 80199de:	68ac      	ldr	r4, [r5, #8]
 80199e0:	e7df      	b.n	80199a2 <_fflush_r+0x22>
 80199e2:	4b04      	ldr	r3, [pc, #16]	; (80199f4 <_fflush_r+0x74>)
 80199e4:	429c      	cmp	r4, r3
 80199e6:	bf08      	it	eq
 80199e8:	68ec      	ldreq	r4, [r5, #12]
 80199ea:	e7da      	b.n	80199a2 <_fflush_r+0x22>
 80199ec:	0801a924 	.word	0x0801a924
 80199f0:	0801a944 	.word	0x0801a944
 80199f4:	0801a904 	.word	0x0801a904

080199f8 <std>:
 80199f8:	2300      	movs	r3, #0
 80199fa:	b510      	push	{r4, lr}
 80199fc:	4604      	mov	r4, r0
 80199fe:	e9c0 3300 	strd	r3, r3, [r0]
 8019a02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019a06:	6083      	str	r3, [r0, #8]
 8019a08:	8181      	strh	r1, [r0, #12]
 8019a0a:	6643      	str	r3, [r0, #100]	; 0x64
 8019a0c:	81c2      	strh	r2, [r0, #14]
 8019a0e:	6183      	str	r3, [r0, #24]
 8019a10:	4619      	mov	r1, r3
 8019a12:	2208      	movs	r2, #8
 8019a14:	305c      	adds	r0, #92	; 0x5c
 8019a16:	f7fd fa71 	bl	8016efc <memset>
 8019a1a:	4b05      	ldr	r3, [pc, #20]	; (8019a30 <std+0x38>)
 8019a1c:	6263      	str	r3, [r4, #36]	; 0x24
 8019a1e:	4b05      	ldr	r3, [pc, #20]	; (8019a34 <std+0x3c>)
 8019a20:	62a3      	str	r3, [r4, #40]	; 0x28
 8019a22:	4b05      	ldr	r3, [pc, #20]	; (8019a38 <std+0x40>)
 8019a24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019a26:	4b05      	ldr	r3, [pc, #20]	; (8019a3c <std+0x44>)
 8019a28:	6224      	str	r4, [r4, #32]
 8019a2a:	6323      	str	r3, [r4, #48]	; 0x30
 8019a2c:	bd10      	pop	{r4, pc}
 8019a2e:	bf00      	nop
 8019a30:	08019cad 	.word	0x08019cad
 8019a34:	08019ccf 	.word	0x08019ccf
 8019a38:	08019d07 	.word	0x08019d07
 8019a3c:	08019d2b 	.word	0x08019d2b

08019a40 <_cleanup_r>:
 8019a40:	4901      	ldr	r1, [pc, #4]	; (8019a48 <_cleanup_r+0x8>)
 8019a42:	f000 b8af 	b.w	8019ba4 <_fwalk_reent>
 8019a46:	bf00      	nop
 8019a48:	08019981 	.word	0x08019981

08019a4c <__sfmoreglue>:
 8019a4c:	b570      	push	{r4, r5, r6, lr}
 8019a4e:	1e4a      	subs	r2, r1, #1
 8019a50:	2568      	movs	r5, #104	; 0x68
 8019a52:	4355      	muls	r5, r2
 8019a54:	460e      	mov	r6, r1
 8019a56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019a5a:	f7fd faa7 	bl	8016fac <_malloc_r>
 8019a5e:	4604      	mov	r4, r0
 8019a60:	b140      	cbz	r0, 8019a74 <__sfmoreglue+0x28>
 8019a62:	2100      	movs	r1, #0
 8019a64:	e9c0 1600 	strd	r1, r6, [r0]
 8019a68:	300c      	adds	r0, #12
 8019a6a:	60a0      	str	r0, [r4, #8]
 8019a6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019a70:	f7fd fa44 	bl	8016efc <memset>
 8019a74:	4620      	mov	r0, r4
 8019a76:	bd70      	pop	{r4, r5, r6, pc}

08019a78 <__sfp_lock_acquire>:
 8019a78:	4801      	ldr	r0, [pc, #4]	; (8019a80 <__sfp_lock_acquire+0x8>)
 8019a7a:	f7ff bb4c 	b.w	8019116 <__retarget_lock_acquire_recursive>
 8019a7e:	bf00      	nop
 8019a80:	200004e4 	.word	0x200004e4

08019a84 <__sfp_lock_release>:
 8019a84:	4801      	ldr	r0, [pc, #4]	; (8019a8c <__sfp_lock_release+0x8>)
 8019a86:	f7ff bb47 	b.w	8019118 <__retarget_lock_release_recursive>
 8019a8a:	bf00      	nop
 8019a8c:	200004e4 	.word	0x200004e4

08019a90 <__sinit_lock_acquire>:
 8019a90:	4801      	ldr	r0, [pc, #4]	; (8019a98 <__sinit_lock_acquire+0x8>)
 8019a92:	f7ff bb40 	b.w	8019116 <__retarget_lock_acquire_recursive>
 8019a96:	bf00      	nop
 8019a98:	200004df 	.word	0x200004df

08019a9c <__sinit_lock_release>:
 8019a9c:	4801      	ldr	r0, [pc, #4]	; (8019aa4 <__sinit_lock_release+0x8>)
 8019a9e:	f7ff bb3b 	b.w	8019118 <__retarget_lock_release_recursive>
 8019aa2:	bf00      	nop
 8019aa4:	200004df 	.word	0x200004df

08019aa8 <__sinit>:
 8019aa8:	b510      	push	{r4, lr}
 8019aaa:	4604      	mov	r4, r0
 8019aac:	f7ff fff0 	bl	8019a90 <__sinit_lock_acquire>
 8019ab0:	69a3      	ldr	r3, [r4, #24]
 8019ab2:	b11b      	cbz	r3, 8019abc <__sinit+0x14>
 8019ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ab8:	f7ff bff0 	b.w	8019a9c <__sinit_lock_release>
 8019abc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019ac0:	6523      	str	r3, [r4, #80]	; 0x50
 8019ac2:	4b13      	ldr	r3, [pc, #76]	; (8019b10 <__sinit+0x68>)
 8019ac4:	4a13      	ldr	r2, [pc, #76]	; (8019b14 <__sinit+0x6c>)
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	62a2      	str	r2, [r4, #40]	; 0x28
 8019aca:	42a3      	cmp	r3, r4
 8019acc:	bf04      	itt	eq
 8019ace:	2301      	moveq	r3, #1
 8019ad0:	61a3      	streq	r3, [r4, #24]
 8019ad2:	4620      	mov	r0, r4
 8019ad4:	f000 f820 	bl	8019b18 <__sfp>
 8019ad8:	6060      	str	r0, [r4, #4]
 8019ada:	4620      	mov	r0, r4
 8019adc:	f000 f81c 	bl	8019b18 <__sfp>
 8019ae0:	60a0      	str	r0, [r4, #8]
 8019ae2:	4620      	mov	r0, r4
 8019ae4:	f000 f818 	bl	8019b18 <__sfp>
 8019ae8:	2200      	movs	r2, #0
 8019aea:	60e0      	str	r0, [r4, #12]
 8019aec:	2104      	movs	r1, #4
 8019aee:	6860      	ldr	r0, [r4, #4]
 8019af0:	f7ff ff82 	bl	80199f8 <std>
 8019af4:	68a0      	ldr	r0, [r4, #8]
 8019af6:	2201      	movs	r2, #1
 8019af8:	2109      	movs	r1, #9
 8019afa:	f7ff ff7d 	bl	80199f8 <std>
 8019afe:	68e0      	ldr	r0, [r4, #12]
 8019b00:	2202      	movs	r2, #2
 8019b02:	2112      	movs	r1, #18
 8019b04:	f7ff ff78 	bl	80199f8 <std>
 8019b08:	2301      	movs	r3, #1
 8019b0a:	61a3      	str	r3, [r4, #24]
 8019b0c:	e7d2      	b.n	8019ab4 <__sinit+0xc>
 8019b0e:	bf00      	nop
 8019b10:	0801a504 	.word	0x0801a504
 8019b14:	08019a41 	.word	0x08019a41

08019b18 <__sfp>:
 8019b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b1a:	4607      	mov	r7, r0
 8019b1c:	f7ff ffac 	bl	8019a78 <__sfp_lock_acquire>
 8019b20:	4b1e      	ldr	r3, [pc, #120]	; (8019b9c <__sfp+0x84>)
 8019b22:	681e      	ldr	r6, [r3, #0]
 8019b24:	69b3      	ldr	r3, [r6, #24]
 8019b26:	b913      	cbnz	r3, 8019b2e <__sfp+0x16>
 8019b28:	4630      	mov	r0, r6
 8019b2a:	f7ff ffbd 	bl	8019aa8 <__sinit>
 8019b2e:	3648      	adds	r6, #72	; 0x48
 8019b30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019b34:	3b01      	subs	r3, #1
 8019b36:	d503      	bpl.n	8019b40 <__sfp+0x28>
 8019b38:	6833      	ldr	r3, [r6, #0]
 8019b3a:	b30b      	cbz	r3, 8019b80 <__sfp+0x68>
 8019b3c:	6836      	ldr	r6, [r6, #0]
 8019b3e:	e7f7      	b.n	8019b30 <__sfp+0x18>
 8019b40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019b44:	b9d5      	cbnz	r5, 8019b7c <__sfp+0x64>
 8019b46:	4b16      	ldr	r3, [pc, #88]	; (8019ba0 <__sfp+0x88>)
 8019b48:	60e3      	str	r3, [r4, #12]
 8019b4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019b4e:	6665      	str	r5, [r4, #100]	; 0x64
 8019b50:	f7ff fae0 	bl	8019114 <__retarget_lock_init_recursive>
 8019b54:	f7ff ff96 	bl	8019a84 <__sfp_lock_release>
 8019b58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019b5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019b60:	6025      	str	r5, [r4, #0]
 8019b62:	61a5      	str	r5, [r4, #24]
 8019b64:	2208      	movs	r2, #8
 8019b66:	4629      	mov	r1, r5
 8019b68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019b6c:	f7fd f9c6 	bl	8016efc <memset>
 8019b70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019b74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019b78:	4620      	mov	r0, r4
 8019b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b7c:	3468      	adds	r4, #104	; 0x68
 8019b7e:	e7d9      	b.n	8019b34 <__sfp+0x1c>
 8019b80:	2104      	movs	r1, #4
 8019b82:	4638      	mov	r0, r7
 8019b84:	f7ff ff62 	bl	8019a4c <__sfmoreglue>
 8019b88:	4604      	mov	r4, r0
 8019b8a:	6030      	str	r0, [r6, #0]
 8019b8c:	2800      	cmp	r0, #0
 8019b8e:	d1d5      	bne.n	8019b3c <__sfp+0x24>
 8019b90:	f7ff ff78 	bl	8019a84 <__sfp_lock_release>
 8019b94:	230c      	movs	r3, #12
 8019b96:	603b      	str	r3, [r7, #0]
 8019b98:	e7ee      	b.n	8019b78 <__sfp+0x60>
 8019b9a:	bf00      	nop
 8019b9c:	0801a504 	.word	0x0801a504
 8019ba0:	ffff0001 	.word	0xffff0001

08019ba4 <_fwalk_reent>:
 8019ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ba8:	4606      	mov	r6, r0
 8019baa:	4688      	mov	r8, r1
 8019bac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019bb0:	2700      	movs	r7, #0
 8019bb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019bb6:	f1b9 0901 	subs.w	r9, r9, #1
 8019bba:	d505      	bpl.n	8019bc8 <_fwalk_reent+0x24>
 8019bbc:	6824      	ldr	r4, [r4, #0]
 8019bbe:	2c00      	cmp	r4, #0
 8019bc0:	d1f7      	bne.n	8019bb2 <_fwalk_reent+0xe>
 8019bc2:	4638      	mov	r0, r7
 8019bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bc8:	89ab      	ldrh	r3, [r5, #12]
 8019bca:	2b01      	cmp	r3, #1
 8019bcc:	d907      	bls.n	8019bde <_fwalk_reent+0x3a>
 8019bce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019bd2:	3301      	adds	r3, #1
 8019bd4:	d003      	beq.n	8019bde <_fwalk_reent+0x3a>
 8019bd6:	4629      	mov	r1, r5
 8019bd8:	4630      	mov	r0, r6
 8019bda:	47c0      	blx	r8
 8019bdc:	4307      	orrs	r7, r0
 8019bde:	3568      	adds	r5, #104	; 0x68
 8019be0:	e7e9      	b.n	8019bb6 <_fwalk_reent+0x12>

08019be2 <__swhatbuf_r>:
 8019be2:	b570      	push	{r4, r5, r6, lr}
 8019be4:	460e      	mov	r6, r1
 8019be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019bea:	2900      	cmp	r1, #0
 8019bec:	b096      	sub	sp, #88	; 0x58
 8019bee:	4614      	mov	r4, r2
 8019bf0:	461d      	mov	r5, r3
 8019bf2:	da07      	bge.n	8019c04 <__swhatbuf_r+0x22>
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	602b      	str	r3, [r5, #0]
 8019bf8:	89b3      	ldrh	r3, [r6, #12]
 8019bfa:	061a      	lsls	r2, r3, #24
 8019bfc:	d410      	bmi.n	8019c20 <__swhatbuf_r+0x3e>
 8019bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019c02:	e00e      	b.n	8019c22 <__swhatbuf_r+0x40>
 8019c04:	466a      	mov	r2, sp
 8019c06:	f000 f8b7 	bl	8019d78 <_fstat_r>
 8019c0a:	2800      	cmp	r0, #0
 8019c0c:	dbf2      	blt.n	8019bf4 <__swhatbuf_r+0x12>
 8019c0e:	9a01      	ldr	r2, [sp, #4]
 8019c10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019c14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019c18:	425a      	negs	r2, r3
 8019c1a:	415a      	adcs	r2, r3
 8019c1c:	602a      	str	r2, [r5, #0]
 8019c1e:	e7ee      	b.n	8019bfe <__swhatbuf_r+0x1c>
 8019c20:	2340      	movs	r3, #64	; 0x40
 8019c22:	2000      	movs	r0, #0
 8019c24:	6023      	str	r3, [r4, #0]
 8019c26:	b016      	add	sp, #88	; 0x58
 8019c28:	bd70      	pop	{r4, r5, r6, pc}
	...

08019c2c <__smakebuf_r>:
 8019c2c:	898b      	ldrh	r3, [r1, #12]
 8019c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019c30:	079d      	lsls	r5, r3, #30
 8019c32:	4606      	mov	r6, r0
 8019c34:	460c      	mov	r4, r1
 8019c36:	d507      	bpl.n	8019c48 <__smakebuf_r+0x1c>
 8019c38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019c3c:	6023      	str	r3, [r4, #0]
 8019c3e:	6123      	str	r3, [r4, #16]
 8019c40:	2301      	movs	r3, #1
 8019c42:	6163      	str	r3, [r4, #20]
 8019c44:	b002      	add	sp, #8
 8019c46:	bd70      	pop	{r4, r5, r6, pc}
 8019c48:	ab01      	add	r3, sp, #4
 8019c4a:	466a      	mov	r2, sp
 8019c4c:	f7ff ffc9 	bl	8019be2 <__swhatbuf_r>
 8019c50:	9900      	ldr	r1, [sp, #0]
 8019c52:	4605      	mov	r5, r0
 8019c54:	4630      	mov	r0, r6
 8019c56:	f7fd f9a9 	bl	8016fac <_malloc_r>
 8019c5a:	b948      	cbnz	r0, 8019c70 <__smakebuf_r+0x44>
 8019c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c60:	059a      	lsls	r2, r3, #22
 8019c62:	d4ef      	bmi.n	8019c44 <__smakebuf_r+0x18>
 8019c64:	f023 0303 	bic.w	r3, r3, #3
 8019c68:	f043 0302 	orr.w	r3, r3, #2
 8019c6c:	81a3      	strh	r3, [r4, #12]
 8019c6e:	e7e3      	b.n	8019c38 <__smakebuf_r+0xc>
 8019c70:	4b0d      	ldr	r3, [pc, #52]	; (8019ca8 <__smakebuf_r+0x7c>)
 8019c72:	62b3      	str	r3, [r6, #40]	; 0x28
 8019c74:	89a3      	ldrh	r3, [r4, #12]
 8019c76:	6020      	str	r0, [r4, #0]
 8019c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c7c:	81a3      	strh	r3, [r4, #12]
 8019c7e:	9b00      	ldr	r3, [sp, #0]
 8019c80:	6163      	str	r3, [r4, #20]
 8019c82:	9b01      	ldr	r3, [sp, #4]
 8019c84:	6120      	str	r0, [r4, #16]
 8019c86:	b15b      	cbz	r3, 8019ca0 <__smakebuf_r+0x74>
 8019c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c8c:	4630      	mov	r0, r6
 8019c8e:	f000 f885 	bl	8019d9c <_isatty_r>
 8019c92:	b128      	cbz	r0, 8019ca0 <__smakebuf_r+0x74>
 8019c94:	89a3      	ldrh	r3, [r4, #12]
 8019c96:	f023 0303 	bic.w	r3, r3, #3
 8019c9a:	f043 0301 	orr.w	r3, r3, #1
 8019c9e:	81a3      	strh	r3, [r4, #12]
 8019ca0:	89a0      	ldrh	r0, [r4, #12]
 8019ca2:	4305      	orrs	r5, r0
 8019ca4:	81a5      	strh	r5, [r4, #12]
 8019ca6:	e7cd      	b.n	8019c44 <__smakebuf_r+0x18>
 8019ca8:	08019a41 	.word	0x08019a41

08019cac <__sread>:
 8019cac:	b510      	push	{r4, lr}
 8019cae:	460c      	mov	r4, r1
 8019cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cb4:	f000 f894 	bl	8019de0 <_read_r>
 8019cb8:	2800      	cmp	r0, #0
 8019cba:	bfab      	itete	ge
 8019cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8019cc0:	181b      	addge	r3, r3, r0
 8019cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019cc6:	bfac      	ite	ge
 8019cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8019cca:	81a3      	strhlt	r3, [r4, #12]
 8019ccc:	bd10      	pop	{r4, pc}

08019cce <__swrite>:
 8019cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cd2:	461f      	mov	r7, r3
 8019cd4:	898b      	ldrh	r3, [r1, #12]
 8019cd6:	05db      	lsls	r3, r3, #23
 8019cd8:	4605      	mov	r5, r0
 8019cda:	460c      	mov	r4, r1
 8019cdc:	4616      	mov	r6, r2
 8019cde:	d505      	bpl.n	8019cec <__swrite+0x1e>
 8019ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ce4:	2302      	movs	r3, #2
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	f000 f868 	bl	8019dbc <_lseek_r>
 8019cec:	89a3      	ldrh	r3, [r4, #12]
 8019cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019cf6:	81a3      	strh	r3, [r4, #12]
 8019cf8:	4632      	mov	r2, r6
 8019cfa:	463b      	mov	r3, r7
 8019cfc:	4628      	mov	r0, r5
 8019cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d02:	f000 b817 	b.w	8019d34 <_write_r>

08019d06 <__sseek>:
 8019d06:	b510      	push	{r4, lr}
 8019d08:	460c      	mov	r4, r1
 8019d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d0e:	f000 f855 	bl	8019dbc <_lseek_r>
 8019d12:	1c43      	adds	r3, r0, #1
 8019d14:	89a3      	ldrh	r3, [r4, #12]
 8019d16:	bf15      	itete	ne
 8019d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8019d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019d22:	81a3      	strheq	r3, [r4, #12]
 8019d24:	bf18      	it	ne
 8019d26:	81a3      	strhne	r3, [r4, #12]
 8019d28:	bd10      	pop	{r4, pc}

08019d2a <__sclose>:
 8019d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d2e:	f000 b813 	b.w	8019d58 <_close_r>
	...

08019d34 <_write_r>:
 8019d34:	b538      	push	{r3, r4, r5, lr}
 8019d36:	4d07      	ldr	r5, [pc, #28]	; (8019d54 <_write_r+0x20>)
 8019d38:	4604      	mov	r4, r0
 8019d3a:	4608      	mov	r0, r1
 8019d3c:	4611      	mov	r1, r2
 8019d3e:	2200      	movs	r2, #0
 8019d40:	602a      	str	r2, [r5, #0]
 8019d42:	461a      	mov	r2, r3
 8019d44:	f7f9 fff3 	bl	8013d2e <_write>
 8019d48:	1c43      	adds	r3, r0, #1
 8019d4a:	d102      	bne.n	8019d52 <_write_r+0x1e>
 8019d4c:	682b      	ldr	r3, [r5, #0]
 8019d4e:	b103      	cbz	r3, 8019d52 <_write_r+0x1e>
 8019d50:	6023      	str	r3, [r4, #0]
 8019d52:	bd38      	pop	{r3, r4, r5, pc}
 8019d54:	200004d8 	.word	0x200004d8

08019d58 <_close_r>:
 8019d58:	b538      	push	{r3, r4, r5, lr}
 8019d5a:	4d06      	ldr	r5, [pc, #24]	; (8019d74 <_close_r+0x1c>)
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	4604      	mov	r4, r0
 8019d60:	4608      	mov	r0, r1
 8019d62:	602b      	str	r3, [r5, #0]
 8019d64:	f7f9 ffff 	bl	8013d66 <_close>
 8019d68:	1c43      	adds	r3, r0, #1
 8019d6a:	d102      	bne.n	8019d72 <_close_r+0x1a>
 8019d6c:	682b      	ldr	r3, [r5, #0]
 8019d6e:	b103      	cbz	r3, 8019d72 <_close_r+0x1a>
 8019d70:	6023      	str	r3, [r4, #0]
 8019d72:	bd38      	pop	{r3, r4, r5, pc}
 8019d74:	200004d8 	.word	0x200004d8

08019d78 <_fstat_r>:
 8019d78:	b538      	push	{r3, r4, r5, lr}
 8019d7a:	4d07      	ldr	r5, [pc, #28]	; (8019d98 <_fstat_r+0x20>)
 8019d7c:	2300      	movs	r3, #0
 8019d7e:	4604      	mov	r4, r0
 8019d80:	4608      	mov	r0, r1
 8019d82:	4611      	mov	r1, r2
 8019d84:	602b      	str	r3, [r5, #0]
 8019d86:	f7f9 fffa 	bl	8013d7e <_fstat>
 8019d8a:	1c43      	adds	r3, r0, #1
 8019d8c:	d102      	bne.n	8019d94 <_fstat_r+0x1c>
 8019d8e:	682b      	ldr	r3, [r5, #0]
 8019d90:	b103      	cbz	r3, 8019d94 <_fstat_r+0x1c>
 8019d92:	6023      	str	r3, [r4, #0]
 8019d94:	bd38      	pop	{r3, r4, r5, pc}
 8019d96:	bf00      	nop
 8019d98:	200004d8 	.word	0x200004d8

08019d9c <_isatty_r>:
 8019d9c:	b538      	push	{r3, r4, r5, lr}
 8019d9e:	4d06      	ldr	r5, [pc, #24]	; (8019db8 <_isatty_r+0x1c>)
 8019da0:	2300      	movs	r3, #0
 8019da2:	4604      	mov	r4, r0
 8019da4:	4608      	mov	r0, r1
 8019da6:	602b      	str	r3, [r5, #0]
 8019da8:	f7f9 fff9 	bl	8013d9e <_isatty>
 8019dac:	1c43      	adds	r3, r0, #1
 8019dae:	d102      	bne.n	8019db6 <_isatty_r+0x1a>
 8019db0:	682b      	ldr	r3, [r5, #0]
 8019db2:	b103      	cbz	r3, 8019db6 <_isatty_r+0x1a>
 8019db4:	6023      	str	r3, [r4, #0]
 8019db6:	bd38      	pop	{r3, r4, r5, pc}
 8019db8:	200004d8 	.word	0x200004d8

08019dbc <_lseek_r>:
 8019dbc:	b538      	push	{r3, r4, r5, lr}
 8019dbe:	4d07      	ldr	r5, [pc, #28]	; (8019ddc <_lseek_r+0x20>)
 8019dc0:	4604      	mov	r4, r0
 8019dc2:	4608      	mov	r0, r1
 8019dc4:	4611      	mov	r1, r2
 8019dc6:	2200      	movs	r2, #0
 8019dc8:	602a      	str	r2, [r5, #0]
 8019dca:	461a      	mov	r2, r3
 8019dcc:	f7f9 fff2 	bl	8013db4 <_lseek>
 8019dd0:	1c43      	adds	r3, r0, #1
 8019dd2:	d102      	bne.n	8019dda <_lseek_r+0x1e>
 8019dd4:	682b      	ldr	r3, [r5, #0]
 8019dd6:	b103      	cbz	r3, 8019dda <_lseek_r+0x1e>
 8019dd8:	6023      	str	r3, [r4, #0]
 8019dda:	bd38      	pop	{r3, r4, r5, pc}
 8019ddc:	200004d8 	.word	0x200004d8

08019de0 <_read_r>:
 8019de0:	b538      	push	{r3, r4, r5, lr}
 8019de2:	4d07      	ldr	r5, [pc, #28]	; (8019e00 <_read_r+0x20>)
 8019de4:	4604      	mov	r4, r0
 8019de6:	4608      	mov	r0, r1
 8019de8:	4611      	mov	r1, r2
 8019dea:	2200      	movs	r2, #0
 8019dec:	602a      	str	r2, [r5, #0]
 8019dee:	461a      	mov	r2, r3
 8019df0:	f7f9 ff80 	bl	8013cf4 <_read>
 8019df4:	1c43      	adds	r3, r0, #1
 8019df6:	d102      	bne.n	8019dfe <_read_r+0x1e>
 8019df8:	682b      	ldr	r3, [r5, #0]
 8019dfa:	b103      	cbz	r3, 8019dfe <_read_r+0x1e>
 8019dfc:	6023      	str	r3, [r4, #0]
 8019dfe:	bd38      	pop	{r3, r4, r5, pc}
 8019e00:	200004d8 	.word	0x200004d8

08019e04 <_init>:
 8019e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e06:	bf00      	nop
 8019e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e0a:	bc08      	pop	{r3}
 8019e0c:	469e      	mov	lr, r3
 8019e0e:	4770      	bx	lr

08019e10 <_fini>:
 8019e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e12:	bf00      	nop
 8019e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e16:	bc08      	pop	{r3}
 8019e18:	469e      	mov	lr, r3
 8019e1a:	4770      	bx	lr
