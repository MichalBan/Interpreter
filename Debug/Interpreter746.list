
Interpreter746.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a20c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd4  0801a3e0  0801a3e0  0002a3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801afb4  0801afb4  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801afb4  0801afb4  0002afb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801afbc  0801afbc  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000028  0801afbc  0801afbc  0002afbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000028  0801afe4  0801afe4  0002afe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801b00c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001e0  0801b1ec  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0801b1ec  00030530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   001c8d9e  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000be4c  00000000  00000000  001f8fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000097f0  00000000  00000000  00204e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00009698  00000000  00000000  0020e5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e990  00000000  00000000  00217c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f405  00000000  00000000  00246618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b3920  00000000  00000000  00285a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0043933d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0002f608  00000000  00000000  00439390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a3c4 	.word	0x0801a3c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0801a3c4 	.word	0x0801a3c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9a4 	b.w	8000fd8 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff33 	bl	8000b1c <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fca9 	bl	8000638 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc2a 	bl	8000544 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fca0 	bl	8000638 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fae2 	bl	80002c8 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	468c      	mov	ip, r1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 8083 	bne.w	8000e2a <__udivmoddi4+0x116>
 8000d24:	428a      	cmp	r2, r1
 8000d26:	4617      	mov	r7, r2
 8000d28:	d947      	bls.n	8000dba <__udivmoddi4+0xa6>
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	b142      	cbz	r2, 8000d42 <__udivmoddi4+0x2e>
 8000d30:	f1c2 0020 	rsb	r0, r2, #32
 8000d34:	fa24 f000 	lsr.w	r0, r4, r0
 8000d38:	4091      	lsls	r1, r2
 8000d3a:	4097      	lsls	r7, r2
 8000d3c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d40:	4094      	lsls	r4, r2
 8000d42:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d46:	0c23      	lsrs	r3, r4, #16
 8000d48:	fbbc f6f8 	udiv	r6, ip, r8
 8000d4c:	fa1f fe87 	uxth.w	lr, r7
 8000d50:	fb08 c116 	mls	r1, r8, r6, ip
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f10e 	mul.w	r1, r6, lr
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x60>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d66:	f080 8119 	bcs.w	8000f9c <__udivmoddi4+0x288>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 8116 	bls.w	8000f9c <__udivmoddi4+0x288>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d909      	bls.n	8000da0 <__udivmoddi4+0x8c>
 8000d8c:	193c      	adds	r4, r7, r4
 8000d8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d92:	f080 8105 	bcs.w	8000fa0 <__udivmoddi4+0x28c>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f240 8102 	bls.w	8000fa0 <__udivmoddi4+0x28c>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	443c      	add	r4, r7
 8000da0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da4:	eba4 040e 	sub.w	r4, r4, lr
 8000da8:	2600      	movs	r6, #0
 8000daa:	b11d      	cbz	r5, 8000db4 <__udivmoddi4+0xa0>
 8000dac:	40d4      	lsrs	r4, r2
 8000dae:	2300      	movs	r3, #0
 8000db0:	e9c5 4300 	strd	r4, r3, [r5]
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xaa>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f282 	clz	r2, r2
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d150      	bne.n	8000e68 <__udivmoddi4+0x154>
 8000dc6:	1bcb      	subs	r3, r1, r7
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	fa1f f887 	uxth.w	r8, r7
 8000dd0:	2601      	movs	r6, #1
 8000dd2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dd6:	0c21      	lsrs	r1, r4, #16
 8000dd8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ddc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de0:	fb08 f30c 	mul.w	r3, r8, ip
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0xe4>
 8000de8:	1879      	adds	r1, r7, r1
 8000dea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0xe2>
 8000df0:	428b      	cmp	r3, r1
 8000df2:	f200 80e9 	bhi.w	8000fc8 <__udivmoddi4+0x2b4>
 8000df6:	4684      	mov	ip, r0
 8000df8:	1ac9      	subs	r1, r1, r3
 8000dfa:	b2a3      	uxth	r3, r4
 8000dfc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e00:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e04:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e08:	fb08 f800 	mul.w	r8, r8, r0
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	d907      	bls.n	8000e20 <__udivmoddi4+0x10c>
 8000e10:	193c      	adds	r4, r7, r4
 8000e12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x10a>
 8000e18:	45a0      	cmp	r8, r4
 8000e1a:	f200 80d9 	bhi.w	8000fd0 <__udivmoddi4+0x2bc>
 8000e1e:	4618      	mov	r0, r3
 8000e20:	eba4 0408 	sub.w	r4, r4, r8
 8000e24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e28:	e7bf      	b.n	8000daa <__udivmoddi4+0x96>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d909      	bls.n	8000e42 <__udivmoddi4+0x12e>
 8000e2e:	2d00      	cmp	r5, #0
 8000e30:	f000 80b1 	beq.w	8000f96 <__udivmoddi4+0x282>
 8000e34:	2600      	movs	r6, #0
 8000e36:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	fab3 f683 	clz	r6, r3
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	d14a      	bne.n	8000ee0 <__udivmoddi4+0x1cc>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d302      	bcc.n	8000e54 <__udivmoddi4+0x140>
 8000e4e:	4282      	cmp	r2, r0
 8000e50:	f200 80b8 	bhi.w	8000fc4 <__udivmoddi4+0x2b0>
 8000e54:	1a84      	subs	r4, r0, r2
 8000e56:	eb61 0103 	sbc.w	r1, r1, r3
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	468c      	mov	ip, r1
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	d0a8      	beq.n	8000db4 <__udivmoddi4+0xa0>
 8000e62:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e70:	4097      	lsls	r7, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e7a:	40d9      	lsrs	r1, r3
 8000e7c:	4330      	orrs	r0, r6
 8000e7e:	0c03      	lsrs	r3, r0, #16
 8000e80:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e84:	fa1f f887 	uxth.w	r8, r7
 8000e88:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e90:	fb06 f108 	mul.w	r1, r6, r8
 8000e94:	4299      	cmp	r1, r3
 8000e96:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9a:	d909      	bls.n	8000eb0 <__udivmoddi4+0x19c>
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ea2:	f080 808d 	bcs.w	8000fc0 <__udivmoddi4+0x2ac>
 8000ea6:	4299      	cmp	r1, r3
 8000ea8:	f240 808a 	bls.w	8000fc0 <__udivmoddi4+0x2ac>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	443b      	add	r3, r7
 8000eb0:	1a5b      	subs	r3, r3, r1
 8000eb2:	b281      	uxth	r1, r0
 8000eb4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec0:	fb00 f308 	mul.w	r3, r0, r8
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d907      	bls.n	8000ed8 <__udivmoddi4+0x1c4>
 8000ec8:	1879      	adds	r1, r7, r1
 8000eca:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ece:	d273      	bcs.n	8000fb8 <__udivmoddi4+0x2a4>
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	d971      	bls.n	8000fb8 <__udivmoddi4+0x2a4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4439      	add	r1, r7
 8000ed8:	1acb      	subs	r3, r1, r3
 8000eda:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ede:	e778      	b.n	8000dd2 <__udivmoddi4+0xbe>
 8000ee0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ee4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ee8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eec:	431c      	orrs	r4, r3
 8000eee:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ef2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ef6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000efa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000efe:	431f      	orrs	r7, r3
 8000f00:	0c3b      	lsrs	r3, r7, #16
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fa1f f884 	uxth.w	r8, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f12:	fb09 fa08 	mul.w	sl, r9, r8
 8000f16:	458a      	cmp	sl, r1
 8000f18:	fa02 f206 	lsl.w	r2, r2, r6
 8000f1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x220>
 8000f22:	1861      	adds	r1, r4, r1
 8000f24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f28:	d248      	bcs.n	8000fbc <__udivmoddi4+0x2a8>
 8000f2a:	458a      	cmp	sl, r1
 8000f2c:	d946      	bls.n	8000fbc <__udivmoddi4+0x2a8>
 8000f2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f32:	4421      	add	r1, r4
 8000f34:	eba1 010a 	sub.w	r1, r1, sl
 8000f38:	b2bf      	uxth	r7, r7
 8000f3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f42:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f46:	fb00 f808 	mul.w	r8, r0, r8
 8000f4a:	45b8      	cmp	r8, r7
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x24a>
 8000f4e:	19e7      	adds	r7, r4, r7
 8000f50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f54:	d22e      	bcs.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f56:	45b8      	cmp	r8, r7
 8000f58:	d92c      	bls.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	4427      	add	r7, r4
 8000f5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f62:	eba7 0708 	sub.w	r7, r7, r8
 8000f66:	fba0 8902 	umull	r8, r9, r0, r2
 8000f6a:	454f      	cmp	r7, r9
 8000f6c:	46c6      	mov	lr, r8
 8000f6e:	4649      	mov	r1, r9
 8000f70:	d31a      	bcc.n	8000fa8 <__udivmoddi4+0x294>
 8000f72:	d017      	beq.n	8000fa4 <__udivmoddi4+0x290>
 8000f74:	b15d      	cbz	r5, 8000f8e <__udivmoddi4+0x27a>
 8000f76:	ebb3 020e 	subs.w	r2, r3, lr
 8000f7a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f7e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f82:	40f2      	lsrs	r2, r6
 8000f84:	ea4c 0202 	orr.w	r2, ip, r2
 8000f88:	40f7      	lsrs	r7, r6
 8000f8a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f8e:	2600      	movs	r6, #0
 8000f90:	4631      	mov	r1, r6
 8000f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f96:	462e      	mov	r6, r5
 8000f98:	4628      	mov	r0, r5
 8000f9a:	e70b      	b.n	8000db4 <__udivmoddi4+0xa0>
 8000f9c:	4606      	mov	r6, r0
 8000f9e:	e6e9      	b.n	8000d74 <__udivmoddi4+0x60>
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	e6fd      	b.n	8000da0 <__udivmoddi4+0x8c>
 8000fa4:	4543      	cmp	r3, r8
 8000fa6:	d2e5      	bcs.n	8000f74 <__udivmoddi4+0x260>
 8000fa8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fac:	eb69 0104 	sbc.w	r1, r9, r4
 8000fb0:	3801      	subs	r0, #1
 8000fb2:	e7df      	b.n	8000f74 <__udivmoddi4+0x260>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e7d2      	b.n	8000f5e <__udivmoddi4+0x24a>
 8000fb8:	4660      	mov	r0, ip
 8000fba:	e78d      	b.n	8000ed8 <__udivmoddi4+0x1c4>
 8000fbc:	4681      	mov	r9, r0
 8000fbe:	e7b9      	b.n	8000f34 <__udivmoddi4+0x220>
 8000fc0:	4666      	mov	r6, ip
 8000fc2:	e775      	b.n	8000eb0 <__udivmoddi4+0x19c>
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	e74a      	b.n	8000e5e <__udivmoddi4+0x14a>
 8000fc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fcc:	4439      	add	r1, r7
 8000fce:	e713      	b.n	8000df8 <__udivmoddi4+0xe4>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	443c      	add	r4, r7
 8000fd4:	e724      	b.n	8000e20 <__udivmoddi4+0x10c>
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	60fb      	str	r3, [r7, #12]
      return __builtin_is_constant_evaluated();
 8001000:	2300      	movs	r3, #0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
 8001002:	2b00      	cmp	r3, #0
 8001004:	d004      	beq.n	8001010 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f924 	bl	8001254 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 800100c:	4603      	mov	r3, r0
 800100e:	e004      	b.n	800101a <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff f94d 	bl	80002b0 <strlen>
 8001016:	4603      	mov	r3, r0
 8001018:	bf00      	nop
      }
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f805 	bl	8001040 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
    }
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>:
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<typename _T1, typename _T2>
    struct pair
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	f016 f826 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 800109c:	b5b0      	push	{r4, r5, r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80010a8:	68fc      	ldr	r4, [r7, #12]
 80010aa:	68b8      	ldr	r0, [r7, #8]
 80010ac:	f000 f93a 	bl	8001324 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80010b0:	4605      	mov	r5, r0
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4618      	mov	r0, r3
 80010b8:	f015 fe4a 	bl	8016d50 <_ZNSaIcEC1Ev>
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	461a      	mov	r2, r3
 80010c2:	4629      	mov	r1, r5
 80010c4:	4620      	mov	r0, r4
 80010c6:	f000 f938 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f015 fe3f 	bl	8016d52 <_ZNSaIcED1Ev>
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffc9 	bl	800106c <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 80010da:	4603      	mov	r3, r0
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	761a      	strb	r2, [r3, #24]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bdb0      	pop	{r4, r5, r7, pc}

080010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80010f8:	68fc      	ldr	r4, [r7, #12]
 80010fa:	68b8      	ldr	r0, [r7, #8]
 80010fc:	f000 f943 	bl	8001386 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8001100:	4605      	mov	r5, r0
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4618      	mov	r0, r3
 8001108:	f015 fe22 	bl	8016d50 <_ZNSaIcEC1Ev>
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	461a      	mov	r2, r3
 8001112:	4629      	mov	r1, r5
 8001114:	4620      	mov	r0, r4
 8001116:	f000 f910 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4618      	mov	r0, r3
 8001120:	f015 fe17 	bl	8016d52 <_ZNSaIcED1Ev>
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffa1 	bl	800106c <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 800112a:	4603      	mov	r3, r0
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	761a      	strb	r2, [r3, #24]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bdb0      	pop	{r4, r5, r7, pc}

0800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001148:	68fc      	ldr	r4, [r7, #12]
 800114a:	68b8      	ldr	r0, [r7, #8]
 800114c:	f000 f926 	bl	800139c <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8001150:	4605      	mov	r5, r0
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4618      	mov	r0, r3
 8001158:	f015 fdfa 	bl	8016d50 <_ZNSaIcEC1Ev>
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	461a      	mov	r2, r3
 8001162:	4629      	mov	r1, r5
 8001164:	4620      	mov	r0, r4
 8001166:	f000 f8e8 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4618      	mov	r0, r3
 8001170:	f015 fdef 	bl	8016d52 <_ZNSaIcED1Ev>
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff79 	bl	800106c <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 800117a:	4603      	mov	r3, r0
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	761a      	strb	r2, [r3, #24]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bdb0      	pop	{r4, r5, r7, pc}

0800118c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800118c:	b5b0      	push	{r4, r5, r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001198:	68fc      	ldr	r4, [r7, #12]
 800119a:	68b8      	ldr	r0, [r7, #8]
 800119c:	f000 f909 	bl	80013b2 <_ZSt7forwardIRA3_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80011a0:	4605      	mov	r5, r0
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4618      	mov	r0, r3
 80011a8:	f015 fdd2 	bl	8016d50 <_ZNSaIcEC1Ev>
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	461a      	mov	r2, r3
 80011b2:	4629      	mov	r1, r5
 80011b4:	4620      	mov	r0, r4
 80011b6:	f000 f8c0 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4618      	mov	r0, r3
 80011c0:	f015 fdc7 	bl	8016d52 <_ZNSaIcED1Ev>
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff51 	bl	800106c <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 80011ca:	4603      	mov	r3, r0
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	761a      	strb	r2, [r3, #24]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdb0      	pop	{r4, r5, r7, pc}

080011dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80011e8:	68fc      	ldr	r4, [r7, #12]
 80011ea:	68b8      	ldr	r0, [r7, #8]
 80011ec:	f000 f8ec 	bl	80013c8 <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80011f0:	4605      	mov	r5, r0
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4618      	mov	r0, r3
 80011f8:	f015 fdaa 	bl	8016d50 <_ZNSaIcEC1Ev>
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	461a      	mov	r2, r3
 8001202:	4629      	mov	r1, r5
 8001204:	4620      	mov	r0, r4
 8001206:	f000 f898 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4618      	mov	r0, r3
 8001210:	f015 fd9f 	bl	8016d52 <_ZNSaIcED1Ev>
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff29 	bl	800106c <_ZSt7forwardI10token_typeEOT_RNSt16remove_referenceIS1_E4typeE>
 800121a:	4603      	mov	r3, r0
 800121c:	781a      	ldrb	r2, [r3, #0]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	761a      	strb	r2, [r3, #24]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bdb0      	pop	{r4, r5, r7, pc}

0800122c <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	bf0c      	ite	eq
 8001242:	2301      	moveq	r3, #1
 8001244:	2300      	movne	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4413      	add	r3, r2
 8001266:	2200      	movs	r2, #0
 8001268:	72fa      	strb	r2, [r7, #11]
 800126a:	f107 020b 	add.w	r2, r7, #11
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffdb 	bl	800122c <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 8001276:	4603      	mov	r3, r0
 8001278:	f083 0301 	eor.w	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x36>
        ++__i;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3301      	adds	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8001288:	e7ea      	b.n	8001260 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xc>
      return __i;
 800128a:	68fb      	ldr	r3, [r7, #12]
    }
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <_ZNSaISt4pairIKc10token_typeEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f93d 	bl	800151c <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1Ev>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_ZNSaISt4pairIKc10token_typeEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f93c 	bl	8001532 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEED1Ev>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
       *  Create a %map consisting of copies of the elements in the
       *  initializer_list @a __l.
       *  This is linear in N if the range is already sorted, and NlogN
       *  otherwise (where N is @a __l.size()).
       */
      map(initializer_list<value_type> __l,
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	1d38      	adds	r0, r7, #4
 80012ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80012d2:	603b      	str	r3, [r7, #0]
	  const _Compare& __comp = _Compare(),
	  const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
 80012d4:	68fc      	ldr	r4, [r7, #12]
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f933 	bl	8001548 <_ZNSaISt4pairIKc10token_typeEEC1ERKS3_>
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	461a      	mov	r2, r3
 80012e8:	6839      	ldr	r1, [r7, #0]
 80012ea:	4620      	mov	r0, r4
 80012ec:	f000 f946 	bl	800157c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ffd9 	bl	80012ac <_ZNSaISt4pairIKc10token_typeEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 80012fa:	68fc      	ldr	r4, [r7, #12]
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f96f 	bl	80015e2 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>
 8001304:	4605      	mov	r5, r0
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f976 	bl	80015fa <_ZNKSt16initializer_listISt4pairIKc10token_typeEE3endEv>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	4629      	mov	r1, r5
 8001314:	4620      	mov	r0, r4
 8001316:	f000 f982 	bl	800161e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bdb0      	pop	{r4, r5, r7, pc}

08001324 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 800133a:	b590      	push	{r4, r7, lr}
 800133c:	b085      	sub	sp, #20
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8001346:	68fc      	ldr	r4, [r7, #12]
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f015 fdd1 	bl	8016ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800134e:	4603      	mov	r3, r0
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4619      	mov	r1, r3
 8001354:	4620      	mov	r0, r4
 8001356:	f015 ffc9 	bl	80172ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x34>
 8001360:	68b8      	ldr	r0, [r7, #8]
 8001362:	f7ff fe47 	bl	8000ff4 <_ZNSt11char_traitsIcE6lengthEPKc>
 8001366:	4602      	mov	r2, r0
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4413      	add	r3, r2
 800136c:	e001      	b.n	8001372 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x38>
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	3b01      	subs	r3, #1
 8001372:	461a      	mov	r2, r3
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f8c1 	bl	80014fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bd90      	pop	{r4, r7, pc}

08001386 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <_ZSt7forwardIRA3_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f945 	bl	8001676 <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f944 	bl	800168c <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>:
      map(initializer_list<value_type> __l,
 800140e:	b5b0      	push	{r4, r5, r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	1d38      	adds	r0, r7, #4
 8001418:	e880 0006 	stmia.w	r0, {r1, r2}
 800141c:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 800141e:	68fc      	ldr	r4, [r7, #12]
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f93b 	bl	80016a2 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKS9_>
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	461a      	mov	r2, r3
 8001432:	6839      	ldr	r1, [r7, #0]
 8001434:	4620      	mov	r0, r4
 8001436:	f000 f94e 	bl	80016d6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1ERKSD_RKSE_>
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ffd9 	bl	80013f6 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8001444:	68fc      	ldr	r4, [r7, #12]
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f977 	bl	800173c <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>
 800144e:	4605      	mov	r5, r0
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f97e 	bl	8001754 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE3endEv>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	4629      	mov	r1, r5
 800145e:	4620      	mov	r0, r4
 8001460:	f000 f98d 	bl	800177e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bdb0      	pop	{r4, r5, r7, pc}

0800146e <_ZNSaISt4pairIKc12double_tokenEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f9ad 	bl	80017d6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1Ev>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_ZNSaISt4pairIKc12double_tokenEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f9ac 	bl	80017ec <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEED1Ev>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
      map(initializer_list<value_type> __l,
 800149e:	b5b0      	push	{r4, r5, r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	1d38      	adds	r0, r7, #4
 80014a8:	e880 0006 	stmia.w	r0, {r1, r2}
 80014ac:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 80014ae:	68fc      	ldr	r4, [r7, #12]
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f9a3 	bl	8001802 <_ZNSaISt4pairIKc12double_tokenEEC1ERKS3_>
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	461a      	mov	r2, r3
 80014c2:	6839      	ldr	r1, [r7, #0]
 80014c4:	4620      	mov	r0, r4
 80014c6:	f000 f9b6 	bl	8001836 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ffd9 	bl	8001486 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 80014d4:	68fc      	ldr	r4, [r7, #12]
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 f9df 	bl	800189c <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>
 80014de:	4605      	mov	r5, r0
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f9e6 	bl	80018b4 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE3endEv>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4629      	mov	r1, r5
 80014ee:	4620      	mov	r0, r4
 80014f0:	f000 f9f4 	bl	80018dc <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bdb0      	pop	{r4, r5, r7, pc}

080014fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 fa10 	bl	8001934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>
        }
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_ZNSaISt4pairIKc10token_typeEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f9fe 	bl	8001956 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1ERKS5_>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 fa0b 	bl	8001988 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree() { }
#else
      _Rb_tree() = default;
#endif

      _Rb_tree(const _Compare& __comp,
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
	       const allocator_type& __a = allocator_type())
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8001588:	68fc      	ldr	r4, [r7, #12]
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f9ec 	bl	800196e <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1IS3_EERKSaIT_E>
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	461a      	mov	r2, r3
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	4620      	mov	r0, r4
 80015a0:	f000 f9fe 	bl	80019a0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f9ed 	bl	8001988 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4618      	mov	r0, r3
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd90      	pop	{r4, r7, pc}

080015b8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fa29 	bl	8001a18 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4619      	mov	r1, r3
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 fa05 	bl	80019da <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ffc6 	bl	8001564 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_ZNKSt16initializer_listISt4pairIKc10token_typeEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80015fa:	b590      	push	{r4, r7, lr}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffed 	bl	80015e2 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE5beginEv>
 8001608:	4604      	mov	r4, r0
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 fa10 	bl	8001a30 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE4sizeEv>
 8001610:	4603      	mov	r3, r0
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4423      	add	r3, r4
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}

0800161e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	using __same_value_type
	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;

      template<typename _InputIterator>
	__enable_if_t<__same_value_type<_InputIterator>::value>
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800161e:	b580      	push	{r7, lr}
 8001620:	b088      	sub	sp, #32
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
	{
	  _Alloc_node __an(*this);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	68f9      	ldr	r1, [r7, #12]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fa09 	bl	8001a48 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	429a      	cmp	r2, r3
 800163c:	d017      	beq.n	800166e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 fa11 	bl	8001a66 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8001644:	4603      	mov	r3, r0
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	f107 021c 	add.w	r2, r7, #28
 800164c:	f107 0318 	add.w	r3, r7, #24
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fa18 	bl	8001a88 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	69b9      	ldr	r1, [r7, #24]
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 fa21 	bl	8001aa8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3302      	adds	r3, #2
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	e7e3      	b.n	8001636 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 800166e:	bf00      	nop
 8001670:	3720      	adds	r7, #32
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKS9_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80016ac:	6839      	ldr	r1, [r7, #0]
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fa2d 	bl	8001b0e <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSB_>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fa3a 	bl	8001b40 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1ERKSD_RKSE_>:
      _Rb_tree(const _Compare& __comp,
 80016d6:	b590      	push	{r4, r7, lr}
 80016d8:	b087      	sub	sp, #28
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 80016e2:	68fc      	ldr	r4, [r7, #12]
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fa1b 	bl	8001b26 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1IS9_EERKSaIT_E>
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	461a      	mov	r2, r3
 80016f6:	68b9      	ldr	r1, [r7, #8]
 80016f8:	4620      	mov	r0, r4
 80016fa:	f000 fa2d 	bl	8001b58 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fa1c 	bl	8001b40 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4618      	mov	r0, r3
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}

08001712 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 fa58 	bl	8001bd0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8001720:	4603      	mov	r3, r0
 8001722:	4619      	mov	r1, r3
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 fa34 	bl	8001b92 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ffc6 	bl	80016be <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ffed 	bl	800173c <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE5beginEv>
 8001762:	4604      	mov	r4, r0
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 fa3f 	bl	8001be8 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE4sizeEv>
 800176a:	4602      	mov	r2, r0
 800176c:	4613      	mov	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	1a9b      	subs	r3, r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4423      	add	r3, r4
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bd90      	pop	{r4, r7, pc}

0800177e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800177e:	b580      	push	{r7, lr}
 8001780:	b088      	sub	sp, #32
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	68f9      	ldr	r1, [r7, #12]
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fa35 	bl	8001c00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>
	  for (; __first != __last; ++__first)
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	429a      	cmp	r2, r3
 800179c:	d017      	beq.n	80017ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 fa3d 	bl	8001c1e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 80017a4:	4603      	mov	r3, r0
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	f107 021c 	add.w	r2, r7, #28
 80017ac:	f107 0318 	add.w	r3, r7, #24
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 fa44 	bl	8001c40 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSt17_Rb_tree_iteratorIS9_E>
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	69b9      	ldr	r1, [r7, #24]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 fa4d 	bl	8001c60 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>
	  for (; __first != __last; ++__first)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	331c      	adds	r3, #28
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	e7e3      	b.n	8001796 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x18>
	}
 80017ce:	bf00      	nop
 80017d0:	3720      	adds	r7, #32
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <_ZNSaISt4pairIKc12double_tokenEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800180c:	6839      	ldr	r1, [r7, #0]
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fa59 	bl	8001cc6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1ERKS5_>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fa66 	bl	8001cf8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree(const _Compare& __comp,
 8001836:	b590      	push	{r4, r7, lr}
 8001838:	b087      	sub	sp, #28
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8001842:	68fc      	ldr	r4, [r7, #12]
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fa47 	bl	8001cde <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1IS3_EERKSaIT_E>
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	461a      	mov	r2, r3
 8001856:	68b9      	ldr	r1, [r7, #8]
 8001858:	4620      	mov	r0, r4
 800185a:	f000 fa59 	bl	8001d10 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fa48 	bl	8001cf8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4618      	mov	r0, r3
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd90      	pop	{r4, r7, pc}

08001872 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 fa84 	bl	8001d88 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8001880:	4603      	mov	r3, r0
 8001882:	4619      	mov	r1, r3
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fa60 	bl	8001d4a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ffc6 	bl	800181e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE3endEv>:
      end() const noexcept { return begin() + size(); }
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ffed 	bl	800189c <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE5beginEv>
 80018c2:	4604      	mov	r4, r0
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 fa6b 	bl	8001da0 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE4sizeEv>
 80018ca:	4602      	mov	r2, r0
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	4423      	add	r3, r4
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd90      	pop	{r4, r7, pc}

080018dc <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	68f9      	ldr	r1, [r7, #12]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fa62 	bl	8001db8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d017      	beq.n	800192c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 fa6a 	bl	8001dd6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8001902:	4603      	mov	r3, r0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	f107 021c 	add.w	r2, r7, #28
 800190a:	f107 0318 	add.w	r3, r7, #24
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fa71 	bl	8001df8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	69b9      	ldr	r1, [r7, #24]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 fa7a 	bl	8001e18 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	3303      	adds	r3, #3
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	e7e3      	b.n	80018f4 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 800192c:	bf00      	nop
 800192e:	3720      	adds	r7, #32
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8001942:	4623      	mov	r3, r4
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 faad 	bl	8001ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
	}
 800194e:	bf00      	nop
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd90      	pop	{r4, r7, pc}

08001956 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc10token_typeEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 fadd 	bl	8001f38 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1Ev>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fadc 	bl	8001f4e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 fad9 	bl	8001f64 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEEONSt16remove_referenceIT_E4typeEOS9_>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4619      	mov	r1, r3
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 fadf 	bl	8001f7a <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS5_>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fae8 	bl	8001f96 <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	3304      	adds	r3, #4
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fb29 	bl	8001022 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d012      	beq.n	8001a10 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	{
	  _M_erase(_S_right(__x));
 80019ea:	6838      	ldr	r0, [r7, #0]
 80019ec:	f000 fadf 	bl	8001fae <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4619      	mov	r1, r3
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff fff0 	bl	80019da <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f000 fae3 	bl	8001fc6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001a00:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001a02:	6839      	ldr	r1, [r7, #0]
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 faea 	bl	8001fde <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001a0e:	e7e9      	b.n	80019e4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
	}
    }
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_ZNKSt16initializer_listISt4pairIKc10token_typeEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	1d1a      	adds	r2, r3, #4
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fac1 	bl	8002000 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
    template<typename _Arg, typename _NodeGen>
#else
    template<typename _NodeGen>
#endif
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
			const _Val& __v,
#endif
			_NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fbd1 	bl	8002264 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 8001ac2:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 8001ac4:	f107 0010 	add.w	r0, r7, #16
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	68f9      	ldr	r1, [r7, #12]
 8001acc:	f000 faa7 	bl	800201e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>

      if (__res.second)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00f      	beq.n	8001af6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
			  _GLIBCXX_FORWARD(_Arg, __v),
			  __node_gen);
 8001ad6:	693c      	ldr	r4, [r7, #16]
 8001ad8:	697d      	ldr	r5, [r7, #20]
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fbce 	bl	800227c <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	462a      	mov	r2, r5
 8001aea:	4621      	mov	r1, r4
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 fbd0 	bl	8002292 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 8001af2:	4603      	mov	r3, r0
 8001af4:	e007      	b.n	8001b06 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fa7e 	bl	8002000 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8001b04:	69fb      	ldr	r3, [r7, #28]
    }
 8001b06:	4618      	mov	r0, r3
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bdb0      	pop	{r4, r5, r7, pc}

08001b0e <_ZN9__gnu_cxx13new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSB_>:
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1IS9_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fbf7 	bl	8002324 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1Ev>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fbf6 	bl	800233a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 fbf3 	bl	8002350 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEEONSt16remove_referenceIT_E4typeEOSF_>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fbf9 	bl	8002366 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSB_>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	68b9      	ldr	r1, [r7, #8]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fc02 	bl	8002382 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3304      	adds	r3, #4
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fa4d 	bl	8001022 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d012      	beq.n	8001bc8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x36>
	  _M_erase(_S_right(__x));
 8001ba2:	6838      	ldr	r0, [r7, #0]
 8001ba4:	f000 fbf9 	bl	800239a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4619      	mov	r1, r3
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff fff0 	bl	8001b92 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
	  _Link_type __y = _S_left(__x);
 8001bb2:	6838      	ldr	r0, [r7, #0]
 8001bb4:	f000 fbfd 	bl	80023b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001bb8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001bba:	6839      	ldr	r1, [r7, #0]
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 fc04 	bl	80023ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>
	  __x = __y;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001bc6:	e7e9      	b.n	8001b9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0xa>
    }
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE4sizeEv>:
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>:
	_Alloc_node(_Rb_tree& __t)
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b084      	sub	sp, #16
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	1d1a      	adds	r2, r3, #4
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 fbdb 	bl	80023ec <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1ERKSt17_Rb_tree_iteratorIS9_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001c60:	b5b0      	push	{r4, r5, r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8001c6e:	f107 0318 	add.w	r3, r7, #24
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fceb 	bl	8002650 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 8001c7a:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 8001c7c:	f107 0010 	add.w	r0, r7, #16
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	68f9      	ldr	r1, [r7, #12]
 8001c84:	f000 fbc1 	bl	800240a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_>
      if (__res.second)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00f      	beq.n	8001cae <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x4e>
			  __node_gen);
 8001c8e:	693c      	ldr	r4, [r7, #16]
 8001c90:	697d      	ldr	r5, [r7, #20]
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 fce8 	bl	8002668 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	462a      	mov	r2, r5
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 fcea 	bl	800267e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>
 8001caa:	4603      	mov	r3, r0
 8001cac:	e007      	b.n	8001cbe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fb98 	bl	80023ec <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8001cbc:	69fb      	ldr	r3, [r7, #28]
    }
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3720      	adds	r7, #32
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bdb0      	pop	{r4, r5, r7, pc}

08001cc6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKc12double_tokenEEC1ERKS5_>:
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fd11 	bl	8002710 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1Ev>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fd10 	bl	8002726 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 fd0d 	bl	800273c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEEONSt16remove_referenceIT_E4typeEOS9_>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4619      	mov	r1, r3
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 fd13 	bl	8002752 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS5_>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68b9      	ldr	r1, [r7, #8]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 f930 	bl	8001f96 <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f971 	bl	8001022 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d012      	beq.n	8001d80 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 8001d5a:	6838      	ldr	r0, [r7, #0]
 8001d5c:	f000 fd07 	bl	800276e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fff0 	bl	8001d4a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 8001d6a:	6838      	ldr	r0, [r7, #0]
 8001d6c:	f000 fd0b 	bl	8002786 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001d70:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001d72:	6839      	ldr	r1, [r7, #0]
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fd12 	bl	800279e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001d7e:	e7e9      	b.n	8001d54 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_ZNKSt16initializer_listISt4pairIKc12double_tokenEE4sizeEv>:
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	1d1a      	adds	r2, r3, #4
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 fce9 	bl	80027c0 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001e18:	b5b0      	push	{r4, r5, r7, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8001e26:	f107 0318 	add.w	r3, r7, #24
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 fdf9 	bl	8002a24 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 8001e32:	4603      	mov	r3, r0
      pair<_Base_ptr, _Base_ptr> __res
 8001e34:	f107 0010 	add.w	r0, r7, #16
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	68f9      	ldr	r1, [r7, #12]
 8001e3c:	f000 fccf 	bl	80027de <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>
      if (__res.second)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00f      	beq.n	8001e66 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
			  __node_gen);
 8001e46:	693c      	ldr	r4, [r7, #16]
 8001e48:	697d      	ldr	r5, [r7, #20]
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fdf6 	bl	8002a3c <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001e50:	4602      	mov	r2, r0
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	4613      	mov	r3, r2
 8001e58:	462a      	mov	r2, r5
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 fdf8 	bl	8002a52 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 8001e62:	4603      	mov	r3, r0
 8001e64:	e007      	b.n	8001e76 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fca6 	bl	80027c0 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8001e74:	69fb      	ldr	r3, [r7, #28]
    }
 8001e76:	4618      	mov	r0, r3
 8001e78:	3720      	adds	r7, #32
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bdb0      	pop	{r4, r5, r7, pc}

08001e7e <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001e7e:	b5b0      	push	{r4, r5, r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001e88:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fe67 	bl	8002b60 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8001e92:	462a      	mov	r2, r5
 8001e94:	6839      	ldr	r1, [r7, #0]
 8001e96:	4620      	mov	r0, r4
 8001e98:	f000 fe6c 	bl	8002b74 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8001e9c:	4603      	mov	r3, r0
    }
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001eb6:	68b8      	ldr	r0, [r7, #8]
 8001eb8:	f000 fe42 	bl	8002b40 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x28>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8001ed4:	4817      	ldr	r0, [pc, #92]	; (8001f34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8c>)
 8001ed6:	f014 fff2 	bl	8016ebe <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	68b8      	ldr	r0, [r7, #8]
 8001ede:	f7ff ffce 	bl	8001e7e <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d910      	bls.n	8001f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f015 f805 	bl	8016f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4619      	mov	r1, r3
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f014 fff2 	bl	8016ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	4619      	mov	r1, r3
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f014 fff3 	bl	8016ef4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f014 ffec 	bl	8016eec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001f14:	4603      	mov	r3, r0
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f015 f842 	bl	8016fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	4619      	mov	r1, r3
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f014 ffe7 	bl	8016ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	0801a3e0 	.word	0x0801a3e0

08001f38 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <_ZNSaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001f84:	6839      	ldr	r1, [r7, #0]
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fe03 	bl	8002b92 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS7_>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
      { }
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fddd 	bl	8002baa <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 8001ff0:	6839      	ldr	r1, [r7, #0]
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fdee 	bl	8002bd4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800201e:	b590      	push	{r4, r7, lr}
 8002020:	b08d      	sub	sp, #52	; 0x34
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fde2 	bl	8002bf8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEE13_M_const_castEv>
 8002034:	4603      	mov	r3, r0
 8002036:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8002038:	69bc      	ldr	r4, [r7, #24]
 800203a:	68b8      	ldr	r0, [r7, #8]
 800203c:	f000 fded 	bl	8002c1a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8002040:	4603      	mov	r3, r0
 8002042:	429c      	cmp	r4, r3
 8002044:	bf0c      	ite	eq
 8002046:	2301      	moveq	r3, #1
 8002048:	2300      	movne	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d030      	beq.n	80020b2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 8002050:	68b8      	ldr	r0, [r7, #8]
 8002052:	f000 fdee 	bl	8002c32 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>
 8002056:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8002058:	2b00      	cmp	r3, #0
 800205a:	d013      	beq.n	8002084 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 800205c:	68bc      	ldr	r4, [r7, #8]
 800205e:	68b8      	ldr	r0, [r7, #8]
 8002060:	f000 fdf3 	bl	8002c4a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8002064:	4603      	mov	r3, r0
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 fdfa 	bl	8002c62 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800206e:	4603      	mov	r3, r0
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	4619      	mov	r1, r3
 8002074:	4620      	mov	r0, r4
 8002076:	f000 fe00 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 8002084:	2300      	movs	r3, #0
	  if (size() > 0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00c      	beq.n	80020a4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	68b8      	ldr	r0, [r7, #8]
 8002090:	f000 fddb 	bl	8002c4a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8002094:	4602      	mov	r2, r0
 8002096:	f107 031c 	add.w	r3, r7, #28
 800209a:	4619      	mov	r1, r3
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 fe01 	bl	8002ca4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80020a2:	e0db      	b.n	800225c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fe10 	bl	8002cd0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 80020b0:	e0d4      	b.n	800225c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80020b2:	68bc      	ldr	r4, [r7, #8]
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fdd3 	bl	8002c62 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80020bc:	4603      	mov	r3, r0
 80020be:	461a      	mov	r2, r3
 80020c0:	6839      	ldr	r1, [r7, #0]
 80020c2:	4620      	mov	r0, r4
 80020c4:	f000 fdd9 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d057      	beq.n	800217e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80020d2:	69bc      	ldr	r4, [r7, #24]
 80020d4:	68b8      	ldr	r0, [r7, #8]
 80020d6:	f000 fe80 	bl	8002dda <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 80020da:	4603      	mov	r3, r0
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	429c      	cmp	r4, r3
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00d      	beq.n	8002108 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 80020ec:	68b8      	ldr	r0, [r7, #8]
 80020ee:	f000 fe74 	bl	8002dda <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 80020f2:	4604      	mov	r4, r0
 80020f4:	68b8      	ldr	r0, [r7, #8]
 80020f6:	f000 fe70 	bl	8002dda <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	4621      	mov	r1, r4
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fe76 	bl	8002df2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8002106:	e0a9      	b.n	800225c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8002108:	68bc      	ldr	r4, [r7, #8]
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fe88 	bl	8002e24 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>
 8002114:	4603      	mov	r3, r0
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fda2 	bl	8002c62 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800211e:	4603      	mov	r3, r0
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4619      	mov	r1, r3
 8002124:	4620      	mov	r0, r4
 8002126:	f000 fda8 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01f      	beq.n	8002170 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff3b 	bl	8001fae <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
 800214c:	f107 0214 	add.w	r2, r7, #20
 8002150:	f107 0320 	add.w	r3, r7, #32
 8002154:	4619      	mov	r1, r3
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 fda4 	bl	8002ca4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800215c:	e07e      	b.n	800225c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800215e:	f107 0218 	add.w	r2, r7, #24
 8002162:	f107 0318 	add.w	r3, r7, #24
 8002166:	4619      	mov	r1, r3
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 fe42 	bl	8002df2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800216e:	e075      	b.n	800225c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 fdaa 	bl	8002cd0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 800217c:	e06e      	b.n	800225c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800217e:	68bc      	ldr	r4, [r7, #8]
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 fd6d 	bl	8002c62 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002188:	4603      	mov	r3, r0
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	4620      	mov	r0, r4
 8002190:	f000 fd73 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d056      	beq.n	8002248 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800219e:	69bc      	ldr	r4, [r7, #24]
 80021a0:	68b8      	ldr	r0, [r7, #8]
 80021a2:	f000 fd52 	bl	8002c4a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80021a6:	4603      	mov	r3, r0
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	429c      	cmp	r4, r3
 80021ac:	bf0c      	ite	eq
 80021ae:	2301      	moveq	r3, #1
 80021b0:	2300      	movne	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00c      	beq.n	80021d2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 80021b8:	2300      	movs	r3, #0
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
 80021bc:	68b8      	ldr	r0, [r7, #8]
 80021be:	f000 fd44 	bl	8002c4a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 80021c2:	4602      	mov	r2, r0
 80021c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c8:	4619      	mov	r1, r3
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fd6a 	bl	8002ca4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80021d0:	e044      	b.n	800225c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80021d2:	68bc      	ldr	r4, [r7, #8]
 80021d4:	f107 0310 	add.w	r3, r7, #16
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fe34 	bl	8002e46 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEppEv>
 80021de:	4603      	mov	r3, r0
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fd3d 	bl	8002c62 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461a      	mov	r2, r3
 80021ec:	6839      	ldr	r1, [r7, #0]
 80021ee:	4620      	mov	r0, r4
 80021f0:	f000 fd43 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01f      	beq.n	800223a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fed6 	bl	8001fae <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8002212:	2300      	movs	r3, #0
 8002214:	62bb      	str	r3, [r7, #40]	; 0x28
 8002216:	f107 0218 	add.w	r2, r7, #24
 800221a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800221e:	4619      	mov	r1, r3
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fd3f 	bl	8002ca4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8002226:	e019      	b.n	800225c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8002228:	f107 0210 	add.w	r2, r7, #16
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	4619      	mov	r1, r3
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fddd 	bl	8002df2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8002238:	e010      	b.n	800225c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	68b9      	ldr	r1, [r7, #8]
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fd45 	bl	8002cd0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8002246:	e009      	b.n	800225c <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8002248:	2300      	movs	r3, #0
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800224c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002250:	f107 0318 	add.w	r3, r7, #24
 8002254:	4619      	mov	r1, r3
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fe06 	bl	8002e68 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	3734      	adds	r7, #52	; 0x34
 8002260:	46bd      	mov	sp, r7
 8002262:	bd90      	pop	{r4, r7, pc}

08002264 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002292:	b5b0      	push	{r4, r5, r7, lr}
 8002294:	b088      	sub	sp, #32
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d11a      	bne.n	80022dc <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fcb7 	bl	8002c1a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 80022ac:	4602      	mov	r2, r0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d013      	beq.n	80022dc <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80022b4:	68fc      	ldr	r4, [r7, #12]
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	6839      	ldr	r1, [r7, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ffd1 	bl	8002264 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 80022c2:	4605      	mov	r5, r0
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fccc 	bl	8002c62 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80022ca:	4603      	mov	r3, r0
 80022cc:	461a      	mov	r2, r3
 80022ce:	4629      	mov	r1, r5
 80022d0:	4620      	mov	r0, r4
 80022d2:	f000 fcd2 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 80022e0:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 80022e2:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 80022e4:	6838      	ldr	r0, [r7, #0]
 80022e6:	f7ff ffc9 	bl	800227c <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4619      	mov	r1, r3
 80022ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022f0:	f000 fdd0 	bl	8002e94 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 80022f4:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80022fa:	7ff8      	ldrb	r0, [r7, #31]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	f014 fd7e 	bl	8016e00 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fe73 	bl	8002000 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 800231a:	697b      	ldr	r3, [r7, #20]
      }
 800231c:	4618      	mov	r0, r3
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bdb0      	pop	{r4, r5, r7, pc}

08002324 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSB_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002370:	6839      	ldr	r1, [r7, #0]
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fda2 	bl	8002ebc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSD_>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
      { }
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80023d4:	6839      	ldr	r1, [r7, #0]
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fd7c 	bl	8002ed4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>
	_M_put_node(__p);
 80023dc:	6839      	ldr	r1, [r7, #0]
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fd8d 	bl	8002efe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>
      }
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800240a:	b590      	push	{r4, r7, lr}
 800240c:	b08d      	sub	sp, #52	; 0x34
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fd81 	bl	8002f22 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE13_M_const_castEv>
 8002420:	4603      	mov	r3, r0
 8002422:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8002424:	69bc      	ldr	r4, [r7, #24]
 8002426:	68b8      	ldr	r0, [r7, #8]
 8002428:	f000 fd8c 	bl	8002f44 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 800242c:	4603      	mov	r3, r0
 800242e:	429c      	cmp	r4, r3
 8002430:	bf0c      	ite	eq
 8002432:	2301      	moveq	r3, #1
 8002434:	2300      	movne	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d030      	beq.n	800249e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x94>
	  if (size() > 0
 800243c:	68b8      	ldr	r0, [r7, #8]
 800243e:	f000 fd8d 	bl	8002f5c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>
 8002442:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x66>
 8002448:	68bc      	ldr	r4, [r7, #8]
 800244a:	68b8      	ldr	r0, [r7, #8]
 800244c:	f000 fd92 	bl	8002f74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 8002450:	4603      	mov	r3, r0
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fd99 	bl	8002f8c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800245a:	4603      	mov	r3, r0
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	4620      	mov	r0, r4
 8002462:	f000 fd9f 	bl	8002fa4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x66>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x68>
 8002470:	2300      	movs	r3, #0
	  if (size() > 0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00c      	beq.n	8002490 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x86>
	    return _Res(0, _M_rightmost());
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	68b8      	ldr	r0, [r7, #8]
 800247c:	f000 fd7a 	bl	8002f74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 8002480:	4602      	mov	r2, r0
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	4619      	mov	r1, r3
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 fc0b 	bl	8002ca4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800248e:	e0db      	b.n	8002648 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fd93 	bl	8002fc2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 800249c:	e0d4      	b.n	8002648 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800249e:	68bc      	ldr	r4, [r7, #8]
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fd72 	bl	8002f8c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	6839      	ldr	r1, [r7, #0]
 80024ae:	4620      	mov	r0, r4
 80024b0:	f000 fd78 	bl	8002fa4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d057      	beq.n	800256a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x160>
	  iterator __before = __pos;
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80024be:	69bc      	ldr	r4, [r7, #24]
 80024c0:	68b8      	ldr	r0, [r7, #8]
 80024c2:	f000 fe03 	bl	80030cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 80024c6:	4603      	mov	r3, r0
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	429c      	cmp	r4, r3
 80024cc:	bf0c      	ite	eq
 80024ce:	2301      	moveq	r3, #1
 80024d0:	2300      	movne	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00d      	beq.n	80024f4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 80024d8:	68b8      	ldr	r0, [r7, #8]
 80024da:	f000 fdf7 	bl	80030cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 80024de:	4604      	mov	r4, r0
 80024e0:	68b8      	ldr	r0, [r7, #8]
 80024e2:	f000 fdf3 	bl	80030cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	4621      	mov	r1, r4
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fc80 	bl	8002df2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80024f2:	e0a9      	b.n	8002648 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80024f4:	68bc      	ldr	r4, [r7, #8]
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fdf2 	bl	80030e4 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>
 8002500:	4603      	mov	r3, r0
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fd41 	bl	8002f8c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800250a:	4603      	mov	r3, r0
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	4619      	mov	r1, r3
 8002510:	4620      	mov	r0, r4
 8002512:	f000 fd47 	bl	8002fa4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01f      	beq.n	800255c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff3b 	bl	800239a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	bf0c      	ite	eq
 800252a:	2301      	moveq	r3, #1
 800252c:	2300      	movne	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x140>
		return _Res(0, __before._M_node);
 8002534:	2300      	movs	r3, #0
 8002536:	623b      	str	r3, [r7, #32]
 8002538:	f107 0214 	add.w	r2, r7, #20
 800253c:	f107 0320 	add.w	r3, r7, #32
 8002540:	4619      	mov	r1, r3
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fbae 	bl	8002ca4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8002548:	e07e      	b.n	8002648 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800254a:	f107 0218 	add.w	r2, r7, #24
 800254e:	f107 0318 	add.w	r3, r7, #24
 8002552:	4619      	mov	r1, r3
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fc4c 	bl	8002df2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800255a:	e075      	b.n	8002648 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fd2d 	bl	8002fc2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 8002568:	e06e      	b.n	8002648 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800256a:	68bc      	ldr	r4, [r7, #8]
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fd0c 	bl	8002f8c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002574:	4603      	mov	r3, r0
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	4620      	mov	r0, r4
 800257c:	f000 fd12 	bl	8002fa4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d056      	beq.n	8002634 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x22a>
	  iterator __after = __pos;
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800258a:	69bc      	ldr	r4, [r7, #24]
 800258c:	68b8      	ldr	r0, [r7, #8]
 800258e:	f000 fcf1 	bl	8002f74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 8002592:	4603      	mov	r3, r0
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	429c      	cmp	r4, r3
 8002598:	bf0c      	ite	eq
 800259a:	2301      	moveq	r3, #1
 800259c:	2300      	movne	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00c      	beq.n	80025be <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x1b4>
	    return _Res(0, _M_rightmost());
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
 80025a8:	68b8      	ldr	r0, [r7, #8]
 80025aa:	f000 fce3 	bl	8002f74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>
 80025ae:	4602      	mov	r2, r0
 80025b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b4:	4619      	mov	r1, r3
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fb74 	bl	8002ca4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80025bc:	e044      	b.n	8002648 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80025be:	68bc      	ldr	r4, [r7, #8]
 80025c0:	f107 0310 	add.w	r3, r7, #16
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fd9e 	bl	8003106 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEppEv>
 80025ca:	4603      	mov	r3, r0
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fcdc 	bl	8002f8c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	6839      	ldr	r1, [r7, #0]
 80025da:	4620      	mov	r0, r4
 80025dc:	f000 fce2 	bl	8002fa4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01f      	beq.n	8002626 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fed6 	bl	800239a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x20a>
		return _Res(0, __pos._M_node);
 80025fe:	2300      	movs	r3, #0
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
 8002602:	f107 0218 	add.w	r2, r7, #24
 8002606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800260a:	4619      	mov	r1, r3
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fb49 	bl	8002ca4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8002612:	e019      	b.n	8002648 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8002614:	f107 0210 	add.w	r2, r7, #16
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	4619      	mov	r1, r3
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fbe7 	bl	8002df2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8002624:	e010      	b.n	8002648 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fcc8 	bl	8002fc2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
 8002632:	e009      	b.n	8002648 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS7_+0x23e>
	return _Res(__pos._M_node, 0);
 8002634:	2300      	movs	r3, #0
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002638:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800263c:	f107 0318 	add.w	r3, r7, #24
 8002640:	4619      	mov	r1, r3
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fc10 	bl	8002e68 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	3734      	adds	r7, #52	; 0x34
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}

08002650 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>:
      operator()(const _Pair& __x) const
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800267e:	b5b0      	push	{r4, r5, r7, lr}
 8002680:	b088      	sub	sp, #32
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d11a      	bne.n	80026c8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fc56 	bl	8002f44 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8002698:	4602      	mov	r2, r0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4293      	cmp	r3, r2
 800269e:	d013      	beq.n	80026c8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80026a0:	68fc      	ldr	r4, [r7, #12]
 80026a2:	f107 0310 	add.w	r3, r7, #16
 80026a6:	6839      	ldr	r1, [r7, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ffd1 	bl	8002650 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 80026ae:	4605      	mov	r5, r0
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fc6b 	bl	8002f8c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	4629      	mov	r1, r5
 80026bc:	4620      	mov	r0, r4
 80026be:	f000 fc71 	bl	8002fa4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4e>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x50>
 80026cc:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 80026ce:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 80026d0:	6838      	ldr	r0, [r7, #0]
 80026d2:	f7ff ffc9 	bl	8002668 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4619      	mov	r1, r3
 80026da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026dc:	f000 fd24 	bl	8003128 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>
 80026e0:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80026e6:	7ff8      	ldrb	r0, [r7, #31]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	69b9      	ldr	r1, [r7, #24]
 80026ec:	f014 fb88 	bl	8016e00 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80026fa:	f107 0314 	add.w	r3, r7, #20
 80026fe:	69b9      	ldr	r1, [r7, #24]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fe73 	bl	80023ec <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002706:	697b      	ldr	r3, [r7, #20]
      }
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bdb0      	pop	{r4, r5, r7, pc}

08002710 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <_ZNSaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800275c:	6839      	ldr	r1, [r7, #0]
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fcf6 	bl	8003150 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS7_>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fcdc 	bl	8003168 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 80027b0:	6839      	ldr	r1, [r7, #0]
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fced 	bl	8003192 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80027de:	b590      	push	{r4, r7, lr}
 80027e0:	b08d      	sub	sp, #52	; 0x34
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fce1 	bl	80031b6 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEE13_M_const_castEv>
 80027f4:	4603      	mov	r3, r0
 80027f6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80027f8:	69bc      	ldr	r4, [r7, #24]
 80027fa:	68b8      	ldr	r0, [r7, #8]
 80027fc:	f000 fcec 	bl	80031d8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8002800:	4603      	mov	r3, r0
 8002802:	429c      	cmp	r4, r3
 8002804:	bf0c      	ite	eq
 8002806:	2301      	moveq	r3, #1
 8002808:	2300      	movne	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d030      	beq.n	8002872 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 8002810:	68b8      	ldr	r0, [r7, #8]
 8002812:	f000 fced 	bl	80031f0 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>
 8002816:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 800281c:	68bc      	ldr	r4, [r7, #8]
 800281e:	68b8      	ldr	r0, [r7, #8]
 8002820:	f000 fcf2 	bl	8003208 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8002824:	4603      	mov	r3, r0
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fcf9 	bl	8003220 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800282e:	4603      	mov	r3, r0
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	4619      	mov	r1, r3
 8002834:	4620      	mov	r0, r4
 8002836:	f000 fa20 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 8002844:	2300      	movs	r3, #0
	  if (size() > 0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00c      	beq.n	8002864 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	68b8      	ldr	r0, [r7, #8]
 8002850:	f000 fcda 	bl	8003208 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8002854:	4602      	mov	r2, r0
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4619      	mov	r1, r3
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fa21 	bl	8002ca4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8002862:	e0db      	b.n	8002a1c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fce4 	bl	8003238 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8002870:	e0d4      	b.n	8002a1c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8002872:	68bc      	ldr	r4, [r7, #8]
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fcd2 	bl	8003220 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	6839      	ldr	r1, [r7, #0]
 8002882:	4620      	mov	r0, r4
 8002884:	f000 f9f9 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d057      	beq.n	800293e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8002892:	69bc      	ldr	r4, [r7, #24]
 8002894:	68b8      	ldr	r0, [r7, #8]
 8002896:	f000 fd54 	bl	8003342 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 800289a:	4603      	mov	r3, r0
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	429c      	cmp	r4, r3
 80028a0:	bf0c      	ite	eq
 80028a2:	2301      	moveq	r3, #1
 80028a4:	2300      	movne	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00d      	beq.n	80028c8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 80028ac:	68b8      	ldr	r0, [r7, #8]
 80028ae:	f000 fd48 	bl	8003342 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 80028b2:	4604      	mov	r4, r0
 80028b4:	68b8      	ldr	r0, [r7, #8]
 80028b6:	f000 fd44 	bl	8003342 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 80028ba:	4603      	mov	r3, r0
 80028bc:	461a      	mov	r2, r3
 80028be:	4621      	mov	r1, r4
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fa96 	bl	8002df2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80028c6:	e0a9      	b.n	8002a1c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80028c8:	68bc      	ldr	r4, [r7, #8]
 80028ca:	f107 0314 	add.w	r3, r7, #20
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fd43 	bl	800335a <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>
 80028d4:	4603      	mov	r3, r0
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fca1 	bl	8003220 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80028de:	4603      	mov	r3, r0
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	4619      	mov	r1, r3
 80028e4:	4620      	mov	r0, r4
 80028e6:	f000 f9c8 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01f      	beq.n	8002930 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ff3b 	bl	800276e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf0c      	ite	eq
 80028fe:	2301      	moveq	r3, #1
 8002900:	2300      	movne	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
 800290c:	f107 0214 	add.w	r2, r7, #20
 8002910:	f107 0320 	add.w	r3, r7, #32
 8002914:	4619      	mov	r1, r3
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f9c4 	bl	8002ca4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800291c:	e07e      	b.n	8002a1c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800291e:	f107 0218 	add.w	r2, r7, #24
 8002922:	f107 0318 	add.w	r3, r7, #24
 8002926:	4619      	mov	r1, r3
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fa62 	bl	8002df2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800292e:	e075      	b.n	8002a1c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fc7e 	bl	8003238 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 800293c:	e06e      	b.n	8002a1c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800293e:	68bc      	ldr	r4, [r7, #8]
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fc6c 	bl	8003220 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002948:	4603      	mov	r3, r0
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	4620      	mov	r0, r4
 8002950:	f000 f993 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d056      	beq.n	8002a08 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800295e:	69bc      	ldr	r4, [r7, #24]
 8002960:	68b8      	ldr	r0, [r7, #8]
 8002962:	f000 fc51 	bl	8003208 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8002966:	4603      	mov	r3, r0
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	429c      	cmp	r4, r3
 800296c:	bf0c      	ite	eq
 800296e:	2301      	moveq	r3, #1
 8002970:	2300      	movne	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00c      	beq.n	8002992 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8002978:	2300      	movs	r3, #0
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	68b8      	ldr	r0, [r7, #8]
 800297e:	f000 fc43 	bl	8003208 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8002982:	4602      	mov	r2, r0
 8002984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002988:	4619      	mov	r1, r3
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f98a 	bl	8002ca4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8002990:	e044      	b.n	8002a1c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8002992:	68bc      	ldr	r4, [r7, #8]
 8002994:	f107 0310 	add.w	r3, r7, #16
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fcef 	bl	800337c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEppEv>
 800299e:	4603      	mov	r3, r0
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fc3c 	bl	8003220 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80029a8:	4603      	mov	r3, r0
 80029aa:	461a      	mov	r2, r3
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	4620      	mov	r0, r4
 80029b0:	f000 f963 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01f      	beq.n	80029fa <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fed6 	bl	800276e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 80029d2:	2300      	movs	r3, #0
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d6:	f107 0218 	add.w	r2, r7, #24
 80029da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029de:	4619      	mov	r1, r3
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f95f 	bl	8002ca4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80029e6:	e019      	b.n	8002a1c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80029e8:	f107 0210 	add.w	r2, r7, #16
 80029ec:	f107 0310 	add.w	r3, r7, #16
 80029f0:	4619      	mov	r1, r3
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f9fd 	bl	8002df2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80029f8:	e010      	b.n	8002a1c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fc19 	bl	8003238 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8002a06:	e009      	b.n	8002a1c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002a10:	f107 0318 	add.w	r3, r7, #24
 8002a14:	4619      	mov	r1, r3
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fa26 	bl	8002e68 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	3734      	adds	r7, #52	; 0x34
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd90      	pop	{r4, r7, pc}

08002a24 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>:
      operator()(const _Pair& __x) const
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002a52:	b5b0      	push	{r4, r5, r7, lr}
 8002a54:	b088      	sub	sp, #32
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d11a      	bne.n	8002a9c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fbb6 	bl	80031d8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d013      	beq.n	8002a9c <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8002a74:	68fc      	ldr	r4, [r7, #12]
 8002a76:	f107 0310 	add.w	r3, r7, #16
 8002a7a:	6839      	ldr	r1, [r7, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ffd1 	bl	8002a24 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 8002a82:	4605      	mov	r5, r0
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 fbcb 	bl	8003220 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4629      	mov	r1, r5
 8002a90:	4620      	mov	r0, r4
 8002a92:	f000 f8f2 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 8002aa0:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8002aa2:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8002aa4:	6838      	ldr	r0, [r7, #0]
 8002aa6:	f7ff ffc9 	bl	8002a3c <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4619      	mov	r1, r3
 8002aae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ab0:	f000 fc75 	bl	800339e <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 8002ab4:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8002aba:	7ff8      	ldrb	r0, [r7, #31]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	69b9      	ldr	r1, [r7, #24]
 8002ac0:	f014 f99e 	bl	8016e00 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	69b9      	ldr	r1, [r7, #24]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fe73 	bl	80027c0 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8002ada:	697b      	ldr	r3, [r7, #20]
      }
 8002adc:	4618      	mov	r0, r3
 8002ade:	3720      	adds	r7, #32
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bdb0      	pop	{r4, r5, r7, pc}

08002ae4 <_ZNRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>:
	{ }

      constexpr const _Type& _M_get() const & noexcept
      { return _M_storage; }

      constexpr _Type& _M_get() & noexcept
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <_ZNRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <_ZNRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>:
	}

      const _Type& _M_get() const & noexcept
      { return *_M_storage._M_ptr(); }

      _Type& _M_get() & noexcept
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
      { return *_M_storage._M_ptr(); }
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 fc69 	bl	8003408 <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf0c      	ite	eq
 8002b4e:	2301      	moveq	r3, #1
 8002b50:	2300      	movne	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
    }
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002baa:	b590      	push	{r4, r7, lr}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fc3e 	bl	8003436 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8002bba:	4604      	mov	r4, r0
 8002bbc:	6838      	ldr	r0, [r7, #0]
 8002bbe:	f000 fc45 	bl	800344c <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f000 fc4e 	bl	8003468 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE7destroyIS4_EEvRS6_PT_>
      }
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd90      	pop	{r4, r7, pc}

08002bd4 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fc29 	bl	8003436 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2201      	movs	r2, #1
 8002be8:	6839      	ldr	r1, [r7, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fc49 	bl	8003482 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE10deallocateERS6_PS5_j>
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	f107 030c 	add.w	r3, r7, #12
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff f9f8 	bl	8002000 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3304      	adds	r3, #4
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3310      	adds	r3, #16
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fc18 	bl	80034a0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <_ZNKSt4lessIcEclERKcS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	bf34      	ite	cc
 8002c92:	2301      	movcc	r3, #1
 8002c94:	2300      	movcs	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fc04 	bl	80034c6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b08b      	sub	sp, #44	; 0x2c
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8002cdc:	68b8      	ldr	r0, [r7, #8]
 8002cde:	f7fe fe9b 	bl	8001a18 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8002ce6:	68b8      	ldr	r0, [r7, #8]
 8002ce8:	f7ff ff97 	bl	8002c1a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8002cec:	4603      	mov	r3, r0
 8002cee:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d020      	beq.n	8002d3e <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8002d00:	68bc      	ldr	r4, [r7, #8]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fbcb 	bl	80034a0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4620      	mov	r0, r4
 8002d12:	f7ff ffb2 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8002d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff f94d 	bl	8001fc6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	e004      	b.n	8002d3a <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff f93b 	bl	8001fae <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8002d3c:	e7db      	b.n	8002cf6 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	f107 0310 	add.w	r3, r7, #16
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff f95a 	bl	8002000 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8002d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01d      	beq.n	8002d90 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8002d54:	68b8      	ldr	r0, [r7, #8]
 8002d56:	f000 fbc1 	bl	80034dc <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	f107 021c 	add.w	r2, r7, #28
 8002d62:	f107 0310 	add.w	r3, r7, #16
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fbc8 	bl	80034fe <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc10token_typeEES6_>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8002d74:	f107 0214 	add.w	r2, r7, #20
 8002d78:	f107 0318 	add.w	r3, r7, #24
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fbd1 	bl	8003526 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>
 8002d84:	e025      	b.n	8002dd2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8002d86:	f107 0310 	add.w	r3, r7, #16
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f84a 	bl	8002e24 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8002d90:	68bc      	ldr	r4, [r7, #8]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff64 	bl	8002c62 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4620      	mov	r0, r4
 8002da2:	f7ff ff6a 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8002dac:	f107 0214 	add.w	r2, r7, #20
 8002db0:	f107 0318 	add.w	r3, r7, #24
 8002db4:	4619      	mov	r1, r3
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fbb5 	bl	8003526 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>
 8002dbc:	e009      	b.n	8002dd2 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	623b      	str	r3, [r7, #32]
 8002dc2:	f107 0220 	add.w	r2, r7, #32
 8002dc6:	f107 0310 	add.w	r3, r7, #16
 8002dca:	4619      	mov	r1, r3
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f84b 	bl	8002e68 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	372c      	adds	r7, #44	; 0x2c
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd90      	pop	{r4, r7, pc}

08002dda <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	330c      	adds	r3, #12
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002dfe:	68b8      	ldr	r0, [r7, #8]
 8002e00:	f000 fb61 	bl	80034c6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002e04:	4603      	mov	r3, r0
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fb5a 	bl	80034c6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002e12:	4603      	mov	r3, r0
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f013 ffe3 	bl	8016dfc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8002e36:	4602      	mov	r2, r0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	601a      	str	r2, [r3, #0]
	return *this;
 8002e3c:	687b      	ldr	r3, [r7, #4]
      }
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f013 ffbf 	bl	8016dd6 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	601a      	str	r2, [r3, #0]
	return *this;
 8002e5e:	687b      	ldr	r3, [r7, #4]
      }
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8002e74:	68b8      	ldr	r0, [r7, #8]
 8002e76:	f000 fb26 	bl	80034c6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681c      	ldr	r4, [r3, #0]
 8002ea2:	6838      	ldr	r0, [r7, #0]
 8002ea4:	f7ff f9ea 	bl	800227c <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4620      	mov	r0, r4
 8002eae:	f000 fb53 	bl	8003558 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd90      	pop	{r4, r7, pc}

08002ebc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEC1ERKSD_>:
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002ed4:	b590      	push	{r4, r7, lr}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fb51 	bl	8003586 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	6838      	ldr	r0, [r7, #0]
 8002ee8:	f000 fb58 	bl	800359c <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f000 fb61 	bl	80035b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE7destroyISA_EEvRSC_PT_>
      }
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd90      	pop	{r4, r7, pc}

08002efe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fb3c 	bl	8003586 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2201      	movs	r2, #1
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fb5c 	bl	80035d2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE10deallocateERSC_PSB_j>
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	f107 030c 	add.w	r3, r7, #12
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fa59 	bl	80023ec <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3310      	adds	r3, #16
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fb2b 	bl	80035f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	68b8      	ldr	r0, [r7, #8]
 8002fb4:	f000 fb2f 	bl	8003616 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002fc2:	b590      	push	{r4, r7, lr}
 8002fc4:	b08b      	sub	sp, #44	; 0x2c
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8002fce:	68b8      	ldr	r0, [r7, #8]
 8002fd0:	f7fe fdfe 	bl	8001bd0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8002fd8:	68b8      	ldr	r0, [r7, #8]
 8002fda:	f7ff ffb3 	bl	8002f44 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d020      	beq.n	8003030 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6e>
	  __y = __x;
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8002ff2:	68bc      	ldr	r4, [r7, #8]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fafa 	bl	80035f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	461a      	mov	r2, r3
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4620      	mov	r0, r4
 8003004:	f7ff ffce 	bl	8002fa4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8003008:	4603      	mov	r3, r0
 800300a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800300e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x60>
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff f9ca 	bl	80023b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 800301e:	4603      	mov	r3, r0
 8003020:	e004      	b.n	800302c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6a>
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff f9b8 	bl	800239a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 800302a:	4603      	mov	r3, r0
 800302c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800302e:	e7db      	b.n	8002fe8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x26>
      iterator __j = iterator(__y);
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	f107 0310 	add.w	r3, r7, #16
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f9d7 	bl	80023ec <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800303e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01d      	beq.n	8003082 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 8003046:	68b8      	ldr	r0, [r7, #8]
 8003048:	f000 faf5 	bl	8003636 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>
 800304c:	4603      	mov	r3, r0
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	f107 021c 	add.w	r2, r7, #28
 8003054:	f107 0310 	add.w	r3, r7, #16
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fafc 	bl	8003658 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 8003066:	f107 0214 	add.w	r2, r7, #20
 800306a:	f107 0318 	add.w	r3, r7, #24
 800306e:	4619      	mov	r1, r3
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 fb05 	bl	8003680 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>
 8003076:	e025      	b.n	80030c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 8003078:	f107 0310 	add.w	r3, r7, #16
 800307c:	4618      	mov	r0, r3
 800307e:	f000 f831 	bl	80030e4 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8003082:	68bc      	ldr	r4, [r7, #8]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff ff80 	bl	8002f8c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800308c:	4603      	mov	r3, r0
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	4619      	mov	r1, r3
 8003092:	4620      	mov	r0, r4
 8003094:	f7ff ff86 	bl	8002fa4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 800309e:	f107 0214 	add.w	r2, r7, #20
 80030a2:	f107 0318 	add.w	r3, r7, #24
 80030a6:	4619      	mov	r1, r3
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 fae9 	bl	8003680 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>
 80030ae:	e009      	b.n	80030c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 80030b0:	2300      	movs	r3, #0
 80030b2:	623b      	str	r3, [r7, #32]
 80030b4:	f107 0220 	add.w	r2, r7, #32
 80030b8:	f107 0310 	add.w	r3, r7, #16
 80030bc:	4619      	mov	r1, r3
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f7ff fed2 	bl	8002e68 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	372c      	adds	r7, #44	; 0x2c
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd90      	pop	{r4, r7, pc}

080030cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	330c      	adds	r3, #12
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f013 fe83 	bl	8016dfc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80030f6:	4602      	mov	r2, r0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	601a      	str	r2, [r3, #0]
	return *this;
 80030fc:	687b      	ldr	r3, [r7, #4]
      }
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f013 fe5f 	bl	8016dd6 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8003118:	4602      	mov	r2, r0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	601a      	str	r2, [r3, #0]
	return *this;
 800311e:	687b      	ldr	r3, [r7, #4]
      }
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>:
	  operator()(_Arg&& __arg) const
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681c      	ldr	r4, [r3, #0]
 8003136:	6838      	ldr	r0, [r7, #0]
 8003138:	f7ff fa96 	bl	8002668 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 800313c:	4603      	mov	r3, r0
 800313e:	4619      	mov	r1, r3
 8003140:	4620      	mov	r0, r4
 8003142:	f000 fab6 	bl	80036b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>
 8003146:	4603      	mov	r3, r0
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	bd90      	pop	{r4, r7, pc}

08003150 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEC1ERKS7_>:
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fab4 	bl	80036e0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8003178:	4604      	mov	r4, r0
 800317a:	6838      	ldr	r0, [r7, #0]
 800317c:	f000 fabb 	bl	80036f6 <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 8003180:	4603      	mov	r3, r0
 8003182:	4619      	mov	r1, r3
 8003184:	4620      	mov	r0, r4
 8003186:	f000 fac4 	bl	8003712 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE7destroyIS4_EEvRS6_PT_>
      }
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bd90      	pop	{r4, r7, pc}

08003192 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fa9f 	bl	80036e0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2201      	movs	r2, #1
 80031a6:	6839      	ldr	r1, [r7, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fabf 	bl	800372c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE10deallocateERS6_PS5_j>
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	f107 030c 	add.w	r3, r7, #12
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff faf9 	bl	80027c0 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3310      	adds	r3, #16
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fa8e 	bl	800374a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800322e:	4603      	mov	r3, r0
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b08b      	sub	sp, #44	; 0x2c
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8003244:	68b8      	ldr	r0, [r7, #8]
 8003246:	f7fe fd9f 	bl	8001d88 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 800324a:	4603      	mov	r3, r0
 800324c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800324e:	68b8      	ldr	r0, [r7, #8]
 8003250:	f7ff ffc2 	bl	80031d8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8003254:	4603      	mov	r3, r0
 8003256:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8003258:	2301      	movs	r3, #1
 800325a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d020      	beq.n	80032a6 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8003268:	68bc      	ldr	r4, [r7, #8]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fa6c 	bl	800374a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8003272:	4603      	mov	r3, r0
 8003274:	461a      	mov	r2, r3
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4620      	mov	r0, r4
 800327a:	f7ff fcfe 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 800327e:	4603      	mov	r3, r0
 8003280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8003284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fa79 	bl	8002786 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8003294:	4603      	mov	r3, r0
 8003296:	e004      	b.n	80032a2 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fa67 	bl	800276e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 80032a0:	4603      	mov	r3, r0
 80032a2:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80032a4:	e7db      	b.n	800325e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	f107 0310 	add.w	r3, r7, #16
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fa86 	bl	80027c0 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80032b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01d      	beq.n	80032f8 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 80032bc:	68b8      	ldr	r0, [r7, #8]
 80032be:	f000 fa57 	bl	8003770 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>
 80032c2:	4603      	mov	r3, r0
 80032c4:	61fb      	str	r3, [r7, #28]
 80032c6:	f107 021c 	add.w	r2, r7, #28
 80032ca:	f107 0310 	add.w	r3, r7, #16
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fa5e 	bl	8003792 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEES6_>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 80032dc:	f107 0214 	add.w	r2, r7, #20
 80032e0:	f107 0318 	add.w	r3, r7, #24
 80032e4:	4619      	mov	r1, r3
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fa67 	bl	80037ba <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>
 80032ec:	e025      	b.n	800333a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 80032ee:	f107 0310 	add.w	r3, r7, #16
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f831 	bl	800335a <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80032f8:	68bc      	ldr	r4, [r7, #8]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ff8f 	bl	8003220 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003302:	4603      	mov	r3, r0
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4619      	mov	r1, r3
 8003308:	4620      	mov	r0, r4
 800330a:	f7ff fcb6 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8003314:	f107 0214 	add.w	r2, r7, #20
 8003318:	f107 0318 	add.w	r3, r7, #24
 800331c:	4619      	mov	r1, r3
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fa4b 	bl	80037ba <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>
 8003324:	e009      	b.n	800333a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8003326:	2300      	movs	r3, #0
 8003328:	623b      	str	r3, [r7, #32]
 800332a:	f107 0220 	add.w	r2, r7, #32
 800332e:	f107 0310 	add.w	r3, r7, #16
 8003332:	4619      	mov	r1, r3
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f7ff fd97 	bl	8002e68 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	372c      	adds	r7, #44	; 0x2c
 800333e:	46bd      	mov	sp, r7
 8003340:	bd90      	pop	{r4, r7, pc}

08003342 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	330c      	adds	r3, #12
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f013 fd48 	bl	8016dfc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800336c:	4602      	mov	r2, r0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
	return *this;
 8003372:	687b      	ldr	r3, [r7, #4]
      }
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f013 fd24 	bl	8016dd6 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800338e:	4602      	mov	r2, r0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	601a      	str	r2, [r3, #0]
	return *this;
 8003394:	687b      	ldr	r3, [r7, #4]
      }
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 800339e:	b590      	push	{r4, r7, lr}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681c      	ldr	r4, [r3, #0]
 80033ac:	6838      	ldr	r0, [r7, #0]
 80033ae:	f7ff fb45 	bl	8002a3c <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4619      	mov	r1, r3
 80033b6:	4620      	mov	r0, r4
 80033b8:	f000 fa18 	bl	80037ec <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 80033bc:	4603      	mov	r3, r0
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd90      	pop	{r4, r7, pc}

080033c6 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fa02 	bl	800381a <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv>
 8003416:	4603      	mov	r3, r0
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4618      	mov	r0, r3
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>:
      _M_valptr()
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3310      	adds	r3, #16
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f9e9 	bl	8003830 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>
 800345e:	4603      	mov	r3, r0
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE7destroyIS4_EEvRS6_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 8003472:	6839      	ldr	r1, [r7, #0]
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f9e7 	bl	8003848 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE7destroyIS5_EEvPT_>
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f9e3 	bl	800385e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE10deallocateEPS6_j>
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f9e4 	bl	8003876 <_ZNKSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 80034ae:	4602      	mov	r2, r0
 80034b0:	f107 030c 	add.w	r3, r7, #12
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe fed4 	bl	8002264 <_ZNKSt10_Select1stISt4pairIKc10token_typeEEclERKS3_>
 80034bc:	4603      	mov	r3, r0
      }
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	f107 030c 	add.w	r3, r7, #12
 80034ec:	4611      	mov	r1, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe fd86 	bl	8002000 <_ZNSt17_Rb_tree_iteratorISt4pairIKc10token_typeEEC1EPSt18_Rb_tree_node_base>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc10token_typeEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	bf0c      	ite	eq
 8003514:	2301      	moveq	r3, #1
 8003516:	2300      	movne	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc10token_typeEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8003532:	68b8      	ldr	r0, [r7, #8]
 8003534:	f000 f9ad 	bl	8003892 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc10token_typeEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003538:	4603      	mov	r3, r0
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ffc0 	bl	80034c6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003546:	4603      	mov	r3, r0
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f9a0 	bl	80038a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>
 8003568:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800356a:	6838      	ldr	r0, [r7, #0]
 800356c:	f7fe fe86 	bl	800227c <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	68f9      	ldr	r1, [r7, #12]
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f9a7 	bl	80038ca <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 800357c:	68fb      	ldr	r3, [r7, #12]
	}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>:
      _M_valptr()
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3310      	adds	r3, #16
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f9ae 	bl	800390a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE7destroyISA_EEvRSC_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80035c2:	6839      	ldr	r1, [r7, #0]
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f9ac 	bl	8003922 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE7destroyISB_EEvPT_>
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f9a9 	bl	800393a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE10deallocateEPSC_j>
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>:
      _S_key(_Const_Link_type __x)
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f9aa 	bl	8003952 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 80035fe:	4602      	mov	r2, r0
 8003600:	f107 030c 	add.w	r3, r7, #12
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff f822 	bl	8002650 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEclERKS9_>
 800360c:	4603      	mov	r3, r0
      }
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 8003620:	6839      	ldr	r1, [r7, #0]
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f013 fe40 	bl	80172a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8003628:	4603      	mov	r3, r0
 800362a:	0fdb      	lsrs	r3, r3, #31
 800362c:	b2db      	uxtb	r3, r3
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	f107 030c 	add.w	r3, r7, #12
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f7fe fecf 	bl	80023ec <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPSt18_Rb_tree_node_base>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	bf0c      	ite	eq
 800366e:	2301      	moveq	r3, #1
 8003670:	2300      	movne	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800368c:	68b8      	ldr	r0, [r7, #8]
 800368e:	f000 f96e 	bl	800396e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEOT_RNSt16remove_referenceISE_E4typeE>
 8003692:	4603      	mov	r3, r0
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff ff13 	bl	80034c6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80036a0:	4603      	mov	r3, r0
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f961 	bl	8003984 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>
 80036c2:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80036c4:	6838      	ldr	r0, [r7, #0]
 80036c6:	f7fe ffcf 	bl	8002668 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 80036ca:	4603      	mov	r3, r0
 80036cc:	461a      	mov	r2, r3
 80036ce:	68f9      	ldr	r1, [r7, #12]
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f968 	bl	80039a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>
	  return __tmp;
 80036d6:	68fb      	ldr	r3, [r7, #12]
	}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>:
      _M_valptr()
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3310      	adds	r3, #16
 8003702:	4618      	mov	r0, r3
 8003704:	f000 f96f 	bl	80039e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>
 8003708:	4603      	mov	r3, r0
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800371c:	6839      	ldr	r1, [r7, #0]
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f96d 	bl	80039fe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE7destroyIS5_EEvPT_>
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f969 	bl	8003a14 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE10deallocateEPS6_j>
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 800374a:	b580      	push	{r7, lr}
 800374c:	b084      	sub	sp, #16
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f96a 	bl	8003a2c <_ZNKSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 8003758:	4602      	mov	r2, r0
 800375a:	f107 030c 	add.w	r3, r7, #12
 800375e:	4611      	mov	r1, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff f95f 	bl	8002a24 <_ZNKSt10_Select1stISt4pairIKc12double_tokenEEclERKS3_>
 8003766:	4603      	mov	r3, r0
      }
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff f81c 	bl	80027c0 <_ZNSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEEC1EPSt18_Rb_tree_node_base>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKc12double_tokenEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKc12double_tokenEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80037c6:	68b8      	ldr	r0, [r7, #8]
 80037c8:	f000 f93e 	bl	8003a48 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80037cc:	4603      	mov	r3, r0
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff fe76 	bl	80034c6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80037da:	4603      	mov	r3, r0
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f931 	bl	8003a5e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>
 80037fc:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80037fe:	6838      	ldr	r0, [r7, #0]
 8003800:	f7ff f91c 	bl	8002a3c <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	68f9      	ldr	r1, [r7, #12]
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f938 	bl	8003a80 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 8003810:	68fb      	ldr	r3, [r7, #12]
	}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv>:
      _M_addr() noexcept
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>:
      _M_ptr() noexcept
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f996 	bl	8003b6a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>
 800383e:	4603      	mov	r3, r0
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE7destroyIS5_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800386a:	68b8      	ldr	r0, [r7, #8]
 800386c:	f013 fa5b 	bl	8016d26 <_ZdlPv>
      }
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <_ZNKSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>:
      _M_valptr() const
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3310      	adds	r3, #16
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f97c 	bl	8003b80 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>
 8003888:	4603      	mov	r3, r0
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc10token_typeEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff fdc0 	bl	8003436 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2101      	movs	r1, #1
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f96c 	bl	8003b98 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE8allocateERS6_j>
 80038c0:	4603      	mov	r3, r0
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80038ca:	b5b0      	push	{r4, r5, r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4619      	mov	r1, r3
 80038da:	2014      	movs	r0, #20
 80038dc:	f7fd fb7e 	bl	8000fdc <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f7ff fda8 	bl	8003436 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 80038e6:	4604      	mov	r4, r0
 80038e8:	68b8      	ldr	r0, [r7, #8]
 80038ea:	f7ff fdaf 	bl	800344c <_ZNSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 80038ee:	4605      	mov	r5, r0
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7fe fcc3 	bl	800227c <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	4629      	mov	r1, r5
 80038fc:	4620      	mov	r0, r4
 80038fe:	f000 f95a 	bl	8003bb6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bdb0      	pop	{r4, r5, r7, pc}

0800390a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>:
      _M_ptr() noexcept
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f962 	bl	8003bdc <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>
 8003918:	4603      	mov	r3, r0
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE7destroyISB_EEvPT_>:
	destroy(_Up* __p)
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800392c:	6838      	ldr	r0, [r7, #0]
 800392e:	f7fd fba8 	bl	8001082 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE10deallocateEPSC_j>:
      deallocate(pointer __p, size_type)
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003946:	68b8      	ldr	r0, [r7, #8]
 8003948:	f013 f9ed 	bl	8016d26 <_ZdlPv>
      }
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>:
      _M_valptr() const
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3310      	adds	r3, #16
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f947 	bl	8003bf2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>
 8003964:	4603      	mov	r3, r0
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>:
      _M_get_node()
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff fdfa 	bl	8003586 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8003992:	4603      	mov	r3, r0
 8003994:	2101      	movs	r1, #1
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f937 	bl	8003c0a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE8allocateERSC_j>
 800399c:	4603      	mov	r3, r0
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80039a6:	b5b0      	push	{r4, r5, r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4619      	mov	r1, r3
 80039b6:	202c      	movs	r0, #44	; 0x2c
 80039b8:	f7fd fb10 	bl	8000fdc <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff fde2 	bl	8003586 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 80039c2:	4604      	mov	r4, r0
 80039c4:	68b8      	ldr	r0, [r7, #8]
 80039c6:	f7ff fde9 	bl	800359c <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 80039ca:	4605      	mov	r5, r0
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7fe fe4b 	bl	8002668 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 80039d2:	4603      	mov	r3, r0
 80039d4:	461a      	mov	r2, r3
 80039d6:	4629      	mov	r1, r5
 80039d8:	4620      	mov	r0, r4
 80039da:	f000 f925 	bl	8003c28 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>
	}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bdb0      	pop	{r4, r5, r7, pc}

080039e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>:
      _M_ptr() noexcept
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f92d 	bl	8003c4e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>
 80039f4:	4603      	mov	r3, r0
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE7destroyIS5_EEvPT_>:
	destroy(_Up* __p)
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003a20:	68b8      	ldr	r0, [r7, #8]
 8003a22:	f013 f980 	bl	8016d26 <_ZdlPv>
      }
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <_ZNKSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>:
      _M_valptr() const
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3310      	adds	r3, #16
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 f913 	bl	8003c64 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fe3a 	bl	80036e0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 f903 	bl	8003c7c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE8allocateERS6_j>
 8003a76:	4603      	mov	r3, r0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8003a80:	b5b0      	push	{r4, r5, r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	2014      	movs	r0, #20
 8003a92:	f7fd faa3 	bl	8000fdc <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f7ff fe22 	bl	80036e0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	68b8      	ldr	r0, [r7, #8]
 8003aa0:	f7ff fe29 	bl	80036f6 <_ZNSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 8003aa4:	4605      	mov	r5, r0
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fe ffc8 	bl	8002a3c <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f000 f8f1 	bl	8003c9a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 8003ab8:	bf00      	nop
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bdb0      	pop	{r4, r5, r7, pc}

08003ac0 <_ZSt11__addressofIiEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <_ZSt8_DestroyIiEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <_ZSt11__addressofIbEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <_ZSt8_DestroyIbEvPT_>:
    _Destroy(_Tp* __pointer)
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f013 fabe 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>:
      _M_addr() noexcept
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f899 	bl	8003cc0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f895 	bl	8003cd6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv>
 8003bac:	4603      	mov	r3, r0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc10token_typeEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fe fb5a 	bl	800227c <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f8a3 	bl	8003d1a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>:
      _M_addr() noexcept
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8a5 	bl	8003d4a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>
 8003c00:	4603      	mov	r3, r0
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003c14:	2200      	movs	r2, #0
 8003c16:	6839      	ldr	r1, [r7, #0]
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f8a1 	bl	8003d60 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7fe fd17 	bl	8002668 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f8c2 	bl	8003dca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE9constructISB_JRKSB_EEEvPT_DpOT0_>
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>:
      _M_addr() noexcept
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f8c4 	bl	8003dfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>
 8003c72:	4603      	mov	r3, r0
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003c86:	2200      	movs	r2, #0
 8003c88:	6839      	ldr	r1, [r7, #0]
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f8c0 	bl	8003e10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv>
 8003c90:	4603      	mov	r3, r0
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fe fec8 	bl	8002a3c <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003cac:	4603      	mov	r3, r0
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f8ce 	bl	8003e54 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc10token_typeEE7_M_addrEv>:
      _M_addr() const noexcept
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f8d0 	bl	8003e88 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4293      	cmp	r3, r2
 8003cee:	bf8c      	ite	hi
 8003cf0:	2301      	movhi	r3, #1
 8003cf2:	2300      	movls	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003cfa:	f013 f8dd 	bl	8016eb8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f013 f810 	bl	8016d2e <_Znwj>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	bf00      	nop
      }
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003d1a:	b590      	push	{r4, r7, lr}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fe faa8 	bl	800227c <_ZSt7forwardIRKSt4pairIKc10token_typeEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4619      	mov	r1, r3
 8003d32:	2002      	movs	r0, #2
 8003d34:	f7fd f952 	bl	8000fdc <_ZnwjPv>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4623      	mov	r3, r4
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	8013      	strh	r3, [r2, #0]
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd90      	pop	{r4, r7, pc}

08003d4a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE7_M_addrEv>:
      _M_addr() const noexcept
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f899 	bl	8003ea4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv>
 8003d72:	4602      	mov	r2, r0
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4293      	cmp	r3, r2
 8003d78:	bf8c      	ite	hi
 8003d7a:	2301      	movhi	r3, #1
 8003d7c:	2300      	movls	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003d84:	f013 f898 	bl	8016eb8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	222c      	movs	r2, #44	; 0x2c
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	4618      	mov	r0, r3
 8003d92:	f012 ffcc 	bl	8016d2e <_Znwj>
 8003d96:	4603      	mov	r3, r0
 8003d98:	bf00      	nop
      }
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1ERKS8_>:
      constexpr pair(const pair&) = default;
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f013 fac0 	bl	8017338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	7e1a      	ldrb	r2, [r3, #24]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	761a      	strb	r2, [r3, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE9constructISB_JRKSB_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003dca:	b590      	push	{r4, r7, lr}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fe fc46 	bl	8002668 <_ZSt7forwardIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEOT_RNSt16remove_referenceISC_E4typeE>
 8003ddc:	4604      	mov	r4, r0
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4619      	mov	r1, r3
 8003de2:	201c      	movs	r0, #28
 8003de4:	f7fd f8fa 	bl	8000fdc <_ZnwjPv>
 8003de8:	4603      	mov	r3, r0
 8003dea:	4621      	mov	r1, r4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ffd8 	bl	8003da2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1ERKS8_>
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd90      	pop	{r4, r7, pc}

08003dfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKc12double_tokenEE7_M_addrEv>:
      _M_addr() const noexcept
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f84f 	bl	8003ec0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv>
 8003e22:	4602      	mov	r2, r0
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4293      	cmp	r3, r2
 8003e28:	bf8c      	ite	hi
 8003e2a:	2301      	movhi	r3, #1
 8003e2c:	2300      	movls	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003e34:	f013 f840 	bl	8016eb8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f012 ff73 	bl	8016d2e <_Znwj>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	bf00      	nop
      }
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7fe fdeb 	bl	8002a3c <_ZSt7forwardIRKSt4pairIKc12double_tokenEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003e66:	4604      	mov	r4, r0
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	2003      	movs	r0, #3
 8003e6e:	f7fd f8b5 	bl	8000fdc <_ZnwjPv>
 8003e72:	4603      	mov	r3, r0
 8003e74:	4622      	mov	r2, r4
 8003e76:	8811      	ldrh	r1, [r2, #0]
 8003e78:	7892      	ldrb	r2, [r2, #2]
 8003e7a:	8019      	strh	r1, [r3, #0]
 8003e7c:	709a      	strb	r2, [r3, #2]
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd90      	pop	{r4, r7, pc}
	...

08003e88 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc10token_typeEEE8max_sizeEv+0x18>)
      }
 8003e92:	4618      	mov	r0, r3
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	06666666 	.word	0x06666666

08003ea4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003eac:	4b03      	ldr	r3, [pc, #12]	; (8003ebc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEE8max_sizeEv+0x18>)
      }
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	02e8ba2e 	.word	0x02e8ba2e

08003ec0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003ec8:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKc12double_tokenEEE8max_sizeEv+0x18>)
      }
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	06666666 	.word	0x06666666

08003edc <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fd fcc3 	bl	8001872 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>:
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fd fc06 	bl	8001712 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>:
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd fb4c 	bl	80015b8 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <_Z41__static_initialization_and_destruction_0ii>:
}

void Executor::execute(Program p)
{

}
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b0e7      	sub	sp, #412	; 0x19c
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	6018      	str	r0, [r3, #0]
 8003f36:	463b      	mov	r3, r7
 8003f38:	6019      	str	r1, [r3, #0]
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	f040 819d 	bne.w	800427e <_Z41__static_initialization_and_destruction_0ii+0x352>
 8003f44:	463b      	mov	r3, r7
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	f040 8196 	bne.w	800427e <_Z41__static_initialization_and_destruction_0ii+0x352>
	{'^', TOKEN_POWER},
	{'%', TOKEN_MODULO},
	{'(', TOKEN_LEFT_BRACKET},
	{')', TOKEN_RIGHT_BRACKET},
	{'\0', TOKEN_END_OF_FILE},
};
 8003f52:	f107 0314 	add.w	r3, r7, #20
 8003f56:	4618      	mov	r0, r3
 8003f58:	2322      	movs	r3, #34	; 0x22
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	f013 faad 	bl	80174bc <memset>
 8003f62:	f107 0314 	add.w	r3, r7, #20
 8003f66:	223a      	movs	r2, #58	; 0x3a
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	f107 0314 	add.w	r3, r7, #20
 8003f6e:	2201      	movs	r2, #1
 8003f70:	705a      	strb	r2, [r3, #1]
 8003f72:	f107 0314 	add.w	r3, r7, #20
 8003f76:	220a      	movs	r2, #10
 8003f78:	709a      	strb	r2, [r3, #2]
 8003f7a:	f107 0314 	add.w	r3, r7, #20
 8003f7e:	220a      	movs	r2, #10
 8003f80:	70da      	strb	r2, [r3, #3]
 8003f82:	f107 0314 	add.w	r3, r7, #20
 8003f86:	222c      	movs	r2, #44	; 0x2c
 8003f88:	711a      	strb	r2, [r3, #4]
 8003f8a:	f107 0314 	add.w	r3, r7, #20
 8003f8e:	220c      	movs	r2, #12
 8003f90:	715a      	strb	r2, [r3, #5]
 8003f92:	f107 0314 	add.w	r3, r7, #20
 8003f96:	222e      	movs	r2, #46	; 0x2e
 8003f98:	719a      	strb	r2, [r3, #6]
 8003f9a:	f107 0314 	add.w	r3, r7, #20
 8003f9e:	220b      	movs	r2, #11
 8003fa0:	71da      	strb	r2, [r3, #7]
 8003fa2:	f107 0314 	add.w	r3, r7, #20
 8003fa6:	225b      	movs	r2, #91	; 0x5b
 8003fa8:	721a      	strb	r2, [r3, #8]
 8003faa:	f107 0314 	add.w	r3, r7, #20
 8003fae:	220d      	movs	r2, #13
 8003fb0:	725a      	strb	r2, [r3, #9]
 8003fb2:	f107 0314 	add.w	r3, r7, #20
 8003fb6:	225d      	movs	r2, #93	; 0x5d
 8003fb8:	729a      	strb	r2, [r3, #10]
 8003fba:	f107 0314 	add.w	r3, r7, #20
 8003fbe:	220e      	movs	r2, #14
 8003fc0:	72da      	strb	r2, [r3, #11]
 8003fc2:	f107 0314 	add.w	r3, r7, #20
 8003fc6:	227c      	movs	r2, #124	; 0x7c
 8003fc8:	731a      	strb	r2, [r3, #12]
 8003fca:	f107 0314 	add.w	r3, r7, #20
 8003fce:	2215      	movs	r2, #21
 8003fd0:	735a      	strb	r2, [r3, #13]
 8003fd2:	f107 0314 	add.w	r3, r7, #20
 8003fd6:	2226      	movs	r2, #38	; 0x26
 8003fd8:	739a      	strb	r2, [r3, #14]
 8003fda:	f107 0314 	add.w	r3, r7, #20
 8003fde:	2216      	movs	r2, #22
 8003fe0:	73da      	strb	r2, [r3, #15]
 8003fe2:	f107 0314 	add.w	r3, r7, #20
 8003fe6:	222b      	movs	r2, #43	; 0x2b
 8003fe8:	741a      	strb	r2, [r3, #16]
 8003fea:	f107 0314 	add.w	r3, r7, #20
 8003fee:	221f      	movs	r2, #31
 8003ff0:	745a      	strb	r2, [r3, #17]
 8003ff2:	f107 0314 	add.w	r3, r7, #20
 8003ff6:	222d      	movs	r2, #45	; 0x2d
 8003ff8:	749a      	strb	r2, [r3, #18]
 8003ffa:	f107 0314 	add.w	r3, r7, #20
 8003ffe:	2220      	movs	r2, #32
 8004000:	74da      	strb	r2, [r3, #19]
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	222a      	movs	r2, #42	; 0x2a
 8004008:	751a      	strb	r2, [r3, #20]
 800400a:	f107 0314 	add.w	r3, r7, #20
 800400e:	2221      	movs	r2, #33	; 0x21
 8004010:	755a      	strb	r2, [r3, #21]
 8004012:	f107 0314 	add.w	r3, r7, #20
 8004016:	222f      	movs	r2, #47	; 0x2f
 8004018:	759a      	strb	r2, [r3, #22]
 800401a:	f107 0314 	add.w	r3, r7, #20
 800401e:	2222      	movs	r2, #34	; 0x22
 8004020:	75da      	strb	r2, [r3, #23]
 8004022:	f107 0314 	add.w	r3, r7, #20
 8004026:	225e      	movs	r2, #94	; 0x5e
 8004028:	761a      	strb	r2, [r3, #24]
 800402a:	f107 0314 	add.w	r3, r7, #20
 800402e:	2223      	movs	r2, #35	; 0x23
 8004030:	765a      	strb	r2, [r3, #25]
 8004032:	f107 0314 	add.w	r3, r7, #20
 8004036:	2225      	movs	r2, #37	; 0x25
 8004038:	769a      	strb	r2, [r3, #26]
 800403a:	f107 0314 	add.w	r3, r7, #20
 800403e:	2224      	movs	r2, #36	; 0x24
 8004040:	76da      	strb	r2, [r3, #27]
 8004042:	f107 0314 	add.w	r3, r7, #20
 8004046:	2228      	movs	r2, #40	; 0x28
 8004048:	771a      	strb	r2, [r3, #28]
 800404a:	f107 0314 	add.w	r3, r7, #20
 800404e:	2226      	movs	r2, #38	; 0x26
 8004050:	775a      	strb	r2, [r3, #29]
 8004052:	f107 0314 	add.w	r3, r7, #20
 8004056:	2229      	movs	r2, #41	; 0x29
 8004058:	779a      	strb	r2, [r3, #30]
 800405a:	f107 0314 	add.w	r3, r7, #20
 800405e:	2227      	movs	r2, #39	; 0x27
 8004060:	77da      	strb	r2, [r3, #31]
 8004062:	f107 0314 	add.w	r3, r7, #20
 8004066:	2225      	movs	r2, #37	; 0x25
 8004068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800406c:	f107 030c 	add.w	r3, r7, #12
 8004070:	f107 0214 	add.w	r2, r7, #20
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	f107 030c 	add.w	r3, r7, #12
 800407a:	2211      	movs	r2, #17
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd f906 	bl	8001294 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8004088:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800408c:	f107 020c 	add.w	r2, r7, #12
 8004090:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	460b      	mov	r3, r1
 8004098:	ca06      	ldmia	r2, {r1, r2}
 800409a:	4885      	ldr	r0, [pc, #532]	; (80042b0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800409c:	f7fd f912 	bl	80012c4 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80040a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fd f901 	bl	80012ac <_ZNSaISt4pairIKc10token_typeEED1Ev>

static const std::map<std::string, token_type> token_strings
{
	{"true", TOKEN_TRUE},
 80040aa:	2305      	movs	r3, #5
 80040ac:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
	{"if", TOKEN_IF},
	{"elseif", TOKEN_ELSEIF},
	{"else", TOKEN_ELSE},
	{"while", TOKEN_WHILE},
	{"end", TOKEN_END},
};
 80040b0:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80040b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040b8:	497e      	ldr	r1, [pc, #504]	; (80042b4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fc ffee 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80040c0:	2306      	movs	r3, #6
 80040c2:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80040c6:	f207 1263 	addw	r2, r7, #355	; 0x163
 80040ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040ce:	331c      	adds	r3, #28
 80040d0:	4979      	ldr	r1, [pc, #484]	; (80042b8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fd f80a 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80040d8:	2307      	movs	r3, #7
 80040da:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80040de:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80040e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040e6:	3338      	adds	r3, #56	; 0x38
 80040e8:	4974      	ldr	r1, [pc, #464]	; (80042bc <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fc fffe 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80040f0:	2308      	movs	r3, #8
 80040f2:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80040f6:	f207 1265 	addw	r2, r7, #357	; 0x165
 80040fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040fe:	3354      	adds	r3, #84	; 0x54
 8004100:	496f      	ldr	r1, [pc, #444]	; (80042c0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc ffca 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8004108:	2309      	movs	r3, #9
 800410a:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800410e:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8004112:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004116:	3370      	adds	r3, #112	; 0x70
 8004118:	496a      	ldr	r1, [pc, #424]	; (80042c4 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800411a:	4618      	mov	r0, r3
 800411c:	f7fd f80e 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8004120:	2310      	movs	r3, #16
 8004122:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8004126:	f207 1267 	addw	r2, r7, #359	; 0x167
 800412a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800412e:	338c      	adds	r3, #140	; 0x8c
 8004130:	4965      	ldr	r1, [pc, #404]	; (80042c8 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8004132:	4618      	mov	r0, r3
 8004134:	f7fd f82a 	bl	800118c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8004138:	2311      	movs	r3, #17
 800413a:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800413e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8004142:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004146:	33a8      	adds	r3, #168	; 0xa8
 8004148:	4960      	ldr	r1, [pc, #384]	; (80042cc <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800414a:	4618      	mov	r0, r3
 800414c:	f7fc fff6 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8004150:	2312      	movs	r3, #18
 8004152:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8004156:	f207 1269 	addw	r2, r7, #361	; 0x169
 800415a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800415e:	33c4      	adds	r3, #196	; 0xc4
 8004160:	495b      	ldr	r1, [pc, #364]	; (80042d0 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8004162:	4618      	mov	r0, r3
 8004164:	f7fc ff9a 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8004168:	2313      	movs	r3, #19
 800416a:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800416e:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8004172:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004176:	33e0      	adds	r3, #224	; 0xe0
 8004178:	4956      	ldr	r1, [pc, #344]	; (80042d4 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc ffb6 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8004180:	2314      	movs	r3, #20
 8004182:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8004186:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800418a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800418e:	33fc      	adds	r3, #252	; 0xfc
 8004190:	4951      	ldr	r1, [pc, #324]	; (80042d8 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8004192:	4618      	mov	r0, r3
 8004194:	f7fd f822 	bl	80011dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8004198:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800419c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041a6:	220a      	movs	r2, #10
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fd f915 	bl	80013de <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80041b4:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80041b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80041bc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	460b      	mov	r3, r1
 80041c4:	ca06      	ldmia	r2, {r1, r2}
 80041c6:	4845      	ldr	r0, [pc, #276]	; (80042dc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80041c8:	f7fd f921 	bl	800140e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80041cc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fd f910 	bl	80013f6 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80041d6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80041da:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80041de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80041e2:	429c      	cmp	r4, r3
 80041e4:	d004      	beq.n	80041f0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 80041e6:	3c1c      	subs	r4, #28
 80041e8:	4620      	mov	r0, r4
 80041ea:	f7fc ff4a 	bl	8001082 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80041ee:	e7f6      	b.n	80041de <_Z41__static_initialization_and_destruction_0ii+0x2b2>
{
	{'<', {TOKEN_SMALLER_THAN, TOKEN_SMALLER_OR_EQUAL}},
	{'>', {TOKEN_GREATER_THAN, TOKEN_GREATER_OR_EQUAL}},
	{'=', {TOKEN_ASSIGN, TOKEN_EQUALS}},
	{'!', {TOKEN_EXCLAMATION, TOKEN_NOT_EQUAL}},
};
 80041f0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	233c      	movs	r3, #60	; 0x3c
 80041fe:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8004202:	231b      	movs	r3, #27
 8004204:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8004208:	231c      	movs	r3, #28
 800420a:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800420e:	233e      	movs	r3, #62	; 0x3e
 8004210:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8004214:	2319      	movs	r3, #25
 8004216:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800421a:	231a      	movs	r3, #26
 800421c:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8004220:	233d      	movs	r3, #61	; 0x3d
 8004222:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8004226:	2318      	movs	r3, #24
 8004228:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 800422c:	231d      	movs	r3, #29
 800422e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8004232:	2321      	movs	r3, #33	; 0x21
 8004234:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8004238:	2317      	movs	r3, #23
 800423a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800423e:	231e      	movs	r3, #30
 8004240:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8004244:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004248:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800424c:	2304      	movs	r3, #4
 800424e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004252:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004256:	4618      	mov	r0, r3
 8004258:	f7fd f909 	bl	800146e <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 800425c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8004260:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	4613      	mov	r3, r2
 8004268:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 800426c:	ca06      	ldmia	r2, {r1, r2}
 800426e:	481c      	ldr	r0, [pc, #112]	; (80042e0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8004270:	f7fd f915 	bl	800149e <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8004274:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004278:	4618      	mov	r0, r3
 800427a:	f7fd f904 	bl	8001486 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10e      	bne.n	80042a4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8004286:	463b      	mov	r3, r7
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8004292:	4813      	ldr	r0, [pc, #76]	; (80042e0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8004294:	f7ff fe22 	bl	8003edc <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8004298:	4810      	ldr	r0, [pc, #64]	; (80042dc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800429a:	f7ff fe2c 	bl	8003ef6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800429e:	4804      	ldr	r0, [pc, #16]	; (80042b0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80042a0:	f7ff fe36 	bl	8003f10 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80042a4:	bf00      	nop
 80042a6:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd90      	pop	{r4, r7, pc}
 80042ae:	bf00      	nop
 80042b0:	200001fc 	.word	0x200001fc
 80042b4:	0801a40c 	.word	0x0801a40c
 80042b8:	0801a414 	.word	0x0801a414
 80042bc:	0801a41c 	.word	0x0801a41c
 80042c0:	0801a424 	.word	0x0801a424
 80042c4:	0801a42c 	.word	0x0801a42c
 80042c8:	0801a434 	.word	0x0801a434
 80042cc:	0801a438 	.word	0x0801a438
 80042d0:	0801a440 	.word	0x0801a440
 80042d4:	0801a448 	.word	0x0801a448
 80042d8:	0801a450 	.word	0x0801a450
 80042dc:	20000214 	.word	0x20000214
 80042e0:	2000022c 	.word	0x2000022c

080042e4 <_GLOBAL__sub_I__ZN6SymbolD2Ev>:
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80042ec:	2001      	movs	r0, #1
 80042ee:	f7ff fe1d 	bl	8003f2c <_Z41__static_initialization_and_destruction_0ii>
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <_GLOBAL__sub_D__ZN6SymbolD2Ev>:
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80042fc:	2000      	movs	r0, #0
 80042fe:	f7ff fe15 	bl	8003f2c <_Z41__static_initialization_and_destruction_0ii>
 8004302:	bd80      	pop	{r7, pc}

08004304 <_ZSt26__throw_bad_variant_accessPKc>:
    friend void __throw_bad_variant_access(const char* __what);
  };

  inline void
  __throw_bad_variant_access(const char* __what)
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	f013 f82c 	bl	8017368 <abort>

08004310 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fa1f 	bl	800475e <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff ffeb 	bl	8004310 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff ffeb 	bl	800432a <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Move_assign_base : _Copy_assign_alias<_Types...>
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ffeb 	bl	8004344 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
    struct _Variant_base : _Move_assign_alias<_Types...>
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff ffeb 	bl	800435e <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
      variant() = default;
      variant(const variant& __rhs) = default;
      variant(variant&&) = default;
      variant& operator=(const variant&) = default;
      variant& operator=(variant&&) = default;
      ~variant() = default;
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff ffeb 	bl	8004378 <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <_ZN17Primal_expressionD1Ev>:
#include <Expression.h>

Primal_expression::~Primal_expression()
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
{
	if(std::holds_alternative<Variable*>(content))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f9ef 	bl	800479c <_ZSt17holds_alternativeIP8VariableJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_P13Function_callEEbRKSt7variantIJDpT0_EE>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d010      	beq.n	80043e6 <_ZN17Primal_expressionD1Ev+0x3a>
	{
		delete std::get<Variable*>(content);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 f9f8 	bl	80047be <_ZSt3getIP8VariableJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_P13Function_callEERT_RSt7variantIJDpT0_EE>
 80043ce:	4603      	mov	r3, r0
 80043d0:	681c      	ldr	r4, [r3, #0]
 80043d2:	2c00      	cmp	r4, #0
 80043d4:	d01f      	beq.n	8004416 <_ZN17Primal_expressionD1Ev+0x6a>
 80043d6:	4620      	mov	r0, r4
 80043d8:	f00a fb73 	bl	800eac2 <_ZN8VariableD1Ev>
 80043dc:	2120      	movs	r1, #32
 80043de:	4620      	mov	r0, r4
 80043e0:	f012 fca3 	bl	8016d2a <_ZdlPvj>
 80043e4:	e017      	b.n	8004416 <_ZN17Primal_expressionD1Ev+0x6a>
	}
	else if(std::holds_alternative<Function_call*>(content))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f9f3 	bl	80047d6 <_ZSt17holds_alternativeIP13Function_callJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableS1_EEbRKSt7variantIJDpT0_EE>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00f      	beq.n	8004416 <_ZN17Primal_expressionD1Ev+0x6a>
	{
		delete std::get<Function_call*>(content);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3304      	adds	r3, #4
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f9fc 	bl	80047f8 <_ZSt3getIP13Function_callJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableS1_EERT_RSt7variantIJDpT0_EE>
 8004400:	4603      	mov	r3, r0
 8004402:	681c      	ldr	r4, [r3, #0]
 8004404:	2c00      	cmp	r4, #0
 8004406:	d006      	beq.n	8004416 <_ZN17Primal_expressionD1Ev+0x6a>
 8004408:	4620      	mov	r0, r4
 800440a:	f00a fae1 	bl	800e9d0 <_ZN13Function_callD1Ev>
 800440e:	2124      	movs	r1, #36	; 0x24
 8004410:	4620      	mov	r0, r4
 8004412:	f012 fc8a 	bl	8016d2a <_ZdlPvj>
Primal_expression::~Primal_expression()
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3304      	adds	r3, #4
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff ffb9 	bl	8004392 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>
	}
}
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bd90      	pop	{r4, r7, pc}

0800442a <_ZN19Priority_expressionD1Ev>:

Priority_expression::~Priority_expression()
 800442a:	b590      	push	{r4, r7, lr}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
{
	if(std::holds_alternative<Expression*>(exp))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4618      	mov	r0, r3
 8004436:	f000 f9fe 	bl	8004836 <_ZSt17holds_alternativeIP10ExpressionJP17Primal_expressionS1_EEbRKSt7variantIJDpT0_EE>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00f      	beq.n	8004460 <_ZN19Priority_expressionD1Ev+0x36>
	{
		delete std::get<Expression*>(exp);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fa08 	bl	8004858 <_ZSt3getIP10ExpressionJP17Primal_expressionS1_EERT_RSt7variantIJDpT0_EE>
 8004448:	4603      	mov	r3, r0
 800444a:	681c      	ldr	r4, [r3, #0]
 800444c:	2c00      	cmp	r4, #0
 800444e:	d016      	beq.n	800447e <_ZN19Priority_expressionD1Ev+0x54>
 8004450:	4620      	mov	r0, r4
 8004452:	f000 f948 	bl	80046e6 <_ZN10ExpressionD1Ev>
 8004456:	210c      	movs	r1, #12
 8004458:	4620      	mov	r0, r4
 800445a:	f012 fc66 	bl	8016d2a <_ZdlPvj>
 800445e:	e00e      	b.n	800447e <_ZN19Priority_expressionD1Ev+0x54>
	}
	else
	{
		delete std::get<Primal_expression*>(exp);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fa04 	bl	8004870 <_ZSt3getIP17Primal_expressionJS1_P10ExpressionEERT_RSt7variantIJDpT0_EE>
 8004468:	4603      	mov	r3, r0
 800446a:	681c      	ldr	r4, [r3, #0]
 800446c:	2c00      	cmp	r4, #0
 800446e:	d006      	beq.n	800447e <_ZN19Priority_expressionD1Ev+0x54>
 8004470:	4620      	mov	r0, r4
 8004472:	f7ff ff9b 	bl	80043ac <_ZN17Primal_expressionD1Ev>
 8004476:	2120      	movs	r1, #32
 8004478:	4620      	mov	r0, r4
 800447a:	f012 fc56 	bl	8016d2a <_ZdlPvj>
	}
}
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bd90      	pop	{r4, r7, pc}

08004488 <_ZN16Unary_expressionD1Ev>:

Unary_expression::~Unary_expression()
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
{
	delete prior_exp;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681c      	ldr	r4, [r3, #0]
 8004494:	2c00      	cmp	r4, #0
 8004496:	d006      	beq.n	80044a6 <_ZN16Unary_expressionD1Ev+0x1e>
 8004498:	4620      	mov	r0, r4
 800449a:	f7ff ffc6 	bl	800442a <_ZN19Priority_expressionD1Ev>
 800449e:	2108      	movs	r1, #8
 80044a0:	4620      	mov	r0, r4
 80044a2:	f012 fc42 	bl	8016d2a <_ZdlPvj>
}
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd90      	pop	{r4, r7, pc}

080044b0 <_ZN16Power_expressionD1Ev>:

Power_expression::~Power_expression()
 80044b0:	b590      	push	{r4, r7, lr}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
{
	delete left_un_exp;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681c      	ldr	r4, [r3, #0]
 80044bc:	2c00      	cmp	r4, #0
 80044be:	d006      	beq.n	80044ce <_ZN16Power_expressionD1Ev+0x1e>
 80044c0:	4620      	mov	r0, r4
 80044c2:	f7ff ffe1 	bl	8004488 <_ZN16Unary_expressionD1Ev>
 80044c6:	2108      	movs	r1, #8
 80044c8:	4620      	mov	r0, r4
 80044ca:	f012 fc2e 	bl	8016d2a <_ZdlPvj>
	delete right_un_exp;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685c      	ldr	r4, [r3, #4]
 80044d2:	2c00      	cmp	r4, #0
 80044d4:	d006      	beq.n	80044e4 <_ZN16Power_expressionD1Ev+0x34>
 80044d6:	4620      	mov	r0, r4
 80044d8:	f7ff ffd6 	bl	8004488 <_ZN16Unary_expressionD1Ev>
 80044dc:	2108      	movs	r1, #8
 80044de:	4620      	mov	r0, r4
 80044e0:	f012 fc23 	bl	8016d2a <_ZdlPvj>
}
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd90      	pop	{r4, r7, pc}

080044ee <_ZN19Multiply_expressionD1Ev>:

Multiply_expression::~Multiply_expression()
 80044ee:	b590      	push	{r4, r7, lr}
 80044f0:	b087      	sub	sp, #28
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
{
	for(Power_expression* exp : pow_exps)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	6978      	ldr	r0, [r7, #20]
 80044fc:	f000 f9fa 	bl	80048f4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE5beginEv>
 8004500:	4603      	mov	r3, r0
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	6978      	ldr	r0, [r7, #20]
 8004506:	f000 fa05 	bl	8004914 <_ZNSt6vectorIP16Power_expressionSaIS1_EE3endEv>
 800450a:	4603      	mov	r3, r0
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	f107 0208 	add.w	r2, r7, #8
 8004512:	f107 030c 	add.w	r3, r7, #12
 8004516:	4611      	mov	r1, r2
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fa0c 	bl	8004936 <_ZN9__gnu_cxxneIPP16Power_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d017      	beq.n	8004554 <_ZN19Multiply_expressionD1Ev+0x66>
 8004524:	f107 030c 	add.w	r3, r7, #12
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fa2c 	bl	8004986 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 800452e:	4603      	mov	r3, r0
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	613b      	str	r3, [r7, #16]
	{
		delete exp;
 8004534:	693c      	ldr	r4, [r7, #16]
 8004536:	2c00      	cmp	r4, #0
 8004538:	d006      	beq.n	8004548 <_ZN19Multiply_expressionD1Ev+0x5a>
 800453a:	4620      	mov	r0, r4
 800453c:	f7ff ffb8 	bl	80044b0 <_ZN16Power_expressionD1Ev>
 8004540:	2108      	movs	r1, #8
 8004542:	4620      	mov	r0, r4
 8004544:	f012 fbf1 	bl	8016d2a <_ZdlPvj>
	for(Power_expression* exp : pow_exps)
 8004548:	f107 030c 	add.w	r3, r7, #12
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fa0a 	bl	8004966 <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEppEv>
 8004552:	e7dc      	b.n	800450e <_ZN19Multiply_expressionD1Ev+0x20>
Multiply_expression::~Multiply_expression()
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	330c      	adds	r3, #12
 8004558:	4618      	mov	r0, r3
 800455a:	f000 f9b0 	bl	80048be <_ZNSt6vectorI13mult_operatorSaIS0_EED1Ev>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 f991 	bl	8004888 <_ZNSt6vectorIP16Power_expressionSaIS1_EED1Ev>
	}
}
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4618      	mov	r0, r3
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	bd90      	pop	{r4, r7, pc}

08004570 <_ZN14Sum_expressionD1Ev>:

Sum_expression::~Sum_expression()
 8004570:	b590      	push	{r4, r7, lr}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
{
	for(Multiply_expression* exp : mult_exps)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	6978      	ldr	r0, [r7, #20]
 800457e:	f000 fa44 	bl	8004a0a <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE5beginEv>
 8004582:	4603      	mov	r3, r0
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	6978      	ldr	r0, [r7, #20]
 8004588:	f000 fa4f 	bl	8004a2a <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE3endEv>
 800458c:	4603      	mov	r3, r0
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	f107 0208 	add.w	r2, r7, #8
 8004594:	f107 030c 	add.w	r3, r7, #12
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fa56 	bl	8004a4c <_ZN9__gnu_cxxneIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d017      	beq.n	80045d6 <_ZN14Sum_expressionD1Ev+0x66>
 80045a6:	f107 030c 	add.w	r3, r7, #12
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fa76 	bl	8004a9c <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 80045b0:	4603      	mov	r3, r0
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	613b      	str	r3, [r7, #16]
	{
		delete exp;
 80045b6:	693c      	ldr	r4, [r7, #16]
 80045b8:	2c00      	cmp	r4, #0
 80045ba:	d006      	beq.n	80045ca <_ZN14Sum_expressionD1Ev+0x5a>
 80045bc:	4620      	mov	r0, r4
 80045be:	f7ff ff96 	bl	80044ee <_ZN19Multiply_expressionD1Ev>
 80045c2:	2118      	movs	r1, #24
 80045c4:	4620      	mov	r0, r4
 80045c6:	f012 fbb0 	bl	8016d2a <_ZdlPvj>
	for(Multiply_expression* exp : mult_exps)
 80045ca:	f107 030c 	add.w	r3, r7, #12
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fa54 	bl	8004a7c <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEppEv>
 80045d4:	e7dc      	b.n	8004590 <_ZN14Sum_expressionD1Ev+0x20>
Sum_expression::~Sum_expression()
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	330c      	adds	r3, #12
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f9fa 	bl	80049d4 <_ZNSt6vectorI12sum_operatorSaIS0_EED1Ev>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 f9db 	bl	800499e <_ZNSt6vectorIP19Multiply_expressionSaIS1_EED1Ev>
	}
}
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4618      	mov	r0, r3
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd90      	pop	{r4, r7, pc}

080045f2 <_ZN19Relation_expressionD1Ev>:

Relation_expression::~Relation_expression()
 80045f2:	b590      	push	{r4, r7, lr}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
{
	delete left_sum_exp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681c      	ldr	r4, [r3, #0]
 80045fe:	2c00      	cmp	r4, #0
 8004600:	d006      	beq.n	8004610 <_ZN19Relation_expressionD1Ev+0x1e>
 8004602:	4620      	mov	r0, r4
 8004604:	f7ff ffb4 	bl	8004570 <_ZN14Sum_expressionD1Ev>
 8004608:	2118      	movs	r1, #24
 800460a:	4620      	mov	r0, r4
 800460c:	f012 fb8d 	bl	8016d2a <_ZdlPvj>
	delete right_sum_exp;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685c      	ldr	r4, [r3, #4]
 8004614:	2c00      	cmp	r4, #0
 8004616:	d006      	beq.n	8004626 <_ZN19Relation_expressionD1Ev+0x34>
 8004618:	4620      	mov	r0, r4
 800461a:	f7ff ffa9 	bl	8004570 <_ZN14Sum_expressionD1Ev>
 800461e:	2118      	movs	r1, #24
 8004620:	4620      	mov	r0, r4
 8004622:	f012 fb82 	bl	8016d2a <_ZdlPvj>
}
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bd90      	pop	{r4, r7, pc}

08004630 <_ZN18Compare_expressionD1Ev>:

Compare_expression::~Compare_expression()
 8004630:	b590      	push	{r4, r7, lr}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
{
	delete left_rel_exp;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681c      	ldr	r4, [r3, #0]
 800463c:	2c00      	cmp	r4, #0
 800463e:	d006      	beq.n	800464e <_ZN18Compare_expressionD1Ev+0x1e>
 8004640:	4620      	mov	r0, r4
 8004642:	f7ff ffd6 	bl	80045f2 <_ZN19Relation_expressionD1Ev>
 8004646:	210c      	movs	r1, #12
 8004648:	4620      	mov	r0, r4
 800464a:	f012 fb6e 	bl	8016d2a <_ZdlPvj>
	delete right_rel_exp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685c      	ldr	r4, [r3, #4]
 8004652:	2c00      	cmp	r4, #0
 8004654:	d006      	beq.n	8004664 <_ZN18Compare_expressionD1Ev+0x34>
 8004656:	4620      	mov	r0, r4
 8004658:	f7ff ffcb 	bl	80045f2 <_ZN19Relation_expressionD1Ev>
 800465c:	210c      	movs	r1, #12
 800465e:	4620      	mov	r0, r4
 8004660:	f012 fb63 	bl	8016d2a <_ZdlPvj>
}
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4618      	mov	r0, r3
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	bd90      	pop	{r4, r7, pc}

0800466e <_ZN14And_expressionD1Ev>:

And_expression::~And_expression()
 800466e:	b590      	push	{r4, r7, lr}
 8004670:	b087      	sub	sp, #28
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
{
	for(Compare_expression* exp : comp_exps)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	f000 fa35 	bl	8004aea <_ZNSt6vectorIP18Compare_expressionSaIS1_EE5beginEv>
 8004680:	4603      	mov	r3, r0
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	6978      	ldr	r0, [r7, #20]
 8004686:	f000 fa40 	bl	8004b0a <_ZNSt6vectorIP18Compare_expressionSaIS1_EE3endEv>
 800468a:	4603      	mov	r3, r0
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	f107 0208 	add.w	r2, r7, #8
 8004692:	f107 030c 	add.w	r3, r7, #12
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fa47 	bl	8004b2c <_ZN9__gnu_cxxneIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d017      	beq.n	80046d4 <_ZN14And_expressionD1Ev+0x66>
 80046a4:	f107 030c 	add.w	r3, r7, #12
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fa67 	bl	8004b7c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 80046ae:	4603      	mov	r3, r0
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	613b      	str	r3, [r7, #16]
	{
		delete exp;
 80046b4:	693c      	ldr	r4, [r7, #16]
 80046b6:	2c00      	cmp	r4, #0
 80046b8:	d006      	beq.n	80046c8 <_ZN14And_expressionD1Ev+0x5a>
 80046ba:	4620      	mov	r0, r4
 80046bc:	f7ff ffb8 	bl	8004630 <_ZN18Compare_expressionD1Ev>
 80046c0:	210c      	movs	r1, #12
 80046c2:	4620      	mov	r0, r4
 80046c4:	f012 fb31 	bl	8016d2a <_ZdlPvj>
	for(Compare_expression* exp : comp_exps)
 80046c8:	f107 030c 	add.w	r3, r7, #12
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fa45 	bl	8004b5c <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEppEv>
 80046d2:	e7dc      	b.n	800468e <_ZN14And_expressionD1Ev+0x20>
And_expression::~And_expression()
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f9ec 	bl	8004ab4 <_ZNSt6vectorIP18Compare_expressionSaIS1_EED1Ev>
	}
}
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4618      	mov	r0, r3
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd90      	pop	{r4, r7, pc}

080046e6 <_ZN10ExpressionD1Ev>:

Expression::~Expression()
 80046e6:	b590      	push	{r4, r7, lr}
 80046e8:	b087      	sub	sp, #28
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
{
	for(And_expression* exp : and_exps)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	f000 fa69 	bl	8004bca <_ZNSt6vectorIP14And_expressionSaIS1_EE5beginEv>
 80046f8:	4603      	mov	r3, r0
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	6978      	ldr	r0, [r7, #20]
 80046fe:	f000 fa74 	bl	8004bea <_ZNSt6vectorIP14And_expressionSaIS1_EE3endEv>
 8004702:	4603      	mov	r3, r0
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	f107 0208 	add.w	r2, r7, #8
 800470a:	f107 030c 	add.w	r3, r7, #12
 800470e:	4611      	mov	r1, r2
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fa7b 	bl	8004c0c <_ZN9__gnu_cxxneIPP14And_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d017      	beq.n	800474c <_ZN10ExpressionD1Ev+0x66>
 800471c:	f107 030c 	add.w	r3, r7, #12
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fa9b 	bl	8004c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 8004726:	4603      	mov	r3, r0
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	613b      	str	r3, [r7, #16]
	{
		delete exp;
 800472c:	693c      	ldr	r4, [r7, #16]
 800472e:	2c00      	cmp	r4, #0
 8004730:	d006      	beq.n	8004740 <_ZN10ExpressionD1Ev+0x5a>
 8004732:	4620      	mov	r0, r4
 8004734:	f7ff ff9b 	bl	800466e <_ZN14And_expressionD1Ev>
 8004738:	210c      	movs	r1, #12
 800473a:	4620      	mov	r0, r4
 800473c:	f012 faf5 	bl	8016d2a <_ZdlPvj>
	for(And_expression* exp : and_exps)
 8004740:	f107 030c 	add.w	r3, r7, #12
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fa79 	bl	8004c3c <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEppEv>
 800474a:	e7dc      	b.n	8004706 <_ZN10ExpressionD1Ev+0x20>
Expression::~Expression()
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fa20 	bl	8004b94 <_ZNSt6vectorIP14And_expressionSaIS1_EED1Ev>
	}
}
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4618      	mov	r0, r3
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	bd90      	pop	{r4, r7, pc}

0800475e <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEED1Ev>:
      ~_Variant_storage()
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
      { _M_reset(); }
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fa84 	bl	8004c74 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>:
	}

      constexpr bool valueless_by_exception() const noexcept
      { return !this->_M_valid(); }

      constexpr size_t index() const noexcept
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
      {
	if (this->_M_index ==
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	7e1b      	ldrb	r3, [r3, #24]
 8004782:	2bff      	cmp	r3, #255	; 0xff
 8004784:	d102      	bne.n	800478c <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv+0x16>
	    typename _Base::__index_type(variant_npos))
	  return variant_npos;
 8004786:	f04f 33ff 	mov.w	r3, #4294967295
 800478a:	e001      	b.n	8004790 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv+0x1a>
	return this->_M_index;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	7e1b      	ldrb	r3, [r3, #24]
      }
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <_ZSt17holds_alternativeIP8VariableJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_P13Function_callEEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
      return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff ffe6 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
    }
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <_ZSt3getIP8VariableJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_P13Function_callEERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 facc 	bl	8004d64 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 80047cc:	4603      	mov	r3, r0
    }
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <_ZSt17holds_alternativeIP13Function_callJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableS1_EEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
      return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff ffc9 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b05      	cmp	r3, #5
 80047e8:	bf0c      	ite	eq
 80047ea:	2301      	moveq	r3, #1
 80047ec:	2300      	movne	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
    }
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <_ZSt3getIP13Function_callJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableS1_EERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fb47 	bl	8004e94 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8004806:	4603      	mov	r3, r0
    }
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>:
      constexpr size_t index() const noexcept
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	if (this->_M_index ==
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	791b      	ldrb	r3, [r3, #4]
 800481c:	2bff      	cmp	r3, #255	; 0xff
 800481e:	d102      	bne.n	8004826 <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv+0x16>
	  return variant_npos;
 8004820:	f04f 33ff 	mov.w	r3, #4294967295
 8004824:	e001      	b.n	800482a <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv+0x1a>
	return this->_M_index;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	791b      	ldrb	r3, [r3, #4]
      }
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <_ZSt17holds_alternativeIP10ExpressionJP17Primal_expressionS1_EEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
      return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ffe6 	bl	8004810 <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 8004844:	4603      	mov	r3, r0
 8004846:	2b01      	cmp	r3, #1
 8004848:	bf0c      	ite	eq
 800484a:	2301      	moveq	r3, #1
 800484c:	2300      	movne	r3, #0
 800484e:	b2db      	uxtb	r3, r3
    }
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <_ZSt3getIP10ExpressionJP17Primal_expressionS1_EERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fb67 	bl	8004f34 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 8004866:	4603      	mov	r3, r0
    }
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <_ZSt3getIP17Primal_expressionJS1_P10ExpressionEERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fb99 	bl	8004fb0 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 800487e:	4603      	mov	r3, r0
    }
 8004880:	4618      	mov	r0, r3
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <_ZNSt6vectorIP16Power_expressionSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8004888:	b5b0      	push	{r4, r5, r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681c      	ldr	r4, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fbc9 	bl	8005032 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 80048a0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80048a2:	461a      	mov	r2, r3
 80048a4:	4629      	mov	r1, r5
 80048a6:	4620      	mov	r0, r4
 80048a8:	f000 fbce 	bl	8005048 <_ZSt8_DestroyIPP16Power_expressionS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fba6 	bl	8005000 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EED1Ev>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bdb0      	pop	{r4, r5, r7, pc}

080048be <_ZNSt6vectorI13mult_operatorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80048be:	b5b0      	push	{r4, r5, r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681c      	ldr	r4, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fbeb 	bl	80050ac <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80048d6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80048d8:	461a      	mov	r2, r3
 80048da:	4629      	mov	r1, r5
 80048dc:	4620      	mov	r0, r4
 80048de:	f000 fbf0 	bl	80050c2 <_ZSt8_DestroyIP13mult_operatorS0_EvT_S2_RSaIT0_E>
      }
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fbc9 	bl	800507c <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EED1Ev>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bdb0      	pop	{r4, r5, r7, pc}

080048f4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	f107 030c 	add.w	r3, r7, #12
 8004902:	4611      	mov	r1, r2
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fbea 	bl	80050de <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <_ZNSt6vectorIP16Power_expressionSaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1d1a      	adds	r2, r3, #4
 8004920:	f107 030c 	add.w	r3, r7, #12
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fbd9 	bl	80050de <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <_ZN9__gnu_cxxneIPP16Power_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004936:	b590      	push	{r4, r7, lr}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fbdc 	bl	80050fe <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8004946:	4603      	mov	r3, r0
 8004948:	681c      	ldr	r4, [r3, #0]
 800494a:	6838      	ldr	r0, [r7, #0]
 800494c:	f000 fbd7 	bl	80050fe <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8004950:	4603      	mov	r3, r0
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	429c      	cmp	r4, r3
 8004956:	bf14      	ite	ne
 8004958:	2301      	movne	r3, #1
 800495a:	2300      	moveq	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	bd90      	pop	{r4, r7, pc}

08004966 <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	1d1a      	adds	r2, r3, #4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	601a      	str	r2, [r3, #0]
	return *this;
 8004978:	687b      	ldr	r3, [r7, #4]
      }
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <_ZNSt6vectorIP19Multiply_expressionSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800499e:	b5b0      	push	{r4, r5, r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681c      	ldr	r4, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fbd4 	bl	800515e <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 80049b6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80049b8:	461a      	mov	r2, r3
 80049ba:	4629      	mov	r1, r5
 80049bc:	4620      	mov	r0, r4
 80049be:	f000 fbd9 	bl	8005174 <_ZSt8_DestroyIPP19Multiply_expressionS1_EvT_S3_RSaIT0_E>
      }
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fbb1 	bl	800512c <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EED1Ev>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bdb0      	pop	{r4, r5, r7, pc}

080049d4 <_ZNSt6vectorI12sum_operatorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80049d4:	b5b0      	push	{r4, r5, r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681c      	ldr	r4, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fbf6 	bl	80051d8 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80049ec:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80049ee:	461a      	mov	r2, r3
 80049f0:	4629      	mov	r1, r5
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 fbfb 	bl	80051ee <_ZSt8_DestroyIP12sum_operatorS0_EvT_S2_RSaIT0_E>
      }
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fbd4 	bl	80051a8 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EED1Ev>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bdb0      	pop	{r4, r5, r7, pc}

08004a0a <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	f107 030c 	add.w	r3, r7, #12
 8004a18:	4611      	mov	r1, r2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fbf5 	bl	800520a <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	1d1a      	adds	r2, r3, #4
 8004a36:	f107 030c 	add.w	r3, r7, #12
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fbe4 	bl	800520a <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <_ZN9__gnu_cxxneIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004a4c:	b590      	push	{r4, r7, lr}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fbe7 	bl	800522a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	681c      	ldr	r4, [r3, #0]
 8004a60:	6838      	ldr	r0, [r7, #0]
 8004a62:	f000 fbe2 	bl	800522a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8004a66:	4603      	mov	r3, r0
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	429c      	cmp	r4, r3
 8004a6c:	bf14      	ite	ne
 8004a6e:	2301      	movne	r3, #1
 8004a70:	2300      	moveq	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd90      	pop	{r4, r7, pc}

08004a7c <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	1d1a      	adds	r2, r3, #4
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	601a      	str	r2, [r3, #0]
	return *this;
 8004a8e:	687b      	ldr	r3, [r7, #4]
      }
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <_ZNSt6vectorIP18Compare_expressionSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004ab4:	b5b0      	push	{r4, r5, r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681c      	ldr	r4, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fbdf 	bl	800528a <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8004acc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004ace:	461a      	mov	r2, r3
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f000 fbe4 	bl	80052a0 <_ZSt8_DestroyIPP18Compare_expressionS1_EvT_S3_RSaIT0_E>
      }
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fbbc 	bl	8005258 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EED1Ev>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bdb0      	pop	{r4, r5, r7, pc}

08004aea <_ZNSt6vectorIP18Compare_expressionSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	f107 030c 	add.w	r3, r7, #12
 8004af8:	4611      	mov	r1, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fbde 	bl	80052bc <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <_ZNSt6vectorIP18Compare_expressionSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b084      	sub	sp, #16
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	1d1a      	adds	r2, r3, #4
 8004b16:	f107 030c 	add.w	r3, r7, #12
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fbcd 	bl	80052bc <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <_ZN9__gnu_cxxneIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004b2c:	b590      	push	{r4, r7, lr}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fbd0 	bl	80052dc <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	681c      	ldr	r4, [r3, #0]
 8004b40:	6838      	ldr	r0, [r7, #0]
 8004b42:	f000 fbcb 	bl	80052dc <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8004b46:	4603      	mov	r3, r0
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	429c      	cmp	r4, r3
 8004b4c:	bf14      	ite	ne
 8004b4e:	2301      	movne	r3, #1
 8004b50:	2300      	moveq	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd90      	pop	{r4, r7, pc}

08004b5c <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	1d1a      	adds	r2, r3, #4
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	601a      	str	r2, [r3, #0]
	return *this;
 8004b6e:	687b      	ldr	r3, [r7, #4]
      }
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <_ZNSt6vectorIP14And_expressionSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004b94:	b5b0      	push	{r4, r5, r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681c      	ldr	r4, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fbc8 	bl	800533c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8004bac:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004bae:	461a      	mov	r2, r3
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f000 fbcd 	bl	8005352 <_ZSt8_DestroyIPP14And_expressionS1_EvT_S3_RSaIT0_E>
      }
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fba5 	bl	800530a <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EED1Ev>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bdb0      	pop	{r4, r5, r7, pc}

08004bca <_ZNSt6vectorIP14And_expressionSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	f107 030c 	add.w	r3, r7, #12
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fbc7 	bl	800536e <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <_ZNSt6vectorIP14And_expressionSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	1d1a      	adds	r2, r3, #4
 8004bf6:	f107 030c 	add.w	r3, r7, #12
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fbb6 	bl	800536e <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <_ZN9__gnu_cxxneIPP14And_expressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fbb9 	bl	800538e <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	681c      	ldr	r4, [r3, #0]
 8004c20:	6838      	ldr	r0, [r7, #0]
 8004c22:	f000 fbb4 	bl	800538e <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8004c26:	4603      	mov	r3, r0
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	429c      	cmp	r4, r3
 8004c2c:	bf14      	ite	ne
 8004c2e:	2301      	movne	r3, #1
 8004c30:	2300      	moveq	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd90      	pop	{r4, r7, pc}

08004c3c <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	1d1a      	adds	r2, r3, #4
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]
	return *this;
 8004c4e:	687b      	ldr	r3, [r7, #4]
      }
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>:
      void _M_reset()
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	_M_reset_impl();
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fecb 	bl	8005a18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEv>
	_M_index = variant_npos;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	22ff      	movs	r2, #255	; 0xff
 8004c86:	761a      	strb	r2, [r3, #24]
      }
 8004c88:	bf00      	nop
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	7138      	strb	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8004c9a:	6838      	ldr	r0, [r7, #0]
 8004c9c:	f000 ff05 	bl	8005aaa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP8VariableP13Function_callEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 ff0c 	bl	8005ac0 <_ZNRSt8__detail9__variant14_UninitializedIP8VariableLb1EE6_M_getEv>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8004cb2:	b590      	push	{r4, r7, lr}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	7138      	strb	r0, [r7, #4]
 8004cba:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8004cbc:	6838      	ldr	r0, [r7, #0]
 8004cbe:	f000 fee9 	bl	8005a94 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8004cc2:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f7ff ffe2 	bl	8004c90 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 8004ccc:	4603      	mov	r3, r0
    }
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd90      	pop	{r4, r7, pc}

08004cd6 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8004cd6:	b590      	push	{r4, r7, lr}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	7138      	strb	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8004ce0:	6838      	ldr	r0, [r7, #0]
 8004ce2:	f000 fecc 	bl	8005a7e <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8004ce6:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4620      	mov	r0, r4
 8004cec:	f7ff ffe1 	bl	8004cb2 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8004cf0:	4603      	mov	r3, r0
    }
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd90      	pop	{r4, r7, pc}

08004cfa <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8004cfa:	b590      	push	{r4, r7, lr}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	7138      	strb	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8004d04:	6838      	ldr	r0, [r7, #0]
 8004d06:	f000 feaf 	bl	8005a68 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8004d0a:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f7ff ffe1 	bl	8004cd6 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8004d14:	4603      	mov	r3, r0
    }
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd90      	pop	{r4, r7, pc}

08004d1e <_ZNSt8__detail9__variant5__getILj4ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8004d1e:	b590      	push	{r4, r7, lr}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	7138      	strb	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8004d28:	6838      	ldr	r0, [r7, #0]
 8004d2a:	f000 fe92 	bl	8005a52 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8004d2e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8004d30:	4619      	mov	r1, r3
 8004d32:	4620      	mov	r0, r4
 8004d34:	f7ff ffe1 	bl	8004cfa <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8004d38:	4603      	mov	r3, r0
    }
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd90      	pop	{r4, r7, pc}

08004d42 <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8004d42:	b590      	push	{r4, r7, lr}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fe76 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8004d50:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8004d52:	4619      	mov	r1, r3
 8004d54:	4620      	mov	r0, r4
 8004d56:	f7ff ffe2 	bl	8004d1e <_ZNSt8__detail9__variant5__getILj4ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8004d5a:	4603      	mov	r3, r0
    }
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd90      	pop	{r4, r7, pc}

08004d64 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
#undef _VARIANT_RELATION_FUNCTION_TEMPLATE
    };

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>>&
    get(variant<_Types...>& __v)
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
    {
      static_assert(_Np < sizeof...(_Types),
		    "The index should be in [0, number of alternatives)");
      if (__v.index() != _Np)
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff fd02 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8004d82:	4805      	ldr	r0, [pc, #20]	; (8004d98 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 8004d84:	f7ff fabe 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff ffda 	bl	8004d42 <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8004d8e:	4603      	mov	r3, r0
    }
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	0801a454 	.word	0x0801a454

08004d9c <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	7138      	strb	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8004da6:	6838      	ldr	r0, [r7, #0]
 8004da8:	f000 fe95 	bl	8005ad6 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fe9c 	bl	8005aec <_ZNRSt8__detail9__variant14_UninitializedIP13Function_callLb1EE6_M_getEv>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8004dbe:	b590      	push	{r4, r7, lr}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	7138      	strb	r0, [r7, #4]
 8004dc6:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8004dc8:	6838      	ldr	r0, [r7, #0]
 8004dca:	f000 fe6e 	bl	8005aaa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP8VariableP13Function_callEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8004dce:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	f7ff ffe2 	bl	8004d9c <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 8004dd8:	4603      	mov	r3, r0
    }
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd90      	pop	{r4, r7, pc}

08004de2 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8004de2:	b590      	push	{r4, r7, lr}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	7138      	strb	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8004dec:	6838      	ldr	r0, [r7, #0]
 8004dee:	f000 fe51 	bl	8005a94 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8004df2:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8004df4:	4619      	mov	r1, r3
 8004df6:	4620      	mov	r0, r4
 8004df8:	f7ff ffe1 	bl	8004dbe <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8004dfc:	4603      	mov	r3, r0
    }
 8004dfe:	4618      	mov	r0, r3
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd90      	pop	{r4, r7, pc}

08004e06 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8004e06:	b590      	push	{r4, r7, lr}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	7138      	strb	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8004e10:	6838      	ldr	r0, [r7, #0]
 8004e12:	f000 fe34 	bl	8005a7e <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8004e16:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7ff ffe1 	bl	8004de2 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8004e20:	4603      	mov	r3, r0
    }
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd90      	pop	{r4, r7, pc}

08004e2a <_ZNSt8__detail9__variant5__getILj4ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8004e2a:	b590      	push	{r4, r7, lr}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	7138      	strb	r0, [r7, #4]
 8004e32:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8004e34:	6838      	ldr	r0, [r7, #0]
 8004e36:	f000 fe17 	bl	8005a68 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8004e3a:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4620      	mov	r0, r4
 8004e40:	f7ff ffe1 	bl	8004e06 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8004e44:	4603      	mov	r3, r0
    }
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd90      	pop	{r4, r7, pc}

08004e4e <_ZNSt8__detail9__variant5__getILj5ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8004e4e:	b590      	push	{r4, r7, lr}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	7138      	strb	r0, [r7, #4]
 8004e56:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8004e58:	6838      	ldr	r0, [r7, #0]
 8004e5a:	f000 fdfa 	bl	8005a52 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8004e5e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8004e60:	4619      	mov	r1, r3
 8004e62:	4620      	mov	r0, r4
 8004e64:	f7ff ffe1 	bl	8004e2a <_ZNSt8__detail9__variant5__getILj4ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8004e68:	4603      	mov	r3, r0
    }
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd90      	pop	{r4, r7, pc}

08004e72 <_ZNSt8__detail9__variant5__getILj5ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8004e72:	b590      	push	{r4, r7, lr}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fdde 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8004e80:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8004e82:	4619      	mov	r1, r3
 8004e84:	4620      	mov	r0, r4
 8004e86:	f7ff ffe2 	bl	8004e4e <_ZNSt8__detail9__variant5__getILj5ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8004e8a:	4603      	mov	r3, r0
    }
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd90      	pop	{r4, r7, pc}

08004e94 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff fc6a 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8004eb2:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 8004eb4:	f7ff fa26 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff ffda 	bl	8004e72 <_ZNSt8__detail9__variant5__getILj5ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8004ebe:	4603      	mov	r3, r0
    }
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	0801a454 	.word	0x0801a454

08004ecc <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10ExpressionEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	7138      	strb	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8004ed6:	6838      	ldr	r0, [r7, #0]
 8004ed8:	f000 fe29 	bl	8005b2e <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10ExpressionEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8004edc:	4603      	mov	r3, r0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fe30 	bl	8005b44 <_ZNRSt8__detail9__variant14_UninitializedIP10ExpressionLb1EE6_M_getEv>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8004eee:	b590      	push	{r4, r7, lr}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	7138      	strb	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8004ef8:	6838      	ldr	r0, [r7, #0]
 8004efa:	f000 fe0d 	bl	8005b18 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8004efe:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8004f00:	4619      	mov	r1, r3
 8004f02:	4620      	mov	r0, r4
 8004f04:	f7ff ffe2 	bl	8004ecc <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10ExpressionEEEEEDcSt16in_place_index_tILj0EEOT_>
 8004f08:	4603      	mov	r3, r0
    }
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd90      	pop	{r4, r7, pc}

08004f12 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8004f12:	b590      	push	{r4, r7, lr}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fdf1 	bl	8005b02 <_ZSt7forwardIRSt7variantIJP17Primal_expressionP10ExpressionEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8004f20:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8004f22:	4619      	mov	r1, r3
 8004f24:	4620      	mov	r0, r4
 8004f26:	f7ff ffe2 	bl	8004eee <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8004f2a:	4603      	mov	r3, r0
    }
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd90      	pop	{r4, r7, pc}

08004f34 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>:
    get(variant<_Types...>& __v)
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fc67 	bl	8004810 <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	bf14      	ite	ne
 8004f48:	2301      	movne	r3, #1
 8004f4a:	2300      	moveq	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8004f52:	4805      	ldr	r0, [pc, #20]	; (8004f68 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x34>)
 8004f54:	f7ff f9d6 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff ffda 	bl	8004f12 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>
 8004f5e:	4603      	mov	r3, r0
    }
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	0801a454 	.word	0x0801a454

08004f6c <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	7138      	strb	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8004f76:	6838      	ldr	r0, [r7, #0]
 8004f78:	f000 fdce 	bl	8005b18 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fdeb 	bl	8005b5a <_ZNRSt8__detail9__variant14_UninitializedIP17Primal_expressionLb1EE6_M_getEv>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8004f8e:	b590      	push	{r4, r7, lr}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fdb3 	bl	8005b02 <_ZSt7forwardIRSt7variantIJP17Primal_expressionP10ExpressionEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8004f9c:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f7ff ffe3 	bl	8004f6c <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEEDcSt16in_place_index_tILj0EEOT_>
 8004fa6:	4603      	mov	r3, r0
    }
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd90      	pop	{r4, r7, pc}

08004fb0 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>:
    get(variant<_Types...>& __v)
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff fc29 	bl	8004810 <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bf14      	ite	ne
 8004fc4:	2301      	movne	r3, #1
 8004fc6:	2300      	moveq	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8004fce:	4805      	ldr	r0, [pc, #20]	; (8004fe4 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_+0x34>)
 8004fd0:	f7ff f998 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff ffda 	bl	8004f8e <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>
 8004fda:	4603      	mov	r3, r0
    }
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	0801a454 	.word	0x0801a454

08004fe8 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 fdbd 	bl	8005b70 <_ZNSaIP16Power_expressionED1Ev>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005018:	461a      	mov	r2, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fdb4 	bl	8005b88 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff ffe0 	bl	8004fe8 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE12_Vector_implD1Ev>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <_ZSt8_DestroyIPP16Power_expressionS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 fda9 	bl	8005bae <_ZSt8_DestroyIPP16Power_expressionEvT_S3_>
    }
 800505c:	bf00      	nop
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fdab 	bl	8005bc8 <_ZNSaI13mult_operatorED1Ev>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8005092:	461a      	mov	r2, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fda3 	bl	8005be0 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE13_M_deallocateEPS0_j>
      }
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ffe1 	bl	8005064 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE12_Vector_implD1Ev>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <_ZSt8_DestroyIP13mult_operatorS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fd98 	bl	8005c06 <_ZSt8_DestroyIP13mult_operatorEvT_S2_>
    }
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fd7f 	bl	8005c20 <_ZNSaIP19Multiply_expressionED1Ev>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005144:	461a      	mov	r2, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fd76 	bl	8005c38 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff ffe0 	bl	8005114 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE12_Vector_implD1Ev>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <_ZSt8_DestroyIPP19Multiply_expressionS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 fd6b 	bl	8005c5e <_ZSt8_DestroyIPP19Multiply_expressionEvT_S3_>
    }
 8005188:	bf00      	nop
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fd6d 	bl	8005c78 <_ZNSaI12sum_operatorED1Ev>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80051be:	461a      	mov	r2, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fd65 	bl	8005c90 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE13_M_deallocateEPS0_j>
      }
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff ffe1 	bl	8005190 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE12_Vector_implD1Ev>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4618      	mov	r0, r3
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <_ZSt8_DestroyIP12sum_operatorS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b084      	sub	sp, #16
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 fd5a 	bl	8005cb6 <_ZSt8_DestroyIP12sum_operatorEvT_S2_>
    }
 8005202:	bf00      	nop
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4618      	mov	r0, r3
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fd41 	bl	8005cd0 <_ZNSaIP18Compare_expressionED1Ev>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005270:	461a      	mov	r2, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fd38 	bl	8005ce8 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff ffe0 	bl	8005240 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE12_Vector_implD1Ev>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <_ZSt8_DestroyIPP18Compare_expressionS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fd2d 	bl	8005d0e <_ZSt8_DestroyIPP18Compare_expressionEvT_S3_>
    }
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4618      	mov	r0, r3
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fd14 	bl	8005d28 <_ZNSaIP14And_expressionED1Ev>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005322:	461a      	mov	r2, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fd0b 	bl	8005d40 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff ffe0 	bl	80052f2 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE12_Vector_implD1Ev>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4618      	mov	r0, r3
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <_ZSt8_DestroyIPP14And_expressionS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fd00 	bl	8005d66 <_ZSt8_DestroyIPP14And_expressionEvT_S3_>
    }
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <_ZSt14__variant_castIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callERNSt8__detail9__variant16_Variant_storageILb0EJbifS5_S7_S9_EEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
	    return static_cast<variant<_Types...>&>(__rhs);
 80053ac:	687b      	ldr	r3, [r7, #4]
    }
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	7138      	strb	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80053c4:	6838      	ldr	r0, [r7, #0]
 80053c6:	f000 fb44 	bl	8005a52 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 80053ca:	4603      	mov	r3, r0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fd fb9f 	bl	8002b10 <_ZNRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80053dc:	b590      	push	{r4, r7, lr}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fb29 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80053ea:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 80053ec:	4619      	mov	r1, r3
 80053ee:	4620      	mov	r0, r4
 80053f0:	f7ff ffe3 	bl	80053ba <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 80053f4:	4603      	mov	r3, r0
    }
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd90      	pop	{r4, r7, pc}

080053fe <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fb18 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800540c:	4603      	mov	r3, r0
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff ffe4 	bl	80053dc <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8005414:	4603      	mov	r3, r0
	}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800541e:	b5b0      	push	{r4, r5, r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fca9 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800542e:	4604      	mov	r4, r0
 8005430:	6838      	ldr	r0, [r7, #0]
 8005432:	f000 fb03 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8005436:	4603      	mov	r3, r0
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff ffe0 	bl	80053fe <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESM_EEDcOT0_>
 800543e:	4603      	mov	r3, r0
 8005440:	4619      	mov	r1, r3
 8005442:	4620      	mov	r0, r4
 8005444:	f000 fca7 	bl	8005d96 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRbEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 8005448:	462b      	mov	r3, r5
      }
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bdb0      	pop	{r4, r5, r7, pc}

08005452 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8005452:	b5b0      	push	{r4, r5, r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fc8f 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005462:	4604      	mov	r4, r0
 8005464:	6838      	ldr	r0, [r7, #0]
 8005466:	f000 fae9 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800546a:	4603      	mov	r3, r0
 800546c:	4619      	mov	r1, r3
 800546e:	4620      	mov	r0, r4
 8005470:	f7ff ffd5 	bl	800541e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 8005474:	462b      	mov	r3, r5
      }
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bdb0      	pop	{r4, r5, r7, pc}

0800547e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800547e:	b5b0      	push	{r4, r5, r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fc79 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800548e:	4604      	mov	r4, r0
 8005490:	6838      	ldr	r0, [r7, #0]
 8005492:	f000 fad3 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8005496:	4603      	mov	r3, r0
 8005498:	4619      	mov	r1, r3
 800549a:	4620      	mov	r0, r4
 800549c:	f7ff ffd9 	bl	8005452 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 80054a0:	462b      	mov	r3, r5
      }
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bdb0      	pop	{r4, r5, r7, pc}

080054aa <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	7138      	strb	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80054b4:	6838      	ldr	r0, [r7, #0]
 80054b6:	f000 fad7 	bl	8005a68 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 80054ba:	4603      	mov	r3, r0
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fd fb11 	bl	8002ae4 <_ZNRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>
 80054c2:	4603      	mov	r3, r0
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	7138      	strb	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80054d6:	6838      	ldr	r0, [r7, #0]
 80054d8:	f000 fabb 	bl	8005a52 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 80054dc:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80054de:	4619      	mov	r1, r3
 80054e0:	4620      	mov	r0, r4
 80054e2:	f7ff ffe2 	bl	80054aa <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 80054e6:	4603      	mov	r3, r0
    }
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd90      	pop	{r4, r7, pc}

080054f0 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fa9f 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80054fe:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8005500:	4619      	mov	r1, r3
 8005502:	4620      	mov	r0, r4
 8005504:	f7ff ffe2 	bl	80054cc <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8005508:	4603      	mov	r3, r0
    }
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	bd90      	pop	{r4, r7, pc}

08005512 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa8e 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8005520:	4603      	mov	r3, r0
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff ffe4 	bl	80054f0 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8005528:	4603      	mov	r3, r0
	}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8005532:	b5b0      	push	{r4, r5, r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fc1f 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005542:	4604      	mov	r4, r0
 8005544:	6838      	ldr	r0, [r7, #0]
 8005546:	f000 fa79 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800554a:	4603      	mov	r3, r0
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff ffe0 	bl	8005512 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESM_EEDcOT0_>
 8005552:	4603      	mov	r3, r0
 8005554:	4619      	mov	r1, r3
 8005556:	4620      	mov	r0, r4
 8005558:	f000 fc34 	bl	8005dc4 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRiEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 800555c:	462b      	mov	r3, r5
      }
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bdb0      	pop	{r4, r5, r7, pc}

08005566 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8005566:	b5b0      	push	{r4, r5, r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fc05 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005576:	4604      	mov	r4, r0
 8005578:	6838      	ldr	r0, [r7, #0]
 800557a:	f000 fa5f 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800557e:	4603      	mov	r3, r0
 8005580:	4619      	mov	r1, r3
 8005582:	4620      	mov	r0, r4
 8005584:	f7ff ffd5 	bl	8005532 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 8005588:	462b      	mov	r3, r5
      }
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bdb0      	pop	{r4, r5, r7, pc}

08005592 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8005592:	b5b0      	push	{r4, r5, r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fbef 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80055a2:	4604      	mov	r4, r0
 80055a4:	6838      	ldr	r0, [r7, #0]
 80055a6:	f000 fa49 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80055aa:	4603      	mov	r3, r0
 80055ac:	4619      	mov	r1, r3
 80055ae:	4620      	mov	r0, r4
 80055b0:	f7ff ffd9 	bl	8005566 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 80055b4:	462b      	mov	r3, r5
      }
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bdb0      	pop	{r4, r5, r7, pc}

080055be <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	7138      	strb	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 80055c8:	6838      	ldr	r0, [r7, #0]
 80055ca:	f000 fa58 	bl	8005a7e <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 80055ce:	4603      	mov	r3, r0
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fd fa92 	bl	8002afa <_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>
 80055d6:	4603      	mov	r3, r0
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	7138      	strb	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80055ea:	6838      	ldr	r0, [r7, #0]
 80055ec:	f000 fa3c 	bl	8005a68 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 80055f0:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80055f2:	4619      	mov	r1, r3
 80055f4:	4620      	mov	r0, r4
 80055f6:	f7ff ffe2 	bl	80055be <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 80055fa:	4603      	mov	r3, r0
    }
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	bd90      	pop	{r4, r7, pc}

08005604 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8005604:	b590      	push	{r4, r7, lr}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	7138      	strb	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800560e:	6838      	ldr	r0, [r7, #0]
 8005610:	f000 fa1f 	bl	8005a52 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8005614:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8005616:	4619      	mov	r1, r3
 8005618:	4620      	mov	r0, r4
 800561a:	f7ff ffe1 	bl	80055e0 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800561e:	4603      	mov	r3, r0
    }
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bd90      	pop	{r4, r7, pc}

08005628 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8005628:	b590      	push	{r4, r7, lr}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fa03 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8005636:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8005638:	4619      	mov	r1, r3
 800563a:	4620      	mov	r0, r4
 800563c:	f7ff ffe2 	bl	8005604 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8005640:	4603      	mov	r3, r0
    }
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	bd90      	pop	{r4, r7, pc}

0800564a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f9f2 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8005658:	4603      	mov	r3, r0
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff ffe4 	bl	8005628 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8005660:	4603      	mov	r3, r0
	}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800566a:	b5b0      	push	{r4, r5, r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fb83 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800567a:	4604      	mov	r4, r0
 800567c:	6838      	ldr	r0, [r7, #0]
 800567e:	f000 f9dd 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8005682:	4603      	mov	r3, r0
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff ffe0 	bl	800564a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESM_EEDcOT0_>
 800568a:	4603      	mov	r3, r0
 800568c:	4619      	mov	r1, r3
 800568e:	4620      	mov	r0, r4
 8005690:	f000 fbaf 	bl	8005df2 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRfEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 8005694:	462b      	mov	r3, r5
      }
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bdb0      	pop	{r4, r5, r7, pc}

0800569e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800569e:	b5b0      	push	{r4, r5, r7, lr}
 80056a0:	b082      	sub	sp, #8
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fb69 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80056ae:	4604      	mov	r4, r0
 80056b0:	6838      	ldr	r0, [r7, #0]
 80056b2:	f000 f9c3 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80056b6:	4603      	mov	r3, r0
 80056b8:	4619      	mov	r1, r3
 80056ba:	4620      	mov	r0, r4
 80056bc:	f7ff ffd5 	bl	800566a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 80056c0:	462b      	mov	r3, r5
      }
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bdb0      	pop	{r4, r5, r7, pc}

080056ca <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80056ca:	b5b0      	push	{r4, r5, r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fb53 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80056da:	4604      	mov	r4, r0
 80056dc:	6838      	ldr	r0, [r7, #0]
 80056de:	f000 f9ad 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80056e2:	4603      	mov	r3, r0
 80056e4:	4619      	mov	r1, r3
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7ff ffd9 	bl	800569e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 80056ec:	462b      	mov	r3, r5
      }
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bdb0      	pop	{r4, r5, r7, pc}

080056f6 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	7138      	strb	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8005700:	6838      	ldr	r0, [r7, #0]
 8005702:	f000 f9c7 	bl	8005a94 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8005706:	4603      	mov	r3, r0
 8005708:	4618      	mov	r0, r3
 800570a:	f7fd fa0c 	bl	8002b26 <_ZNRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>
 800570e:	4603      	mov	r3, r0
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	7138      	strb	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8005722:	6838      	ldr	r0, [r7, #0]
 8005724:	f000 f9ab 	bl	8005a7e <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8005728:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800572a:	4619      	mov	r1, r3
 800572c:	4620      	mov	r0, r4
 800572e:	f7ff ffe2 	bl	80056f6 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tILj0EEOT_>
 8005732:	4603      	mov	r3, r0
    }
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	bd90      	pop	{r4, r7, pc}

0800573c <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800573c:	b590      	push	{r4, r7, lr}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	7138      	strb	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8005746:	6838      	ldr	r0, [r7, #0]
 8005748:	f000 f98e 	bl	8005a68 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800574c:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800574e:	4619      	mov	r1, r3
 8005750:	4620      	mov	r0, r4
 8005752:	f7ff ffe1 	bl	8005718 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8005756:	4603      	mov	r3, r0
    }
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	bd90      	pop	{r4, r7, pc}

08005760 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8005760:	b590      	push	{r4, r7, lr}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	7138      	strb	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800576a:	6838      	ldr	r0, [r7, #0]
 800576c:	f000 f971 	bl	8005a52 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8005770:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8005772:	4619      	mov	r1, r3
 8005774:	4620      	mov	r0, r4
 8005776:	f7ff ffe1 	bl	800573c <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800577a:	4603      	mov	r3, r0
    }
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	bd90      	pop	{r4, r7, pc}

08005784 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8005784:	b590      	push	{r4, r7, lr}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f955 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8005792:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8005794:	4619      	mov	r1, r3
 8005796:	4620      	mov	r0, r4
 8005798:	f7ff ffe2 	bl	8005760 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800579c:	4603      	mov	r3, r0
    }
 800579e:	4618      	mov	r0, r3
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd90      	pop	{r4, r7, pc}

080057a6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f944 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80057b4:	4603      	mov	r3, r0
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff ffe4 	bl	8005784 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80057bc:	4603      	mov	r3, r0
	}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 80057c6:	b5b0      	push	{r4, r5, r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fad5 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80057d6:	4604      	mov	r4, r0
 80057d8:	6838      	ldr	r0, [r7, #0]
 80057da:	f000 f92f 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80057de:	4603      	mov	r3, r0
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff ffe0 	bl	80057a6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESM_EEDcOT0_>
 80057e6:	4603      	mov	r3, r0
 80057e8:	4619      	mov	r1, r3
 80057ea:	4620      	mov	r0, r4
 80057ec:	f000 fb18 	bl	8005e20 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRS8_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 80057f0:	462b      	mov	r3, r5
      }
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bdb0      	pop	{r4, r5, r7, pc}

080057fa <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80057fa:	b5b0      	push	{r4, r5, r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fabb 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800580a:	4604      	mov	r4, r0
 800580c:	6838      	ldr	r0, [r7, #0]
 800580e:	f000 f915 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8005812:	4603      	mov	r3, r0
 8005814:	4619      	mov	r1, r3
 8005816:	4620      	mov	r0, r4
 8005818:	f7ff ffd5 	bl	80057c6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 800581c:	462b      	mov	r3, r5
      }
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bdb0      	pop	{r4, r5, r7, pc}

08005826 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8005826:	b5b0      	push	{r4, r5, r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 faa5 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005836:	4604      	mov	r4, r0
 8005838:	6838      	ldr	r0, [r7, #0]
 800583a:	f000 f8ff 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800583e:	4603      	mov	r3, r0
 8005840:	4619      	mov	r1, r3
 8005842:	4620      	mov	r0, r4
 8005844:	f7ff ffd9 	bl	80057fa <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 8005848:	462b      	mov	r3, r5
      }
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bdb0      	pop	{r4, r5, r7, pc}

08005852 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE28__element_by_index_or_cookieILj4ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8005852:	b580      	push	{r7, lr}
 8005854:	b082      	sub	sp, #8
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f8ee 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8005860:	4603      	mov	r3, r0
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fa6d 	bl	8004d42 <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8005868:	4603      	mov	r3, r0
	}
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8005872:	b5b0      	push	{r4, r5, r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fa7f 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005882:	4604      	mov	r4, r0
 8005884:	6838      	ldr	r0, [r7, #0]
 8005886:	f000 f8d9 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800588a:	4603      	mov	r3, r0
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff ffe0 	bl	8005852 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE28__element_by_index_or_cookieILj4ESM_EEDcOT0_>
 8005892:	4603      	mov	r3, r0
 8005894:	4619      	mov	r1, r3
 8005896:	4620      	mov	r0, r4
 8005898:	f000 fad9 	bl	8005e4e <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSA_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 800589c:	462b      	mov	r3, r5
      }
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bdb0      	pop	{r4, r5, r7, pc}

080058a6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80058a6:	b5b0      	push	{r4, r5, r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fa65 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80058b6:	4604      	mov	r4, r0
 80058b8:	6838      	ldr	r0, [r7, #0]
 80058ba:	f000 f8bf 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80058be:	4603      	mov	r3, r0
 80058c0:	4619      	mov	r1, r3
 80058c2:	4620      	mov	r0, r4
 80058c4:	f7ff ffd5 	bl	8005872 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 80058c8:	462b      	mov	r3, r5
      }
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bdb0      	pop	{r4, r5, r7, pc}

080058d2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80058d2:	b5b0      	push	{r4, r5, r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fa4f 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80058e2:	4604      	mov	r4, r0
 80058e4:	6838      	ldr	r0, [r7, #0]
 80058e6:	f000 f8a9 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 80058ea:	4603      	mov	r3, r0
 80058ec:	4619      	mov	r1, r3
 80058ee:	4620      	mov	r0, r4
 80058f0:	f7ff ffd9 	bl	80058a6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj4EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 80058f4:	462b      	mov	r3, r5
      }
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bdb0      	pop	{r4, r5, r7, pc}

080058fe <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE28__element_by_index_or_cookieILj5ESM_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f898 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800590c:	4603      	mov	r3, r0
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff faaf 	bl	8004e72 <_ZNSt8__detail9__variant5__getILj5ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8005914:	4603      	mov	r3, r0
	}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE19__visit_invoke_implESJ_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800591e:	b5b0      	push	{r4, r5, r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fa29 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800592e:	4604      	mov	r4, r0
 8005930:	6838      	ldr	r0, [r7, #0]
 8005932:	f000 f883 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8005936:	4603      	mov	r3, r0
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff ffe0 	bl	80058fe <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE28__element_by_index_or_cookieILj5ESM_EEDcOT0_>
 800593e:	4603      	mov	r3, r0
 8005940:	4619      	mov	r1, r3
 8005942:	4620      	mov	r0, r4
 8005944:	f000 fa9a 	bl	8005e7c <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSC_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>
		std::forward<_Variants>(__vars))...);
 8005948:	462b      	mov	r3, r5
      }
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bdb0      	pop	{r4, r5, r7, pc}

08005952 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE17__do_visit_invokeESJ_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8005952:	b5b0      	push	{r4, r5, r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fa0f 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005962:	4604      	mov	r4, r0
 8005964:	6838      	ldr	r0, [r7, #0]
 8005966:	f000 f869 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 800596a:	4603      	mov	r3, r0
 800596c:	4619      	mov	r1, r3
 800596e:	4620      	mov	r0, r4
 8005970:	f7ff ffd5 	bl	800591e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE19__visit_invoke_implESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 8005974:	462b      	mov	r3, r5
      }
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bdb0      	pop	{r4, r5, r7, pc}

0800597e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE14__visit_invokeESJ_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800597e:	b5b0      	push	{r4, r5, r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f9f9 	bl	8005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800598e:	4604      	mov	r4, r0
 8005990:	6838      	ldr	r0, [r7, #0]
 8005992:	f000 f853 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8005996:	4603      	mov	r3, r0
 8005998:	4619      	mov	r1, r3
 800599a:	4620      	mov	r0, r4
 800599c:	f7ff ffd9 	bl	8005952 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifSA_SC_SE_EEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj5EEEE17__do_visit_invokeESJ_SM_>
				   std::forward<_Variants>(__vars)...);
 80059a0:	462b      	mov	r3, r5
      }
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bdb0      	pop	{r4, r5, r7, pc}

080059aa <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifS9_SB_SD_EEEJLj6EEE9_M_accessIJEEERKSN_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	4413      	add	r3, r2
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fa74 	bl	8005eaa <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifS9_SB_SD_EEEJEE9_M_accessEv>
 80059c2:	4603      	mov	r3, r0
	}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSt7variantIJbifS8_SA_SC_EEEEDcOT1_DpOT2_>:

  template<bool __use_index,
	   bool __same_return_types,
	   typename _Visitor, typename... _Variants>
    constexpr decltype(auto)
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 80059cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]

      using _Result_type = typename std::conditional_t<__use_index,
	__detail::__variant::__variant_idx_cookie,
	_Deduced_type>::type;

      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 80059d6:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSt7variantIJbifS8_SA_SC_EEEEDcOT1_DpOT2_+0x48>)
 80059d8:	60fb      	str	r3, [r7, #12]
	__same_return_types,
	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;

      auto __func_ptr = __vtable._M_access(__variants.index()...);
 80059da:	6838      	ldr	r0, [r7, #0]
 80059dc:	f7fe fecb 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80059e0:	4603      	mov	r3, r0
 80059e2:	4619      	mov	r1, r3
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f7ff ffe0 	bl	80059aa <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifS9_SB_SD_EEEJLj6EEE9_M_accessIJEEERKSN_jDpT_>
 80059ea:	4603      	mov	r3, r0
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 80059f0:	68bc      	ldr	r4, [r7, #8]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa64 	bl	8005ec0 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80059f8:	4605      	mov	r5, r0
 80059fa:	6838      	ldr	r0, [r7, #0]
 80059fc:	f000 f81e 	bl	8005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>
 8005a00:	4603      	mov	r3, r0
 8005a02:	4619      	mov	r1, r3
 8005a04:	4628      	mov	r0, r5
 8005a06:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 8005a08:	4633      	mov	r3, r6
    }
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a12:	bf00      	nop
 8005a14:	0801aa6c 	.word	0x0801aa6c

08005a18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEv>:
      constexpr void _M_reset_impl()
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	__do_visit([](auto&& __this_mem) mutable
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff fcbf 	bl	80053a4 <_ZSt14__variant_castIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callERNSt8__detail9__variant16_Variant_storageILb0EJbifS5_S7_S9_EEEEDcOT0_>
 8005a26:	4602      	mov	r2, r0
 8005a28:	f107 030c 	add.w	r3, r7, #12
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff ffcc 	bl	80059cc <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSt7variantIJbifS8_SA_SC_EEEEDcOT1_DpOT2_>
      }
 8005a34:	bf00      	nop
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <_ZSt7forwardIRSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP8VariableP13Function_callEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <_ZNRSt8__detail9__variant14_UninitializedIP8VariableLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <_ZNRSt8__detail9__variant14_UninitializedIP13Function_callLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <_ZSt7forwardIRSt7variantIJP17Primal_expressionP10ExpressionEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP17Primal_expressionP10ExpressionEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10ExpressionEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <_ZNRSt8__detail9__variant14_UninitializedIP10ExpressionLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <_ZNRSt8__detail9__variant14_UninitializedIP17Primal_expressionLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4618      	mov	r0, r3
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <_ZNSaIP16Power_expressionED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f9ac 	bl	8005ed6 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionED1Ev>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4618      	mov	r0, r3
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
	if (__p)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 f9a3 	bl	8005eec <_ZNSt16allocator_traitsISaIP16Power_expressionEE10deallocateERS2_PS1_j>
      }
 8005ba6:	bf00      	nop
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <_ZSt8_DestroyIPP16Power_expressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f9a5 	bl	8005f0a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP16Power_expressionEEvT_S5_>
    }
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <_ZNSaI13mult_operatorED1Ev>:
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f9a5 	bl	8005f20 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorED1Ev>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
	if (__p)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d005      	beq.n	8005bfe <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 f99c 	bl	8005f36 <_ZNSt16allocator_traitsISaI13mult_operatorEE10deallocateERS1_PS0_j>
      }
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <_ZSt8_DestroyIP13mult_operatorEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b082      	sub	sp, #8
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f99e 	bl	8005f54 <_ZNSt12_Destroy_auxILb1EE9__destroyIP13mult_operatorEEvT_S4_>
    }
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <_ZNSaIP19Multiply_expressionED1Ev>:
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f99e 	bl	8005f6a <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionED1Ev>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
	if (__p)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 f995 	bl	8005f80 <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE10deallocateERS2_PS1_j>
      }
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <_ZSt8_DestroyIPP19Multiply_expressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b082      	sub	sp, #8
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f997 	bl	8005f9e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP19Multiply_expressionEEvT_S5_>
    }
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <_ZNSaI12sum_operatorED1Ev>:
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f997 	bl	8005fb4 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorED1Ev>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
	if (__p)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d005      	beq.n	8005cae <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	68b9      	ldr	r1, [r7, #8]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 f98e 	bl	8005fca <_ZNSt16allocator_traitsISaI12sum_operatorEE10deallocateERS1_PS0_j>
      }
 8005cae:	bf00      	nop
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <_ZSt8_DestroyIP12sum_operatorEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f990 	bl	8005fe8 <_ZNSt12_Destroy_auxILb1EE9__destroyIP12sum_operatorEEvT_S4_>
    }
 8005cc8:	bf00      	nop
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <_ZNSaIP18Compare_expressionED1Ev>:
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f990 	bl	8005ffe <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionED1Ev>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
	if (__p)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d005      	beq.n	8005d06 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 f987 	bl	8006014 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE10deallocateERS2_PS1_j>
      }
 8005d06:	bf00      	nop
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <_ZSt8_DestroyIPP18Compare_expressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f989 	bl	8006032 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18Compare_expressionEEvT_S5_>
    }
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <_ZNSaIP14And_expressionED1Ev>:
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f989 	bl	8006048 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionED1Ev>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
	if (__p)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 f980 	bl	800605e <_ZNSt16allocator_traitsISaIP14And_expressionEE10deallocateERS2_PS1_j>
      }
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <_ZSt8_DestroyIPP14And_expressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f982 	bl	800607c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14And_expressionEEvT_S5_>
    }
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRbEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 8005d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f88d 	bl	8005ec0 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005da6:	4604      	mov	r4, r0
 8005da8:	6838      	ldr	r0, [r7, #0]
 8005daa:	f7fd fb22 	bl	80033f2 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8005dae:	4603      	mov	r3, r0
 8005db0:	461a      	mov	r2, r3
 8005db2:	4621      	mov	r1, r4
 8005db4:	4628      	mov	r0, r5
 8005db6:	f000 f96c 	bl	8006092 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRbEESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8005dba:	4633      	mov	r3, r6
    }
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dc4 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRiEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8005dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f876 	bl	8005ec0 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	6838      	ldr	r0, [r7, #0]
 8005dd8:	f7fd faf5 	bl	80033c6 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	461a      	mov	r2, r3
 8005de0:	4621      	mov	r1, r4
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 f96c 	bl	80060c0 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRiEESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8005de8:	4633      	mov	r3, r6
    }
 8005dea:	4618      	mov	r0, r3
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005df2 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRfEENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8005df2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f85f 	bl	8005ec0 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005e02:	4604      	mov	r4, r0
 8005e04:	6838      	ldr	r0, [r7, #0]
 8005e06:	f7fd fae9 	bl	80033dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4621      	mov	r1, r4
 8005e10:	4628      	mov	r0, r5
 8005e12:	f000 f96c 	bl	80060ee <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRfEESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8005e16:	4633      	mov	r3, r6
    }
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e20 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRS8_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8005e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f848 	bl	8005ec0 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005e30:	4604      	mov	r4, r0
 8005e32:	6838      	ldr	r0, [r7, #0]
 8005e34:	f7fd faf4 	bl	8003420 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f000 f96c 	bl	800611c <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRS9_EESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8005e44:	4633      	mov	r3, r6
    }
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e4e <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSA_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8005e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f831 	bl	8005ec0 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005e5e:	4604      	mov	r4, r0
 8005e60:	6838      	ldr	r0, [r7, #0]
 8005e62:	f000 f972 	bl	800614a <_ZSt7forwardIRP8VariableEOT_RNSt16remove_referenceIS3_E4typeE>
 8005e66:	4603      	mov	r3, r0
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f000 f977 	bl	8006160 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSB_EESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8005e72:	4633      	mov	r3, r6
    }
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e7c <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSC_EENSt15__invoke_resultISE_JDpT0_EE4typeESF_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8005e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f81a 	bl	8005ec0 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	6838      	ldr	r0, [r7, #0]
 8005e90:	f000 f97d 	bl	800618e <_ZSt7forwardIRP13Function_callEOT_RNSt16remove_referenceIS3_E4typeE>
 8005e94:	4603      	mov	r3, r0
 8005e96:	461a      	mov	r2, r3
 8005e98:	4621      	mov	r1, r4
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	f000 f982 	bl	80061a4 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSD_EESF_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8005ea0:	4633      	mov	r3, r6
    }
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005eaa <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_RSt7variantIJbifS9_SB_SD_EEEJEE9_M_accessEv>:
      _M_access() const
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <_ZNSt16allocator_traitsISaIP16Power_expressionEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f968 	bl	80061d2 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE10deallocateEPS2_j>
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP16Power_expressionEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	6039      	str	r1, [r7, #0]
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorED1Ev>:
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <_ZNSt16allocator_traitsISaI13mult_operatorEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	68b9      	ldr	r1, [r7, #8]
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 f94f 	bl	80061ea <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE10deallocateEPS1_j>
 8005f4c:	bf00      	nop
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <_ZNSt12_Destroy_auxILb1EE9__destroyIP13mult_operatorEEvT_S4_>:
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionED1Ev>:
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f936 	bl	8006202 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE10deallocateEPS2_j>
 8005f96:	bf00      	nop
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP19Multiply_expressionEEvT_S5_>:
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorED1Ev>:
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <_ZNSt16allocator_traitsISaI12sum_operatorEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f91d 	bl	800621a <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE10deallocateEPS1_j>
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <_ZNSt12_Destroy_auxILb1EE9__destroyIP12sum_operatorEEvT_S4_>:
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionED1Ev>:
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	68b9      	ldr	r1, [r7, #8]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f904 	bl	8006232 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE10deallocateEPS2_j>
 800602a:	bf00      	nop
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18Compare_expressionEEvT_S5_>:
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	6039      	str	r1, [r7, #0]
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionED1Ev>:
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <_ZNSt16allocator_traitsISaIP14And_expressionEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	68b9      	ldr	r1, [r7, #8]
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 f8eb 	bl	800624a <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE10deallocateEPS2_j>
 8006074:	bf00      	nop
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14And_expressionEEvT_S5_>:
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRbEESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8006092:	b5b0      	push	{r4, r5, r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	7338      	strb	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800609e:	68b8      	ldr	r0, [r7, #8]
 80060a0:	f7ff ff0e 	bl	8005ec0 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80060a4:	4604      	mov	r4, r0
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fd f9a3 	bl	80033f2 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80060ac:	4603      	mov	r3, r0
 80060ae:	4619      	mov	r1, r3
 80060b0:	4620      	mov	r0, r4
 80060b2:	f000 f8d6 	bl	8006262 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRbEENS0_16__variant_cookieESE_>
 80060b6:	462b      	mov	r3, r5
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bdb0      	pop	{r4, r5, r7, pc}

080060c0 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRiEESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80060c0:	b5b0      	push	{r4, r5, r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	7338      	strb	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80060cc:	68b8      	ldr	r0, [r7, #8]
 80060ce:	f7ff fef7 	bl	8005ec0 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80060d2:	4604      	mov	r4, r0
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7fd f976 	bl	80033c6 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80060da:	4603      	mov	r3, r0
 80060dc:	4619      	mov	r1, r3
 80060de:	4620      	mov	r0, r4
 80060e0:	f000 f8d0 	bl	8006284 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRiEENS0_16__variant_cookieESE_>
 80060e4:	462b      	mov	r3, r5
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bdb0      	pop	{r4, r5, r7, pc}

080060ee <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRfEESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80060ee:	b5b0      	push	{r4, r5, r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	7338      	strb	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80060fa:	68b8      	ldr	r0, [r7, #8]
 80060fc:	f7ff fee0 	bl	8005ec0 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8006100:	4604      	mov	r4, r0
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fd f96a 	bl	80033dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006108:	4603      	mov	r3, r0
 800610a:	4619      	mov	r1, r3
 800610c:	4620      	mov	r0, r4
 800610e:	f000 f8ca 	bl	80062a6 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRfEENS0_16__variant_cookieESE_>
 8006112:	462b      	mov	r3, r5
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bdb0      	pop	{r4, r5, r7, pc}

0800611c <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRS9_EESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800611c:	b5b0      	push	{r4, r5, r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	7338      	strb	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8006128:	68b8      	ldr	r0, [r7, #8]
 800612a:	f7ff fec9 	bl	8005ec0 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 800612e:	4604      	mov	r4, r0
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fd f975 	bl	8003420 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8006136:	4603      	mov	r3, r0
 8006138:	4619      	mov	r1, r3
 800613a:	4620      	mov	r0, r4
 800613c:	f000 f8c4 	bl	80062c8 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRS7_EENS0_16__variant_cookieESE_>
 8006140:	462b      	mov	r3, r5
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bdb0      	pop	{r4, r5, r7, pc}

0800614a <_ZSt7forwardIRP8VariableEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSB_EESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8006160:	b5b0      	push	{r4, r5, r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	7338      	strb	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800616c:	68b8      	ldr	r0, [r7, #8]
 800616e:	f7ff fea7 	bl	8005ec0 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 8006172:	4604      	mov	r4, r0
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff ffe8 	bl	800614a <_ZSt7forwardIRP8VariableEOT_RNSt16remove_referenceIS3_E4typeE>
 800617a:	4603      	mov	r3, r0
 800617c:	4619      	mov	r1, r3
 800617e:	4620      	mov	r0, r4
 8006180:	f000 f8b3 	bl	80062ea <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRS9_EENS0_16__variant_cookieESE_>
 8006184:	462b      	mov	r3, r5
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bdb0      	pop	{r4, r5, r7, pc}

0800618e <_ZSt7forwardIRP13Function_callEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4618      	mov	r0, r3
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_JRSD_EESF_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80061a4:	b5b0      	push	{r4, r5, r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	7338      	strb	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80061b0:	68b8      	ldr	r0, [r7, #8]
 80061b2:	f7ff fe85 	bl	8005ec0 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvEUlOT_E_ESF_RNSt16remove_referenceISE_E4typeE>
 80061b6:	4604      	mov	r4, r0
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff ffe8 	bl	800618e <_ZSt7forwardIRP13Function_callEOT_RNSt16remove_referenceIS3_E4typeE>
 80061be:	4603      	mov	r3, r0
 80061c0:	4619      	mov	r1, r3
 80061c2:	4620      	mov	r0, r4
 80061c4:	f000 f8a2 	bl	800630c <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRSB_EENS0_16__variant_cookieESE_>
 80061c8:	462b      	mov	r3, r5
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bdb0      	pop	{r4, r5, r7, pc}

080061d2 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80061de:	68b8      	ldr	r0, [r7, #8]
 80061e0:	f010 fda1 	bl	8016d26 <_ZdlPv>
      }
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80061f6:	68b8      	ldr	r0, [r7, #8]
 80061f8:	f010 fd95 	bl	8016d26 <_ZdlPv>
      }
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800620e:	68b8      	ldr	r0, [r7, #8]
 8006210:	f010 fd89 	bl	8016d26 <_ZdlPv>
      }
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8006226:	68b8      	ldr	r0, [r7, #8]
 8006228:	f010 fd7d 	bl	8016d26 <_ZdlPv>
      }
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800623e:	68b8      	ldr	r0, [r7, #8]
 8006240:	f010 fd71 	bl	8016d26 <_ZdlPv>
      }
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	60f8      	str	r0, [r7, #12]
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8006256:	68b8      	ldr	r0, [r7, #8]
 8006258:	f010 fd65 	bl	8016d26 <_ZdlPv>
      }
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRbEENS0_16__variant_cookieESE_>:
	__do_visit([](auto&& __this_mem) mutable
 8006262:	b590      	push	{r4, r7, lr}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 800626c:	6838      	ldr	r0, [r7, #0]
 800626e:	f7fd fc51 	bl	8003b14 <_ZSt11__addressofIbEPT_RS0_>
 8006272:	4603      	mov	r3, r0
 8006274:	4618      	mov	r0, r3
 8006276:	f7fd fc58 	bl	8003b2a <_ZSt8_DestroyIbEvPT_>
	    return {};
 800627a:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	bd90      	pop	{r4, r7, pc}

08006284 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRiEENS0_16__variant_cookieESE_>:
 8006284:	b590      	push	{r4, r7, lr}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 800628e:	6838      	ldr	r0, [r7, #0]
 8006290:	f7fd fc16 	bl	8003ac0 <_ZSt11__addressofIiEPT_RS0_>
 8006294:	4603      	mov	r3, r0
 8006296:	4618      	mov	r0, r3
 8006298:	f7fd fc1d 	bl	8003ad6 <_ZSt8_DestroyIiEvPT_>
	    return {};
 800629c:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 800629e:	4618      	mov	r0, r3
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd90      	pop	{r4, r7, pc}

080062a6 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRfEENS0_16__variant_cookieESE_>:
 80062a6:	b590      	push	{r4, r7, lr}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80062b0:	6838      	ldr	r0, [r7, #0]
 80062b2:	f7fd fc1a 	bl	8003aea <_ZSt11__addressofIfEPT_RS0_>
 80062b6:	4603      	mov	r3, r0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fd fc21 	bl	8003b00 <_ZSt8_DestroyIfEvPT_>
	    return {};
 80062be:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd90      	pop	{r4, r7, pc}

080062c8 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRS7_EENS0_16__variant_cookieESE_>:
 80062c8:	b590      	push	{r4, r7, lr}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80062d2:	6838      	ldr	r0, [r7, #0]
 80062d4:	f7fd fc33 	bl	8003b3e <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80062d8:	4603      	mov	r3, r0
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fd fc3a 	bl	8003b54 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	    return {};
 80062e0:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80062e2:	4618      	mov	r0, r3
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd90      	pop	{r4, r7, pc}

080062ea <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRS9_EENS0_16__variant_cookieESE_>:
 80062ea:	b590      	push	{r4, r7, lr}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80062f4:	6838      	ldr	r0, [r7, #0]
 80062f6:	f000 f81a 	bl	800632e <_ZSt11__addressofIP8VariableEPT_RS2_>
 80062fa:	4603      	mov	r3, r0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 f821 	bl	8006344 <_ZSt8_DestroyIP8VariableEvPT_>
	    return {};
 8006302:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	bd90      	pop	{r4, r7, pc}

0800630c <_ZZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE13_M_reset_implEvENUlOT_E_clIRSB_EENS0_16__variant_cookieESE_>:
 800630c:	b590      	push	{r4, r7, lr}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 8006316:	6838      	ldr	r0, [r7, #0]
 8006318:	f000 f81e 	bl	8006358 <_ZSt11__addressofIP13Function_callEPT_RS2_>
 800631c:	4603      	mov	r3, r0
 800631e:	4618      	mov	r0, r3
 8006320:	f000 f825 	bl	800636e <_ZSt8_DestroyIP13Function_callEvPT_>
	    return {};
 8006324:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	bd90      	pop	{r4, r7, pc}

0800632e <_ZSt11__addressofIP8VariableEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4618      	mov	r0, r3
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <_ZSt8_DestroyIP8VariableEvPT_>:
    _Destroy(_Tp* __pointer)
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <_ZSt11__addressofIP13Function_callEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4618      	mov	r0, r3
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <_ZSt8_DestroyIP13Function_callEvPT_>:
    _Destroy(_Tp* __pointer)
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
	...

08006384 <_Z41__static_initialization_and_destruction_0ii>:
 8006384:	b590      	push	{r4, r7, lr}
 8006386:	b0e7      	sub	sp, #412	; 0x19c
 8006388:	af02      	add	r7, sp, #8
 800638a:	1d3b      	adds	r3, r7, #4
 800638c:	6018      	str	r0, [r3, #0]
 800638e:	463b      	mov	r3, r7
 8006390:	6019      	str	r1, [r3, #0]
 8006392:	1d3b      	adds	r3, r7, #4
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b01      	cmp	r3, #1
 8006398:	f040 819d 	bne.w	80066d6 <_Z41__static_initialization_and_destruction_0ii+0x352>
 800639c:	463b      	mov	r3, r7
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063a4:	4293      	cmp	r3, r2
 80063a6:	f040 8196 	bne.w	80066d6 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 80063aa:	f107 0314 	add.w	r3, r7, #20
 80063ae:	4618      	mov	r0, r3
 80063b0:	2322      	movs	r3, #34	; 0x22
 80063b2:	461a      	mov	r2, r3
 80063b4:	2100      	movs	r1, #0
 80063b6:	f011 f881 	bl	80174bc <memset>
 80063ba:	f107 0314 	add.w	r3, r7, #20
 80063be:	223a      	movs	r2, #58	; 0x3a
 80063c0:	701a      	strb	r2, [r3, #0]
 80063c2:	f107 0314 	add.w	r3, r7, #20
 80063c6:	2201      	movs	r2, #1
 80063c8:	705a      	strb	r2, [r3, #1]
 80063ca:	f107 0314 	add.w	r3, r7, #20
 80063ce:	220a      	movs	r2, #10
 80063d0:	709a      	strb	r2, [r3, #2]
 80063d2:	f107 0314 	add.w	r3, r7, #20
 80063d6:	220a      	movs	r2, #10
 80063d8:	70da      	strb	r2, [r3, #3]
 80063da:	f107 0314 	add.w	r3, r7, #20
 80063de:	222c      	movs	r2, #44	; 0x2c
 80063e0:	711a      	strb	r2, [r3, #4]
 80063e2:	f107 0314 	add.w	r3, r7, #20
 80063e6:	220c      	movs	r2, #12
 80063e8:	715a      	strb	r2, [r3, #5]
 80063ea:	f107 0314 	add.w	r3, r7, #20
 80063ee:	222e      	movs	r2, #46	; 0x2e
 80063f0:	719a      	strb	r2, [r3, #6]
 80063f2:	f107 0314 	add.w	r3, r7, #20
 80063f6:	220b      	movs	r2, #11
 80063f8:	71da      	strb	r2, [r3, #7]
 80063fa:	f107 0314 	add.w	r3, r7, #20
 80063fe:	225b      	movs	r2, #91	; 0x5b
 8006400:	721a      	strb	r2, [r3, #8]
 8006402:	f107 0314 	add.w	r3, r7, #20
 8006406:	220d      	movs	r2, #13
 8006408:	725a      	strb	r2, [r3, #9]
 800640a:	f107 0314 	add.w	r3, r7, #20
 800640e:	225d      	movs	r2, #93	; 0x5d
 8006410:	729a      	strb	r2, [r3, #10]
 8006412:	f107 0314 	add.w	r3, r7, #20
 8006416:	220e      	movs	r2, #14
 8006418:	72da      	strb	r2, [r3, #11]
 800641a:	f107 0314 	add.w	r3, r7, #20
 800641e:	227c      	movs	r2, #124	; 0x7c
 8006420:	731a      	strb	r2, [r3, #12]
 8006422:	f107 0314 	add.w	r3, r7, #20
 8006426:	2215      	movs	r2, #21
 8006428:	735a      	strb	r2, [r3, #13]
 800642a:	f107 0314 	add.w	r3, r7, #20
 800642e:	2226      	movs	r2, #38	; 0x26
 8006430:	739a      	strb	r2, [r3, #14]
 8006432:	f107 0314 	add.w	r3, r7, #20
 8006436:	2216      	movs	r2, #22
 8006438:	73da      	strb	r2, [r3, #15]
 800643a:	f107 0314 	add.w	r3, r7, #20
 800643e:	222b      	movs	r2, #43	; 0x2b
 8006440:	741a      	strb	r2, [r3, #16]
 8006442:	f107 0314 	add.w	r3, r7, #20
 8006446:	221f      	movs	r2, #31
 8006448:	745a      	strb	r2, [r3, #17]
 800644a:	f107 0314 	add.w	r3, r7, #20
 800644e:	222d      	movs	r2, #45	; 0x2d
 8006450:	749a      	strb	r2, [r3, #18]
 8006452:	f107 0314 	add.w	r3, r7, #20
 8006456:	2220      	movs	r2, #32
 8006458:	74da      	strb	r2, [r3, #19]
 800645a:	f107 0314 	add.w	r3, r7, #20
 800645e:	222a      	movs	r2, #42	; 0x2a
 8006460:	751a      	strb	r2, [r3, #20]
 8006462:	f107 0314 	add.w	r3, r7, #20
 8006466:	2221      	movs	r2, #33	; 0x21
 8006468:	755a      	strb	r2, [r3, #21]
 800646a:	f107 0314 	add.w	r3, r7, #20
 800646e:	222f      	movs	r2, #47	; 0x2f
 8006470:	759a      	strb	r2, [r3, #22]
 8006472:	f107 0314 	add.w	r3, r7, #20
 8006476:	2222      	movs	r2, #34	; 0x22
 8006478:	75da      	strb	r2, [r3, #23]
 800647a:	f107 0314 	add.w	r3, r7, #20
 800647e:	225e      	movs	r2, #94	; 0x5e
 8006480:	761a      	strb	r2, [r3, #24]
 8006482:	f107 0314 	add.w	r3, r7, #20
 8006486:	2223      	movs	r2, #35	; 0x23
 8006488:	765a      	strb	r2, [r3, #25]
 800648a:	f107 0314 	add.w	r3, r7, #20
 800648e:	2225      	movs	r2, #37	; 0x25
 8006490:	769a      	strb	r2, [r3, #26]
 8006492:	f107 0314 	add.w	r3, r7, #20
 8006496:	2224      	movs	r2, #36	; 0x24
 8006498:	76da      	strb	r2, [r3, #27]
 800649a:	f107 0314 	add.w	r3, r7, #20
 800649e:	2228      	movs	r2, #40	; 0x28
 80064a0:	771a      	strb	r2, [r3, #28]
 80064a2:	f107 0314 	add.w	r3, r7, #20
 80064a6:	2226      	movs	r2, #38	; 0x26
 80064a8:	775a      	strb	r2, [r3, #29]
 80064aa:	f107 0314 	add.w	r3, r7, #20
 80064ae:	2229      	movs	r2, #41	; 0x29
 80064b0:	779a      	strb	r2, [r3, #30]
 80064b2:	f107 0314 	add.w	r3, r7, #20
 80064b6:	2227      	movs	r2, #39	; 0x27
 80064b8:	77da      	strb	r2, [r3, #31]
 80064ba:	f107 0314 	add.w	r3, r7, #20
 80064be:	2225      	movs	r2, #37	; 0x25
 80064c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80064c4:	f107 030c 	add.w	r3, r7, #12
 80064c8:	f107 0214 	add.w	r2, r7, #20
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	f107 030c 	add.w	r3, r7, #12
 80064d2:	2211      	movs	r2, #17
 80064d4:	605a      	str	r2, [r3, #4]
 80064d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fa feda 	bl	8001294 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 80064e0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80064e4:	f107 020c 	add.w	r2, r7, #12
 80064e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	460b      	mov	r3, r1
 80064f0:	ca06      	ldmia	r2, {r1, r2}
 80064f2:	4885      	ldr	r0, [pc, #532]	; (8006708 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80064f4:	f7fa fee6 	bl	80012c4 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80064f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fa fed5 	bl	80012ac <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8006502:	2305      	movs	r3, #5
 8006504:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8006508:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 800650c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006510:	497e      	ldr	r1, [pc, #504]	; (800670c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8006512:	4618      	mov	r0, r3
 8006514:	f7fa fdc2 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8006518:	2306      	movs	r3, #6
 800651a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 800651e:	f207 1263 	addw	r2, r7, #355	; 0x163
 8006522:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006526:	331c      	adds	r3, #28
 8006528:	4979      	ldr	r1, [pc, #484]	; (8006710 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800652a:	4618      	mov	r0, r3
 800652c:	f7fa fdde 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8006530:	2307      	movs	r3, #7
 8006532:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8006536:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800653a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800653e:	3338      	adds	r3, #56	; 0x38
 8006540:	4974      	ldr	r1, [pc, #464]	; (8006714 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8006542:	4618      	mov	r0, r3
 8006544:	f7fa fdd2 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8006548:	2308      	movs	r3, #8
 800654a:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 800654e:	f207 1265 	addw	r2, r7, #357	; 0x165
 8006552:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006556:	3354      	adds	r3, #84	; 0x54
 8006558:	496f      	ldr	r1, [pc, #444]	; (8006718 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800655a:	4618      	mov	r0, r3
 800655c:	f7fa fd9e 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8006560:	2309      	movs	r3, #9
 8006562:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8006566:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 800656a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800656e:	3370      	adds	r3, #112	; 0x70
 8006570:	496a      	ldr	r1, [pc, #424]	; (800671c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8006572:	4618      	mov	r0, r3
 8006574:	f7fa fde2 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8006578:	2310      	movs	r3, #16
 800657a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 800657e:	f207 1267 	addw	r2, r7, #359	; 0x167
 8006582:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006586:	338c      	adds	r3, #140	; 0x8c
 8006588:	4965      	ldr	r1, [pc, #404]	; (8006720 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800658a:	4618      	mov	r0, r3
 800658c:	f7fa fdfe 	bl	800118c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8006590:	2311      	movs	r3, #17
 8006592:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8006596:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800659a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800659e:	33a8      	adds	r3, #168	; 0xa8
 80065a0:	4960      	ldr	r1, [pc, #384]	; (8006724 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fa fdca 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 80065a8:	2312      	movs	r3, #18
 80065aa:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 80065ae:	f207 1269 	addw	r2, r7, #361	; 0x169
 80065b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80065b6:	33c4      	adds	r3, #196	; 0xc4
 80065b8:	495b      	ldr	r1, [pc, #364]	; (8006728 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fa fd6e 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 80065c0:	2313      	movs	r3, #19
 80065c2:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 80065c6:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 80065ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80065ce:	33e0      	adds	r3, #224	; 0xe0
 80065d0:	4956      	ldr	r1, [pc, #344]	; (800672c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fa fd8a 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 80065d8:	2314      	movs	r3, #20
 80065da:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 80065de:	f207 126b 	addw	r2, r7, #363	; 0x16b
 80065e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80065e6:	33fc      	adds	r3, #252	; 0xfc
 80065e8:	4951      	ldr	r1, [pc, #324]	; (8006730 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fa fdf6 	bl	80011dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 80065f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80065f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80065fe:	220a      	movs	r2, #10
 8006600:	605a      	str	r2, [r3, #4]
 8006602:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006606:	4618      	mov	r0, r3
 8006608:	f7fa fee9 	bl	80013de <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 800660c:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8006610:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006614:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	460b      	mov	r3, r1
 800661c:	ca06      	ldmia	r2, {r1, r2}
 800661e:	4845      	ldr	r0, [pc, #276]	; (8006734 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8006620:	f7fa fef5 	bl	800140e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8006624:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006628:	4618      	mov	r0, r3
 800662a:	f7fa fee4 	bl	80013f6 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800662e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8006632:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8006636:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800663a:	429c      	cmp	r4, r3
 800663c:	d004      	beq.n	8006648 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 800663e:	3c1c      	subs	r4, #28
 8006640:	4620      	mov	r0, r4
 8006642:	f7fa fd1e 	bl	8001082 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8006646:	e7f6      	b.n	8006636 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8006648:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	605a      	str	r2, [r3, #4]
 8006652:	609a      	str	r2, [r3, #8]
 8006654:	233c      	movs	r3, #60	; 0x3c
 8006656:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 800665a:	231b      	movs	r3, #27
 800665c:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8006660:	231c      	movs	r3, #28
 8006662:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8006666:	233e      	movs	r3, #62	; 0x3e
 8006668:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 800666c:	2319      	movs	r3, #25
 800666e:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8006672:	231a      	movs	r3, #26
 8006674:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8006678:	233d      	movs	r3, #61	; 0x3d
 800667a:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 800667e:	2318      	movs	r3, #24
 8006680:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8006684:	231d      	movs	r3, #29
 8006686:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800668a:	2321      	movs	r3, #33	; 0x21
 800668c:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8006690:	2317      	movs	r3, #23
 8006692:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8006696:	231e      	movs	r3, #30
 8006698:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 800669c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80066a0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80066a4:	2304      	movs	r3, #4
 80066a6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80066aa:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fa fedd 	bl	800146e <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 80066b4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80066b8:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	4613      	mov	r3, r2
 80066c0:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 80066c4:	ca06      	ldmia	r2, {r1, r2}
 80066c6:	481c      	ldr	r0, [pc, #112]	; (8006738 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80066c8:	f7fa fee9 	bl	800149e <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80066cc:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fa fed8 	bl	8001486 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 80066d6:	1d3b      	adds	r3, r7, #4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10e      	bne.n	80066fc <_Z41__static_initialization_and_destruction_0ii+0x378>
 80066de:	463b      	mov	r3, r7
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d108      	bne.n	80066fc <_Z41__static_initialization_and_destruction_0ii+0x378>
 80066ea:	4813      	ldr	r0, [pc, #76]	; (8006738 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80066ec:	f7fd fbf6 	bl	8003edc <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 80066f0:	4810      	ldr	r0, [pc, #64]	; (8006734 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80066f2:	f7fd fc00 	bl	8003ef6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 80066f6:	4804      	ldr	r0, [pc, #16]	; (8006708 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80066f8:	f7fd fc0a 	bl	8003f10 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80066fc:	bf00      	nop
 80066fe:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006702:	46bd      	mov	sp, r7
 8006704:	bd90      	pop	{r4, r7, pc}
 8006706:	bf00      	nop
 8006708:	20000244 	.word	0x20000244
 800670c:	0801a494 	.word	0x0801a494
 8006710:	0801a49c 	.word	0x0801a49c
 8006714:	0801a4a4 	.word	0x0801a4a4
 8006718:	0801a4ac 	.word	0x0801a4ac
 800671c:	0801a4b4 	.word	0x0801a4b4
 8006720:	0801a4bc 	.word	0x0801a4bc
 8006724:	0801a4c0 	.word	0x0801a4c0
 8006728:	0801a4c8 	.word	0x0801a4c8
 800672c:	0801a4d0 	.word	0x0801a4d0
 8006730:	0801a4d8 	.word	0x0801a4d8
 8006734:	2000025c 	.word	0x2000025c
 8006738:	20000274 	.word	0x20000274

0800673c <_GLOBAL__sub_I__ZN17Primal_expressionD2Ev>:
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
 8006740:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006744:	2001      	movs	r0, #1
 8006746:	f7ff fe1d 	bl	8006384 <_Z41__static_initialization_and_destruction_0ii>
 800674a:	bd80      	pop	{r7, pc}

0800674c <_GLOBAL__sub_D__ZN17Primal_expressionD2Ev>:
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
 8006750:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006754:	2000      	movs	r0, #0
 8006756:	f7ff fe15 	bl	8006384 <_Z41__static_initialization_and_destruction_0ii>
 800675a:	bd80      	pop	{r7, pc}

0800675c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af02      	add	r7, sp, #8
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f010 fd9b 	bl	80172a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800676e:	4602      	mov	r2, r0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4904      	ldr	r1, [pc, #16]	; (8006788 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8006778:	4804      	ldr	r0, [pc, #16]	; (800678c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 800677a:	f000 fd86 	bl	800728a <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 800677e:	4603      	mov	r3, r0
					__idx, __base); }
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	0801a4dc 	.word	0x0801a4dc
 800678c:	080184d1 	.word	0x080184d1

08006790 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>:
			     __idx, __base); }

  // NB: strtof vs strtod.
  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f010 fd82 	bl	80172a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80067a0:	4602      	mov	r2, r0
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	4905      	ldr	r1, [pc, #20]	; (80067bc <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x2c>)
 80067a6:	4806      	ldr	r0, [pc, #24]	; (80067c0 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x30>)
 80067a8:	f000 fdef 	bl	800738a <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 80067ac:	eef0 7a40 	vmov.f32	s15, s0
 80067b0:	eeb0 0a67 	vmov.f32	s0, s15
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	0801a4e4 	.word	0x0801a4e4
 80067c0:	08018315 	.word	0x08018315

080067c4 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fe7c 	bl	80074cc <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff ffeb 	bl	80067c4 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff ffeb 	bl	80067de <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Move_assign_base : _Copy_assign_alias<_Types...>
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff ffeb 	bl	80067f8 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
    struct _Variant_base : _Move_assign_alias<_Types...>
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4618      	mov	r0, r3
 8006838:	f7ff ffeb 	bl	8006812 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>:
      variant() = default;
 8006846:	b580      	push	{r7, lr}
 8006848:	b082      	sub	sp, #8
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4618      	mov	r0, r3
 8006852:	f000 fe2e 	bl	80074b2 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4618      	mov	r0, r3
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
      ~variant() = default;
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff ffde 	bl	800682c <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4618      	mov	r0, r3
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <_ZN5TokenC1Ev>:
#include <string>
#include "token_types.h"

typedef std::variant<std::string, int, float, bool> token_value;

class Token
 800687a:	b580      	push	{r7, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3304      	adds	r3, #4
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff ffdd 	bl	8006846 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <_ZN5LexerC1EP6Source>:
#include <Lexer.h>

Lexer::Lexer(Source *Code)
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7ff ffe8 	bl	800687a <_ZN5TokenC1Ev>
{
	this->Code = Code;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	62da      	str	r2, [r3, #44]	; 0x2c
	char_buffer = ' ';
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	701a      	strb	r2, [r3, #0]
}
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <_ZN5Lexer17match_single_charEv>:

bool Lexer::match_single_char()
{
 80068c0:	b590      	push	{r4, r7, lr}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	auto result = token_chars.find(char_buffer);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4619      	mov	r1, r3
 80068cc:	4818      	ldr	r0, [pc, #96]	; (8006930 <_ZN5Lexer17match_single_charEv+0x70>)
 80068ce:	f000 fe09 	bl	80074e4 <_ZNKSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEE4findERS4_>
 80068d2:	4603      	mov	r3, r0
 80068d4:	60bb      	str	r3, [r7, #8]
	if (result != token_chars.end())
 80068d6:	4816      	ldr	r0, [pc, #88]	; (8006930 <_ZN5Lexer17match_single_charEv+0x70>)
 80068d8:	f000 fe13 	bl	8007502 <_ZNKSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEE3endEv>
 80068dc:	4603      	mov	r3, r0
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	f107 020c 	add.w	r2, r7, #12
 80068e4:	f107 0308 	add.w	r3, r7, #8
 80068e8:	4611      	mov	r1, r2
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fe16 	bl	800751c <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEES6_>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d017      	beq.n	8006926 <_ZN5Lexer17match_single_charEv+0x66>
	{
		Product.set_type(result->second);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	1d1c      	adds	r4, r3, #4
 80068fa:	f107 0308 	add.w	r3, r7, #8
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fe20 	bl	8007544 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEptEv>
 8006904:	4603      	mov	r3, r0
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	4619      	mov	r1, r3
 800690a:	4620      	mov	r0, r4
 800690c:	f008 fd46 	bl	800f39c <_ZN5Token8set_typeE10token_type>
		char_buffer = Code->receive_code_char();
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	4618      	mov	r0, r3
 8006916:	f007 feef 	bl	800e6f8 <_ZN6Source17receive_code_charEv>
 800691a:	4603      	mov	r3, r0
 800691c:	461a      	mov	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	701a      	strb	r2, [r3, #0]
		return true;
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <_ZN5Lexer17match_single_charEv+0x68>
	}
	return false;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	bd90      	pop	{r4, r7, pc}
 8006930:	2000028c 	.word	0x2000028c

08006934 <_ZN5Lexer17match_double_charEv>:

bool Lexer::match_double_char()
{
 8006934:	b590      	push	{r4, r7, lr}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
	auto result = token_double_chars.find(char_buffer);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4619      	mov	r1, r3
 8006940:	4826      	ldr	r0, [pc, #152]	; (80069dc <_ZN5Lexer17match_double_charEv+0xa8>)
 8006942:	f000 fe0d 	bl	8007560 <_ZNKSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEE4findERS4_>
 8006946:	4603      	mov	r3, r0
 8006948:	60bb      	str	r3, [r7, #8]
	if (result != token_double_chars.end())
 800694a:	4824      	ldr	r0, [pc, #144]	; (80069dc <_ZN5Lexer17match_double_charEv+0xa8>)
 800694c:	f000 fe17 	bl	800757e <_ZNKSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEE3endEv>
 8006950:	4603      	mov	r3, r0
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	f107 020c 	add.w	r2, r7, #12
 8006958:	f107 0308 	add.w	r3, r7, #8
 800695c:	4611      	mov	r1, r2
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fe1a 	bl	8007598 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEES6_>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d032      	beq.n	80069d0 <_ZN5Lexer17match_double_charEv+0x9c>
	{
		char_buffer = Code->receive_code_char();
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696e:	4618      	mov	r0, r3
 8006970:	f007 fec2 	bl	800e6f8 <_ZN6Source17receive_code_charEv>
 8006974:	4603      	mov	r3, r0
 8006976:	461a      	mov	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	701a      	strb	r2, [r3, #0]
		if (char_buffer == '=')
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b3d      	cmp	r3, #61	; 0x3d
 8006982:	d116      	bne.n	80069b2 <_ZN5Lexer17match_double_charEv+0x7e>
		{
			Product.set_type(result->second.double_char);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	1d1c      	adds	r4, r3, #4
 8006988:	f107 0308 	add.w	r3, r7, #8
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fe17 	bl	80075c0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEptEv>
 8006992:	4603      	mov	r3, r0
 8006994:	789b      	ldrb	r3, [r3, #2]
 8006996:	4619      	mov	r1, r3
 8006998:	4620      	mov	r0, r4
 800699a:	f008 fcff 	bl	800f39c <_ZN5Token8set_typeE10token_type>
			char_buffer = Code->receive_code_char();
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	4618      	mov	r0, r3
 80069a4:	f007 fea8 	bl	800e6f8 <_ZN6Source17receive_code_charEv>
 80069a8:	4603      	mov	r3, r0
 80069aa:	461a      	mov	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	e00c      	b.n	80069cc <_ZN5Lexer17match_double_charEv+0x98>
		}
		else
		{
			Product.set_type(result->second.single_char);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	1d1c      	adds	r4, r3, #4
 80069b6:	f107 0308 	add.w	r3, r7, #8
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fe00 	bl	80075c0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEptEv>
 80069c0:	4603      	mov	r3, r0
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	4619      	mov	r1, r3
 80069c6:	4620      	mov	r0, r4
 80069c8:	f008 fce8 	bl	800f39c <_ZN5Token8set_typeE10token_type>
		}
		return true;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <_ZN5Lexer17match_double_charEv+0x9e>
	}
	return false;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd90      	pop	{r4, r7, pc}
 80069da:	bf00      	nop
 80069dc:	200002bc 	.word	0x200002bc

080069e0 <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::build_word(std::string &word)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
	do
	{
		word.push_back(char_buffer);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	4619      	mov	r1, r3
 80069f0:	6838      	ldr	r0, [r7, #0]
 80069f2:	f010 fbe3 	bl	80171bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
		char_buffer = Code->receive_code_char();
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fa:	4618      	mov	r0, r3
 80069fc:	f007 fe7c 	bl	800e6f8 <_ZN6Source17receive_code_charEv>
 8006a00:	4603      	mov	r3, r0
 8006a02:	461a      	mov	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	701a      	strb	r2, [r3, #0]
	} while (isalnum(char_buffer) || char_buffer == '_');
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f010 fcdd 	bl	80173cc <isalnum>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e8      	bne.n	80069ea <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	2b5f      	cmp	r3, #95	; 0x5f
 8006a1e:	d100      	bne.n	8006a22 <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
	do
 8006a20:	e7e3      	b.n	80069ea <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa>
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::match_keyword_or_id(std::string &word)
{
 8006a2c:	b590      	push	{r4, r7, lr}
 8006a2e:	b093      	sub	sp, #76	; 0x4c
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
	auto result = token_strings.find(word);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	4826      	ldr	r0, [pc, #152]	; (8006ad4 <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 8006a3a:	f000 fdcf 	bl	80075dc <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	60fb      	str	r3, [r7, #12]
	if (result != token_strings.end())
 8006a42:	4824      	ldr	r0, [pc, #144]	; (8006ad4 <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 8006a44:	f000 fdd9 	bl	80075fa <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEE3endEv>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	613b      	str	r3, [r7, #16]
 8006a4c:	f107 0210 	add.w	r2, r7, #16
 8006a50:	f107 030c 	add.w	r3, r7, #12
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fddc 	bl	8007614 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00d      	beq.n	8006a7e <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x52>
	{
		Product.set_type(result->second);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	1d1c      	adds	r4, r3, #4
 8006a66:	f107 030c 	add.w	r3, r7, #12
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fde6 	bl	800763c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEptEv>
 8006a70:	4603      	mov	r3, r0
 8006a72:	7e1b      	ldrb	r3, [r3, #24]
 8006a74:	4619      	mov	r1, r3
 8006a76:	4620      	mov	r0, r4
 8006a78:	f008 fc90 	bl	800f39c <_ZN5Token8set_typeE10token_type>
	else
	{
		Product.set_type(TOKEN_IDENTIFIER);
		Product.set_value(std::string(word));
	}
}
 8006a7c:	e025      	b.n	8006aca <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e>
		Product.set_type(TOKEN_IDENTIFIER);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3304      	adds	r3, #4
 8006a82:	2102      	movs	r1, #2
 8006a84:	4618      	mov	r0, r3
 8006a86:	f008 fc89 	bl	800f39c <_ZN5Token8set_typeE10token_type>
		Product.set_value(std::string(word));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	1d1c      	adds	r4, r3, #4
 8006a8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f010 fc4f 	bl	8017338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006a9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006a9e:	f107 0314 	add.w	r3, r7, #20
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fdfb 	bl	80076a0 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IS5_vvS5_vEEOT_>
 8006aaa:	f107 0314 	add.w	r3, r7, #20
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f008 fc54 	bl	800f35e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 8006ab6:	f107 0314 	add.w	r3, r7, #20
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff fed0 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006ac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f010 fb0a 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8006aca:	bf00      	nop
 8006acc:	374c      	adds	r7, #76	; 0x4c
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd90      	pop	{r4, r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	200002a4 	.word	0x200002a4

08006ad8 <_ZN5Lexer19build_keyword_or_idEv>:

bool Lexer::build_keyword_or_id()
{
 8006ad8:	b590      	push	{r4, r7, lr}
 8006ada:	b089      	sub	sp, #36	; 0x24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
	if (isalpha(char_buffer))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f010 fc79 	bl	80173dc <isalpha>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d017      	beq.n	8006b20 <_ZN5Lexer19build_keyword_or_idEv+0x48>
	{
		std::string word;
 8006af0:	f107 0308 	add.w	r3, r7, #8
 8006af4:	4618      	mov	r0, r3
 8006af6:	f010 fad1 	bl	801709c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		build_word(word);
 8006afa:	f107 0308 	add.w	r3, r7, #8
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff ff6d 	bl	80069e0 <_ZN5Lexer10build_wordERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		match_keyword_or_id(word);
 8006b06:	f107 0308 	add.w	r3, r7, #8
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff ff8d 	bl	8006a2c <_ZN5Lexer19match_keyword_or_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		return true;
 8006b12:	2401      	movs	r4, #1
		std::string word;
 8006b14:	f107 0308 	add.w	r3, r7, #8
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f010 fae0 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006b1e:	e000      	b.n	8006b22 <_ZN5Lexer19build_keyword_or_idEv+0x4a>
	}
	return false;
 8006b20:	2400      	movs	r4, #0
 8006b22:	4623      	mov	r3, r4
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3724      	adds	r7, #36	; 0x24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd90      	pop	{r4, r7, pc}

08006b2c <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::build_int(std::string &word)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
	do
	{
		word.push_back(char_buffer);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6838      	ldr	r0, [r7, #0]
 8006b3e:	f010 fb3d 	bl	80171bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
		char_buffer = Code->receive_code_char();
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	4618      	mov	r0, r3
 8006b48:	f007 fdd6 	bl	800e6f8 <_ZN6Source17receive_code_charEv>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	461a      	mov	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	701a      	strb	r2, [r3, #0]
	} while (isdigit(char_buffer));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	3b30      	subs	r3, #48	; 0x30
 8006b5a:	2b09      	cmp	r3, #9
 8006b5c:	bf94      	ite	ls
 8006b5e:	2301      	movls	r3, #1
 8006b60:	2300      	movhi	r3, #0
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d000      	beq.n	8006b6a <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3e>
	do
 8006b68:	e7e5      	b.n	8006b36 <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa>
}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <_ZN5Lexer18match_int_or_floatERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::match_int_or_float(std::string &word)
{
 8006b72:	b590      	push	{r4, r7, lr}
 8006b74:	b093      	sub	sp, #76	; 0x4c
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
	if (char_buffer != '.')
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b2e      	cmp	r3, #46	; 0x2e
 8006b82:	d022      	beq.n	8006bca <_ZN5Lexer18match_int_or_floatERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>
	{
		Product.set_type(TOKEN_INT);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3304      	adds	r3, #4
 8006b88:	2103      	movs	r1, #3
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f008 fc06 	bl	800f39c <_ZN5Token8set_typeE10token_type>
		Product.set_value(std::stoi(word));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	1d1c      	adds	r4, r3, #4
 8006b94:	220a      	movs	r2, #10
 8006b96:	2100      	movs	r1, #0
 8006b98:	6838      	ldr	r0, [r7, #0]
 8006b9a:	f7ff fddf 	bl	800675c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006ba6:	f107 0308 	add.w	r3, r7, #8
 8006baa:	4611      	mov	r1, r2
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 fdae 	bl	800770e <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IivvivEEOT_>
 8006bb2:	f107 0308 	add.w	r3, r7, #8
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f008 fbd0 	bl	800f35e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 8006bbe:	f107 0308 	add.w	r3, r7, #8
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff fe4c 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	{
		build_int(word);
		Product.set_type(TOKEN_FLOAT);
		Product.set_value(std::stof(word));
	}
}
 8006bc8:	e026      	b.n	8006c18 <_ZN5Lexer18match_int_or_floatERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa6>
		build_int(word);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff ffad 	bl	8006b2c <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		Product.set_type(TOKEN_FLOAT);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	2104      	movs	r1, #4
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f008 fbdf 	bl	800f39c <_ZN5Token8set_typeE10token_type>
		Product.set_value(std::stof(word));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	1d1c      	adds	r4, r3, #4
 8006be2:	2100      	movs	r1, #0
 8006be4:	6838      	ldr	r0, [r7, #0]
 8006be6:	f7ff fdd3 	bl	8006790 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8006bea:	eef0 7a40 	vmov.f32	s15, s0
 8006bee:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8006bf2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8006bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fdbd 	bl	800777c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IfvvfvEEOT_>
 8006c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c06:	4619      	mov	r1, r3
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f008 fba8 	bl	800f35e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 8006c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff fe24 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
}
 8006c18:	bf00      	nop
 8006c1a:	374c      	adds	r7, #76	; 0x4c
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd90      	pop	{r4, r7, pc}

08006c20 <_ZN5Lexer18build_int_or_floatEv>:

bool Lexer::build_int_or_float()
{
 8006c20:	b590      	push	{r4, r7, lr}
 8006c22:	b089      	sub	sp, #36	; 0x24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	if (isdigit(char_buffer) && char_buffer != '0')
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	3b30      	subs	r3, #48	; 0x30
 8006c2e:	2b09      	cmp	r3, #9
 8006c30:	bf94      	ite	ls
 8006c32:	2301      	movls	r3, #1
 8006c34:	2300      	movhi	r3, #0
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01b      	beq.n	8006c74 <_ZN5Lexer18build_int_or_floatEv+0x54>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b30      	cmp	r3, #48	; 0x30
 8006c42:	d017      	beq.n	8006c74 <_ZN5Lexer18build_int_or_floatEv+0x54>
	{
		std::string word;
 8006c44:	f107 0308 	add.w	r3, r7, #8
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f010 fa27 	bl	801709c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		build_int(word);
 8006c4e:	f107 0308 	add.w	r3, r7, #8
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff ff69 	bl	8006b2c <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		match_int_or_float(word);
 8006c5a:	f107 0308 	add.w	r3, r7, #8
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff ff86 	bl	8006b72 <_ZN5Lexer18match_int_or_floatERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		return true;
 8006c66:	2401      	movs	r4, #1
		std::string word;
 8006c68:	f107 0308 	add.w	r3, r7, #8
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f010 fa36 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006c72:	e000      	b.n	8006c76 <_ZN5Lexer18build_int_or_floatEv+0x56>
	}
	return false;
 8006c74:	2400      	movs	r4, #0
 8006c76:	4623      	mov	r3, r4
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3724      	adds	r7, #36	; 0x24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd90      	pop	{r4, r7, pc}

08006c80 <_ZN5Lexer20build_0_int_or_floatEv>:

bool Lexer::build_0_int_or_float()
{
 8006c80:	b590      	push	{r4, r7, lr}
 8006c82:	b099      	sub	sp, #100	; 0x64
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	if (char_buffer == '0')
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b30      	cmp	r3, #48	; 0x30
 8006c8e:	d161      	bne.n	8006d54 <_ZN5Lexer20build_0_int_or_floatEv+0xd4>
	{
		char_buffer = Code->receive_code_char();
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	4618      	mov	r0, r3
 8006c96:	f007 fd2f 	bl	800e6f8 <_ZN6Source17receive_code_charEv>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	701a      	strb	r2, [r3, #0]
		if (char_buffer == '.')
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8006ca8:	d135      	bne.n	8006d16 <_ZN5Lexer20build_0_int_or_floatEv+0x96>
		{
			std::string word;
 8006caa:	f107 0308 	add.w	r3, r7, #8
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f010 f9f4 	bl	801709c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
			build_int(word);
 8006cb4:	f107 0308 	add.w	r3, r7, #8
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff ff36 	bl	8006b2c <_ZN5Lexer9build_intERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
			Product.set_type(TOKEN_FLOAT);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	2104      	movs	r1, #4
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f008 fb68 	bl	800f39c <_ZN5Token8set_typeE10token_type>
			Product.set_value(std::stof(word));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	1d1c      	adds	r4, r3, #4
 8006cd0:	f107 0308 	add.w	r3, r7, #8
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff fd5a 	bl	8006790 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8006cdc:	eef0 7a40 	vmov.f32	s15, s0
 8006ce0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8006ce4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006ce8:	f107 0320 	add.w	r3, r7, #32
 8006cec:	4611      	mov	r1, r2
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fd44 	bl	800777c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IfvvfvEEOT_>
 8006cf4:	f107 0320 	add.w	r3, r7, #32
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f008 fb2f 	bl	800f35e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 8006d00:	f107 0320 	add.w	r3, r7, #32
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff fdab 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
			std::string word;
 8006d0a:	f107 0308 	add.w	r3, r7, #8
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f010 f9e5 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006d14:	e01c      	b.n	8006d50 <_ZN5Lexer20build_0_int_or_floatEv+0xd0>
		}
		else
		{
			Product.set_type(TOKEN_INT);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	2103      	movs	r1, #3
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f008 fb3d 	bl	800f39c <_ZN5Token8set_typeE10token_type>
			Product.set_value(0);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	1d1c      	adds	r4, r3, #4
 8006d26:	2300      	movs	r3, #0
 8006d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d2a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006d2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d32:	4611      	mov	r1, r2
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fcea 	bl	800770e <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IivvivEEOT_>
 8006d3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4620      	mov	r0, r4
 8006d42:	f008 fb0c 	bl	800f35e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 8006d46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7ff fd88 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
		}
		return true;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e000      	b.n	8006d56 <_ZN5Lexer20build_0_int_or_floatEv+0xd6>
	}
	return false;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3764      	adds	r7, #100	; 0x64
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd90      	pop	{r4, r7, pc}
	...

08006d60 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::match_escape_char(std::string &word)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
	char true_char;
	switch (char_buffer)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b76      	cmp	r3, #118	; 0x76
 8006d70:	dc66      	bgt.n	8006e40 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0>
 8006d72:	2b5c      	cmp	r3, #92	; 0x5c
 8006d74:	da04      	bge.n	8006d80 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20>
 8006d76:	2b22      	cmp	r3, #34	; 0x22
 8006d78:	d047      	beq.n	8006e0a <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xaa>
 8006d7a:	2b27      	cmp	r3, #39	; 0x27
 8006d7c:	d03f      	beq.n	8006dfe <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e>
		break;
	case 'v':
		true_char = '\v';
		break;
	default:
		return;
 8006d7e:	e05f      	b.n	8006e40 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0>
 8006d80:	3b5c      	subs	r3, #92	; 0x5c
 8006d82:	2b1a      	cmp	r3, #26
 8006d84:	d85c      	bhi.n	8006e40 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0>
 8006d86:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006e05 	.word	0x08006e05
 8006d90:	08006e41 	.word	0x08006e41
 8006d94:	08006e41 	.word	0x08006e41
 8006d98:	08006e41 	.word	0x08006e41
 8006d9c:	08006e41 	.word	0x08006e41
 8006da0:	08006e41 	.word	0x08006e41
 8006da4:	08006e1d 	.word	0x08006e1d
 8006da8:	08006e41 	.word	0x08006e41
 8006dac:	08006e41 	.word	0x08006e41
 8006db0:	08006e41 	.word	0x08006e41
 8006db4:	08006e23 	.word	0x08006e23
 8006db8:	08006e41 	.word	0x08006e41
 8006dbc:	08006e41 	.word	0x08006e41
 8006dc0:	08006e41 	.word	0x08006e41
 8006dc4:	08006e41 	.word	0x08006e41
 8006dc8:	08006e41 	.word	0x08006e41
 8006dcc:	08006e41 	.word	0x08006e41
 8006dd0:	08006e41 	.word	0x08006e41
 8006dd4:	08006df9 	.word	0x08006df9
 8006dd8:	08006e41 	.word	0x08006e41
 8006ddc:	08006e41 	.word	0x08006e41
 8006de0:	08006e41 	.word	0x08006e41
 8006de4:	08006e11 	.word	0x08006e11
 8006de8:	08006e41 	.word	0x08006e41
 8006dec:	08006e17 	.word	0x08006e17
 8006df0:	08006e41 	.word	0x08006e41
 8006df4:	08006e29 	.word	0x08006e29
		true_char = '\n';
 8006df8:	230a      	movs	r3, #10
 8006dfa:	73fb      	strb	r3, [r7, #15]
		break;
 8006dfc:	e017      	b.n	8006e2e <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce>
		true_char = '\'';
 8006dfe:	2327      	movs	r3, #39	; 0x27
 8006e00:	73fb      	strb	r3, [r7, #15]
		break;
 8006e02:	e014      	b.n	8006e2e <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce>
		true_char = '\\';
 8006e04:	235c      	movs	r3, #92	; 0x5c
 8006e06:	73fb      	strb	r3, [r7, #15]
		break;
 8006e08:	e011      	b.n	8006e2e <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce>
		true_char = '\"';
 8006e0a:	2322      	movs	r3, #34	; 0x22
 8006e0c:	73fb      	strb	r3, [r7, #15]
		break;
 8006e0e:	e00e      	b.n	8006e2e <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce>
		true_char = '\r';
 8006e10:	230d      	movs	r3, #13
 8006e12:	73fb      	strb	r3, [r7, #15]
		break;
 8006e14:	e00b      	b.n	8006e2e <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce>
		true_char = '\t';
 8006e16:	2309      	movs	r3, #9
 8006e18:	73fb      	strb	r3, [r7, #15]
		break;
 8006e1a:	e008      	b.n	8006e2e <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce>
		true_char = '\b';
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	73fb      	strb	r3, [r7, #15]
		break;
 8006e20:	e005      	b.n	8006e2e <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce>
		true_char = '\f';
 8006e22:	230c      	movs	r3, #12
 8006e24:	73fb      	strb	r3, [r7, #15]
		break;
 8006e26:	e002      	b.n	8006e2e <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce>
		true_char = '\v';
 8006e28:	230b      	movs	r3, #11
 8006e2a:	73fb      	strb	r3, [r7, #15]
		break;
 8006e2c:	bf00      	nop
	}
	word.pop_back();
 8006e2e:	6838      	ldr	r0, [r7, #0]
 8006e30:	f010 f9e3 	bl	80171fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>
	word.push_back(true_char);
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6838      	ldr	r0, [r7, #0]
 8006e3a:	f010 f9bf 	bl	80171bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 8006e3e:	e000      	b.n	8006e42 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe2>
		return;
 8006e40:	bf00      	nop
}
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <_ZN5Lexer15add_string_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::add_string_char(std::string &word)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
	if (word.back() == '\\')
 8006e52:	6838      	ldr	r0, [r7, #0]
 8006e54:	f010 f9ad 	bl	80171b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b5c      	cmp	r3, #92	; 0x5c
 8006e5e:	bf0c      	ite	eq
 8006e60:	2301      	moveq	r3, #1
 8006e62:	2300      	movne	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d004      	beq.n	8006e74 <_ZN5Lexer15add_string_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>
	{
		match_escape_char(word);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff ff77 	bl	8006d60 <_ZN5Lexer17match_escape_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006e72:	e005      	b.n	8006e80 <_ZN5Lexer15add_string_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
	}
	else
	{
		word.push_back(char_buffer);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6838      	ldr	r0, [r7, #0]
 8006e7c:	f010 f99e 	bl	80171bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	}
	char_buffer = Code->receive_code_char();
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	4618      	mov	r0, r3
 8006e86:	f007 fc37 	bl	800e6f8 <_ZN6Source17receive_code_charEv>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	701a      	strb	r2, [r3, #0]
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Lexer::build_string_content(std::string &word)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b082      	sub	sp, #8
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
	char_buffer = Code->receive_code_char();
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f007 fc25 	bl	800e6f8 <_ZN6Source17receive_code_charEv>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	701a      	strb	r2, [r3, #0]
	while (!(char_buffer == '\"' && word.back() != '\\'))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b22      	cmp	r3, #34	; 0x22
 8006ebc:	d106      	bne.n	8006ecc <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32>
 8006ebe:	6838      	ldr	r0, [r7, #0]
 8006ec0:	f010 f977 	bl	80171b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b5c      	cmp	r3, #92	; 0x5c
 8006eca:	d101      	bne.n	8006ed0 <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e000      	b.n	8006ed2 <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x46>
	{
		add_string_char(word);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7ff ffb5 	bl	8006e48 <_ZN5Lexer15add_string_charERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
	while (!(char_buffer == '\"' && word.back() != '\\'))
 8006ede:	e7ea      	b.n	8006eb6 <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c>
	}
	char_buffer = Code->receive_code_char();
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f007 fc07 	bl	800e6f8 <_ZN6Source17receive_code_charEv>
 8006eea:	4603      	mov	r3, r0
 8006eec:	461a      	mov	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	701a      	strb	r2, [r3, #0]
}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <_ZN5Lexer12build_stringEv>:

bool Lexer::build_string()
{
 8006efa:	b590      	push	{r4, r7, lr}
 8006efc:	b097      	sub	sp, #92	; 0x5c
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
	if (char_buffer == '\"')
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b22      	cmp	r3, #34	; 0x22
 8006f08:	d139      	bne.n	8006f7e <_ZN5Lexer12build_stringEv+0x84>
	{
		std::string word;
 8006f0a:	f107 030c 	add.w	r3, r7, #12
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f010 f8c4 	bl	801709c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		build_string_content(word);
 8006f14:	f107 030c 	add.w	r3, r7, #12
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff ffbd 	bl	8006e9a <_ZN5Lexer20build_string_contentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		Product.set_type(TOKEN_STRING);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3304      	adds	r3, #4
 8006f24:	210f      	movs	r1, #15
 8006f26:	4618      	mov	r0, r3
 8006f28:	f008 fa38 	bl	800f39c <_ZN5Token8set_typeE10token_type>
		Product.set_value(std::string(word));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	1d1c      	adds	r4, r3, #4
 8006f30:	f107 020c 	add.w	r2, r7, #12
 8006f34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f38:	4611      	mov	r1, r2
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f010 f9fc 	bl	8017338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006f40:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f48:	4611      	mov	r1, r2
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 fba8 	bl	80076a0 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IS5_vvS5_vEEOT_>
 8006f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f54:	4619      	mov	r1, r3
 8006f56:	4620      	mov	r0, r4
 8006f58:	f008 fa01 	bl	800f35e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>
 8006f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7ff fc7d 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 8006f66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f010 f8b7 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		return true;
 8006f70:	2401      	movs	r4, #1
		std::string word;
 8006f72:	f107 030c 	add.w	r3, r7, #12
 8006f76:	4618      	mov	r0, r3
 8006f78:	f010 f8b1 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006f7c:	e000      	b.n	8006f80 <_ZN5Lexer12build_stringEv+0x86>
	}
	return false;
 8006f7e:	2400      	movs	r4, #0
 8006f80:	4623      	mov	r3, r4
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	375c      	adds	r7, #92	; 0x5c
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd90      	pop	{r4, r7, pc}

08006f8a <_ZN5Lexer17build_token_valueEv>:

bool Lexer::build_token_value()
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
	return match_single_char() || match_double_char() || build_keyword_or_id()
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff fc94 	bl	80068c0 <_ZN5Lexer17match_single_charEv>
 8006f98:	4603      	mov	r3, r0
			|| build_int_or_float() || build_0_int_or_float() || build_string();
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d11d      	bne.n	8006fda <_ZN5Lexer17build_token_valueEv+0x50>
	return match_single_char() || match_double_char() || build_keyword_or_id()
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff fcc8 	bl	8006934 <_ZN5Lexer17match_double_charEv>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d117      	bne.n	8006fda <_ZN5Lexer17build_token_valueEv+0x50>
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7ff fd94 	bl	8006ad8 <_ZN5Lexer19build_keyword_or_idEv>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d111      	bne.n	8006fda <_ZN5Lexer17build_token_valueEv+0x50>
			|| build_int_or_float() || build_0_int_or_float() || build_string();
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7ff fe32 	bl	8006c20 <_ZN5Lexer18build_int_or_floatEv>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10b      	bne.n	8006fda <_ZN5Lexer17build_token_valueEv+0x50>
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff fe5c 	bl	8006c80 <_ZN5Lexer20build_0_int_or_floatEv>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d105      	bne.n	8006fda <_ZN5Lexer17build_token_valueEv+0x50>
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7ff ff93 	bl	8006efa <_ZN5Lexer12build_stringEv>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <_ZN5Lexer17build_token_valueEv+0x54>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <_ZN5Lexer17build_token_valueEv+0x56>
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Move_ctor_base(const _Move_ctor_base&) = default;
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fbd2 	bl	80077a2 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4618      	mov	r0, r3
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Copy_assign_base(const _Copy_assign_base&) = default;
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	4611      	mov	r1, r2
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff ffe5 	bl	8006fe8 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Move_assign_base(const _Move_assign_base&) = default;
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	4611      	mov	r1, r2
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff ffe5 	bl	8007008 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Variant_base(const _Variant_base&) = default;
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	4611      	mov	r1, r2
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff ffe5 	bl	8007028 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS6_>:
      variant(const variant& __rhs) = default;
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	4611      	mov	r1, r2
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff ffe5 	bl	8007048 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <_ZN5TokenC1ERKS_>:
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781a      	ldrb	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	1d1a      	adds	r2, r3, #4
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	3304      	adds	r3, #4
 80070a2:	4619      	mov	r1, r3
 80070a4:	4610      	mov	r0, r2
 80070a6:	f7ff ffdf 	bl	8007068 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS6_>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	6a1a      	ldr	r2, [r3, #32]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	621a      	str	r2, [r3, #32]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	625a      	str	r2, [r3, #36]	; 0x24
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <_ZN5Lexer11build_tokenEv>:

Token Lexer::build_token()
{
 80070c4:	b590      	push	{r4, r7, lr}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
	get_working_char();
 80070ce:	6838      	ldr	r0, [r7, #0]
 80070d0:	f000 f88c 	bl	80071ec <_ZN5Lexer16get_working_charEv>
	Product.set_line(Code->get_line());
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	1d1c      	adds	r4, r3, #4
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	4618      	mov	r0, r3
 80070de:	f007 fad5 	bl	800e68c <_ZN6Source8get_lineEv>
 80070e2:	4603      	mov	r3, r0
 80070e4:	4619      	mov	r1, r3
 80070e6:	4620      	mov	r0, r4
 80070e8:	f008 f973 	bl	800f3d2 <_ZN5Token8set_lineEi>
	Product.set_position(Code->get_position());
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	1d1c      	adds	r4, r3, #4
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	4618      	mov	r0, r3
 80070f6:	f007 fad5 	bl	800e6a4 <_ZN6Source12get_positionEv>
 80070fa:	4603      	mov	r3, r0
 80070fc:	4619      	mov	r1, r3
 80070fe:	4620      	mov	r0, r4
 8007100:	f008 f981 	bl	800f406 <_ZN5Token12set_positionEi>

	if (build_token_value())
 8007104:	6838      	ldr	r0, [r7, #0]
 8007106:	f7ff ff40 	bl	8006f8a <_ZN5Lexer17build_token_valueEv>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d006      	beq.n	800711e <_ZN5Lexer11build_tokenEv+0x5a>
	{
		return Product;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	3304      	adds	r3, #4
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff ffb6 	bl	8007088 <_ZN5TokenC1ERKS_>
 800711c:	e005      	b.n	800712a <_ZN5Lexer11build_tokenEv+0x66>
	}

	return Product;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	3304      	adds	r3, #4
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff ffaf 	bl	8007088 <_ZN5TokenC1ERKS_>
}
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	bd90      	pop	{r4, r7, pc}

08007132 <_ZN5Lexer12skip_commentEv>:

void Lexer::skip_comment()
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
	while (char_buffer == '#')
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	2b23      	cmp	r3, #35	; 0x23
 8007140:	d117      	bne.n	8007172 <_ZN5Lexer12skip_commentEv+0x40>
	{
		while (char_buffer != '\n')
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b0a      	cmp	r3, #10
 8007148:	d009      	beq.n	800715e <_ZN5Lexer12skip_commentEv+0x2c>
		{
			char_buffer = Code->receive_code_char();
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714e:	4618      	mov	r0, r3
 8007150:	f007 fad2 	bl	800e6f8 <_ZN6Source17receive_code_charEv>
 8007154:	4603      	mov	r3, r0
 8007156:	461a      	mov	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	701a      	strb	r2, [r3, #0]
		while (char_buffer != '\n')
 800715c:	e7f1      	b.n	8007142 <_ZN5Lexer12skip_commentEv+0x10>
		}
		char_buffer = Code->receive_code_char();
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	4618      	mov	r0, r3
 8007164:	f007 fac8 	bl	800e6f8 <_ZN6Source17receive_code_charEv>
 8007168:	4603      	mov	r3, r0
 800716a:	461a      	mov	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	701a      	strb	r2, [r3, #0]
	while (char_buffer == '#')
 8007170:	e7e3      	b.n	800713a <_ZN5Lexer12skip_commentEv+0x8>
	}
}
 8007172:	bf00      	nop
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <_ZN5Lexer15skip_whitespaceEv>:

void Lexer::skip_whitespace()
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
	while (isspace(char_buffer) && char_buffer != '\n')
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	f010 f930 	bl	80173ec <isspace>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00d      	beq.n	80071ae <_ZN5Lexer15skip_whitespaceEv+0x34>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b0a      	cmp	r3, #10
 8007198:	d009      	beq.n	80071ae <_ZN5Lexer15skip_whitespaceEv+0x34>
	{
		char_buffer = Code->receive_code_char();
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719e:	4618      	mov	r0, r3
 80071a0:	f007 faaa 	bl	800e6f8 <_ZN6Source17receive_code_charEv>
 80071a4:	4603      	mov	r3, r0
 80071a6:	461a      	mov	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	701a      	strb	r2, [r3, #0]
	while (isspace(char_buffer) && char_buffer != '\n')
 80071ac:	e7e9      	b.n	8007182 <_ZN5Lexer15skip_whitespaceEv+0x8>
	}
}
 80071ae:	bf00      	nop
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <_ZN5Lexer15is_invalid_charEv>:

bool Lexer::is_invalid_char()
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
	return (isspace(char_buffer) && char_buffer != '\n') || char_buffer == '#';
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f010 f912 	bl	80173ec <isspace>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <_ZN5Lexer15is_invalid_charEv+0x20>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2b0a      	cmp	r3, #10
 80071d4:	d103      	bne.n	80071de <_ZN5Lexer15is_invalid_charEv+0x28>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b23      	cmp	r3, #35	; 0x23
 80071dc:	d101      	bne.n	80071e2 <_ZN5Lexer15is_invalid_charEv+0x2c>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <_ZN5Lexer15is_invalid_charEv+0x2e>
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <_ZN5Lexer16get_working_charEv>:

void Lexer::get_working_char()
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	while (is_invalid_char())
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff ffde 	bl	80071b6 <_ZN5Lexer15is_invalid_charEv>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d006      	beq.n	800720e <_ZN5Lexer16get_working_charEv+0x22>
	{
		skip_comment();
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff ff96 	bl	8007132 <_ZN5Lexer12skip_commentEv>
		skip_whitespace();
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff ffb7 	bl	800717a <_ZN5Lexer15skip_whitespaceEv>
	while (is_invalid_char())
 800720c:	e7f2      	b.n	80071f4 <_ZN5Lexer16get_working_charEv+0x8>
	}
}
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8007216:	b580      	push	{r7, lr}
 8007218:	b082      	sub	sp, #8
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	f010 f8ab 	bl	8017378 <__errno>
 8007222:	4603      	mov	r3, r0
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	f010 f8a5 	bl	8017378 <__errno>
 800722e:	4603      	mov	r3, r0
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 800723e:	b590      	push	{r4, r7, lr}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	f010 f897 	bl	8017378 <__errno>
 800724a:	4603      	mov	r3, r0
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	bf0c      	ite	eq
 8007252:	2301      	moveq	r3, #1
 8007254:	2300      	movne	r3, #0
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681c      	ldr	r4, [r3, #0]
 8007260:	f010 f88a 	bl	8017378 <__errno>
 8007264:	4603      	mov	r3, r0
 8007266:	601c      	str	r4, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4618      	mov	r0, r3
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	bd90      	pop	{r4, r7, pc}

08007272 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 800727c:	2300      	movs	r3, #0
	  }
 800727e:	4618      	mov	r0, r3
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 800728a:	b590      	push	{r4, r7, lr}
 800728c:	b08b      	sub	sp, #44	; 0x2c
 800728e:	af00      	add	r7, sp, #0
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	60b9      	str	r1, [r7, #8]
 8007294:	607a      	str	r2, [r7, #4]
 8007296:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8007298:	f107 0314 	add.w	r3, r7, #20
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff ffba 	bl	8007216 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f107 0118 	add.w	r1, r7, #24
 80072a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
 80072ae:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d102      	bne.n	80072be <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 80072b8:	68b8      	ldr	r0, [r7, #8]
 80072ba:	f00f fe03 	bl	8016ec4 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 80072be:	f010 f85b 	bl	8017378 <__errno>
 80072c2:	4603      	mov	r3, r0
 80072c4:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 80072c6:	2b22      	cmp	r3, #34	; 0x22
 80072c8:	d006      	beq.n	80072d8 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 80072ca:	4621      	mov	r1, r4
 80072cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072ce:	f7ff ffd0 	bl	8007272 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 80072d8:	2301      	movs	r3, #1
 80072da:	e000      	b.n	80072de <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 80072dc:	2300      	movs	r3, #0
      else if (errno == ERANGE
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 80072e2:	68b8      	ldr	r0, [r7, #8]
 80072e4:	f00f fdf4 	bl	8016ed0 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	623b      	str	r3, [r7, #32]

      if (__idx)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d005      	beq.n	80072fe <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	601a      	str	r2, [r3, #0]

      return __ret;
 80072fe:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8007300:	f107 0314 	add.w	r3, r7, #20
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff ff9a 	bl	800723e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 800730a:	4623      	mov	r3, r4
    }
 800730c:	4618      	mov	r0, r3
 800730e:	372c      	adds	r7, #44	; 0x2c
 8007310:	46bd      	mov	sp, r7
 8007312:	bd90      	pop	{r4, r7, pc}

08007314 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	f010 f82c 	bl	8017378 <__errno>
 8007320:	4603      	mov	r3, r0
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	f010 f826 	bl	8017378 <__errno>
 800732c:	4603      	mov	r3, r0
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 800733c:	b590      	push	{r4, r7, lr}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	f010 f818 	bl	8017378 <__errno>
 8007348:	4603      	mov	r3, r0
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	bf0c      	ite	eq
 8007350:	2301      	moveq	r3, #1
 8007352:	2300      	movne	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681c      	ldr	r4, [r3, #0]
 800735e:	f010 f80b 	bl	8017378 <__errno>
 8007362:	4603      	mov	r3, r0
 8007364:	601c      	str	r4, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	bd90      	pop	{r4, r7, pc}

08007370 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE>:
	  _S_chk(_TRet, std::false_type) { return false; }
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	ed87 0a01 	vstr	s0, [r7, #4]
 800737a:	7038      	strb	r0, [r7, #0]
 800737c:	2300      	movs	r3, #0
 800737e:	4618      	mov	r0, r3
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 800738a:	b590      	push	{r4, r7, lr}
 800738c:	b08b      	sub	sp, #44	; 0x2c
 800738e:	af00      	add	r7, sp, #0
 8007390:	60f8      	str	r0, [r7, #12]
 8007392:	60b9      	str	r1, [r7, #8]
 8007394:	607a      	str	r2, [r7, #4]
 8007396:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8007398:	f107 0314 	add.w	r3, r7, #20
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff ffb9 	bl	8007314 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f107 0218 	add.w	r2, r7, #24
 80073a8:	4611      	mov	r1, r2
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	4798      	blx	r3
 80073ae:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
      if (__endptr == __str)
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d102      	bne.n	80073c0 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x36>
	std::__throw_invalid_argument(__name);
 80073ba:	68b8      	ldr	r0, [r7, #8]
 80073bc:	f00f fd82 	bl	8016ec4 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 80073c0:	f00f ffda 	bl	8017378 <__errno>
 80073c4:	4603      	mov	r3, r0
 80073c6:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 80073c8:	2b22      	cmp	r3, #34	; 0x22
 80073ca:	d007      	beq.n	80073dc <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 80073cc:	4620      	mov	r0, r4
 80073ce:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80073d2:	f7ff ffcd 	bl	8007370 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x56>
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x58>
 80073e0:	2300      	movs	r3, #0
      else if (errno == ERANGE
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x62>
	std::__throw_out_of_range(__name);
 80073e6:	68b8      	ldr	r0, [r7, #8]
 80073e8:	f00f fd72 	bl	8016ed0 <_ZSt20__throw_out_of_rangePKc>
	__ret = __tmp;
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	623b      	str	r3, [r7, #32]
      if (__idx)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x78>
	*__idx = __endptr - __str;
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	461a      	mov	r2, r3
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	601a      	str	r2, [r3, #0]
      return __ret;
 8007402:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8007404:	f107 0314 	add.w	r3, r7, #20
 8007408:	4618      	mov	r0, r3
 800740a:	f7ff ff97 	bl	800733c <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 800740e:	ee07 4a90 	vmov	s15, r4
    }
 8007412:	eeb0 0a67 	vmov.f32	s0, s15
 8007416:	372c      	adds	r7, #44	; 0x2c
 8007418:	46bd      	mov	sp, r7
 800741a:	bd90      	pop	{r4, r7, pc}

0800741c <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	7039      	strb	r1, [r7, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4611      	mov	r1, r2
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f9f1 	bl	8007812 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	7039      	strb	r1, [r7, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4611      	mov	r1, r2
 8007448:	4618      	mov	r0, r3
 800744a:	f7ff ffe7 	bl	800741c <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4618      	mov	r0, r3
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	7039      	strb	r1, [r7, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4611      	mov	r1, r2
 8007466:	4618      	mov	r0, r3
 8007468:	f7ff ffe7 	bl	800743a <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007476:	b580      	push	{r7, lr}
 8007478:	b082      	sub	sp, #8
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	7039      	strb	r1, [r7, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff ffe7 	bl	8007458 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4618      	mov	r0, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	7039      	strb	r1, [r7, #0]
	: _Base(__i, std::forward<_Args>(__args)...)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4611      	mov	r1, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff ffe7 	bl	8007476 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>:
      _Variant_base()
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
      : _Variant_base(in_place_index<0>) { }
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7ff ffe9 	bl	8007494 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>:
      ~_Variant_storage()
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
      { _M_reset(); }
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f9ae 	bl	8007836 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <_ZNKSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEE4findERS4_>:
       *  iterator pointing to the sought after %pair. If unsuccessful it
       *  returns the past-the-end ( @c end() ) iterator.
       */

      const_iterator
      find(const key_type& __x) const
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 f9ad 	bl	8007852 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_>
 80074f8:	4603      	mov	r3, r0
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <_ZNKSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8007502:	b580      	push	{r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4618      	mov	r0, r3
 800750e:	f000 f9dc 	bl	80078ca <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8007512:	4603      	mov	r3, r0
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEES6_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	429a      	cmp	r2, r3
 8007530:	bf14      	ite	ne
 8007532:	2301      	movne	r3, #1
 8007534:	2300      	moveq	r3, #0
 8007536:	b2db      	uxtb	r3, r3
 8007538:	4618      	mov	r0, r3
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4618      	mov	r0, r3
 8007552:	f7fc f990 	bl	8003876 <_ZNKSt13_Rb_tree_nodeISt4pairIKc10token_typeEE9_M_valptrEv>
 8007556:	4603      	mov	r3, r0
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <_ZNKSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEE4findERS4_>:
      find(const key_type& __x) const
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	4618      	mov	r0, r3
 8007570:	f000 f9bc 	bl	80078ec <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_>
 8007574:	4603      	mov	r3, r0
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <_ZNKSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4618      	mov	r0, r3
 800758a:	f000 f9eb 	bl	8007964 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 800758e:	4603      	mov	r3, r0
 8007590:	4618      	mov	r0, r3
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEES6_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	bf14      	ite	ne
 80075ae:	2301      	movne	r3, #1
 80075b0:	2300      	moveq	r3, #0
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fc fa2d 	bl	8003a2c <_ZNKSt13_Rb_tree_nodeISt4pairIKc12double_tokenEE9_M_valptrEv>
 80075d2:	4603      	mov	r3, r0
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>:
      find(const key_type& __x) const
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 f9cb 	bl	8007986 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>
 80075f0:	4603      	mov	r3, r0
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4618      	mov	r0, r3
 8007606:	f000 f9fa 	bl	80079fe <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 800760a:	4603      	mov	r3, r0
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	bf14      	ite	ne
 800762a:	2301      	movne	r3, #1
 800762c:	2300      	moveq	r3, #0
 800762e:	b2db      	uxtb	r3, r3
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4618      	mov	r0, r3
 800764a:	f7fc f982 	bl	8003952 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEE9_M_valptrEv>
 800764e:	4603      	mov	r3, r0
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS5_ES5_vEESt16in_place_index_tIXT_EEDpOT0_>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
 8007658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	7239      	strb	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
 8007664:	68fc      	ldr	r4, [r7, #12]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f80f 	bl	800768a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800766c:	4603      	mov	r3, r0
 800766e:	461a      	mov	r2, r3
 8007670:	4631      	mov	r1, r6
 8007672:	4620      	mov	r0, r4
 8007674:	f000 fa18 	bl	8007aa8 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 8007678:	4629      	mov	r1, r5
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 fa29 	bl	8007ad2 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>
	{ }
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800768a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IS5_vvS5_vEEOT_>:
	variant(_Tp&& __t)
 80076a0:	b590      	push	{r4, r7, lr}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
		  std::forward<_Tp>(__t))
 80076aa:	6838      	ldr	r0, [r7, #0]
 80076ac:	f7ff ffed 	bl	800768a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80076b0:	4603      	mov	r3, r0
 80076b2:	461a      	mov	r2, r3
 80076b4:	4621      	mov	r1, r4
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7ff ffce 	bl	8007658 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS5_ES5_vEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd90      	pop	{r4, r7, pc}

080076c6 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEivEESt16in_place_index_tIXT_EEDpOT0_>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
 80076c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076c8:	b085      	sub	sp, #20
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	7239      	strb	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
 80076d2:	68fc      	ldr	r4, [r7, #12]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f80f 	bl	80076f8 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80076da:	4603      	mov	r3, r0
 80076dc:	461a      	mov	r2, r3
 80076de:	4631      	mov	r1, r6
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 fa46 	bl	8007b72 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 80076e6:	4629      	mov	r1, r5
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 f9f2 	bl	8007ad2 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>
	{ }
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076f8 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IivvivEEOT_>:
	variant(_Tp&& __t)
 800770e:	b590      	push	{r4, r7, lr}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]
		  std::forward<_Tp>(__t))
 8007718:	6838      	ldr	r0, [r7, #0]
 800771a:	f7ff ffed 	bl	80076f8 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800771e:	4603      	mov	r3, r0
 8007720:	461a      	mov	r2, r3
 8007722:	4621      	mov	r1, r4
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff ffce 	bl	80076c6 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEivEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4618      	mov	r0, r3
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	bd90      	pop	{r4, r7, pc}

08007734 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEfvEESt16in_place_index_tIXT_EEDpOT0_>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
 8007734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	7239      	strb	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
 8007740:	68fc      	ldr	r4, [r7, #12]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f80f 	bl	8007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8007748:	4603      	mov	r3, r0
 800774a:	461a      	mov	r2, r3
 800774c:	4631      	mov	r1, r6
 800774e:	4620      	mov	r0, r4
 8007750:	f000 fa68 	bl	8007c24 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 8007754:	4629      	mov	r1, r5
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 f9bb 	bl	8007ad2 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>
	{ }
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4618      	mov	r0, r3
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IfvvfvEEOT_>:
	variant(_Tp&& __t)
 800777c:	b590      	push	{r4, r7, lr}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
		  std::forward<_Tp>(__t))
 8007786:	6838      	ldr	r0, [r7, #0]
 8007788:	f7ff ffed 	bl	8007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800778c:	4603      	mov	r3, r0
 800778e:	461a      	mov	r2, r3
 8007790:	4621      	mov	r1, r4
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff ffce 	bl	8007734 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEfvEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd90      	pop	{r4, r7, pc}

080077a2 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS8_>:
      _Copy_ctor_base(const _Copy_ctor_base& __rhs)
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
      {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fa5a 	bl	8007c68 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>
	__variant_construct<_Types...>(*this, __rhs);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fd08 	bl	80081cc <_ZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_>
      }
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	7039      	strb	r1, [r7, #0]
	  ::new ((void*)std::addressof(_M_storage))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 fd17 	bl	8008206 <_ZSt9addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 80077d8:	4603      	mov	r3, r0
 80077da:	4619      	mov	r1, r3
 80077dc:	2018      	movs	r0, #24
 80077de:	f7f9 fbfd 	bl	8000fdc <_ZnwjPv>
 80077e2:	4603      	mov	r3, r0
 80077e4:	4618      	mov	r0, r3
 80077e6:	f00f fc59 	bl	801709c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	}
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	7039      	strb	r1, [r7, #0]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f7ff ffdf 	bl	80077c6 <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 8007812:	b580      	push	{r7, lr}
 8007814:	b082      	sub	sp, #8
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	7039      	strb	r1, [r7, #0]
	_M_index(_Np)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4611      	mov	r1, r2
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff ffe7 	bl	80077f4 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJEEESt16in_place_index_tILj0EEDpOT_>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	761a      	strb	r2, [r3, #24]
	{ }
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>:
      void _M_reset()
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
	_M_reset_impl();
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 ff7c 	bl	800873c <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEv>
	_M_index = variant_npos;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	22ff      	movs	r2, #255	; 0xff
 8007848:	761a      	strb	r2, [r3, #24]
      }
 800784a:	bf00      	nop
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007852:	b590      	push	{r4, r7, lr}
 8007854:	b085      	sub	sp, #20
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 ff7f 	bl	8008760 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8007862:	4604      	mov	r4, r0
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 ff87 	bl	8008778 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 800786a:	4602      	mov	r2, r0
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	4621      	mov	r1, r4
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 ff8d 	bl	8008790 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>
 8007876:	4603      	mov	r3, r0
 8007878:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f825 	bl	80078ca <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8007880:	4603      	mov	r3, r0
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	f107 020c 	add.w	r2, r7, #12
 8007888:	f107 0308 	add.w	r3, r7, #8
 800788c:	4611      	mov	r1, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f000 ffaf 	bl	80087f2 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEES6_>
 8007894:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10d      	bne.n	80078b6 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 800789a:	687c      	ldr	r4, [r7, #4]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fb f9df 	bl	8002c62 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80078a4:	4603      	mov	r3, r0
 80078a6:	461a      	mov	r2, r3
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	4620      	mov	r0, r4
 80078ac:	f7fb f9e5 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d004      	beq.n	80078c0 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f807 	bl	80078ca <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 80078bc:	4603      	mov	r3, r0
 80078be:	e000      	b.n	80078c2 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x70>
 80078c0:	68bb      	ldr	r3, [r7, #8]
    }
 80078c2:	4618      	mov	r0, r3
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd90      	pop	{r4, r7, pc}

080078ca <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	1d1a      	adds	r2, r3, #4
 80078d6:	f107 030c 	add.w	r3, r7, #12
 80078da:	4611      	mov	r1, r2
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 ff9c 	bl	800881a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1EPKSt18_Rb_tree_node_base>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80078ec:	b590      	push	{r4, r7, lr}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 ff9e 	bl	8008838 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 80078fc:	4604      	mov	r4, r0
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 ffa6 	bl	8008850 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8007904:	4602      	mov	r2, r0
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	4621      	mov	r1, r4
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 ffac 	bl	8008868 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>
 8007910:	4603      	mov	r3, r0
 8007912:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f825 	bl	8007964 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 800791a:	4603      	mov	r3, r0
 800791c:	60fb      	str	r3, [r7, #12]
 800791e:	f107 020c 	add.w	r2, r7, #12
 8007922:	f107 0308 	add.w	r3, r7, #8
 8007926:	4611      	mov	r1, r2
 8007928:	4618      	mov	r0, r3
 800792a:	f000 ffce 	bl	80088ca <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEES6_>
 800792e:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10d      	bne.n	8007950 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 8007934:	687c      	ldr	r4, [r7, #4]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	4618      	mov	r0, r3
 800793a:	f7fb fc71 	bl	8003220 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800793e:	4603      	mov	r3, r0
 8007940:	461a      	mov	r2, r3
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	4620      	mov	r0, r4
 8007946:	f7fb f998 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f807 	bl	8007964 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 8007956:	4603      	mov	r3, r0
 8007958:	e000      	b.n	800795c <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE4findERS1_+0x70>
 800795a:	68bb      	ldr	r3, [r7, #8]
    }
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	bd90      	pop	{r4, r7, pc}

08007964 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	1d1a      	adds	r2, r3, #4
 8007970:	f107 030c 	add.w	r3, r7, #12
 8007974:	4611      	mov	r1, r2
 8007976:	4618      	mov	r0, r3
 8007978:	f000 ffbb 	bl	80088f2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1EPKSt18_Rb_tree_node_base>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007986:	b590      	push	{r4, r7, lr}
 8007988:	b085      	sub	sp, #20
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 ffbd 	bl	8008910 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8007996:	4604      	mov	r4, r0
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 ffc5 	bl	8008928 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 800799e:	4602      	mov	r2, r0
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	4621      	mov	r1, r4
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 ffcb 	bl	8008940 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_>
 80079aa:	4603      	mov	r3, r0
 80079ac:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f825 	bl	80079fe <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 80079b4:	4603      	mov	r3, r0
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	f107 020c 	add.w	r2, r7, #12
 80079bc:	f107 0308 	add.w	r3, r7, #8
 80079c0:	4611      	mov	r1, r2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 ffed 	bl	80089a2 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>
 80079c8:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10d      	bne.n	80079ea <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 80079ce:	687c      	ldr	r4, [r7, #4]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fb fada 	bl	8002f8c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80079d8:	4603      	mov	r3, r0
 80079da:	461a      	mov	r2, r3
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	4620      	mov	r0, r4
 80079e0:	f7fb fae0 	bl	8002fa4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d004      	beq.n	80079f4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f807 	bl	80079fe <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 80079f0:	4603      	mov	r3, r0
 80079f2:	e000      	b.n	80079f6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x70>
 80079f4:	68bb      	ldr	r3, [r7, #8]
    }
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd90      	pop	{r4, r7, pc}

080079fe <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	1d1a      	adds	r2, r3, #4
 8007a0a:	f107 030c 	add.w	r3, r7, #12
 8007a0e:	4611      	mov	r1, r2
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 ffda 	bl	80089ca <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPKSt18_Rb_tree_node_base>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007a20:	b590      	push	{r4, r7, lr}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	7239      	strb	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	4621      	mov	r1, r4
 8007a32:	4618      	mov	r0, r3
 8007a34:	f001 f80a 	bl	8008a4c <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd90      	pop	{r4, r7, pc}

08007a42 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007a42:	b590      	push	{r4, r7, lr}
 8007a44:	b085      	sub	sp, #20
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	7239      	strb	r1, [r7, #8]
 8007a4c:	607a      	str	r2, [r7, #4]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	4621      	mov	r1, r4
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7ff ffe3 	bl	8007a20 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd90      	pop	{r4, r7, pc}

08007a64 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007a64:	b590      	push	{r4, r7, lr}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	7239      	strb	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	4621      	mov	r1, r4
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff ffe3 	bl	8007a42 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd90      	pop	{r4, r7, pc}

08007a86 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007a86:	b590      	push	{r4, r7, lr}
 8007a88:	b085      	sub	sp, #20
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	7239      	strb	r1, [r7, #8]
 8007a90:	607a      	str	r2, [r7, #4]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	4621      	mov	r1, r4
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff ffe3 	bl	8007a64 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd90      	pop	{r4, r7, pc}

08007aa8 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8007aa8:	b5b0      	push	{r4, r5, r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	7239      	strb	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
	: _Base(__i, std::forward<_Args>(__args)...)
 8007ab4:	68fc      	ldr	r4, [r7, #12]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7ff fde7 	bl	800768a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007abc:	4603      	mov	r3, r0
 8007abe:	461a      	mov	r2, r3
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f7ff ffdf 	bl	8007a86 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bdb0      	pop	{r4, r5, r7, pc}

08007ad2 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>:
    _Enable_default_constructor&
    operator=(_Enable_default_constructor&&) noexcept = default;

    // Can be used in other ctors.
    constexpr explicit
    _Enable_default_constructor(_Enable_default_constructor_tag) { }
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	7039      	strb	r1, [r7, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007aea:	b590      	push	{r4, r7, lr}
 8007aec:	b085      	sub	sp, #20
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	7239      	strb	r1, [r7, #8]
 8007af4:	607a      	str	r2, [r7, #4]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	4621      	mov	r1, r4
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fff9 	bl	8008af4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4618      	mov	r0, r3
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd90      	pop	{r4, r7, pc}

08007b0c <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007b0c:	b590      	push	{r4, r7, lr}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	7239      	strb	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7ff ffe3 	bl	8007aea <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd90      	pop	{r4, r7, pc}

08007b2e <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007b2e:	b590      	push	{r4, r7, lr}
 8007b30:	b085      	sub	sp, #20
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	7239      	strb	r1, [r7, #8]
 8007b38:	607a      	str	r2, [r7, #4]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff ffe3 	bl	8007b0c <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd90      	pop	{r4, r7, pc}

08007b50 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007b50:	b590      	push	{r4, r7, lr}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	7239      	strb	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	4621      	mov	r1, r4
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7ff ffe3 	bl	8007b2e <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd90      	pop	{r4, r7, pc}

08007b72 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8007b72:	b5b0      	push	{r4, r5, r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	7239      	strb	r1, [r7, #8]
 8007b7c:	607a      	str	r2, [r7, #4]
	: _Base(__i, std::forward<_Args>(__args)...)
 8007b7e:	68fc      	ldr	r4, [r7, #12]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7ff fdb9 	bl	80076f8 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8007b86:	4603      	mov	r3, r0
 8007b88:	461a      	mov	r2, r3
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f7ff ffdf 	bl	8007b50 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bdb0      	pop	{r4, r5, r7, pc}

08007b9c <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007b9c:	b590      	push	{r4, r7, lr}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	7239      	strb	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	4621      	mov	r1, r4
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 f809 	bl	8008bc6 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd90      	pop	{r4, r7, pc}

08007bbe <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007bbe:	b590      	push	{r4, r7, lr}
 8007bc0:	b085      	sub	sp, #20
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	7239      	strb	r1, [r7, #8]
 8007bc8:	607a      	str	r2, [r7, #4]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	4621      	mov	r1, r4
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff ffe3 	bl	8007b9c <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd90      	pop	{r4, r7, pc}

08007be0 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007be0:	b590      	push	{r4, r7, lr}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	7239      	strb	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff ffe3 	bl	8007bbe <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd90      	pop	{r4, r7, pc}

08007c02 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8007c02:	b590      	push	{r4, r7, lr}
 8007c04:	b085      	sub	sp, #20
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	60f8      	str	r0, [r7, #12]
 8007c0a:	7239      	strb	r1, [r7, #8]
 8007c0c:	607a      	str	r2, [r7, #4]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	4621      	mov	r1, r4
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7ff ffe3 	bl	8007be0 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd90      	pop	{r4, r7, pc}

08007c24 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8007c24:	b5b0      	push	{r4, r5, r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	7239      	strb	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
	: _Base(__i, std::forward<_Args>(__args)...)
 8007c30:	68fc      	ldr	r4, [r7, #12]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7ff fd97 	bl	8007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f7ff ffdf 	bl	8007c02 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bdb0      	pop	{r4, r5, r7, pc}

08007c4e <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>:
      constexpr _Variadic_union() : _M_rest() { }
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 ffcc 	bl	8008bf6 <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1Ev>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>:
      constexpr _Variant_storage() : _M_index(variant_npos) { }
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff ffeb 	bl	8007c4e <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1Ev>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	22ff      	movs	r2, #255	; 0xff
 8007c7c:	761a      	strb	r2, [r3, #24]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERKNSt8__detail9__variant15_Copy_ctor_baseILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
	    return static_cast<const variant<_Types...>&>(__rhs);
 8007c90:	687b      	ldr	r3, [r7, #4]
    }
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	7138      	strb	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8007ca8:	6838      	ldr	r0, [r7, #0]
 8007caa:	f000 ffd2 	bl	8008c52 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 ffd9 	bl	8008c68 <_ZNKRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <_ZNSt8__detail9__variant5__getILj0ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8007cc0:	b590      	push	{r4, r7, lr}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 ffb7 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007cce:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f7ff ffe3 	bl	8007c9e <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8007cd8:	4603      	mov	r3, r0
    }
 8007cda:	4618      	mov	r0, r3
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd90      	pop	{r4, r7, pc}

08007ce2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESR_EEDcSH_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 ffa6 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7ff ffe4 	bl	8007cc0 <_ZNSt8__detail9__variant5__getILj0ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8007cf8:	4603      	mov	r3, r0
	}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESN_SR_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8007d02:	b5b0      	push	{r4, r5, r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 ff8a 	bl	8008c26 <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007d12:	4604      	mov	r4, r0
 8007d14:	6838      	ldr	r0, [r7, #0]
 8007d16:	f000 ff91 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff ffe0 	bl	8007ce2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESR_EEDcSH_>
 8007d22:	4603      	mov	r3, r0
 8007d24:	4619      	mov	r1, r3
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 ffab 	bl	8008c82 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKS8_EENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>
		std::forward<_Variants>(__vars))...);
 8007d2c:	462b      	mov	r3, r5
      }
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bdb0      	pop	{r4, r5, r7, pc}

08007d36 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESN_SR_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007d36:	b5b0      	push	{r4, r5, r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 ff70 	bl	8008c26 <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007d46:	4604      	mov	r4, r0
 8007d48:	6838      	ldr	r0, [r7, #0]
 8007d4a:	f000 ff77 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	4619      	mov	r1, r3
 8007d52:	4620      	mov	r0, r4
 8007d54:	f7ff ffd5 	bl	8007d02 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007d58:	462b      	mov	r3, r5
      }
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bdb0      	pop	{r4, r5, r7, pc}

08007d62 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESN_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007d62:	b5b0      	push	{r4, r5, r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 ff5a 	bl	8008c26 <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007d72:	4604      	mov	r4, r0
 8007d74:	6838      	ldr	r0, [r7, #0]
 8007d76:	f000 ff61 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f7ff ffd9 	bl	8007d36 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007d84:	462b      	mov	r3, r5
      }
 8007d86:	4618      	mov	r0, r3
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bdb0      	pop	{r4, r5, r7, pc}

08007d8e <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	7138      	strb	r0, [r7, #4]
 8007d96:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8007d98:	6838      	ldr	r0, [r7, #0]
 8007d9a:	f000 ff89 	bl	8008cb0 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 ff90 	bl	8008cc6 <_ZNKRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>
 8007da6:	4603      	mov	r3, r0
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007db0:	b590      	push	{r4, r7, lr}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	7138      	strb	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007dba:	6838      	ldr	r0, [r7, #0]
 8007dbc:	f000 ff49 	bl	8008c52 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8007dc0:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f7ff ffe2 	bl	8007d8e <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8007dca:	4603      	mov	r3, r0
    }
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd90      	pop	{r4, r7, pc}

08007dd4 <_ZNSt8__detail9__variant5__getILj1ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8007dd4:	b590      	push	{r4, r7, lr}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 ff2d 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007de2:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8007de4:	4619      	mov	r1, r3
 8007de6:	4620      	mov	r0, r4
 8007de8:	f7ff ffe2 	bl	8007db0 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007dec:	4603      	mov	r3, r0
    }
 8007dee:	4618      	mov	r0, r3
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd90      	pop	{r4, r7, pc}

08007df6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESR_EEDcSH_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 ff1c 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007e04:	4603      	mov	r3, r0
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7ff ffe4 	bl	8007dd4 <_ZNSt8__detail9__variant5__getILj1ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8007e0c:	4603      	mov	r3, r0
	}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESN_SR_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8007e16:	b5b0      	push	{r4, r5, r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 ff00 	bl	8008c26 <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007e26:	4604      	mov	r4, r0
 8007e28:	6838      	ldr	r0, [r7, #0]
 8007e2a:	f000 ff07 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7ff ffe0 	bl	8007df6 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESR_EEDcSH_>
 8007e36:	4603      	mov	r3, r0
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 ff4e 	bl	8008cdc <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKiEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>
		std::forward<_Variants>(__vars))...);
 8007e40:	462b      	mov	r3, r5
      }
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bdb0      	pop	{r4, r5, r7, pc}

08007e4a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESN_SR_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007e4a:	b5b0      	push	{r4, r5, r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fee6 	bl	8008c26 <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	6838      	ldr	r0, [r7, #0]
 8007e5e:	f000 feed 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007e62:	4603      	mov	r3, r0
 8007e64:	4619      	mov	r1, r3
 8007e66:	4620      	mov	r0, r4
 8007e68:	f7ff ffd5 	bl	8007e16 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007e6c:	462b      	mov	r3, r5
      }
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bdb0      	pop	{r4, r5, r7, pc}

08007e76 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESN_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007e76:	b5b0      	push	{r4, r5, r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fed0 	bl	8008c26 <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007e86:	4604      	mov	r4, r0
 8007e88:	6838      	ldr	r0, [r7, #0]
 8007e8a:	f000 fed7 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	4619      	mov	r1, r3
 8007e92:	4620      	mov	r0, r4
 8007e94:	f7ff ffd9 	bl	8007e4a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007e98:	462b      	mov	r3, r5
      }
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bdb0      	pop	{r4, r5, r7, pc}

08007ea2 <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	7138      	strb	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8007eac:	6838      	ldr	r0, [r7, #0]
 8007eae:	f000 ff2c 	bl	8008d0a <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 ff33 	bl	8008d20 <_ZNKRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007ec4:	b590      	push	{r4, r7, lr}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	7138      	strb	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007ece:	6838      	ldr	r0, [r7, #0]
 8007ed0:	f000 feee 	bl	8008cb0 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007ed4:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f7ff ffe2 	bl	8007ea2 <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8007ede:	4603      	mov	r3, r0
    }
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd90      	pop	{r4, r7, pc}

08007ee8 <_ZNSt8__detail9__variant5__getILj2ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007ee8:	b590      	push	{r4, r7, lr}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	7138      	strb	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8007ef2:	6838      	ldr	r0, [r7, #0]
 8007ef4:	f000 fead 	bl	8008c52 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8007ef8:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8007efa:	4619      	mov	r1, r3
 8007efc:	4620      	mov	r0, r4
 8007efe:	f7ff ffe1 	bl	8007ec4 <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007f02:	4603      	mov	r3, r0
    }
 8007f04:	4618      	mov	r0, r3
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd90      	pop	{r4, r7, pc}

08007f0c <_ZNSt8__detail9__variant5__getILj2ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8007f0c:	b590      	push	{r4, r7, lr}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fe91 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007f1a:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f7ff ffe2 	bl	8007ee8 <_ZNSt8__detail9__variant5__getILj2ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8007f24:	4603      	mov	r3, r0
    }
 8007f26:	4618      	mov	r0, r3
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd90      	pop	{r4, r7, pc}

08007f2e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESR_EEDcSH_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b082      	sub	sp, #8
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fe80 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff ffe4 	bl	8007f0c <_ZNSt8__detail9__variant5__getILj2ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8007f44:	4603      	mov	r3, r0
	}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESN_SR_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8007f4e:	b5b0      	push	{r4, r5, r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fe64 	bl	8008c26 <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007f5e:	4604      	mov	r4, r0
 8007f60:	6838      	ldr	r0, [r7, #0]
 8007f62:	f000 fe6b 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007f66:	4603      	mov	r3, r0
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7ff ffe0 	bl	8007f2e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESR_EEDcSH_>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	4619      	mov	r1, r3
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 fedf 	bl	8008d36 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKfEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>
		std::forward<_Variants>(__vars))...);
 8007f78:	462b      	mov	r3, r5
      }
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bdb0      	pop	{r4, r5, r7, pc}

08007f82 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESN_SR_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007f82:	b5b0      	push	{r4, r5, r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fe4a 	bl	8008c26 <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007f92:	4604      	mov	r4, r0
 8007f94:	6838      	ldr	r0, [r7, #0]
 8007f96:	f000 fe51 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f7ff ffd5 	bl	8007f4e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007fa4:	462b      	mov	r3, r5
      }
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bdb0      	pop	{r4, r5, r7, pc}

08007fae <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESN_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8007fae:	b5b0      	push	{r4, r5, r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fe34 	bl	8008c26 <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	6838      	ldr	r0, [r7, #0]
 8007fc2:	f000 fe3b 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f7ff ffd9 	bl	8007f82 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8007fd0:	462b      	mov	r3, r5
      }
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bdb0      	pop	{r4, r5, r7, pc}

08007fda <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b082      	sub	sp, #8
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	7138      	strb	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8007fe4:	6838      	ldr	r0, [r7, #0]
 8007fe6:	f000 febd 	bl	8008d64 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007fea:	4603      	mov	r3, r0
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 fec4 	bl	8008d7a <_ZNKRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8007ffc:	b590      	push	{r4, r7, lr}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	7138      	strb	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8008006:	6838      	ldr	r0, [r7, #0]
 8008008:	f000 fe7f 	bl	8008d0a <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800800c:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800800e:	4619      	mov	r1, r3
 8008010:	4620      	mov	r0, r4
 8008012:	f7ff ffe2 	bl	8007fda <_ZNSt8__detail9__variant5__getIRKNS0_15_Variadic_unionIJbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8008016:	4603      	mov	r3, r0
    }
 8008018:	4618      	mov	r0, r3
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	bd90      	pop	{r4, r7, pc}

08008020 <_ZNSt8__detail9__variant5__getILj2ERKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8008020:	b590      	push	{r4, r7, lr}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	7138      	strb	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800802a:	6838      	ldr	r0, [r7, #0]
 800802c:	f000 fe40 	bl	8008cb0 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008030:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8008032:	4619      	mov	r1, r3
 8008034:	4620      	mov	r0, r4
 8008036:	f7ff ffe1 	bl	8007ffc <_ZNSt8__detail9__variant5__getILj1ERKNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800803a:	4603      	mov	r3, r0
    }
 800803c:	4618      	mov	r0, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	bd90      	pop	{r4, r7, pc}

08008044 <_ZNSt8__detail9__variant5__getILj3ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8008044:	b590      	push	{r4, r7, lr}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	7138      	strb	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800804e:	6838      	ldr	r0, [r7, #0]
 8008050:	f000 fdff 	bl	8008c52 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8008054:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8008056:	4619      	mov	r1, r3
 8008058:	4620      	mov	r0, r4
 800805a:	f7ff ffe1 	bl	8008020 <_ZNSt8__detail9__variant5__getILj2ERKNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800805e:	4603      	mov	r3, r0
    }
 8008060:	4618      	mov	r0, r3
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	bd90      	pop	{r4, r7, pc}

08008068 <_ZNSt8__detail9__variant5__getILj3ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8008068:	b590      	push	{r4, r7, lr}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fde3 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8008076:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8008078:	4619      	mov	r1, r3
 800807a:	4620      	mov	r0, r4
 800807c:	f7ff ffe2 	bl	8008044 <_ZNSt8__detail9__variant5__getILj3ERKNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8008080:	4603      	mov	r3, r0
    }
 8008082:	4618      	mov	r0, r3
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	bd90      	pop	{r4, r7, pc}

0800808a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESR_EEDcSH_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fdd2 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8008098:	4603      	mov	r3, r0
 800809a:	4618      	mov	r0, r3
 800809c:	f7ff ffe4 	bl	8008068 <_ZNSt8__detail9__variant5__getILj3ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 80080a0:	4603      	mov	r3, r0
	}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESN_SR_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 80080aa:	b5b0      	push	{r4, r5, r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fdb6 	bl	8008c26 <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 80080ba:	4604      	mov	r4, r0
 80080bc:	6838      	ldr	r0, [r7, #0]
 80080be:	f000 fdbd 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 80080c2:	4603      	mov	r3, r0
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff ffe0 	bl	800808a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESR_EEDcSH_>
 80080ca:	4603      	mov	r3, r0
 80080cc:	4619      	mov	r1, r3
 80080ce:	4620      	mov	r0, r4
 80080d0:	f000 fe5e 	bl	8008d90 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKbEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>
		std::forward<_Variants>(__vars))...);
 80080d4:	462b      	mov	r3, r5
      }
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bdb0      	pop	{r4, r5, r7, pc}

080080de <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESN_SR_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80080de:	b5b0      	push	{r4, r5, r7, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fd9c 	bl	8008c26 <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 80080ee:	4604      	mov	r4, r0
 80080f0:	6838      	ldr	r0, [r7, #0]
 80080f2:	f000 fda3 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 80080f6:	4603      	mov	r3, r0
 80080f8:	4619      	mov	r1, r3
 80080fa:	4620      	mov	r0, r4
 80080fc:	f7ff ffd5 	bl	80080aa <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESN_SR_>
				   std::forward<_Variants>(__vars)...);
 8008100:	462b      	mov	r3, r5
      }
 8008102:	4618      	mov	r0, r3
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bdb0      	pop	{r4, r5, r7, pc}

0800810a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESN_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800810a:	b5b0      	push	{r4, r5, r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fd86 	bl	8008c26 <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 800811a:	4604      	mov	r4, r0
 800811c:	6838      	ldr	r0, [r7, #0]
 800811e:	f000 fd8d 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 8008122:	4603      	mov	r3, r0
 8008124:	4619      	mov	r1, r3
 8008126:	4620      	mov	r0, r4
 8008128:	f7ff ffd9 	bl	80080de <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJSA_ifbEEERKSC_EEvOT0_OT1_EUlOT_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSR_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESN_SR_>
				   std::forward<_Variants>(__vars)...);
 800812c:	462b      	mov	r3, r5
      }
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bdb0      	pop	{r4, r5, r7, pc}

08008136 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSS_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	4413      	add	r3, r2
 8008148:	4618      	mov	r0, r3
 800814a:	f000 fe38 	bl	8008dbe <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS9_ifbEEEJEE9_M_accessEv>
 800814e:	4603      	mov	r3, r0
	}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>:
      constexpr size_t index() const noexcept
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	if (this->_M_index ==
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	7e1b      	ldrb	r3, [r3, #24]
 8008164:	2bff      	cmp	r3, #255	; 0xff
 8008166:	d102      	bne.n	800816e <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv+0x16>
	  return variant_npos;
 8008168:	f04f 33ff 	mov.w	r3, #4294967295
 800816c:	e001      	b.n	8008172 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv+0x1a>
	return this->_M_index;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	7e1b      	ldrb	r3, [r3, #24]
      }
 8008172:	4618      	mov	r0, r3
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS8_ifbEEEEDcSH_DpOT2_>:
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 8008180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 800818a:	4b0f      	ldr	r3, [pc, #60]	; (80081c8 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS8_ifbEEEEDcSH_DpOT2_+0x48>)
 800818c:	60fb      	str	r3, [r7, #12]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 800818e:	6838      	ldr	r0, [r7, #0]
 8008190:	f7ff ffe2 	bl	8008158 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 8008194:	4603      	mov	r3, r0
 8008196:	4619      	mov	r1, r3
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f7ff ffcc 	bl	8008136 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSS_jDpT_>
 800819e:	4603      	mov	r3, r0
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 80081a4:	68bc      	ldr	r4, [r7, #8]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fe14 	bl	8008dd4 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 80081ac:	4605      	mov	r5, r0
 80081ae:	6838      	ldr	r0, [r7, #0]
 80081b0:	f000 fd44 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 80081b4:	4603      	mov	r3, r0
 80081b6:	4619      	mov	r1, r3
 80081b8:	4628      	mov	r0, r5
 80081ba:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 80081bc:	4633      	mov	r3, r6
    }
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c6:	bf00      	nop
 80081c8:	0801aa84 	.word	0x0801aa84

080081cc <_ZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_>:
    void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
      __lhs._M_index = __rhs._M_index;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	7e1a      	ldrb	r2, [r3, #24]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	761a      	strb	r2, [r3, #24]
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	6838      	ldr	r0, [r7, #0]
 80081e4:	f000 fd14 	bl	8008c10 <_ZSt7forwardIRKNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>
 80081e8:	4603      	mov	r3, r0
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff fd4c 	bl	8007c88 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERKNSt8__detail9__variant15_Copy_ctor_baseILb0EJS5_ifbEEEEDcOT0_>
 80081f0:	4602      	mov	r2, r0
 80081f2:	f107 030c 	add.w	r3, r7, #12
 80081f6:	4611      	mov	r1, r2
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7ff ffc1 	bl	8008180 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS8_ifbEEEEDcSH_DpOT2_>
    }
 80081fe:	bf00      	nop
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <_ZSt9addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>:
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */
  template<typename _Tp>
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fdeb 	bl	8008dea <_ZSt11__addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 8008214:	4603      	mov	r3, r0
 8008216:	4618      	mov	r0, r3
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant16_Variant_storageILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
	    return static_cast<variant<_Types...>&>(__rhs);
 8008226:	687b      	ldr	r3, [r7, #4]
    }
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	7138      	strb	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800823e:	6838      	ldr	r0, [r7, #0]
 8008240:	f000 fdf4 	bl	8008e2c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8008244:	4603      	mov	r3, r0
 8008246:	4618      	mov	r0, r3
 8008248:	f7fa fc6d 	bl	8002b26 <_ZNRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>
 800824c:	4603      	mov	r3, r0
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8008256:	b590      	push	{r4, r7, lr}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fdd9 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008264:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8008266:	4619      	mov	r1, r3
 8008268:	4620      	mov	r0, r4
 800826a:	f7ff ffe3 	bl	8008234 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 800826e:	4603      	mov	r3, r0
    }
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	bd90      	pop	{r4, r7, pc}

08008278 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESI_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fdc8 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008286:	4603      	mov	r3, r0
 8008288:	4618      	mov	r0, r3
 800828a:	f7ff ffe4 	bl	8008256 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800828e:	4603      	mov	r3, r0
	}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESF_SI_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8008298:	b5b0      	push	{r4, r5, r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fdac 	bl	8008e00 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80082a8:	4604      	mov	r4, r0
 80082aa:	6838      	ldr	r0, [r7, #0]
 80082ac:	f000 fdb3 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80082b0:	4603      	mov	r3, r0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7ff ffe0 	bl	8008278 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESI_EEDcOT0_>
 80082b8:	4603      	mov	r3, r0
 80082ba:	4619      	mov	r1, r3
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 fdc0 	bl	8008e42 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRS8_EENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>
		std::forward<_Variants>(__vars))...);
 80082c2:	462b      	mov	r3, r5
      }
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bdb0      	pop	{r4, r5, r7, pc}

080082cc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESF_SI_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80082cc:	b5b0      	push	{r4, r5, r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fd92 	bl	8008e00 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80082dc:	4604      	mov	r4, r0
 80082de:	6838      	ldr	r0, [r7, #0]
 80082e0:	f000 fd99 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80082e4:	4603      	mov	r3, r0
 80082e6:	4619      	mov	r1, r3
 80082e8:	4620      	mov	r0, r4
 80082ea:	f7ff ffd5 	bl	8008298 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESF_SI_>
				   std::forward<_Variants>(__vars)...);
 80082ee:	462b      	mov	r3, r5
      }
 80082f0:	4618      	mov	r0, r3
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bdb0      	pop	{r4, r5, r7, pc}

080082f8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESF_SI_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80082f8:	b5b0      	push	{r4, r5, r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fd7c 	bl	8008e00 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008308:	4604      	mov	r4, r0
 800830a:	6838      	ldr	r0, [r7, #0]
 800830c:	f000 fd83 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008310:	4603      	mov	r3, r0
 8008312:	4619      	mov	r1, r3
 8008314:	4620      	mov	r0, r4
 8008316:	f7ff ffd9 	bl	80082cc <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESF_SI_>
				   std::forward<_Variants>(__vars)...);
 800831a:	462b      	mov	r3, r5
      }
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bdb0      	pop	{r4, r5, r7, pc}

08008324 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	7138      	strb	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800832e:	6838      	ldr	r0, [r7, #0]
 8008330:	f000 fd9e 	bl	8008e70 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008334:	4603      	mov	r3, r0
 8008336:	4618      	mov	r0, r3
 8008338:	f7fa fbd4 	bl	8002ae4 <_ZNRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>
 800833c:	4603      	mov	r3, r0
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8008346:	b590      	push	{r4, r7, lr}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	7138      	strb	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8008350:	6838      	ldr	r0, [r7, #0]
 8008352:	f000 fd6b 	bl	8008e2c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8008356:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8008358:	4619      	mov	r1, r3
 800835a:	4620      	mov	r0, r4
 800835c:	f7ff ffe2 	bl	8008324 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8008360:	4603      	mov	r3, r0
    }
 8008362:	4618      	mov	r0, r3
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	bd90      	pop	{r4, r7, pc}

0800836a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800836a:	b590      	push	{r4, r7, lr}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fd4f 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008378:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800837a:	4619      	mov	r1, r3
 800837c:	4620      	mov	r0, r4
 800837e:	f7ff ffe2 	bl	8008346 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8008382:	4603      	mov	r3, r0
    }
 8008384:	4618      	mov	r0, r3
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	bd90      	pop	{r4, r7, pc}

0800838c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESI_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fd3e 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800839a:	4603      	mov	r3, r0
 800839c:	4618      	mov	r0, r3
 800839e:	f7ff ffe4 	bl	800836a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 80083a2:	4603      	mov	r3, r0
	}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESF_SI_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 80083ac:	b5b0      	push	{r4, r5, r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fd22 	bl	8008e00 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80083bc:	4604      	mov	r4, r0
 80083be:	6838      	ldr	r0, [r7, #0]
 80083c0:	f000 fd29 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80083c4:	4603      	mov	r3, r0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff ffe0 	bl	800838c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESI_EEDcOT0_>
 80083cc:	4603      	mov	r3, r0
 80083ce:	4619      	mov	r1, r3
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 fd58 	bl	8008e86 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRiEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>
		std::forward<_Variants>(__vars))...);
 80083d6:	462b      	mov	r3, r5
      }
 80083d8:	4618      	mov	r0, r3
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bdb0      	pop	{r4, r5, r7, pc}

080083e0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESF_SI_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80083e0:	b5b0      	push	{r4, r5, r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fd08 	bl	8008e00 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80083f0:	4604      	mov	r4, r0
 80083f2:	6838      	ldr	r0, [r7, #0]
 80083f4:	f000 fd0f 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80083f8:	4603      	mov	r3, r0
 80083fa:	4619      	mov	r1, r3
 80083fc:	4620      	mov	r0, r4
 80083fe:	f7ff ffd5 	bl	80083ac <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESF_SI_>
				   std::forward<_Variants>(__vars)...);
 8008402:	462b      	mov	r3, r5
      }
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bdb0      	pop	{r4, r5, r7, pc}

0800840c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESF_SI_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800840c:	b5b0      	push	{r4, r5, r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fcf2 	bl	8008e00 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 800841c:	4604      	mov	r4, r0
 800841e:	6838      	ldr	r0, [r7, #0]
 8008420:	f000 fcf9 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008424:	4603      	mov	r3, r0
 8008426:	4619      	mov	r1, r3
 8008428:	4620      	mov	r0, r4
 800842a:	f7ff ffd9 	bl	80083e0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESF_SI_>
				   std::forward<_Variants>(__vars)...);
 800842e:	462b      	mov	r3, r5
      }
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bdb0      	pop	{r4, r5, r7, pc}

08008438 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	7138      	strb	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8008442:	6838      	ldr	r0, [r7, #0]
 8008444:	f000 fd36 	bl	8008eb4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008448:	4603      	mov	r3, r0
 800844a:	4618      	mov	r0, r3
 800844c:	f7fa fb55 	bl	8002afa <_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>
 8008450:	4603      	mov	r3, r0
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800845a:	b590      	push	{r4, r7, lr}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	7138      	strb	r0, [r7, #4]
 8008462:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8008464:	6838      	ldr	r0, [r7, #0]
 8008466:	f000 fd03 	bl	8008e70 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800846a:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800846c:	4619      	mov	r1, r3
 800846e:	4620      	mov	r0, r4
 8008470:	f7ff ffe2 	bl	8008438 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8008474:	4603      	mov	r3, r0
    }
 8008476:	4618      	mov	r0, r3
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	bd90      	pop	{r4, r7, pc}

0800847e <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800847e:	b590      	push	{r4, r7, lr}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	7138      	strb	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8008488:	6838      	ldr	r0, [r7, #0]
 800848a:	f000 fccf 	bl	8008e2c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800848e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8008490:	4619      	mov	r1, r3
 8008492:	4620      	mov	r0, r4
 8008494:	f7ff ffe1 	bl	800845a <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8008498:	4603      	mov	r3, r0
    }
 800849a:	4618      	mov	r0, r3
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd90      	pop	{r4, r7, pc}

080084a2 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80084a2:	b590      	push	{r4, r7, lr}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fcb3 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80084b0:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 80084b2:	4619      	mov	r1, r3
 80084b4:	4620      	mov	r0, r4
 80084b6:	f7ff ffe2 	bl	800847e <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80084ba:	4603      	mov	r3, r0
    }
 80084bc:	4618      	mov	r0, r3
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd90      	pop	{r4, r7, pc}

080084c4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESI_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fca2 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80084d2:	4603      	mov	r3, r0
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7ff ffe4 	bl	80084a2 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 80084da:	4603      	mov	r3, r0
	}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESF_SI_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 80084e4:	b5b0      	push	{r4, r5, r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fc86 	bl	8008e00 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80084f4:	4604      	mov	r4, r0
 80084f6:	6838      	ldr	r0, [r7, #0]
 80084f8:	f000 fc8d 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80084fc:	4603      	mov	r3, r0
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff ffe0 	bl	80084c4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESI_EEDcOT0_>
 8008504:	4603      	mov	r3, r0
 8008506:	4619      	mov	r1, r3
 8008508:	4620      	mov	r0, r4
 800850a:	f000 fcde 	bl	8008eca <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRfEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>
		std::forward<_Variants>(__vars))...);
 800850e:	462b      	mov	r3, r5
      }
 8008510:	4618      	mov	r0, r3
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bdb0      	pop	{r4, r5, r7, pc}

08008518 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESF_SI_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8008518:	b5b0      	push	{r4, r5, r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fc6c 	bl	8008e00 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008528:	4604      	mov	r4, r0
 800852a:	6838      	ldr	r0, [r7, #0]
 800852c:	f000 fc73 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008530:	4603      	mov	r3, r0
 8008532:	4619      	mov	r1, r3
 8008534:	4620      	mov	r0, r4
 8008536:	f7ff ffd5 	bl	80084e4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESF_SI_>
				   std::forward<_Variants>(__vars)...);
 800853a:	462b      	mov	r3, r5
      }
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bdb0      	pop	{r4, r5, r7, pc}

08008544 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESF_SI_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8008544:	b5b0      	push	{r4, r5, r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fc56 	bl	8008e00 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008554:	4604      	mov	r4, r0
 8008556:	6838      	ldr	r0, [r7, #0]
 8008558:	f000 fc5d 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800855c:	4603      	mov	r3, r0
 800855e:	4619      	mov	r1, r3
 8008560:	4620      	mov	r0, r4
 8008562:	f7ff ffd9 	bl	8008518 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESF_SI_>
				   std::forward<_Variants>(__vars)...);
 8008566:	462b      	mov	r3, r5
      }
 8008568:	4618      	mov	r0, r3
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bdb0      	pop	{r4, r5, r7, pc}

08008570 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	7138      	strb	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800857a:	6838      	ldr	r0, [r7, #0]
 800857c:	f000 fcbc 	bl	8008ef8 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008580:	4603      	mov	r3, r0
 8008582:	4618      	mov	r0, r3
 8008584:	f7fa fac4 	bl	8002b10 <_ZNRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>
 8008588:	4603      	mov	r3, r0
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8008592:	b590      	push	{r4, r7, lr}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	7138      	strb	r0, [r7, #4]
 800859a:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800859c:	6838      	ldr	r0, [r7, #0]
 800859e:	f000 fc89 	bl	8008eb4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80085a2:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80085a4:	4619      	mov	r1, r3
 80085a6:	4620      	mov	r0, r4
 80085a8:	f7ff ffe2 	bl	8008570 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJbEEEEEDcSt16in_place_index_tILj0EEOT_>
 80085ac:	4603      	mov	r3, r0
    }
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd90      	pop	{r4, r7, pc}

080085b6 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80085b6:	b590      	push	{r4, r7, lr}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	7138      	strb	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80085c0:	6838      	ldr	r0, [r7, #0]
 80085c2:	f000 fc55 	bl	8008e70 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80085c6:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80085c8:	4619      	mov	r1, r3
 80085ca:	4620      	mov	r0, r4
 80085cc:	f7ff ffe1 	bl	8008592 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80085d0:	4603      	mov	r3, r0
    }
 80085d2:	4618      	mov	r0, r3
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd90      	pop	{r4, r7, pc}

080085da <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 80085da:	b590      	push	{r4, r7, lr}
 80085dc:	b083      	sub	sp, #12
 80085de:	af00      	add	r7, sp, #0
 80085e0:	7138      	strb	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 80085e4:	6838      	ldr	r0, [r7, #0]
 80085e6:	f000 fc21 	bl	8008e2c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 80085ea:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 80085ec:	4619      	mov	r1, r3
 80085ee:	4620      	mov	r0, r4
 80085f0:	f7ff ffe1 	bl	80085b6 <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 80085f4:	4603      	mov	r3, r0
    }
 80085f6:	4618      	mov	r0, r3
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd90      	pop	{r4, r7, pc}

080085fe <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 80085fe:	b590      	push	{r4, r7, lr}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fc05 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800860c:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800860e:	4619      	mov	r1, r3
 8008610:	4620      	mov	r0, r4
 8008612:	f7ff ffe2 	bl	80085da <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8008616:	4603      	mov	r3, r0
    }
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	bd90      	pop	{r4, r7, pc}

08008620 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESI_EEDcOT0_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fbf4 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800862e:	4603      	mov	r3, r0
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff ffe4 	bl	80085fe <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8008636:	4603      	mov	r3, r0
	}
 8008638:	4618      	mov	r0, r3
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESF_SI_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 8008640:	b5b0      	push	{r4, r5, r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fbd8 	bl	8008e00 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008650:	4604      	mov	r4, r0
 8008652:	6838      	ldr	r0, [r7, #0]
 8008654:	f000 fbdf 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008658:	4603      	mov	r3, r0
 800865a:	4618      	mov	r0, r3
 800865c:	f7ff ffe0 	bl	8008620 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESI_EEDcOT0_>
 8008660:	4603      	mov	r3, r0
 8008662:	4619      	mov	r1, r3
 8008664:	4620      	mov	r0, r4
 8008666:	f000 fc52 	bl	8008f0e <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRbEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>
		std::forward<_Variants>(__vars))...);
 800866a:	462b      	mov	r3, r5
      }
 800866c:	4618      	mov	r0, r3
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bdb0      	pop	{r4, r5, r7, pc}

08008674 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESF_SI_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 8008674:	b5b0      	push	{r4, r5, r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fbbe 	bl	8008e00 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008684:	4604      	mov	r4, r0
 8008686:	6838      	ldr	r0, [r7, #0]
 8008688:	f000 fbc5 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800868c:	4603      	mov	r3, r0
 800868e:	4619      	mov	r1, r3
 8008690:	4620      	mov	r0, r4
 8008692:	f7ff ffd5 	bl	8008640 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESF_SI_>
				   std::forward<_Variants>(__vars)...);
 8008696:	462b      	mov	r3, r5
      }
 8008698:	4618      	mov	r0, r3
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bdb0      	pop	{r4, r5, r7, pc}

080086a0 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESF_SI_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 80086a0:	b5b0      	push	{r4, r5, r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fba8 	bl	8008e00 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80086b0:	4604      	mov	r4, r0
 80086b2:	6838      	ldr	r0, [r7, #0]
 80086b4:	f000 fbaf 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80086b8:	4603      	mov	r3, r0
 80086ba:	4619      	mov	r1, r3
 80086bc:	4620      	mov	r0, r4
 80086be:	f7ff ffd9 	bl	8008674 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSI_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESF_SI_>
				   std::forward<_Variants>(__vars)...);
 80086c2:	462b      	mov	r3, r5
      }
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bdb0      	pop	{r4, r5, r7, pc}

080086cc <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSJ_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	4413      	add	r3, r2
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 fc2c 	bl	8008f3c <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJS9_ifbEEEJEE9_M_accessEv>
 80086e4:	4603      	mov	r3, r0
	}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>:
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 80086f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 80086fa:	4b0f      	ldr	r3, [pc, #60]	; (8008738 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_+0x48>)
 80086fc:	60fb      	str	r3, [r7, #12]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 80086fe:	6838      	ldr	r0, [r7, #0]
 8008700:	f7ff fd2a 	bl	8008158 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 8008704:	4603      	mov	r3, r0
 8008706:	4619      	mov	r1, r3
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f7ff ffdf 	bl	80086cc <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSJ_jDpT_>
 800870e:	4603      	mov	r3, r0
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 8008714:	68bc      	ldr	r4, [r7, #8]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fc1b 	bl	8008f52 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 800871c:	4605      	mov	r5, r0
 800871e:	6838      	ldr	r0, [r7, #0]
 8008720:	f000 fb79 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008724:	4603      	mov	r3, r0
 8008726:	4619      	mov	r1, r3
 8008728:	4628      	mov	r0, r5
 800872a:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 800872c:	4633      	mov	r3, r6
    }
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008736:	bf00      	nop
 8008738:	0801aa94 	.word	0x0801aa94

0800873c <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEv>:
      constexpr void _M_reset_impl()
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
	__do_visit([](auto&& __this_mem) mutable
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff fd6a 	bl	800821e <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant16_Variant_storageILb0EJS5_ifbEEEEDcOT0_>
 800874a:	4602      	mov	r2, r0
 800874c:	f107 030c 	add.w	r3, r7, #12
 8008750:	4611      	mov	r1, r2
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff ffcc 	bl	80086f0 <_ZSt10__do_visitILb0ELb1EZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>
      }
 8008758:	bf00      	nop
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	689b      	ldr	r3, [r3, #8]
      }
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3304      	adds	r3, #4
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008790:	b590      	push	{r4, r7, lr}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
 800879c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d01b      	beq.n	80087dc <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80087a4:	68fc      	ldr	r4, [r7, #12]
 80087a6:	68b8      	ldr	r0, [r7, #8]
 80087a8:	f7fa fe7a 	bl	80034a0 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80087ac:	4603      	mov	r3, r0
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	4619      	mov	r1, r3
 80087b2:	4620      	mov	r0, r4
 80087b4:	f7fa fa61 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 80087b8:	4603      	mov	r3, r0
 80087ba:	f083 0301 	eor.w	r3, r3, #1
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d006      	beq.n	80087d2 <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	607b      	str	r3, [r7, #4]
 80087c8:	68b8      	ldr	r0, [r7, #8]
 80087ca:	f000 fbcd 	bl	8008f68 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80087ce:	60b8      	str	r0, [r7, #8]
 80087d0:	e7e5      	b.n	800879e <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 80087d2:	68b8      	ldr	r0, [r7, #8]
 80087d4:	f000 fbd4 	bl	8008f80 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80087d8:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80087da:	e7e0      	b.n	800879e <_ZNKSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 80087dc:	f107 0314 	add.w	r3, r7, #20
 80087e0:	6879      	ldr	r1, [r7, #4]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 f819 	bl	800881a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1EPKSt18_Rb_tree_node_base>
 80087e8:	697b      	ldr	r3, [r7, #20]
    }
 80087ea:	4618      	mov	r0, r3
 80087ec:	371c      	adds	r7, #28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd90      	pop	{r4, r7, pc}

080087f2 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	bf0c      	ite	eq
 8008808:	2301      	moveq	r3, #1
 800880a:	2300      	movne	r3, #0
 800880c:	b2db      	uxtb	r3, r3
 800880e:	4618      	mov	r0, r3
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc10token_typeEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	689b      	ldr	r3, [r3, #8]
      }
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	3304      	adds	r3, #4
 800885c:	4618      	mov	r0, r3
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008868:	b590      	push	{r4, r7, lr}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d01b      	beq.n	80088b4 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800887c:	68fc      	ldr	r4, [r7, #12]
 800887e:	68b8      	ldr	r0, [r7, #8]
 8008880:	f7fa ff63 	bl	800374a <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8008884:	4603      	mov	r3, r0
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	4619      	mov	r1, r3
 800888a:	4620      	mov	r0, r4
 800888c:	f7fa f9f5 	bl	8002c7a <_ZNKSt4lessIcEclERKcS2_>
 8008890:	4603      	mov	r3, r0
 8008892:	f083 0301 	eor.w	r3, r3, #1
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d006      	beq.n	80088aa <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	607b      	str	r3, [r7, #4]
 80088a0:	68b8      	ldr	r0, [r7, #8]
 80088a2:	f000 fb79 	bl	8008f98 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80088a6:	60b8      	str	r0, [r7, #8]
 80088a8:	e7e5      	b.n	8008876 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 80088aa:	68b8      	ldr	r0, [r7, #8]
 80088ac:	f000 fb80 	bl	8008fb0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80088b0:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80088b2:	e7e0      	b.n	8008876 <_ZNKSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 80088b4:	f107 0314 	add.w	r3, r7, #20
 80088b8:	6879      	ldr	r1, [r7, #4]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 f819 	bl	80088f2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1EPKSt18_Rb_tree_node_base>
 80088c0:	697b      	ldr	r3, [r7, #20]
    }
 80088c2:	4618      	mov	r0, r3
 80088c4:	371c      	adds	r7, #28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd90      	pop	{r4, r7, pc}

080088ca <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	429a      	cmp	r2, r3
 80088de:	bf0c      	ite	eq
 80088e0:	2301      	moveq	r3, #1
 80088e2:	2300      	movne	r3, #0
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	4618      	mov	r0, r3
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKc12double_tokenEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4618      	mov	r0, r3
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
      }
 800891c:	4618      	mov	r0, r3
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	3304      	adds	r3, #4
 8008934:	4618      	mov	r0, r3
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008940:	b590      	push	{r4, r7, lr}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
 800894c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01b      	beq.n	800898c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8008954:	68fc      	ldr	r4, [r7, #12]
 8008956:	68b8      	ldr	r0, [r7, #8]
 8008958:	f7fa fe4a 	bl	80035f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 800895c:	4603      	mov	r3, r0
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	4619      	mov	r1, r3
 8008962:	4620      	mov	r0, r4
 8008964:	f7fa fb1e 	bl	8002fa4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8008968:	4603      	mov	r3, r0
 800896a:	f083 0301 	eor.w	r3, r3, #1
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	d006      	beq.n	8008982 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	607b      	str	r3, [r7, #4]
 8008978:	68b8      	ldr	r0, [r7, #8]
 800897a:	f000 fb25 	bl	8008fc8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPKSt18_Rb_tree_node_base>
 800897e:	60b8      	str	r0, [r7, #8]
 8008980:	e7e5      	b.n	800894e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 8008982:	68b8      	ldr	r0, [r7, #8]
 8008984:	f000 fb2c 	bl	8008fe0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8008988:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800898a:	e7e0      	b.n	800894e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0xe>
      return const_iterator(__y);
 800898c:	f107 0314 	add.w	r3, r7, #20
 8008990:	6879      	ldr	r1, [r7, #4]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 f819 	bl	80089ca <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPKSt18_Rb_tree_node_base>
 8008998:	697b      	ldr	r3, [r7, #20]
    }
 800899a:	4618      	mov	r0, r3
 800899c:	371c      	adds	r7, #28
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd90      	pop	{r4, r7, pc}

080089a2 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80089a2:	b480      	push	{r7}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	bf0c      	ite	eq
 80089b8:	2301      	moveq	r3, #1
 80089ba:	2300      	movne	r3, #0
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	4618      	mov	r0, r3
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4618      	mov	r0, r3
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJS7_EEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 80089e8:	b590      	push	{r4, r7, lr}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	7239      	strb	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
	    _Type(std::forward<_Args>(__args)...);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7fe fe48 	bl	800768a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80089fa:	4604      	mov	r4, r0
	  ::new ((void*)std::addressof(_M_storage))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff fc01 	bl	8008206 <_ZSt9addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 8008a04:	4603      	mov	r3, r0
 8008a06:	4619      	mov	r1, r3
 8008a08:	2018      	movs	r0, #24
 8008a0a:	f7f8 fae7 	bl	8000fdc <_ZnwjPv>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	4621      	mov	r1, r4
 8008a12:	4618      	mov	r0, r3
 8008a14:	f00e fb49 	bl	80170aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	}
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd90      	pop	{r4, r7, pc}

08008a22 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJS7_EEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 8008a22:	b5b0      	push	{r4, r5, r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	7239      	strb	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 8008a2e:	68fc      	ldr	r4, [r7, #12]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7fe fe2a 	bl	800768a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008a36:	4603      	mov	r3, r0
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f7ff ffd3 	bl	80089e8 <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJS7_EEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bdb0      	pop	{r4, r5, r7, pc}

08008a4c <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 8008a4c:	b5b0      	push	{r4, r5, r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	7239      	strb	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
	_M_index(_Np)
 8008a58:	68fc      	ldr	r4, [r7, #12]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7fe fe15 	bl	800768a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008a60:	4603      	mov	r3, r0
 8008a62:	461a      	mov	r2, r3
 8008a64:	4629      	mov	r1, r5
 8008a66:	4620      	mov	r0, r4
 8008a68:	f7ff ffdb 	bl	8008a22 <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJS7_EEESt16in_place_index_tILj0EEDpOT_>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	761a      	strb	r2, [r3, #24]
	{ }
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bdb0      	pop	{r4, r5, r7, pc}

08008a7c <_ZNSt8__detail9__variant14_UninitializedIiLb1EEC1IJiEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	7239      	strb	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
	: _M_storage(std::forward<_Args>(__args)...)
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7fe fe35 	bl	80076f8 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	601a      	str	r2, [r3, #0]
	{ }
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1IJiEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 8008aa0:	b5b0      	push	{r4, r5, r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	7239      	strb	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 8008aac:	68fc      	ldr	r4, [r7, #12]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7fe fe22 	bl	80076f8 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	4629      	mov	r1, r5
 8008aba:	4620      	mov	r0, r4
 8008abc:	f7ff ffde 	bl	8008a7c <_ZNSt8__detail9__variant14_UninitializedIiLb1EEC1IJiEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bdb0      	pop	{r4, r5, r7, pc}

08008aca <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 8008aca:	b5b0      	push	{r4, r5, r7, lr}
 8008acc:	b084      	sub	sp, #16
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	7239      	strb	r1, [r7, #8]
 8008ad4:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 8008ad6:	68fc      	ldr	r4, [r7, #12]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7fe fe0d 	bl	80076f8 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f7ff ffdb 	bl	8008aa0 <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1IJiEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bdb0      	pop	{r4, r5, r7, pc}

08008af4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 8008af4:	b5b0      	push	{r4, r5, r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	7239      	strb	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
	_M_index(_Np)
 8008b00:	68fc      	ldr	r4, [r7, #12]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7fe fdf8 	bl	80076f8 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f7ff ffdb 	bl	8008aca <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj1EJiEEESt16in_place_index_tIXT_EEDpOT0_>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	761a      	strb	r2, [r3, #24]
	{ }
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bdb0      	pop	{r4, r5, r7, pc}

08008b24 <_ZNSt8__detail9__variant14_UninitializedIfLb1EEC1IJfEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	7239      	strb	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
	: _M_storage(std::forward<_Args>(__args)...)
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7fe fe18 	bl	8007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8008b36:	4603      	mov	r3, r0
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	601a      	str	r2, [r3, #0]
	{ }
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1IJfEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 8008b48:	b5b0      	push	{r4, r5, r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	7239      	strb	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 8008b54:	68fc      	ldr	r4, [r7, #12]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7fe fe05 	bl	8007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	461a      	mov	r2, r3
 8008b60:	4629      	mov	r1, r5
 8008b62:	4620      	mov	r0, r4
 8008b64:	f7ff ffde 	bl	8008b24 <_ZNSt8__detail9__variant14_UninitializedIfLb1EEC1IJfEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bdb0      	pop	{r4, r5, r7, pc}

08008b72 <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1ILj1EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 8008b72:	b5b0      	push	{r4, r5, r7, lr}
 8008b74:	b084      	sub	sp, #16
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	7239      	strb	r1, [r7, #8]
 8008b7c:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 8008b7e:	68fc      	ldr	r4, [r7, #12]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7fe fdf0 	bl	8007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8008b86:	4603      	mov	r3, r0
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f7ff ffdb 	bl	8008b48 <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1IJfEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bdb0      	pop	{r4, r5, r7, pc}

08008b9c <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 8008b9c:	b5b0      	push	{r4, r5, r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	7239      	strb	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 8008ba8:	68fc      	ldr	r4, [r7, #12]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7fe fddb 	bl	8007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f7ff ffdb 	bl	8008b72 <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1ILj1EJfEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bdb0      	pop	{r4, r5, r7, pc}

08008bc6 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 8008bc6:	b5b0      	push	{r4, r5, r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	7239      	strb	r1, [r7, #8]
 8008bd0:	607a      	str	r2, [r7, #4]
	_M_index(_Np)
 8008bd2:	68fc      	ldr	r4, [r7, #12]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7fe fdc6 	bl	8007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	461a      	mov	r2, r3
 8008bde:	4629      	mov	r1, r5
 8008be0:	4620      	mov	r0, r4
 8008be2:	f7ff ffdb 	bl	8008b9c <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj2EJfEEESt16in_place_index_tIXT_EEDpOT0_>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2202      	movs	r2, #2
 8008bea:	761a      	strb	r2, [r3, #24]
	{ }
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bdb0      	pop	{r4, r5, r7, pc}

08008bf6 <_ZNSt8__detail9__variant15_Variadic_unionIJifbEEC1Ev>:
      constexpr _Variadic_union() : _M_rest() { }
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b082      	sub	sp, #8
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 f9f9 	bl	8008ff8 <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1Ev>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <_ZSt7forwardIRKNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	370c      	adds	r7, #12
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <_ZSt7forwardIOZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008c26:	b480      	push	{r7}
 8008c28:	b083      	sub	sp, #12
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4618      	mov	r0, r3
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4618      	mov	r0, r3
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008c52:	b480      	push	{r7}
 8008c54:	b083      	sub	sp, #12
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <_ZNKRSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>:
      const _Type& _M_get() const & noexcept
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
      { return *_M_storage._M_ptr(); }
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 f9cd 	bl	8009012 <_ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKS8_EENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c84:	b083      	sub	sp, #12
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f8a1 	bl	8008dd4 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008c92:	4604      	mov	r4, r0
 8008c94:	6838      	ldr	r0, [r7, #0]
 8008c96:	f000 f9c8 	bl	800902a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f000 f9cd 	bl	8009040 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKS9_EESJ_St14__invoke_otherSG_DpOT1_>
					std::forward<_Args>(__args)...);
 8008ca6:	4633      	mov	r3, r6
    }
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008cb0 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <_ZNKRSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>:
      constexpr const _Type& _M_get() const & noexcept
 8008cc6:	b480      	push	{r7}
 8008cc8:	b083      	sub	sp, #12
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKiEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f874 	bl	8008dd4 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008cec:	4604      	mov	r4, r0
 8008cee:	6838      	ldr	r0, [r7, #0]
 8008cf0:	f000 f9bd 	bl	800906e <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	f000 f9c2 	bl	8009084 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKiEESJ_St14__invoke_otherSG_DpOT1_>
					std::forward<_Args>(__args)...);
 8008d00:	4633      	mov	r3, r6
    }
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d0a <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4618      	mov	r0, r3
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <_ZNKRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>:
      constexpr const _Type& _M_get() const & noexcept
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	370c      	adds	r7, #12
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKfEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f847 	bl	8008dd4 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008d46:	4604      	mov	r4, r0
 8008d48:	6838      	ldr	r0, [r7, #0]
 8008d4a:	f000 f9b2 	bl	80090b2 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	461a      	mov	r2, r3
 8008d52:	4621      	mov	r1, r4
 8008d54:	4628      	mov	r0, r5
 8008d56:	f000 f9b7 	bl	80090c8 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKfEESJ_St14__invoke_otherSG_DpOT1_>
					std::forward<_Args>(__args)...);
 8008d5a:	4633      	mov	r3, r6
    }
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d64 <_ZSt7forwardIRKNSt8__detail9__variant15_Variadic_unionIJbEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <_ZNKRSt8__detail9__variant14_UninitializedIbLb1EE6_M_getEv>:
      constexpr const _Type& _M_get() const & noexcept
 8008d7a:	b480      	push	{r7}
 8008d7c:	b083      	sub	sp, #12
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <_ZSt8__invokeIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_JRKbEENSt15__invoke_resultISI_JDpT0_EE4typeESJ_DpOSO_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f81a 	bl	8008dd4 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8008da0:	4604      	mov	r4, r0
 8008da2:	6838      	ldr	r0, [r7, #0]
 8008da4:	f000 f9a7 	bl	80090f6 <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 8008da8:	4603      	mov	r3, r0
 8008daa:	461a      	mov	r2, r3
 8008dac:	4621      	mov	r1, r4
 8008dae:	4628      	mov	r0, r5
 8008db0:	f000 f9ac 	bl	800910c <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKbEESJ_St14__invoke_otherSG_DpOT1_>
					std::forward<_Args>(__args)...);
 8008db4:	4633      	mov	r3, r6
    }
 8008db6:	4618      	mov	r0, r3
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008dbe <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS9_ifbEEEJEE9_M_accessEv>:
      _M_access() const
 8008dbe:	b480      	push	{r7}
 8008dc0:	b083      	sub	sp, #12
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4618      	mov	r0, r3
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <_ZSt11__addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008dea:	b480      	push	{r7}
 8008dec:	b083      	sub	sp, #12
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4618      	mov	r0, r3
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <_ZSt7forwardIOZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008e16:	b480      	push	{r7}
 8008e18:	b083      	sub	sp, #12
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4618      	mov	r0, r3
 8008e38:	370c      	adds	r7, #12
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRS8_EENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008e42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f880 	bl	8008f52 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008e52:	4604      	mov	r4, r0
 8008e54:	6838      	ldr	r0, [r7, #0]
 8008e56:	f7fa fae3 	bl	8003420 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4621      	mov	r1, r4
 8008e60:	4628      	mov	r0, r5
 8008e62:	f000 f96a 	bl	800913a <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRS9_EESB_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8008e66:	4633      	mov	r3, r6
    }
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e70 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRiEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008e86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e88:	b083      	sub	sp, #12
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f85e 	bl	8008f52 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008e96:	4604      	mov	r4, r0
 8008e98:	6838      	ldr	r0, [r7, #0]
 8008e9a:	f7fa fa94 	bl	80033c6 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	4621      	mov	r1, r4
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	f000 f95f 	bl	8009168 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRiEESB_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8008eaa:	4633      	mov	r3, r6
    }
 8008eac:	4618      	mov	r0, r3
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008eb4 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRfEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008eca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ecc:	b083      	sub	sp, #12
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f83c 	bl	8008f52 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008eda:	4604      	mov	r4, r0
 8008edc:	6838      	ldr	r0, [r7, #0]
 8008ede:	f7fa fa7d 	bl	80033dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f000 f954 	bl	8009196 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRfEESB_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8008eee:	4633      	mov	r3, r6
    }
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ef8 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJbEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4618      	mov	r0, r3
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <_ZSt8__invokeIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRbEENSt15__invoke_resultISA_JDpT0_EE4typeESB_DpOSF_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8008f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f10:	b083      	sub	sp, #12
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f81a 	bl	8008f52 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 8008f1e:	4604      	mov	r4, r0
 8008f20:	6838      	ldr	r0, [r7, #0]
 8008f22:	f7fa fa66 	bl	80033f2 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8008f26:	4603      	mov	r3, r0
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	f000 f949 	bl	80091c4 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRbEESB_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8008f32:	4633      	mov	r3, r6
    }
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f3c <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_RSt7variantIJS9_ifbEEEJEE9_M_accessEv>:
      _M_access() const
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4618      	mov	r0, r3
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	4618      	mov	r0, r3
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <_ZNSt8_Rb_treeIcSt4pairIKc10token_typeESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <_ZNSt8_Rb_treeIcSt4pairIKc12double_tokenESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_10token_typeESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	4618      	mov	r0, r3
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <_ZNSt8__detail9__variant15_Variadic_unionIJfbEEC1Ev>:
      constexpr _Variadic_union() : _M_rest() { }
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4618      	mov	r0, r3
 8009004:	f000 f8f5 	bl	80091f2 <_ZNSt8__detail9__variant15_Variadic_unionIJbEEC1Ev>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <_ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8009012:	b580      	push	{r7, lr}
 8009014:	b082      	sub	sp, #8
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f8f4 	bl	8009208 <_ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv>
 8009020:	4603      	mov	r3, r0
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKS9_EESJ_St14__invoke_otherSG_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8009040:	b5b0      	push	{r4, r5, r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	7338      	strb	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800904c:	68b8      	ldr	r0, [r7, #8]
 800904e:	f7ff fec1 	bl	8008dd4 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8009052:	4604      	mov	r4, r0
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7ff ffe8 	bl	800902a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800905a:	4603      	mov	r3, r0
 800905c:	4619      	mov	r1, r3
 800905e:	4620      	mov	r0, r4
 8009060:	f000 f8dd 	bl	800921e <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKS7_EENS0_16__variant_cookieESI_>
 8009064:	462b      	mov	r3, r5
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bdb0      	pop	{r4, r5, r7, pc}

0800906e <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4618      	mov	r0, r3
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKiEESJ_St14__invoke_otherSG_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8009084:	b5b0      	push	{r4, r5, r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	7338      	strb	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8009090:	68b8      	ldr	r0, [r7, #8]
 8009092:	f7ff fe9f 	bl	8008dd4 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 8009096:	4604      	mov	r4, r0
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7ff ffe8 	bl	800906e <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800909e:	4603      	mov	r3, r0
 80090a0:	4619      	mov	r1, r3
 80090a2:	4620      	mov	r0, r4
 80090a4:	f000 f8d3 	bl	800924e <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKiEENS0_16__variant_cookieESI_>
 80090a8:	462b      	mov	r3, r5
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bdb0      	pop	{r4, r5, r7, pc}

080090b2 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80090b2:	b480      	push	{r7}
 80090b4:	b083      	sub	sp, #12
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKfEESJ_St14__invoke_otherSG_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80090c8:	b5b0      	push	{r4, r5, r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	7338      	strb	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80090d4:	68b8      	ldr	r0, [r7, #8]
 80090d6:	f7ff fe7d 	bl	8008dd4 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 80090da:	4604      	mov	r4, r0
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff ffe8 	bl	80090b2 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80090e2:	4603      	mov	r3, r0
 80090e4:	4619      	mov	r1, r3
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 f8c9 	bl	800927e <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKfEENS0_16__variant_cookieESI_>
 80090ec:	462b      	mov	r3, r5
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bdb0      	pop	{r4, r5, r7, pc}

080090f6 <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS9_ifbEEERKSB_EEvOT0_OT1_EUlOT_E_JRKbEESJ_St14__invoke_otherSG_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800910c:	b5b0      	push	{r4, r5, r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	7338      	strb	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8009118:	68b8      	ldr	r0, [r7, #8]
 800911a:	f7ff fe5b 	bl	8008dd4 <_ZSt7forwardIZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS1_15_Copy_ctor_baseILb0EJS8_ifbEEERKSA_EEvOT0_OT1_EUlOT_E_ESJ_RNSt16remove_referenceISI_E4typeE>
 800911e:	4604      	mov	r4, r0
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff ffe8 	bl	80090f6 <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 8009126:	4603      	mov	r3, r0
 8009128:	4619      	mov	r1, r3
 800912a:	4620      	mov	r0, r4
 800912c:	f000 f8bf 	bl	80092ae <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKbEENS0_16__variant_cookieESI_>
 8009130:	462b      	mov	r3, r5
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bdb0      	pop	{r4, r5, r7, pc}

0800913a <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRS9_EESB_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800913a:	b5b0      	push	{r4, r5, r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	7338      	strb	r0, [r7, #12]
 8009142:	60b9      	str	r1, [r7, #8]
 8009144:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8009146:	68b8      	ldr	r0, [r7, #8]
 8009148:	f7ff ff03 	bl	8008f52 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 800914c:	4604      	mov	r4, r0
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7fa f966 	bl	8003420 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8009154:	4603      	mov	r3, r0
 8009156:	4619      	mov	r1, r3
 8009158:	4620      	mov	r0, r4
 800915a:	f000 f8c0 	bl	80092de <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRS7_EENS0_16__variant_cookieESA_>
 800915e:	462b      	mov	r3, r5
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bdb0      	pop	{r4, r5, r7, pc}

08009168 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRiEESB_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8009168:	b5b0      	push	{r4, r5, r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	7338      	strb	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8009174:	68b8      	ldr	r0, [r7, #8]
 8009176:	f7ff feec 	bl	8008f52 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 800917a:	4604      	mov	r4, r0
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7fa f922 	bl	80033c6 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8009182:	4603      	mov	r3, r0
 8009184:	4619      	mov	r1, r3
 8009186:	4620      	mov	r0, r4
 8009188:	f000 f8ba 	bl	8009300 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRiEENS0_16__variant_cookieESA_>
 800918c:	462b      	mov	r3, r5
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bdb0      	pop	{r4, r5, r7, pc}

08009196 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRfEESB_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8009196:	b5b0      	push	{r4, r5, r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	7338      	strb	r0, [r7, #12]
 800919e:	60b9      	str	r1, [r7, #8]
 80091a0:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80091a2:	68b8      	ldr	r0, [r7, #8]
 80091a4:	f7ff fed5 	bl	8008f52 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80091a8:	4604      	mov	r4, r0
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7fa f916 	bl	80033dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80091b0:	4603      	mov	r3, r0
 80091b2:	4619      	mov	r1, r3
 80091b4:	4620      	mov	r0, r4
 80091b6:	f000 f8b4 	bl	8009322 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRfEENS0_16__variant_cookieESA_>
 80091ba:	462b      	mov	r3, r5
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bdb0      	pop	{r4, r5, r7, pc}

080091c4 <_ZSt13__invoke_implINSt8__detail9__variant16__variant_cookieEZNS1_16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_JRbEESB_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80091c4:	b5b0      	push	{r4, r5, r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	7338      	strb	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80091d0:	68b8      	ldr	r0, [r7, #8]
 80091d2:	f7ff febe 	bl	8008f52 <_ZSt7forwardIZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvEUlOT_E_ESB_RNSt16remove_referenceISA_E4typeE>
 80091d6:	4604      	mov	r4, r0
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7fa f90a 	bl	80033f2 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80091de:	4603      	mov	r3, r0
 80091e0:	4619      	mov	r1, r3
 80091e2:	4620      	mov	r0, r4
 80091e4:	f000 f8ae 	bl	8009344 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRbEENS0_16__variant_cookieESA_>
 80091e8:	462b      	mov	r3, r5
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bdb0      	pop	{r4, r5, r7, pc}

080091f2 <_ZNSt8__detail9__variant15_Variadic_unionIJbEEC1Ev>:
 80091f2:	b480      	push	{r7}
 80091f4:	b083      	sub	sp, #12
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4618      	mov	r0, r3
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <_ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv>:
      _M_addr() const noexcept
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKS7_EENS0_16__variant_cookieESI_>:
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 800921e:	b5b0      	push	{r4, r5, r7, lr}
 8009220:	b082      	sub	sp, #8
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	6039      	str	r1, [r7, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
	  __variant_construct_single(std::forward<_Tp>(__lhs),
 800922c:	4618      	mov	r0, r3
 800922e:	f000 f89a 	bl	8009366 <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8009232:	4604      	mov	r4, r0
 8009234:	6838      	ldr	r0, [r7, #0]
 8009236:	f7ff fef8 	bl	800902a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800923a:	4603      	mov	r3, r0
 800923c:	4619      	mov	r1, r3
 800923e:	4620      	mov	r0, r4
 8009240:	f000 f8b3 	bl	80093aa <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKS8_EEvOT_OT0_>
	  return {};
 8009244:	462b      	mov	r3, r5
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 8009246:	4618      	mov	r0, r3
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bdb0      	pop	{r4, r5, r7, pc}

0800924e <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKiEENS0_16__variant_cookieESI_>:
 800924e:	b5b0      	push	{r4, r5, r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
	  __variant_construct_single(std::forward<_Tp>(__lhs),
 800925c:	4618      	mov	r0, r3
 800925e:	f000 f882 	bl	8009366 <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8009262:	4604      	mov	r4, r0
 8009264:	6838      	ldr	r0, [r7, #0]
 8009266:	f7ff ff02 	bl	800906e <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800926a:	4603      	mov	r3, r0
 800926c:	4619      	mov	r1, r3
 800926e:	4620      	mov	r0, r4
 8009270:	f000 f8b7 	bl	80093e2 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKiEEvOT_OT0_>
	  return {};
 8009274:	462b      	mov	r3, r5
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bdb0      	pop	{r4, r5, r7, pc}

0800927e <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKfEENS0_16__variant_cookieESI_>:
 800927e:	b5b0      	push	{r4, r5, r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
	  __variant_construct_single(std::forward<_Tp>(__lhs),
 800928c:	4618      	mov	r0, r3
 800928e:	f000 f86a 	bl	8009366 <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8009292:	4604      	mov	r4, r0
 8009294:	6838      	ldr	r0, [r7, #0]
 8009296:	f7ff ff0c 	bl	80090b2 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800929a:	4603      	mov	r3, r0
 800929c:	4619      	mov	r1, r3
 800929e:	4620      	mov	r0, r4
 80092a0:	f000 f8b9 	bl	8009416 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKfEEvOT_OT0_>
	  return {};
 80092a4:	462b      	mov	r3, r5
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bdb0      	pop	{r4, r5, r7, pc}

080092ae <_ZZNSt8__detail9__variant19__variant_constructIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNS0_15_Copy_ctor_baseILb0EJS7_ifbEEERKS9_EEvOT0_OT1_ENUlOT_E_clIRKbEENS0_16__variant_cookieESI_>:
 80092ae:	b5b0      	push	{r4, r5, r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	6039      	str	r1, [r7, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
	  __variant_construct_single(std::forward<_Tp>(__lhs),
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 f852 	bl	8009366 <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 80092c2:	4604      	mov	r4, r0
 80092c4:	6838      	ldr	r0, [r7, #0]
 80092c6:	f7ff ff16 	bl	80090f6 <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 80092ca:	4603      	mov	r3, r0
 80092cc:	4619      	mov	r1, r3
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 f8bb 	bl	800944a <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKbEEvOT_OT0_>
	  return {};
 80092d4:	462b      	mov	r3, r5
      __do_visit([&__lhs](auto&& __rhs_mem) mutable
 80092d6:	4618      	mov	r0, r3
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bdb0      	pop	{r4, r5, r7, pc}

080092de <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRS7_EENS0_16__variant_cookieESA_>:
	__do_visit([](auto&& __this_mem) mutable
 80092de:	b590      	push	{r4, r7, lr}
 80092e0:	b083      	sub	sp, #12
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 80092e8:	6838      	ldr	r0, [r7, #0]
 80092ea:	f7fa fc28 	bl	8003b3e <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80092ee:	4603      	mov	r3, r0
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fa fc2f 	bl	8003b54 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	    return {};
 80092f6:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd90      	pop	{r4, r7, pc}

08009300 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRiEENS0_16__variant_cookieESA_>:
 8009300:	b590      	push	{r4, r7, lr}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 800930a:	6838      	ldr	r0, [r7, #0]
 800930c:	f7fa fbd8 	bl	8003ac0 <_ZSt11__addressofIiEPT_RS0_>
 8009310:	4603      	mov	r3, r0
 8009312:	4618      	mov	r0, r3
 8009314:	f7fa fbdf 	bl	8003ad6 <_ZSt8_DestroyIiEvPT_>
	    return {};
 8009318:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 800931a:	4618      	mov	r0, r3
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	bd90      	pop	{r4, r7, pc}

08009322 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRfEENS0_16__variant_cookieESA_>:
 8009322:	b590      	push	{r4, r7, lr}
 8009324:	b083      	sub	sp, #12
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 800932c:	6838      	ldr	r0, [r7, #0]
 800932e:	f7fa fbdc 	bl	8003aea <_ZSt11__addressofIfEPT_RS0_>
 8009332:	4603      	mov	r3, r0
 8009334:	4618      	mov	r0, r3
 8009336:	f7fa fbe3 	bl	8003b00 <_ZSt8_DestroyIfEvPT_>
	    return {};
 800933a:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 800933c:	4618      	mov	r0, r3
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	bd90      	pop	{r4, r7, pc}

08009344 <_ZZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE13_M_reset_implEvENUlOT_E_clIRbEENS0_16__variant_cookieESA_>:
 8009344:	b590      	push	{r4, r7, lr}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
	      std::_Destroy(std::__addressof(__this_mem));
 800934e:	6838      	ldr	r0, [r7, #0]
 8009350:	f7fa fbe0 	bl	8003b14 <_ZSt11__addressofIbEPT_RS0_>
 8009354:	4603      	mov	r3, r0
 8009356:	4618      	mov	r0, r3
 8009358:	f7fa fbe7 	bl	8003b2a <_ZSt8_DestroyIbEvPT_>
	    return {};
 800935c:	4623      	mov	r3, r4
	__do_visit([](auto&& __this_mem) mutable
 800935e:	4618      	mov	r0, r3
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	bd90      	pop	{r4, r7, pc}

08009366 <_ZSt7forwardIRNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009366:	b480      	push	{r7}
 8009368:	b083      	sub	sp, #12
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4618      	mov	r0, r3
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>:
    addressof(_Tp& __r) noexcept
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f805 	bl	8009394 <_ZSt11__addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 800938a:	4603      	mov	r3, r0
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <_ZSt11__addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4618      	mov	r0, r3
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKS8_EEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 80093aa:	b590      	push	{r4, r7, lr}
 80093ac:	b085      	sub	sp, #20
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7ff ffe0 	bl	800937c <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 80093bc:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 80093be:	6838      	ldr	r0, [r7, #0]
 80093c0:	f7ff fe33 	bl	800902a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80093c4:	4604      	mov	r4, r0
        ::new (__storage)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	4619      	mov	r1, r3
 80093ca:	2018      	movs	r0, #24
 80093cc:	f7f7 fe06 	bl	8000fdc <_ZnwjPv>
 80093d0:	4603      	mov	r3, r0
 80093d2:	4621      	mov	r1, r4
 80093d4:	4618      	mov	r0, r3
 80093d6:	f00d ffaf 	bl	8017338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    }
 80093da:	bf00      	nop
 80093dc:	3714      	adds	r7, #20
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd90      	pop	{r4, r7, pc}

080093e2 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKiEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 80093e2:	b590      	push	{r4, r7, lr}
 80093e4:	b085      	sub	sp, #20
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff ffc4 	bl	800937c <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 80093f4:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 80093f6:	6838      	ldr	r0, [r7, #0]
 80093f8:	f7ff fe39 	bl	800906e <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 80093fc:	4603      	mov	r3, r0
        ::new (__storage)
 80093fe:	681c      	ldr	r4, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4619      	mov	r1, r3
 8009404:	2004      	movs	r0, #4
 8009406:	f7f7 fde9 	bl	8000fdc <_ZnwjPv>
 800940a:	4603      	mov	r3, r0
 800940c:	601c      	str	r4, [r3, #0]
    }
 800940e:	bf00      	nop
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	bd90      	pop	{r4, r7, pc}

08009416 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKfEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 8009416:	b590      	push	{r4, r7, lr}
 8009418:	b085      	sub	sp, #20
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff ffaa 	bl	800937c <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 8009428:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 800942a:	6838      	ldr	r0, [r7, #0]
 800942c:	f7ff fe41 	bl	80090b2 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8009430:	4603      	mov	r3, r0
        ::new (__storage)
 8009432:	681c      	ldr	r4, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4619      	mov	r1, r3
 8009438:	2004      	movs	r0, #4
 800943a:	f7f7 fdcf 	bl	8000fdc <_ZnwjPv>
 800943e:	4603      	mov	r3, r0
 8009440:	601c      	str	r4, [r3, #0]
    }
 8009442:	bf00      	nop
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	bd90      	pop	{r4, r7, pc}

0800944a <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKbEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 800944a:	b590      	push	{r4, r7, lr}
 800944c:	b085      	sub	sp, #20
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4618      	mov	r0, r3
 8009458:	f7ff ff90 	bl	800937c <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 800945c:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 800945e:	6838      	ldr	r0, [r7, #0]
 8009460:	f7ff fe49 	bl	80090f6 <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 8009464:	4603      	mov	r3, r0
        ::new (__storage)
 8009466:	781c      	ldrb	r4, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	4619      	mov	r1, r3
 800946c:	2001      	movs	r0, #1
 800946e:	f7f7 fdb5 	bl	8000fdc <_ZnwjPv>
 8009472:	4603      	mov	r3, r0
 8009474:	4622      	mov	r2, r4
 8009476:	701a      	strb	r2, [r3, #0]
    }
 8009478:	bf00      	nop
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	bd90      	pop	{r4, r7, pc}

08009480 <_Z41__static_initialization_and_destruction_0ii>:
 8009480:	b590      	push	{r4, r7, lr}
 8009482:	b0e7      	sub	sp, #412	; 0x19c
 8009484:	af02      	add	r7, sp, #8
 8009486:	1d3b      	adds	r3, r7, #4
 8009488:	6018      	str	r0, [r3, #0]
 800948a:	463b      	mov	r3, r7
 800948c:	6019      	str	r1, [r3, #0]
 800948e:	1d3b      	adds	r3, r7, #4
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b01      	cmp	r3, #1
 8009494:	f040 819d 	bne.w	80097d2 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8009498:	463b      	mov	r3, r7
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094a0:	4293      	cmp	r3, r2
 80094a2:	f040 8196 	bne.w	80097d2 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 80094a6:	f107 0314 	add.w	r3, r7, #20
 80094aa:	4618      	mov	r0, r3
 80094ac:	2322      	movs	r3, #34	; 0x22
 80094ae:	461a      	mov	r2, r3
 80094b0:	2100      	movs	r1, #0
 80094b2:	f00e f803 	bl	80174bc <memset>
 80094b6:	f107 0314 	add.w	r3, r7, #20
 80094ba:	223a      	movs	r2, #58	; 0x3a
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	f107 0314 	add.w	r3, r7, #20
 80094c2:	2201      	movs	r2, #1
 80094c4:	705a      	strb	r2, [r3, #1]
 80094c6:	f107 0314 	add.w	r3, r7, #20
 80094ca:	220a      	movs	r2, #10
 80094cc:	709a      	strb	r2, [r3, #2]
 80094ce:	f107 0314 	add.w	r3, r7, #20
 80094d2:	220a      	movs	r2, #10
 80094d4:	70da      	strb	r2, [r3, #3]
 80094d6:	f107 0314 	add.w	r3, r7, #20
 80094da:	222c      	movs	r2, #44	; 0x2c
 80094dc:	711a      	strb	r2, [r3, #4]
 80094de:	f107 0314 	add.w	r3, r7, #20
 80094e2:	220c      	movs	r2, #12
 80094e4:	715a      	strb	r2, [r3, #5]
 80094e6:	f107 0314 	add.w	r3, r7, #20
 80094ea:	222e      	movs	r2, #46	; 0x2e
 80094ec:	719a      	strb	r2, [r3, #6]
 80094ee:	f107 0314 	add.w	r3, r7, #20
 80094f2:	220b      	movs	r2, #11
 80094f4:	71da      	strb	r2, [r3, #7]
 80094f6:	f107 0314 	add.w	r3, r7, #20
 80094fa:	225b      	movs	r2, #91	; 0x5b
 80094fc:	721a      	strb	r2, [r3, #8]
 80094fe:	f107 0314 	add.w	r3, r7, #20
 8009502:	220d      	movs	r2, #13
 8009504:	725a      	strb	r2, [r3, #9]
 8009506:	f107 0314 	add.w	r3, r7, #20
 800950a:	225d      	movs	r2, #93	; 0x5d
 800950c:	729a      	strb	r2, [r3, #10]
 800950e:	f107 0314 	add.w	r3, r7, #20
 8009512:	220e      	movs	r2, #14
 8009514:	72da      	strb	r2, [r3, #11]
 8009516:	f107 0314 	add.w	r3, r7, #20
 800951a:	227c      	movs	r2, #124	; 0x7c
 800951c:	731a      	strb	r2, [r3, #12]
 800951e:	f107 0314 	add.w	r3, r7, #20
 8009522:	2215      	movs	r2, #21
 8009524:	735a      	strb	r2, [r3, #13]
 8009526:	f107 0314 	add.w	r3, r7, #20
 800952a:	2226      	movs	r2, #38	; 0x26
 800952c:	739a      	strb	r2, [r3, #14]
 800952e:	f107 0314 	add.w	r3, r7, #20
 8009532:	2216      	movs	r2, #22
 8009534:	73da      	strb	r2, [r3, #15]
 8009536:	f107 0314 	add.w	r3, r7, #20
 800953a:	222b      	movs	r2, #43	; 0x2b
 800953c:	741a      	strb	r2, [r3, #16]
 800953e:	f107 0314 	add.w	r3, r7, #20
 8009542:	221f      	movs	r2, #31
 8009544:	745a      	strb	r2, [r3, #17]
 8009546:	f107 0314 	add.w	r3, r7, #20
 800954a:	222d      	movs	r2, #45	; 0x2d
 800954c:	749a      	strb	r2, [r3, #18]
 800954e:	f107 0314 	add.w	r3, r7, #20
 8009552:	2220      	movs	r2, #32
 8009554:	74da      	strb	r2, [r3, #19]
 8009556:	f107 0314 	add.w	r3, r7, #20
 800955a:	222a      	movs	r2, #42	; 0x2a
 800955c:	751a      	strb	r2, [r3, #20]
 800955e:	f107 0314 	add.w	r3, r7, #20
 8009562:	2221      	movs	r2, #33	; 0x21
 8009564:	755a      	strb	r2, [r3, #21]
 8009566:	f107 0314 	add.w	r3, r7, #20
 800956a:	222f      	movs	r2, #47	; 0x2f
 800956c:	759a      	strb	r2, [r3, #22]
 800956e:	f107 0314 	add.w	r3, r7, #20
 8009572:	2222      	movs	r2, #34	; 0x22
 8009574:	75da      	strb	r2, [r3, #23]
 8009576:	f107 0314 	add.w	r3, r7, #20
 800957a:	225e      	movs	r2, #94	; 0x5e
 800957c:	761a      	strb	r2, [r3, #24]
 800957e:	f107 0314 	add.w	r3, r7, #20
 8009582:	2223      	movs	r2, #35	; 0x23
 8009584:	765a      	strb	r2, [r3, #25]
 8009586:	f107 0314 	add.w	r3, r7, #20
 800958a:	2225      	movs	r2, #37	; 0x25
 800958c:	769a      	strb	r2, [r3, #26]
 800958e:	f107 0314 	add.w	r3, r7, #20
 8009592:	2224      	movs	r2, #36	; 0x24
 8009594:	76da      	strb	r2, [r3, #27]
 8009596:	f107 0314 	add.w	r3, r7, #20
 800959a:	2228      	movs	r2, #40	; 0x28
 800959c:	771a      	strb	r2, [r3, #28]
 800959e:	f107 0314 	add.w	r3, r7, #20
 80095a2:	2226      	movs	r2, #38	; 0x26
 80095a4:	775a      	strb	r2, [r3, #29]
 80095a6:	f107 0314 	add.w	r3, r7, #20
 80095aa:	2229      	movs	r2, #41	; 0x29
 80095ac:	779a      	strb	r2, [r3, #30]
 80095ae:	f107 0314 	add.w	r3, r7, #20
 80095b2:	2227      	movs	r2, #39	; 0x27
 80095b4:	77da      	strb	r2, [r3, #31]
 80095b6:	f107 0314 	add.w	r3, r7, #20
 80095ba:	2225      	movs	r2, #37	; 0x25
 80095bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80095c0:	f107 030c 	add.w	r3, r7, #12
 80095c4:	f107 0214 	add.w	r2, r7, #20
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	f107 030c 	add.w	r3, r7, #12
 80095ce:	2211      	movs	r2, #17
 80095d0:	605a      	str	r2, [r3, #4]
 80095d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7f7 fe5c 	bl	8001294 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 80095dc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80095e0:	f107 020c 	add.w	r2, r7, #12
 80095e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	460b      	mov	r3, r1
 80095ec:	ca06      	ldmia	r2, {r1, r2}
 80095ee:	4885      	ldr	r0, [pc, #532]	; (8009804 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80095f0:	f7f7 fe68 	bl	80012c4 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80095f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7f7 fe57 	bl	80012ac <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 80095fe:	2305      	movs	r3, #5
 8009600:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8009604:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8009608:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800960c:	497e      	ldr	r1, [pc, #504]	; (8009808 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800960e:	4618      	mov	r0, r3
 8009610:	f7f7 fd44 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8009614:	2306      	movs	r3, #6
 8009616:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 800961a:	f207 1263 	addw	r2, r7, #355	; 0x163
 800961e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009622:	331c      	adds	r3, #28
 8009624:	4979      	ldr	r1, [pc, #484]	; (800980c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8009626:	4618      	mov	r0, r3
 8009628:	f7f7 fd60 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 800962c:	2307      	movs	r3, #7
 800962e:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8009632:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8009636:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800963a:	3338      	adds	r3, #56	; 0x38
 800963c:	4974      	ldr	r1, [pc, #464]	; (8009810 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800963e:	4618      	mov	r0, r3
 8009640:	f7f7 fd54 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8009644:	2308      	movs	r3, #8
 8009646:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 800964a:	f207 1265 	addw	r2, r7, #357	; 0x165
 800964e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009652:	3354      	adds	r3, #84	; 0x54
 8009654:	496f      	ldr	r1, [pc, #444]	; (8009814 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8009656:	4618      	mov	r0, r3
 8009658:	f7f7 fd20 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 800965c:	2309      	movs	r3, #9
 800965e:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8009662:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8009666:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800966a:	3370      	adds	r3, #112	; 0x70
 800966c:	496a      	ldr	r1, [pc, #424]	; (8009818 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800966e:	4618      	mov	r0, r3
 8009670:	f7f7 fd64 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8009674:	2310      	movs	r3, #16
 8009676:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 800967a:	f207 1267 	addw	r2, r7, #359	; 0x167
 800967e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009682:	338c      	adds	r3, #140	; 0x8c
 8009684:	4965      	ldr	r1, [pc, #404]	; (800981c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8009686:	4618      	mov	r0, r3
 8009688:	f7f7 fd80 	bl	800118c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 800968c:	2311      	movs	r3, #17
 800968e:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8009692:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8009696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800969a:	33a8      	adds	r3, #168	; 0xa8
 800969c:	4960      	ldr	r1, [pc, #384]	; (8009820 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800969e:	4618      	mov	r0, r3
 80096a0:	f7f7 fd4c 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 80096a4:	2312      	movs	r3, #18
 80096a6:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 80096aa:	f207 1269 	addw	r2, r7, #361	; 0x169
 80096ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80096b2:	33c4      	adds	r3, #196	; 0xc4
 80096b4:	495b      	ldr	r1, [pc, #364]	; (8009824 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7f7 fcf0 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 80096bc:	2313      	movs	r3, #19
 80096be:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 80096c2:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 80096c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80096ca:	33e0      	adds	r3, #224	; 0xe0
 80096cc:	4956      	ldr	r1, [pc, #344]	; (8009828 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7f7 fd0c 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 80096d4:	2314      	movs	r3, #20
 80096d6:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 80096da:	f207 126b 	addw	r2, r7, #363	; 0x16b
 80096de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80096e2:	33fc      	adds	r3, #252	; 0xfc
 80096e4:	4951      	ldr	r1, [pc, #324]	; (800982c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7f7 fd78 	bl	80011dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 80096ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80096f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80096fa:	220a      	movs	r2, #10
 80096fc:	605a      	str	r2, [r3, #4]
 80096fe:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8009702:	4618      	mov	r0, r3
 8009704:	f7f7 fe6b 	bl	80013de <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8009708:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800970c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009710:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	460b      	mov	r3, r1
 8009718:	ca06      	ldmia	r2, {r1, r2}
 800971a:	4845      	ldr	r0, [pc, #276]	; (8009830 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800971c:	f7f7 fe77 	bl	800140e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8009720:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8009724:	4618      	mov	r0, r3
 8009726:	f7f7 fe66 	bl	80013f6 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800972a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800972e:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8009732:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009736:	429c      	cmp	r4, r3
 8009738:	d004      	beq.n	8009744 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 800973a:	3c1c      	subs	r4, #28
 800973c:	4620      	mov	r0, r4
 800973e:	f7f7 fca0 	bl	8001082 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8009742:	e7f6      	b.n	8009732 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8009744:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8009748:	2200      	movs	r2, #0
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	605a      	str	r2, [r3, #4]
 800974e:	609a      	str	r2, [r3, #8]
 8009750:	233c      	movs	r3, #60	; 0x3c
 8009752:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8009756:	231b      	movs	r3, #27
 8009758:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 800975c:	231c      	movs	r3, #28
 800975e:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8009762:	233e      	movs	r3, #62	; 0x3e
 8009764:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8009768:	2319      	movs	r3, #25
 800976a:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800976e:	231a      	movs	r3, #26
 8009770:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8009774:	233d      	movs	r3, #61	; 0x3d
 8009776:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 800977a:	2318      	movs	r3, #24
 800977c:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8009780:	231d      	movs	r3, #29
 8009782:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8009786:	2321      	movs	r3, #33	; 0x21
 8009788:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 800978c:	2317      	movs	r3, #23
 800978e:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8009792:	231e      	movs	r3, #30
 8009794:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8009798:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800979c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80097a0:	2304      	movs	r3, #4
 80097a2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80097a6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7f7 fe5f 	bl	800146e <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 80097b0:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80097b4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	4613      	mov	r3, r2
 80097bc:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 80097c0:	ca06      	ldmia	r2, {r1, r2}
 80097c2:	481c      	ldr	r0, [pc, #112]	; (8009834 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80097c4:	f7f7 fe6b 	bl	800149e <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80097c8:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7f7 fe5a 	bl	8001486 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 80097d2:	1d3b      	adds	r3, r7, #4
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10e      	bne.n	80097f8 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80097da:	463b      	mov	r3, r7
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d108      	bne.n	80097f8 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80097e6:	4813      	ldr	r0, [pc, #76]	; (8009834 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80097e8:	f7fa fb78 	bl	8003edc <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 80097ec:	4810      	ldr	r0, [pc, #64]	; (8009830 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80097ee:	f7fa fb82 	bl	8003ef6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 80097f2:	4804      	ldr	r0, [pc, #16]	; (8009804 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80097f4:	f7fa fb8c 	bl	8003f10 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80097f8:	bf00      	nop
 80097fa:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd90      	pop	{r4, r7, pc}
 8009802:	bf00      	nop
 8009804:	2000028c 	.word	0x2000028c
 8009808:	0801a518 	.word	0x0801a518
 800980c:	0801a520 	.word	0x0801a520
 8009810:	0801a528 	.word	0x0801a528
 8009814:	0801a530 	.word	0x0801a530
 8009818:	0801a538 	.word	0x0801a538
 800981c:	0801a540 	.word	0x0801a540
 8009820:	0801a544 	.word	0x0801a544
 8009824:	0801a54c 	.word	0x0801a54c
 8009828:	0801a554 	.word	0x0801a554
 800982c:	0801a55c 	.word	0x0801a55c
 8009830:	200002a4 	.word	0x200002a4
 8009834:	200002bc 	.word	0x200002bc

08009838 <_GLOBAL__sub_I__ZN5LexerC2EP6Source>:
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0
 800983c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009840:	2001      	movs	r0, #1
 8009842:	f7ff fe1d 	bl	8009480 <_Z41__static_initialization_and_destruction_0ii>
 8009846:	bd80      	pop	{r7, pc}

08009848 <_GLOBAL__sub_D__ZN5LexerC2EP6Source>:
 8009848:	b580      	push	{r7, lr}
 800984a:	af00      	add	r7, sp, #0
 800984c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009850:	2000      	movs	r0, #0
 8009852:	f7ff fe15 	bl	8009480 <_Z41__static_initialization_and_destruction_0ii>
 8009856:	bd80      	pop	{r7, pc}

08009858 <_ZN6ParserC1EP5LexerP11Transmitter>:
#include "Parser.h"

Parser::Parser(Lexer *Lex, Transmitter *Trans)
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3308      	adds	r3, #8
 8009868:	4618      	mov	r0, r3
 800986a:	f7fd f806 	bl	800687a <_ZN5TokenC1Ev>
{
	this->Lex = Lex;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	601a      	str	r2, [r3, #0]
	this->Trans = Trans;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	605a      	str	r2, [r3, #4]
}
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <_ZN7ProgramD1Ev>:

Program::~Program()
 8009884:	b590      	push	{r4, r7, lr}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
{
	delete setup;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681c      	ldr	r4, [r3, #0]
 8009890:	2c00      	cmp	r4, #0
 8009892:	d006      	beq.n	80098a2 <_ZN7ProgramD1Ev+0x1e>
 8009894:	4620      	mov	r0, r4
 8009896:	f004 ff55 	bl	800e744 <_ZN4BodyD1Ev>
 800989a:	210c      	movs	r1, #12
 800989c:	4620      	mov	r0, r4
 800989e:	f00d fa44 	bl	8016d2a <_ZdlPvj>
	delete loop;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685c      	ldr	r4, [r3, #4]
 80098a6:	2c00      	cmp	r4, #0
 80098a8:	d006      	beq.n	80098b8 <_ZN7ProgramD1Ev+0x34>
 80098aa:	4620      	mov	r0, r4
 80098ac:	f004 ff4a 	bl	800e744 <_ZN4BodyD1Ev>
 80098b0:	210c      	movs	r1, #12
 80098b2:	4620      	mov	r0, r4
 80098b4:	f00d fa39 	bl	8016d2a <_ZdlPvj>
	delete finish;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	689c      	ldr	r4, [r3, #8]
 80098bc:	2c00      	cmp	r4, #0
 80098be:	d006      	beq.n	80098ce <_ZN7ProgramD1Ev+0x4a>
 80098c0:	4620      	mov	r0, r4
 80098c2:	f004 ff3f 	bl	800e744 <_ZN4BodyD1Ev>
 80098c6:	210c      	movs	r1, #12
 80098c8:	4620      	mov	r0, r4
 80098ca:	f00d fa2e 	bl	8016d2a <_ZdlPvj>
}
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4618      	mov	r0, r3
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd90      	pop	{r4, r7, pc}

080098d8 <_ZN6Parser11parse_whileEv>:

While_statement* Parser::parse_while()
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b092      	sub	sp, #72	; 0x48
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
	auto st = new While_statement();
 80098e0:	2008      	movs	r0, #8
 80098e2:	f00d fa24 	bl	8016d2e <_Znwj>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2200      	movs	r2, #0
 80098ea:	601a      	str	r2, [r3, #0]
 80098ec:	2200      	movs	r2, #0
 80098ee:	605a      	str	r2, [r3, #4]
 80098f0:	647b      	str	r3, [r7, #68]	; 0x44
	st->condition = parse_expression();
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f006 fd5a 	bl	80103ac <_ZN6Parser16parse_expressionEv>
 80098f8:	4602      	mov	r2, r0
 80098fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098fc:	601a      	str	r2, [r3, #0]
	assert_token(TOKEN_COLON, "colon after condition expression");
 80098fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009902:	4618      	mov	r0, r3
 8009904:	f00d fa24 	bl	8016d50 <_ZNSaIcEC1Ev>
 8009908:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800990c:	f107 030c 	add.w	r3, r7, #12
 8009910:	4921      	ldr	r1, [pc, #132]	; (8009998 <_ZN6Parser11parse_whileEv+0xc0>)
 8009912:	4618      	mov	r0, r3
 8009914:	f7f7 fd11 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009918:	f107 030c 	add.w	r3, r7, #12
 800991c:	461a      	mov	r2, r3
 800991e:	2101      	movs	r1, #1
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fb4d 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009926:	f107 030c 	add.w	r3, r7, #12
 800992a:	4618      	mov	r0, r3
 800992c:	f00d fbd7 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009934:	4618      	mov	r0, r3
 8009936:	f00d fa0c 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fec6 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	st->while_body = parse_body();
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fe48 	bl	800a5d6 <_ZN6Parser10parse_bodyEv>
 8009946:	4602      	mov	r2, r0
 8009948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800994a:	605a      	str	r2, [r3, #4]
	assert_token(TOKEN_END, "\"end\" after if body");
 800994c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009950:	4618      	mov	r0, r3
 8009952:	f00d f9fd 	bl	8016d50 <_ZNSaIcEC1Ev>
 8009956:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800995a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800995e:	490f      	ldr	r1, [pc, #60]	; (800999c <_ZN6Parser11parse_whileEv+0xc4>)
 8009960:	4618      	mov	r0, r3
 8009962:	f7f7 fcea 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800996a:	461a      	mov	r2, r3
 800996c:	2114      	movs	r1, #20
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fb26 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009978:	4618      	mov	r0, r3
 800997a:	f00d fbb0 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800997e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009982:	4618      	mov	r0, r3
 8009984:	f00d f9e5 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fe9f 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	return st;
 800998e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009990:	4618      	mov	r0, r3
 8009992:	3748      	adds	r7, #72	; 0x48
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	0801a560 	.word	0x0801a560
 800999c:	0801a584 	.word	0x0801a584

080099a0 <_ZN6Parser20parse_elseif_contentEP12If_statement>:

void Parser::parse_elseif_content(If_statement *st)
{
 80099a0:	b590      	push	{r4, r7, lr}
 80099a2:	b08d      	sub	sp, #52	; 0x34
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
	get_next_token();
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fe8e 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	st->conditions.push_back(parse_expression());
 80099b0:	683c      	ldr	r4, [r7, #0]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f006 fcfa 	bl	80103ac <_ZN6Parser16parse_expressionEv>
 80099b8:	4603      	mov	r3, r0
 80099ba:	60fb      	str	r3, [r7, #12]
 80099bc:	f107 030c 	add.w	r3, r7, #12
 80099c0:	4619      	mov	r1, r3
 80099c2:	4620      	mov	r0, r4
 80099c4:	f001 f82c 	bl	800aa20 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backEOS1_>
	assert_token(TOKEN_COLON, "colon after condition expression");
 80099c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099cc:	4618      	mov	r0, r3
 80099ce:	f00d f9bf 	bl	8016d50 <_ZNSaIcEC1Ev>
 80099d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80099d6:	f107 0310 	add.w	r3, r7, #16
 80099da:	4915      	ldr	r1, [pc, #84]	; (8009a30 <_ZN6Parser20parse_elseif_contentEP12If_statement+0x90>)
 80099dc:	4618      	mov	r0, r3
 80099de:	f7f7 fcac 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80099e2:	f107 0310 	add.w	r3, r7, #16
 80099e6:	461a      	mov	r2, r3
 80099e8:	2101      	movs	r1, #1
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fae8 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80099f0:	f107 0310 	add.w	r3, r7, #16
 80099f4:	4618      	mov	r0, r3
 80099f6:	f00d fb72 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80099fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099fe:	4618      	mov	r0, r3
 8009a00:	f00d f9a7 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fe61 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	st->if_bodies.push_back(parse_body());
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	f103 040c 	add.w	r4, r3, #12
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fde0 	bl	800a5d6 <_ZN6Parser10parse_bodyEv>
 8009a16:	4603      	mov	r3, r0
 8009a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4620      	mov	r0, r4
 8009a22:	f001 f80e 	bl	800aa42 <_ZNSt6vectorIP4BodySaIS1_EE9push_backEOS1_>
}
 8009a26:	bf00      	nop
 8009a28:	3734      	adds	r7, #52	; 0x34
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd90      	pop	{r4, r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	0801a560 	.word	0x0801a560

08009a34 <_ZN6Parser18parse_else_contentEP12If_statement>:

void Parser::parse_else_content(If_statement *st)
{
 8009a34:	b590      	push	{r4, r7, lr}
 8009a36:	b08b      	sub	sp, #44	; 0x2c
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
	get_next_token();
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fe44 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_COLON, "colon after \"else\"");
 8009a44:	f107 0320 	add.w	r3, r7, #32
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f00d f981 	bl	8016d50 <_ZNSaIcEC1Ev>
 8009a4e:	f107 0220 	add.w	r2, r7, #32
 8009a52:	f107 0308 	add.w	r3, r7, #8
 8009a56:	4915      	ldr	r1, [pc, #84]	; (8009aac <_ZN6Parser18parse_else_contentEP12If_statement+0x78>)
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7f7 fc6e 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009a5e:	f107 0308 	add.w	r3, r7, #8
 8009a62:	461a      	mov	r2, r3
 8009a64:	2101      	movs	r1, #1
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 faaa 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009a6c:	f107 0308 	add.w	r3, r7, #8
 8009a70:	4618      	mov	r0, r3
 8009a72:	f00d fb34 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009a76:	f107 0320 	add.w	r3, r7, #32
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f00d f969 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fe23 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	st->if_bodies.push_back(parse_body());
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	f103 040c 	add.w	r4, r3, #12
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fda2 	bl	800a5d6 <_ZN6Parser10parse_bodyEv>
 8009a92:	4603      	mov	r3, r0
 8009a94:	627b      	str	r3, [r7, #36]	; 0x24
 8009a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	f000 ffd0 	bl	800aa42 <_ZNSt6vectorIP4BodySaIS1_EE9push_backEOS1_>
}
 8009aa2:	bf00      	nop
 8009aa4:	372c      	adds	r7, #44	; 0x2c
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd90      	pop	{r4, r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	0801a598 	.word	0x0801a598

08009ab0 <_ZN6Parser16parse_if_contentEP12If_statement>:

void Parser::parse_if_content(If_statement *st)
{
 8009ab0:	b590      	push	{r4, r7, lr}
 8009ab2:	b08d      	sub	sp, #52	; 0x34
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
	st->conditions.push_back(parse_expression());
 8009aba:	683c      	ldr	r4, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f006 fc75 	bl	80103ac <_ZN6Parser16parse_expressionEv>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	60fb      	str	r3, [r7, #12]
 8009ac6:	f107 030c 	add.w	r3, r7, #12
 8009aca:	4619      	mov	r1, r3
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 ffa7 	bl	800aa20 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backEOS1_>
	assert_token(TOKEN_COLON, "colon after condition expression");
 8009ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f00d f93a 	bl	8016d50 <_ZNSaIcEC1Ev>
 8009adc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009ae0:	f107 0310 	add.w	r3, r7, #16
 8009ae4:	4914      	ldr	r1, [pc, #80]	; (8009b38 <_ZN6Parser16parse_if_contentEP12If_statement+0x88>)
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7f7 fc27 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009aec:	f107 0310 	add.w	r3, r7, #16
 8009af0:	461a      	mov	r2, r3
 8009af2:	2101      	movs	r1, #1
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fa63 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009afa:	f107 0310 	add.w	r3, r7, #16
 8009afe:	4618      	mov	r0, r3
 8009b00:	f00d faed 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009b04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f00d f922 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fddc 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	st->if_bodies.push_back(parse_body());
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	f103 040c 	add.w	r4, r3, #12
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fd5b 	bl	800a5d6 <_ZN6Parser10parse_bodyEv>
 8009b20:	4603      	mov	r3, r0
 8009b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f000 ff89 	bl	800aa42 <_ZNSt6vectorIP4BodySaIS1_EE9push_backEOS1_>
}
 8009b30:	bf00      	nop
 8009b32:	3734      	adds	r7, #52	; 0x34
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd90      	pop	{r4, r7, pc}
 8009b38:	0801a560 	.word	0x0801a560

08009b3c <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 ff8c 	bl	800aa64 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implC1Ev>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <_ZNSt6vectorIP10ExpressionSaIS1_EEC1Ev>:
      vector() = default;
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b082      	sub	sp, #8
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7ff ffeb 	bl	8009b3c <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EEC1Ev>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <_ZNSt12_Vector_baseIP4BodySaIS1_EEC1Ev>:
      _Vector_base() = default;
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 ff82 	bl	800aa84 <_ZNSt12_Vector_baseIP4BodySaIS1_EE12_Vector_implC1Ev>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4618      	mov	r0, r3
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <_ZNSt6vectorIP4BodySaIS1_EEC1Ev>:
      vector() = default;
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b082      	sub	sp, #8
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7ff ffeb 	bl	8009b70 <_ZNSt12_Vector_baseIP4BodySaIS1_EEC1Ev>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <_ZN12If_statementC1Ev>:
public:
	~Body();
	std::vector<Statement*> statements;
};

class If_statement
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7ff ffd1 	bl	8009b56 <_ZNSt6vectorIP10ExpressionSaIS1_EEC1Ev>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	330c      	adds	r3, #12
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff ffe6 	bl	8009b8a <_ZNSt6vectorIP4BodySaIS1_EEC1Ev>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <_ZN6Parser8parse_ifEv>:

If_statement* Parser::parse_if()
{
 8009bc8:	b590      	push	{r4, r7, lr}
 8009bca:	b08b      	sub	sp, #44	; 0x2c
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
	auto st = new If_statement();
 8009bd0:	2018      	movs	r0, #24
 8009bd2:	f00d f8ac 	bl	8016d2e <_Znwj>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	461c      	mov	r4, r3
 8009bda:	4622      	mov	r2, r4
 8009bdc:	2300      	movs	r3, #0
 8009bde:	6013      	str	r3, [r2, #0]
 8009be0:	6053      	str	r3, [r2, #4]
 8009be2:	6093      	str	r3, [r2, #8]
 8009be4:	60d3      	str	r3, [r2, #12]
 8009be6:	6113      	str	r3, [r2, #16]
 8009be8:	6153      	str	r3, [r2, #20]
 8009bea:	4620      	mov	r0, r4
 8009bec:	f7ff ffda 	bl	8009ba4 <_ZN12If_statementC1Ev>
 8009bf0:	627c      	str	r4, [r7, #36]	; 0x24

	parse_if_content(st);
 8009bf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff ff5b 	bl	8009ab0 <_ZN6Parser16parse_if_contentEP12If_statement>
	while (token_buffer.get_type() == TOKEN_ELSEIF)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f005 fbc0 	bl	800f384 <_ZN5Token8get_typeEv>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b11      	cmp	r3, #17
 8009c08:	bf0c      	ite	eq
 8009c0a:	2301      	moveq	r3, #1
 8009c0c:	2300      	movne	r3, #0
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d004      	beq.n	8009c1e <_ZN6Parser8parse_ifEv+0x56>
	{
		parse_elseif_content(st);
 8009c14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7ff fec2 	bl	80099a0 <_ZN6Parser20parse_elseif_contentEP12If_statement>
	while (token_buffer.get_type() == TOKEN_ELSEIF)
 8009c1c:	e7ed      	b.n	8009bfa <_ZN6Parser8parse_ifEv+0x32>
	}
	if (token_buffer.get_type() == TOKEN_ELSE)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	3308      	adds	r3, #8
 8009c22:	4618      	mov	r0, r3
 8009c24:	f005 fbae 	bl	800f384 <_ZN5Token8get_typeEv>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b12      	cmp	r3, #18
 8009c2c:	bf0c      	ite	eq
 8009c2e:	2301      	moveq	r3, #1
 8009c30:	2300      	movne	r3, #0
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d003      	beq.n	8009c40 <_ZN6Parser8parse_ifEv+0x78>
	{
		parse_else_content(st);
 8009c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7ff fefa 	bl	8009a34 <_ZN6Parser18parse_else_contentEP12If_statement>
	}
	assert_token(TOKEN_END, "\"end\" after if body");
 8009c40:	f107 0320 	add.w	r3, r7, #32
 8009c44:	4618      	mov	r0, r3
 8009c46:	f00d f883 	bl	8016d50 <_ZNSaIcEC1Ev>
 8009c4a:	f107 0220 	add.w	r2, r7, #32
 8009c4e:	f107 0308 	add.w	r3, r7, #8
 8009c52:	490e      	ldr	r1, [pc, #56]	; (8009c8c <_ZN6Parser8parse_ifEv+0xc4>)
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7f7 fb70 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009c5a:	f107 0308 	add.w	r3, r7, #8
 8009c5e:	461a      	mov	r2, r3
 8009c60:	2114      	movs	r1, #20
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f9ac 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009c68:	f107 0308 	add.w	r3, r7, #8
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f00d fa36 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009c72:	f107 0320 	add.w	r3, r7, #32
 8009c76:	4618      	mov	r0, r3
 8009c78:	f00d f86b 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fd25 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>

	return st;
 8009c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	372c      	adds	r7, #44	; 0x2c
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd90      	pop	{r4, r7, pc}
 8009c8c:	0801a584 	.word	0x0801a584

08009c90 <_ZN6Parser20parse_variable_indexEP8Variable>:

void Parser::parse_variable_index(Variable *var)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08a      	sub	sp, #40	; 0x28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
	if (token_buffer.get_type() == TOKEN_LEFT_SQUARE)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f005 fb70 	bl	800f384 <_ZN5Token8get_typeEv>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b0d      	cmp	r3, #13
 8009ca8:	bf0c      	ite	eq
 8009caa:	2301      	moveq	r3, #1
 8009cac:	2300      	movne	r3, #0
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d02a      	beq.n	8009d0a <_ZN6Parser20parse_variable_indexEP8Variable+0x7a>
	{
		get_next_token();
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fd09 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		var->index = parse_expression();
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f006 fb76 	bl	80103ac <_ZN6Parser16parse_expressionEv>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	61da      	str	r2, [r3, #28]
		assert_token(TOKEN_RIGHT_SQUARE, "closing square bracket");
 8009cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f00d f840 	bl	8016d50 <_ZNSaIcEC1Ev>
 8009cd0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009cd4:	f107 030c 	add.w	r3, r7, #12
 8009cd8:	490f      	ldr	r1, [pc, #60]	; (8009d18 <_ZN6Parser20parse_variable_indexEP8Variable+0x88>)
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7f7 fb2d 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009ce0:	f107 030c 	add.w	r3, r7, #12
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	210e      	movs	r1, #14
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f969 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009cee:	f107 030c 	add.w	r3, r7, #12
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f00d f9f3 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f00d f828 	bl	8016d52 <_ZNSaIcED1Ev>
		get_next_token();
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fce2 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	}
	else
	{
		var->index = nullptr;
	}
}
 8009d08:	e002      	b.n	8009d10 <_ZN6Parser20parse_variable_indexEP8Variable+0x80>
		var->index = nullptr;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	61da      	str	r2, [r3, #28]
}
 8009d10:	bf00      	nop
 8009d12:	3728      	adds	r7, #40	; 0x28
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	0801a5ac 	.word	0x0801a5ac

08009d1c <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Parser::parse_member_selection_id(std::string &id)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b09e      	sub	sp, #120	; 0x78
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
	assert_token(TOKEN_COLON, "colon operator \":\"");
 8009d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f00d f810 	bl	8016d50 <_ZNSaIcEC1Ev>
 8009d30:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009d34:	f107 030c 	add.w	r3, r7, #12
 8009d38:	4930      	ldr	r1, [pc, #192]	; (8009dfc <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0>)
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7f7 fafd 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009d40:	f107 030c 	add.w	r3, r7, #12
 8009d44:	461a      	mov	r2, r3
 8009d46:	2101      	movs	r1, #1
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f939 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009d4e:	f107 030c 	add.w	r3, r7, #12
 8009d52:	4618      	mov	r0, r3
 8009d54:	f00d f9c3 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f00c fff8 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fcb2 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_IDENTIFIER, "identifier");
 8009d68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f00c ffef 	bl	8016d50 <_ZNSaIcEC1Ev>
 8009d72:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d7a:	4921      	ldr	r1, [pc, #132]	; (8009e00 <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe4>)
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7f7 fadc 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d86:	461a      	mov	r2, r3
 8009d88:	2102      	movs	r1, #2
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f918 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009d90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d94:	4618      	mov	r0, r3
 8009d96:	f00d f9a2 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009d9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f00c ffd7 	bl	8016d52 <_ZNSaIcED1Ev>
	id = std::string(std::get<std::string>(token_buffer.get_value()));
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f103 0208 	add.w	r2, r3, #8
 8009daa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009dae:	4611      	mov	r1, r2
 8009db0:	4618      	mov	r0, r3
 8009db2:	f005 fac5 	bl	800f340 <_ZN5Token9get_valueB5cxx11Ev>
 8009db6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 fe72 	bl	800aaa4 <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009dc6:	4611      	mov	r1, r2
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f00d f96e 	bl	80170aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8009dce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6838      	ldr	r0, [r7, #0]
 8009dd6:	f00d f98e 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009dda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009dde:	4618      	mov	r0, r3
 8009de0:	f00d f97d 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009de4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fc fd39 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	get_next_token();
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fc6c 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
}
 8009df4:	bf00      	nop
 8009df6:	3778      	adds	r7, #120	; 0x78
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	0801a5c4 	.word	0x0801a5c4
 8009e00:	0801a5d8 	.word	0x0801a5d8

08009e04 <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable>:

void Parser::parse_variable_id(std::string &id, Variable *var)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08a      	sub	sp, #40	; 0x28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
	if (id == "Arg")
 8009e10:	491b      	ldr	r1, [pc, #108]	; (8009e80 <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable+0x7c>)
 8009e12:	68b8      	ldr	r0, [r7, #8]
 8009e14:	f000 fe56 	bl	800aac4 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d007      	beq.n	8009e2e <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable+0x2a>
	{
		var->type = ASSIGNMENT_ARG;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	701a      	strb	r2, [r3, #0]
		parse_member_selection_id(id);
 8009e24:	68b9      	ldr	r1, [r7, #8]
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f7ff ff78 	bl	8009d1c <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009e2c:	e011      	b.n	8009e52 <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable+0x4e>
	}
	else if (id == "Par")
 8009e2e:	4915      	ldr	r1, [pc, #84]	; (8009e84 <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable+0x80>)
 8009e30:	68b8      	ldr	r0, [r7, #8]
 8009e32:	f000 fe47 	bl	800aac4 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d007      	beq.n	8009e4c <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable+0x48>
	{
		var->type = ASSIGNMENT_PAR;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	701a      	strb	r2, [r3, #0]
		parse_member_selection_id(id);
 8009e42:	68b9      	ldr	r1, [r7, #8]
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f7ff ff69 	bl	8009d1c <_ZN6Parser25parse_member_selection_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009e4a:	e002      	b.n	8009e52 <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable+0x4e>
	}
	else
	{
		var->type = ASSIGNMENT_LOCAL;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	701a      	strb	r2, [r3, #0]
	}

	var->id = std::string(id);
 8009e52:	f107 0310 	add.w	r3, r7, #16
 8009e56:	68b9      	ldr	r1, [r7, #8]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f00d fa6d 	bl	8017338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	3304      	adds	r3, #4
 8009e62:	f107 0210 	add.w	r2, r7, #16
 8009e66:	4611      	mov	r1, r2
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f00d f944 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009e6e:	f107 0310 	add.w	r3, r7, #16
 8009e72:	4618      	mov	r0, r3
 8009e74:	f00d f933 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8009e78:	bf00      	nop
 8009e7a:	3728      	adds	r7, #40	; 0x28
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	0801a5e4 	.word	0x0801a5e4
 8009e84:	0801a5e8 	.word	0x0801a5e8

08009e88 <_ZN8VariableC1Ev>:
	ASSIGNMENT_LOCAL,
	ASSIGNMENT_ARG,
	ASSIGNMENT_PAR,
}variable_type;

class Variable
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3304      	adds	r3, #4
 8009e94:	4618      	mov	r0, r3
 8009e96:	f00d f901 	bl	801709c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <_ZN6Parser14parse_variableERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

Variable* Parser::parse_variable(std::string &id)
{
 8009ea4:	b590      	push	{r4, r7, lr}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
	auto var = new Variable();
 8009eae:	2020      	movs	r0, #32
 8009eb0:	f00c ff3d 	bl	8016d2e <_Znwj>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	461c      	mov	r4, r3
 8009eb8:	4620      	mov	r0, r4
 8009eba:	2320      	movs	r3, #32
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	f00d fafc 	bl	80174bc <memset>
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f7ff ffdf 	bl	8009e88 <_ZN8VariableC1Ev>
 8009eca:	60fc      	str	r4, [r7, #12]
	parse_variable_id(id, var);
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff ff97 	bl	8009e04 <_ZN6Parser17parse_variable_idERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8Variable>
	parse_variable_index(var);
 8009ed6:	68f9      	ldr	r1, [r7, #12]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f7ff fed9 	bl	8009c90 <_ZN6Parser20parse_variable_indexEP8Variable>
	return var;
 8009ede:	68fb      	ldr	r3, [r7, #12]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd90      	pop	{r4, r7, pc}

08009ee8 <_ZN6Parser16parse_assignmentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

Assignment* Parser::parse_assignment(std::string &id)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b08a      	sub	sp, #40	; 0x28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
	auto st = new Assignment();
 8009ef2:	2008      	movs	r0, #8
 8009ef4:	f00c ff1b 	bl	8016d2e <_Znwj>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	2200      	movs	r2, #0
 8009f00:	605a      	str	r2, [r3, #4]
 8009f02:	627b      	str	r3, [r7, #36]	; 0x24
	st->var = parse_variable(id);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7ff ffcc 	bl	8009ea4 <_ZN6Parser14parse_variableERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f10:	601a      	str	r2, [r3, #0]
	assert_token(TOKEN_ASSIGN, "assignment operator \"=\"");
 8009f12:	f107 0320 	add.w	r3, r7, #32
 8009f16:	4618      	mov	r0, r3
 8009f18:	f00c ff1a 	bl	8016d50 <_ZNSaIcEC1Ev>
 8009f1c:	f107 0220 	add.w	r2, r7, #32
 8009f20:	f107 0308 	add.w	r3, r7, #8
 8009f24:	4911      	ldr	r1, [pc, #68]	; (8009f6c <_ZN6Parser16parse_assignmentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>)
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7f7 fa07 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009f2c:	f107 0308 	add.w	r3, r7, #8
 8009f30:	461a      	mov	r2, r3
 8009f32:	2118      	movs	r1, #24
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f843 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009f3a:	f107 0308 	add.w	r3, r7, #8
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f00d f8cd 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009f44:	f107 0320 	add.w	r3, r7, #32
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f00c ff02 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fbbc 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	st->value = parse_expression();
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f006 fa29 	bl	80103ac <_ZN6Parser16parse_expressionEv>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	605a      	str	r2, [r3, #4]
	return st;
 8009f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3728      	adds	r7, #40	; 0x28
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	0801a5ec 	.word	0x0801a5ec

08009f70 <_ZN6Parser12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Parser::report_error(const std::string message)
{
 8009f70:	b5b0      	push	{r4, r5, r7, lr}
 8009f72:	b088      	sub	sp, #32
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
	Trans->report_error(message, token_buffer.get_line(),
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	685c      	ldr	r4, [r3, #4]
 8009f7e:	f107 0308 	add.w	r3, r7, #8
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f00d f9d7 	bl	8017338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	3308      	adds	r3, #8
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f005 fa13 	bl	800f3ba <_ZN5Token8get_lineEv>
 8009f94:	4605      	mov	r5, r0
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	3308      	adds	r3, #8
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f005 fa27 	bl	800f3ee <_ZN5Token12get_positionEv>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	f107 0108 	add.w	r1, r7, #8
 8009fa6:	462a      	mov	r2, r5
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f005 fc5b 	bl	800f864 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
			token_buffer.get_position());
 8009fae:	f107 0308 	add.w	r3, r7, #8
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f00d f893 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8009fb8:	bf00      	nop
 8009fba:	3720      	adds	r7, #32
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bdb0      	pop	{r4, r5, r7, pc}

08009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Parser::assert_token(token_type type, const std::string message)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b096      	sub	sp, #88	; 0x58
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	72fb      	strb	r3, [r7, #11]
	if (token_buffer.get_type() != type)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3308      	adds	r3, #8
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f005 f9d6 	bl	800f384 <_ZN5Token8get_typeEv>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	461a      	mov	r2, r3
 8009fdc:	7afb      	ldrb	r3, [r7, #11]
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	bf14      	ite	ne
 8009fe2:	2301      	movne	r3, #1
 8009fe4:	2300      	moveq	r3, #0
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d02b      	beq.n	800a044 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>
	{
		std::string msg = "expected " + message + "\n";
 8009fec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	4916      	ldr	r1, [pc, #88]	; (800a04c <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>)
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f000 fd78 	bl	800aaea <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8009ffa:	f107 0310 	add.w	r3, r7, #16
 8009ffe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a002:	4a13      	ldr	r2, [pc, #76]	; (800a050 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x90>)
 800a004:	4618      	mov	r0, r3
 800a006:	f000 fd95 	bl	800ab34 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a00a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a00e:	4618      	mov	r0, r3
 800a010:	f00d f865 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		report_error(msg);
 800a014:	f107 0210 	add.w	r2, r7, #16
 800a018:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a01c:	4611      	mov	r1, r2
 800a01e:	4618      	mov	r0, r3
 800a020:	f00d f98a 	bl	8017338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a024:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a028:	4619      	mov	r1, r3
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f7ff ffa0 	bl	8009f70 <_ZN6Parser12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a030:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a034:	4618      	mov	r0, r3
 800a036:	f00d f852 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		std::string msg = "expected " + message + "\n";
 800a03a:	f107 0310 	add.w	r3, r7, #16
 800a03e:	4618      	mov	r0, r3
 800a040:	f00d f84d 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800a044:	bf00      	nop
 800a046:	3758      	adds	r7, #88	; 0x58
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	0801a604 	.word	0x0801a604
 800a050:	0801a610 	.word	0x0801a610

0800a054 <_ZN6Parser24parse_function_argumentsEP13Function_call>:

void Parser::parse_function_arguments(Function_call *f)
{
 800a054:	b590      	push	{r4, r7, lr}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
	if (token_buffer.get_type() != TOKEN_RIGHT_BRACKET)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	3308      	adds	r3, #8
 800a062:	4618      	mov	r0, r3
 800a064:	f005 f98e 	bl	800f384 <_ZN5Token8get_typeEv>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b27      	cmp	r3, #39	; 0x27
 800a06c:	bf14      	ite	ne
 800a06e:	2301      	movne	r3, #1
 800a070:	2300      	moveq	r3, #0
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b00      	cmp	r3, #0
 800a076:	d02c      	beq.n	800a0d2 <_ZN6Parser24parse_function_argumentsEP13Function_call+0x7e>
	{
		f->arguments.push_back(parse_expression());
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	f103 0418 	add.w	r4, r3, #24
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f006 f994 	bl	80103ac <_ZN6Parser16parse_expressionEv>
 800a084:	4603      	mov	r3, r0
 800a086:	60bb      	str	r3, [r7, #8]
 800a088:	f107 0308 	add.w	r3, r7, #8
 800a08c:	4619      	mov	r1, r3
 800a08e:	4620      	mov	r0, r4
 800a090:	f000 fcc6 	bl	800aa20 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backEOS1_>
		while (token_buffer.get_type() == TOKEN_COMA)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3308      	adds	r3, #8
 800a098:	4618      	mov	r0, r3
 800a09a:	f005 f973 	bl	800f384 <_ZN5Token8get_typeEv>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b0c      	cmp	r3, #12
 800a0a2:	bf0c      	ite	eq
 800a0a4:	2301      	moveq	r3, #1
 800a0a6:	2300      	movne	r3, #0
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d011      	beq.n	800a0d2 <_ZN6Parser24parse_function_argumentsEP13Function_call+0x7e>
		{
			get_next_token();
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fb0c 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
			f->arguments.push_back(parse_expression());
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	f103 0418 	add.w	r4, r3, #24
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f006 f976 	bl	80103ac <_ZN6Parser16parse_expressionEv>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	f107 030c 	add.w	r3, r7, #12
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f000 fca8 	bl	800aa20 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backEOS1_>
		while (token_buffer.get_type() == TOKEN_COMA)
 800a0d0:	e7e0      	b.n	800a094 <_ZN6Parser24parse_function_argumentsEP13Function_call+0x40>
		}
	}
}
 800a0d2:	bf00      	nop
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd90      	pop	{r4, r7, pc}

0800a0da <_ZN13Function_callC1Ev>:
	variable_type type;
	std::string id;
	Expression* index;
};

class Function_call
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b082      	sub	sp, #8
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f00c ffd9 	bl	801709c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	3318      	adds	r3, #24
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7ff fd31 	bl	8009b56 <_ZNSt6vectorIP10ExpressionSaIS1_EEC1Ev>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
	...

0800a100 <_ZN6Parser19parse_function_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

Function_call* Parser::parse_function_call(std::string &id)
{
 800a100:	b590      	push	{r4, r7, lr}
 800a102:	b091      	sub	sp, #68	; 0x44
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
	auto f = new Function_call();
 800a10a:	2024      	movs	r0, #36	; 0x24
 800a10c:	f00c fe0f 	bl	8016d2e <_Znwj>
 800a110:	4603      	mov	r3, r0
 800a112:	461c      	mov	r4, r3
 800a114:	4620      	mov	r0, r4
 800a116:	2324      	movs	r3, #36	; 0x24
 800a118:	461a      	mov	r2, r3
 800a11a:	2100      	movs	r1, #0
 800a11c:	f00d f9ce 	bl	80174bc <memset>
 800a120:	4620      	mov	r0, r4
 800a122:	f7ff ffda 	bl	800a0da <_ZN13Function_callC1Ev>
 800a126:	63fc      	str	r4, [r7, #60]	; 0x3c
	f->id = std::string(id);
 800a128:	f107 0308 	add.w	r3, r7, #8
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	4618      	mov	r0, r3
 800a130:	f00d f902 	bl	8017338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a136:	f107 0208 	add.w	r2, r7, #8
 800a13a:	4611      	mov	r1, r2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f00c ffda 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a142:	f107 0308 	add.w	r3, r7, #8
 800a146:	4618      	mov	r0, r3
 800a148:	f00c ffc9 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	get_next_token();
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fabd 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	parse_function_arguments(f);
 800a152:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7ff ff7d 	bl	800a054 <_ZN6Parser24parse_function_argumentsEP13Function_call>
	assert_token(TOKEN_RIGHT_BRACKET, "closing bracket");
 800a15a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a15e:	4618      	mov	r0, r3
 800a160:	f00c fdf6 	bl	8016d50 <_ZNSaIcEC1Ev>
 800a164:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a168:	f107 0320 	add.w	r3, r7, #32
 800a16c:	490e      	ldr	r1, [pc, #56]	; (800a1a8 <_ZN6Parser19parse_function_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 800a16e:	4618      	mov	r0, r3
 800a170:	f7f7 f8e3 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a174:	f107 0320 	add.w	r3, r7, #32
 800a178:	461a      	mov	r2, r3
 800a17a:	2127      	movs	r1, #39	; 0x27
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7ff ff1f 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a182:	f107 0320 	add.w	r3, r7, #32
 800a186:	4618      	mov	r0, r3
 800a188:	f00c ffa9 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a18c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a190:	4618      	mov	r0, r3
 800a192:	f00c fdde 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fa98 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	return f;
 800a19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3744      	adds	r7, #68	; 0x44
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd90      	pop	{r4, r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	0801a614 	.word	0x0801a614

0800a1ac <_ZN11Method_callC1Ev>:
	~Function_call();
	std::string id;
	std::vector<Expression*> arguments;
};

class Method_call
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f00c ff70 	bl	801709c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
	...

0800a1c8 <_ZN6Parser17parse_method_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

Method_call* Parser::parse_method_call(std::string &id)
{
 800a1c8:	b590      	push	{r4, r7, lr}
 800a1ca:	b09f      	sub	sp, #124	; 0x7c
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
	auto m = new Method_call();
 800a1d2:	201c      	movs	r0, #28
 800a1d4:	f00c fdab 	bl	8016d2e <_Znwj>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	461c      	mov	r4, r3
 800a1dc:	4622      	mov	r2, r4
 800a1de:	2300      	movs	r3, #0
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	6053      	str	r3, [r2, #4]
 800a1e4:	6093      	str	r3, [r2, #8]
 800a1e6:	60d3      	str	r3, [r2, #12]
 800a1e8:	6113      	str	r3, [r2, #16]
 800a1ea:	6153      	str	r3, [r2, #20]
 800a1ec:	6193      	str	r3, [r2, #24]
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f7ff ffdc 	bl	800a1ac <_ZN11Method_callC1Ev>
 800a1f4:	677c      	str	r4, [r7, #116]	; 0x74
	m->vector_id = std::string(id);
 800a1f6:	f107 0308 	add.w	r3, r7, #8
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f00d f89b 	bl	8017338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a204:	f107 0208 	add.w	r2, r7, #8
 800a208:	4611      	mov	r1, r2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f00c ff73 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a210:	f107 0308 	add.w	r3, r7, #8
 800a214:	4618      	mov	r0, r3
 800a216:	f00c ff62 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	get_next_token();
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fa56 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_IDENTIFIER, "method identifier");
 800a220:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a224:	4618      	mov	r0, r3
 800a226:	f00c fd93 	bl	8016d50 <_ZNSaIcEC1Ev>
 800a22a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a22e:	f107 0320 	add.w	r3, r7, #32
 800a232:	492d      	ldr	r1, [pc, #180]	; (800a2e8 <_ZN6Parser17parse_method_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x120>)
 800a234:	4618      	mov	r0, r3
 800a236:	f7f7 f880 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a23a:	f107 0320 	add.w	r3, r7, #32
 800a23e:	461a      	mov	r2, r3
 800a240:	2102      	movs	r1, #2
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7ff febc 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a248:	f107 0320 	add.w	r3, r7, #32
 800a24c:	4618      	mov	r0, r3
 800a24e:	f00c ff46 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a252:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a256:	4618      	mov	r0, r3
 800a258:	f00c fd7b 	bl	8016d52 <_ZNSaIcED1Ev>
	id = std::get<std::string>(token_buffer.get_value());
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f103 0208 	add.w	r2, r3, #8
 800a262:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a266:	4611      	mov	r1, r2
 800a268:	4618      	mov	r0, r3
 800a26a:	f005 f869 	bl	800f340 <_ZN5Token9get_valueB5cxx11Ev>
 800a26e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fc16 	bl	800aaa4 <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 800a278:	4603      	mov	r3, r0
 800a27a:	4619      	mov	r1, r3
 800a27c:	6838      	ldr	r0, [r7, #0]
 800a27e:	f00c ff3a 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a282:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a286:	4618      	mov	r0, r3
 800a288:	f7fc faea 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	get_next_token();
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 fa1d 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_LEFT_BRACKET, "opening bracket");
 800a292:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a296:	4618      	mov	r0, r3
 800a298:	f00c fd5a 	bl	8016d50 <_ZNSaIcEC1Ev>
 800a29c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a2a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a2a4:	4911      	ldr	r1, [pc, #68]	; (800a2ec <_ZN6Parser17parse_method_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x124>)
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7f7 f847 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a2ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	2126      	movs	r1, #38	; 0x26
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7ff fe83 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a2ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f00c ff0d 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a2c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f00c fd42 	bl	8016d52 <_ZNSaIcED1Ev>
	m->call = parse_function_call(id);
 800a2ce:	6839      	ldr	r1, [r7, #0]
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7ff ff15 	bl	800a100 <_ZN6Parser19parse_function_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2da:	619a      	str	r2, [r3, #24]
	return m;
 800a2dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	377c      	adds	r7, #124	; 0x7c
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd90      	pop	{r4, r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	0801a624 	.word	0x0801a624
 800a2ec:	0801a638 	.word	0x0801a638

0800a2f0 <_ZN6Parser26parse_identifier_statementEP9Statement>:

void Parser::parse_identifier_statement(Statement *s)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b092      	sub	sp, #72	; 0x48
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
	std::string id = std::get<std::string>(token_buffer.get_value());
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f103 0208 	add.w	r2, r3, #8
 800a300:	f107 0320 	add.w	r3, r7, #32
 800a304:	4611      	mov	r1, r2
 800a306:	4618      	mov	r0, r3
 800a308:	f005 f81a 	bl	800f340 <_ZN5Token9get_valueB5cxx11Ev>
 800a30c:	f107 0320 	add.w	r3, r7, #32
 800a310:	4618      	mov	r0, r3
 800a312:	f000 fbc7 	bl	800aaa4 <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 800a316:	4602      	mov	r2, r0
 800a318:	f107 0308 	add.w	r3, r7, #8
 800a31c:	4611      	mov	r1, r2
 800a31e:	4618      	mov	r0, r3
 800a320:	f00c fec3 	bl	80170aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a324:	f107 0320 	add.w	r3, r7, #32
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fc fa99 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	get_next_token();
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f9cc 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	if (token_buffer.get_type() == TOKEN_LEFT_BRACKET)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	3308      	adds	r3, #8
 800a338:	4618      	mov	r0, r3
 800a33a:	f005 f823 	bl	800f384 <_ZN5Token8get_typeEv>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b26      	cmp	r3, #38	; 0x26
 800a342:	bf0c      	ite	eq
 800a344:	2301      	moveq	r3, #1
 800a346:	2300      	movne	r3, #0
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d013      	beq.n	800a376 <_ZN6Parser26parse_identifier_statementEP9Statement+0x86>
	{
		s->type = STATEMENT_FUNCTION_CALL;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2201      	movs	r2, #1
 800a352:	701a      	strb	r2, [r3, #0]
		s->content = parse_function_call(id);
 800a354:	f107 0308 	add.w	r3, r7, #8
 800a358:	4619      	mov	r1, r3
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7ff fed0 	bl	800a100 <_ZN6Parser19parse_function_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a360:	4603      	mov	r3, r0
 800a362:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	3304      	adds	r3, #4
 800a368:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a36c:	4611      	mov	r1, r2
 800a36e:	4618      	mov	r0, r3
 800a370:	f000 fc0a 	bl	800ab88 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
 800a374:	e033      	b.n	800a3de <_ZN6Parser26parse_identifier_statementEP9Statement+0xee>
	}
	else if(token_buffer.get_type() == TOKEN_DOT)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	3308      	adds	r3, #8
 800a37a:	4618      	mov	r0, r3
 800a37c:	f005 f802 	bl	800f384 <_ZN5Token8get_typeEv>
 800a380:	4603      	mov	r3, r0
 800a382:	2b0b      	cmp	r3, #11
 800a384:	bf0c      	ite	eq
 800a386:	2301      	moveq	r3, #1
 800a388:	2300      	movne	r3, #0
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d013      	beq.n	800a3b8 <_ZN6Parser26parse_identifier_statementEP9Statement+0xc8>
	{
		s->type = STATEMENT_METHOD_CALL;
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	2202      	movs	r2, #2
 800a394:	701a      	strb	r2, [r3, #0]
		s->content = parse_method_call(id);
 800a396:	f107 0308 	add.w	r3, r7, #8
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f7ff ff13 	bl	800a1c8 <_ZN6Parser17parse_method_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	643b      	str	r3, [r7, #64]	; 0x40
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 fc13 	bl	800abdc <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
 800a3b6:	e012      	b.n	800a3de <_ZN6Parser26parse_identifier_statementEP9Statement+0xee>
	}
	else
	{
		s->type = STATEMENT_ASSIGNMENT;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	701a      	strb	r2, [r3, #0]
		s->content = parse_assignment(id);
 800a3be:	f107 0308 	add.w	r3, r7, #8
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff fd8f 	bl	8009ee8 <_ZN6Parser16parse_assignmentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	647b      	str	r3, [r7, #68]	; 0x44
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a3d6:	4611      	mov	r1, r2
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 fc29 	bl	800ac30 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
	std::string id = std::get<std::string>(token_buffer.get_value());
 800a3de:	f107 0308 	add.w	r3, r7, #8
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f00c fe7b 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800a3e8:	bf00      	nop
 800a3ea:	3748      	adds	r7, #72	; 0x48
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1Ev>:
      variant() = default;
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 fc8d 	bl	800ad1a <_ZNSt8__detail9__variant13_Variant_baseIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1Ev>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4618      	mov	r0, r3
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <_ZN9StatementC1Ev>:
	STATEMENT_IF
}statement_type;

typedef std::variant<Assignment*, Function_call*, Method_call*, While_statement*, If_statement*> statement_content;

class Statement
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b082      	sub	sp, #8
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	3304      	adds	r3, #4
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff ffea 	bl	800a3f0 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1Ev>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4618      	mov	r0, r3
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <_ZN6Parser15parse_statementEv>:

Statement* Parser::parse_statement() //todo refactor
{
 800a428:	b590      	push	{r4, r7, lr}
 800a42a:	b08d      	sub	sp, #52	; 0x34
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
	auto s = new Statement();
 800a430:	200c      	movs	r0, #12
 800a432:	f00c fc7c 	bl	8016d2e <_Znwj>
 800a436:	4603      	mov	r3, r0
 800a438:	461c      	mov	r4, r3
 800a43a:	2300      	movs	r3, #0
 800a43c:	7023      	strb	r3, [r4, #0]
 800a43e:	2300      	movs	r3, #0
 800a440:	6063      	str	r3, [r4, #4]
 800a442:	2300      	movs	r3, #0
 800a444:	7223      	strb	r3, [r4, #8]
 800a446:	4620      	mov	r0, r4
 800a448:	f7ff ffdf 	bl	800a40a <_ZN9StatementC1Ev>
 800a44c:	62fc      	str	r4, [r7, #44]	; 0x2c
	switch (token_buffer.get_type())
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	3308      	adds	r3, #8
 800a452:	4618      	mov	r0, r3
 800a454:	f004 ff96 	bl	800f384 <_ZN5Token8get_typeEv>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b13      	cmp	r3, #19
 800a45c:	d00b      	beq.n	800a476 <_ZN6Parser15parse_statementEv+0x4e>
 800a45e:	2b13      	cmp	r3, #19
 800a460:	dc31      	bgt.n	800a4c6 <_ZN6Parser15parse_statementEv+0x9e>
 800a462:	2b02      	cmp	r3, #2
 800a464:	d002      	beq.n	800a46c <_ZN6Parser15parse_statementEv+0x44>
 800a466:	2b10      	cmp	r3, #16
 800a468:	d019      	beq.n	800a49e <_ZN6Parser15parse_statementEv+0x76>
 800a46a:	e02c      	b.n	800a4c6 <_ZN6Parser15parse_statementEv+0x9e>
	{
	case TOKEN_IDENTIFIER:
		parse_identifier_statement(s);
 800a46c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7ff ff3e 	bl	800a2f0 <_ZN6Parser26parse_identifier_statementEP9Statement>
		break;
 800a474:	e045      	b.n	800a502 <_ZN6Parser15parse_statementEv+0xda>
	case TOKEN_WHILE:
		s->type = STATEMENT_WHILE;
 800a476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a478:	2203      	movs	r2, #3
 800a47a:	701a      	strb	r2, [r3, #0]
		get_next_token();
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f925 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		s->content = parse_while();
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7ff fa28 	bl	80098d8 <_ZN6Parser11parse_whileEv>
 800a488:	4603      	mov	r3, r0
 800a48a:	60bb      	str	r3, [r7, #8]
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	3304      	adds	r3, #4
 800a490:	f107 0208 	add.w	r2, r7, #8
 800a494:	4611      	mov	r1, r2
 800a496:	4618      	mov	r0, r3
 800a498:	f000 fc4c 	bl	800ad34 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
		break;
 800a49c:	e031      	b.n	800a502 <_ZN6Parser15parse_statementEv+0xda>
	case TOKEN_IF:
		s->type = STATEMENT_IF;
 800a49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a0:	2204      	movs	r2, #4
 800a4a2:	701a      	strb	r2, [r3, #0]
		get_next_token();
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f911 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		s->content = parse_if();
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff fb8c 	bl	8009bc8 <_ZN6Parser8parse_ifEv>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	3304      	adds	r3, #4
 800a4b8:	f107 020c 	add.w	r2, r7, #12
 800a4bc:	4611      	mov	r1, r2
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 fc62 	bl	800ad88 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
		break;
 800a4c4:	e01d      	b.n	800a502 <_ZN6Parser15parse_statementEv+0xda>
	default:
		report_error("expected statement:\nidentifier, if, while\n");
 800a4c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f00c fc40 	bl	8016d50 <_ZNSaIcEC1Ev>
 800a4d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a4d4:	f107 0310 	add.w	r3, r7, #16
 800a4d8:	490c      	ldr	r1, [pc, #48]	; (800a50c <_ZN6Parser15parse_statementEv+0xe4>)
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7f6 ff2d 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a4e0:	f107 0310 	add.w	r3, r7, #16
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff fd42 	bl	8009f70 <_ZN6Parser12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a4ec:	f107 0310 	add.w	r3, r7, #16
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f00c fdf4 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a4f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f00c fc29 	bl	8016d52 <_ZNSaIcED1Ev>
		break;
 800a500:	bf00      	nop
	}
	return s;
 800a502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a504:	4618      	mov	r0, r3
 800a506:	3734      	adds	r7, #52	; 0x34
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd90      	pop	{r4, r7, pc}
 800a50c:	0801a648 	.word	0x0801a648

0800a510 <_ZN6Parser24is_token_statement_firstEv>:

bool Parser::is_token_statement_first()
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
	return token_buffer.get_type() == TOKEN_IDENTIFIER
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	3308      	adds	r3, #8
 800a51c:	4618      	mov	r0, r3
 800a51e:	f004 ff31 	bl	800f384 <_ZN5Token8get_typeEv>
 800a522:	4603      	mov	r3, r0
			|| token_buffer.get_type() == TOKEN_WHILE
			|| token_buffer.get_type() == TOKEN_IF;
 800a524:	2b02      	cmp	r3, #2
 800a526:	d00f      	beq.n	800a548 <_ZN6Parser24is_token_statement_firstEv+0x38>
			|| token_buffer.get_type() == TOKEN_WHILE
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	3308      	adds	r3, #8
 800a52c:	4618      	mov	r0, r3
 800a52e:	f004 ff29 	bl	800f384 <_ZN5Token8get_typeEv>
 800a532:	4603      	mov	r3, r0
 800a534:	2b13      	cmp	r3, #19
 800a536:	d007      	beq.n	800a548 <_ZN6Parser24is_token_statement_firstEv+0x38>
			|| token_buffer.get_type() == TOKEN_IF;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	3308      	adds	r3, #8
 800a53c:	4618      	mov	r0, r3
 800a53e:	f004 ff21 	bl	800f384 <_ZN5Token8get_typeEv>
 800a542:	4603      	mov	r3, r0
 800a544:	2b10      	cmp	r3, #16
 800a546:	d101      	bne.n	800a54c <_ZN6Parser24is_token_statement_firstEv+0x3c>
 800a548:	2301      	movs	r3, #1
 800a54a:	e000      	b.n	800a54e <_ZN6Parser24is_token_statement_firstEv+0x3e>
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <_ZN6Parser13skip_newlinesEv>:

void Parser::skip_newlines()
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b082      	sub	sp, #8
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
	while (token_buffer.get_type() == TOKEN_NEWLINE)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	3308      	adds	r3, #8
 800a562:	4618      	mov	r0, r3
 800a564:	f004 ff0e 	bl	800f384 <_ZN5Token8get_typeEv>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b0a      	cmp	r3, #10
 800a56c:	bf0c      	ite	eq
 800a56e:	2301      	moveq	r3, #1
 800a570:	2300      	movne	r3, #0
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	d003      	beq.n	800a580 <_ZN6Parser13skip_newlinesEv+0x2a>
	{
		get_next_token();
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f8a7 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	while (token_buffer.get_type() == TOKEN_NEWLINE)
 800a57e:	e7ee      	b.n	800a55e <_ZN6Parser13skip_newlinesEv+0x8>
	}
}
 800a580:	bf00      	nop
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <_ZNSt12_Vector_baseIP9StatementSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4618      	mov	r0, r3
 800a594:	f000 fc22 	bl	800addc <_ZNSt12_Vector_baseIP9StatementSaIS1_EE12_Vector_implC1Ev>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <_ZNSt6vectorIP9StatementSaIS1_EEC1Ev>:
      vector() = default;
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b082      	sub	sp, #8
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7ff ffeb 	bl	800a588 <_ZNSt12_Vector_baseIP9StatementSaIS1_EEC1Ev>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <_ZN4BodyC1Ev>:
class Body
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7ff ffeb 	bl	800a5a2 <_ZNSt6vectorIP9StatementSaIS1_EEC1Ev>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <_ZN6Parser10parse_bodyEv>:

Body* Parser::parse_body()
{
 800a5d6:	b590      	push	{r4, r7, lr}
 800a5d8:	b085      	sub	sp, #20
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
	auto bod = new Body();
 800a5de:	200c      	movs	r0, #12
 800a5e0:	f00c fba5 	bl	8016d2e <_Znwj>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	461c      	mov	r4, r3
 800a5e8:	4622      	mov	r2, r4
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	6013      	str	r3, [r2, #0]
 800a5ee:	6053      	str	r3, [r2, #4]
 800a5f0:	6093      	str	r3, [r2, #8]
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f7ff ffe2 	bl	800a5bc <_ZN4BodyC1Ev>
 800a5f8:	60fc      	str	r4, [r7, #12]
	while (is_token_statement_first())
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7ff ff88 	bl	800a510 <_ZN6Parser24is_token_statement_firstEv>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00f      	beq.n	800a626 <_ZN6Parser10parse_bodyEv+0x50>
	{
		bod->statements.push_back(parse_statement());
 800a606:	68fc      	ldr	r4, [r7, #12]
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff ff0d 	bl	800a428 <_ZN6Parser15parse_statementEv>
 800a60e:	4603      	mov	r3, r0
 800a610:	60bb      	str	r3, [r7, #8]
 800a612:	f107 0308 	add.w	r3, r7, #8
 800a616:	4619      	mov	r1, r3
 800a618:	4620      	mov	r0, r4
 800a61a:	f000 fbef 	bl	800adfc <_ZNSt6vectorIP9StatementSaIS1_EE9push_backEOS1_>
		skip_newlines();
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff ff99 	bl	800a556 <_ZN6Parser13skip_newlinesEv>
	while (is_token_statement_first())
 800a624:	e7e9      	b.n	800a5fa <_ZN6Parser10parse_bodyEv+0x24>
	}
	return bod;
 800a626:	68fb      	ldr	r3, [r7, #12]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3714      	adds	r7, #20
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd90      	pop	{r4, r7, pc}

0800a630 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>:
    struct _Move_assign_base : _Copy_assign_alias<_Types...>
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	4611      	mov	r1, r2
 800a640:	4618      	mov	r0, r3
 800a642:	f000 fd8f 	bl	800b164 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4618      	mov	r0, r3
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>:
    struct _Variant_base : _Move_assign_alias<_Types...>
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	4611      	mov	r1, r2
 800a660:	4618      	mov	r0, r3
 800a662:	f7ff ffe5 	bl	800a630 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4618      	mov	r0, r3
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS6_>:
    class variant
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	4611      	mov	r1, r2
 800a680:	4618      	mov	r0, r3
 800a682:	f7ff ffe5 	bl	800a650 <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4618      	mov	r0, r3
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <_ZN5TokenaSERKS_>:
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	781a      	ldrb	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	701a      	strb	r2, [r3, #0]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	1d1a      	adds	r2, r3, #4
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	4611      	mov	r1, r2
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff ffdf 	bl	800a670 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS6_>
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	6a1a      	ldr	r2, [r3, #32]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	621a      	str	r2, [r3, #32]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	625a      	str	r2, [r3, #36]	; 0x24
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <_ZN6Parser14get_next_tokenEv>:

void Parser::get_next_token()
{
 800a6cc:	b5b0      	push	{r4, r5, r7, lr}
 800a6ce:	b09a      	sub	sp, #104	; 0x68
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
	token_buffer = Lex->build_token();
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	f107 030c 	add.w	r3, r7, #12
 800a6dc:	4611      	mov	r1, r2
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fc fcf0 	bl	80070c4 <_ZN5Lexer11build_tokenEv>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	3308      	adds	r3, #8
 800a6e8:	f107 020c 	add.w	r2, r7, #12
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7ff ffce 	bl	800a690 <_ZN5TokenaSERKS_>
 800a6f4:	f107 030c 	add.w	r3, r7, #12
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f004 fe13 	bl	800f324 <_ZN5TokenD1Ev>
	if (token_buffer.get_type() == TOKEN_ERROR)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	3308      	adds	r3, #8
 800a702:	4618      	mov	r0, r3
 800a704:	f004 fe3e 	bl	800f384 <_ZN5Token8get_typeEv>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	bf0c      	ite	eq
 800a70e:	2301      	moveq	r3, #1
 800a710:	2300      	movne	r3, #0
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	d032      	beq.n	800a77e <_ZN6Parser14get_next_tokenEv+0xb2>
	{
		Trans->report_error(std::get<std::string>(token_buffer.get_value()),
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685c      	ldr	r4, [r3, #4]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f103 0208 	add.w	r2, r3, #8
 800a722:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a726:	4611      	mov	r1, r2
 800a728:	4618      	mov	r0, r3
 800a72a:	f004 fe09 	bl	800f340 <_ZN5Token9get_valueB5cxx11Ev>
 800a72e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a732:	4618      	mov	r0, r3
 800a734:	f000 f9b6 	bl	800aaa4 <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 800a738:	4602      	mov	r2, r0
 800a73a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a73e:	4611      	mov	r1, r2
 800a740:	4618      	mov	r0, r3
 800a742:	f00c fcb2 	bl	80170aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	3308      	adds	r3, #8
 800a74a:	4618      	mov	r0, r3
 800a74c:	f004 fe35 	bl	800f3ba <_ZN5Token8get_lineEv>
 800a750:	4605      	mov	r5, r0
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	3308      	adds	r3, #8
 800a756:	4618      	mov	r0, r3
 800a758:	f004 fe49 	bl	800f3ee <_ZN5Token12get_positionEv>
 800a75c:	4603      	mov	r3, r0
 800a75e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a762:	462a      	mov	r2, r5
 800a764:	4620      	mov	r0, r4
 800a766:	f005 f87d 	bl	800f864 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
				token_buffer.get_line(), token_buffer.get_position());
 800a76a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a76e:	4618      	mov	r0, r3
 800a770:	f00c fcb5 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Trans->report_error(std::get<std::string>(token_buffer.get_value()),
 800a774:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fc f871 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	}
}
 800a77e:	bf00      	nop
 800a780:	3768      	adds	r7, #104	; 0x68
 800a782:	46bd      	mov	sp, r7
 800a784:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a788 <_ZN6Parser11parse_setupEP7Program>:

void Parser::parse_setup(Program *Prog)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b090      	sub	sp, #64	; 0x40
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
	get_next_token();
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7ff ff9a 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_SETUP, "\"setup\" keyword");
 800a798:	f107 0320 	add.w	r3, r7, #32
 800a79c:	4618      	mov	r0, r3
 800a79e:	f00c fad7 	bl	8016d50 <_ZNSaIcEC1Ev>
 800a7a2:	f107 0220 	add.w	r2, r7, #32
 800a7a6:	f107 0308 	add.w	r3, r7, #8
 800a7aa:	4923      	ldr	r1, [pc, #140]	; (800a838 <_ZN6Parser11parse_setupEP7Program+0xb0>)
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7f6 fdc4 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a7b2:	f107 0308 	add.w	r3, r7, #8
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	2107      	movs	r1, #7
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f7ff fc00 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a7c0:	f107 0308 	add.w	r3, r7, #8
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f00c fc8a 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a7ca:	f107 0320 	add.w	r3, r7, #32
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f00c fabf 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7ff ff79 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_COLON, "colon after setup");
 800a7da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f00c fab6 	bl	8016d50 <_ZNSaIcEC1Ev>
 800a7e4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a7e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7ec:	4913      	ldr	r1, [pc, #76]	; (800a83c <_ZN6Parser11parse_setupEP7Program+0xb4>)
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7f6 fda3 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a7f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7ff fbdf 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a806:	4618      	mov	r0, r3
 800a808:	f00c fc69 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a80c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a810:	4618      	mov	r0, r3
 800a812:	f00c fa9e 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7ff ff58 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	skip_newlines();
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f7ff fe9a 	bl	800a556 <_ZN6Parser13skip_newlinesEv>
	Prog->setup = parse_body();
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff fed7 	bl	800a5d6 <_ZN6Parser10parse_bodyEv>
 800a828:	4602      	mov	r2, r0
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	601a      	str	r2, [r3, #0]
}
 800a82e:	bf00      	nop
 800a830:	3740      	adds	r7, #64	; 0x40
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	0801a674 	.word	0x0801a674
 800a83c:	0801a684 	.word	0x0801a684

0800a840 <_ZN6Parser10parse_loopEP7Program>:

void Parser::parse_loop(Program *Prog)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b090      	sub	sp, #64	; 0x40
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
	assert_token(TOKEN_LOOP, "\"loop\" keyword");
 800a84a:	f107 0320 	add.w	r3, r7, #32
 800a84e:	4618      	mov	r0, r3
 800a850:	f00c fa7e 	bl	8016d50 <_ZNSaIcEC1Ev>
 800a854:	f107 0220 	add.w	r2, r7, #32
 800a858:	f107 0308 	add.w	r3, r7, #8
 800a85c:	4922      	ldr	r1, [pc, #136]	; (800a8e8 <_ZN6Parser10parse_loopEP7Program+0xa8>)
 800a85e:	4618      	mov	r0, r3
 800a860:	f7f6 fd6b 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a864:	f107 0308 	add.w	r3, r7, #8
 800a868:	461a      	mov	r2, r3
 800a86a:	2108      	movs	r1, #8
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff fba7 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a872:	f107 0308 	add.w	r3, r7, #8
 800a876:	4618      	mov	r0, r3
 800a878:	f00c fc31 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a87c:	f107 0320 	add.w	r3, r7, #32
 800a880:	4618      	mov	r0, r3
 800a882:	f00c fa66 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7ff ff20 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_COLON, "colon after loop");
 800a88c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a890:	4618      	mov	r0, r3
 800a892:	f00c fa5d 	bl	8016d50 <_ZNSaIcEC1Ev>
 800a896:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a89a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a89e:	4913      	ldr	r1, [pc, #76]	; (800a8ec <_ZN6Parser10parse_loopEP7Program+0xac>)
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7f6 fd4a 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a8a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f7ff fb86 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a8b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f00c fc10 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a8be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f00c fa45 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7ff feff 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	skip_newlines();
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f7ff fe41 	bl	800a556 <_ZN6Parser13skip_newlinesEv>
	Prog->loop = parse_body();
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7ff fe7e 	bl	800a5d6 <_ZN6Parser10parse_bodyEv>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	605a      	str	r2, [r3, #4]
}
 800a8e0:	bf00      	nop
 800a8e2:	3740      	adds	r7, #64	; 0x40
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	0801a698 	.word	0x0801a698
 800a8ec:	0801a6a8 	.word	0x0801a6a8

0800a8f0 <_ZN6Parser12parse_finishEP7Program>:

void Parser::parse_finish(Program *Prog)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b090      	sub	sp, #64	; 0x40
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
	assert_token(TOKEN_FINISH, "\"finish\" keyword");
 800a8fa:	f107 0320 	add.w	r3, r7, #32
 800a8fe:	4618      	mov	r0, r3
 800a900:	f00c fa26 	bl	8016d50 <_ZNSaIcEC1Ev>
 800a904:	f107 0220 	add.w	r2, r7, #32
 800a908:	f107 0308 	add.w	r3, r7, #8
 800a90c:	4922      	ldr	r1, [pc, #136]	; (800a998 <_ZN6Parser12parse_finishEP7Program+0xa8>)
 800a90e:	4618      	mov	r0, r3
 800a910:	f7f6 fd13 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a914:	f107 0308 	add.w	r3, r7, #8
 800a918:	461a      	mov	r2, r3
 800a91a:	2109      	movs	r1, #9
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7ff fb4f 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a922:	f107 0308 	add.w	r3, r7, #8
 800a926:	4618      	mov	r0, r3
 800a928:	f00c fbd9 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a92c:	f107 0320 	add.w	r3, r7, #32
 800a930:	4618      	mov	r0, r3
 800a932:	f00c fa0e 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7ff fec8 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	assert_token(TOKEN_COLON, "colon after finish");
 800a93c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a940:	4618      	mov	r0, r3
 800a942:	f00c fa05 	bl	8016d50 <_ZNSaIcEC1Ev>
 800a946:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a94a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a94e:	4913      	ldr	r1, [pc, #76]	; (800a99c <_ZN6Parser12parse_finishEP7Program+0xac>)
 800a950:	4618      	mov	r0, r3
 800a952:	f7f6 fcf2 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a95a:	461a      	mov	r2, r3
 800a95c:	2101      	movs	r1, #1
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7ff fb2e 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a968:	4618      	mov	r0, r3
 800a96a:	f00c fbb8 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a96e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a972:	4618      	mov	r0, r3
 800a974:	f00c f9ed 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7ff fea7 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	skip_newlines();
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7ff fde9 	bl	800a556 <_ZN6Parser13skip_newlinesEv>
	Prog->finish = parse_body();
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7ff fe26 	bl	800a5d6 <_ZN6Parser10parse_bodyEv>
 800a98a:	4602      	mov	r2, r0
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	609a      	str	r2, [r3, #8]
}
 800a990:	bf00      	nop
 800a992:	3740      	adds	r7, #64	; 0x40
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	0801a6bc 	.word	0x0801a6bc
 800a99c:	0801a6d0 	.word	0x0801a6d0

0800a9a0 <_ZN6Parser13parse_programEv>:

Program* Parser::parse_program()
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b08a      	sub	sp, #40	; 0x28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
	auto Prog = new Program();
 800a9a8:	200c      	movs	r0, #12
 800a9aa:	f00c f9c0 	bl	8016d2e <_Znwj>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	601a      	str	r2, [r3, #0]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	605a      	str	r2, [r3, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	609a      	str	r2, [r3, #8]
 800a9bc:	627b      	str	r3, [r7, #36]	; 0x24
	parse_setup(Prog);
 800a9be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7ff fee1 	bl	800a788 <_ZN6Parser11parse_setupEP7Program>
	parse_loop(Prog);
 800a9c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f7ff ff39 	bl	800a840 <_ZN6Parser10parse_loopEP7Program>
	parse_finish(Prog);
 800a9ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff ff8d 	bl	800a8f0 <_ZN6Parser12parse_finishEP7Program>
	assert_token(TOKEN_END_OF_FILE, "end of file");
 800a9d6:	f107 0320 	add.w	r3, r7, #32
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f00c f9b8 	bl	8016d50 <_ZNSaIcEC1Ev>
 800a9e0:	f107 0220 	add.w	r2, r7, #32
 800a9e4:	f107 0308 	add.w	r3, r7, #8
 800a9e8:	490c      	ldr	r1, [pc, #48]	; (800aa1c <_ZN6Parser13parse_programEv+0x7c>)
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7f6 fca5 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800a9f0:	f107 0308 	add.w	r3, r7, #8
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	2125      	movs	r1, #37	; 0x25
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7ff fae1 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a9fe:	f107 0308 	add.w	r3, r7, #8
 800aa02:	4618      	mov	r0, r3
 800aa04:	f00c fb6b 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aa08:	f107 0320 	add.w	r3, r7, #32
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f00c f9a0 	bl	8016d52 <_ZNSaIcED1Ev>
	return Prog;
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3728      	adds	r7, #40	; 0x28
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	0801a6e4 	.word	0x0801a6e4

0800aa20 <_ZNSt6vectorIP10ExpressionSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800aa2a:	6838      	ldr	r0, [r7, #0]
 800aa2c:	f000 fbb0 	bl	800b190 <_ZSt4moveIRP10ExpressionEONSt16remove_referenceIT_E4typeEOS4_>
 800aa30:	4603      	mov	r3, r0
 800aa32:	4619      	mov	r1, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 fbb6 	bl	800b1a6 <_ZNSt6vectorIP10ExpressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800aa3a:	bf00      	nop
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <_ZNSt6vectorIP4BodySaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800aa4c:	6838      	ldr	r0, [r7, #0]
 800aa4e:	f000 fbdc 	bl	800b20a <_ZSt4moveIRP4BodyEONSt16remove_referenceIT_E4typeEOS4_>
 800aa52:	4603      	mov	r3, r0
 800aa54:	4619      	mov	r1, r3
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fbe2 	bl	800b220 <_ZNSt6vectorIP4BodySaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800aa5c:	bf00      	nop
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 fc09 	bl	800b284 <_ZNSaIP10ExpressionEC1Ev>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 fc11 	bl	800b29c <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3708      	adds	r7, #8
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <_ZNSt12_Vector_baseIP4BodySaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fc37 	bl	800b300 <_ZNSaIP4BodyEC1Ev>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 fc3f 	bl	800b318 <_ZNSt12_Vector_baseIP4BodySaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>:
    constexpr _Tp&& get(variant<_Types...>&& __v)
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
	std::move(__v));
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fc65 	bl	800b37c <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 800aab2:	4603      	mov	r3, r0
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
 800aab4:	4618      	mov	r0, r3
 800aab6:	f000 fc8f 	bl	800b3d8 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>
 800aaba:	4603      	mov	r3, r0
    }
 800aabc:	4618      	mov	r0, r3
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f00c fbf7 	bl	80172c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	bf0c      	ite	eq
 800aadc:	2301      	moveq	r3, #1
 800aade:	2300      	movne	r3, #0
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	4618      	mov	r0, r3
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b086      	sub	sp, #24
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	60f8      	str	r0, [r7, #12]
 800aaf2:	60b9      	str	r1, [r7, #8]
 800aaf4:	607a      	str	r2, [r7, #4]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
 800aaf6:	68b8      	ldr	r0, [r7, #8]
 800aaf8:	f7f6 fa7c 	bl	8000ff4 <_ZNSt11char_traitsIcE6lengthEPKc>
 800aafc:	6178      	str	r0, [r7, #20]
      __string_type __str;
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f00c facc 	bl	801709c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
      __str.reserve(__len + __rhs.size());
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f00c fb1e 	bl	8017146 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	4413      	add	r3, r2
 800ab10:	4619      	mov	r1, r3
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f00c fb1b 	bl	801714e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	68b9      	ldr	r1, [r7, #8]
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f00c fb9b 	bl	8017258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 800ab22:	6879      	ldr	r1, [r7, #4]
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f00c fb91 	bl	801724c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 800ab2a:	bf00      	nop
    }
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	3718      	adds	r7, #24
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800ab40:	6879      	ldr	r1, [r7, #4]
 800ab42:	68b8      	ldr	r0, [r7, #8]
 800ab44:	f00c fb98 	bl	8017278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f000 fc64 	bl	800b418 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800ab50:	4603      	mov	r3, r0
 800ab52:	4619      	mov	r1, r3
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f00c faa8 	bl	80170aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv>:
      constexpr size_t index() const noexcept
 800ab62:	b480      	push	{r7}
 800ab64:	b083      	sub	sp, #12
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
	if (this->_M_index ==
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	791b      	ldrb	r3, [r3, #4]
 800ab6e:	2bff      	cmp	r3, #255	; 0xff
 800ab70:	d102      	bne.n	800ab78 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv+0x16>
	  return variant_npos;
 800ab72:	f04f 33ff 	mov.w	r3, #4294967295
 800ab76:	e001      	b.n	800ab7c <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv+0x1a>
	return this->_M_index;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	791b      	ldrb	r3, [r3, #4]
      }
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 800ab88:	b590      	push	{r4, r7, lr}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800ab92:	2301      	movs	r3, #1
 800ab94:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7ff ffe3 	bl	800ab62 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	bf0c      	ite	eq
 800aba2:	2301      	moveq	r3, #1
 800aba4:	2300      	movne	r3, #0
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00a      	beq.n	800abc2 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800abac:	6838      	ldr	r0, [r7, #0]
 800abae:	f000 fc8f 	bl	800b4d0 <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800abb2:	4603      	mov	r3, r0
 800abb4:	681c      	ldr	r4, [r3, #0]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fc6e 	bl	800b498 <_ZSt3getILj1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800abbc:	4603      	mov	r3, r0
 800abbe:	601c      	str	r4, [r3, #0]
 800abc0:	e007      	b.n	800abd2 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800abc2:	6838      	ldr	r0, [r7, #0]
 800abc4:	f000 fc84 	bl	800b4d0 <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800abc8:	4603      	mov	r3, r0
 800abca:	4619      	mov	r1, r3
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 fc8a 	bl	800b4e6 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE7emplaceILj1EJS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 800abd2:	687b      	ldr	r3, [r7, #4]
	}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3714      	adds	r7, #20
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd90      	pop	{r4, r7, pc}

0800abdc <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 800abdc:	b590      	push	{r4, r7, lr}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800abe6:	2302      	movs	r3, #2
 800abe8:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7ff ffb9 	bl	800ab62 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	bf0c      	ite	eq
 800abf6:	2301      	moveq	r3, #1
 800abf8:	2300      	movne	r3, #0
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00a      	beq.n	800ac16 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800ac00:	6838      	ldr	r0, [r7, #0]
 800ac02:	f000 fceb 	bl	800b5dc <_ZSt7forwardIP11Method_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800ac06:	4603      	mov	r3, r0
 800ac08:	681c      	ldr	r4, [r3, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fcca 	bl	800b5a4 <_ZSt3getILj2EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800ac10:	4603      	mov	r3, r0
 800ac12:	601c      	str	r4, [r3, #0]
 800ac14:	e007      	b.n	800ac26 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800ac16:	6838      	ldr	r0, [r7, #0]
 800ac18:	f000 fce0 	bl	800b5dc <_ZSt7forwardIP11Method_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	4619      	mov	r1, r3
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fce6 	bl	800b5f2 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE7emplaceILj2EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 800ac26:	687b      	ldr	r3, [r7, #4]
	}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3714      	adds	r7, #20
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd90      	pop	{r4, r7, pc}

0800ac30 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 800ac30:	b590      	push	{r4, r7, lr}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7ff ff8f 	bl	800ab62 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	bf0c      	ite	eq
 800ac4a:	2301      	moveq	r3, #1
 800ac4c:	2300      	movne	r3, #0
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00a      	beq.n	800ac6a <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800ac54:	6838      	ldr	r0, [r7, #0]
 800ac56:	f000 fd23 	bl	800b6a0 <_ZSt7forwardIP10AssignmentEOT_RNSt16remove_referenceIS2_E4typeE>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	681c      	ldr	r4, [r3, #0]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fd02 	bl	800b668 <_ZSt3getILj0EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800ac64:	4603      	mov	r3, r0
 800ac66:	601c      	str	r4, [r3, #0]
 800ac68:	e007      	b.n	800ac7a <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800ac6a:	6838      	ldr	r0, [r7, #0]
 800ac6c:	f000 fd18 	bl	800b6a0 <_ZSt7forwardIP10AssignmentEOT_RNSt16remove_referenceIS2_E4typeE>
 800ac70:	4603      	mov	r3, r0
 800ac72:	4619      	mov	r1, r3
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fd1e 	bl	800b6b6 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE7emplaceILj0EJS1_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 800ac7a:	687b      	ldr	r3, [r7, #4]
	}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd90      	pop	{r4, r7, pc}

0800ac84 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	7039      	strb	r1, [r7, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4611      	mov	r1, r2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 fd46 	bl	800b724 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b082      	sub	sp, #8
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	7039      	strb	r1, [r7, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4611      	mov	r1, r2
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7ff ffe7 	bl	800ac84 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4618      	mov	r0, r3
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <_ZNSt8__detail9__variant17_Copy_assign_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	7039      	strb	r1, [r7, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4611      	mov	r1, r2
 800acce:	4618      	mov	r0, r3
 800acd0:	f7ff ffe7 	bl	800aca2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <_ZNSt8__detail9__variant17_Move_assign_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800acde:	b580      	push	{r7, lr}
 800ace0:	b082      	sub	sp, #8
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	7039      	strb	r1, [r7, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4611      	mov	r1, r2
 800acec:	4618      	mov	r0, r3
 800acee:	f7ff ffe7 	bl	800acc0 <_ZNSt8__detail9__variant17_Copy_assign_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4618      	mov	r0, r3
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <_ZNSt8__detail9__variant13_Variant_baseIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	7039      	strb	r1, [r7, #0]
	: _Base(__i, std::forward<_Args>(__args)...)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4611      	mov	r1, r2
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7ff ffe7 	bl	800acde <_ZNSt8__detail9__variant17_Move_assign_baseILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEECI1NS0_16_Variant_storageILb1EJS3_S5_S7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4618      	mov	r0, r3
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <_ZNSt8__detail9__variant13_Variant_baseIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1Ev>:
      _Variant_base()
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b082      	sub	sp, #8
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
      : _Variant_base(in_place_index<0>) { }
 800ad22:	4619      	mov	r1, r3
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff ffe9 	bl	800acfc <_ZNSt8__detail9__variant13_Variant_baseIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 800ad34:	b590      	push	{r4, r7, lr}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff ff0d 	bl	800ab62 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b03      	cmp	r3, #3
 800ad4c:	bf0c      	ite	eq
 800ad4e:	2301      	moveq	r3, #1
 800ad50:	2300      	movne	r3, #0
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00a      	beq.n	800ad6e <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800ad58:	6838      	ldr	r0, [r7, #0]
 800ad5a:	f000 fd69 	bl	800b830 <_ZSt7forwardIP15While_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	681c      	ldr	r4, [r3, #0]
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fd48 	bl	800b7f8 <_ZSt3getILj3EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	601c      	str	r4, [r3, #0]
 800ad6c:	e007      	b.n	800ad7e <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800ad6e:	6838      	ldr	r0, [r7, #0]
 800ad70:	f000 fd5e 	bl	800b830 <_ZSt7forwardIP15While_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800ad74:	4603      	mov	r3, r0
 800ad76:	4619      	mov	r1, r3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 fd64 	bl	800b846 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE7emplaceILj3EJS7_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 800ad7e:	687b      	ldr	r3, [r7, #4]
	}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3714      	adds	r7, #20
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd90      	pop	{r4, r7, pc}

0800ad88 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 800ad88:	b590      	push	{r4, r7, lr}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 800ad92:	2304      	movs	r3, #4
 800ad94:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff fee3 	bl	800ab62 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b04      	cmp	r3, #4
 800ada0:	bf0c      	ite	eq
 800ada2:	2301      	moveq	r3, #1
 800ada4:	2300      	movne	r3, #0
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00a      	beq.n	800adc2 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 800adac:	6838      	ldr	r0, [r7, #0]
 800adae:	f000 fde9 	bl	800b984 <_ZSt7forwardIP12If_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800adb2:	4603      	mov	r3, r0
 800adb4:	681c      	ldr	r4, [r3, #0]
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fdc8 	bl	800b94c <_ZSt3getILj4EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800adbc:	4603      	mov	r3, r0
 800adbe:	601c      	str	r4, [r3, #0]
 800adc0:	e007      	b.n	800add2 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 800adc2:	6838      	ldr	r0, [r7, #0]
 800adc4:	f000 fdde 	bl	800b984 <_ZSt7forwardIP12If_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800adc8:	4603      	mov	r3, r0
 800adca:	4619      	mov	r1, r3
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fde4 	bl	800b99a <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE7emplaceILj4EJS9_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 800add2:	687b      	ldr	r3, [r7, #4]
	}
 800add4:	4618      	mov	r0, r3
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	bd90      	pop	{r4, r7, pc}

0800addc <_ZNSt12_Vector_baseIP9StatementSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fdf1 	bl	800b9cc <_ZNSaIP9StatementEC1Ev>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4618      	mov	r0, r3
 800adee:	f000 fdf9 	bl	800b9e4 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	4618      	mov	r0, r3
 800adf6:	3708      	adds	r7, #8
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <_ZNSt6vectorIP9StatementSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800ae06:	6838      	ldr	r0, [r7, #0]
 800ae08:	f000 fe1e 	bl	800ba48 <_ZSt4moveIRP9StatementEONSt16remove_referenceIT_E4typeEOS4_>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	4619      	mov	r1, r3
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fe24 	bl	800ba5e <_ZNSt6vectorIP9StatementSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800ae16:	bf00      	nop
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERKNSt8__detail9__variant17_Copy_assign_baseILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 800ae1e:	b480      	push	{r7}
 800ae20:	b083      	sub	sp, #12
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
	    return static_cast<const variant<_Types...>&>(__rhs);
 800ae26:	687b      	ldr	r3, [r7, #4]
    }
 800ae28:	4618      	mov	r0, r3
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESM_EEDcOSG_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7fd fefd 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800ae42:	4603      	mov	r3, r0
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7fc ff3b 	bl	8007cc0 <_ZNSt8__detail9__variant5__getILj0ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800ae4a:	4603      	mov	r3, r0
	}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESI_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800ae54:	b5b0      	push	{r4, r5, r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fe2f 	bl	800bac2 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800ae64:	4604      	mov	r4, r0
 800ae66:	6838      	ldr	r0, [r7, #0]
 800ae68:	f7fd fee8 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7ff ffe0 	bl	800ae34 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESM_EEDcOSG_>
 800ae74:	4601      	mov	r1, r0
 800ae76:	f107 030c 	add.w	r3, r7, #12
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f000 fe2b 	bl	800bad8 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKS8_St17integral_constantIjLj0EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>
	      integral_constant<size_t, __indices>()...);
 800ae82:	462b      	mov	r3, r5
      }
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bdb0      	pop	{r4, r5, r7, pc}

0800ae8c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESI_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800ae8c:	b5b0      	push	{r4, r5, r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fe13 	bl	800bac2 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	6838      	ldr	r0, [r7, #0]
 800aea0:	f7fd fecc 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800aea4:	4603      	mov	r3, r0
 800aea6:	4619      	mov	r1, r3
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f7ff ffd3 	bl	800ae54 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800aeae:	462b      	mov	r3, r5
      }
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bdb0      	pop	{r4, r5, r7, pc}

0800aeb8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESI_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800aeb8:	b5b0      	push	{r4, r5, r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fdfd 	bl	800bac2 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800aec8:	4604      	mov	r4, r0
 800aeca:	6838      	ldr	r0, [r7, #0]
 800aecc:	f7fd feb6 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800aed0:	4603      	mov	r3, r0
 800aed2:	4619      	mov	r1, r3
 800aed4:	4620      	mov	r0, r4
 800aed6:	f7ff ffd9 	bl	800ae8c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800aeda:	462b      	mov	r3, r5
      }
 800aedc:	4618      	mov	r0, r3
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bdb0      	pop	{r4, r5, r7, pc}

0800aee4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESM_EEDcOSG_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7fd fea5 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800aef2:	4603      	mov	r3, r0
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fc ff6d 	bl	8007dd4 <_ZNSt8__detail9__variant5__getILj1ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800aefa:	4603      	mov	r3, r0
	}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESI_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800af04:	b5b0      	push	{r4, r5, r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fdd7 	bl	800bac2 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800af14:	4604      	mov	r4, r0
 800af16:	6838      	ldr	r0, [r7, #0]
 800af18:	f7fd fe90 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800af1c:	4603      	mov	r3, r0
 800af1e:	4618      	mov	r0, r3
 800af20:	f7ff ffe0 	bl	800aee4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESM_EEDcOSG_>
 800af24:	4601      	mov	r1, r0
 800af26:	f107 030c 	add.w	r3, r7, #12
 800af2a:	461a      	mov	r2, r3
 800af2c:	4620      	mov	r0, r4
 800af2e:	f000 fdf1 	bl	800bb14 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKiSt17integral_constantIjLj1EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>
	      integral_constant<size_t, __indices>()...);
 800af32:	462b      	mov	r3, r5
      }
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bdb0      	pop	{r4, r5, r7, pc}

0800af3c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESI_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800af3c:	b5b0      	push	{r4, r5, r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fdbb 	bl	800bac2 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800af4c:	4604      	mov	r4, r0
 800af4e:	6838      	ldr	r0, [r7, #0]
 800af50:	f7fd fe74 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800af54:	4603      	mov	r3, r0
 800af56:	4619      	mov	r1, r3
 800af58:	4620      	mov	r0, r4
 800af5a:	f7ff ffd3 	bl	800af04 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800af5e:	462b      	mov	r3, r5
      }
 800af60:	4618      	mov	r0, r3
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bdb0      	pop	{r4, r5, r7, pc}

0800af68 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESI_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800af68:	b5b0      	push	{r4, r5, r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fda5 	bl	800bac2 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800af78:	4604      	mov	r4, r0
 800af7a:	6838      	ldr	r0, [r7, #0]
 800af7c:	f7fd fe5e 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800af80:	4603      	mov	r3, r0
 800af82:	4619      	mov	r1, r3
 800af84:	4620      	mov	r0, r4
 800af86:	f7ff ffd9 	bl	800af3c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800af8a:	462b      	mov	r3, r5
      }
 800af8c:	4618      	mov	r0, r3
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bdb0      	pop	{r4, r5, r7, pc}

0800af94 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESM_EEDcOSG_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f7fd fe4d 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800afa2:	4603      	mov	r3, r0
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7fc ffb1 	bl	8007f0c <_ZNSt8__detail9__variant5__getILj2ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800afaa:	4603      	mov	r3, r0
	}
 800afac:	4618      	mov	r0, r3
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESI_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800afb4:	b5b0      	push	{r4, r5, r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fd7f 	bl	800bac2 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800afc4:	4604      	mov	r4, r0
 800afc6:	6838      	ldr	r0, [r7, #0]
 800afc8:	f7fd fe38 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800afcc:	4603      	mov	r3, r0
 800afce:	4618      	mov	r0, r3
 800afd0:	f7ff ffe0 	bl	800af94 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESM_EEDcOSG_>
 800afd4:	4601      	mov	r1, r0
 800afd6:	f107 030c 	add.w	r3, r7, #12
 800afda:	461a      	mov	r2, r3
 800afdc:	4620      	mov	r0, r4
 800afde:	f000 fdb7 	bl	800bb50 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKfSt17integral_constantIjLj2EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>
	      integral_constant<size_t, __indices>()...);
 800afe2:	462b      	mov	r3, r5
      }
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bdb0      	pop	{r4, r5, r7, pc}

0800afec <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESI_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800afec:	b5b0      	push	{r4, r5, r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fd63 	bl	800bac2 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800affc:	4604      	mov	r4, r0
 800affe:	6838      	ldr	r0, [r7, #0]
 800b000:	f7fd fe1c 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b004:	4603      	mov	r3, r0
 800b006:	4619      	mov	r1, r3
 800b008:	4620      	mov	r0, r4
 800b00a:	f7ff ffd3 	bl	800afb4 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800b00e:	462b      	mov	r3, r5
      }
 800b010:	4618      	mov	r0, r3
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bdb0      	pop	{r4, r5, r7, pc}

0800b018 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESI_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800b018:	b5b0      	push	{r4, r5, r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fd4d 	bl	800bac2 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b028:	4604      	mov	r4, r0
 800b02a:	6838      	ldr	r0, [r7, #0]
 800b02c:	f7fd fe06 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b030:	4603      	mov	r3, r0
 800b032:	4619      	mov	r1, r3
 800b034:	4620      	mov	r0, r4
 800b036:	f7ff ffd9 	bl	800afec <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800b03a:	462b      	mov	r3, r5
      }
 800b03c:	4618      	mov	r0, r3
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bdb0      	pop	{r4, r5, r7, pc}

0800b044 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESM_EEDcOSG_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7fd fdf5 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b052:	4603      	mov	r3, r0
 800b054:	4618      	mov	r0, r3
 800b056:	f7fd f807 	bl	8008068 <_ZNSt8__detail9__variant5__getILj3ERKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800b05a:	4603      	mov	r3, r0
	}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESI_SM_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800b064:	b5b0      	push	{r4, r5, r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fd27 	bl	800bac2 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b074:	4604      	mov	r4, r0
 800b076:	6838      	ldr	r0, [r7, #0]
 800b078:	f7fd fde0 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b07c:	4603      	mov	r3, r0
 800b07e:	4618      	mov	r0, r3
 800b080:	f7ff ffe0 	bl	800b044 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESM_EEDcOSG_>
 800b084:	4601      	mov	r1, r0
 800b086:	f107 030c 	add.w	r3, r7, #12
 800b08a:	461a      	mov	r2, r3
 800b08c:	4620      	mov	r0, r4
 800b08e:	f000 fd7d 	bl	800bb8c <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKbSt17integral_constantIjLj3EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>
	      integral_constant<size_t, __indices>()...);
 800b092:	462b      	mov	r3, r5
      }
 800b094:	4618      	mov	r0, r3
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bdb0      	pop	{r4, r5, r7, pc}

0800b09c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESI_SM_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800b09c:	b5b0      	push	{r4, r5, r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fd0b 	bl	800bac2 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	6838      	ldr	r0, [r7, #0]
 800b0b0:	f7fd fdc4 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f7ff ffd3 	bl	800b064 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800b0be:	462b      	mov	r3, r5
      }
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bdb0      	pop	{r4, r5, r7, pc}

0800b0c8 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESI_SM_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800b0c8:	b5b0      	push	{r4, r5, r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fcf5 	bl	800bac2 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b0d8:	4604      	mov	r4, r0
 800b0da:	6838      	ldr	r0, [r7, #0]
 800b0dc:	f7fd fdae 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f7ff ffd9 	bl	800b09c <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSB_EUlOT_T0_E_RKSt7variantIJSA_ifbEEEJEEESt5tupleIJSM_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESI_SM_>
				   std::forward<_Variants>(__vars)...);
 800b0ea:	462b      	mov	r3, r5
      }
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bdb0      	pop	{r4, r5, r7, pc}

0800b0f4 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_RKSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSN_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	4413      	add	r3, r2
 800b106:	4618      	mov	r0, r3
 800b108:	f000 fd5e 	bl	800bbc8 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_RKSt7variantIJS9_ifbEEEJEE9_M_accessEv>
 800b10c:	4603      	mov	r3, r0
	}
 800b10e:	4618      	mov	r0, r3
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
	...

0800b118 <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>:
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 800b118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 800b122:	4b0f      	ldr	r3, [pc, #60]	; (800b160 <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKSt7variantIJS8_ifbEEEEDcOT1_DpOT2_+0x48>)
 800b124:	60fb      	str	r3, [r7, #12]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 800b126:	6838      	ldr	r0, [r7, #0]
 800b128:	f7fd f816 	bl	8008158 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800b12c:	4603      	mov	r3, r0
 800b12e:	4619      	mov	r1, r3
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f7ff ffdf 	bl	800b0f4 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_RKSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSN_jDpT_>
 800b136:	4603      	mov	r3, r0
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 800b13c:	68bc      	ldr	r4, [r7, #8]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 fd4d 	bl	800bbde <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800b144:	4605      	mov	r5, r0
 800b146:	6838      	ldr	r0, [r7, #0]
 800b148:	f7fd fd78 	bl	8008c3c <_ZSt7forwardIRKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b14c:	4603      	mov	r3, r0
 800b14e:	4619      	mov	r1, r3
 800b150:	4628      	mov	r0, r5
 800b152:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 800b154:	4633      	mov	r3, r6
    }
 800b156:	4618      	mov	r0, r3
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b15e:	bf00      	nop
 800b160:	0801aaa4 	.word	0x0801aaa4

0800b164 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_>:
      operator=(const _Copy_assign_base& __rhs)
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	6838      	ldr	r0, [r7, #0]
 800b174:	f7ff fe53 	bl	800ae1e <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERKNSt8__detail9__variant17_Copy_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800b178:	4602      	mov	r2, r0
 800b17a:	f107 030c 	add.w	r3, r7, #12
 800b17e:	4611      	mov	r1, r2
 800b180:	4618      	mov	r0, r3
 800b182:	f7ff ffc9 	bl	800b118 <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>
	return *this;
 800b186:	687b      	ldr	r3, [r7, #4]
      }
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <_ZSt4moveIRP10ExpressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4618      	mov	r0, r3
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <_ZNSt6vectorIP10ExpressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800b1a6:	b5b0      	push	{r4, r5, r7, lr}
 800b1a8:	b082      	sub	sp, #8
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	685a      	ldr	r2, [r3, #4]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d011      	beq.n	800b1e0 <_ZNSt6vectorIP10ExpressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800b1bc:	687c      	ldr	r4, [r7, #4]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	685d      	ldr	r5, [r3, #4]
 800b1c2:	6838      	ldr	r0, [r7, #0]
 800b1c4:	f000 fd16 	bl	800bbf4 <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f000 fd1b 	bl	800bc0a <_ZNSt16allocator_traitsISaIP10ExpressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	1d1a      	adds	r2, r3, #4
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	605a      	str	r2, [r3, #4]
 800b1de:	e00c      	b.n	800b1fa <_ZNSt6vectorIP10ExpressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fd25 	bl	800bc30 <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	6838      	ldr	r0, [r7, #0]
 800b1ea:	f000 fd03 	bl	800bbf4 <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fd2d 	bl	800bc54 <_ZNSt6vectorIP10ExpressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fda6 	bl	800bd4c <_ZNSt6vectorIP10ExpressionSaIS1_EE4backEv>
 800b200:	4603      	mov	r3, r0
#endif
      }
 800b202:	4618      	mov	r0, r3
 800b204:	3708      	adds	r7, #8
 800b206:	46bd      	mov	sp, r7
 800b208:	bdb0      	pop	{r4, r5, r7, pc}

0800b20a <_ZSt4moveIRP4BodyEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b20a:	b480      	push	{r7}
 800b20c:	b083      	sub	sp, #12
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4618      	mov	r0, r3
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <_ZNSt6vectorIP4BodySaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800b220:	b5b0      	push	{r4, r5, r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	685a      	ldr	r2, [r3, #4]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	429a      	cmp	r2, r3
 800b234:	d011      	beq.n	800b25a <_ZNSt6vectorIP4BodySaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800b236:	687c      	ldr	r4, [r7, #4]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685d      	ldr	r5, [r3, #4]
 800b23c:	6838      	ldr	r0, [r7, #0]
 800b23e:	f000 fda0 	bl	800bd82 <_ZSt7forwardIP4BodyEOT_RNSt16remove_referenceIS2_E4typeE>
 800b242:	4603      	mov	r3, r0
 800b244:	461a      	mov	r2, r3
 800b246:	4629      	mov	r1, r5
 800b248:	4620      	mov	r0, r4
 800b24a:	f000 fda5 	bl	800bd98 <_ZNSt16allocator_traitsISaIP4BodyEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	1d1a      	adds	r2, r3, #4
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	605a      	str	r2, [r3, #4]
 800b258:	e00c      	b.n	800b274 <_ZNSt6vectorIP4BodySaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fdaf 	bl	800bdbe <_ZNSt6vectorIP4BodySaIS1_EE3endEv>
 800b260:	4604      	mov	r4, r0
 800b262:	6838      	ldr	r0, [r7, #0]
 800b264:	f000 fd8d 	bl	800bd82 <_ZSt7forwardIP4BodyEOT_RNSt16remove_referenceIS2_E4typeE>
 800b268:	4603      	mov	r3, r0
 800b26a:	461a      	mov	r2, r3
 800b26c:	4621      	mov	r1, r4
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fdb6 	bl	800bde0 <_ZNSt6vectorIP4BodySaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 fe2f 	bl	800bed8 <_ZNSt6vectorIP4BodySaIS1_EE4backEv>
 800b27a:	4603      	mov	r3, r0
      }
 800b27c:	4618      	mov	r0, r3
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bdb0      	pop	{r4, r5, r7, pc}

0800b284 <_ZNSaIP10ExpressionEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fe3e 	bl	800bf0e <_ZN9__gnu_cxx13new_allocatorIP10ExpressionEC1Ev>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4618      	mov	r0, r3
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	605a      	str	r2, [r3, #4]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	609a      	str	r2, [r3, #8]
	{ }
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
	if (__p)
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d005      	beq.n	800b2e2 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	68b9      	ldr	r1, [r7, #8]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 fe21 	bl	800bf24 <_ZNSt16allocator_traitsISaIP10ExpressionEE10deallocateERS2_PS1_j>
      }
 800b2e2:	bf00      	nop
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b2ea:	b480      	push	{r7}
 800b2ec:	b083      	sub	sp, #12
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <_ZNSaIP4BodyEC1Ev>:
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fe1a 	bl	800bf42 <_ZN9__gnu_cxx13new_allocatorIP4BodyEC1Ev>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4618      	mov	r0, r3
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <_ZNSt12_Vector_baseIP4BodySaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	605a      	str	r2, [r3, #4]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	609a      	str	r2, [r3, #8]
	{ }
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <_ZNSt12_Vector_baseIP4BodySaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
	if (__p)
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d005      	beq.n	800b35e <_ZNSt12_Vector_baseIP4BodySaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	68b9      	ldr	r1, [r7, #8]
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 fdfd 	bl	800bf58 <_ZNSt16allocator_traitsISaIP4BodyEE10deallocateERS2_PS1_j>
      }
 800b35e:	bf00      	nop
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b366:	b480      	push	{r7}
 800b368:	b083      	sub	sp, #12
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4618      	mov	r0, r3
 800b388:	370c      	adds	r7, #12
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800b392:	b580      	push	{r7, lr}
 800b394:	b082      	sub	sp, #8
 800b396:	af00      	add	r7, sp, #0
 800b398:	7138      	strb	r0, [r7, #4]
 800b39a:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800b39c:	6838      	ldr	r0, [r7, #0]
 800b39e:	f000 fdf5 	bl	800bf8c <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISA_E4typeE>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f000 fdfc 	bl	800bfa2 <_ZNOSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <_ZNSt8__detail9__variant5__getILj0ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800b3b4:	b590      	push	{r4, r7, lr}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fdda 	bl	800bf76 <_ZSt7forwardISt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800b3c2:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f7ff ffe3 	bl	800b392 <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 800b3cc:	4603      	mov	r3, r0
    }
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	370c      	adds	r7, #12
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd90      	pop	{r4, r7, pc}
	...

0800b3d8 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>:
    get(variant<_Types...>&& __v)
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f7fc feb9 	bl	8008158 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	bf14      	ite	ne
 800b3ec:	2301      	movne	r3, #1
 800b3ee:	2300      	moveq	r3, #0
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d002      	beq.n	800b3fc <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800b3f6:	4807      	ldr	r0, [pc, #28]	; (800b414 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x3c>)
 800b3f8:	f7f8 ff84 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(std::move(__v));
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7ff ffbd 	bl	800b37c <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 800b402:	4603      	mov	r3, r0
 800b404:	4618      	mov	r0, r3
 800b406:	f7ff ffd5 	bl	800b3b4 <_ZNSt8__detail9__variant5__getILj0ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800b40a:	4603      	mov	r3, r0
    }
 800b40c:	4618      	mov	r0, r3
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	0801a6f0 	.word	0x0801a6f0

0800b418 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4618      	mov	r0, r3
 800b424:	370c      	adds	r7, #12
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800b42e:	b580      	push	{r7, lr}
 800b430:	b082      	sub	sp, #8
 800b432:	af00      	add	r7, sp, #0
 800b434:	7138      	strb	r0, [r7, #4]
 800b436:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800b438:	6838      	ldr	r0, [r7, #0]
 800b43a:	f000 fdd9 	bl	800bff0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISD_E4typeE>
 800b43e:	4603      	mov	r3, r0
 800b440:	4618      	mov	r0, r3
 800b442:	f7fa fb53 	bl	8005aec <_ZNRSt8__detail9__variant14_UninitializedIP13Function_callLb1EE6_M_getEv>
 800b446:	4603      	mov	r3, r0
 800b448:	4618      	mov	r0, r3
 800b44a:	3708      	adds	r7, #8
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b450:	b590      	push	{r4, r7, lr}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	7138      	strb	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b45a:	6838      	ldr	r0, [r7, #0]
 800b45c:	f000 fdbd 	bl	800bfda <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800b460:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b462:	4619      	mov	r1, r3
 800b464:	4620      	mov	r0, r4
 800b466:	f7ff ffe2 	bl	800b42e <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>
 800b46a:	4603      	mov	r3, r0
    }
 800b46c:	4618      	mov	r0, r3
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	bd90      	pop	{r4, r7, pc}

0800b474 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800b474:	b590      	push	{r4, r7, lr}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 fda1 	bl	800bfc4 <_ZSt7forwardIRSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEOT_RNSt16remove_referenceISD_E4typeE>
 800b482:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800b484:	4619      	mov	r1, r3
 800b486:	4620      	mov	r0, r4
 800b488:	f7ff ffe2 	bl	800b450 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b48c:	4603      	mov	r3, r0
    }
 800b48e:	4618      	mov	r0, r3
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	bd90      	pop	{r4, r7, pc}
	...

0800b498 <_ZSt3getILj1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7ff fb5e 	bl	800ab62 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	bf14      	ite	ne
 800b4ac:	2301      	movne	r3, #1
 800b4ae:	2300      	moveq	r3, #0
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <_ZSt3getILj1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800b4b6:	4805      	ldr	r0, [pc, #20]	; (800b4cc <_ZSt3getILj1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 800b4b8:	f7f8 ff24 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7ff ffd9 	bl	800b474 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>
 800b4c2:	4603      	mov	r3, r0
    }
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	0801a6f0 	.word	0x0801a6f0

0800b4d0 <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr

0800b4e6 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE7emplaceILj1EJS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b082      	sub	sp, #8
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f000 fd87 	bl	800c006 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800b4f8:	6838      	ldr	r0, [r7, #0]
 800b4fa:	f7ff ffe9 	bl	800b4d0 <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800b4fe:	4603      	mov	r3, r0
 800b500:	4619      	mov	r1, r3
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fd8c 	bl	800c020 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEJS4_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7ff ffc5 	bl	800b498 <_ZSt3getILj1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800b50e:	4603      	mov	r3, r0
	}
 800b510:	4618      	mov	r0, r3
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	7138      	strb	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800b522:	6838      	ldr	r0, [r7, #0]
 800b524:	f000 fd9b 	bl	800c05e <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800b528:	4603      	mov	r3, r0
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 fda2 	bl	800c074 <_ZNRSt8__detail9__variant14_UninitializedIP11Method_callLb1EE6_M_getEv>
 800b530:	4603      	mov	r3, r0
 800b532:	4618      	mov	r0, r3
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b53a:	b590      	push	{r4, r7, lr}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	7138      	strb	r0, [r7, #4]
 800b542:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b544:	6838      	ldr	r0, [r7, #0]
 800b546:	f000 fd53 	bl	800bff0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISD_E4typeE>
 800b54a:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b54c:	4619      	mov	r1, r3
 800b54e:	4620      	mov	r0, r4
 800b550:	f7ff ffe2 	bl	800b518 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>
 800b554:	4603      	mov	r3, r0
    }
 800b556:	4618      	mov	r0, r3
 800b558:	370c      	adds	r7, #12
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd90      	pop	{r4, r7, pc}

0800b55e <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b55e:	b590      	push	{r4, r7, lr}
 800b560:	b083      	sub	sp, #12
 800b562:	af00      	add	r7, sp, #0
 800b564:	7138      	strb	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b568:	6838      	ldr	r0, [r7, #0]
 800b56a:	f000 fd36 	bl	800bfda <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800b56e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b570:	4619      	mov	r1, r3
 800b572:	4620      	mov	r0, r4
 800b574:	f7ff ffe1 	bl	800b53a <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b578:	4603      	mov	r3, r0
    }
 800b57a:	4618      	mov	r0, r3
 800b57c:	370c      	adds	r7, #12
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd90      	pop	{r4, r7, pc}

0800b582 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800b582:	b590      	push	{r4, r7, lr}
 800b584:	b083      	sub	sp, #12
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fd1a 	bl	800bfc4 <_ZSt7forwardIRSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEOT_RNSt16remove_referenceISD_E4typeE>
 800b590:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800b592:	4619      	mov	r1, r3
 800b594:	4620      	mov	r0, r4
 800b596:	f7ff ffe2 	bl	800b55e <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b59a:	4603      	mov	r3, r0
    }
 800b59c:	4618      	mov	r0, r3
 800b59e:	370c      	adds	r7, #12
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd90      	pop	{r4, r7, pc}

0800b5a4 <_ZSt3getILj2EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7ff fad8 	bl	800ab62 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b02      	cmp	r3, #2
 800b5b6:	bf14      	ite	ne
 800b5b8:	2301      	movne	r3, #1
 800b5ba:	2300      	moveq	r3, #0
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d002      	beq.n	800b5c8 <_ZSt3getILj2EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800b5c2:	4805      	ldr	r0, [pc, #20]	; (800b5d8 <_ZSt3getILj2EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 800b5c4:	f7f8 fe9e 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f7ff ffda 	bl	800b582 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>
 800b5ce:	4603      	mov	r3, r0
    }
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	0801a6f0 	.word	0x0801a6f0

0800b5dc <_ZSt7forwardIP11Method_callEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	370c      	adds	r7, #12
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE7emplaceILj2EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b082      	sub	sp, #8
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f000 fd01 	bl	800c006 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800b604:	6838      	ldr	r0, [r7, #0]
 800b606:	f7ff ffe9 	bl	800b5dc <_ZSt7forwardIP11Method_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800b60a:	4603      	mov	r3, r0
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 fd3b 	bl	800c08a <_ZSt28__variant_construct_by_indexILj2ESt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEJS6_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7ff ffc5 	bl	800b5a4 <_ZSt3getILj2EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800b61a:	4603      	mov	r3, r0
	}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	7138      	strb	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800b62e:	6838      	ldr	r0, [r7, #0]
 800b630:	f000 fcd3 	bl	800bfda <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800b634:	4603      	mov	r3, r0
 800b636:	4618      	mov	r0, r3
 800b638:	f000 fd46 	bl	800c0c8 <_ZNRSt8__detail9__variant14_UninitializedIP10AssignmentLb1EE6_M_getEv>
 800b63c:	4603      	mov	r3, r0
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800b646:	b590      	push	{r4, r7, lr}
 800b648:	b083      	sub	sp, #12
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fcb8 	bl	800bfc4 <_ZSt7forwardIRSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEOT_RNSt16remove_referenceISD_E4typeE>
 800b654:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800b656:	4619      	mov	r1, r3
 800b658:	4620      	mov	r0, r4
 800b65a:	f7ff ffe3 	bl	800b624 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>
 800b65e:	4603      	mov	r3, r0
    }
 800b660:	4618      	mov	r0, r3
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	bd90      	pop	{r4, r7, pc}

0800b668 <_ZSt3getILj0EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7ff fa76 	bl	800ab62 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	bf14      	ite	ne
 800b67c:	2301      	movne	r3, #1
 800b67e:	2300      	moveq	r3, #0
 800b680:	b2db      	uxtb	r3, r3
 800b682:	2b00      	cmp	r3, #0
 800b684:	d002      	beq.n	800b68c <_ZSt3getILj0EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800b686:	4805      	ldr	r0, [pc, #20]	; (800b69c <_ZSt3getILj0EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 800b688:	f7f8 fe3c 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7ff ffda 	bl	800b646 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>
 800b692:	4603      	mov	r3, r0
    }
 800b694:	4618      	mov	r0, r3
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	0801a6f0 	.word	0x0801a6f0

0800b6a0 <_ZSt7forwardIP10AssignmentEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	370c      	adds	r7, #12
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr

0800b6b6 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE7emplaceILj0EJS1_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b082      	sub	sp, #8
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
 800b6be:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f000 fc9f 	bl	800c006 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800b6c8:	6838      	ldr	r0, [r7, #0]
 800b6ca:	f7ff ffe9 	bl	800b6a0 <_ZSt7forwardIP10AssignmentEOT_RNSt16remove_referenceIS2_E4typeE>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fd03 	bl	800c0de <_ZSt28__variant_construct_by_indexILj0ESt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEJS2_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7ff ffc5 	bl	800b668 <_ZSt3getILj0EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800b6de:	4603      	mov	r3, r0
	}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <_ZNSt8__detail9__variant14_UninitializedIP10AssignmentLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	7039      	strb	r1, [r7, #0]
	: _M_storage(std::forward<_Args>(__args)...)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]
	{ }
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <_ZNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 800b706:	b580      	push	{r7, lr}
 800b708:	b082      	sub	sp, #8
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	7039      	strb	r1, [r7, #0]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4611      	mov	r1, r2
 800b714:	4618      	mov	r0, r3
 800b716:	f7ff ffe7 	bl	800b6e8 <_ZNSt8__detail9__variant14_UninitializedIP10AssignmentLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4618      	mov	r0, r3
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	7039      	strb	r1, [r7, #0]
	_M_index(_Np)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4611      	mov	r1, r2
 800b732:	4618      	mov	r0, r3
 800b734:	f7ff ffe7 	bl	800b706 <_ZNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEC1IJEEESt16in_place_index_tILj0EEDpOT_>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	711a      	strb	r2, [r3, #4]
	{ }
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4618      	mov	r0, r3
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	7138      	strb	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800b752:	6838      	ldr	r0, [r7, #0]
 800b754:	f000 fce2 	bl	800c11c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800b758:	4603      	mov	r3, r0
 800b75a:	4618      	mov	r0, r3
 800b75c:	f000 fce9 	bl	800c132 <_ZNRSt8__detail9__variant14_UninitializedIP15While_statementLb1EE6_M_getEv>
 800b760:	4603      	mov	r3, r0
 800b762:	4618      	mov	r0, r3
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b76a:	b590      	push	{r4, r7, lr}
 800b76c:	b083      	sub	sp, #12
 800b76e:	af00      	add	r7, sp, #0
 800b770:	7138      	strb	r0, [r7, #4]
 800b772:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b774:	6838      	ldr	r0, [r7, #0]
 800b776:	f000 fc72 	bl	800c05e <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800b77a:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b77c:	4619      	mov	r1, r3
 800b77e:	4620      	mov	r0, r4
 800b780:	f7ff ffe2 	bl	800b748 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP15While_statementP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>
 800b784:	4603      	mov	r3, r0
    }
 800b786:	4618      	mov	r0, r3
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd90      	pop	{r4, r7, pc}

0800b78e <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b78e:	b590      	push	{r4, r7, lr}
 800b790:	b083      	sub	sp, #12
 800b792:	af00      	add	r7, sp, #0
 800b794:	7138      	strb	r0, [r7, #4]
 800b796:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b798:	6838      	ldr	r0, [r7, #0]
 800b79a:	f000 fc29 	bl	800bff0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISD_E4typeE>
 800b79e:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f7ff ffe1 	bl	800b76a <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b7a8:	4603      	mov	r3, r0
    }
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	370c      	adds	r7, #12
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd90      	pop	{r4, r7, pc}

0800b7b2 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b7b2:	b590      	push	{r4, r7, lr}
 800b7b4:	b083      	sub	sp, #12
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	7138      	strb	r0, [r7, #4]
 800b7ba:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b7bc:	6838      	ldr	r0, [r7, #0]
 800b7be:	f000 fc0c 	bl	800bfda <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800b7c2:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f7ff ffe1 	bl	800b78e <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b7cc:	4603      	mov	r3, r0
    }
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	370c      	adds	r7, #12
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd90      	pop	{r4, r7, pc}

0800b7d6 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800b7d6:	b590      	push	{r4, r7, lr}
 800b7d8:	b083      	sub	sp, #12
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fbf0 	bl	800bfc4 <_ZSt7forwardIRSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEOT_RNSt16remove_referenceISD_E4typeE>
 800b7e4:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f7ff ffe2 	bl	800b7b2 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b7ee:	4603      	mov	r3, r0
    }
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd90      	pop	{r4, r7, pc}

0800b7f8 <_ZSt3getILj3EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff f9ae 	bl	800ab62 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv>
 800b806:	4603      	mov	r3, r0
 800b808:	2b03      	cmp	r3, #3
 800b80a:	bf14      	ite	ne
 800b80c:	2301      	movne	r3, #1
 800b80e:	2300      	moveq	r3, #0
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	d002      	beq.n	800b81c <_ZSt3getILj3EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800b816:	4805      	ldr	r0, [pc, #20]	; (800b82c <_ZSt3getILj3EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 800b818:	f7f8 fd74 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7ff ffda 	bl	800b7d6 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>
 800b822:	4603      	mov	r3, r0
    }
 800b824:	4618      	mov	r0, r3
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	0801a6f0 	.word	0x0801a6f0

0800b830 <_ZSt7forwardIP15While_statementEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4618      	mov	r0, r3
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr

0800b846 <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE7emplaceILj3EJS7_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 800b846:	b580      	push	{r7, lr}
 800b848:	b082      	sub	sp, #8
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
 800b84e:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4618      	mov	r0, r3
 800b854:	f000 fbd7 	bl	800c006 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800b858:	6838      	ldr	r0, [r7, #0]
 800b85a:	f7ff ffe9 	bl	800b830 <_ZSt7forwardIP15While_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800b85e:	4603      	mov	r3, r0
 800b860:	4619      	mov	r1, r3
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 fc70 	bl	800c148 <_ZSt28__variant_construct_by_indexILj3ESt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEJS8_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7ff ffc5 	bl	800b7f8 <_ZSt3getILj3EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800b86e:	4603      	mov	r3, r0
	}
 800b870:	4618      	mov	r0, r3
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	7138      	strb	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 800b882:	6838      	ldr	r0, [r7, #0]
 800b884:	f000 fc7f 	bl	800c186 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP12If_statementEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800b888:	4603      	mov	r3, r0
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 fc86 	bl	800c19c <_ZNRSt8__detail9__variant14_UninitializedIP12If_statementLb1EE6_M_getEv>
 800b890:	4603      	mov	r3, r0
 800b892:	4618      	mov	r0, r3
 800b894:	3708      	adds	r7, #8
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b89a:	b590      	push	{r4, r7, lr}
 800b89c:	b083      	sub	sp, #12
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	7138      	strb	r0, [r7, #4]
 800b8a2:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b8a4:	6838      	ldr	r0, [r7, #0]
 800b8a6:	f000 fc39 	bl	800c11c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800b8aa:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f7ff ffe2 	bl	800b878 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP12If_statementEEEEEDcSt16in_place_index_tILj0EEOT_>
 800b8b4:	4603      	mov	r3, r0
    }
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd90      	pop	{r4, r7, pc}

0800b8be <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b8be:	b590      	push	{r4, r7, lr}
 800b8c0:	b083      	sub	sp, #12
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	7138      	strb	r0, [r7, #4]
 800b8c6:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b8c8:	6838      	ldr	r0, [r7, #0]
 800b8ca:	f000 fbc8 	bl	800c05e <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800b8ce:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f7ff ffe1 	bl	800b89a <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b8d8:	4603      	mov	r3, r0
    }
 800b8da:	4618      	mov	r0, r3
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd90      	pop	{r4, r7, pc}

0800b8e2 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b8e2:	b590      	push	{r4, r7, lr}
 800b8e4:	b083      	sub	sp, #12
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	7138      	strb	r0, [r7, #4]
 800b8ea:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b8ec:	6838      	ldr	r0, [r7, #0]
 800b8ee:	f000 fb7f 	bl	800bff0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISD_E4typeE>
 800b8f2:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f7ff ffe1 	bl	800b8be <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b8fc:	4603      	mov	r3, r0
    }
 800b8fe:	4618      	mov	r0, r3
 800b900:	370c      	adds	r7, #12
 800b902:	46bd      	mov	sp, r7
 800b904:	bd90      	pop	{r4, r7, pc}

0800b906 <_ZNSt8__detail9__variant5__getILj4ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 800b906:	b590      	push	{r4, r7, lr}
 800b908:	b083      	sub	sp, #12
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	7138      	strb	r0, [r7, #4]
 800b90e:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 800b910:	6838      	ldr	r0, [r7, #0]
 800b912:	f000 fb62 	bl	800bfda <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISF_E4typeE>
 800b916:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 800b918:	4619      	mov	r1, r3
 800b91a:	4620      	mov	r0, r4
 800b91c:	f7ff ffe1 	bl	800b8e2 <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b920:	4603      	mov	r3, r0
    }
 800b922:	4618      	mov	r0, r3
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	bd90      	pop	{r4, r7, pc}

0800b92a <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800b92a:	b590      	push	{r4, r7, lr}
 800b92c:	b083      	sub	sp, #12
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fb46 	bl	800bfc4 <_ZSt7forwardIRSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEOT_RNSt16remove_referenceISD_E4typeE>
 800b938:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800b93a:	4619      	mov	r1, r3
 800b93c:	4620      	mov	r0, r4
 800b93e:	f7ff ffe2 	bl	800b906 <_ZNSt8__detail9__variant5__getILj4ERNS0_15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800b942:	4603      	mov	r3, r0
    }
 800b944:	4618      	mov	r0, r3
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd90      	pop	{r4, r7, pc}

0800b94c <_ZSt3getILj4EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7ff f904 	bl	800ab62 <_ZNKSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE5indexEv>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b04      	cmp	r3, #4
 800b95e:	bf14      	ite	ne
 800b960:	2301      	movne	r3, #1
 800b962:	2300      	moveq	r3, #0
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b00      	cmp	r3, #0
 800b968:	d002      	beq.n	800b970 <_ZSt3getILj4EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800b96a:	4805      	ldr	r0, [pc, #20]	; (800b980 <_ZSt3getILj4EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 800b96c:	f7f8 fcca 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7ff ffda 	bl	800b92a <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>
 800b976:	4603      	mov	r3, r0
    }
 800b978:	4618      	mov	r0, r3
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	0801a6f0 	.word	0x0801a6f0

0800b984 <_ZSt7forwardIP12If_statementEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4618      	mov	r0, r3
 800b990:	370c      	adds	r7, #12
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr

0800b99a <_ZNSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE7emplaceILj4EJS9_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b082      	sub	sp, #8
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 fb2d 	bl	800c006 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800b9ac:	6838      	ldr	r0, [r7, #0]
 800b9ae:	f7ff ffe9 	bl	800b984 <_ZSt7forwardIP12If_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fbfb 	bl	800c1b2 <_ZSt28__variant_construct_by_indexILj4ESt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEJSA_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f7ff ffc5 	bl	800b94c <_ZSt3getILj4EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800b9c2:	4603      	mov	r3, r0
	}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <_ZNSaIP9StatementEC1Ev>:
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fc0b 	bl	800c1f0 <_ZN9__gnu_cxx13new_allocatorIP9StatementEC1Ev>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	601a      	str	r2, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	605a      	str	r2, [r3, #4]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	609a      	str	r2, [r3, #8]
	{ }
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4618      	mov	r0, r3
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
	if (__p)
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d005      	beq.n	800ba2a <_ZNSt12_Vector_baseIP9StatementSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	68b9      	ldr	r1, [r7, #8]
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 fbee 	bl	800c206 <_ZNSt16allocator_traitsISaIP9StatementEE10deallocateERS2_PS1_j>
      }
 800ba2a:	bf00      	nop
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ba32:	b480      	push	{r7}
 800ba34:	b083      	sub	sp, #12
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <_ZSt4moveIRP9StatementEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4618      	mov	r0, r3
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <_ZNSt6vectorIP9StatementSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800ba5e:	b5b0      	push	{r4, r5, r7, lr}
 800ba60:	b082      	sub	sp, #8
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d011      	beq.n	800ba98 <_ZNSt6vectorIP9StatementSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800ba74:	687c      	ldr	r4, [r7, #4]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	685d      	ldr	r5, [r3, #4]
 800ba7a:	6838      	ldr	r0, [r7, #0]
 800ba7c:	f000 fbd2 	bl	800c224 <_ZSt7forwardIP9StatementEOT_RNSt16remove_referenceIS2_E4typeE>
 800ba80:	4603      	mov	r3, r0
 800ba82:	461a      	mov	r2, r3
 800ba84:	4629      	mov	r1, r5
 800ba86:	4620      	mov	r0, r4
 800ba88:	f000 fbd7 	bl	800c23a <_ZNSt16allocator_traitsISaIP9StatementEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	1d1a      	adds	r2, r3, #4
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	605a      	str	r2, [r3, #4]
 800ba96:	e00c      	b.n	800bab2 <_ZNSt6vectorIP9StatementSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fbe1 	bl	800c260 <_ZNSt6vectorIP9StatementSaIS1_EE3endEv>
 800ba9e:	4604      	mov	r4, r0
 800baa0:	6838      	ldr	r0, [r7, #0]
 800baa2:	f000 fbbf 	bl	800c224 <_ZSt7forwardIP9StatementEOT_RNSt16remove_referenceIS2_E4typeE>
 800baa6:	4603      	mov	r3, r0
 800baa8:	461a      	mov	r2, r3
 800baaa:	4621      	mov	r1, r4
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fbe9 	bl	800c284 <_ZNSt6vectorIP9StatementSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fc62 	bl	800c37c <_ZNSt6vectorIP9StatementSaIS1_EE4backEv>
 800bab8:	4603      	mov	r3, r0
      }
 800baba:	4618      	mov	r0, r3
 800babc:	3708      	adds	r7, #8
 800babe:	46bd      	mov	sp, r7
 800bac0:	bdb0      	pop	{r4, r5, r7, pc}

0800bac2 <_ZSt7forwardIOZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bac2:	b480      	push	{r7}
 800bac4:	b083      	sub	sp, #12
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4618      	mov	r0, r3
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKS8_St17integral_constantIjLj0EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800bad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800badc:	b084      	sub	sp, #16
 800bade:	af00      	add	r7, sp, #0
 800bae0:	60f8      	str	r0, [r7, #12]
 800bae2:	60b9      	str	r1, [r7, #8]
 800bae4:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f000 f879 	bl	800bbde <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800baec:	4604      	mov	r4, r0
 800baee:	68b8      	ldr	r0, [r7, #8]
 800baf0:	f7fd fa9b 	bl	800902a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800baf4:	4605      	mov	r5, r0
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 fc5b 	bl	800c3b2 <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800bafc:	4603      	mov	r3, r0
 800bafe:	462a      	mov	r2, r5
 800bb00:	4621      	mov	r1, r4
 800bb02:	4630      	mov	r0, r6
 800bb04:	f000 fc60 	bl	800c3c8 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKS9_St17integral_constantIjLj0EEEESD_St14__invoke_otherOSF_DpOT1_>
					std::forward<_Args>(__args)...);
 800bb08:	4643      	mov	r3, r8
    }
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bb14 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKiSt17integral_constantIjLj1EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800bb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb18:	b084      	sub	sp, #16
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	60f8      	str	r0, [r7, #12]
 800bb1e:	60b9      	str	r1, [r7, #8]
 800bb20:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f000 f85b 	bl	800bbde <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800bb28:	4604      	mov	r4, r0
 800bb2a:	68b8      	ldr	r0, [r7, #8]
 800bb2c:	f7fd fa9f 	bl	800906e <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800bb30:	4605      	mov	r5, r0
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 fc66 	bl	800c404 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	462a      	mov	r2, r5
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	4630      	mov	r0, r6
 800bb40:	f000 fc6b 	bl	800c41a <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKiSt17integral_constantIjLj1EEEESD_St14__invoke_otherOSF_DpOT1_>
					std::forward<_Args>(__args)...);
 800bb44:	4643      	mov	r3, r8
    }
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bb50 <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKfSt17integral_constantIjLj2EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800bb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb54:	b084      	sub	sp, #16
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	60f8      	str	r0, [r7, #12]
 800bb5a:	60b9      	str	r1, [r7, #8]
 800bb5c:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f000 f83d 	bl	800bbde <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800bb64:	4604      	mov	r4, r0
 800bb66:	68b8      	ldr	r0, [r7, #8]
 800bb68:	f7fd faa3 	bl	80090b2 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800bb6c:	4605      	mov	r5, r0
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fc71 	bl	800c456 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800bb74:	4603      	mov	r3, r0
 800bb76:	462a      	mov	r2, r5
 800bb78:	4621      	mov	r1, r4
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f000 fc76 	bl	800c46c <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKfSt17integral_constantIjLj2EEEESD_St14__invoke_otherOSF_DpOT1_>
					std::forward<_Args>(__args)...);
 800bb80:	4643      	mov	r3, r8
    }
 800bb82:	4618      	mov	r0, r3
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bb8c <_ZSt8__invokeIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_JRKbSt17integral_constantIjLj3EEEENSt15__invoke_resultISC_JDpT0_EE4typeESD_DpOSL_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800bb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb90:	b084      	sub	sp, #16
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	60f8      	str	r0, [r7, #12]
 800bb96:	60b9      	str	r1, [r7, #8]
 800bb98:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f000 f81f 	bl	800bbde <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800bba0:	4604      	mov	r4, r0
 800bba2:	68b8      	ldr	r0, [r7, #8]
 800bba4:	f7fd faa7 	bl	80090f6 <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 800bba8:	4605      	mov	r5, r0
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fc7c 	bl	800c4a8 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	462a      	mov	r2, r5
 800bbb4:	4621      	mov	r1, r4
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	f000 fc81 	bl	800c4be <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKbSt17integral_constantIjLj3EEEESD_St14__invoke_otherOSF_DpOT1_>
					std::forward<_Args>(__args)...);
 800bbbc:	4643      	mov	r3, r8
    }
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bbc8 <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_RKSt7variantIJS9_ifbEEEJEE9_M_accessEv>:
      _M_access() const
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	370c      	adds	r7, #12
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr

0800bbde <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bbde:	b480      	push	{r7}
 800bbe0:	b083      	sub	sp, #12
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4618      	mov	r0, r3
 800bc00:	370c      	adds	r7, #12
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <_ZNSt16allocator_traitsISaIP10ExpressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b084      	sub	sp, #16
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	60f8      	str	r0, [r7, #12]
 800bc12:	60b9      	str	r1, [r7, #8]
 800bc14:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f7ff ffec 	bl	800bbf4 <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	461a      	mov	r2, r3
 800bc20:	68b9      	ldr	r1, [r7, #8]
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f000 fc69 	bl	800c4fa <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 800bc28:	bf00      	nop
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	1d1a      	adds	r2, r3, #4
 800bc3c:	f107 030c 	add.w	r3, r7, #12
 800bc40:	4611      	mov	r1, r2
 800bc42:	4618      	mov	r0, r3
 800bc44:	f000 fc6f 	bl	800c526 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
	...

0800bc54 <_ZNSt6vectorIP10ExpressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800bc54:	b5b0      	push	{r4, r5, r7, lr}
 800bc56:	b08c      	sub	sp, #48	; 0x30
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800bc60:	4a39      	ldr	r2, [pc, #228]	; (800bd48 <_ZNSt6vectorIP10ExpressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800bc62:	2101      	movs	r1, #1
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f000 fc6e 	bl	800c546 <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc>
 800bc6a:	62f8      	str	r0, [r7, #44]	; 0x2c
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f000 fcab 	bl	800c5d4 <_ZNSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	617b      	str	r3, [r7, #20]
 800bc82:	f107 0214 	add.w	r2, r7, #20
 800bc86:	f107 0308 	add.w	r3, r7, #8
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f000 fcb1 	bl	800c5f4 <_ZN9__gnu_cxxmiIPP10ExpressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800bc92:	4603      	mov	r3, r0
 800bc94:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f000 fcbf 	bl	800c61e <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj>
 800bca0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800bca6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800bca8:	6a3b      	ldr	r3, [r7, #32]
 800bcaa:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800bcac:	69fa      	ldr	r2, [r7, #28]
 800bcae:	18d5      	adds	r5, r2, r3
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7ff ff9f 	bl	800bbf4 <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	461a      	mov	r2, r3
 800bcba:	4629      	mov	r1, r5
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f7ff ffa4 	bl	800bc0a <_ZNSt16allocator_traitsISaIP10ExpressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bcc6:	f107 0308 	add.w	r3, r7, #8
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 fccf 	bl	800c66e <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7ff fb07 	bl	800b2ea <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800bcdc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bcde:	69fa      	ldr	r2, [r7, #28]
 800bce0:	4621      	mov	r1, r4
 800bce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bce4:	f000 fcaf 	bl	800c646 <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800bce8:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	3304      	adds	r3, #4
 800bcee:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bcf0:	f107 0308 	add.w	r3, r7, #8
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f000 fcba 	bl	800c66e <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7ff faf2 	bl	800b2ea <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800bd06:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bd08:	69ba      	ldr	r2, [r7, #24]
 800bd0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f000 fc9a 	bl	800c646 <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800bd12:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800bd14:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	689a      	ldr	r2, [r3, #8]
 800bd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800bd20:	461a      	mov	r2, r3
 800bd22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd24:	f7ff face 	bl	800b2c4 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	69fa      	ldr	r2, [r7, #28]
 800bd2c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	69ba      	ldr	r2, [r7, #24]
 800bd32:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800bd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	69fa      	ldr	r2, [r7, #28]
 800bd3a:	441a      	add	r2, r3
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	609a      	str	r2, [r3, #8]
    }
 800bd40:	bf00      	nop
 800bd42:	3730      	adds	r7, #48	; 0x30
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bdb0      	pop	{r4, r5, r7, pc}
 800bd48:	0801a704 	.word	0x0801a704

0800bd4c <_ZNSt6vectorIP10ExpressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f7ff ff6b 	bl	800bc30 <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	60fb      	str	r3, [r7, #12]
 800bd5e:	f107 030c 	add.w	r3, r7, #12
 800bd62:	2101      	movs	r1, #1
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 fc8d 	bl	800c684 <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEmiEi>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	60bb      	str	r3, [r7, #8]
 800bd6e:	f107 0308 	add.w	r3, r7, #8
 800bd72:	4618      	mov	r0, r3
 800bd74:	f000 fc9f 	bl	800c6b6 <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEdeEv>
 800bd78:	4603      	mov	r3, r0
      }
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3710      	adds	r7, #16
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <_ZSt7forwardIP4BodyEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bd82:	b480      	push	{r7}
 800bd84:	b083      	sub	sp, #12
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <_ZNSt16allocator_traitsISaIP4BodyEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f7ff ffec 	bl	800bd82 <_ZSt7forwardIP4BodyEOT_RNSt16remove_referenceIS2_E4typeE>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	461a      	mov	r2, r3
 800bdae:	68b9      	ldr	r1, [r7, #8]
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f000 fc8c 	bl	800c6ce <_ZN9__gnu_cxx13new_allocatorIP4BodyE9constructIS2_JS2_EEEvPT_DpOT0_>
 800bdb6:	bf00      	nop
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <_ZNSt6vectorIP4BodySaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b084      	sub	sp, #16
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	1d1a      	adds	r2, r3, #4
 800bdca:	f107 030c 	add.w	r3, r7, #12
 800bdce:	4611      	mov	r1, r2
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f000 fc92 	bl	800c6fa <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3710      	adds	r7, #16
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <_ZNSt6vectorIP4BodySaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800bde0:	b5b0      	push	{r4, r5, r7, lr}
 800bde2:	b08c      	sub	sp, #48	; 0x30
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800bdec:	4a39      	ldr	r2, [pc, #228]	; (800bed4 <_ZNSt6vectorIP4BodySaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800bdee:	2101      	movs	r1, #1
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f000 fc92 	bl	800c71a <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc>
 800bdf6:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f000 fccf 	bl	800c7a8 <_ZNSt6vectorIP4BodySaIS1_EE5beginEv>
 800be0a:	4603      	mov	r3, r0
 800be0c:	617b      	str	r3, [r7, #20]
 800be0e:	f107 0214 	add.w	r2, r7, #20
 800be12:	f107 0308 	add.w	r3, r7, #8
 800be16:	4611      	mov	r1, r2
 800be18:	4618      	mov	r0, r3
 800be1a:	f000 fcd5 	bl	800c7c8 <_ZN9__gnu_cxxmiIPP4BodySt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800be1e:	4603      	mov	r3, r0
 800be20:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be26:	4618      	mov	r0, r3
 800be28:	f000 fce3 	bl	800c7f2 <_ZNSt12_Vector_baseIP4BodySaIS1_EE11_M_allocateEj>
 800be2c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800be32:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800be34:	6a3b      	ldr	r3, [r7, #32]
 800be36:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800be38:	69fa      	ldr	r2, [r7, #28]
 800be3a:	18d5      	adds	r5, r2, r3
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f7ff ffa0 	bl	800bd82 <_ZSt7forwardIP4BodyEOT_RNSt16remove_referenceIS2_E4typeE>
 800be42:	4603      	mov	r3, r0
 800be44:	461a      	mov	r2, r3
 800be46:	4629      	mov	r1, r5
 800be48:	4620      	mov	r0, r4
 800be4a:	f7ff ffa5 	bl	800bd98 <_ZNSt16allocator_traitsISaIP4BodyEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800be4e:	2300      	movs	r3, #0
 800be50:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800be52:	f107 0308 	add.w	r3, r7, #8
 800be56:	4618      	mov	r0, r3
 800be58:	f000 fcf3 	bl	800c842 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800be5c:	4603      	mov	r3, r0
 800be5e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4618      	mov	r0, r3
 800be64:	f7ff fa7f 	bl	800b366 <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800be68:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800be6a:	69fa      	ldr	r2, [r7, #28]
 800be6c:	4621      	mov	r1, r4
 800be6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be70:	f000 fcd3 	bl	800c81a <_ZNSt6vectorIP4BodySaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800be74:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	3304      	adds	r3, #4
 800be7a:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800be7c:	f107 0308 	add.w	r3, r7, #8
 800be80:	4618      	mov	r0, r3
 800be82:	f000 fcde 	bl	800c842 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800be86:	4603      	mov	r3, r0
 800be88:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7ff fa6a 	bl	800b366 <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800be92:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800be94:	69ba      	ldr	r2, [r7, #24]
 800be96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be98:	4620      	mov	r0, r4
 800be9a:	f000 fcbe 	bl	800c81a <_ZNSt6vectorIP4BodySaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800be9e:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800bea0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	689a      	ldr	r2, [r3, #8]
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800beac:	461a      	mov	r2, r3
 800beae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800beb0:	f7ff fa46 	bl	800b340 <_ZNSt12_Vector_baseIP4BodySaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	69fa      	ldr	r2, [r7, #28]
 800beb8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	69ba      	ldr	r2, [r7, #24]
 800bebe:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800bec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	69fa      	ldr	r2, [r7, #28]
 800bec6:	441a      	add	r2, r3
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	609a      	str	r2, [r3, #8]
    }
 800becc:	bf00      	nop
 800bece:	3730      	adds	r7, #48	; 0x30
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bdb0      	pop	{r4, r5, r7, pc}
 800bed4:	0801a704 	.word	0x0801a704

0800bed8 <_ZNSt6vectorIP4BodySaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f7ff ff6c 	bl	800bdbe <_ZNSt6vectorIP4BodySaIS1_EE3endEv>
 800bee6:	4603      	mov	r3, r0
 800bee8:	60fb      	str	r3, [r7, #12]
 800beea:	f107 030c 	add.w	r3, r7, #12
 800beee:	2101      	movs	r1, #1
 800bef0:	4618      	mov	r0, r3
 800bef2:	f000 fcb1 	bl	800c858 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEmiEi>
 800bef6:	4603      	mov	r3, r0
 800bef8:	60bb      	str	r3, [r7, #8]
 800befa:	f107 0308 	add.w	r3, r7, #8
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 fcc3 	bl	800c88a <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEdeEv>
 800bf04:	4603      	mov	r3, r0
      }
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <_ZN9__gnu_cxx13new_allocatorIP10ExpressionEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bf0e:	b480      	push	{r7}
 800bf10:	b083      	sub	sp, #12
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	370c      	adds	r7, #12
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <_ZNSt16allocator_traitsISaIP10ExpressionEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	68b9      	ldr	r1, [r7, #8]
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f000 fcb4 	bl	800c8a2 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE10deallocateEPS2_j>
 800bf3a:	bf00      	nop
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <_ZN9__gnu_cxx13new_allocatorIP4BodyEC1Ev>:
 800bf42:	b480      	push	{r7}
 800bf44:	b083      	sub	sp, #12
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <_ZNSt16allocator_traitsISaIP4BodyEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	68b9      	ldr	r1, [r7, #8]
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f000 fca6 	bl	800c8ba <_ZN9__gnu_cxx13new_allocatorIP4BodyE10deallocateEPS2_j>
 800bf6e:	bf00      	nop
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <_ZSt7forwardISt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bf76:	b480      	push	{r7}
 800bf78:	b083      	sub	sp, #12
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4618      	mov	r0, r3
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4618      	mov	r0, r3
 800bf98:	370c      	adds	r7, #12
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr

0800bfa2 <_ZNOSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE6_M_getEv>:
      _Type&& _M_get() && noexcept
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b082      	sub	sp, #8
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
      { return std::move(*_M_storage._M_ptr()); }
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7f7 fa2b 	bl	8003408 <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7ff fa2f 	bl	800b418 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <_ZSt7forwardIRSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	370c      	adds	r7, #12
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr

0800bfda <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bfda:	b480      	push	{r7}
 800bfdc:	b083      	sub	sp, #12
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP13Function_callP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	4618      	mov	r0, r3
 800bffc:	370c      	adds	r7, #12
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEE8_M_resetEv>:
      void _M_reset()
 800c006:	b480      	push	{r7}
 800c008:	b083      	sub	sp, #12
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
      { _M_index = variant_npos; }
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	22ff      	movs	r2, #255	; 0xff
 800c012:	711a      	strb	r2, [r3, #4]
 800c014:	bf00      	nop
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEJS4_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800c020:	b590      	push	{r4, r7, lr}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2201      	movs	r2, #1
 800c02e:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7ff fa1f 	bl	800b474 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>
 800c036:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800c038:	6838      	ldr	r0, [r7, #0]
 800c03a:	f7ff fa49 	bl	800b4d0 <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800c03e:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800c040:	681c      	ldr	r4, [r3, #0]
 800c042:	68f8      	ldr	r0, [r7, #12]
 800c044:	f000 fc45 	bl	800c8d2 <_ZSt9addressofIP13Function_callEPT_RS2_>
 800c048:	4603      	mov	r3, r0
 800c04a:	4619      	mov	r1, r3
 800c04c:	2004      	movs	r0, #4
 800c04e:	f7f4 ffc5 	bl	8000fdc <_ZnwjPv>
 800c052:	4603      	mov	r3, r0
 800c054:	601c      	str	r4, [r3, #0]
    }
 800c056:	bf00      	nop
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd90      	pop	{r4, r7, pc}

0800c05e <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP11Method_callP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c05e:	b480      	push	{r7}
 800c060:	b083      	sub	sp, #12
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4618      	mov	r0, r3
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <_ZNRSt8__detail9__variant14_UninitializedIP11Method_callLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4618      	mov	r0, r3
 800c080:	370c      	adds	r7, #12
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr

0800c08a <_ZSt28__variant_construct_by_indexILj2ESt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEJS6_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800c08a:	b590      	push	{r4, r7, lr}
 800c08c:	b085      	sub	sp, #20
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
 800c092:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2202      	movs	r2, #2
 800c098:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f7ff fa71 	bl	800b582 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>
 800c0a0:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800c0a2:	6838      	ldr	r0, [r7, #0]
 800c0a4:	f7ff fa9a 	bl	800b5dc <_ZSt7forwardIP11Method_callEOT_RNSt16remove_referenceIS2_E4typeE>
 800c0a8:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800c0aa:	681c      	ldr	r4, [r3, #0]
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f000 fc1c 	bl	800c8ea <_ZSt9addressofIP11Method_callEPT_RS2_>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	2004      	movs	r0, #4
 800c0b8:	f7f4 ff90 	bl	8000fdc <_ZnwjPv>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	601c      	str	r4, [r3, #0]
    }
 800c0c0:	bf00      	nop
 800c0c2:	3714      	adds	r7, #20
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd90      	pop	{r4, r7, pc}

0800c0c8 <_ZNRSt8__detail9__variant14_UninitializedIP10AssignmentLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	370c      	adds	r7, #12
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr

0800c0de <_ZSt28__variant_construct_by_indexILj0ESt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEJS2_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800c0de:	b590      	push	{r4, r7, lr}
 800c0e0:	b085      	sub	sp, #20
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
 800c0e6:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f7ff faa9 	bl	800b646 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>
 800c0f4:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800c0f6:	6838      	ldr	r0, [r7, #0]
 800c0f8:	f7ff fad2 	bl	800b6a0 <_ZSt7forwardIP10AssignmentEOT_RNSt16remove_referenceIS2_E4typeE>
 800c0fc:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800c0fe:	681c      	ldr	r4, [r3, #0]
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f000 fbfe 	bl	800c902 <_ZSt9addressofIP10AssignmentEPT_RS2_>
 800c106:	4603      	mov	r3, r0
 800c108:	4619      	mov	r1, r3
 800c10a:	2004      	movs	r0, #4
 800c10c:	f7f4 ff66 	bl	8000fdc <_ZnwjPv>
 800c110:	4603      	mov	r3, r0
 800c112:	601c      	str	r4, [r3, #0]
    }
 800c114:	bf00      	nop
 800c116:	3714      	adds	r7, #20
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd90      	pop	{r4, r7, pc}

0800c11c <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP15While_statementP12If_statementEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4618      	mov	r0, r3
 800c128:	370c      	adds	r7, #12
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <_ZNRSt8__detail9__variant14_UninitializedIP15While_statementLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 800c132:	b480      	push	{r7}
 800c134:	b083      	sub	sp, #12
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <_ZSt28__variant_construct_by_indexILj3ESt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEJS8_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800c148:	b590      	push	{r4, r7, lr}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2203      	movs	r2, #3
 800c156:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7ff fb3c 	bl	800b7d6 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>
 800c15e:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800c160:	6838      	ldr	r0, [r7, #0]
 800c162:	f7ff fb65 	bl	800b830 <_ZSt7forwardIP15While_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800c166:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800c168:	681c      	ldr	r4, [r3, #0]
 800c16a:	68f8      	ldr	r0, [r7, #12]
 800c16c:	f000 fbd5 	bl	800c91a <_ZSt9addressofIP15While_statementEPT_RS2_>
 800c170:	4603      	mov	r3, r0
 800c172:	4619      	mov	r1, r3
 800c174:	2004      	movs	r0, #4
 800c176:	f7f4 ff31 	bl	8000fdc <_ZnwjPv>
 800c17a:	4603      	mov	r3, r0
 800c17c:	601c      	str	r4, [r3, #0]
    }
 800c17e:	bf00      	nop
 800c180:	3714      	adds	r7, #20
 800c182:	46bd      	mov	sp, r7
 800c184:	bd90      	pop	{r4, r7, pc}

0800c186 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP12If_statementEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c186:	b480      	push	{r7}
 800c188:	b083      	sub	sp, #12
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4618      	mov	r0, r3
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <_ZNRSt8__detail9__variant14_UninitializedIP12If_statementLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	370c      	adds	r7, #12
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr

0800c1b2 <_ZSt28__variant_construct_by_indexILj4ESt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEJSA_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800c1b2:	b590      	push	{r4, r7, lr}
 800c1b4:	b085      	sub	sp, #20
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2204      	movs	r2, #4
 800c1c0:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f7ff fbb1 	bl	800b92a <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEEEEDcOT0_>
 800c1c8:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800c1ca:	6838      	ldr	r0, [r7, #0]
 800c1cc:	f7ff fbda 	bl	800b984 <_ZSt7forwardIP12If_statementEOT_RNSt16remove_referenceIS2_E4typeE>
 800c1d0:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800c1d2:	681c      	ldr	r4, [r3, #0]
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f000 fbac 	bl	800c932 <_ZSt9addressofIP12If_statementEPT_RS2_>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	4619      	mov	r1, r3
 800c1de:	2004      	movs	r0, #4
 800c1e0:	f7f4 fefc 	bl	8000fdc <_ZnwjPv>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	601c      	str	r4, [r3, #0]
    }
 800c1e8:	bf00      	nop
 800c1ea:	3714      	adds	r7, #20
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd90      	pop	{r4, r7, pc}

0800c1f0 <_ZN9__gnu_cxx13new_allocatorIP9StatementEC1Ev>:
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <_ZNSt16allocator_traitsISaIP9StatementEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c206:	b580      	push	{r7, lr}
 800c208:	b084      	sub	sp, #16
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	60f8      	str	r0, [r7, #12]
 800c20e:	60b9      	str	r1, [r7, #8]
 800c210:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	68b9      	ldr	r1, [r7, #8]
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f000 fb97 	bl	800c94a <_ZN9__gnu_cxx13new_allocatorIP9StatementE10deallocateEPS2_j>
 800c21c:	bf00      	nop
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <_ZSt7forwardIP9StatementEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4618      	mov	r0, r3
 800c230:	370c      	adds	r7, #12
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <_ZNSt16allocator_traitsISaIP9StatementEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b084      	sub	sp, #16
 800c23e:	af00      	add	r7, sp, #0
 800c240:	60f8      	str	r0, [r7, #12]
 800c242:	60b9      	str	r1, [r7, #8]
 800c244:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f7ff ffec 	bl	800c224 <_ZSt7forwardIP9StatementEOT_RNSt16remove_referenceIS2_E4typeE>
 800c24c:	4603      	mov	r3, r0
 800c24e:	461a      	mov	r2, r3
 800c250:	68b9      	ldr	r1, [r7, #8]
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f000 fb85 	bl	800c962 <_ZN9__gnu_cxx13new_allocatorIP9StatementE9constructIS2_JS2_EEEvPT_DpOT0_>
 800c258:	bf00      	nop
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <_ZNSt6vectorIP9StatementSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	1d1a      	adds	r2, r3, #4
 800c26c:	f107 030c 	add.w	r3, r7, #12
 800c270:	4611      	mov	r1, r2
 800c272:	4618      	mov	r0, r3
 800c274:	f000 fb8b 	bl	800c98e <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	4618      	mov	r0, r3
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
	...

0800c284 <_ZNSt6vectorIP9StatementSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800c284:	b5b0      	push	{r4, r5, r7, lr}
 800c286:	b08c      	sub	sp, #48	; 0x30
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800c290:	4a39      	ldr	r2, [pc, #228]	; (800c378 <_ZNSt6vectorIP9StatementSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800c292:	2101      	movs	r1, #1
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f000 fb8a 	bl	800c9ae <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc>
 800c29a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f000 fbc7 	bl	800ca3c <_ZNSt6vectorIP9StatementSaIS1_EE5beginEv>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	617b      	str	r3, [r7, #20]
 800c2b2:	f107 0214 	add.w	r2, r7, #20
 800c2b6:	f107 0308 	add.w	r3, r7, #8
 800c2ba:	4611      	mov	r1, r2
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f000 fbcd 	bl	800ca5c <_ZN9__gnu_cxxmiIPP9StatementSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 fbdb 	bl	800ca86 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE11_M_allocateEj>
 800c2d0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800c2d6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c2d8:	6a3b      	ldr	r3, [r7, #32]
 800c2da:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800c2dc:	69fa      	ldr	r2, [r7, #28]
 800c2de:	18d5      	adds	r5, r2, r3
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f7ff ff9f 	bl	800c224 <_ZSt7forwardIP9StatementEOT_RNSt16remove_referenceIS2_E4typeE>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f7ff ffa4 	bl	800c23a <_ZNSt16allocator_traitsISaIP9StatementEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c2f6:	f107 0308 	add.w	r3, r7, #8
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f000 fbeb 	bl	800cad6 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800c300:	4603      	mov	r3, r0
 800c302:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	4618      	mov	r0, r3
 800c308:	f7ff fb93 	bl	800ba32 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800c30c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c30e:	69fa      	ldr	r2, [r7, #28]
 800c310:	4621      	mov	r1, r4
 800c312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c314:	f000 fbcb 	bl	800caae <_ZNSt6vectorIP9StatementSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800c318:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	3304      	adds	r3, #4
 800c31e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c320:	f107 0308 	add.w	r3, r7, #8
 800c324:	4618      	mov	r0, r3
 800c326:	f000 fbd6 	bl	800cad6 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800c32a:	4603      	mov	r3, r0
 800c32c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	4618      	mov	r0, r3
 800c332:	f7ff fb7e 	bl	800ba32 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800c336:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c338:	69ba      	ldr	r2, [r7, #24]
 800c33a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c33c:	4620      	mov	r0, r4
 800c33e:	f000 fbb6 	bl	800caae <_ZNSt6vectorIP9StatementSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800c342:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800c344:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	689a      	ldr	r2, [r3, #8]
 800c34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800c350:	461a      	mov	r2, r3
 800c352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c354:	f7ff fb5a 	bl	800ba0c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	69fa      	ldr	r2, [r7, #28]
 800c35c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	69ba      	ldr	r2, [r7, #24]
 800c362:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	69fa      	ldr	r2, [r7, #28]
 800c36a:	441a      	add	r2, r3
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	609a      	str	r2, [r3, #8]
    }
 800c370:	bf00      	nop
 800c372:	3730      	adds	r7, #48	; 0x30
 800c374:	46bd      	mov	sp, r7
 800c376:	bdb0      	pop	{r4, r5, r7, pc}
 800c378:	0801a704 	.word	0x0801a704

0800c37c <_ZNSt6vectorIP9StatementSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f7ff ff6b 	bl	800c260 <_ZNSt6vectorIP9StatementSaIS1_EE3endEv>
 800c38a:	4603      	mov	r3, r0
 800c38c:	60fb      	str	r3, [r7, #12]
 800c38e:	f107 030c 	add.w	r3, r7, #12
 800c392:	2101      	movs	r1, #1
 800c394:	4618      	mov	r0, r3
 800c396:	f000 fba9 	bl	800caec <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEmiEi>
 800c39a:	4603      	mov	r3, r0
 800c39c:	60bb      	str	r3, [r7, #8]
 800c39e:	f107 0308 	add.w	r3, r7, #8
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 fbbb 	bl	800cb1e <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEdeEv>
 800c3a8:	4603      	mov	r3, r0
      }
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c3b2:	b480      	push	{r7}
 800c3b4:	b083      	sub	sp, #12
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKS9_St17integral_constantIjLj0EEEESD_St14__invoke_otherOSF_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800c3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3cc:	b084      	sub	sp, #16
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	7338      	strb	r0, [r7, #12]
 800c3d2:	60b9      	str	r1, [r7, #8]
 800c3d4:	607a      	str	r2, [r7, #4]
 800c3d6:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800c3d8:	68b8      	ldr	r0, [r7, #8]
 800c3da:	f7ff fc00 	bl	800bbde <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800c3de:	4604      	mov	r4, r0
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f7fc fe22 	bl	800902a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800c3e6:	4605      	mov	r5, r0
 800c3e8:	6838      	ldr	r0, [r7, #0]
 800c3ea:	f7ff ffe2 	bl	800c3b2 <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c3ee:	4632      	mov	r2, r6
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f000 fb9f 	bl	800cb36 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESC_SD_>
 800c3f8:	4643      	mov	r3, r8
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c404 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	4618      	mov	r0, r3
 800c410:	370c      	adds	r7, #12
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr

0800c41a <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKiSt17integral_constantIjLj1EEEESD_St14__invoke_otherOSF_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800c41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	7338      	strb	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
 800c428:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800c42a:	68b8      	ldr	r0, [r7, #8]
 800c42c:	f7ff fbd7 	bl	800bbde <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800c430:	4604      	mov	r4, r0
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7fc fe1b 	bl	800906e <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800c438:	4605      	mov	r5, r0
 800c43a:	6838      	ldr	r0, [r7, #0]
 800c43c:	f7ff ffe2 	bl	800c404 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c440:	4632      	mov	r2, r6
 800c442:	4629      	mov	r1, r5
 800c444:	4620      	mov	r0, r4
 800c446:	f000 fbfa 	bl	800cc3e <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESC_SD_>
 800c44a:	4643      	mov	r3, r8
 800c44c:	4618      	mov	r0, r3
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c456 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c456:	b480      	push	{r7}
 800c458:	b083      	sub	sp, #12
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4618      	mov	r0, r3
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKfSt17integral_constantIjLj2EEEESD_St14__invoke_otherOSF_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800c46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c470:	b084      	sub	sp, #16
 800c472:	af00      	add	r7, sp, #0
 800c474:	7338      	strb	r0, [r7, #12]
 800c476:	60b9      	str	r1, [r7, #8]
 800c478:	607a      	str	r2, [r7, #4]
 800c47a:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800c47c:	68b8      	ldr	r0, [r7, #8]
 800c47e:	f7ff fbae 	bl	800bbde <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800c482:	4604      	mov	r4, r0
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7fc fe14 	bl	80090b2 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800c48a:	4605      	mov	r5, r0
 800c48c:	6838      	ldr	r0, [r7, #0]
 800c48e:	f7ff ffe2 	bl	800c456 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c492:	4632      	mov	r2, r6
 800c494:	4629      	mov	r1, r5
 800c496:	4620      	mov	r0, r4
 800c498:	f000 fc20 	bl	800ccdc <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESC_SD_>
 800c49c:	4643      	mov	r3, r8
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c4a8 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	370c      	adds	r7, #12
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr

0800c4be <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKSA_EUlOT_T0_E_JRKbSt17integral_constantIjLj3EEEESD_St14__invoke_otherOSF_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800c4be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	7338      	strb	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
 800c4cc:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800c4ce:	68b8      	ldr	r0, [r7, #8]
 800c4d0:	f7ff fb85 	bl	800bbde <_ZSt7forwardIZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS9_EUlOT_T0_E_ESD_RNSt16remove_referenceISC_E4typeE>
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7fc fe0d 	bl	80090f6 <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 800c4dc:	4605      	mov	r5, r0
 800c4de:	6838      	ldr	r0, [r7, #0]
 800c4e0:	f7ff ffe2 	bl	800c4a8 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c4e4:	4632      	mov	r2, r6
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f000 fc46 	bl	800cd7a <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESC_SD_>
 800c4ee:	4643      	mov	r3, r8
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c4fa <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800c4fa:	b590      	push	{r4, r7, lr}
 800c4fc:	b085      	sub	sp, #20
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	60f8      	str	r0, [r7, #12]
 800c502:	60b9      	str	r1, [r7, #8]
 800c504:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7ff fb74 	bl	800bbf4 <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 800c50c:	4603      	mov	r3, r0
 800c50e:	681c      	ldr	r4, [r3, #0]
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	4619      	mov	r1, r3
 800c514:	2004      	movs	r0, #4
 800c516:	f7f4 fd61 	bl	8000fdc <_ZnwjPv>
 800c51a:	4603      	mov	r3, r0
 800c51c:	601c      	str	r4, [r3, #0]
 800c51e:	bf00      	nop
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	bd90      	pop	{r4, r7, pc}

0800c526 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c526:	b480      	push	{r7}
 800c528:	b083      	sub	sp, #12
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	601a      	str	r2, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4618      	mov	r0, r3
 800c53c:	370c      	adds	r7, #12
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr

0800c546 <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800c546:	b590      	push	{r4, r7, lr}
 800c548:	b087      	sub	sp, #28
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	60f8      	str	r0, [r7, #12]
 800c54e:	60b9      	str	r1, [r7, #8]
 800c550:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f000 fc61 	bl	800ce1a <_ZNKSt6vectorIP10ExpressionSaIS1_EE8max_sizeEv>
 800c558:	4604      	mov	r4, r0
 800c55a:	68f8      	ldr	r0, [r7, #12]
 800c55c:	f000 fc6e 	bl	800ce3c <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800c560:	4603      	mov	r3, r0
 800c562:	1ae2      	subs	r2, r4, r3
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	429a      	cmp	r2, r3
 800c568:	bf34      	ite	cc
 800c56a:	2301      	movcc	r3, #1
 800c56c:	2300      	movcs	r3, #0
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b00      	cmp	r3, #0
 800c572:	d002      	beq.n	800c57a <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f00a fca8 	bl	8016eca <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f000 fc5e 	bl	800ce3c <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800c580:	4604      	mov	r4, r0
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	f000 fc5a 	bl	800ce3c <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800c588:	4603      	mov	r3, r0
 800c58a:	613b      	str	r3, [r7, #16]
 800c58c:	f107 0208 	add.w	r2, r7, #8
 800c590:	f107 0310 	add.w	r3, r7, #16
 800c594:	4611      	mov	r1, r2
 800c596:	4618      	mov	r0, r3
 800c598:	f000 fc60 	bl	800ce5c <_ZSt3maxIjERKT_S2_S2_>
 800c59c:	4603      	mov	r3, r0
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4423      	add	r3, r4
 800c5a2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f000 fc49 	bl	800ce3c <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d306      	bcc.n	800c5c0 <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f000 fc31 	bl	800ce1a <_ZNKSt6vectorIP10ExpressionSaIS1_EE8max_sizeEv>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d904      	bls.n	800c5ca <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f000 fc2a 	bl	800ce1a <_ZNKSt6vectorIP10ExpressionSaIS1_EE8max_sizeEv>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	e000      	b.n	800c5cc <_ZNKSt6vectorIP10ExpressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 800c5ca:	697b      	ldr	r3, [r7, #20]
      }
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	371c      	adds	r7, #28
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd90      	pop	{r4, r7, pc}

0800c5d4 <_ZNSt6vectorIP10ExpressionSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	f107 030c 	add.w	r3, r7, #12
 800c5e2:	4611      	mov	r1, r2
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7ff ff9e 	bl	800c526 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <_ZN9__gnu_cxxmiIPP10ExpressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c5f4:	b590      	push	{r4, r7, lr}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f835 	bl	800c66e <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800c604:	4603      	mov	r3, r0
 800c606:	681c      	ldr	r4, [r3, #0]
 800c608:	6838      	ldr	r0, [r7, #0]
 800c60a:	f000 f830 	bl	800c66e <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800c60e:	4603      	mov	r3, r0
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	1ae3      	subs	r3, r4, r3
 800c614:	109b      	asrs	r3, r3, #2
 800c616:	4618      	mov	r0, r3
 800c618:	370c      	adds	r7, #12
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd90      	pop	{r4, r7, pc}

0800c61e <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c61e:	b580      	push	{r7, lr}
 800c620:	b082      	sub	sp, #8
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
 800c626:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d006      	beq.n	800c63c <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj+0x1e>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6839      	ldr	r1, [r7, #0]
 800c632:	4618      	mov	r0, r3
 800c634:	f000 fc26 	bl	800ce84 <_ZNSt16allocator_traitsISaIP10ExpressionEE8allocateERS2_j>
 800c638:	4603      	mov	r3, r0
 800c63a:	e000      	b.n	800c63e <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE11_M_allocateEj+0x20>
 800c63c:	2300      	movs	r3, #0
      }
 800c63e:	4618      	mov	r0, r3
 800c640:	3708      	adds	r7, #8
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c646:	b590      	push	{r4, r7, lr}
 800c648:	b089      	sub	sp, #36	; 0x24
 800c64a:	af02      	add	r7, sp, #8
 800c64c:	60f8      	str	r0, [r7, #12]
 800c64e:	60b9      	str	r1, [r7, #8]
 800c650:	607a      	str	r2, [r7, #4]
 800c652:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c654:	f88d 4000 	strb.w	r4, [sp]
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	68b9      	ldr	r1, [r7, #8]
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f000 fc1f 	bl	800cea2 <_ZNSt6vectorIP10ExpressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800c664:	4603      	mov	r3, r0
      }
 800c666:	4618      	mov	r0, r3
 800c668:	371c      	adds	r7, #28
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd90      	pop	{r4, r7, pc}

0800c66e <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c66e:	b480      	push	{r7}
 800c670:	b083      	sub	sp, #12
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4618      	mov	r0, r3
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	425b      	negs	r3, r3
 800c698:	4413      	add	r3, r2
 800c69a:	60fb      	str	r3, [r7, #12]
 800c69c:	f107 020c 	add.w	r2, r7, #12
 800c6a0:	f107 0308 	add.w	r3, r7, #8
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7ff ff3d 	bl	800c526 <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c6b6:	b480      	push	{r7}
 800c6b8:	b083      	sub	sp, #12
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	370c      	adds	r7, #12
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <_ZN9__gnu_cxx13new_allocatorIP4BodyE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800c6ce:	b590      	push	{r4, r7, lr}
 800c6d0:	b085      	sub	sp, #20
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	60f8      	str	r0, [r7, #12]
 800c6d6:	60b9      	str	r1, [r7, #8]
 800c6d8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7ff fb51 	bl	800bd82 <_ZSt7forwardIP4BodyEOT_RNSt16remove_referenceIS2_E4typeE>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	681c      	ldr	r4, [r3, #0]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	2004      	movs	r0, #4
 800c6ea:	f7f4 fc77 	bl	8000fdc <_ZnwjPv>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	601c      	str	r4, [r3, #0]
 800c6f2:	bf00      	nop
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd90      	pop	{r4, r7, pc}

0800c6fa <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c6fa:	b480      	push	{r7}
 800c6fc:	b083      	sub	sp, #12
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
 800c702:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	601a      	str	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	4618      	mov	r0, r3
 800c710:	370c      	adds	r7, #12
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800c71a:	b590      	push	{r4, r7, lr}
 800c71c:	b087      	sub	sp, #28
 800c71e:	af00      	add	r7, sp, #0
 800c720:	60f8      	str	r0, [r7, #12]
 800c722:	60b9      	str	r1, [r7, #8]
 800c724:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	f000 fbcd 	bl	800cec6 <_ZNKSt6vectorIP4BodySaIS1_EE8max_sizeEv>
 800c72c:	4604      	mov	r4, r0
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	f000 fbda 	bl	800cee8 <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800c734:	4603      	mov	r3, r0
 800c736:	1ae2      	subs	r2, r4, r3
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	bf34      	ite	cc
 800c73e:	2301      	movcc	r3, #1
 800c740:	2300      	movcs	r3, #0
 800c742:	b2db      	uxtb	r3, r3
 800c744:	2b00      	cmp	r3, #0
 800c746:	d002      	beq.n	800c74e <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f00a fbbe 	bl	8016eca <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f000 fbca 	bl	800cee8 <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800c754:	4604      	mov	r4, r0
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f000 fbc6 	bl	800cee8 <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800c75c:	4603      	mov	r3, r0
 800c75e:	613b      	str	r3, [r7, #16]
 800c760:	f107 0208 	add.w	r2, r7, #8
 800c764:	f107 0310 	add.w	r3, r7, #16
 800c768:	4611      	mov	r1, r2
 800c76a:	4618      	mov	r0, r3
 800c76c:	f000 fb76 	bl	800ce5c <_ZSt3maxIjERKT_S2_S2_>
 800c770:	4603      	mov	r3, r0
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4423      	add	r3, r4
 800c776:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f000 fbb5 	bl	800cee8 <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>
 800c77e:	4602      	mov	r2, r0
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	4293      	cmp	r3, r2
 800c784:	d306      	bcc.n	800c794 <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc+0x7a>
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f000 fb9d 	bl	800cec6 <_ZNKSt6vectorIP4BodySaIS1_EE8max_sizeEv>
 800c78c:	4602      	mov	r2, r0
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	4293      	cmp	r3, r2
 800c792:	d904      	bls.n	800c79e <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc+0x84>
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f000 fb96 	bl	800cec6 <_ZNKSt6vectorIP4BodySaIS1_EE8max_sizeEv>
 800c79a:	4603      	mov	r3, r0
 800c79c:	e000      	b.n	800c7a0 <_ZNKSt6vectorIP4BodySaIS1_EE12_M_check_lenEjPKc+0x86>
 800c79e:	697b      	ldr	r3, [r7, #20]
      }
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	371c      	adds	r7, #28
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd90      	pop	{r4, r7, pc}

0800c7a8 <_ZNSt6vectorIP4BodySaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	f107 030c 	add.w	r3, r7, #12
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff ff9e 	bl	800c6fa <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3710      	adds	r7, #16
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <_ZN9__gnu_cxxmiIPP4BodySt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c7c8:	b590      	push	{r4, r7, lr}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 f835 	bl	800c842 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	681c      	ldr	r4, [r3, #0]
 800c7dc:	6838      	ldr	r0, [r7, #0]
 800c7de:	f000 f830 	bl	800c842 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	1ae3      	subs	r3, r4, r3
 800c7e8:	109b      	asrs	r3, r3, #2
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	370c      	adds	r7, #12
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd90      	pop	{r4, r7, pc}

0800c7f2 <_ZNSt12_Vector_baseIP4BodySaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b082      	sub	sp, #8
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
 800c7fa:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d006      	beq.n	800c810 <_ZNSt12_Vector_baseIP4BodySaIS1_EE11_M_allocateEj+0x1e>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6839      	ldr	r1, [r7, #0]
 800c806:	4618      	mov	r0, r3
 800c808:	f000 fb7e 	bl	800cf08 <_ZNSt16allocator_traitsISaIP4BodyEE8allocateERS2_j>
 800c80c:	4603      	mov	r3, r0
 800c80e:	e000      	b.n	800c812 <_ZNSt12_Vector_baseIP4BodySaIS1_EE11_M_allocateEj+0x20>
 800c810:	2300      	movs	r3, #0
      }
 800c812:	4618      	mov	r0, r3
 800c814:	3708      	adds	r7, #8
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <_ZNSt6vectorIP4BodySaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c81a:	b590      	push	{r4, r7, lr}
 800c81c:	b089      	sub	sp, #36	; 0x24
 800c81e:	af02      	add	r7, sp, #8
 800c820:	60f8      	str	r0, [r7, #12]
 800c822:	60b9      	str	r1, [r7, #8]
 800c824:	607a      	str	r2, [r7, #4]
 800c826:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c828:	f88d 4000 	strb.w	r4, [sp]
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	68b9      	ldr	r1, [r7, #8]
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f000 fb77 	bl	800cf26 <_ZNSt6vectorIP4BodySaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800c838:	4603      	mov	r3, r0
      }
 800c83a:	4618      	mov	r0, r3
 800c83c:	371c      	adds	r7, #28
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd90      	pop	{r4, r7, pc}

0800c842 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c842:	b480      	push	{r7}
 800c844:	b083      	sub	sp, #12
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4618      	mov	r0, r3
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	425b      	negs	r3, r3
 800c86c:	4413      	add	r3, r2
 800c86e:	60fb      	str	r3, [r7, #12]
 800c870:	f107 020c 	add.w	r2, r7, #12
 800c874:	f107 0308 	add.w	r3, r7, #8
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7ff ff3d 	bl	800c6fa <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c88a:	b480      	push	{r7}
 800c88c:	b083      	sub	sp, #12
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4618      	mov	r0, r3
 800c898:	370c      	adds	r7, #12
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr

0800c8a2 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b084      	sub	sp, #16
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	60f8      	str	r0, [r7, #12]
 800c8aa:	60b9      	str	r1, [r7, #8]
 800c8ac:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c8ae:	68b8      	ldr	r0, [r7, #8]
 800c8b0:	f00a fa39 	bl	8016d26 <_ZdlPv>
      }
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <_ZN9__gnu_cxx13new_allocatorIP4BodyE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b084      	sub	sp, #16
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	60f8      	str	r0, [r7, #12]
 800c8c2:	60b9      	str	r1, [r7, #8]
 800c8c4:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c8c6:	68b8      	ldr	r0, [r7, #8]
 800c8c8:	f00a fa2d 	bl	8016d26 <_ZdlPv>
      }
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <_ZSt9addressofIP13Function_callEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b082      	sub	sp, #8
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7f9 fd3c 	bl	8006358 <_ZSt11__addressofIP13Function_callEPT_RS2_>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <_ZSt9addressofIP11Method_callEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b082      	sub	sp, #8
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 fb29 	bl	800cf4a <_ZSt11__addressofIP11Method_callEPT_RS2_>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <_ZSt9addressofIP10AssignmentEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 800c902:	b580      	push	{r7, lr}
 800c904:	b082      	sub	sp, #8
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 fb28 	bl	800cf60 <_ZSt11__addressofIP10AssignmentEPT_RS2_>
 800c910:	4603      	mov	r3, r0
 800c912:	4618      	mov	r0, r3
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <_ZSt9addressofIP15While_statementEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b082      	sub	sp, #8
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fb27 	bl	800cf76 <_ZSt11__addressofIP15While_statementEPT_RS2_>
 800c928:	4603      	mov	r3, r0
 800c92a:	4618      	mov	r0, r3
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <_ZSt9addressofIP12If_statementEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 800c932:	b580      	push	{r7, lr}
 800c934:	b082      	sub	sp, #8
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 fb26 	bl	800cf8c <_ZSt11__addressofIP12If_statementEPT_RS2_>
 800c940:	4603      	mov	r3, r0
 800c942:	4618      	mov	r0, r3
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <_ZN9__gnu_cxx13new_allocatorIP9StatementE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b084      	sub	sp, #16
 800c94e:	af00      	add	r7, sp, #0
 800c950:	60f8      	str	r0, [r7, #12]
 800c952:	60b9      	str	r1, [r7, #8]
 800c954:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c956:	68b8      	ldr	r0, [r7, #8]
 800c958:	f00a f9e5 	bl	8016d26 <_ZdlPv>
      }
 800c95c:	3710      	adds	r7, #16
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}

0800c962 <_ZN9__gnu_cxx13new_allocatorIP9StatementE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800c962:	b590      	push	{r4, r7, lr}
 800c964:	b085      	sub	sp, #20
 800c966:	af00      	add	r7, sp, #0
 800c968:	60f8      	str	r0, [r7, #12]
 800c96a:	60b9      	str	r1, [r7, #8]
 800c96c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7ff fc58 	bl	800c224 <_ZSt7forwardIP9StatementEOT_RNSt16remove_referenceIS2_E4typeE>
 800c974:	4603      	mov	r3, r0
 800c976:	681c      	ldr	r4, [r3, #0]
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	4619      	mov	r1, r3
 800c97c:	2004      	movs	r0, #4
 800c97e:	f7f4 fb2d 	bl	8000fdc <_ZnwjPv>
 800c982:	4603      	mov	r3, r0
 800c984:	601c      	str	r4, [r3, #0]
 800c986:	bf00      	nop
 800c988:	3714      	adds	r7, #20
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd90      	pop	{r4, r7, pc}

0800c98e <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c98e:	b480      	push	{r7}
 800c990:	b083      	sub	sp, #12
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	601a      	str	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	370c      	adds	r7, #12
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800c9ae:	b590      	push	{r4, r7, lr}
 800c9b0:	b087      	sub	sp, #28
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	60f8      	str	r0, [r7, #12]
 800c9b6:	60b9      	str	r1, [r7, #8]
 800c9b8:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f000 faf1 	bl	800cfa2 <_ZNKSt6vectorIP9StatementSaIS1_EE8max_sizeEv>
 800c9c0:	4604      	mov	r4, r0
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f000 fafe 	bl	800cfc4 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	1ae2      	subs	r2, r4, r3
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	bf34      	ite	cc
 800c9d2:	2301      	movcc	r3, #1
 800c9d4:	2300      	movcs	r3, #0
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d002      	beq.n	800c9e2 <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f00a fa74 	bl	8016eca <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f000 faee 	bl	800cfc4 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f000 faea 	bl	800cfc4 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	613b      	str	r3, [r7, #16]
 800c9f4:	f107 0208 	add.w	r2, r7, #8
 800c9f8:	f107 0310 	add.w	r3, r7, #16
 800c9fc:	4611      	mov	r1, r2
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f000 fa2c 	bl	800ce5c <_ZSt3maxIjERKT_S2_S2_>
 800ca04:	4603      	mov	r3, r0
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4423      	add	r3, r4
 800ca0a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f000 fad9 	bl	800cfc4 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>
 800ca12:	4602      	mov	r2, r0
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d306      	bcc.n	800ca28 <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f000 fac1 	bl	800cfa2 <_ZNKSt6vectorIP9StatementSaIS1_EE8max_sizeEv>
 800ca20:	4602      	mov	r2, r0
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d904      	bls.n	800ca32 <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc+0x84>
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f000 faba 	bl	800cfa2 <_ZNKSt6vectorIP9StatementSaIS1_EE8max_sizeEv>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	e000      	b.n	800ca34 <_ZNKSt6vectorIP9StatementSaIS1_EE12_M_check_lenEjPKc+0x86>
 800ca32:	697b      	ldr	r3, [r7, #20]
      }
 800ca34:	4618      	mov	r0, r3
 800ca36:	371c      	adds	r7, #28
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd90      	pop	{r4, r7, pc}

0800ca3c <_ZNSt6vectorIP9StatementSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	f107 030c 	add.w	r3, r7, #12
 800ca4a:	4611      	mov	r1, r2
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7ff ff9e 	bl	800c98e <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	4618      	mov	r0, r3
 800ca56:	3710      	adds	r7, #16
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <_ZN9__gnu_cxxmiIPP9StatementSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ca5c:	b590      	push	{r4, r7, lr}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 f835 	bl	800cad6 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	681c      	ldr	r4, [r3, #0]
 800ca70:	6838      	ldr	r0, [r7, #0]
 800ca72:	f000 f830 	bl	800cad6 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800ca76:	4603      	mov	r3, r0
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	1ae3      	subs	r3, r4, r3
 800ca7c:	109b      	asrs	r3, r3, #2
 800ca7e:	4618      	mov	r0, r3
 800ca80:	370c      	adds	r7, #12
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd90      	pop	{r4, r7, pc}

0800ca86 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b082      	sub	sp, #8
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
 800ca8e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d006      	beq.n	800caa4 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE11_M_allocateEj+0x1e>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6839      	ldr	r1, [r7, #0]
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 faa2 	bl	800cfe4 <_ZNSt16allocator_traitsISaIP9StatementEE8allocateERS2_j>
 800caa0:	4603      	mov	r3, r0
 800caa2:	e000      	b.n	800caa6 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE11_M_allocateEj+0x20>
 800caa4:	2300      	movs	r3, #0
      }
 800caa6:	4618      	mov	r0, r3
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <_ZNSt6vectorIP9StatementSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800caae:	b590      	push	{r4, r7, lr}
 800cab0:	b089      	sub	sp, #36	; 0x24
 800cab2:	af02      	add	r7, sp, #8
 800cab4:	60f8      	str	r0, [r7, #12]
 800cab6:	60b9      	str	r1, [r7, #8]
 800cab8:	607a      	str	r2, [r7, #4]
 800caba:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800cabc:	f88d 4000 	strb.w	r4, [sp]
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	68b9      	ldr	r1, [r7, #8]
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f000 fa9b 	bl	800d002 <_ZNSt6vectorIP9StatementSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800cacc:	4603      	mov	r3, r0
      }
 800cace:	4618      	mov	r0, r3
 800cad0:	371c      	adds	r7, #28
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd90      	pop	{r4, r7, pc}

0800cad6 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cad6:	b480      	push	{r7}
 800cad8:	b083      	sub	sp, #12
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4618      	mov	r0, r3
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	425b      	negs	r3, r3
 800cb00:	4413      	add	r3, r2
 800cb02:	60fb      	str	r3, [r7, #12]
 800cb04:	f107 020c 	add.w	r2, r7, #12
 800cb08:	f107 0308 	add.w	r3, r7, #8
 800cb0c:	4611      	mov	r1, r2
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7ff ff3d 	bl	800c98e <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	4618      	mov	r0, r3
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800cb1e:	b480      	push	{r7}
 800cb20:	b083      	sub	sp, #12
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	370c      	adds	r7, #12
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr

0800cb36 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESC_SD_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cb36:	b5b0      	push	{r4, r5, r7, lr}
 800cb38:	b08c      	sub	sp, #48	; 0x30
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	60f8      	str	r0, [r7, #12]
 800cb3e:	60b9      	str	r1, [r7, #8]
 800cb40:	713a      	strb	r2, [r7, #4]
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800cb46:	7e1b      	ldrb	r3, [r3, #24]
 800cb48:	461c      	mov	r4, r3
 800cb4a:	1d3b      	adds	r3, r7, #4
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f000 f82f 	bl	800cbb0 <_ZNKSt17integral_constantIjLj0EEcvjEv>
 800cb52:	4603      	mov	r3, r0
 800cb54:	429c      	cmp	r4, r3
 800cb56:	bf0c      	ite	eq
 800cb58:	2301      	moveq	r3, #1
 800cb5a:	2300      	movne	r3, #0
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00a      	beq.n	800cb78 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESC_SD_+0x42>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800cb66:	4618      	mov	r0, r3
 800cb68:	f000 f82d 	bl	800cbc6 <_ZNSt8__detail9__variant5__getILj0ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	68b9      	ldr	r1, [r7, #8]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f00a faba 	bl	80170ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	    return {};
 800cb76:	e016      	b.n	800cba6 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESC_SD_+0x70>
			= variant<_Types...>(__rhs_mem);
 800cb78:	f107 0314 	add.w	r3, r7, #20
 800cb7c:	68b9      	ldr	r1, [r7, #8]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f000 fa75 	bl	800d06e <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IRKS5_vvS5_vEEOT_>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
		      __variant_cast<_Types...>(*this)
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f000 f82d 	bl	800cbe8 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Copy_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800cb8e:	4602      	mov	r2, r0
			= variant<_Types...>(__rhs_mem);
 800cb90:	f107 0314 	add.w	r3, r7, #20
 800cb94:	4619      	mov	r1, r3
 800cb96:	4610      	mov	r0, r2
 800cb98:	f000 f841 	bl	800cc1e <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS6_>
 800cb9c:	f107 0314 	add.w	r3, r7, #20
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7f9 fe5d 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	    return {};
 800cba6:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3730      	adds	r7, #48	; 0x30
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bdb0      	pop	{r4, r5, r7, pc}

0800cbb0 <_ZNKSt17integral_constantIjLj0EEcvjEv>:
    struct integral_constant
    {
      static constexpr _Tp                  value = __v;
      typedef _Tp                           value_type;
      typedef integral_constant<_Tp, __v>   type;
      constexpr operator value_type() const noexcept { return value; }
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	2300      	movs	r3, #0
 800cbba:	4618      	mov	r0, r3
 800cbbc:	370c      	adds	r7, #12
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr

0800cbc6 <_ZNSt8__detail9__variant5__getILj0ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800cbc6:	b590      	push	{r4, r7, lr}
 800cbc8:	b083      	sub	sp, #12
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 fa29 	bl	800d026 <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800cbd4:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f7fb fb2b 	bl	8008234 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 800cbde:	4603      	mov	r3, r0
    }
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd90      	pop	{r4, r7, pc}

0800cbe8 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Copy_assign_baseILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
	    return static_cast<variant<_Types...>&>(__rhs);
 800cbf0:	687b      	ldr	r3, [r7, #4]
    }
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	370c      	adds	r7, #12
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr

0800cbfe <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_>:
    struct _Variant_base : _Move_assign_alias<_Types...>
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b082      	sub	sp, #8
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
 800cc06:	6039      	str	r1, [r7, #0]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	683a      	ldr	r2, [r7, #0]
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f000 fbe2 	bl	800d3d8 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS6_>:
    class variant
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b082      	sub	sp, #8
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	6039      	str	r1, [r7, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	683a      	ldr	r2, [r7, #0]
 800cc2c:	4611      	mov	r1, r2
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7ff ffe5 	bl	800cbfe <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	4618      	mov	r0, r3
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESC_SD_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cc3e:	b5b0      	push	{r4, r5, r7, lr}
 800cc40:	b084      	sub	sp, #16
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	60f8      	str	r0, [r7, #12]
 800cc46:	60b9      	str	r1, [r7, #8]
 800cc48:	713a      	strb	r2, [r7, #4]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800cc4e:	7e1b      	ldrb	r3, [r3, #24]
 800cc50:	461c      	mov	r4, r3
 800cc52:	1d3b      	adds	r3, r7, #4
 800cc54:	4618      	mov	r0, r3
 800cc56:	f000 f825 	bl	800cca4 <_ZNKSt17integral_constantIjLj1EEcvjEv>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	429c      	cmp	r4, r3
 800cc5e:	bf0c      	ite	eq
 800cc60:	2301      	moveq	r3, #1
 800cc62:	2300      	movne	r3, #0
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d009      	beq.n	800cc7e <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESC_SD_+0x40>
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	681c      	ldr	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800cc72:	4618      	mov	r0, r3
 800cc74:	f000 f821 	bl	800ccba <_ZNSt8__detail9__variant5__getILj1ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	601c      	str	r4, [r3, #0]
	    return {};
 800cc7c:	e00d      	b.n	800cc9a <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESC_SD_+0x5c>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 800cc82:	461c      	mov	r4, r3
 800cc84:	1d3b      	adds	r3, r7, #4
 800cc86:	4618      	mov	r0, r3
 800cc88:	f000 f80c 	bl	800cca4 <_ZNKSt17integral_constantIjLj1EEcvjEv>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	68ba      	ldr	r2, [r7, #8]
 800cc92:	4619      	mov	r1, r3
 800cc94:	4620      	mov	r0, r4
 800cc96:	f000 fbb5 	bl	800d404 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIiEEvtRKT_>
	    return {};
 800cc9a:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bdb0      	pop	{r4, r5, r7, pc}

0800cca4 <_ZNKSt17integral_constantIjLj1EEcvjEv>:
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	2301      	movs	r3, #1
 800ccae:	4618      	mov	r0, r3
 800ccb0:	370c      	adds	r7, #12
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr

0800ccba <_ZNSt8__detail9__variant5__getILj1ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800ccba:	b590      	push	{r4, r7, lr}
 800ccbc:	b083      	sub	sp, #12
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 f9af 	bl	800d026 <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800ccc8:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800ccca:	4619      	mov	r1, r3
 800cccc:	4620      	mov	r0, r4
 800ccce:	f7fb fb3a 	bl	8008346 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800ccd2:	4603      	mov	r3, r0
    }
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd90      	pop	{r4, r7, pc}

0800ccdc <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESC_SD_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800ccdc:	b5b0      	push	{r4, r5, r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	713a      	strb	r2, [r7, #4]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800ccec:	7e1b      	ldrb	r3, [r3, #24]
 800ccee:	461c      	mov	r4, r3
 800ccf0:	1d3b      	adds	r3, r7, #4
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 f825 	bl	800cd42 <_ZNKSt17integral_constantIjLj2EEcvjEv>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	429c      	cmp	r4, r3
 800ccfc:	bf0c      	ite	eq
 800ccfe:	2301      	moveq	r3, #1
 800cd00:	2300      	movne	r3, #0
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d009      	beq.n	800cd1c <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESC_SD_+0x40>
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	681c      	ldr	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 f821 	bl	800cd58 <_ZNSt8__detail9__variant5__getILj2ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800cd16:	4603      	mov	r3, r0
 800cd18:	601c      	str	r4, [r3, #0]
	    return {};
 800cd1a:	e00d      	b.n	800cd38 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESC_SD_+0x5c>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 800cd20:	461c      	mov	r4, r3
 800cd22:	1d3b      	adds	r3, r7, #4
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 f80c 	bl	800cd42 <_ZNKSt17integral_constantIjLj2EEcvjEv>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	68ba      	ldr	r2, [r7, #8]
 800cd30:	4619      	mov	r1, r3
 800cd32:	4620      	mov	r0, r4
 800cd34:	f000 fb7d 	bl	800d432 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIfEEvtRKT_>
	    return {};
 800cd38:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bdb0      	pop	{r4, r5, r7, pc}

0800cd42 <_ZNKSt17integral_constantIjLj2EEcvjEv>:
 800cd42:	b480      	push	{r7}
 800cd44:	b083      	sub	sp, #12
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
 800cd4a:	2302      	movs	r3, #2
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <_ZNSt8__detail9__variant5__getILj2ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800cd58:	b590      	push	{r4, r7, lr}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 f960 	bl	800d026 <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800cd66:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800cd68:	4619      	mov	r1, r3
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f7fb fb87 	bl	800847e <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800cd70:	4603      	mov	r3, r0
    }
 800cd72:	4618      	mov	r0, r3
 800cd74:	370c      	adds	r7, #12
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd90      	pop	{r4, r7, pc}

0800cd7a <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESC_SD_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cd7a:	b5b0      	push	{r4, r5, r7, lr}
 800cd7c:	b084      	sub	sp, #16
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	60f8      	str	r0, [r7, #12]
 800cd82:	60b9      	str	r1, [r7, #8]
 800cd84:	713a      	strb	r2, [r7, #4]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800cd8a:	7e1b      	ldrb	r3, [r3, #24]
 800cd8c:	461c      	mov	r4, r3
 800cd8e:	1d3b      	adds	r3, r7, #4
 800cd90:	4618      	mov	r0, r3
 800cd92:	f000 f826 	bl	800cde2 <_ZNKSt17integral_constantIjLj3EEcvjEv>
 800cd96:	4603      	mov	r3, r0
 800cd98:	429c      	cmp	r4, r3
 800cd9a:	bf0c      	ite	eq
 800cd9c:	2301      	moveq	r3, #1
 800cd9e:	2300      	movne	r3, #0
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d00a      	beq.n	800cdbc <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESC_SD_+0x42>
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	781c      	ldrb	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f000 f822 	bl	800cdf8 <_ZNSt8__detail9__variant5__getILj3ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	4622      	mov	r2, r4
 800cdb8:	701a      	strb	r2, [r3, #0]
	    return {};
 800cdba:	e00d      	b.n	800cdd8 <_ZZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSERKS8_ENUlOT_T0_E_clIRKbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESC_SD_+0x5e>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 800cdc0:	461c      	mov	r4, r3
 800cdc2:	1d3b      	adds	r3, r7, #4
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f000 f80c 	bl	800cde2 <_ZNKSt17integral_constantIjLj3EEcvjEv>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f000 fb44 	bl	800d460 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIbEEvtRKT_>
	    return {};
 800cdd8:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800cdda:	4618      	mov	r0, r3
 800cddc:	3710      	adds	r7, #16
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bdb0      	pop	{r4, r5, r7, pc}

0800cde2 <_ZNKSt17integral_constantIjLj3EEcvjEv>:
 800cde2:	b480      	push	{r7}
 800cde4:	b083      	sub	sp, #12
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
 800cdea:	2303      	movs	r3, #3
 800cdec:	4618      	mov	r0, r3
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <_ZNSt8__detail9__variant5__getILj3ERNS0_17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800cdf8:	b590      	push	{r4, r7, lr}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 f910 	bl	800d026 <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800ce06:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800ce08:	4619      	mov	r1, r3
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f7fb fbe5 	bl	80085da <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800ce10:	4603      	mov	r3, r0
    }
 800ce12:	4618      	mov	r0, r3
 800ce14:	370c      	adds	r7, #12
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd90      	pop	{r4, r7, pc}

0800ce1a <_ZNKSt6vectorIP10ExpressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b082      	sub	sp, #8
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	4618      	mov	r0, r3
 800ce26:	f000 fb4c 	bl	800d4c2 <_ZNKSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f000 fb2e 	bl	800d48e <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_max_sizeERKS2_>
 800ce32:	4603      	mov	r3, r0
 800ce34:	4618      	mov	r0, r3
 800ce36:	3708      	adds	r7, #8
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <_ZNKSt6vectorIP10ExpressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800ce3c:	b480      	push	{r7}
 800ce3e:	b083      	sub	sp, #12
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	685a      	ldr	r2, [r3, #4]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	1ad3      	subs	r3, r2, r3
 800ce4e:	109b      	asrs	r3, r3, #2
 800ce50:	4618      	mov	r0, r3
 800ce52:	370c      	adds	r7, #12
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr

0800ce5c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d201      	bcs.n	800ce76 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	e000      	b.n	800ce78 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800ce76:	687b      	ldr	r3, [r7, #4]
    }
 800ce78:	4618      	mov	r0, r3
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <_ZNSt16allocator_traitsISaIP10ExpressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800ce8e:	2200      	movs	r2, #0
 800ce90:	6839      	ldr	r1, [r7, #0]
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 fb20 	bl	800d4d8 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE8allocateEjPKv>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <_ZNSt6vectorIP10ExpressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b084      	sub	sp, #16
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	60f8      	str	r0, [r7, #12]
 800ceaa:	60b9      	str	r1, [r7, #8]
 800ceac:	607a      	str	r2, [r7, #4]
 800ceae:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	68b9      	ldr	r1, [r7, #8]
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f000 fb2d 	bl	800d516 <_ZSt12__relocate_aIPP10ExpressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 800cebc:	4603      	mov	r3, r0
      }
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <_ZNKSt6vectorIP4BodySaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b082      	sub	sp, #8
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4618      	mov	r0, r3
 800ced2:	f000 fb57 	bl	800d584 <_ZNKSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800ced6:	4603      	mov	r3, r0
 800ced8:	4618      	mov	r0, r3
 800ceda:	f000 fb39 	bl	800d550 <_ZNSt6vectorIP4BodySaIS1_EE11_S_max_sizeERKS2_>
 800cede:	4603      	mov	r3, r0
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <_ZNKSt6vectorIP4BodySaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	685a      	ldr	r2, [r3, #4]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	109b      	asrs	r3, r3, #2
 800cefc:	4618      	mov	r0, r3
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <_ZNSt16allocator_traitsISaIP4BodyEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800cf12:	2200      	movs	r2, #0
 800cf14:	6839      	ldr	r1, [r7, #0]
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 fb3f 	bl	800d59a <_ZN9__gnu_cxx13new_allocatorIP4BodyE8allocateEjPKv>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <_ZNSt6vectorIP4BodySaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b084      	sub	sp, #16
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	60f8      	str	r0, [r7, #12]
 800cf2e:	60b9      	str	r1, [r7, #8]
 800cf30:	607a      	str	r2, [r7, #4]
 800cf32:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	68b9      	ldr	r1, [r7, #8]
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f000 fb4c 	bl	800d5d8 <_ZSt12__relocate_aIPP4BodyS2_SaIS1_EET0_T_S5_S4_RT1_>
 800cf40:	4603      	mov	r3, r0
      }
 800cf42:	4618      	mov	r0, r3
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <_ZSt11__addressofIP11Method_callEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cf4a:	b480      	push	{r7}
 800cf4c:	b083      	sub	sp, #12
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4618      	mov	r0, r3
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <_ZSt11__addressofIP10AssignmentEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	370c      	adds	r7, #12
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr

0800cf76 <_ZSt11__addressofIP15While_statementEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cf76:	b480      	push	{r7}
 800cf78:	b083      	sub	sp, #12
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	4618      	mov	r0, r3
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <_ZSt11__addressofIP12If_statementEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	4618      	mov	r0, r3
 800cf98:	370c      	adds	r7, #12
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr

0800cfa2 <_ZNKSt6vectorIP9StatementSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b082      	sub	sp, #8
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 fb4a 	bl	800d646 <_ZNKSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f000 fb2c 	bl	800d612 <_ZNSt6vectorIP9StatementSaIS1_EE11_S_max_sizeERKS2_>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <_ZNKSt6vectorIP9StatementSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685a      	ldr	r2, [r3, #4]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	1ad3      	subs	r3, r2, r3
 800cfd6:	109b      	asrs	r3, r3, #2
 800cfd8:	4618      	mov	r0, r3
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <_ZNSt16allocator_traitsISaIP9StatementEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800cfee:	2200      	movs	r2, #0
 800cff0:	6839      	ldr	r1, [r7, #0]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 fb32 	bl	800d65c <_ZN9__gnu_cxx13new_allocatorIP9StatementE8allocateEjPKv>
 800cff8:	4603      	mov	r3, r0
 800cffa:	4618      	mov	r0, r3
 800cffc:	3708      	adds	r7, #8
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <_ZNSt6vectorIP9StatementSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800d002:	b580      	push	{r7, lr}
 800d004:	b084      	sub	sp, #16
 800d006:	af00      	add	r7, sp, #0
 800d008:	60f8      	str	r0, [r7, #12]
 800d00a:	60b9      	str	r1, [r7, #8]
 800d00c:	607a      	str	r2, [r7, #4]
 800d00e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	68b9      	ldr	r1, [r7, #8]
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f000 fb3f 	bl	800d69a <_ZSt12__relocate_aIPP9StatementS2_SaIS1_EET0_T_S5_S4_RT1_>
 800d01c:	4603      	mov	r3, r0
      }
 800d01e:	4618      	mov	r0, r3
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <_ZSt7forwardIRNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d026:	b480      	push	{r7}
 800d028:	b083      	sub	sp, #12
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4618      	mov	r0, r3
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS5_ES5_vEESt16in_place_index_tIXT_EEDpOT0_>:
	variant(in_place_index_t<_Np>, _Args&&... __args)
 800d03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d03e:	b085      	sub	sp, #20
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	7239      	strb	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
	_Default_ctor_enabler(_Enable_default_constructor_tag{})
 800d048:	68fc      	ldr	r4, [r7, #12]
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f7fb ffed 	bl	800902a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800d050:	4603      	mov	r3, r0
 800d052:	461a      	mov	r2, r3
 800d054:	4631      	mov	r1, r6
 800d056:	4620      	mov	r0, r4
 800d058:	f000 fb80 	bl	800d75c <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800d05c:	4629      	mov	r1, r5
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f7fa fd37 	bl	8007ad2 <_ZNSt27_Enable_default_constructorILb1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEC1ESt31_Enable_default_constructor_tag>
	{ }
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	4618      	mov	r0, r3
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d06e <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IRKS5_vvS5_vEEOT_>:
	variant(_Tp&& __t)
 800d06e:	b590      	push	{r4, r7, lr}
 800d070:	b083      	sub	sp, #12
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	6039      	str	r1, [r7, #0]
		  std::forward<_Tp>(__t))
 800d078:	6838      	ldr	r0, [r7, #0]
 800d07a:	f7fb ffd6 	bl	800902a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800d07e:	4603      	mov	r3, r0
 800d080:	461a      	mov	r2, r3
 800d082:	4621      	mov	r1, r4
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f7ff ffd9 	bl	800d03c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS5_ES5_vEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4618      	mov	r0, r3
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	bd90      	pop	{r4, r7, pc}

0800d094 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>:
    __variant_cast(_Tp&& __rhs)
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
	    return static_cast<variant<_Types...>&>(__rhs);
 800d09c:	687b      	ldr	r3, [r7, #4]
    }
 800d09e:	4618      	mov	r0, r3
 800d0a0:	370c      	adds	r7, #12
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr

0800d0aa <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESK_EEDcOSF_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b082      	sub	sp, #8
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7fb feaf 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fb f8cb 	bl	8008256 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800d0c0:	4603      	mov	r3, r0
	}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESH_SK_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800d0ca:	b5b0      	push	{r4, r5, r7, lr}
 800d0cc:	b084      	sub	sp, #16
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
 800d0d2:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 fb56 	bl	800d786 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d0da:	4604      	mov	r4, r0
 800d0dc:	6838      	ldr	r0, [r7, #0]
 800d0de:	f7fb fe9a 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7ff ffe0 	bl	800d0aa <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE28__element_by_index_or_cookieILj0ESK_EEDcOSF_>
 800d0ea:	4601      	mov	r1, r0
 800d0ec:	f107 030c 	add.w	r3, r7, #12
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	f000 fb52 	bl	800d79c <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRS8_St17integral_constantIjLj0EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>
	      integral_constant<size_t, __indices>()...);
 800d0f8:	462b      	mov	r3, r5
      }
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bdb0      	pop	{r4, r5, r7, pc}

0800d102 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESH_SK_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800d102:	b5b0      	push	{r4, r5, r7, lr}
 800d104:	b082      	sub	sp, #8
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
 800d10a:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 fb3a 	bl	800d786 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d112:	4604      	mov	r4, r0
 800d114:	6838      	ldr	r0, [r7, #0]
 800d116:	f7fb fe7e 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d11a:	4603      	mov	r3, r0
 800d11c:	4619      	mov	r1, r3
 800d11e:	4620      	mov	r0, r4
 800d120:	f7ff ffd3 	bl	800d0ca <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE19__visit_invoke_implESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800d124:	462b      	mov	r3, r5
      }
 800d126:	4618      	mov	r0, r3
 800d128:	3708      	adds	r7, #8
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bdb0      	pop	{r4, r5, r7, pc}

0800d12e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE14__visit_invokeESH_SK_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800d12e:	b5b0      	push	{r4, r5, r7, lr}
 800d130:	b082      	sub	sp, #8
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
 800d136:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 fb24 	bl	800d786 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d13e:	4604      	mov	r4, r0
 800d140:	6838      	ldr	r0, [r7, #0]
 800d142:	f7fb fe68 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d146:	4603      	mov	r3, r0
 800d148:	4619      	mov	r1, r3
 800d14a:	4620      	mov	r0, r4
 800d14c:	f7ff ffd9 	bl	800d102 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj0EEEE17__do_visit_invokeESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800d150:	462b      	mov	r3, r5
      }
 800d152:	4618      	mov	r0, r3
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bdb0      	pop	{r4, r5, r7, pc}

0800d15a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESK_EEDcOSF_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b082      	sub	sp, #8
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7fb fe57 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d168:	4603      	mov	r3, r0
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fb f8fd 	bl	800836a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800d170:	4603      	mov	r3, r0
	}
 800d172:	4618      	mov	r0, r3
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESH_SK_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800d17a:	b5b0      	push	{r4, r5, r7, lr}
 800d17c:	b084      	sub	sp, #16
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
 800d182:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 fafe 	bl	800d786 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d18a:	4604      	mov	r4, r0
 800d18c:	6838      	ldr	r0, [r7, #0]
 800d18e:	f7fb fe42 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d192:	4603      	mov	r3, r0
 800d194:	4618      	mov	r0, r3
 800d196:	f7ff ffe0 	bl	800d15a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE28__element_by_index_or_cookieILj1ESK_EEDcOSF_>
 800d19a:	4601      	mov	r1, r0
 800d19c:	f107 030c 	add.w	r3, r7, #12
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f000 fb18 	bl	800d7d8 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRiSt17integral_constantIjLj1EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>
	      integral_constant<size_t, __indices>()...);
 800d1a8:	462b      	mov	r3, r5
      }
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bdb0      	pop	{r4, r5, r7, pc}

0800d1b2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESH_SK_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800d1b2:	b5b0      	push	{r4, r5, r7, lr}
 800d1b4:	b082      	sub	sp, #8
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
 800d1ba:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 fae2 	bl	800d786 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	6838      	ldr	r0, [r7, #0]
 800d1c6:	f7fb fe26 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f7ff ffd3 	bl	800d17a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE19__visit_invoke_implESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800d1d4:	462b      	mov	r3, r5
      }
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3708      	adds	r7, #8
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bdb0      	pop	{r4, r5, r7, pc}

0800d1de <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE14__visit_invokeESH_SK_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800d1de:	b5b0      	push	{r4, r5, r7, lr}
 800d1e0:	b082      	sub	sp, #8
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
 800d1e6:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 facc 	bl	800d786 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	6838      	ldr	r0, [r7, #0]
 800d1f2:	f7fb fe10 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	f7ff ffd9 	bl	800d1b2 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj1EEEE17__do_visit_invokeESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800d200:	462b      	mov	r3, r5
      }
 800d202:	4618      	mov	r0, r3
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bdb0      	pop	{r4, r5, r7, pc}

0800d20a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESK_EEDcOSF_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b082      	sub	sp, #8
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f7fb fdff 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d218:	4603      	mov	r3, r0
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fb f941 	bl	80084a2 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800d220:	4603      	mov	r3, r0
	}
 800d222:	4618      	mov	r0, r3
 800d224:	3708      	adds	r7, #8
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESH_SK_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800d22a:	b5b0      	push	{r4, r5, r7, lr}
 800d22c:	b084      	sub	sp, #16
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
 800d232:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 faa6 	bl	800d786 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d23a:	4604      	mov	r4, r0
 800d23c:	6838      	ldr	r0, [r7, #0]
 800d23e:	f7fb fdea 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d242:	4603      	mov	r3, r0
 800d244:	4618      	mov	r0, r3
 800d246:	f7ff ffe0 	bl	800d20a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE28__element_by_index_or_cookieILj2ESK_EEDcOSF_>
 800d24a:	4601      	mov	r1, r0
 800d24c:	f107 030c 	add.w	r3, r7, #12
 800d250:	461a      	mov	r2, r3
 800d252:	4620      	mov	r0, r4
 800d254:	f000 fade 	bl	800d814 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRfSt17integral_constantIjLj2EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>
	      integral_constant<size_t, __indices>()...);
 800d258:	462b      	mov	r3, r5
      }
 800d25a:	4618      	mov	r0, r3
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bdb0      	pop	{r4, r5, r7, pc}

0800d262 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESH_SK_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800d262:	b5b0      	push	{r4, r5, r7, lr}
 800d264:	b082      	sub	sp, #8
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
 800d26a:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 fa8a 	bl	800d786 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d272:	4604      	mov	r4, r0
 800d274:	6838      	ldr	r0, [r7, #0]
 800d276:	f7fb fdce 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d27a:	4603      	mov	r3, r0
 800d27c:	4619      	mov	r1, r3
 800d27e:	4620      	mov	r0, r4
 800d280:	f7ff ffd3 	bl	800d22a <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE19__visit_invoke_implESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800d284:	462b      	mov	r3, r5
      }
 800d286:	4618      	mov	r0, r3
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bdb0      	pop	{r4, r5, r7, pc}

0800d28e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE14__visit_invokeESH_SK_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800d28e:	b5b0      	push	{r4, r5, r7, lr}
 800d290:	b082      	sub	sp, #8
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
 800d296:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 fa74 	bl	800d786 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d29e:	4604      	mov	r4, r0
 800d2a0:	6838      	ldr	r0, [r7, #0]
 800d2a2:	f7fb fdb8 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	f7ff ffd9 	bl	800d262 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj2EEEE17__do_visit_invokeESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800d2b0:	462b      	mov	r3, r5
      }
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3708      	adds	r7, #8
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bdb0      	pop	{r4, r5, r7, pc}

0800d2ba <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESK_EEDcOSF_>:
	__element_by_index_or_cookie(_Variant&& __var) noexcept
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b082      	sub	sp, #8
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7fb fda7 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7fb f997 	bl	80085fe <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800d2d0:	4603      	mov	r3, r0
	}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3708      	adds	r7, #8
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESH_SK_>:
      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
 800d2da:	b5b0      	push	{r4, r5, r7, lr}
 800d2dc:	b084      	sub	sp, #16
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
 800d2e2:	6039      	str	r1, [r7, #0]
	  return std::__invoke(std::forward<_Visitor>(__visitor),
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 fa4e 	bl	800d786 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d2ea:	4604      	mov	r4, r0
 800d2ec:	6838      	ldr	r0, [r7, #0]
 800d2ee:	f7fb fd92 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7ff ffe0 	bl	800d2ba <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE28__element_by_index_or_cookieILj3ESK_EEDcOSF_>
 800d2fa:	4601      	mov	r1, r0
 800d2fc:	f107 030c 	add.w	r3, r7, #12
 800d300:	461a      	mov	r2, r3
 800d302:	4620      	mov	r0, r4
 800d304:	f000 faa4 	bl	800d850 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRbSt17integral_constantIjLj3EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>
	      integral_constant<size_t, __indices>()...);
 800d308:	462b      	mov	r3, r5
      }
 800d30a:	4618      	mov	r0, r3
 800d30c:	3710      	adds	r7, #16
 800d30e:	46bd      	mov	sp, r7
 800d310:	bdb0      	pop	{r4, r5, r7, pc}

0800d312 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESH_SK_>:
      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800d312:	b5b0      	push	{r4, r5, r7, lr}
 800d314:	b082      	sub	sp, #8
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
 800d31a:	6039      	str	r1, [r7, #0]
	return __visit_invoke_impl(std::forward<_Visitor>(__visitor),
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 fa32 	bl	800d786 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d322:	4604      	mov	r4, r0
 800d324:	6838      	ldr	r0, [r7, #0]
 800d326:	f7fb fd76 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d32a:	4603      	mov	r3, r0
 800d32c:	4619      	mov	r1, r3
 800d32e:	4620      	mov	r0, r4
 800d330:	f7ff ffd3 	bl	800d2da <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE19__visit_invoke_implESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800d334:	462b      	mov	r3, r5
      }
 800d336:	4618      	mov	r0, r3
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bdb0      	pop	{r4, r5, r7, pc}

0800d33e <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE14__visit_invokeESH_SK_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 800d33e:	b5b0      	push	{r4, r5, r7, lr}
 800d340:	b082      	sub	sp, #8
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
 800d346:	6039      	str	r1, [r7, #0]
	  return __do_visit_invoke(std::forward<_Visitor>(__visitor),
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 fa1c 	bl	800d786 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d34e:	4604      	mov	r4, r0
 800d350:	6838      	ldr	r0, [r7, #0]
 800d352:	f7fb fd60 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d356:	4603      	mov	r3, r0
 800d358:	4619      	mov	r1, r3
 800d35a:	4620      	mov	r0, r4
 800d35c:	f7ff ffd9 	bl	800d312 <_ZNSt8__detail9__variant17__gen_vtable_implILb1ENS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSB_EUlOT_T0_E_RSt7variantIJSA_ifbEEEJEEESt5tupleIJSK_EESt16integer_sequenceIjJLj3EEEE17__do_visit_invokeESH_SK_>
				   std::forward<_Variants>(__vars)...);
 800d360:	462b      	mov	r3, r5
      }
 800d362:	4618      	mov	r0, r3
 800d364:	3708      	adds	r7, #8
 800d366:	46bd      	mov	sp, r7
 800d368:	bdb0      	pop	{r4, r5, r7, pc}

0800d36a <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_RSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSL_jDpT_>:
	_M_access(size_t __first_index, _Args... __rest_indices) const
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b082      	sub	sp, #8
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
 800d372:	6039      	str	r1, [r7, #0]
	    ._M_access(__rest_indices...);
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	4413      	add	r3, r2
 800d37c:	4618      	mov	r0, r3
 800d37e:	f000 fa85 	bl	800d88c <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_RSt7variantIJS9_ifbEEEJEE9_M_accessEv>
 800d382:	4603      	mov	r3, r0
	}
 800d384:	4618      	mov	r0, r3
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>:
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
 800d38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d38e:	b085      	sub	sp, #20
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
 800d396:	4b0f      	ldr	r3, [pc, #60]	; (800d3d4 <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_+0x48>)
 800d398:	60fb      	str	r3, [r7, #12]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 800d39a:	6838      	ldr	r0, [r7, #0]
 800d39c:	f7fa fedc 	bl	8008158 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f7ff ffe0 	bl	800d36a <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_RSt7variantIJS9_ifbEEEJLj4EEE9_M_accessIJEEERKSL_jDpT_>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	60bb      	str	r3, [r7, #8]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 800d3b0:	68bc      	ldr	r4, [r7, #8]
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 fa75 	bl	800d8a2 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d3b8:	4605      	mov	r5, r0
 800d3ba:	6838      	ldr	r0, [r7, #0]
 800d3bc:	f7fb fd2b 	bl	8008e16 <_ZSt7forwardIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	47a0      	blx	r4
			   std::forward<_Variants>(__variants)...);
 800d3c8:	4633      	mov	r3, r6
    }
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	0801aab4 	.word	0x0801aab4

0800d3d8 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_>:
      operator=(_Move_assign_base&& __rhs)
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	60fb      	str	r3, [r7, #12]
 800d3e6:	6838      	ldr	r0, [r7, #0]
 800d3e8:	f7ff fe54 	bl	800d094 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	f107 030c 	add.w	r3, r7, #12
 800d3f2:	4611      	mov	r1, r2
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7ff ffc9 	bl	800d38c <_ZSt10__do_visitILb1ELb1EZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRSt7variantIJS8_ifbEEEEDcOT1_DpOT2_>
	return *this;
 800d3fa:	687b      	ldr	r3, [r7, #4]
      }
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3710      	adds	r7, #16
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIiEEvtRKT_>:
        void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	460b      	mov	r3, r1
 800d40e:	607a      	str	r2, [r7, #4]
 800d410:	817b      	strh	r3, [r7, #10]
	  this->_M_reset();
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	4618      	mov	r0, r3
 800d416:	f7fa fa0e 	bl	8007836 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	  __variant_construct_single(*this, __rhs);
 800d41a:	6879      	ldr	r1, [r7, #4]
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	f000 fa4b 	bl	800d8b8 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKiEEvOT_OT0_>
	  this->_M_index = __rhs_index;
 800d422:	897b      	ldrh	r3, [r7, #10]
 800d424:	b2da      	uxtb	r2, r3
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	761a      	strb	r2, [r3, #24]
	}
 800d42a:	bf00      	nop
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIfEEvtRKT_>:
        void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 800d432:	b580      	push	{r7, lr}
 800d434:	b084      	sub	sp, #16
 800d436:	af00      	add	r7, sp, #0
 800d438:	60f8      	str	r0, [r7, #12]
 800d43a:	460b      	mov	r3, r1
 800d43c:	607a      	str	r2, [r7, #4]
 800d43e:	817b      	strh	r3, [r7, #10]
	  this->_M_reset();
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	4618      	mov	r0, r3
 800d444:	f7fa f9f7 	bl	8007836 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	  __variant_construct_single(*this, __rhs);
 800d448:	6879      	ldr	r1, [r7, #4]
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f000 fa4e 	bl	800d8ec <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKfEEvOT_OT0_>
	  this->_M_index = __rhs_index;
 800d450:	897b      	ldrh	r3, [r7, #10]
 800d452:	b2da      	uxtb	r2, r3
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	761a      	strb	r2, [r3, #24]
	}
 800d458:	bf00      	nop
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE19_M_destructive_copyIbEEvtRKT_>:
        void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	460b      	mov	r3, r1
 800d46a:	607a      	str	r2, [r7, #4]
 800d46c:	817b      	strh	r3, [r7, #10]
	  this->_M_reset();
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	4618      	mov	r0, r3
 800d472:	f7fa f9e0 	bl	8007836 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	  __variant_construct_single(*this, __rhs);
 800d476:	6879      	ldr	r1, [r7, #4]
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f000 fa51 	bl	800d920 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKbEEvOT_OT0_>
	  this->_M_index = __rhs_index;
 800d47e:	897b      	ldrh	r3, [r7, #10]
 800d480:	b2da      	uxtb	r2, r3
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	761a      	strb	r2, [r3, #24]
	}
 800d486:	bf00      	nop
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <_ZNSt6vectorIP10ExpressionSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800d48e:	b580      	push	{r7, lr}
 800d490:	b084      	sub	sp, #16
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800d496:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d49a:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 fa6e 	bl	800d97e <_ZNSt16allocator_traitsISaIP10ExpressionEE8max_sizeERKS2_>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800d4a6:	f107 0208 	add.w	r2, r7, #8
 800d4aa:	f107 030c 	add.w	r3, r7, #12
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f000 fa50 	bl	800d956 <_ZSt3minIjERKT_S2_S2_>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	681b      	ldr	r3, [r3, #0]
      }
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}

0800d4c2 <_ZNKSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d4c2:	b480      	push	{r7}
 800d4c4:	b083      	sub	sp, #12
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	f000 fa56 	bl	800d996 <_ZNK9__gnu_cxx13new_allocatorIP10ExpressionE8max_sizeEv>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	bf8c      	ite	hi
 800d4f2:	2301      	movhi	r3, #1
 800d4f4:	2300      	movls	r3, #0
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d001      	beq.n	800d500 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800d4fc:	f009 fcdc 	bl	8016eb8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	4618      	mov	r0, r3
 800d506:	f009 fc12 	bl	8016d2e <_Znwj>
 800d50a:	4603      	mov	r3, r0
 800d50c:	bf00      	nop
      }
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <_ZSt12__relocate_aIPP10ExpressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800d516:	b5b0      	push	{r4, r5, r7, lr}
 800d518:	b084      	sub	sp, #16
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	60f8      	str	r0, [r7, #12]
 800d51e:	60b9      	str	r1, [r7, #8]
 800d520:	607a      	str	r2, [r7, #4]
 800d522:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800d524:	68f8      	ldr	r0, [r7, #12]
 800d526:	f000 fa42 	bl	800d9ae <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 800d52a:	4604      	mov	r4, r0
 800d52c:	68b8      	ldr	r0, [r7, #8]
 800d52e:	f000 fa3e 	bl	800d9ae <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 800d532:	4605      	mov	r5, r0
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 fa3a 	bl	800d9ae <_ZSt12__niter_baseIPP10ExpressionET_S3_>
 800d53a:	4602      	mov	r2, r0
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	4629      	mov	r1, r5
 800d540:	4620      	mov	r0, r4
 800d542:	f000 fa3f 	bl	800d9c4 <_ZSt14__relocate_a_1IP10ExpressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800d546:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800d548:	4618      	mov	r0, r3
 800d54a:	3710      	adds	r7, #16
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bdb0      	pop	{r4, r5, r7, pc}

0800d550 <_ZNSt6vectorIP4BodySaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800d558:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d55c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 fa4e 	bl	800da00 <_ZNSt16allocator_traitsISaIP4BodyEE8max_sizeERKS2_>
 800d564:	4603      	mov	r3, r0
 800d566:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800d568:	f107 0208 	add.w	r2, r7, #8
 800d56c:	f107 030c 	add.w	r3, r7, #12
 800d570:	4611      	mov	r1, r2
 800d572:	4618      	mov	r0, r3
 800d574:	f000 f9ef 	bl	800d956 <_ZSt3minIjERKT_S2_S2_>
 800d578:	4603      	mov	r3, r0
 800d57a:	681b      	ldr	r3, [r3, #0]
      }
 800d57c:	4618      	mov	r0, r3
 800d57e:	3710      	adds	r7, #16
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <_ZNKSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	4618      	mov	r0, r3
 800d590:	370c      	adds	r7, #12
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr

0800d59a <_ZN9__gnu_cxx13new_allocatorIP4BodyE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b084      	sub	sp, #16
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	60f8      	str	r0, [r7, #12]
 800d5a2:	60b9      	str	r1, [r7, #8]
 800d5a4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f000 fa36 	bl	800da18 <_ZNK9__gnu_cxx13new_allocatorIP4BodyE8max_sizeEv>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	bf8c      	ite	hi
 800d5b4:	2301      	movhi	r3, #1
 800d5b6:	2300      	movls	r3, #0
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d001      	beq.n	800d5c2 <_ZN9__gnu_cxx13new_allocatorIP4BodyE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800d5be:	f009 fc7b 	bl	8016eb8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f009 fbb1 	bl	8016d2e <_Znwj>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	bf00      	nop
      }
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3710      	adds	r7, #16
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <_ZSt12__relocate_aIPP4BodyS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800d5d8:	b5b0      	push	{r4, r5, r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	607a      	str	r2, [r7, #4]
 800d5e4:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f000 fa22 	bl	800da30 <_ZSt12__niter_baseIPP4BodyET_S3_>
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	68b8      	ldr	r0, [r7, #8]
 800d5f0:	f000 fa1e 	bl	800da30 <_ZSt12__niter_baseIPP4BodyET_S3_>
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fa1a 	bl	800da30 <_ZSt12__niter_baseIPP4BodyET_S3_>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	4629      	mov	r1, r5
 800d602:	4620      	mov	r0, r4
 800d604:	f000 fa1f 	bl	800da46 <_ZSt14__relocate_a_1IP4BodyS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800d608:	4603      	mov	r3, r0
    }
 800d60a:	4618      	mov	r0, r3
 800d60c:	3710      	adds	r7, #16
 800d60e:	46bd      	mov	sp, r7
 800d610:	bdb0      	pop	{r4, r5, r7, pc}

0800d612 <_ZNSt6vectorIP9StatementSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800d612:	b580      	push	{r7, lr}
 800d614:	b084      	sub	sp, #16
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800d61a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d61e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 fa2e 	bl	800da82 <_ZNSt16allocator_traitsISaIP9StatementEE8max_sizeERKS2_>
 800d626:	4603      	mov	r3, r0
 800d628:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800d62a:	f107 0208 	add.w	r2, r7, #8
 800d62e:	f107 030c 	add.w	r3, r7, #12
 800d632:	4611      	mov	r1, r2
 800d634:	4618      	mov	r0, r3
 800d636:	f000 f98e 	bl	800d956 <_ZSt3minIjERKT_S2_S2_>
 800d63a:	4603      	mov	r3, r0
 800d63c:	681b      	ldr	r3, [r3, #0]
      }
 800d63e:	4618      	mov	r0, r3
 800d640:	3710      	adds	r7, #16
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <_ZNKSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d646:	b480      	push	{r7}
 800d648:	b083      	sub	sp, #12
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4618      	mov	r0, r3
 800d652:	370c      	adds	r7, #12
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <_ZN9__gnu_cxx13new_allocatorIP9StatementE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b084      	sub	sp, #16
 800d660:	af00      	add	r7, sp, #0
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f000 fa16 	bl	800da9a <_ZNK9__gnu_cxx13new_allocatorIP9StatementE8max_sizeEv>
 800d66e:	4602      	mov	r2, r0
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	4293      	cmp	r3, r2
 800d674:	bf8c      	ite	hi
 800d676:	2301      	movhi	r3, #1
 800d678:	2300      	movls	r3, #0
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d001      	beq.n	800d684 <_ZN9__gnu_cxx13new_allocatorIP9StatementE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800d680:	f009 fc1a 	bl	8016eb8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	4618      	mov	r0, r3
 800d68a:	f009 fb50 	bl	8016d2e <_Znwj>
 800d68e:	4603      	mov	r3, r0
 800d690:	bf00      	nop
      }
 800d692:	4618      	mov	r0, r3
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <_ZSt12__relocate_aIPP9StatementS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800d69a:	b5b0      	push	{r4, r5, r7, lr}
 800d69c:	b084      	sub	sp, #16
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	60f8      	str	r0, [r7, #12]
 800d6a2:	60b9      	str	r1, [r7, #8]
 800d6a4:	607a      	str	r2, [r7, #4]
 800d6a6:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800d6a8:	68f8      	ldr	r0, [r7, #12]
 800d6aa:	f000 fa02 	bl	800dab2 <_ZSt12__niter_baseIPP9StatementET_S3_>
 800d6ae:	4604      	mov	r4, r0
 800d6b0:	68b8      	ldr	r0, [r7, #8]
 800d6b2:	f000 f9fe 	bl	800dab2 <_ZSt12__niter_baseIPP9StatementET_S3_>
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f000 f9fa 	bl	800dab2 <_ZSt12__niter_baseIPP9StatementET_S3_>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f000 f9ff 	bl	800dac8 <_ZSt14__relocate_a_1IP9StatementS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800d6ca:	4603      	mov	r3, r0
    }
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bdb0      	pop	{r4, r5, r7, pc}

0800d6d4 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800d6d4:	b590      	push	{r4, r7, lr}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	7239      	strb	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	4621      	mov	r1, r4
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f000 fa3e 	bl	800db68 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3714      	adds	r7, #20
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd90      	pop	{r4, r7, pc}

0800d6f6 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800d6f6:	b590      	push	{r4, r7, lr}
 800d6f8:	b085      	sub	sp, #20
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	60f8      	str	r0, [r7, #12]
 800d6fe:	7239      	strb	r1, [r7, #8]
 800d700:	607a      	str	r2, [r7, #4]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	4621      	mov	r1, r4
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff ffe3 	bl	800d6d4 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	4618      	mov	r0, r3
 800d712:	3714      	adds	r7, #20
 800d714:	46bd      	mov	sp, r7
 800d716:	bd90      	pop	{r4, r7, pc}

0800d718 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800d718:	b590      	push	{r4, r7, lr}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	7239      	strb	r1, [r7, #8]
 800d722:	607a      	str	r2, [r7, #4]
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	4621      	mov	r1, r4
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7ff ffe3 	bl	800d6f6 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4618      	mov	r0, r3
 800d734:	3714      	adds	r7, #20
 800d736:	46bd      	mov	sp, r7
 800d738:	bd90      	pop	{r4, r7, pc}

0800d73a <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 800d73a:	b590      	push	{r4, r7, lr}
 800d73c:	b085      	sub	sp, #20
 800d73e:	af00      	add	r7, sp, #0
 800d740:	60f8      	str	r0, [r7, #12]
 800d742:	7239      	strb	r1, [r7, #8]
 800d744:	607a      	str	r2, [r7, #4]
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	4621      	mov	r1, r4
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7ff ffe3 	bl	800d718 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	4618      	mov	r0, r3
 800d756:	3714      	adds	r7, #20
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd90      	pop	{r4, r7, pc}

0800d75c <_ZNSt8__detail9__variant13_Variant_baseIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 800d75c:	b5b0      	push	{r4, r5, r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	7239      	strb	r1, [r7, #8]
 800d766:	607a      	str	r2, [r7, #4]
	: _Base(__i, std::forward<_Args>(__args)...)
 800d768:	68fc      	ldr	r4, [r7, #12]
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f7fb fc5d 	bl	800902a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800d770:	4603      	mov	r3, r0
 800d772:	461a      	mov	r2, r3
 800d774:	4629      	mov	r1, r5
 800d776:	4620      	mov	r0, r4
 800d778:	f7ff ffdf 	bl	800d73a <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEECI1NS0_16_Variant_storageILb0EJS7_ifbEEEILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	4618      	mov	r0, r3
 800d780:	3710      	adds	r7, #16
 800d782:	46bd      	mov	sp, r7
 800d784:	bdb0      	pop	{r4, r5, r7, pc}

0800d786 <_ZSt7forwardIOZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d786:	b480      	push	{r7}
 800d788:	b083      	sub	sp, #12
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4618      	mov	r0, r3
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRS8_St17integral_constantIjLj0EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800d79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a0:	b084      	sub	sp, #16
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	60f8      	str	r0, [r7, #12]
 800d7a6:	60b9      	str	r1, [r7, #8]
 800d7a8:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f000 f879 	bl	800d8a2 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	68b8      	ldr	r0, [r7, #8]
 800d7b4:	f7f5 fe34 	bl	8003420 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800d7b8:	4605      	mov	r5, r0
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f7fe fdf9 	bl	800c3b2 <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	462a      	mov	r2, r5
 800d7c4:	4621      	mov	r1, r4
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	f000 f9e6 	bl	800db98 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRS9_St17integral_constantIjLj0EEEESC_St14__invoke_otherOSE_DpOT1_>
					std::forward<_Args>(__args)...);
 800d7cc:	4643      	mov	r3, r8
    }
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d7d8 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRiSt17integral_constantIjLj1EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800d7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7dc:	b084      	sub	sp, #16
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	60f8      	str	r0, [r7, #12]
 800d7e2:	60b9      	str	r1, [r7, #8]
 800d7e4:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f000 f85b 	bl	800d8a2 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	68b8      	ldr	r0, [r7, #8]
 800d7f0:	f7f5 fde9 	bl	80033c6 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800d7f4:	4605      	mov	r5, r0
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f7fe fe04 	bl	800c404 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	462a      	mov	r2, r5
 800d800:	4621      	mov	r1, r4
 800d802:	4630      	mov	r0, r6
 800d804:	f000 f9e6 	bl	800dbd4 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRiSt17integral_constantIjLj1EEEESC_St14__invoke_otherOSE_DpOT1_>
					std::forward<_Args>(__args)...);
 800d808:	4643      	mov	r3, r8
    }
 800d80a:	4618      	mov	r0, r3
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d814 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRfSt17integral_constantIjLj2EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800d814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d818:	b084      	sub	sp, #16
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	60f8      	str	r0, [r7, #12]
 800d81e:	60b9      	str	r1, [r7, #8]
 800d820:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f000 f83d 	bl	800d8a2 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d828:	4604      	mov	r4, r0
 800d82a:	68b8      	ldr	r0, [r7, #8]
 800d82c:	f7f5 fdd6 	bl	80033dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 800d830:	4605      	mov	r5, r0
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f7fe fe0f 	bl	800c456 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d838:	4603      	mov	r3, r0
 800d83a:	462a      	mov	r2, r5
 800d83c:	4621      	mov	r1, r4
 800d83e:	4630      	mov	r0, r6
 800d840:	f000 f9e6 	bl	800dc10 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRfSt17integral_constantIjLj2EEEESC_St14__invoke_otherOSE_DpOT1_>
					std::forward<_Args>(__args)...);
 800d844:	4643      	mov	r3, r8
    }
 800d846:	4618      	mov	r0, r3
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d850 <_ZSt8__invokeIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_JRbSt17integral_constantIjLj3EEEENSt15__invoke_resultISB_JDpT0_EE4typeESC_DpOSJ_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800d850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d854:	b084      	sub	sp, #16
 800d856:	af00      	add	r7, sp, #0
 800d858:	60f8      	str	r0, [r7, #12]
 800d85a:	60b9      	str	r1, [r7, #8]
 800d85c:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	f000 f81f 	bl	800d8a2 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800d864:	4604      	mov	r4, r0
 800d866:	68b8      	ldr	r0, [r7, #8]
 800d868:	f7f5 fdc3 	bl	80033f2 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800d86c:	4605      	mov	r5, r0
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f7fe fe1a 	bl	800c4a8 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d874:	4603      	mov	r3, r0
 800d876:	462a      	mov	r2, r5
 800d878:	4621      	mov	r1, r4
 800d87a:	4630      	mov	r0, r6
 800d87c:	f000 f9e6 	bl	800dc4c <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRbSt17integral_constantIjLj3EEEESC_St14__invoke_otherOSE_DpOT1_>
					std::forward<_Args>(__args)...);
 800d880:	4643      	mov	r3, r8
    }
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d88c <_ZNKSt8__detail9__variant12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_RSt7variantIJS9_ifbEEEJEE9_M_accessEv>:
      _M_access() const
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
      { return _M_data; }
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	4618      	mov	r0, r3
 800d898:	370c      	adds	r7, #12
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr

0800d8a2 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d8a2:	b480      	push	{r7}
 800d8a4:	b083      	sub	sp, #12
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKiEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 800d8b8:	b590      	push	{r4, r7, lr}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7fb fd59 	bl	800937c <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 800d8ca:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 800d8cc:	6838      	ldr	r0, [r7, #0]
 800d8ce:	f7fb fbce 	bl	800906e <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800d8d2:	4603      	mov	r3, r0
        ::new (__storage)
 800d8d4:	681c      	ldr	r4, [r3, #0]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	4619      	mov	r1, r3
 800d8da:	2004      	movs	r0, #4
 800d8dc:	f7f3 fb7e 	bl	8000fdc <_ZnwjPv>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	601c      	str	r4, [r3, #0]
    }
 800d8e4:	bf00      	nop
 800d8e6:	3714      	adds	r7, #20
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd90      	pop	{r4, r7, pc}

0800d8ec <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKfEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 800d8ec:	b590      	push	{r4, r7, lr}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fb fd3f 	bl	800937c <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 800d8fe:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 800d900:	6838      	ldr	r0, [r7, #0]
 800d902:	f7fb fbd6 	bl	80090b2 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800d906:	4603      	mov	r3, r0
        ::new (__storage)
 800d908:	681c      	ldr	r4, [r3, #0]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	4619      	mov	r1, r3
 800d90e:	2004      	movs	r0, #4
 800d910:	f7f3 fb64 	bl	8000fdc <_ZnwjPv>
 800d914:	4603      	mov	r3, r0
 800d916:	601c      	str	r4, [r3, #0]
    }
 800d918:	bf00      	nop
 800d91a:	3714      	adds	r7, #20
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd90      	pop	{r4, r7, pc}

0800d920 <_ZNSt8__detail9__variant26__variant_construct_singleIRNS0_15_Move_ctor_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEERKbEEvOT_OT0_>:
    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 800d920:	b590      	push	{r4, r7, lr}
 800d922:	b085      	sub	sp, #20
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]
      void* __storage = std::addressof(__lhs._M_u);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fb fd25 	bl	800937c <_ZSt9addressofINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEPT_RSA_>
 800d932:	60f8      	str	r0, [r7, #12]
	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 800d934:	6838      	ldr	r0, [r7, #0]
 800d936:	f7fb fbde 	bl	80090f6 <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 800d93a:	4603      	mov	r3, r0
        ::new (__storage)
 800d93c:	781c      	ldrb	r4, [r3, #0]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	4619      	mov	r1, r3
 800d942:	2001      	movs	r0, #1
 800d944:	f7f3 fb4a 	bl	8000fdc <_ZnwjPv>
 800d948:	4603      	mov	r3, r0
 800d94a:	4622      	mov	r2, r4
 800d94c:	701a      	strb	r2, [r3, #0]
    }
 800d94e:	bf00      	nop
 800d950:	3714      	adds	r7, #20
 800d952:	46bd      	mov	sp, r7
 800d954:	bd90      	pop	{r4, r7, pc}

0800d956 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800d956:	b480      	push	{r7}
 800d958:	b083      	sub	sp, #12
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
 800d95e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d201      	bcs.n	800d970 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	e000      	b.n	800d972 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800d970:	687b      	ldr	r3, [r7, #4]
    }
 800d972:	4618      	mov	r0, r3
 800d974:	370c      	adds	r7, #12
 800d976:	46bd      	mov	sp, r7
 800d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97c:	4770      	bx	lr

0800d97e <_ZNSt16allocator_traitsISaIP10ExpressionEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800d97e:	b580      	push	{r7, lr}
 800d980:	b082      	sub	sp, #8
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 f805 	bl	800d996 <_ZNK9__gnu_cxx13new_allocatorIP10ExpressionE8max_sizeEv>
 800d98c:	4603      	mov	r3, r0
 800d98e:	4618      	mov	r0, r3
 800d990:	3708      	adds	r7, #8
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}

0800d996 <_ZNK9__gnu_cxx13new_allocatorIP10ExpressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d996:	b480      	push	{r7}
 800d998:	b083      	sub	sp, #12
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d99e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	370c      	adds	r7, #12
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr

0800d9ae <_ZSt12__niter_baseIPP10ExpressionET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 800d9ae:	b480      	push	{r7}
 800d9b0:	b083      	sub	sp, #12
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <_ZSt14__relocate_a_1IP10ExpressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
 800d9d0:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800d9d2:	68ba      	ldr	r2, [r7, #8]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	1ad3      	subs	r3, r2, r3
 800d9d8:	109b      	asrs	r3, r3, #2
 800d9da:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	dd06      	ble.n	800d9f0 <_ZSt14__relocate_a_1IP10ExpressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	68f9      	ldr	r1, [r7, #12]
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f009 fd4c 	bl	8017488 <memmove>
      return __result + __count;
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	009b      	lsls	r3, r3, #2
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	4413      	add	r3, r2
    }
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3718      	adds	r7, #24
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <_ZNSt16allocator_traitsISaIP4BodyEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 f805 	bl	800da18 <_ZNK9__gnu_cxx13new_allocatorIP4BodyE8max_sizeEv>
 800da0e:	4603      	mov	r3, r0
 800da10:	4618      	mov	r0, r3
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <_ZNK9__gnu_cxx13new_allocatorIP4BodyE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800da20:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800da24:	4618      	mov	r0, r3
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <_ZSt12__niter_baseIPP4BodyET_S3_>:
    __niter_base(_Iterator __it)
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
    { return __it; }
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	4618      	mov	r0, r3
 800da3c:	370c      	adds	r7, #12
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <_ZSt14__relocate_a_1IP4BodyS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800da46:	b580      	push	{r7, lr}
 800da48:	b086      	sub	sp, #24
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	60f8      	str	r0, [r7, #12]
 800da4e:	60b9      	str	r1, [r7, #8]
 800da50:	607a      	str	r2, [r7, #4]
 800da52:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	1ad3      	subs	r3, r2, r3
 800da5a:	109b      	asrs	r3, r3, #2
 800da5c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	2b00      	cmp	r3, #0
 800da62:	dd06      	ble.n	800da72 <_ZSt14__relocate_a_1IP4BodyS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	461a      	mov	r2, r3
 800da6a:	68f9      	ldr	r1, [r7, #12]
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f009 fd0b 	bl	8017488 <memmove>
      return __result + __count;
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	4413      	add	r3, r2
    }
 800da7a:	4618      	mov	r0, r3
 800da7c:	3718      	adds	r7, #24
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <_ZNSt16allocator_traitsISaIP9StatementEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800da82:	b580      	push	{r7, lr}
 800da84:	b082      	sub	sp, #8
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 f805 	bl	800da9a <_ZNK9__gnu_cxx13new_allocatorIP9StatementE8max_sizeEv>
 800da90:	4603      	mov	r3, r0
 800da92:	4618      	mov	r0, r3
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <_ZNK9__gnu_cxx13new_allocatorIP9StatementE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800da9a:	b480      	push	{r7}
 800da9c:	b083      	sub	sp, #12
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800daa2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800daa6:	4618      	mov	r0, r3
 800daa8:	370c      	adds	r7, #12
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <_ZSt12__niter_baseIPP9StatementET_S3_>:
    __niter_base(_Iterator __it)
 800dab2:	b480      	push	{r7}
 800dab4:	b083      	sub	sp, #12
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
    { return __it; }
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4618      	mov	r0, r3
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <_ZSt14__relocate_a_1IP9StatementS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800dac8:	b580      	push	{r7, lr}
 800daca:	b086      	sub	sp, #24
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	60b9      	str	r1, [r7, #8]
 800dad2:	607a      	str	r2, [r7, #4]
 800dad4:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800dad6:	68ba      	ldr	r2, [r7, #8]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	1ad3      	subs	r3, r2, r3
 800dadc:	109b      	asrs	r3, r3, #2
 800dade:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	dd06      	ble.n	800daf4 <_ZSt14__relocate_a_1IP9StatementS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	461a      	mov	r2, r3
 800daec:	68f9      	ldr	r1, [r7, #12]
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f009 fcca 	bl	8017488 <memmove>
      return __result + __count;
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	4413      	add	r3, r2
    }
 800dafc:	4618      	mov	r0, r3
 800dafe:	3718      	adds	r7, #24
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJRKS7_EEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 800db04:	b590      	push	{r4, r7, lr}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	7239      	strb	r1, [r7, #8]
 800db0e:	607a      	str	r2, [r7, #4]
	    _Type(std::forward<_Args>(__args)...);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f7fb fa8a 	bl	800902a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800db16:	4604      	mov	r4, r0
	  ::new ((void*)std::addressof(_M_storage))
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7fa fb73 	bl	8008206 <_ZSt9addressofIN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 800db20:	4603      	mov	r3, r0
 800db22:	4619      	mov	r1, r3
 800db24:	2018      	movs	r0, #24
 800db26:	f7f3 fa59 	bl	8000fdc <_ZnwjPv>
 800db2a:	4603      	mov	r3, r0
 800db2c:	4621      	mov	r1, r4
 800db2e:	4618      	mov	r0, r3
 800db30:	f009 fc02 	bl	8017338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	}
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	4618      	mov	r0, r3
 800db38:	3714      	adds	r7, #20
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd90      	pop	{r4, r7, pc}

0800db3e <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJRKS7_EEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 800db3e:	b5b0      	push	{r4, r5, r7, lr}
 800db40:	b084      	sub	sp, #16
 800db42:	af00      	add	r7, sp, #0
 800db44:	60f8      	str	r0, [r7, #12]
 800db46:	7239      	strb	r1, [r7, #8]
 800db48:	607a      	str	r2, [r7, #4]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 800db4a:	68fc      	ldr	r4, [r7, #12]
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f7fb fa6c 	bl	800902a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800db52:	4603      	mov	r3, r0
 800db54:	461a      	mov	r2, r3
 800db56:	4629      	mov	r1, r5
 800db58:	4620      	mov	r0, r4
 800db5a:	f7ff ffd3 	bl	800db04 <_ZNSt8__detail9__variant14_UninitializedINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IJRKS7_EEESt16in_place_index_tILj0EEDpOT_>
	{ }
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	4618      	mov	r0, r3
 800db62:	3710      	adds	r7, #16
 800db64:	46bd      	mov	sp, r7
 800db66:	bdb0      	pop	{r4, r5, r7, pc}

0800db68 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ILj0EJRKS7_EEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 800db68:	b5b0      	push	{r4, r5, r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	7239      	strb	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
	_M_index(_Np)
 800db74:	68fc      	ldr	r4, [r7, #12]
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7fb fa57 	bl	800902a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800db7c:	4603      	mov	r3, r0
 800db7e:	461a      	mov	r2, r3
 800db80:	4629      	mov	r1, r5
 800db82:	4620      	mov	r0, r4
 800db84:	f7ff ffdb 	bl	800db3e <_ZNSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1IJRKS7_EEESt16in_place_index_tILj0EEDpOT_>
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	761a      	strb	r2, [r3, #24]
	{ }
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	4618      	mov	r0, r3
 800db92:	3710      	adds	r7, #16
 800db94:	46bd      	mov	sp, r7
 800db96:	bdb0      	pop	{r4, r5, r7, pc}

0800db98 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRS9_St17integral_constantIjLj0EEEESC_St14__invoke_otherOSE_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800db98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db9c:	b084      	sub	sp, #16
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	7338      	strb	r0, [r7, #12]
 800dba2:	60b9      	str	r1, [r7, #8]
 800dba4:	607a      	str	r2, [r7, #4]
 800dba6:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800dba8:	68b8      	ldr	r0, [r7, #8]
 800dbaa:	f7ff fe7a 	bl	800d8a2 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800dbae:	4604      	mov	r4, r0
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f7f5 fc35 	bl	8003420 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	6838      	ldr	r0, [r7, #0]
 800dbba:	f7fe fbfa 	bl	800c3b2 <_ZSt7forwardISt17integral_constantIjLj0EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800dbbe:	4632      	mov	r2, r6
 800dbc0:	4629      	mov	r1, r5
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f000 f860 	bl	800dc88 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESB_SC_>
 800dbc8:	4643      	mov	r3, r8
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbd4 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRiSt17integral_constantIjLj1EEEESC_St14__invoke_otherOSE_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800dbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd8:	b084      	sub	sp, #16
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	7338      	strb	r0, [r7, #12]
 800dbde:	60b9      	str	r1, [r7, #8]
 800dbe0:	607a      	str	r2, [r7, #4]
 800dbe2:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800dbe4:	68b8      	ldr	r0, [r7, #8]
 800dbe6:	f7ff fe5c 	bl	800d8a2 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800dbea:	4604      	mov	r4, r0
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f7f5 fbea 	bl	80033c6 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800dbf2:	4605      	mov	r5, r0
 800dbf4:	6838      	ldr	r0, [r7, #0]
 800dbf6:	f7fe fc05 	bl	800c404 <_ZSt7forwardISt17integral_constantIjLj1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800dbfa:	4632      	mov	r2, r6
 800dbfc:	4629      	mov	r1, r5
 800dbfe:	4620      	mov	r0, r4
 800dc00:	f000 f88b 	bl	800dd1a <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESB_SC_>
 800dc04:	4643      	mov	r3, r8
 800dc06:	4618      	mov	r0, r3
 800dc08:	3710      	adds	r7, #16
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc10 <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRfSt17integral_constantIjLj2EEEESC_St14__invoke_otherOSE_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800dc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc14:	b084      	sub	sp, #16
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	7338      	strb	r0, [r7, #12]
 800dc1a:	60b9      	str	r1, [r7, #8]
 800dc1c:	607a      	str	r2, [r7, #4]
 800dc1e:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800dc20:	68b8      	ldr	r0, [r7, #8]
 800dc22:	f7ff fe3e 	bl	800d8a2 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800dc26:	4604      	mov	r4, r0
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f7f5 fbd7 	bl	80033dc <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 800dc2e:	4605      	mov	r5, r0
 800dc30:	6838      	ldr	r0, [r7, #0]
 800dc32:	f7fe fc10 	bl	800c456 <_ZSt7forwardISt17integral_constantIjLj2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800dc36:	4632      	mov	r2, r6
 800dc38:	4629      	mov	r1, r5
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f000 f8b4 	bl	800dda8 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESB_SC_>
 800dc40:	4643      	mov	r3, r8
 800dc42:	4618      	mov	r0, r3
 800dc44:	3710      	adds	r7, #16
 800dc46:	46bd      	mov	sp, r7
 800dc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc4c <_ZSt13__invoke_implINSt8__detail9__variant20__variant_idx_cookieEZNS1_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOSA_EUlOT_T0_E_JRbSt17integral_constantIjLj3EEEESC_St14__invoke_otherOSE_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800dc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc50:	b084      	sub	sp, #16
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	7338      	strb	r0, [r7, #12]
 800dc56:	60b9      	str	r1, [r7, #8]
 800dc58:	607a      	str	r2, [r7, #4]
 800dc5a:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800dc5c:	68b8      	ldr	r0, [r7, #8]
 800dc5e:	f7ff fe20 	bl	800d8a2 <_ZSt7forwardIZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS9_EUlOT_T0_E_ESC_RNSt16remove_referenceISB_E4typeE>
 800dc62:	4604      	mov	r4, r0
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f7f5 fbc4 	bl	80033f2 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	6838      	ldr	r0, [r7, #0]
 800dc6e:	f7fe fc1b 	bl	800c4a8 <_ZSt7forwardISt17integral_constantIjLj3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800dc72:	4632      	mov	r2, r6
 800dc74:	4629      	mov	r1, r5
 800dc76:	4620      	mov	r0, r4
 800dc78:	f000 f8dd 	bl	800de36 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESB_SC_>
 800dc7c:	4643      	mov	r3, r8
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc88 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESB_SC_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800dc88:	b5b0      	push	{r4, r5, r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	713a      	strb	r2, [r7, #4]
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800dc98:	7e1b      	ldrb	r3, [r3, #24]
 800dc9a:	461c      	mov	r4, r3
 800dc9c:	1d3b      	adds	r3, r7, #4
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fe ff86 	bl	800cbb0 <_ZNKSt17integral_constantIjLj0EEcvjEv>
 800dca4:	4603      	mov	r3, r0
 800dca6:	429c      	cmp	r4, r3
 800dca8:	bf0c      	ite	eq
 800dcaa:	2301      	moveq	r3, #1
 800dcac:	2300      	movne	r3, #0
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d00e      	beq.n	800dcd2 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESB_SC_+0x4a>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800dcb4:	68b8      	ldr	r0, [r7, #8]
 800dcb6:	f7fd fbaf 	bl	800b418 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800dcba:	4604      	mov	r4, r0
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f000 f819 	bl	800dcf8 <_ZNSt8__detail9__variant5__getILj0ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	4621      	mov	r1, r4
 800dcca:	4618      	mov	r0, r3
 800dccc:	f009 fa13 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
	    return {};
 800dcd0:	e00d      	b.n	800dcee <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRS7_St17integral_constantIjLj0EEEENS0_20__variant_idx_cookieESB_SC_+0x66>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
		  __variant_cast<_Types...>(*this)
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7ff f9dc 	bl	800d094 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800dcdc:	4604      	mov	r4, r0
		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 800dcde:	68b8      	ldr	r0, [r7, #8]
 800dce0:	f7fd fb9a 	bl	800b418 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800dce4:	4603      	mov	r3, r0
		  __variant_cast<_Types...>(*this)
 800dce6:	4619      	mov	r1, r3
 800dce8:	4620      	mov	r0, r4
 800dcea:	f000 f8f7 	bl	800dedc <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj0EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>
	    return {};
 800dcee:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bdb0      	pop	{r4, r5, r7, pc}

0800dcf8 <_ZNSt8__detail9__variant5__getILj0ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800dcf8:	b590      	push	{r4, r7, lr}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 f8e0 	bl	800dec6 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800dd06:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800dd08:	4619      	mov	r1, r3
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f7fa fa92 	bl	8008234 <_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 800dd10:	4603      	mov	r3, r0
    }
 800dd12:	4618      	mov	r0, r3
 800dd14:	370c      	adds	r7, #12
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd90      	pop	{r4, r7, pc}

0800dd1a <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESB_SC_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800dd1a:	b5b0      	push	{r4, r5, r7, lr}
 800dd1c:	b084      	sub	sp, #16
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	60f8      	str	r0, [r7, #12]
 800dd22:	60b9      	str	r1, [r7, #8]
 800dd24:	713a      	strb	r2, [r7, #4]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800dd2a:	7e1b      	ldrb	r3, [r3, #24]
 800dd2c:	461c      	mov	r4, r3
 800dd2e:	1d3b      	adds	r3, r7, #4
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fe ffb7 	bl	800cca4 <_ZNKSt17integral_constantIjLj1EEcvjEv>
 800dd36:	4603      	mov	r3, r0
 800dd38:	429c      	cmp	r4, r3
 800dd3a:	bf0c      	ite	eq
 800dd3c:	2301      	moveq	r3, #1
 800dd3e:	2300      	movne	r3, #0
 800dd40:	b2db      	uxtb	r3, r3
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d00c      	beq.n	800dd60 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESB_SC_+0x46>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800dd46:	68b8      	ldr	r0, [r7, #8]
 800dd48:	f000 f8e1 	bl	800df0e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	681c      	ldr	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800dd54:	4618      	mov	r0, r3
 800dd56:	f000 f816 	bl	800dd86 <_ZNSt8__detail9__variant5__getILj1ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	601c      	str	r4, [r3, #0]
	    return {};
 800dd5e:	e00d      	b.n	800dd7c <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRiSt17integral_constantIjLj1EEEENS0_20__variant_idx_cookieESB_SC_+0x62>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
		  __variant_cast<_Types...>(*this)
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7ff f995 	bl	800d094 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800dd6a:	4604      	mov	r4, r0
		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 800dd6c:	68b8      	ldr	r0, [r7, #8]
 800dd6e:	f000 f8ce 	bl	800df0e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 800dd72:	4603      	mov	r3, r0
		  __variant_cast<_Types...>(*this)
 800dd74:	4619      	mov	r1, r3
 800dd76:	4620      	mov	r0, r4
 800dd78:	f000 f8d4 	bl	800df24 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj1EJiEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>
	    return {};
 800dd7c:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3710      	adds	r7, #16
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bdb0      	pop	{r4, r5, r7, pc}

0800dd86 <_ZNSt8__detail9__variant5__getILj1ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800dd86:	b590      	push	{r4, r7, lr}
 800dd88:	b083      	sub	sp, #12
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 f899 	bl	800dec6 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800dd94:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800dd96:	4619      	mov	r1, r3
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f7fa fad4 	bl	8008346 <_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800dd9e:	4603      	mov	r3, r0
    }
 800dda0:	4618      	mov	r0, r3
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd90      	pop	{r4, r7, pc}

0800dda8 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESB_SC_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800dda8:	b5b0      	push	{r4, r5, r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	713a      	strb	r2, [r7, #4]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800ddb8:	7e1b      	ldrb	r3, [r3, #24]
 800ddba:	461c      	mov	r4, r3
 800ddbc:	1d3b      	adds	r3, r7, #4
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7fe ffbf 	bl	800cd42 <_ZNKSt17integral_constantIjLj2EEcvjEv>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	429c      	cmp	r4, r3
 800ddc8:	bf0c      	ite	eq
 800ddca:	2301      	moveq	r3, #1
 800ddcc:	2300      	movne	r3, #0
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00c      	beq.n	800ddee <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESB_SC_+0x46>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800ddd4:	68b8      	ldr	r0, [r7, #8]
 800ddd6:	f000 f8be 	bl	800df56 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ddda:	4603      	mov	r3, r0
 800dddc:	681c      	ldr	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800dde2:	4618      	mov	r0, r3
 800dde4:	f000 f816 	bl	800de14 <_ZNSt8__detail9__variant5__getILj2ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800dde8:	4603      	mov	r3, r0
 800ddea:	601c      	str	r4, [r3, #0]
	    return {};
 800ddec:	e00d      	b.n	800de0a <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRfSt17integral_constantIjLj2EEEENS0_20__variant_idx_cookieESB_SC_+0x62>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
		  __variant_cast<_Types...>(*this)
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7ff f94e 	bl	800d094 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800ddf8:	4604      	mov	r4, r0
		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 800ddfa:	68b8      	ldr	r0, [r7, #8]
 800ddfc:	f000 f8ab 	bl	800df56 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800de00:	4603      	mov	r3, r0
		  __variant_cast<_Types...>(*this)
 800de02:	4619      	mov	r1, r3
 800de04:	4620      	mov	r0, r4
 800de06:	f000 f8b1 	bl	800df6c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj2EJfEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>
	    return {};
 800de0a:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800de0c:	4618      	mov	r0, r3
 800de0e:	3710      	adds	r7, #16
 800de10:	46bd      	mov	sp, r7
 800de12:	bdb0      	pop	{r4, r5, r7, pc}

0800de14 <_ZNSt8__detail9__variant5__getILj2ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800de14:	b590      	push	{r4, r7, lr}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 f852 	bl	800dec6 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800de22:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800de24:	4619      	mov	r1, r3
 800de26:	4620      	mov	r0, r4
 800de28:	f7fa fb29 	bl	800847e <_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800de2c:	4603      	mov	r3, r0
    }
 800de2e:	4618      	mov	r0, r3
 800de30:	370c      	adds	r7, #12
 800de32:	46bd      	mov	sp, r7
 800de34:	bd90      	pop	{r4, r7, pc}

0800de36 <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESB_SC_>:
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800de36:	b5b0      	push	{r4, r5, r7, lr}
 800de38:	b084      	sub	sp, #16
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	60f8      	str	r0, [r7, #12]
 800de3e:	60b9      	str	r1, [r7, #8]
 800de40:	713a      	strb	r2, [r7, #4]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
		if (this->_M_index == __rhs_index)
 800de46:	7e1b      	ldrb	r3, [r3, #24]
 800de48:	461c      	mov	r4, r3
 800de4a:	1d3b      	adds	r3, r7, #4
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fe ffc8 	bl	800cde2 <_ZNKSt17integral_constantIjLj3EEcvjEv>
 800de52:	4603      	mov	r3, r0
 800de54:	429c      	cmp	r4, r3
 800de56:	bf0c      	ite	eq
 800de58:	2301      	moveq	r3, #1
 800de5a:	2300      	movne	r3, #0
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00d      	beq.n	800de7e <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESB_SC_+0x48>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800de62:	68b8      	ldr	r0, [r7, #8]
 800de64:	f000 f89b 	bl	800df9e <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800de68:	4603      	mov	r3, r0
 800de6a:	781c      	ldrb	r4, [r3, #0]
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 800de70:	4618      	mov	r0, r3
 800de72:	f000 f817 	bl	800dea4 <_ZNSt8__detail9__variant5__getILj3ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>
 800de76:	4603      	mov	r3, r0
 800de78:	4622      	mov	r2, r4
 800de7a:	701a      	strb	r2, [r3, #0]
	    return {};
 800de7c:	e00d      	b.n	800de9a <_ZZNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS8_ENUlOT_T0_E_clIRbSt17integral_constantIjLj3EEEENS0_20__variant_idx_cookieESB_SC_+0x64>
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
		  __variant_cast<_Types...>(*this)
 800de82:	4618      	mov	r0, r3
 800de84:	f7ff f906 	bl	800d094 <_ZSt14__variant_castIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbERNSt8__detail9__variant17_Move_assign_baseILb0EJS5_ifbEEEEDcOT0_>
 800de88:	4604      	mov	r4, r0
		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 800de8a:	68b8      	ldr	r0, [r7, #8]
 800de8c:	f000 f887 	bl	800df9e <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800de90:	4603      	mov	r3, r0
		  __variant_cast<_Types...>(*this)
 800de92:	4619      	mov	r1, r3
 800de94:	4620      	mov	r0, r4
 800de96:	f000 f88d 	bl	800dfb4 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj3EJbEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>
	    return {};
 800de9a:	462b      	mov	r3, r5
	__do_visit<__visit_with_index>([this](auto&& __rhs_mem,
 800de9c:	4618      	mov	r0, r3
 800de9e:	3710      	adds	r7, #16
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bdb0      	pop	{r4, r5, r7, pc}

0800dea4 <_ZNSt8__detail9__variant5__getILj3ERNS0_17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 800dea4:	b590      	push	{r4, r7, lr}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f000 f80a 	bl	800dec6 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800deb2:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 800deb4:	4619      	mov	r1, r3
 800deb6:	4620      	mov	r0, r4
 800deb8:	f7fa fb8f 	bl	80085da <_ZNSt8__detail9__variant5__getILj3ERNS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 800debc:	4603      	mov	r3, r0
    }
 800debe:	4618      	mov	r0, r3
 800dec0:	370c      	adds	r7, #12
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd90      	pop	{r4, r7, pc}

0800dec6 <_ZSt7forwardIRNSt8__detail9__variant17_Move_assign_baseILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dec6:	b480      	push	{r7}
 800dec8:	b083      	sub	sp, #12
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	4618      	mov	r0, r3
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj0EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>:
	emplace(_Args&&... __args)
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	4618      	mov	r0, r3
 800deea:	f7f9 fca4 	bl	8007836 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800deee:	6838      	ldr	r0, [r7, #0]
 800def0:	f7f9 fbcb 	bl	800768a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800def4:	4603      	mov	r3, r0
 800def6:	4619      	mov	r1, r3
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 f874 	bl	800dfe6 <_ZSt28__variant_construct_by_indexILj0ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJS6_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f000 f892 	bl	800e028 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>
 800df04:	4603      	mov	r3, r0
	}
 800df06:	4618      	mov	r0, r3
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800df0e:	b480      	push	{r7}
 800df10:	b083      	sub	sp, #12
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	4618      	mov	r0, r3
 800df1a:	370c      	adds	r7, #12
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr

0800df24 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj1EJiEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>:
	emplace(_Args&&... __args)
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4618      	mov	r0, r3
 800df32:	f7f9 fc80 	bl	8007836 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800df36:	6838      	ldr	r0, [r7, #0]
 800df38:	f7f9 fbde 	bl	80076f8 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800df3c:	4603      	mov	r3, r0
 800df3e:	4619      	mov	r1, r3
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 f88d 	bl	800e060 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJiEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 f8aa 	bl	800e0a0 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>
 800df4c:	4603      	mov	r3, r0
	}
 800df4e:	4618      	mov	r0, r3
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}

0800df56 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800df56:	b480      	push	{r7}
 800df58:	b083      	sub	sp, #12
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	4618      	mov	r0, r3
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj2EJfEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>:
	emplace(_Args&&... __args)
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	4618      	mov	r0, r3
 800df7a:	f7f9 fc5c 	bl	8007836 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800df7e:	6838      	ldr	r0, [r7, #0]
 800df80:	f7f9 fbf1 	bl	8007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800df84:	4603      	mov	r3, r0
 800df86:	4619      	mov	r1, r3
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 f8a5 	bl	800e0d8 <_ZSt28__variant_construct_by_indexILj2ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJfEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 f8c2 	bl	800e118 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>
 800df94:	4603      	mov	r3, r0
	}
 800df96:	4618      	mov	r0, r3
 800df98:	3708      	adds	r7, #8
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}

0800df9e <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800df9e:	b480      	push	{r7}
 800dfa0:	b083      	sub	sp, #12
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE7emplaceILj3EJbEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSB_E4typeEDpOSC_>:
	emplace(_Args&&... __args)
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7f9 fc38 	bl	8007836 <_ZNSt8__detail9__variant16_Variant_storageILb0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 800dfc6:	6838      	ldr	r0, [r7, #0]
 800dfc8:	f000 f8c2 	bl	800e150 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	4619      	mov	r1, r3
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 f8c8 	bl	800e166 <_ZSt28__variant_construct_by_indexILj3ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJbEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f000 f8e6 	bl	800e1a8 <_ZSt3getILj3EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>
 800dfdc:	4603      	mov	r3, r0
	}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3708      	adds	r7, #8
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}

0800dfe6 <_ZSt28__variant_construct_by_indexILj0ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJS6_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800dfe6:	b590      	push	{r4, r7, lr}
 800dfe8:	b085      	sub	sp, #20
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
 800dfee:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7fa f92d 	bl	8008256 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800dffc:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800dffe:	6838      	ldr	r0, [r7, #0]
 800e000:	f7f9 fb43 	bl	800768a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800e004:	4604      	mov	r4, r0
      ::new ((void*)std::addressof(__storage))
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f000 f8ea 	bl	800e1e0 <_ZSt9addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800e00c:	4603      	mov	r3, r0
 800e00e:	4619      	mov	r1, r3
 800e010:	2018      	movs	r0, #24
 800e012:	f7f2 ffe3 	bl	8000fdc <_ZnwjPv>
 800e016:	4603      	mov	r3, r0
 800e018:	4621      	mov	r1, r4
 800e01a:	4618      	mov	r0, r3
 800e01c:	f009 f845 	bl	80170aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 800e020:	bf00      	nop
 800e022:	3714      	adds	r7, #20
 800e024:	46bd      	mov	sp, r7
 800e026:	bd90      	pop	{r4, r7, pc}

0800e028 <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>:
    get(variant<_Types...>& __v)
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7fa f891 	bl	8008158 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	bf14      	ite	ne
 800e03c:	2301      	movne	r3, #1
 800e03e:	2300      	moveq	r3, #0
 800e040:	b2db      	uxtb	r3, r3
 800e042:	2b00      	cmp	r3, #0
 800e044:	d002      	beq.n	800e04c <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800e046:	4805      	ldr	r0, [pc, #20]	; (800e05c <_ZSt3getILj0EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x34>)
 800e048:	f7f6 f95c 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7fa f902 	bl	8008256 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800e052:	4603      	mov	r3, r0
    }
 800e054:	4618      	mov	r0, r3
 800e056:	3708      	adds	r7, #8
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	0801a6f0 	.word	0x0801a6f0

0800e060 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJiEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800e060:	b590      	push	{r4, r7, lr}
 800e062:	b085      	sub	sp, #20
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2201      	movs	r2, #1
 800e06e:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f7fa f97a 	bl	800836a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800e076:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800e078:	6838      	ldr	r0, [r7, #0]
 800e07a:	f7f9 fb3d 	bl	80076f8 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800e07e:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800e080:	681c      	ldr	r4, [r3, #0]
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f000 f8b8 	bl	800e1f8 <_ZSt9addressofIiEPT_RS0_>
 800e088:	4603      	mov	r3, r0
 800e08a:	4619      	mov	r1, r3
 800e08c:	2004      	movs	r0, #4
 800e08e:	f7f2 ffa5 	bl	8000fdc <_ZnwjPv>
 800e092:	4603      	mov	r3, r0
 800e094:	601c      	str	r4, [r3, #0]
    }
 800e096:	bf00      	nop
 800e098:	3714      	adds	r7, #20
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd90      	pop	{r4, r7, pc}
	...

0800e0a0 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>:
    get(variant<_Types...>& __v)
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f7fa f855 	bl	8008158 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	bf14      	ite	ne
 800e0b4:	2301      	movne	r3, #1
 800e0b6:	2300      	moveq	r3, #0
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d002      	beq.n	800e0c4 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800e0be:	4805      	ldr	r0, [pc, #20]	; (800e0d4 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x34>)
 800e0c0:	f7f6 f920 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7fa f950 	bl	800836a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800e0ca:	4603      	mov	r3, r0
    }
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3708      	adds	r7, #8
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	0801a6f0 	.word	0x0801a6f0

0800e0d8 <_ZSt28__variant_construct_by_indexILj2ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJfEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800e0d8:	b590      	push	{r4, r7, lr}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2202      	movs	r2, #2
 800e0e6:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f7fa f9da 	bl	80084a2 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800e0ee:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800e0f0:	6838      	ldr	r0, [r7, #0]
 800e0f2:	f7f9 fb38 	bl	8007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800e0f6:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800e0f8:	681c      	ldr	r4, [r3, #0]
 800e0fa:	68f8      	ldr	r0, [r7, #12]
 800e0fc:	f000 f888 	bl	800e210 <_ZSt9addressofIfEPT_RS0_>
 800e100:	4603      	mov	r3, r0
 800e102:	4619      	mov	r1, r3
 800e104:	2004      	movs	r0, #4
 800e106:	f7f2 ff69 	bl	8000fdc <_ZnwjPv>
 800e10a:	4603      	mov	r3, r0
 800e10c:	601c      	str	r4, [r3, #0]
    }
 800e10e:	bf00      	nop
 800e110:	3714      	adds	r7, #20
 800e112:	46bd      	mov	sp, r7
 800e114:	bd90      	pop	{r4, r7, pc}
	...

0800e118 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>:
    get(variant<_Types...>& __v)
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7fa f819 	bl	8008158 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800e126:	4603      	mov	r3, r0
 800e128:	2b02      	cmp	r3, #2
 800e12a:	bf14      	ite	ne
 800e12c:	2301      	movne	r3, #1
 800e12e:	2300      	moveq	r3, #0
 800e130:	b2db      	uxtb	r3, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	d002      	beq.n	800e13c <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800e136:	4805      	ldr	r0, [pc, #20]	; (800e14c <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x34>)
 800e138:	f7f6 f8e4 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f7fa f9b0 	bl	80084a2 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800e142:	4603      	mov	r3, r0
    }
 800e144:	4618      	mov	r0, r3
 800e146:	3708      	adds	r7, #8
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	0801a6f0 	.word	0x0801a6f0

0800e150 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	4618      	mov	r0, r3
 800e15c:	370c      	adds	r7, #12
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr

0800e166 <_ZSt28__variant_construct_by_indexILj3ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEJbEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 800e166:	b590      	push	{r4, r7, lr}
 800e168:	b085      	sub	sp, #20
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	6078      	str	r0, [r7, #4]
 800e16e:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2203      	movs	r2, #3
 800e174:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7fa fa41 	bl	80085fe <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800e17c:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 800e17e:	6838      	ldr	r0, [r7, #0]
 800e180:	f7ff ffe6 	bl	800e150 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800e184:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 800e186:	781c      	ldrb	r4, [r3, #0]
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f000 f84d 	bl	800e228 <_ZSt9addressofIbEPT_RS0_>
 800e18e:	4603      	mov	r3, r0
 800e190:	4619      	mov	r1, r3
 800e192:	2001      	movs	r0, #1
 800e194:	f7f2 ff22 	bl	8000fdc <_ZnwjPv>
 800e198:	4603      	mov	r3, r0
 800e19a:	4622      	mov	r2, r4
 800e19c:	701a      	strb	r2, [r3, #0]
    }
 800e19e:	bf00      	nop
 800e1a0:	3714      	adds	r7, #20
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd90      	pop	{r4, r7, pc}
	...

0800e1a8 <_ZSt3getILj3EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_>:
    get(variant<_Types...>& __v)
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f7f9 ffd1 	bl	8008158 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b03      	cmp	r3, #3
 800e1ba:	bf14      	ite	ne
 800e1bc:	2301      	movne	r3, #1
 800e1be:	2300      	moveq	r3, #0
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d002      	beq.n	800e1cc <_ZSt3getILj3EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 800e1c6:	4805      	ldr	r0, [pc, #20]	; (800e1dc <_ZSt3getILj3EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_+0x34>)
 800e1c8:	f7f6 f89c 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f7fa fa16 	bl	80085fe <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 800e1d2:	4603      	mov	r3, r0
    }
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3708      	adds	r7, #8
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	0801a6f0 	.word	0x0801a6f0

0800e1e0 <_ZSt9addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    addressof(_Tp& __r) noexcept
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f7f5 fca8 	bl	8003b3e <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <_ZSt9addressofIiEPT_RS0_>:
    addressof(_Tp& __r) noexcept
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f7f5 fc5d 	bl	8003ac0 <_ZSt11__addressofIiEPT_RS0_>
 800e206:	4603      	mov	r3, r0
 800e208:	4618      	mov	r0, r3
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <_ZSt9addressofIfEPT_RS0_>:
    addressof(_Tp& __r) noexcept
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7f5 fc66 	bl	8003aea <_ZSt11__addressofIfEPT_RS0_>
 800e21e:	4603      	mov	r3, r0
 800e220:	4618      	mov	r0, r3
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <_ZSt9addressofIbEPT_RS0_>:
    addressof(_Tp& __r) noexcept
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f7f5 fc6f 	bl	8003b14 <_ZSt11__addressofIbEPT_RS0_>
 800e236:	4603      	mov	r3, r0
 800e238:	4618      	mov	r0, r3
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <_Z41__static_initialization_and_destruction_0ii>:
 800e240:	b590      	push	{r4, r7, lr}
 800e242:	b0e7      	sub	sp, #412	; 0x19c
 800e244:	af02      	add	r7, sp, #8
 800e246:	1d3b      	adds	r3, r7, #4
 800e248:	6018      	str	r0, [r3, #0]
 800e24a:	463b      	mov	r3, r7
 800e24c:	6019      	str	r1, [r3, #0]
 800e24e:	1d3b      	adds	r3, r7, #4
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2b01      	cmp	r3, #1
 800e254:	f040 819d 	bne.w	800e592 <_Z41__static_initialization_and_destruction_0ii+0x352>
 800e258:	463b      	mov	r3, r7
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e260:	4293      	cmp	r3, r2
 800e262:	f040 8196 	bne.w	800e592 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 800e266:	f107 0314 	add.w	r3, r7, #20
 800e26a:	4618      	mov	r0, r3
 800e26c:	2322      	movs	r3, #34	; 0x22
 800e26e:	461a      	mov	r2, r3
 800e270:	2100      	movs	r1, #0
 800e272:	f009 f923 	bl	80174bc <memset>
 800e276:	f107 0314 	add.w	r3, r7, #20
 800e27a:	223a      	movs	r2, #58	; 0x3a
 800e27c:	701a      	strb	r2, [r3, #0]
 800e27e:	f107 0314 	add.w	r3, r7, #20
 800e282:	2201      	movs	r2, #1
 800e284:	705a      	strb	r2, [r3, #1]
 800e286:	f107 0314 	add.w	r3, r7, #20
 800e28a:	220a      	movs	r2, #10
 800e28c:	709a      	strb	r2, [r3, #2]
 800e28e:	f107 0314 	add.w	r3, r7, #20
 800e292:	220a      	movs	r2, #10
 800e294:	70da      	strb	r2, [r3, #3]
 800e296:	f107 0314 	add.w	r3, r7, #20
 800e29a:	222c      	movs	r2, #44	; 0x2c
 800e29c:	711a      	strb	r2, [r3, #4]
 800e29e:	f107 0314 	add.w	r3, r7, #20
 800e2a2:	220c      	movs	r2, #12
 800e2a4:	715a      	strb	r2, [r3, #5]
 800e2a6:	f107 0314 	add.w	r3, r7, #20
 800e2aa:	222e      	movs	r2, #46	; 0x2e
 800e2ac:	719a      	strb	r2, [r3, #6]
 800e2ae:	f107 0314 	add.w	r3, r7, #20
 800e2b2:	220b      	movs	r2, #11
 800e2b4:	71da      	strb	r2, [r3, #7]
 800e2b6:	f107 0314 	add.w	r3, r7, #20
 800e2ba:	225b      	movs	r2, #91	; 0x5b
 800e2bc:	721a      	strb	r2, [r3, #8]
 800e2be:	f107 0314 	add.w	r3, r7, #20
 800e2c2:	220d      	movs	r2, #13
 800e2c4:	725a      	strb	r2, [r3, #9]
 800e2c6:	f107 0314 	add.w	r3, r7, #20
 800e2ca:	225d      	movs	r2, #93	; 0x5d
 800e2cc:	729a      	strb	r2, [r3, #10]
 800e2ce:	f107 0314 	add.w	r3, r7, #20
 800e2d2:	220e      	movs	r2, #14
 800e2d4:	72da      	strb	r2, [r3, #11]
 800e2d6:	f107 0314 	add.w	r3, r7, #20
 800e2da:	227c      	movs	r2, #124	; 0x7c
 800e2dc:	731a      	strb	r2, [r3, #12]
 800e2de:	f107 0314 	add.w	r3, r7, #20
 800e2e2:	2215      	movs	r2, #21
 800e2e4:	735a      	strb	r2, [r3, #13]
 800e2e6:	f107 0314 	add.w	r3, r7, #20
 800e2ea:	2226      	movs	r2, #38	; 0x26
 800e2ec:	739a      	strb	r2, [r3, #14]
 800e2ee:	f107 0314 	add.w	r3, r7, #20
 800e2f2:	2216      	movs	r2, #22
 800e2f4:	73da      	strb	r2, [r3, #15]
 800e2f6:	f107 0314 	add.w	r3, r7, #20
 800e2fa:	222b      	movs	r2, #43	; 0x2b
 800e2fc:	741a      	strb	r2, [r3, #16]
 800e2fe:	f107 0314 	add.w	r3, r7, #20
 800e302:	221f      	movs	r2, #31
 800e304:	745a      	strb	r2, [r3, #17]
 800e306:	f107 0314 	add.w	r3, r7, #20
 800e30a:	222d      	movs	r2, #45	; 0x2d
 800e30c:	749a      	strb	r2, [r3, #18]
 800e30e:	f107 0314 	add.w	r3, r7, #20
 800e312:	2220      	movs	r2, #32
 800e314:	74da      	strb	r2, [r3, #19]
 800e316:	f107 0314 	add.w	r3, r7, #20
 800e31a:	222a      	movs	r2, #42	; 0x2a
 800e31c:	751a      	strb	r2, [r3, #20]
 800e31e:	f107 0314 	add.w	r3, r7, #20
 800e322:	2221      	movs	r2, #33	; 0x21
 800e324:	755a      	strb	r2, [r3, #21]
 800e326:	f107 0314 	add.w	r3, r7, #20
 800e32a:	222f      	movs	r2, #47	; 0x2f
 800e32c:	759a      	strb	r2, [r3, #22]
 800e32e:	f107 0314 	add.w	r3, r7, #20
 800e332:	2222      	movs	r2, #34	; 0x22
 800e334:	75da      	strb	r2, [r3, #23]
 800e336:	f107 0314 	add.w	r3, r7, #20
 800e33a:	225e      	movs	r2, #94	; 0x5e
 800e33c:	761a      	strb	r2, [r3, #24]
 800e33e:	f107 0314 	add.w	r3, r7, #20
 800e342:	2223      	movs	r2, #35	; 0x23
 800e344:	765a      	strb	r2, [r3, #25]
 800e346:	f107 0314 	add.w	r3, r7, #20
 800e34a:	2225      	movs	r2, #37	; 0x25
 800e34c:	769a      	strb	r2, [r3, #26]
 800e34e:	f107 0314 	add.w	r3, r7, #20
 800e352:	2224      	movs	r2, #36	; 0x24
 800e354:	76da      	strb	r2, [r3, #27]
 800e356:	f107 0314 	add.w	r3, r7, #20
 800e35a:	2228      	movs	r2, #40	; 0x28
 800e35c:	771a      	strb	r2, [r3, #28]
 800e35e:	f107 0314 	add.w	r3, r7, #20
 800e362:	2226      	movs	r2, #38	; 0x26
 800e364:	775a      	strb	r2, [r3, #29]
 800e366:	f107 0314 	add.w	r3, r7, #20
 800e36a:	2229      	movs	r2, #41	; 0x29
 800e36c:	779a      	strb	r2, [r3, #30]
 800e36e:	f107 0314 	add.w	r3, r7, #20
 800e372:	2227      	movs	r2, #39	; 0x27
 800e374:	77da      	strb	r2, [r3, #31]
 800e376:	f107 0314 	add.w	r3, r7, #20
 800e37a:	2225      	movs	r2, #37	; 0x25
 800e37c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800e380:	f107 030c 	add.w	r3, r7, #12
 800e384:	f107 0214 	add.w	r2, r7, #20
 800e388:	601a      	str	r2, [r3, #0]
 800e38a:	f107 030c 	add.w	r3, r7, #12
 800e38e:	2211      	movs	r2, #17
 800e390:	605a      	str	r2, [r3, #4]
 800e392:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e396:	4618      	mov	r0, r3
 800e398:	f7f2 ff7c 	bl	8001294 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 800e39c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e3a0:	f107 020c 	add.w	r2, r7, #12
 800e3a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	ca06      	ldmia	r2, {r1, r2}
 800e3ae:	4885      	ldr	r0, [pc, #532]	; (800e5c4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800e3b0:	f7f2 ff88 	bl	80012c4 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800e3b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7f2 ff77 	bl	80012ac <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 800e3be:	2305      	movs	r3, #5
 800e3c0:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 800e3c4:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 800e3c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e3cc:	497e      	ldr	r1, [pc, #504]	; (800e5c8 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7f2 fe64 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 800e3d4:	2306      	movs	r3, #6
 800e3d6:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 800e3da:	f207 1263 	addw	r2, r7, #355	; 0x163
 800e3de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e3e2:	331c      	adds	r3, #28
 800e3e4:	4979      	ldr	r1, [pc, #484]	; (800e5cc <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7f2 fe80 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 800e3ec:	2307      	movs	r3, #7
 800e3ee:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 800e3f2:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800e3f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e3fa:	3338      	adds	r3, #56	; 0x38
 800e3fc:	4974      	ldr	r1, [pc, #464]	; (800e5d0 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7f2 fe74 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 800e404:	2308      	movs	r3, #8
 800e406:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 800e40a:	f207 1265 	addw	r2, r7, #357	; 0x165
 800e40e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e412:	3354      	adds	r3, #84	; 0x54
 800e414:	496f      	ldr	r1, [pc, #444]	; (800e5d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800e416:	4618      	mov	r0, r3
 800e418:	f7f2 fe40 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 800e41c:	2309      	movs	r3, #9
 800e41e:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800e422:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 800e426:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e42a:	3370      	adds	r3, #112	; 0x70
 800e42c:	496a      	ldr	r1, [pc, #424]	; (800e5d8 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800e42e:	4618      	mov	r0, r3
 800e430:	f7f2 fe84 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 800e434:	2310      	movs	r3, #16
 800e436:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 800e43a:	f207 1267 	addw	r2, r7, #359	; 0x167
 800e43e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e442:	338c      	adds	r3, #140	; 0x8c
 800e444:	4965      	ldr	r1, [pc, #404]	; (800e5dc <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800e446:	4618      	mov	r0, r3
 800e448:	f7f2 fea0 	bl	800118c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 800e44c:	2311      	movs	r3, #17
 800e44e:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800e452:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800e456:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e45a:	33a8      	adds	r3, #168	; 0xa8
 800e45c:	4960      	ldr	r1, [pc, #384]	; (800e5e0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e45e:	4618      	mov	r0, r3
 800e460:	f7f2 fe6c 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 800e464:	2312      	movs	r3, #18
 800e466:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 800e46a:	f207 1269 	addw	r2, r7, #361	; 0x169
 800e46e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e472:	33c4      	adds	r3, #196	; 0xc4
 800e474:	495b      	ldr	r1, [pc, #364]	; (800e5e4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800e476:	4618      	mov	r0, r3
 800e478:	f7f2 fe10 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 800e47c:	2313      	movs	r3, #19
 800e47e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800e482:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800e486:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e48a:	33e0      	adds	r3, #224	; 0xe0
 800e48c:	4956      	ldr	r1, [pc, #344]	; (800e5e8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800e48e:	4618      	mov	r0, r3
 800e490:	f7f2 fe2c 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 800e494:	2314      	movs	r3, #20
 800e496:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 800e49a:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800e49e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e4a2:	33fc      	adds	r3, #252	; 0xfc
 800e4a4:	4951      	ldr	r1, [pc, #324]	; (800e5ec <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7f2 fe98 	bl	80011dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 800e4ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e4b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e4b4:	601a      	str	r2, [r3, #0]
 800e4b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e4ba:	220a      	movs	r2, #10
 800e4bc:	605a      	str	r2, [r3, #4]
 800e4be:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7f2 ff8b 	bl	80013de <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 800e4c8:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800e4cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e4d0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e4d4:	9300      	str	r3, [sp, #0]
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	ca06      	ldmia	r2, {r1, r2}
 800e4da:	4845      	ldr	r0, [pc, #276]	; (800e5f0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800e4dc:	f7f2 ff97 	bl	800140e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 800e4e0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7f2 ff86 	bl	80013f6 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800e4ea:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800e4ee:	f504 748c 	add.w	r4, r4, #280	; 0x118
 800e4f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e4f6:	429c      	cmp	r4, r3
 800e4f8:	d004      	beq.n	800e504 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 800e4fa:	3c1c      	subs	r4, #28
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f7f2 fdc0 	bl	8001082 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 800e502:	e7f6      	b.n	800e4f2 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 800e504:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800e508:	2200      	movs	r2, #0
 800e50a:	601a      	str	r2, [r3, #0]
 800e50c:	605a      	str	r2, [r3, #4]
 800e50e:	609a      	str	r2, [r3, #8]
 800e510:	233c      	movs	r3, #60	; 0x3c
 800e512:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 800e516:	231b      	movs	r3, #27
 800e518:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 800e51c:	231c      	movs	r3, #28
 800e51e:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800e522:	233e      	movs	r3, #62	; 0x3e
 800e524:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 800e528:	2319      	movs	r3, #25
 800e52a:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800e52e:	231a      	movs	r3, #26
 800e530:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 800e534:	233d      	movs	r3, #61	; 0x3d
 800e536:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 800e53a:	2318      	movs	r3, #24
 800e53c:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 800e540:	231d      	movs	r3, #29
 800e542:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800e546:	2321      	movs	r3, #33	; 0x21
 800e548:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 800e54c:	2317      	movs	r3, #23
 800e54e:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800e552:	231e      	movs	r3, #30
 800e554:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 800e558:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800e55c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800e560:	2304      	movs	r3, #4
 800e562:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800e566:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7f2 ff7f 	bl	800146e <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 800e570:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800e574:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800e578:	9300      	str	r3, [sp, #0]
 800e57a:	4613      	mov	r3, r2
 800e57c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 800e580:	ca06      	ldmia	r2, {r1, r2}
 800e582:	481c      	ldr	r0, [pc, #112]	; (800e5f4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800e584:	f7f2 ff8b 	bl	800149e <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800e588:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7f2 ff7a 	bl	8001486 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 800e592:	1d3b      	adds	r3, r7, #4
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d10e      	bne.n	800e5b8 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800e59a:	463b      	mov	r3, r7
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d108      	bne.n	800e5b8 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800e5a6:	4813      	ldr	r0, [pc, #76]	; (800e5f4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800e5a8:	f7f5 fc98 	bl	8003edc <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 800e5ac:	4810      	ldr	r0, [pc, #64]	; (800e5f0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800e5ae:	f7f5 fca2 	bl	8003ef6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800e5b2:	4804      	ldr	r0, [pc, #16]	; (800e5c4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800e5b4:	f7f5 fcac 	bl	8003f10 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 800e5b8:	bf00      	nop
 800e5ba:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd90      	pop	{r4, r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	200002d4 	.word	0x200002d4
 800e5c8:	0801a74c 	.word	0x0801a74c
 800e5cc:	0801a754 	.word	0x0801a754
 800e5d0:	0801a75c 	.word	0x0801a75c
 800e5d4:	0801a764 	.word	0x0801a764
 800e5d8:	0801a76c 	.word	0x0801a76c
 800e5dc:	0801a774 	.word	0x0801a774
 800e5e0:	0801a778 	.word	0x0801a778
 800e5e4:	0801a780 	.word	0x0801a780
 800e5e8:	0801a788 	.word	0x0801a788
 800e5ec:	0801a790 	.word	0x0801a790
 800e5f0:	200002ec 	.word	0x200002ec
 800e5f4:	20000304 	.word	0x20000304

0800e5f8 <_GLOBAL__sub_I__ZN6ParserC2EP5LexerP11Transmitter>:
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e600:	2001      	movs	r0, #1
 800e602:	f7ff fe1d 	bl	800e240 <_Z41__static_initialization_and_destruction_0ii>
 800e606:	bd80      	pop	{r7, pc}

0800e608 <_GLOBAL__sub_D__ZN6ParserC2EP5LexerP11Transmitter>:
 800e608:	b580      	push	{r7, lr}
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e610:	2000      	movs	r0, #0
 800e612:	f7ff fe15 	bl	800e240 <_Z41__static_initialization_and_destruction_0ii>
 800e616:	bd80      	pop	{r7, pc}

0800e618 <_ZN6SourceC1EP20__UART_HandleTypeDef>:

#ifdef TESTS
static std::ifstream indata{};
#endif

Source::Source(UART_HandleTypeDef* huart)
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
 800e622:	4a09      	ldr	r2, [pc, #36]	; (800e648 <_ZN6SourceC1EP20__UART_HandleTypeDef+0x30>)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	601a      	str	r2, [r3, #0]
{
	line = 1;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2201      	movs	r2, #1
 800e62c:	605a      	str	r2, [r3, #4]
	position = 0;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2200      	movs	r2, #0
 800e632:	609a      	str	r2, [r3, #8]
	this->huart = huart;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	683a      	ldr	r2, [r7, #0]
 800e638:	60da      	str	r2, [r3, #12]
#ifdef TESTS
    indata.open("code.txt");
#endif
}
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	4618      	mov	r0, r3
 800e63e:	370c      	adds	r7, #12
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr
 800e648:	0801aacc 	.word	0x0801aacc

0800e64c <_ZN6SourceD1Ev>:

Source::~Source()
 800e64c:	b480      	push	{r7}
 800e64e:	b083      	sub	sp, #12
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	4a04      	ldr	r2, [pc, #16]	; (800e668 <_ZN6SourceD1Ev+0x1c>)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	601a      	str	r2, [r3, #0]
{
#ifdef TESTS
    indata.close();
#endif
}
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	4618      	mov	r0, r3
 800e65e:	370c      	adds	r7, #12
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr
 800e668:	0801aacc 	.word	0x0801aacc

0800e66c <_ZN6SourceD0Ev>:
Source::~Source()
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
}
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7ff ffe9 	bl	800e64c <_ZN6SourceD1Ev>
 800e67a:	2110      	movs	r1, #16
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f008 fb54 	bl	8016d2a <_ZdlPvj>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	4618      	mov	r0, r3
 800e686:	3708      	adds	r7, #8
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <_ZN6Source8get_lineEv>:

int Source::get_line()
{
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
	return line;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	685b      	ldr	r3, [r3, #4]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	370c      	adds	r7, #12
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr

0800e6a4 <_ZN6Source12get_positionEv>:

int Source::get_position()
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
	return position;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	689b      	ldr	r3, [r3, #8]
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <_ZN6Source15update_positionEh>:

// update line and position in line depending on received char
void Source::update_position(uint8_t rx_buffer)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	460b      	mov	r3, r1
 800e6c6:	70fb      	strb	r3, [r7, #3]
	if (rx_buffer == '\n')
 800e6c8:	78fb      	ldrb	r3, [r7, #3]
 800e6ca:	2b0a      	cmp	r3, #10
 800e6cc:	d108      	bne.n	800e6e0 <_ZN6Source15update_positionEh+0x24>
	{
		++line;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	1c5a      	adds	r2, r3, #1
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	605a      	str	r2, [r3, #4]
		position = 0;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	609a      	str	r2, [r3, #8]
	}
	else
	{
		++position;
	}
}
 800e6de:	e004      	b.n	800e6ea <_ZN6Source15update_positionEh+0x2e>
		++position;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	689b      	ldr	r3, [r3, #8]
 800e6e4:	1c5a      	adds	r2, r3, #1
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	609a      	str	r2, [r3, #8]
}
 800e6ea:	bf00      	nop
 800e6ec:	370c      	adds	r7, #12
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr
	...

0800e6f8 <_ZN6Source17receive_code_charEv>:

// receive char with UART in blocking mode
char Source::receive_code_char()
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
    static uint8_t rx_buffer;
#ifndef TESTS
    static uint8_t tx_buf;
    tx_buf = 'c';
 800e700:	4b0e      	ldr	r3, [pc, #56]	; (800e73c <_ZN6Source17receive_code_charEv+0x44>)
 800e702:	2263      	movs	r2, #99	; 0x63
 800e704:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, &tx_buf, 1, 100);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	68d8      	ldr	r0, [r3, #12]
 800e70a:	2364      	movs	r3, #100	; 0x64
 800e70c:	2201      	movs	r2, #1
 800e70e:	490b      	ldr	r1, [pc, #44]	; (800e73c <_ZN6Source17receive_code_charEv+0x44>)
 800e710:	f007 fb88 	bl	8015e24 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, &rx_buffer, 1, -1);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	68d8      	ldr	r0, [r3, #12]
 800e718:	f04f 33ff 	mov.w	r3, #4294967295
 800e71c:	2201      	movs	r2, #1
 800e71e:	4908      	ldr	r1, [pc, #32]	; (800e740 <_ZN6Source17receive_code_charEv+0x48>)
 800e720:	f007 fc13 	bl	8015f4a <HAL_UART_Receive>
	rx_buffer = (uint8_t)indata.get();
    std::cout << rx_buffer << '\n';
    if(rx_buffer == 255)
        rx_buffer = '\0';
#endif
	update_position(rx_buffer);
 800e724:	4b06      	ldr	r3, [pc, #24]	; (800e740 <_ZN6Source17receive_code_charEv+0x48>)
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	4619      	mov	r1, r3
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f7ff ffc6 	bl	800e6bc <_ZN6Source15update_positionEh>

	return rx_buffer;
 800e730:	4b03      	ldr	r3, [pc, #12]	; (800e740 <_ZN6Source17receive_code_charEv+0x48>)
 800e732:	781b      	ldrb	r3, [r3, #0]
}
 800e734:	4618      	mov	r0, r3
 800e736:	3708      	adds	r7, #8
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	2000031d 	.word	0x2000031d
 800e740:	2000031c 	.word	0x2000031c

0800e744 <_ZN4BodyD1Ev>:
#include <Statement.h>

Body::~Body()
 800e744:	b590      	push	{r4, r7, lr}
 800e746:	b087      	sub	sp, #28
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
{
	for (Statement *s : statements)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	617b      	str	r3, [r7, #20]
 800e750:	6978      	ldr	r0, [r7, #20]
 800e752:	f7fe f973 	bl	800ca3c <_ZNSt6vectorIP9StatementSaIS1_EE5beginEv>
 800e756:	4603      	mov	r3, r0
 800e758:	60fb      	str	r3, [r7, #12]
 800e75a:	6978      	ldr	r0, [r7, #20]
 800e75c:	f7fd fd80 	bl	800c260 <_ZNSt6vectorIP9StatementSaIS1_EE3endEv>
 800e760:	4603      	mov	r3, r0
 800e762:	60bb      	str	r3, [r7, #8]
 800e764:	f107 0208 	add.w	r2, r7, #8
 800e768:	f107 030c 	add.w	r3, r7, #12
 800e76c:	4611      	mov	r1, r2
 800e76e:	4618      	mov	r0, r3
 800e770:	f000 f9db 	bl	800eb2a <_ZN9__gnu_cxxneIPP9StatementSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d017      	beq.n	800e7aa <_ZN4BodyD1Ev+0x66>
 800e77a:	f107 030c 	add.w	r3, r7, #12
 800e77e:	4618      	mov	r0, r3
 800e780:	f7fe f9cd 	bl	800cb1e <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEdeEv>
 800e784:	4603      	mov	r3, r0
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	613b      	str	r3, [r7, #16]
	{
		delete s;
 800e78a:	693c      	ldr	r4, [r7, #16]
 800e78c:	2c00      	cmp	r4, #0
 800e78e:	d006      	beq.n	800e79e <_ZN4BodyD1Ev+0x5a>
 800e790:	4620      	mov	r0, r4
 800e792:	f000 f813 	bl	800e7bc <_ZN9StatementD1Ev>
 800e796:	210c      	movs	r1, #12
 800e798:	4620      	mov	r0, r4
 800e79a:	f008 fac6 	bl	8016d2a <_ZdlPvj>
	for (Statement *s : statements)
 800e79e:	f107 030c 	add.w	r3, r7, #12
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f000 f9d9 	bl	800eb5a <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEppEv>
 800e7a8:	e7dc      	b.n	800e764 <_ZN4BodyD1Ev+0x20>
Body::~Body()
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f000 f9a1 	bl	800eaf4 <_ZNSt6vectorIP9StatementSaIS1_EED1Ev>
	}
}
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	371c      	adds	r7, #28
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd90      	pop	{r4, r7, pc}

0800e7bc <_ZN9StatementD1Ev>:

Statement::~Statement()
 800e7bc:	b590      	push	{r4, r7, lr}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
{
	switch (type)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	2b04      	cmp	r3, #4
 800e7ca:	d86b      	bhi.n	800e8a4 <_ZN9StatementD1Ev+0xe8>
 800e7cc:	a201      	add	r2, pc, #4	; (adr r2, 800e7d4 <_ZN9StatementD1Ev+0x18>)
 800e7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d2:	bf00      	nop
 800e7d4:	0800e7e9 	.word	0x0800e7e9
 800e7d8:	0800e80b 	.word	0x0800e80b
 800e7dc:	0800e82d 	.word	0x0800e82d
 800e7e0:	0800e84f 	.word	0x0800e84f
 800e7e4:	0800e871 	.word	0x0800e871
	{
	case STATEMENT_ASSIGNMENT:
		delete std::get<Assignment*>(content);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	3304      	adds	r3, #4
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f000 f9c4 	bl	800eb7a <_ZSt3getIP10AssignmentJS1_P13Function_callP11Method_callP15While_statementP12If_statementEERT_RSt7variantIJDpT0_EE>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	681c      	ldr	r4, [r3, #0]
 800e7f6:	2c00      	cmp	r4, #0
 800e7f8:	d04b      	beq.n	800e892 <_ZN9StatementD1Ev+0xd6>
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f000 f942 	bl	800ea84 <_ZN10AssignmentD1Ev>
 800e800:	2108      	movs	r1, #8
 800e802:	4620      	mov	r0, r4
 800e804:	f008 fa91 	bl	8016d2a <_ZdlPvj>
		break;
 800e808:	e043      	b.n	800e892 <_ZN9StatementD1Ev+0xd6>
	case STATEMENT_FUNCTION_CALL:
		delete std::get<Function_call*>(content);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	3304      	adds	r3, #4
 800e80e:	4618      	mov	r0, r3
 800e810:	f000 f9bf 	bl	800eb92 <_ZSt3getIP13Function_callJP10AssignmentS1_P11Method_callP15While_statementP12If_statementEERT_RSt7variantIJDpT0_EE>
 800e814:	4603      	mov	r3, r0
 800e816:	681c      	ldr	r4, [r3, #0]
 800e818:	2c00      	cmp	r4, #0
 800e81a:	d03c      	beq.n	800e896 <_ZN9StatementD1Ev+0xda>
 800e81c:	4620      	mov	r0, r4
 800e81e:	f000 f8d7 	bl	800e9d0 <_ZN13Function_callD1Ev>
 800e822:	2124      	movs	r1, #36	; 0x24
 800e824:	4620      	mov	r0, r4
 800e826:	f008 fa80 	bl	8016d2a <_ZdlPvj>
		break;
 800e82a:	e034      	b.n	800e896 <_ZN9StatementD1Ev+0xda>
	case STATEMENT_METHOD_CALL:
		delete std::get<Method_call*>(content);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	3304      	adds	r3, #4
 800e830:	4618      	mov	r0, r3
 800e832:	f000 f9ba 	bl	800ebaa <_ZSt3getIP11Method_callJP10AssignmentP13Function_callS1_P15While_statementP12If_statementEERT_RSt7variantIJDpT0_EE>
 800e836:	4603      	mov	r3, r0
 800e838:	681c      	ldr	r4, [r3, #0]
 800e83a:	2c00      	cmp	r4, #0
 800e83c:	d02d      	beq.n	800e89a <_ZN9StatementD1Ev+0xde>
 800e83e:	4620      	mov	r0, r4
 800e840:	f000 f908 	bl	800ea54 <_ZN11Method_callD1Ev>
 800e844:	211c      	movs	r1, #28
 800e846:	4620      	mov	r0, r4
 800e848:	f008 fa6f 	bl	8016d2a <_ZdlPvj>
		break;
 800e84c:	e025      	b.n	800e89a <_ZN9StatementD1Ev+0xde>
	case STATEMENT_WHILE:
		delete std::get<While_statement*>(content);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	3304      	adds	r3, #4
 800e852:	4618      	mov	r0, r3
 800e854:	f000 f9b5 	bl	800ebc2 <_ZSt3getIP15While_statementJP10AssignmentP13Function_callP11Method_callS1_P12If_statementEERT_RSt7variantIJDpT0_EE>
 800e858:	4603      	mov	r3, r0
 800e85a:	681c      	ldr	r4, [r3, #0]
 800e85c:	2c00      	cmp	r4, #0
 800e85e:	d01e      	beq.n	800e89e <_ZN9StatementD1Ev+0xe2>
 800e860:	4620      	mov	r0, r4
 800e862:	f000 f825 	bl	800e8b0 <_ZN15While_statementD1Ev>
 800e866:	2108      	movs	r1, #8
 800e868:	4620      	mov	r0, r4
 800e86a:	f008 fa5e 	bl	8016d2a <_ZdlPvj>
		break;
 800e86e:	e016      	b.n	800e89e <_ZN9StatementD1Ev+0xe2>
	case STATEMENT_IF:
		delete std::get<If_statement*>(content);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	3304      	adds	r3, #4
 800e874:	4618      	mov	r0, r3
 800e876:	f000 f9b0 	bl	800ebda <_ZSt3getIP12If_statementJP10AssignmentP13Function_callP11Method_callP15While_statementS1_EERT_RSt7variantIJDpT0_EE>
 800e87a:	4603      	mov	r3, r0
 800e87c:	681c      	ldr	r4, [r3, #0]
 800e87e:	2c00      	cmp	r4, #0
 800e880:	d00f      	beq.n	800e8a2 <_ZN9StatementD1Ev+0xe6>
 800e882:	4620      	mov	r0, r4
 800e884:	f000 f833 	bl	800e8ee <_ZN12If_statementD1Ev>
 800e888:	2118      	movs	r1, #24
 800e88a:	4620      	mov	r0, r4
 800e88c:	f008 fa4d 	bl	8016d2a <_ZdlPvj>
		break;
 800e890:	e007      	b.n	800e8a2 <_ZN9StatementD1Ev+0xe6>
		break;
 800e892:	bf00      	nop
 800e894:	e006      	b.n	800e8a4 <_ZN9StatementD1Ev+0xe8>
		break;
 800e896:	bf00      	nop
 800e898:	e004      	b.n	800e8a4 <_ZN9StatementD1Ev+0xe8>
		break;
 800e89a:	bf00      	nop
 800e89c:	e002      	b.n	800e8a4 <_ZN9StatementD1Ev+0xe8>
		break;
 800e89e:	bf00      	nop
 800e8a0:	e000      	b.n	800e8a4 <_ZN9StatementD1Ev+0xe8>
		break;
 800e8a2:	bf00      	nop
	}
}
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	370c      	adds	r7, #12
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd90      	pop	{r4, r7, pc}
 800e8ae:	bf00      	nop

0800e8b0 <_ZN15While_statementD1Ev>:

While_statement::~While_statement()
 800e8b0:	b590      	push	{r4, r7, lr}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
{
	delete condition;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681c      	ldr	r4, [r3, #0]
 800e8bc:	2c00      	cmp	r4, #0
 800e8be:	d006      	beq.n	800e8ce <_ZN15While_statementD1Ev+0x1e>
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	f7f5 ff10 	bl	80046e6 <_ZN10ExpressionD1Ev>
 800e8c6:	210c      	movs	r1, #12
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	f008 fa2e 	bl	8016d2a <_ZdlPvj>
	delete while_body;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	685c      	ldr	r4, [r3, #4]
 800e8d2:	2c00      	cmp	r4, #0
 800e8d4:	d006      	beq.n	800e8e4 <_ZN15While_statementD1Ev+0x34>
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	f7ff ff34 	bl	800e744 <_ZN4BodyD1Ev>
 800e8dc:	210c      	movs	r1, #12
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f008 fa23 	bl	8016d2a <_ZdlPvj>
}
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	370c      	adds	r7, #12
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd90      	pop	{r4, r7, pc}

0800e8ee <_ZN12If_statementD1Ev>:

If_statement::~If_statement()
 800e8ee:	b590      	push	{r4, r7, lr}
 800e8f0:	b08b      	sub	sp, #44	; 0x2c
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
{
	for (Expression *e : conditions)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	627b      	str	r3, [r7, #36]	; 0x24
 800e8fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8fc:	f7fd fe6a 	bl	800c5d4 <_ZNSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 800e900:	4603      	mov	r3, r0
 800e902:	617b      	str	r3, [r7, #20]
 800e904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e906:	f7fd f993 	bl	800bc30 <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800e90a:	4603      	mov	r3, r0
 800e90c:	613b      	str	r3, [r7, #16]
 800e90e:	f107 0210 	add.w	r2, r7, #16
 800e912:	f107 0314 	add.w	r3, r7, #20
 800e916:	4611      	mov	r1, r2
 800e918:	4618      	mov	r0, r3
 800e91a:	f000 f9a0 	bl	800ec5e <_ZN9__gnu_cxxneIPP10ExpressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d017      	beq.n	800e954 <_ZN12If_statementD1Ev+0x66>
 800e924:	f107 0314 	add.w	r3, r7, #20
 800e928:	4618      	mov	r0, r3
 800e92a:	f7fd fec4 	bl	800c6b6 <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEdeEv>
 800e92e:	4603      	mov	r3, r0
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	61bb      	str	r3, [r7, #24]
	{
		delete e;
 800e934:	69bc      	ldr	r4, [r7, #24]
 800e936:	2c00      	cmp	r4, #0
 800e938:	d006      	beq.n	800e948 <_ZN12If_statementD1Ev+0x5a>
 800e93a:	4620      	mov	r0, r4
 800e93c:	f7f5 fed3 	bl	80046e6 <_ZN10ExpressionD1Ev>
 800e940:	210c      	movs	r1, #12
 800e942:	4620      	mov	r0, r4
 800e944:	f008 f9f1 	bl	8016d2a <_ZdlPvj>
	for (Expression *e : conditions)
 800e948:	f107 0314 	add.w	r3, r7, #20
 800e94c:	4618      	mov	r0, r3
 800e94e:	f000 f99e 	bl	800ec8e <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEppEv>
 800e952:	e7dc      	b.n	800e90e <_ZN12If_statementD1Ev+0x20>
	}

	for (Body *b : if_bodies)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	330c      	adds	r3, #12
 800e958:	623b      	str	r3, [r7, #32]
 800e95a:	6a38      	ldr	r0, [r7, #32]
 800e95c:	f7fd ff24 	bl	800c7a8 <_ZNSt6vectorIP4BodySaIS1_EE5beginEv>
 800e960:	4603      	mov	r3, r0
 800e962:	60fb      	str	r3, [r7, #12]
 800e964:	6a38      	ldr	r0, [r7, #32]
 800e966:	f7fd fa2a 	bl	800bdbe <_ZNSt6vectorIP4BodySaIS1_EE3endEv>
 800e96a:	4603      	mov	r3, r0
 800e96c:	60bb      	str	r3, [r7, #8]
 800e96e:	f107 0208 	add.w	r2, r7, #8
 800e972:	f107 030c 	add.w	r3, r7, #12
 800e976:	4611      	mov	r1, r2
 800e978:	4618      	mov	r0, r3
 800e97a:	f000 f998 	bl	800ecae <_ZN9__gnu_cxxneIPP4BodySt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	d017      	beq.n	800e9b4 <_ZN12If_statementD1Ev+0xc6>
 800e984:	f107 030c 	add.w	r3, r7, #12
 800e988:	4618      	mov	r0, r3
 800e98a:	f7fd ff7e 	bl	800c88a <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEdeEv>
 800e98e:	4603      	mov	r3, r0
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	61fb      	str	r3, [r7, #28]
	{
		delete b;
 800e994:	69fc      	ldr	r4, [r7, #28]
 800e996:	2c00      	cmp	r4, #0
 800e998:	d006      	beq.n	800e9a8 <_ZN12If_statementD1Ev+0xba>
 800e99a:	4620      	mov	r0, r4
 800e99c:	f7ff fed2 	bl	800e744 <_ZN4BodyD1Ev>
 800e9a0:	210c      	movs	r1, #12
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f008 f9c1 	bl	8016d2a <_ZdlPvj>
	for (Body *b : if_bodies)
 800e9a8:	f107 030c 	add.w	r3, r7, #12
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f000 f996 	bl	800ecde <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEppEv>
 800e9b2:	e7dc      	b.n	800e96e <_ZN12If_statementD1Ev+0x80>
If_statement::~If_statement()
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	330c      	adds	r3, #12
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f000 f935 	bl	800ec28 <_ZNSt6vectorIP4BodySaIS1_EED1Ev>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f000 f916 	bl	800ebf2 <_ZNSt6vectorIP10ExpressionSaIS1_EED1Ev>
	}
}
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	372c      	adds	r7, #44	; 0x2c
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd90      	pop	{r4, r7, pc}

0800e9d0 <_ZN13Function_callD1Ev>:

Function_call::~Function_call()
 800e9d0:	b590      	push	{r4, r7, lr}
 800e9d2:	b087      	sub	sp, #28
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
{
	for (Expression *e : arguments)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	3318      	adds	r3, #24
 800e9dc:	617b      	str	r3, [r7, #20]
 800e9de:	6978      	ldr	r0, [r7, #20]
 800e9e0:	f7fd fdf8 	bl	800c5d4 <_ZNSt6vectorIP10ExpressionSaIS1_EE5beginEv>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	60fb      	str	r3, [r7, #12]
 800e9e8:	6978      	ldr	r0, [r7, #20]
 800e9ea:	f7fd f921 	bl	800bc30 <_ZNSt6vectorIP10ExpressionSaIS1_EE3endEv>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	60bb      	str	r3, [r7, #8]
 800e9f2:	f107 0208 	add.w	r2, r7, #8
 800e9f6:	f107 030c 	add.w	r3, r7, #12
 800e9fa:	4611      	mov	r1, r2
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f000 f92e 	bl	800ec5e <_ZN9__gnu_cxxneIPP10ExpressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d017      	beq.n	800ea38 <_ZN13Function_callD1Ev+0x68>
 800ea08:	f107 030c 	add.w	r3, r7, #12
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7fd fe52 	bl	800c6b6 <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEdeEv>
 800ea12:	4603      	mov	r3, r0
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	613b      	str	r3, [r7, #16]
	{
		delete e;
 800ea18:	693c      	ldr	r4, [r7, #16]
 800ea1a:	2c00      	cmp	r4, #0
 800ea1c:	d006      	beq.n	800ea2c <_ZN13Function_callD1Ev+0x5c>
 800ea1e:	4620      	mov	r0, r4
 800ea20:	f7f5 fe61 	bl	80046e6 <_ZN10ExpressionD1Ev>
 800ea24:	210c      	movs	r1, #12
 800ea26:	4620      	mov	r0, r4
 800ea28:	f008 f97f 	bl	8016d2a <_ZdlPvj>
	for (Expression *e : arguments)
 800ea2c:	f107 030c 	add.w	r3, r7, #12
 800ea30:	4618      	mov	r0, r3
 800ea32:	f000 f92c 	bl	800ec8e <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEppEv>
 800ea36:	e7dc      	b.n	800e9f2 <_ZN13Function_callD1Ev+0x22>
Function_call::~Function_call()
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	3318      	adds	r3, #24
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f000 f8d8 	bl	800ebf2 <_ZNSt6vectorIP10ExpressionSaIS1_EED1Ev>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	4618      	mov	r0, r3
 800ea46:	f008 fb4a 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	371c      	adds	r7, #28
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd90      	pop	{r4, r7, pc}

0800ea54 <_ZN11Method_callD1Ev>:

Method_call::~Method_call()
 800ea54:	b590      	push	{r4, r7, lr}
 800ea56:	b083      	sub	sp, #12
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
{
	delete call;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	699c      	ldr	r4, [r3, #24]
 800ea60:	2c00      	cmp	r4, #0
 800ea62:	d006      	beq.n	800ea72 <_ZN11Method_callD1Ev+0x1e>
 800ea64:	4620      	mov	r0, r4
 800ea66:	f7ff ffb3 	bl	800e9d0 <_ZN13Function_callD1Ev>
 800ea6a:	2124      	movs	r1, #36	; 0x24
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	f008 f95c 	bl	8016d2a <_ZdlPvj>
Method_call::~Method_call()
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	4618      	mov	r0, r3
 800ea76:	f008 fb32 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	370c      	adds	r7, #12
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd90      	pop	{r4, r7, pc}

0800ea84 <_ZN10AssignmentD1Ev>:

Assignment::~Assignment()
 800ea84:	b590      	push	{r4, r7, lr}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
{
	delete value;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	685c      	ldr	r4, [r3, #4]
 800ea90:	2c00      	cmp	r4, #0
 800ea92:	d006      	beq.n	800eaa2 <_ZN10AssignmentD1Ev+0x1e>
 800ea94:	4620      	mov	r0, r4
 800ea96:	f7f5 fe26 	bl	80046e6 <_ZN10ExpressionD1Ev>
 800ea9a:	210c      	movs	r1, #12
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	f008 f944 	bl	8016d2a <_ZdlPvj>
	delete var;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681c      	ldr	r4, [r3, #0]
 800eaa6:	2c00      	cmp	r4, #0
 800eaa8:	d006      	beq.n	800eab8 <_ZN10AssignmentD1Ev+0x34>
 800eaaa:	4620      	mov	r0, r4
 800eaac:	f000 f809 	bl	800eac2 <_ZN8VariableD1Ev>
 800eab0:	2120      	movs	r1, #32
 800eab2:	4620      	mov	r0, r4
 800eab4:	f008 f939 	bl	8016d2a <_ZdlPvj>
}
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	4618      	mov	r0, r3
 800eabc:	370c      	adds	r7, #12
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd90      	pop	{r4, r7, pc}

0800eac2 <_ZN8VariableD1Ev>:

Variable::~Variable()
 800eac2:	b590      	push	{r4, r7, lr}
 800eac4:	b083      	sub	sp, #12
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
{
	delete index;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	69dc      	ldr	r4, [r3, #28]
 800eace:	2c00      	cmp	r4, #0
 800ead0:	d006      	beq.n	800eae0 <_ZN8VariableD1Ev+0x1e>
 800ead2:	4620      	mov	r0, r4
 800ead4:	f7f5 fe07 	bl	80046e6 <_ZN10ExpressionD1Ev>
 800ead8:	210c      	movs	r1, #12
 800eada:	4620      	mov	r0, r4
 800eadc:	f008 f925 	bl	8016d2a <_ZdlPvj>
Variable::~Variable()
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	3304      	adds	r3, #4
 800eae4:	4618      	mov	r0, r3
 800eae6:	f008 fafa 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	4618      	mov	r0, r3
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd90      	pop	{r4, r7, pc}

0800eaf4 <_ZNSt6vectorIP9StatementSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800eaf4:	b5b0      	push	{r4, r5, r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681c      	ldr	r4, [r3, #0]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fc ff93 	bl	800ba32 <_ZNSt12_Vector_baseIP9StatementSaIS1_EE19_M_get_Tp_allocatorEv>
 800eb0c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800eb0e:	461a      	mov	r2, r3
 800eb10:	4629      	mov	r1, r5
 800eb12:	4620      	mov	r0, r4
 800eb14:	f000 f918 	bl	800ed48 <_ZSt8_DestroyIPP9StatementS1_EvT_S3_RSaIT0_E>
      }
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f000 f8fb 	bl	800ed16 <_ZNSt12_Vector_baseIP9StatementSaIS1_EED1Ev>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	4618      	mov	r0, r3
 800eb24:	3708      	adds	r7, #8
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bdb0      	pop	{r4, r5, r7, pc}

0800eb2a <_ZN9__gnu_cxxneIPP9StatementSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800eb2a:	b590      	push	{r4, r7, lr}
 800eb2c:	b083      	sub	sp, #12
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
 800eb32:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7fd ffce 	bl	800cad6 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	681c      	ldr	r4, [r3, #0]
 800eb3e:	6838      	ldr	r0, [r7, #0]
 800eb40:	f7fd ffc9 	bl	800cad6 <_ZNK9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEE4baseEv>
 800eb44:	4603      	mov	r3, r0
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	429c      	cmp	r4, r3
 800eb4a:	bf14      	ite	ne
 800eb4c:	2301      	movne	r3, #1
 800eb4e:	2300      	moveq	r3, #0
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	4618      	mov	r0, r3
 800eb54:	370c      	adds	r7, #12
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd90      	pop	{r4, r7, pc}

0800eb5a <_ZN9__gnu_cxx17__normal_iteratorIPP9StatementSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800eb5a:	b480      	push	{r7}
 800eb5c:	b083      	sub	sp, #12
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
	++_M_current;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	1d1a      	adds	r2, r3, #4
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	601a      	str	r2, [r3, #0]
	return *this;
 800eb6c:	687b      	ldr	r3, [r7, #4]
      }
 800eb6e:	4618      	mov	r0, r3
 800eb70:	370c      	adds	r7, #12
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr

0800eb7a <_ZSt3getIP10AssignmentJS1_P13Function_callP11Method_callP15While_statementP12If_statementEERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b082      	sub	sp, #8
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f7fc fd70 	bl	800b668 <_ZSt3getILj0EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800eb88:	4603      	mov	r3, r0
    }
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <_ZSt3getIP13Function_callJP10AssignmentS1_P11Method_callP15While_statementP12If_statementEERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b082      	sub	sp, #8
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7fc fc7c 	bl	800b498 <_ZSt3getILj1EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800eba0:	4603      	mov	r3, r0
    }
 800eba2:	4618      	mov	r0, r3
 800eba4:	3708      	adds	r7, #8
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <_ZSt3getIP11Method_callJP10AssignmentP13Function_callS1_P15While_statementP12If_statementEERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b082      	sub	sp, #8
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f7fc fcf6 	bl	800b5a4 <_ZSt3getILj2EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800ebb8:	4603      	mov	r3, r0
    }
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <_ZSt3getIP15While_statementJP10AssignmentP13Function_callP11Method_callS1_P12If_statementEERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b082      	sub	sp, #8
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f7fc fe14 	bl	800b7f8 <_ZSt3getILj3EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800ebd0:	4603      	mov	r3, r0
    }
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3708      	adds	r7, #8
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <_ZSt3getIP12If_statementJP10AssignmentP13Function_callP11Method_callP15While_statementS1_EERT_RSt7variantIJDpT0_EE>:
    constexpr _Tp& get(variant<_Types...>& __v)
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b082      	sub	sp, #8
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f7fc feb2 	bl	800b94c <_ZSt3getILj4EJP10AssignmentP13Function_callP11Method_callP15While_statementP12If_statementEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 800ebe8:	4603      	mov	r3, r0
    }
 800ebea:	4618      	mov	r0, r3
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}

0800ebf2 <_ZNSt6vectorIP10ExpressionSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800ebf2:	b5b0      	push	{r4, r5, r7, lr}
 800ebf4:	b082      	sub	sp, #8
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681c      	ldr	r4, [r3, #0]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7fc fb70 	bl	800b2ea <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE19_M_get_Tp_allocatorEv>
 800ec0a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	4629      	mov	r1, r5
 800ec10:	4620      	mov	r0, r4
 800ec12:	f000 f8cc 	bl	800edae <_ZSt8_DestroyIPP10ExpressionS1_EvT_S3_RSaIT0_E>
      }
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f000 f8af 	bl	800ed7c <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EED1Ev>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	4618      	mov	r0, r3
 800ec22:	3708      	adds	r7, #8
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bdb0      	pop	{r4, r5, r7, pc}

0800ec28 <_ZNSt6vectorIP4BodySaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800ec28:	b5b0      	push	{r4, r5, r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681c      	ldr	r4, [r3, #0]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fc fb93 	bl	800b366 <_ZNSt12_Vector_baseIP4BodySaIS1_EE19_M_get_Tp_allocatorEv>
 800ec40:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ec42:	461a      	mov	r2, r3
 800ec44:	4629      	mov	r1, r5
 800ec46:	4620      	mov	r0, r4
 800ec48:	f000 f8e4 	bl	800ee14 <_ZSt8_DestroyIPP4BodyS1_EvT_S3_RSaIT0_E>
      }
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f000 f8c7 	bl	800ede2 <_ZNSt12_Vector_baseIP4BodySaIS1_EED1Ev>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	4618      	mov	r0, r3
 800ec58:	3708      	adds	r7, #8
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bdb0      	pop	{r4, r5, r7, pc}

0800ec5e <_ZN9__gnu_cxxneIPP10ExpressionSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ec5e:	b590      	push	{r4, r7, lr}
 800ec60:	b083      	sub	sp, #12
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
 800ec66:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f7fd fd00 	bl	800c66e <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	681c      	ldr	r4, [r3, #0]
 800ec72:	6838      	ldr	r0, [r7, #0]
 800ec74:	f7fd fcfb 	bl	800c66e <_ZNK9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEE4baseEv>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	429c      	cmp	r4, r3
 800ec7e:	bf14      	ite	ne
 800ec80:	2301      	movne	r3, #1
 800ec82:	2300      	moveq	r3, #0
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	4618      	mov	r0, r3
 800ec88:	370c      	adds	r7, #12
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd90      	pop	{r4, r7, pc}

0800ec8e <_ZN9__gnu_cxx17__normal_iteratorIPP10ExpressionSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ec8e:	b480      	push	{r7}
 800ec90:	b083      	sub	sp, #12
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	1d1a      	adds	r2, r3, #4
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	601a      	str	r2, [r3, #0]
	return *this;
 800eca0:	687b      	ldr	r3, [r7, #4]
      }
 800eca2:	4618      	mov	r0, r3
 800eca4:	370c      	adds	r7, #12
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr

0800ecae <_ZN9__gnu_cxxneIPP4BodySt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ecae:	b590      	push	{r4, r7, lr}
 800ecb0:	b083      	sub	sp, #12
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
 800ecb6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7fd fdc2 	bl	800c842 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	681c      	ldr	r4, [r3, #0]
 800ecc2:	6838      	ldr	r0, [r7, #0]
 800ecc4:	f7fd fdbd 	bl	800c842 <_ZNK9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEE4baseEv>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	429c      	cmp	r4, r3
 800ecce:	bf14      	ite	ne
 800ecd0:	2301      	movne	r3, #1
 800ecd2:	2300      	moveq	r3, #0
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	370c      	adds	r7, #12
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd90      	pop	{r4, r7, pc}

0800ecde <_ZN9__gnu_cxx17__normal_iteratorIPP4BodySt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ecde:	b480      	push	{r7}
 800ece0:	b083      	sub	sp, #12
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	1d1a      	adds	r2, r3, #4
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	601a      	str	r2, [r3, #0]
	return *this;
 800ecf0:	687b      	ldr	r3, [r7, #4]
      }
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	370c      	adds	r7, #12
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr

0800ecfe <_ZNSt12_Vector_baseIP9StatementSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b082      	sub	sp, #8
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f000 f892 	bl	800ee30 <_ZNSaIP9StatementED1Ev>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3708      	adds	r7, #8
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}

0800ed16 <_ZNSt12_Vector_baseIP9StatementSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800ed16:	b580      	push	{r7, lr}
 800ed18:	b082      	sub	sp, #8
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	689a      	ldr	r2, [r3, #8]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	1ad3      	subs	r3, r2, r3
 800ed2c:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800ed2e:	461a      	mov	r2, r3
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f7fc fe6b 	bl	800ba0c <_ZNSt12_Vector_baseIP9StatementSaIS1_EE13_M_deallocateEPS1_j>
      }
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7ff ffe0 	bl	800ecfe <_ZNSt12_Vector_baseIP9StatementSaIS1_EE12_Vector_implD1Ev>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4618      	mov	r0, r3
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <_ZSt8_DestroyIPP9StatementS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800ed54:	68b9      	ldr	r1, [r7, #8]
 800ed56:	68f8      	ldr	r0, [r7, #12]
 800ed58:	f000 f876 	bl	800ee48 <_ZSt8_DestroyIPP9StatementEvT_S3_>
    }
 800ed5c:	bf00      	nop
 800ed5e:	3710      	adds	r7, #16
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}

0800ed64 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f000 f878 	bl	800ee62 <_ZNSaIP10ExpressionED1Ev>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	4618      	mov	r0, r3
 800ed76:	3708      	adds	r7, #8
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	689a      	ldr	r2, [r3, #8]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800ed94:	461a      	mov	r2, r3
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f7fc fa94 	bl	800b2c4 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE13_M_deallocateEPS1_j>
      }
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7ff ffe0 	bl	800ed64 <_ZNSt12_Vector_baseIP10ExpressionSaIS1_EE12_Vector_implD1Ev>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	4618      	mov	r0, r3
 800eda8:	3708      	adds	r7, #8
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <_ZSt8_DestroyIPP10ExpressionS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800edae:	b580      	push	{r7, lr}
 800edb0:	b084      	sub	sp, #16
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	60f8      	str	r0, [r7, #12]
 800edb6:	60b9      	str	r1, [r7, #8]
 800edb8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800edba:	68b9      	ldr	r1, [r7, #8]
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	f000 f85c 	bl	800ee7a <_ZSt8_DestroyIPP10ExpressionEvT_S3_>
    }
 800edc2:	bf00      	nop
 800edc4:	3710      	adds	r7, #16
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <_ZNSt12_Vector_baseIP4BodySaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800edca:	b580      	push	{r7, lr}
 800edcc:	b082      	sub	sp, #8
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f000 f85e 	bl	800ee94 <_ZNSaIP4BodyED1Ev>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	4618      	mov	r0, r3
 800eddc:	3708      	adds	r7, #8
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}

0800ede2 <_ZNSt12_Vector_baseIP4BodySaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b082      	sub	sp, #8
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	689a      	ldr	r2, [r3, #8]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	1ad3      	subs	r3, r2, r3
 800edf8:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800edfa:	461a      	mov	r2, r3
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7fc fa9f 	bl	800b340 <_ZNSt12_Vector_baseIP4BodySaIS1_EE13_M_deallocateEPS1_j>
      }
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7ff ffe0 	bl	800edca <_ZNSt12_Vector_baseIP4BodySaIS1_EE12_Vector_implD1Ev>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <_ZSt8_DestroyIPP4BodyS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b084      	sub	sp, #16
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	60f8      	str	r0, [r7, #12]
 800ee1c:	60b9      	str	r1, [r7, #8]
 800ee1e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800ee20:	68b9      	ldr	r1, [r7, #8]
 800ee22:	68f8      	ldr	r0, [r7, #12]
 800ee24:	f000 f842 	bl	800eeac <_ZSt8_DestroyIPP4BodyEvT_S3_>
    }
 800ee28:	bf00      	nop
 800ee2a:	3710      	adds	r7, #16
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}

0800ee30 <_ZNSaIP9StatementED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b082      	sub	sp, #8
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 f844 	bl	800eec6 <_ZN9__gnu_cxx13new_allocatorIP9StatementED1Ev>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	4618      	mov	r0, r3
 800ee42:	3708      	adds	r7, #8
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <_ZSt8_DestroyIPP9StatementEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800ee52:	6839      	ldr	r1, [r7, #0]
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f000 f841 	bl	800eedc <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9StatementEEvT_S5_>
    }
 800ee5a:	bf00      	nop
 800ee5c:	3708      	adds	r7, #8
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}

0800ee62 <_ZNSaIP10ExpressionED1Ev>:
 800ee62:	b580      	push	{r7, lr}
 800ee64:	b082      	sub	sp, #8
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 f841 	bl	800eef2 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionED1Ev>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	4618      	mov	r0, r3
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}

0800ee7a <_ZSt8_DestroyIPP10ExpressionEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ee7a:	b580      	push	{r7, lr}
 800ee7c:	b082      	sub	sp, #8
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
 800ee82:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800ee84:	6839      	ldr	r1, [r7, #0]
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f000 f83e 	bl	800ef08 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10ExpressionEEvT_S5_>
    }
 800ee8c:	bf00      	nop
 800ee8e:	3708      	adds	r7, #8
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <_ZNSaIP4BodyED1Ev>:
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 f83e 	bl	800ef1e <_ZN9__gnu_cxx13new_allocatorIP4BodyED1Ev>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4618      	mov	r0, r3
 800eea6:	3708      	adds	r7, #8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <_ZSt8_DestroyIPP4BodyEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800eeb6:	6839      	ldr	r1, [r7, #0]
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 f83b 	bl	800ef34 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP4BodyEEvT_S5_>
    }
 800eebe:	bf00      	nop
 800eec0:	3708      	adds	r7, #8
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <_ZN9__gnu_cxx13new_allocatorIP9StatementED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800eec6:	b480      	push	{r7}
 800eec8:	b083      	sub	sp, #12
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	4618      	mov	r0, r3
 800eed2:	370c      	adds	r7, #12
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9StatementEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800eedc:	b480      	push	{r7}
 800eede:	b083      	sub	sp, #12
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
 800eee6:	bf00      	nop
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr

0800eef2 <_ZN9__gnu_cxx13new_allocatorIP10ExpressionED1Ev>:
 800eef2:	b480      	push	{r7}
 800eef4:	b083      	sub	sp, #12
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4618      	mov	r0, r3
 800eefe:	370c      	adds	r7, #12
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr

0800ef08 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10ExpressionEEvT_S5_>:
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
 800ef12:	bf00      	nop
 800ef14:	370c      	adds	r7, #12
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr

0800ef1e <_ZN9__gnu_cxx13new_allocatorIP4BodyED1Ev>:
 800ef1e:	b480      	push	{r7}
 800ef20:	b083      	sub	sp, #12
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4618      	mov	r0, r3
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP4BodyEEvT_S5_>:
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
 800ef3e:	bf00      	nop
 800ef40:	370c      	adds	r7, #12
 800ef42:	46bd      	mov	sp, r7
 800ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef48:	4770      	bx	lr
	...

0800ef4c <_Z41__static_initialization_and_destruction_0ii>:
 800ef4c:	b590      	push	{r4, r7, lr}
 800ef4e:	b0e7      	sub	sp, #412	; 0x19c
 800ef50:	af02      	add	r7, sp, #8
 800ef52:	1d3b      	adds	r3, r7, #4
 800ef54:	6018      	str	r0, [r3, #0]
 800ef56:	463b      	mov	r3, r7
 800ef58:	6019      	str	r1, [r3, #0]
 800ef5a:	1d3b      	adds	r3, r7, #4
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	f040 819d 	bne.w	800f29e <_Z41__static_initialization_and_destruction_0ii+0x352>
 800ef64:	463b      	mov	r3, r7
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	f040 8196 	bne.w	800f29e <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 800ef72:	f107 0314 	add.w	r3, r7, #20
 800ef76:	4618      	mov	r0, r3
 800ef78:	2322      	movs	r3, #34	; 0x22
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	f008 fa9d 	bl	80174bc <memset>
 800ef82:	f107 0314 	add.w	r3, r7, #20
 800ef86:	223a      	movs	r2, #58	; 0x3a
 800ef88:	701a      	strb	r2, [r3, #0]
 800ef8a:	f107 0314 	add.w	r3, r7, #20
 800ef8e:	2201      	movs	r2, #1
 800ef90:	705a      	strb	r2, [r3, #1]
 800ef92:	f107 0314 	add.w	r3, r7, #20
 800ef96:	220a      	movs	r2, #10
 800ef98:	709a      	strb	r2, [r3, #2]
 800ef9a:	f107 0314 	add.w	r3, r7, #20
 800ef9e:	220a      	movs	r2, #10
 800efa0:	70da      	strb	r2, [r3, #3]
 800efa2:	f107 0314 	add.w	r3, r7, #20
 800efa6:	222c      	movs	r2, #44	; 0x2c
 800efa8:	711a      	strb	r2, [r3, #4]
 800efaa:	f107 0314 	add.w	r3, r7, #20
 800efae:	220c      	movs	r2, #12
 800efb0:	715a      	strb	r2, [r3, #5]
 800efb2:	f107 0314 	add.w	r3, r7, #20
 800efb6:	222e      	movs	r2, #46	; 0x2e
 800efb8:	719a      	strb	r2, [r3, #6]
 800efba:	f107 0314 	add.w	r3, r7, #20
 800efbe:	220b      	movs	r2, #11
 800efc0:	71da      	strb	r2, [r3, #7]
 800efc2:	f107 0314 	add.w	r3, r7, #20
 800efc6:	225b      	movs	r2, #91	; 0x5b
 800efc8:	721a      	strb	r2, [r3, #8]
 800efca:	f107 0314 	add.w	r3, r7, #20
 800efce:	220d      	movs	r2, #13
 800efd0:	725a      	strb	r2, [r3, #9]
 800efd2:	f107 0314 	add.w	r3, r7, #20
 800efd6:	225d      	movs	r2, #93	; 0x5d
 800efd8:	729a      	strb	r2, [r3, #10]
 800efda:	f107 0314 	add.w	r3, r7, #20
 800efde:	220e      	movs	r2, #14
 800efe0:	72da      	strb	r2, [r3, #11]
 800efe2:	f107 0314 	add.w	r3, r7, #20
 800efe6:	227c      	movs	r2, #124	; 0x7c
 800efe8:	731a      	strb	r2, [r3, #12]
 800efea:	f107 0314 	add.w	r3, r7, #20
 800efee:	2215      	movs	r2, #21
 800eff0:	735a      	strb	r2, [r3, #13]
 800eff2:	f107 0314 	add.w	r3, r7, #20
 800eff6:	2226      	movs	r2, #38	; 0x26
 800eff8:	739a      	strb	r2, [r3, #14]
 800effa:	f107 0314 	add.w	r3, r7, #20
 800effe:	2216      	movs	r2, #22
 800f000:	73da      	strb	r2, [r3, #15]
 800f002:	f107 0314 	add.w	r3, r7, #20
 800f006:	222b      	movs	r2, #43	; 0x2b
 800f008:	741a      	strb	r2, [r3, #16]
 800f00a:	f107 0314 	add.w	r3, r7, #20
 800f00e:	221f      	movs	r2, #31
 800f010:	745a      	strb	r2, [r3, #17]
 800f012:	f107 0314 	add.w	r3, r7, #20
 800f016:	222d      	movs	r2, #45	; 0x2d
 800f018:	749a      	strb	r2, [r3, #18]
 800f01a:	f107 0314 	add.w	r3, r7, #20
 800f01e:	2220      	movs	r2, #32
 800f020:	74da      	strb	r2, [r3, #19]
 800f022:	f107 0314 	add.w	r3, r7, #20
 800f026:	222a      	movs	r2, #42	; 0x2a
 800f028:	751a      	strb	r2, [r3, #20]
 800f02a:	f107 0314 	add.w	r3, r7, #20
 800f02e:	2221      	movs	r2, #33	; 0x21
 800f030:	755a      	strb	r2, [r3, #21]
 800f032:	f107 0314 	add.w	r3, r7, #20
 800f036:	222f      	movs	r2, #47	; 0x2f
 800f038:	759a      	strb	r2, [r3, #22]
 800f03a:	f107 0314 	add.w	r3, r7, #20
 800f03e:	2222      	movs	r2, #34	; 0x22
 800f040:	75da      	strb	r2, [r3, #23]
 800f042:	f107 0314 	add.w	r3, r7, #20
 800f046:	225e      	movs	r2, #94	; 0x5e
 800f048:	761a      	strb	r2, [r3, #24]
 800f04a:	f107 0314 	add.w	r3, r7, #20
 800f04e:	2223      	movs	r2, #35	; 0x23
 800f050:	765a      	strb	r2, [r3, #25]
 800f052:	f107 0314 	add.w	r3, r7, #20
 800f056:	2225      	movs	r2, #37	; 0x25
 800f058:	769a      	strb	r2, [r3, #26]
 800f05a:	f107 0314 	add.w	r3, r7, #20
 800f05e:	2224      	movs	r2, #36	; 0x24
 800f060:	76da      	strb	r2, [r3, #27]
 800f062:	f107 0314 	add.w	r3, r7, #20
 800f066:	2228      	movs	r2, #40	; 0x28
 800f068:	771a      	strb	r2, [r3, #28]
 800f06a:	f107 0314 	add.w	r3, r7, #20
 800f06e:	2226      	movs	r2, #38	; 0x26
 800f070:	775a      	strb	r2, [r3, #29]
 800f072:	f107 0314 	add.w	r3, r7, #20
 800f076:	2229      	movs	r2, #41	; 0x29
 800f078:	779a      	strb	r2, [r3, #30]
 800f07a:	f107 0314 	add.w	r3, r7, #20
 800f07e:	2227      	movs	r2, #39	; 0x27
 800f080:	77da      	strb	r2, [r3, #31]
 800f082:	f107 0314 	add.w	r3, r7, #20
 800f086:	2225      	movs	r2, #37	; 0x25
 800f088:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800f08c:	f107 030c 	add.w	r3, r7, #12
 800f090:	f107 0214 	add.w	r2, r7, #20
 800f094:	601a      	str	r2, [r3, #0]
 800f096:	f107 030c 	add.w	r3, r7, #12
 800f09a:	2211      	movs	r2, #17
 800f09c:	605a      	str	r2, [r3, #4]
 800f09e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7f2 f8f6 	bl	8001294 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 800f0a8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f0ac:	f107 020c 	add.w	r2, r7, #12
 800f0b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f0b4:	9300      	str	r3, [sp, #0]
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	ca06      	ldmia	r2, {r1, r2}
 800f0ba:	4885      	ldr	r0, [pc, #532]	; (800f2d0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800f0bc:	f7f2 f902 	bl	80012c4 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800f0c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7f2 f8f1 	bl	80012ac <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 800f0ca:	2305      	movs	r3, #5
 800f0cc:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 800f0d0:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 800f0d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f0d8:	497e      	ldr	r1, [pc, #504]	; (800f2d4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7f1 ffde 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 800f0e0:	2306      	movs	r3, #6
 800f0e2:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 800f0e6:	f207 1263 	addw	r2, r7, #355	; 0x163
 800f0ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f0ee:	331c      	adds	r3, #28
 800f0f0:	4979      	ldr	r1, [pc, #484]	; (800f2d8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7f1 fffa 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 800f0f8:	2307      	movs	r3, #7
 800f0fa:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 800f0fe:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800f102:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f106:	3338      	adds	r3, #56	; 0x38
 800f108:	4974      	ldr	r1, [pc, #464]	; (800f2dc <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7f1 ffee 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 800f110:	2308      	movs	r3, #8
 800f112:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 800f116:	f207 1265 	addw	r2, r7, #357	; 0x165
 800f11a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f11e:	3354      	adds	r3, #84	; 0x54
 800f120:	496f      	ldr	r1, [pc, #444]	; (800f2e0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800f122:	4618      	mov	r0, r3
 800f124:	f7f1 ffba 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 800f128:	2309      	movs	r3, #9
 800f12a:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800f12e:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 800f132:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f136:	3370      	adds	r3, #112	; 0x70
 800f138:	496a      	ldr	r1, [pc, #424]	; (800f2e4 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800f13a:	4618      	mov	r0, r3
 800f13c:	f7f1 fffe 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 800f140:	2310      	movs	r3, #16
 800f142:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 800f146:	f207 1267 	addw	r2, r7, #359	; 0x167
 800f14a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f14e:	338c      	adds	r3, #140	; 0x8c
 800f150:	4965      	ldr	r1, [pc, #404]	; (800f2e8 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800f152:	4618      	mov	r0, r3
 800f154:	f7f2 f81a 	bl	800118c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 800f158:	2311      	movs	r3, #17
 800f15a:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800f15e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800f162:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f166:	33a8      	adds	r3, #168	; 0xa8
 800f168:	4960      	ldr	r1, [pc, #384]	; (800f2ec <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7f1 ffe6 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 800f170:	2312      	movs	r3, #18
 800f172:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 800f176:	f207 1269 	addw	r2, r7, #361	; 0x169
 800f17a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f17e:	33c4      	adds	r3, #196	; 0xc4
 800f180:	495b      	ldr	r1, [pc, #364]	; (800f2f0 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800f182:	4618      	mov	r0, r3
 800f184:	f7f1 ff8a 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 800f188:	2313      	movs	r3, #19
 800f18a:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800f18e:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800f192:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f196:	33e0      	adds	r3, #224	; 0xe0
 800f198:	4956      	ldr	r1, [pc, #344]	; (800f2f4 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7f1 ffa6 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 800f1a0:	2314      	movs	r3, #20
 800f1a2:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 800f1a6:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800f1aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f1ae:	33fc      	adds	r3, #252	; 0xfc
 800f1b0:	4951      	ldr	r1, [pc, #324]	; (800f2f8 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7f2 f812 	bl	80011dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 800f1b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f1bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f1c0:	601a      	str	r2, [r3, #0]
 800f1c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f1c6:	220a      	movs	r2, #10
 800f1c8:	605a      	str	r2, [r3, #4]
 800f1ca:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7f2 f905 	bl	80013de <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 800f1d4:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800f1d8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f1dc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	ca06      	ldmia	r2, {r1, r2}
 800f1e6:	4845      	ldr	r0, [pc, #276]	; (800f2fc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800f1e8:	f7f2 f911 	bl	800140e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 800f1ec:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7f2 f900 	bl	80013f6 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800f1f6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800f1fa:	f504 748c 	add.w	r4, r4, #280	; 0x118
 800f1fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f202:	429c      	cmp	r4, r3
 800f204:	d004      	beq.n	800f210 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 800f206:	3c1c      	subs	r4, #28
 800f208:	4620      	mov	r0, r4
 800f20a:	f7f1 ff3a 	bl	8001082 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 800f20e:	e7f6      	b.n	800f1fe <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 800f210:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800f214:	2200      	movs	r2, #0
 800f216:	601a      	str	r2, [r3, #0]
 800f218:	605a      	str	r2, [r3, #4]
 800f21a:	609a      	str	r2, [r3, #8]
 800f21c:	233c      	movs	r3, #60	; 0x3c
 800f21e:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 800f222:	231b      	movs	r3, #27
 800f224:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 800f228:	231c      	movs	r3, #28
 800f22a:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800f22e:	233e      	movs	r3, #62	; 0x3e
 800f230:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 800f234:	2319      	movs	r3, #25
 800f236:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800f23a:	231a      	movs	r3, #26
 800f23c:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 800f240:	233d      	movs	r3, #61	; 0x3d
 800f242:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 800f246:	2318      	movs	r3, #24
 800f248:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 800f24c:	231d      	movs	r3, #29
 800f24e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800f252:	2321      	movs	r3, #33	; 0x21
 800f254:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 800f258:	2317      	movs	r3, #23
 800f25a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800f25e:	231e      	movs	r3, #30
 800f260:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 800f264:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800f268:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800f26c:	2304      	movs	r3, #4
 800f26e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800f272:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800f276:	4618      	mov	r0, r3
 800f278:	f7f2 f8f9 	bl	800146e <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 800f27c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800f280:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800f284:	9300      	str	r3, [sp, #0]
 800f286:	4613      	mov	r3, r2
 800f288:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 800f28c:	ca06      	ldmia	r2, {r1, r2}
 800f28e:	481c      	ldr	r0, [pc, #112]	; (800f300 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800f290:	f7f2 f905 	bl	800149e <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800f294:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800f298:	4618      	mov	r0, r3
 800f29a:	f7f2 f8f4 	bl	8001486 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 800f29e:	1d3b      	adds	r3, r7, #4
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d10e      	bne.n	800f2c4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800f2a6:	463b      	mov	r3, r7
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d108      	bne.n	800f2c4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 800f2b2:	4813      	ldr	r0, [pc, #76]	; (800f300 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800f2b4:	f7f4 fe12 	bl	8003edc <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 800f2b8:	4810      	ldr	r0, [pc, #64]	; (800f2fc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800f2ba:	f7f4 fe1c 	bl	8003ef6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800f2be:	4804      	ldr	r0, [pc, #16]	; (800f2d0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800f2c0:	f7f4 fe26 	bl	8003f10 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 800f2c4:	bf00      	nop
 800f2c6:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd90      	pop	{r4, r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	20000320 	.word	0x20000320
 800f2d4:	0801a7d4 	.word	0x0801a7d4
 800f2d8:	0801a7dc 	.word	0x0801a7dc
 800f2dc:	0801a7e4 	.word	0x0801a7e4
 800f2e0:	0801a7ec 	.word	0x0801a7ec
 800f2e4:	0801a7f4 	.word	0x0801a7f4
 800f2e8:	0801a7fc 	.word	0x0801a7fc
 800f2ec:	0801a800 	.word	0x0801a800
 800f2f0:	0801a808 	.word	0x0801a808
 800f2f4:	0801a810 	.word	0x0801a810
 800f2f8:	0801a818 	.word	0x0801a818
 800f2fc:	20000338 	.word	0x20000338
 800f300:	20000350 	.word	0x20000350

0800f304 <_GLOBAL__sub_I__ZN4BodyD2Ev>:
 800f304:	b580      	push	{r7, lr}
 800f306:	af00      	add	r7, sp, #0
 800f308:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f30c:	2001      	movs	r0, #1
 800f30e:	f7ff fe1d 	bl	800ef4c <_Z41__static_initialization_and_destruction_0ii>
 800f312:	bd80      	pop	{r7, pc}

0800f314 <_GLOBAL__sub_D__ZN4BodyD2Ev>:
 800f314:	b580      	push	{r7, lr}
 800f316:	af00      	add	r7, sp, #0
 800f318:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f31c:	2000      	movs	r0, #0
 800f31e:	f7ff fe15 	bl	800ef4c <_Z41__static_initialization_and_destruction_0ii>
 800f322:	bd80      	pop	{r7, pc}

0800f324 <_ZN5TokenD1Ev>:
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	3304      	adds	r3, #4
 800f330:	4618      	mov	r0, r3
 800f332:	f7f7 fa95 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4618      	mov	r0, r3
 800f33a:	3708      	adds	r7, #8
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <_ZN5Token9get_valueB5cxx11Ev>:

Token::~Token()
= default;

token_value Token::get_value()
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b082      	sub	sp, #8
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
	return value;
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	3304      	adds	r3, #4
 800f34e:	4619      	mov	r1, r3
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7f7 fe89 	bl	8007068 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEC1ERKS6_>
}
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <_ZN5Token9set_valueESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE>:

void Token::set_value(token_value value)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b082      	sub	sp, #8
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
 800f366:	6039      	str	r1, [r7, #0]
	this->value = std::move(value);
 800f368:	6838      	ldr	r0, [r7, #0]
 800f36a:	f7fc f807 	bl	800b37c <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 800f36e:	4602      	mov	r2, r0
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	3304      	adds	r3, #4
 800f374:	4611      	mov	r1, r2
 800f376:	4618      	mov	r0, r3
 800f378:	f7fd fc51 	bl	800cc1e <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEaSEOS6_>
}
 800f37c:	bf00      	nop
 800f37e:	3708      	adds	r7, #8
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <_ZN5Token8get_typeEv>:

token_type Token::get_type()
{
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
	return type;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	781b      	ldrb	r3, [r3, #0]
}
 800f390:	4618      	mov	r0, r3
 800f392:	370c      	adds	r7, #12
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <_ZN5Token8set_typeE10token_type>:

void Token::set_type(token_type type)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	70fb      	strb	r3, [r7, #3]
	this->type = type;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	78fa      	ldrb	r2, [r7, #3]
 800f3ac:	701a      	strb	r2, [r3, #0]
}
 800f3ae:	bf00      	nop
 800f3b0:	370c      	adds	r7, #12
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b8:	4770      	bx	lr

0800f3ba <_ZN5Token8get_lineEv>:

int Token::get_line()
{
 800f3ba:	b480      	push	{r7}
 800f3bc:	b083      	sub	sp, #12
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	6078      	str	r0, [r7, #4]
	return line;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6a1b      	ldr	r3, [r3, #32]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	370c      	adds	r7, #12
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr

0800f3d2 <_ZN5Token8set_lineEi>:

void Token::set_line(int line)
{
 800f3d2:	b480      	push	{r7}
 800f3d4:	b083      	sub	sp, #12
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]
 800f3da:	6039      	str	r1, [r7, #0]
	this->line = line;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	683a      	ldr	r2, [r7, #0]
 800f3e0:	621a      	str	r2, [r3, #32]
}
 800f3e2:	bf00      	nop
 800f3e4:	370c      	adds	r7, #12
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr

0800f3ee <_ZN5Token12get_positionEv>:

int Token::get_position()
{
 800f3ee:	b480      	push	{r7}
 800f3f0:	b083      	sub	sp, #12
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	6078      	str	r0, [r7, #4]
	return position;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	370c      	adds	r7, #12
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr

0800f406 <_ZN5Token12set_positionEi>:
void Token::set_position(int position)
{
 800f406:	b480      	push	{r7}
 800f408:	b083      	sub	sp, #12
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
 800f40e:	6039      	str	r1, [r7, #0]
	this->position = position;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	683a      	ldr	r2, [r7, #0]
 800f414:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f416:	bf00      	nop
 800f418:	370c      	adds	r7, #12
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr
	...

0800f424 <_Z41__static_initialization_and_destruction_0ii>:
 800f424:	b590      	push	{r4, r7, lr}
 800f426:	b0e7      	sub	sp, #412	; 0x19c
 800f428:	af02      	add	r7, sp, #8
 800f42a:	1d3b      	adds	r3, r7, #4
 800f42c:	6018      	str	r0, [r3, #0]
 800f42e:	463b      	mov	r3, r7
 800f430:	6019      	str	r1, [r3, #0]
 800f432:	1d3b      	adds	r3, r7, #4
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2b01      	cmp	r3, #1
 800f438:	f040 819d 	bne.w	800f776 <_Z41__static_initialization_and_destruction_0ii+0x352>
 800f43c:	463b      	mov	r3, r7
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f444:	4293      	cmp	r3, r2
 800f446:	f040 8196 	bne.w	800f776 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 800f44a:	f107 0314 	add.w	r3, r7, #20
 800f44e:	4618      	mov	r0, r3
 800f450:	2322      	movs	r3, #34	; 0x22
 800f452:	461a      	mov	r2, r3
 800f454:	2100      	movs	r1, #0
 800f456:	f008 f831 	bl	80174bc <memset>
 800f45a:	f107 0314 	add.w	r3, r7, #20
 800f45e:	223a      	movs	r2, #58	; 0x3a
 800f460:	701a      	strb	r2, [r3, #0]
 800f462:	f107 0314 	add.w	r3, r7, #20
 800f466:	2201      	movs	r2, #1
 800f468:	705a      	strb	r2, [r3, #1]
 800f46a:	f107 0314 	add.w	r3, r7, #20
 800f46e:	220a      	movs	r2, #10
 800f470:	709a      	strb	r2, [r3, #2]
 800f472:	f107 0314 	add.w	r3, r7, #20
 800f476:	220a      	movs	r2, #10
 800f478:	70da      	strb	r2, [r3, #3]
 800f47a:	f107 0314 	add.w	r3, r7, #20
 800f47e:	222c      	movs	r2, #44	; 0x2c
 800f480:	711a      	strb	r2, [r3, #4]
 800f482:	f107 0314 	add.w	r3, r7, #20
 800f486:	220c      	movs	r2, #12
 800f488:	715a      	strb	r2, [r3, #5]
 800f48a:	f107 0314 	add.w	r3, r7, #20
 800f48e:	222e      	movs	r2, #46	; 0x2e
 800f490:	719a      	strb	r2, [r3, #6]
 800f492:	f107 0314 	add.w	r3, r7, #20
 800f496:	220b      	movs	r2, #11
 800f498:	71da      	strb	r2, [r3, #7]
 800f49a:	f107 0314 	add.w	r3, r7, #20
 800f49e:	225b      	movs	r2, #91	; 0x5b
 800f4a0:	721a      	strb	r2, [r3, #8]
 800f4a2:	f107 0314 	add.w	r3, r7, #20
 800f4a6:	220d      	movs	r2, #13
 800f4a8:	725a      	strb	r2, [r3, #9]
 800f4aa:	f107 0314 	add.w	r3, r7, #20
 800f4ae:	225d      	movs	r2, #93	; 0x5d
 800f4b0:	729a      	strb	r2, [r3, #10]
 800f4b2:	f107 0314 	add.w	r3, r7, #20
 800f4b6:	220e      	movs	r2, #14
 800f4b8:	72da      	strb	r2, [r3, #11]
 800f4ba:	f107 0314 	add.w	r3, r7, #20
 800f4be:	227c      	movs	r2, #124	; 0x7c
 800f4c0:	731a      	strb	r2, [r3, #12]
 800f4c2:	f107 0314 	add.w	r3, r7, #20
 800f4c6:	2215      	movs	r2, #21
 800f4c8:	735a      	strb	r2, [r3, #13]
 800f4ca:	f107 0314 	add.w	r3, r7, #20
 800f4ce:	2226      	movs	r2, #38	; 0x26
 800f4d0:	739a      	strb	r2, [r3, #14]
 800f4d2:	f107 0314 	add.w	r3, r7, #20
 800f4d6:	2216      	movs	r2, #22
 800f4d8:	73da      	strb	r2, [r3, #15]
 800f4da:	f107 0314 	add.w	r3, r7, #20
 800f4de:	222b      	movs	r2, #43	; 0x2b
 800f4e0:	741a      	strb	r2, [r3, #16]
 800f4e2:	f107 0314 	add.w	r3, r7, #20
 800f4e6:	221f      	movs	r2, #31
 800f4e8:	745a      	strb	r2, [r3, #17]
 800f4ea:	f107 0314 	add.w	r3, r7, #20
 800f4ee:	222d      	movs	r2, #45	; 0x2d
 800f4f0:	749a      	strb	r2, [r3, #18]
 800f4f2:	f107 0314 	add.w	r3, r7, #20
 800f4f6:	2220      	movs	r2, #32
 800f4f8:	74da      	strb	r2, [r3, #19]
 800f4fa:	f107 0314 	add.w	r3, r7, #20
 800f4fe:	222a      	movs	r2, #42	; 0x2a
 800f500:	751a      	strb	r2, [r3, #20]
 800f502:	f107 0314 	add.w	r3, r7, #20
 800f506:	2221      	movs	r2, #33	; 0x21
 800f508:	755a      	strb	r2, [r3, #21]
 800f50a:	f107 0314 	add.w	r3, r7, #20
 800f50e:	222f      	movs	r2, #47	; 0x2f
 800f510:	759a      	strb	r2, [r3, #22]
 800f512:	f107 0314 	add.w	r3, r7, #20
 800f516:	2222      	movs	r2, #34	; 0x22
 800f518:	75da      	strb	r2, [r3, #23]
 800f51a:	f107 0314 	add.w	r3, r7, #20
 800f51e:	225e      	movs	r2, #94	; 0x5e
 800f520:	761a      	strb	r2, [r3, #24]
 800f522:	f107 0314 	add.w	r3, r7, #20
 800f526:	2223      	movs	r2, #35	; 0x23
 800f528:	765a      	strb	r2, [r3, #25]
 800f52a:	f107 0314 	add.w	r3, r7, #20
 800f52e:	2225      	movs	r2, #37	; 0x25
 800f530:	769a      	strb	r2, [r3, #26]
 800f532:	f107 0314 	add.w	r3, r7, #20
 800f536:	2224      	movs	r2, #36	; 0x24
 800f538:	76da      	strb	r2, [r3, #27]
 800f53a:	f107 0314 	add.w	r3, r7, #20
 800f53e:	2228      	movs	r2, #40	; 0x28
 800f540:	771a      	strb	r2, [r3, #28]
 800f542:	f107 0314 	add.w	r3, r7, #20
 800f546:	2226      	movs	r2, #38	; 0x26
 800f548:	775a      	strb	r2, [r3, #29]
 800f54a:	f107 0314 	add.w	r3, r7, #20
 800f54e:	2229      	movs	r2, #41	; 0x29
 800f550:	779a      	strb	r2, [r3, #30]
 800f552:	f107 0314 	add.w	r3, r7, #20
 800f556:	2227      	movs	r2, #39	; 0x27
 800f558:	77da      	strb	r2, [r3, #31]
 800f55a:	f107 0314 	add.w	r3, r7, #20
 800f55e:	2225      	movs	r2, #37	; 0x25
 800f560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800f564:	f107 030c 	add.w	r3, r7, #12
 800f568:	f107 0214 	add.w	r2, r7, #20
 800f56c:	601a      	str	r2, [r3, #0]
 800f56e:	f107 030c 	add.w	r3, r7, #12
 800f572:	2211      	movs	r2, #17
 800f574:	605a      	str	r2, [r3, #4]
 800f576:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7f1 fe8a 	bl	8001294 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 800f580:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f584:	f107 020c 	add.w	r2, r7, #12
 800f588:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f58c:	9300      	str	r3, [sp, #0]
 800f58e:	460b      	mov	r3, r1
 800f590:	ca06      	ldmia	r2, {r1, r2}
 800f592:	4885      	ldr	r0, [pc, #532]	; (800f7a8 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800f594:	f7f1 fe96 	bl	80012c4 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800f598:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7f1 fe85 	bl	80012ac <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 800f5a2:	2305      	movs	r3, #5
 800f5a4:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 800f5a8:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 800f5ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f5b0:	497e      	ldr	r1, [pc, #504]	; (800f7ac <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7f1 fd72 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 800f5b8:	2306      	movs	r3, #6
 800f5ba:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 800f5be:	f207 1263 	addw	r2, r7, #355	; 0x163
 800f5c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f5c6:	331c      	adds	r3, #28
 800f5c8:	4979      	ldr	r1, [pc, #484]	; (800f7b0 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7f1 fd8e 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 800f5d0:	2307      	movs	r3, #7
 800f5d2:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 800f5d6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800f5da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f5de:	3338      	adds	r3, #56	; 0x38
 800f5e0:	4974      	ldr	r1, [pc, #464]	; (800f7b4 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7f1 fd82 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 800f5e8:	2308      	movs	r3, #8
 800f5ea:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 800f5ee:	f207 1265 	addw	r2, r7, #357	; 0x165
 800f5f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f5f6:	3354      	adds	r3, #84	; 0x54
 800f5f8:	496f      	ldr	r1, [pc, #444]	; (800f7b8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7f1 fd4e 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 800f600:	2309      	movs	r3, #9
 800f602:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 800f606:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 800f60a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f60e:	3370      	adds	r3, #112	; 0x70
 800f610:	496a      	ldr	r1, [pc, #424]	; (800f7bc <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800f612:	4618      	mov	r0, r3
 800f614:	f7f1 fd92 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 800f618:	2310      	movs	r3, #16
 800f61a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 800f61e:	f207 1267 	addw	r2, r7, #359	; 0x167
 800f622:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f626:	338c      	adds	r3, #140	; 0x8c
 800f628:	4965      	ldr	r1, [pc, #404]	; (800f7c0 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7f1 fdae 	bl	800118c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 800f630:	2311      	movs	r3, #17
 800f632:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 800f636:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800f63a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f63e:	33a8      	adds	r3, #168	; 0xa8
 800f640:	4960      	ldr	r1, [pc, #384]	; (800f7c4 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800f642:	4618      	mov	r0, r3
 800f644:	f7f1 fd7a 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 800f648:	2312      	movs	r3, #18
 800f64a:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 800f64e:	f207 1269 	addw	r2, r7, #361	; 0x169
 800f652:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f656:	33c4      	adds	r3, #196	; 0xc4
 800f658:	495b      	ldr	r1, [pc, #364]	; (800f7c8 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7f1 fd1e 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 800f660:	2313      	movs	r3, #19
 800f662:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 800f666:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 800f66a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f66e:	33e0      	adds	r3, #224	; 0xe0
 800f670:	4956      	ldr	r1, [pc, #344]	; (800f7cc <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800f672:	4618      	mov	r0, r3
 800f674:	f7f1 fd3a 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 800f678:	2314      	movs	r3, #20
 800f67a:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 800f67e:	f207 126b 	addw	r2, r7, #363	; 0x16b
 800f682:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f686:	33fc      	adds	r3, #252	; 0xfc
 800f688:	4951      	ldr	r1, [pc, #324]	; (800f7d0 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7f1 fda6 	bl	80011dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 800f690:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f694:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f698:	601a      	str	r2, [r3, #0]
 800f69a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f69e:	220a      	movs	r2, #10
 800f6a0:	605a      	str	r2, [r3, #4]
 800f6a2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7f1 fe99 	bl	80013de <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 800f6ac:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800f6b0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f6b4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800f6b8:	9300      	str	r3, [sp, #0]
 800f6ba:	460b      	mov	r3, r1
 800f6bc:	ca06      	ldmia	r2, {r1, r2}
 800f6be:	4845      	ldr	r0, [pc, #276]	; (800f7d4 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800f6c0:	f7f1 fea5 	bl	800140e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 800f6c4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7f1 fe94 	bl	80013f6 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 800f6ce:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800f6d2:	f504 748c 	add.w	r4, r4, #280	; 0x118
 800f6d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f6da:	429c      	cmp	r4, r3
 800f6dc:	d004      	beq.n	800f6e8 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 800f6de:	3c1c      	subs	r4, #28
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	f7f1 fcce 	bl	8001082 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 800f6e6:	e7f6      	b.n	800f6d6 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 800f6e8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	601a      	str	r2, [r3, #0]
 800f6f0:	605a      	str	r2, [r3, #4]
 800f6f2:	609a      	str	r2, [r3, #8]
 800f6f4:	233c      	movs	r3, #60	; 0x3c
 800f6f6:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 800f6fa:	231b      	movs	r3, #27
 800f6fc:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 800f700:	231c      	movs	r3, #28
 800f702:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800f706:	233e      	movs	r3, #62	; 0x3e
 800f708:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 800f70c:	2319      	movs	r3, #25
 800f70e:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800f712:	231a      	movs	r3, #26
 800f714:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 800f718:	233d      	movs	r3, #61	; 0x3d
 800f71a:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 800f71e:	2318      	movs	r3, #24
 800f720:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 800f724:	231d      	movs	r3, #29
 800f726:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800f72a:	2321      	movs	r3, #33	; 0x21
 800f72c:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 800f730:	2317      	movs	r3, #23
 800f732:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800f736:	231e      	movs	r3, #30
 800f738:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 800f73c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800f740:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800f744:	2304      	movs	r3, #4
 800f746:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800f74a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800f74e:	4618      	mov	r0, r3
 800f750:	f7f1 fe8d 	bl	800146e <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 800f754:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800f758:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800f75c:	9300      	str	r3, [sp, #0]
 800f75e:	4613      	mov	r3, r2
 800f760:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 800f764:	ca06      	ldmia	r2, {r1, r2}
 800f766:	481c      	ldr	r0, [pc, #112]	; (800f7d8 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800f768:	f7f1 fe99 	bl	800149e <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800f76c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800f770:	4618      	mov	r0, r3
 800f772:	f7f1 fe88 	bl	8001486 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 800f776:	1d3b      	adds	r3, r7, #4
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d10e      	bne.n	800f79c <_Z41__static_initialization_and_destruction_0ii+0x378>
 800f77e:	463b      	mov	r3, r7
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f786:	4293      	cmp	r3, r2
 800f788:	d108      	bne.n	800f79c <_Z41__static_initialization_and_destruction_0ii+0x378>
 800f78a:	4813      	ldr	r0, [pc, #76]	; (800f7d8 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800f78c:	f7f4 fba6 	bl	8003edc <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 800f790:	4810      	ldr	r0, [pc, #64]	; (800f7d4 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800f792:	f7f4 fbb0 	bl	8003ef6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 800f796:	4804      	ldr	r0, [pc, #16]	; (800f7a8 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800f798:	f7f4 fbba 	bl	8003f10 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 800f79c:	bf00      	nop
 800f79e:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd90      	pop	{r4, r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	20000368 	.word	0x20000368
 800f7ac:	0801a85c 	.word	0x0801a85c
 800f7b0:	0801a864 	.word	0x0801a864
 800f7b4:	0801a86c 	.word	0x0801a86c
 800f7b8:	0801a874 	.word	0x0801a874
 800f7bc:	0801a87c 	.word	0x0801a87c
 800f7c0:	0801a884 	.word	0x0801a884
 800f7c4:	0801a888 	.word	0x0801a888
 800f7c8:	0801a890 	.word	0x0801a890
 800f7cc:	0801a898 	.word	0x0801a898
 800f7d0:	0801a8a0 	.word	0x0801a8a0
 800f7d4:	20000380 	.word	0x20000380
 800f7d8:	20000398 	.word	0x20000398

0800f7dc <_GLOBAL__sub_I__ZN5TokenD2Ev>:
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f7e4:	2001      	movs	r0, #1
 800f7e6:	f7ff fe1d 	bl	800f424 <_Z41__static_initialization_and_destruction_0ii>
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <_GLOBAL__sub_D__ZN5TokenD2Ev>:
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f7f4:	2000      	movs	r0, #0
 800f7f6:	f7ff fe15 	bl	800f424 <_Z41__static_initialization_and_destruction_0ii>
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <_ZN11TransmitterC1EP20__UART_HandleTypeDef>:
#include <Transmitter.h>

Transmitter::Transmitter(UART_HandleTypeDef *huart)
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
 800f806:	4a06      	ldr	r2, [pc, #24]	; (800f820 <_ZN11TransmitterC1EP20__UART_HandleTypeDef+0x24>)
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	601a      	str	r2, [r3, #0]
{
	this->huart = huart;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	683a      	ldr	r2, [r7, #0]
 800f810:	605a      	str	r2, [r3, #4]
}
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4618      	mov	r0, r3
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr
 800f820:	0801aadc 	.word	0x0801aadc

0800f824 <_ZN11TransmitterD1Ev>:
typedef int UART_HandleTypeDef;
#endif

#include <string>

class Transmitter
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	4a04      	ldr	r2, [pc, #16]	; (800f840 <_ZN11TransmitterD1Ev+0x1c>)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	601a      	str	r2, [r3, #0]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	4618      	mov	r0, r3
 800f836:	370c      	adds	r7, #12
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr
 800f840:	0801aadc 	.word	0x0801aadc

0800f844 <_ZN11TransmitterD0Ev>:
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f7ff ffe9 	bl	800f824 <_ZN11TransmitterD1Ev>
 800f852:	210c      	movs	r1, #12
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f007 fa68 	bl	8016d2a <_ZdlPvj>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	4618      	mov	r0, r3
 800f85e:	3708      	adds	r7, #8
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>:

Transmitter::~Transmitter() = default;

void Transmitter::report_error(std::string message, int line, int position)
{
 800f864:	b5b0      	push	{r4, r5, r7, lr}
 800f866:	b0a2      	sub	sp, #136	; 0x88
 800f868:	af00      	add	r7, sp, #0
 800f86a:	60f8      	str	r0, [r7, #12]
 800f86c:	60b9      	str	r1, [r7, #8]
 800f86e:	607a      	str	r2, [r7, #4]
 800f870:	603b      	str	r3, [r7, #0]
	std::string full_message = message + "\nin line: " + itoa(line, nullptr, 10)
 800f872:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f876:	4a2f      	ldr	r2, [pc, #188]	; (800f934 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xd0>)
 800f878:	68b9      	ldr	r1, [r7, #8]
 800f87a:	4618      	mov	r0, r3
 800f87c:	f000 f860 	bl	800f940 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800f880:	220a      	movs	r2, #10
 800f882:	2100      	movs	r1, #0
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f007 fdd1 	bl	801742c <itoa>
 800f88a:	4602      	mov	r2, r0
 800f88c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f890:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800f894:	4618      	mov	r0, r3
 800f896:	f7fb f94d 	bl	800ab34 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
			+ " in position: " + itoa(position, nullptr, 10) + "\n";
 800f89a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f89e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f8a2:	4a25      	ldr	r2, [pc, #148]	; (800f938 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xd4>)
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7fb f945 	bl	800ab34 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800f8aa:	220a      	movs	r2, #10
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	6838      	ldr	r0, [r7, #0]
 800f8b0:	f007 fdbc 	bl	801742c <itoa>
 800f8b4:	4602      	mov	r2, r0
 800f8b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f8ba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7fb f938 	bl	800ab34 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800f8c4:	f107 0310 	add.w	r3, r7, #16
 800f8c8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f8cc:	4a1b      	ldr	r2, [pc, #108]	; (800f93c <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xd8>)
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7fb f930 	bl	800ab34 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800f8d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f007 fc00 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f8de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f007 fbfb 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	std::string full_message = message + "\nin line: " + itoa(line, nullptr, 10)
 800f8e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f007 fbf6 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f8f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f007 fbf1 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800f8fc:	b672      	cpsid	i
}
 800f8fe:	bf00      	nop
#ifndef TESTS
	__disable_irq();
	while (1)
	{
		HAL_UART_Transmit(huart, (uint8_t*)full_message.c_str(), full_message.length(), 100);
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	685c      	ldr	r4, [r3, #4]
 800f904:	f107 0310 	add.w	r3, r7, #16
 800f908:	4618      	mov	r0, r3
 800f90a:	f007 fccb 	bl	80172a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800f90e:	4605      	mov	r5, r0
 800f910:	f107 0310 	add.w	r3, r7, #16
 800f914:	4618      	mov	r0, r3
 800f916:	f007 fc18 	bl	801714a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800f91a:	4603      	mov	r3, r0
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	2364      	movs	r3, #100	; 0x64
 800f920:	4629      	mov	r1, r5
 800f922:	4620      	mov	r0, r4
 800f924:	f006 fa7e 	bl	8015e24 <HAL_UART_Transmit>
		HAL_Delay(500);
 800f928:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f92c:	f004 fdfe 	bl	801452c <HAL_Delay>
		HAL_UART_Transmit(huart, (uint8_t*)full_message.c_str(), full_message.length(), 100);
 800f930:	e7e6      	b.n	800f900 <_ZN11Transmitter12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x9c>
 800f932:	bf00      	nop
 800f934:	0801a8a4 	.word	0x0801a8a4
 800f938:	0801a8b0 	.word	0x0801a8b0
 800f93c:	0801a8c0 	.word	0x0801a8c0

0800f940 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 800f94c:	68b9      	ldr	r1, [r7, #8]
 800f94e:	68f8      	ldr	r0, [r7, #12]
 800f950:	f007 fcf2 	bl	8017338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 800f954:	6879      	ldr	r1, [r7, #4]
 800f956:	68f8      	ldr	r0, [r7, #12]
 800f958:	f007 fc8e 	bl	8017278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 800f95c:	bf00      	nop
    }
 800f95e:	68f8      	ldr	r0, [r7, #12]
 800f960:	3710      	adds	r7, #16
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}

0800f966 <_ZN6Parser31parse_variable_or_function_callEP17Primal_expression>:
#include "Parser.h"

void Parser::parse_variable_or_function_call(Primal_expression *exp)
{
 800f966:	b580      	push	{r7, lr}
 800f968:	b092      	sub	sp, #72	; 0x48
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
 800f96e:	6039      	str	r1, [r7, #0]
	std::string id(std::get<std::string>(token_buffer.get_value()));
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f103 0208 	add.w	r2, r3, #8
 800f976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f97a:	4611      	mov	r1, r2
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7ff fcdf 	bl	800f340 <_ZN5Token9get_valueB5cxx11Ev>
 800f982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f986:	4618      	mov	r0, r3
 800f988:	f7fb f88c 	bl	800aaa4 <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 800f98c:	4602      	mov	r2, r0
 800f98e:	f107 030c 	add.w	r3, r7, #12
 800f992:	4611      	mov	r1, r2
 800f994:	4618      	mov	r0, r3
 800f996:	f007 fb88 	bl	80170aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800f99a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7f6 ff5e 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
	get_next_token();
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f7fa fe91 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	if (token_buffer.get_type() == TOKEN_LEFT_BRACKET)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	3308      	adds	r3, #8
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7ff fce8 	bl	800f384 <_ZN5Token8get_typeEv>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b26      	cmp	r3, #38	; 0x26
 800f9b8:	bf0c      	ite	eq
 800f9ba:	2301      	moveq	r3, #1
 800f9bc:	2300      	movne	r3, #0
 800f9be:	b2db      	uxtb	r3, r3
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d013      	beq.n	800f9ec <_ZN6Parser31parse_variable_or_function_callEP17Primal_expression+0x86>
	{
		exp->type = PRIMAL_FUNCTION_CALL;
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	2205      	movs	r2, #5
 800f9c8:	701a      	strb	r2, [r3, #0]
		exp->content = parse_function_call(id);
 800f9ca:	f107 030c 	add.w	r3, r7, #12
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7fa fb95 	bl	800a100 <_ZN6Parser19parse_function_callERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	643b      	str	r3, [r7, #64]	; 0x40
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	3304      	adds	r3, #4
 800f9de:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f9e2:	4611      	mov	r1, r2
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f000 fd21 	bl	801042c <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
 800f9ea:	e012      	b.n	800fa12 <_ZN6Parser31parse_variable_or_function_callEP17Primal_expression+0xac>
	}
	else
	{
		exp->type = PRIMAL_VARIABLE;
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	2204      	movs	r2, #4
 800f9f0:	701a      	strb	r2, [r3, #0]
		exp->content = parse_variable(id);
 800f9f2:	f107 030c 	add.w	r3, r7, #12
 800f9f6:	4619      	mov	r1, r3
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f7fa fa53 	bl	8009ea4 <_ZN6Parser14parse_variableERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	647b      	str	r3, [r7, #68]	; 0x44
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	3304      	adds	r3, #4
 800fa06:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800fa0a:	4611      	mov	r1, r2
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f000 fd37 	bl	8010480 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
	std::string id(std::get<std::string>(token_buffer.get_value()));
 800fa12:	f107 030c 	add.w	r3, r7, #12
 800fa16:	4618      	mov	r0, r3
 800fa18:	f007 fb61 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800fa1c:	bf00      	nop
 800fa1e:	3748      	adds	r7, #72	; 0x48
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1Ev>:
      variant() = default;
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f000 fd9b 	bl	801056a <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1Ev>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	4618      	mov	r0, r3
 800fa38:	3708      	adds	r7, #8
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}

0800fa3e <_ZN17Primal_expressionC1Ev>:
	PRIMAL_STRING,
	PRIMAL_VARIABLE,
	PRIMAL_FUNCTION_CALL
}primal_type;

class Primal_expression
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	b082      	sub	sp, #8
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	3304      	adds	r3, #4
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7ff ffea 	bl	800fa24 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1Ev>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	4618      	mov	r0, r3
 800fa54:	3708      	adds	r7, #8
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
	...

0800fa5c <_ZN6Parser23parse_primal_expressionEv>:

Primal_expression* Parser::parse_primal_expression()
{
 800fa5c:	b590      	push	{r4, r7, lr}
 800fa5e:	b0a7      	sub	sp, #156	; 0x9c
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
	auto exp = new Primal_expression();
 800fa64:	2020      	movs	r0, #32
 800fa66:	f007 f962 	bl	8016d2e <_Znwj>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	461c      	mov	r4, r3
 800fa6e:	4620      	mov	r0, r4
 800fa70:	2320      	movs	r3, #32
 800fa72:	461a      	mov	r2, r3
 800fa74:	2100      	movs	r1, #0
 800fa76:	f007 fd21 	bl	80174bc <memset>
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f7ff ffdf 	bl	800fa3e <_ZN17Primal_expressionC1Ev>
 800fa80:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
	switch(token_buffer.get_type())
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	3308      	adds	r3, #8
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7ff fc7b 	bl	800f384 <_ZN5Token8get_typeEv>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	3b02      	subs	r3, #2
 800fa92:	2b0d      	cmp	r3, #13
 800fa94:	f200 80c1 	bhi.w	800fc1a <_ZN6Parser23parse_primal_expressionEv+0x1be>
 800fa98:	a201      	add	r2, pc, #4	; (adr r2, 800faa0 <_ZN6Parser23parse_primal_expressionEv+0x44>)
 800fa9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa9e:	bf00      	nop
 800faa0:	0800fc0f 	.word	0x0800fc0f
 800faa4:	0800fb23 	.word	0x0800fb23
 800faa8:	0800fb69 	.word	0x0800fb69
 800faac:	0800fad9 	.word	0x0800fad9
 800fab0:	0800faff 	.word	0x0800faff
 800fab4:	0800fc1b 	.word	0x0800fc1b
 800fab8:	0800fc1b 	.word	0x0800fc1b
 800fabc:	0800fc1b 	.word	0x0800fc1b
 800fac0:	0800fc1b 	.word	0x0800fc1b
 800fac4:	0800fc1b 	.word	0x0800fc1b
 800fac8:	0800fc1b 	.word	0x0800fc1b
 800facc:	0800fc1b 	.word	0x0800fc1b
 800fad0:	0800fc1b 	.word	0x0800fc1b
 800fad4:	0800fbaf 	.word	0x0800fbaf
	{
	case TOKEN_TRUE:
		exp->type = PRIMAL_BOOL;
 800fad8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fadc:	2200      	movs	r2, #0
 800fade:	701a      	strb	r2, [r3, #0]
		exp->content = true;
 800fae0:	2301      	movs	r3, #1
 800fae2:	72bb      	strb	r3, [r7, #10]
 800fae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fae8:	3304      	adds	r3, #4
 800faea:	f107 020a 	add.w	r2, r7, #10
 800faee:	4611      	mov	r1, r2
 800faf0:	4618      	mov	r0, r3
 800faf2:	f000 fd47 	bl	8010584 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
		get_next_token();
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7fa fde8 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		break;
 800fafc:	e0ab      	b.n	800fc56 <_ZN6Parser23parse_primal_expressionEv+0x1fa>
	case TOKEN_FALSE:
		exp->type = PRIMAL_BOOL;
 800fafe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fb02:	2200      	movs	r2, #0
 800fb04:	701a      	strb	r2, [r3, #0]
		exp->content = false;
 800fb06:	2300      	movs	r3, #0
 800fb08:	72fb      	strb	r3, [r7, #11]
 800fb0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fb0e:	3304      	adds	r3, #4
 800fb10:	f107 020b 	add.w	r2, r7, #11
 800fb14:	4611      	mov	r1, r2
 800fb16:	4618      	mov	r0, r3
 800fb18:	f000 fd34 	bl	8010584 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
		get_next_token();
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7fa fdd5 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	case TOKEN_INT:
		exp->type = PRIMAL_INT;
 800fb22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fb26:	2201      	movs	r2, #1
 800fb28:	701a      	strb	r2, [r3, #0]
		exp->content = std::get<int>(token_buffer.get_value());
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f103 0208 	add.w	r2, r3, #8
 800fb30:	f107 030c 	add.w	r3, r7, #12
 800fb34:	4611      	mov	r1, r2
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7ff fc02 	bl	800f340 <_ZN5Token9get_valueB5cxx11Ev>
 800fb3c:	f107 030c 	add.w	r3, r7, #12
 800fb40:	4618      	mov	r0, r3
 800fb42:	f000 fd4a 	bl	80105da <_ZSt3getIiJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEOT_OSt7variantIJDpT0_EE>
 800fb46:	4602      	mov	r2, r0
 800fb48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fb4c:	3304      	adds	r3, #4
 800fb4e:	4611      	mov	r1, r2
 800fb50:	4618      	mov	r0, r3
 800fb52:	f000 fd52 	bl	80105fa <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIiEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
 800fb56:	f107 030c 	add.w	r3, r7, #12
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7f6 fe80 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
		get_next_token();
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f7fa fdb3 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		break;
 800fb66:	e076      	b.n	800fc56 <_ZN6Parser23parse_primal_expressionEv+0x1fa>
	case TOKEN_FLOAT:
		exp->type = PRIMAL_FLOAT;
 800fb68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fb6c:	2202      	movs	r2, #2
 800fb6e:	701a      	strb	r2, [r3, #0]
		exp->content = std::get<float>(token_buffer.get_value());
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f103 0208 	add.w	r2, r3, #8
 800fb76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb7a:	4611      	mov	r1, r2
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7ff fbdf 	bl	800f340 <_ZN5Token9get_valueB5cxx11Ev>
 800fb82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb86:	4618      	mov	r0, r3
 800fb88:	f000 fd61 	bl	801064e <_ZSt3getIfJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEOT_OSt7variantIJDpT0_EE>
 800fb8c:	4602      	mov	r2, r0
 800fb8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fb92:	3304      	adds	r3, #4
 800fb94:	4611      	mov	r1, r2
 800fb96:	4618      	mov	r0, r3
 800fb98:	f000 fd69 	bl	801066e <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIfEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
 800fb9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7f6 fe5d 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
		get_next_token();
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f7fa fd90 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		break;
 800fbac:	e053      	b.n	800fc56 <_ZN6Parser23parse_primal_expressionEv+0x1fa>
	case TOKEN_STRING:
		exp->type = PRIMAL_STRING;
 800fbae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fbb2:	2203      	movs	r2, #3
 800fbb4:	701a      	strb	r2, [r3, #0]
		exp->content = std::string(std::get<std::string>(token_buffer.get_value()));
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f103 0208 	add.w	r2, r3, #8
 800fbbc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fbc0:	4611      	mov	r1, r2
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7ff fbbc 	bl	800f340 <_ZN5Token9get_valueB5cxx11Ev>
 800fbc8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fa ff69 	bl	800aaa4 <_ZSt3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_ifbEEOT_OSt7variantIJDpT0_EE>
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fbd8:	4611      	mov	r1, r2
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f007 fa65 	bl	80170aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800fbe0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fbe4:	3304      	adds	r3, #4
 800fbe6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800fbea:	4611      	mov	r1, r2
 800fbec:	4618      	mov	r0, r3
 800fbee:	f000 fd68 	bl	80106c2 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>
 800fbf2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f007 fa71 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800fbfc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7f6 fe2d 	bl	8006860 <_ZNSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEED1Ev>
		get_next_token();
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7fa fd60 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		break;
 800fc0c:	e023      	b.n	800fc56 <_ZN6Parser23parse_primal_expressionEv+0x1fa>
	case TOKEN_IDENTIFIER:
		parse_variable_or_function_call(exp);
 800fc0e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f7ff fea7 	bl	800f966 <_ZN6Parser31parse_variable_or_function_callEP17Primal_expression>
		break;
 800fc18:	e01d      	b.n	800fc56 <_ZN6Parser23parse_primal_expressionEv+0x1fa>
	default:
		report_error("expression");
 800fc1a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f007 f896 	bl	8016d50 <_ZNSaIcEC1Ev>
 800fc24:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800fc28:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800fc2c:	490d      	ldr	r1, [pc, #52]	; (800fc64 <_ZN6Parser23parse_primal_expressionEv+0x208>)
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7f1 fb83 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800fc34:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800fc38:	4619      	mov	r1, r3
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f7fa f998 	bl	8009f70 <_ZN6Parser12report_errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800fc40:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800fc44:	4618      	mov	r0, r3
 800fc46:	f007 fa4a 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800fc4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f007 f87f 	bl	8016d52 <_ZNSaIcED1Ev>
		break;
 800fc54:	bf00      	nop
	}
	return exp;
 800fc56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	379c      	adds	r7, #156	; 0x9c
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd90      	pop	{r4, r7, pc}
 800fc62:	bf00      	nop
 800fc64:	0801a8c4 	.word	0x0801a8c4

0800fc68 <_ZN6Parser23parse_nested_expressionEv>:

Expression* Parser::parse_nested_expression()
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b08a      	sub	sp, #40	; 0x28
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
	auto exp = parse_expression();
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f000 fb9b 	bl	80103ac <_ZN6Parser16parse_expressionEv>
 800fc76:	6278      	str	r0, [r7, #36]	; 0x24
	assert_token(TOKEN_RIGHT_BRACKET, "closing bracket");
 800fc78:	f107 0320 	add.w	r3, r7, #32
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f007 f867 	bl	8016d50 <_ZNSaIcEC1Ev>
 800fc82:	f107 0220 	add.w	r2, r7, #32
 800fc86:	f107 0308 	add.w	r3, r7, #8
 800fc8a:	490e      	ldr	r1, [pc, #56]	; (800fcc4 <_ZN6Parser23parse_nested_expressionEv+0x5c>)
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7f1 fb54 	bl	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800fc92:	f107 0308 	add.w	r3, r7, #8
 800fc96:	461a      	mov	r2, r3
 800fc98:	2127      	movs	r1, #39	; 0x27
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f7fa f990 	bl	8009fc0 <_ZN6Parser12assert_tokenE10token_typeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800fca0:	f107 0308 	add.w	r3, r7, #8
 800fca4:	4618      	mov	r0, r3
 800fca6:	f007 fa1a 	bl	80170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800fcaa:	f107 0320 	add.w	r3, r7, #32
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f007 f84f 	bl	8016d52 <_ZNSaIcED1Ev>
	get_next_token();
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f7fa fd09 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	return exp;
 800fcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3728      	adds	r7, #40	; 0x28
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	0801a8d0 	.word	0x0801a8d0

0800fcc8 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEC1Ev>:
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f000 fd6c 	bl	80107b0 <_ZNSt8__detail9__variant13_Variant_baseIJP17Primal_expressionP10ExpressionEEC1Ev>
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3708      	adds	r7, #8
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}

0800fce2 <_ZN19Priority_expressionC1Ev>:
	std::variant<bool, int, float, std::string, Variable*, Function_call*> content;
};

class Expression;

class Priority_expression
 800fce2:	b580      	push	{r7, lr}
 800fce4:	b082      	sub	sp, #8
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7ff ffeb 	bl	800fcc8 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEC1Ev>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <_ZN6Parser25parse_priority_expressionEv>:

Priority_expression* Parser::parse_priority_expression()
{
 800fcfc:	b590      	push	{r4, r7, lr}
 800fcfe:	b087      	sub	sp, #28
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
	auto exp = new Priority_expression();
 800fd04:	2008      	movs	r0, #8
 800fd06:	f007 f812 	bl	8016d2e <_Znwj>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	461c      	mov	r4, r3
 800fd0e:	2300      	movs	r3, #0
 800fd10:	6023      	str	r3, [r4, #0]
 800fd12:	2300      	movs	r3, #0
 800fd14:	7123      	strb	r3, [r4, #4]
 800fd16:	4620      	mov	r0, r4
 800fd18:	f7ff ffe3 	bl	800fce2 <_ZN19Priority_expressionC1Ev>
 800fd1c:	617c      	str	r4, [r7, #20]
	if(token_buffer.get_type() == TOKEN_LEFT_BRACKET)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	3308      	adds	r3, #8
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7ff fb2e 	bl	800f384 <_ZN5Token8get_typeEv>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	2b26      	cmp	r3, #38	; 0x26
 800fd2c:	bf0c      	ite	eq
 800fd2e:	2301      	moveq	r3, #1
 800fd30:	2300      	movne	r3, #0
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d00f      	beq.n	800fd58 <_ZN6Parser25parse_priority_expressionEv+0x5c>
	{
		get_next_token();
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f7fa fcc7 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		exp->exp = parse_nested_expression();
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f7ff ff92 	bl	800fc68 <_ZN6Parser23parse_nested_expressionEv>
 800fd44:	4603      	mov	r3, r0
 800fd46:	60fb      	str	r3, [r7, #12]
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	f107 020c 	add.w	r2, r7, #12
 800fd4e:	4611      	mov	r1, r2
 800fd50:	4618      	mov	r0, r3
 800fd52:	f000 fd3a 	bl	80107ca <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>
 800fd56:	e00b      	b.n	800fd70 <_ZN6Parser25parse_priority_expressionEv+0x74>
	}
	else
	{
		exp->exp = parse_primal_expression();
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f7ff fe7f 	bl	800fa5c <_ZN6Parser23parse_primal_expressionEv>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	613b      	str	r3, [r7, #16]
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	f107 0210 	add.w	r2, r7, #16
 800fd68:	4611      	mov	r1, r2
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f000 fd57 	bl	801081e <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>
	}
	return exp;
 800fd70:	697b      	ldr	r3, [r7, #20]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	371c      	adds	r7, #28
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd90      	pop	{r4, r7, pc}

0800fd7a <_ZN6Parser20match_unary_operatorEP16Unary_expression>:

bool Parser::match_unary_operator(Unary_expression* exp)
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b082      	sub	sp, #8
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
 800fd82:	6039      	str	r1, [r7, #0]
	switch(token_buffer.get_type())
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	3308      	adds	r3, #8
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7ff fafb 	bl	800f384 <_ZN5Token8get_typeEv>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b17      	cmp	r3, #23
 800fd92:	d005      	beq.n	800fda0 <_ZN6Parser20match_unary_operatorEP16Unary_expression+0x26>
 800fd94:	2b20      	cmp	r3, #32
 800fd96:	d107      	bne.n	800fda8 <_ZN6Parser20match_unary_operatorEP16Unary_expression+0x2e>
	{
	case TOKEN_MINUS:
		exp->op = UN_OP_MINUS;
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	711a      	strb	r2, [r3, #4]
		break;
 800fd9e:	e005      	b.n	800fdac <_ZN6Parser20match_unary_operatorEP16Unary_expression+0x32>
	case TOKEN_EXCLAMATION:
		exp->op = UN_OP_EXCLAMATION;
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	2202      	movs	r2, #2
 800fda4:	711a      	strb	r2, [r3, #4]
		break;
 800fda6:	e001      	b.n	800fdac <_ZN6Parser20match_unary_operatorEP16Unary_expression+0x32>
	default:
		return false;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	e000      	b.n	800fdae <_ZN6Parser20match_unary_operatorEP16Unary_expression+0x34>
	}
	return true;
 800fdac:	2301      	movs	r3, #1
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3708      	adds	r7, #8
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}

0800fdb6 <_ZN6Parser22parse_unary_expressionEv>:

Unary_expression* Parser::parse_unary_expression()
{
 800fdb6:	b580      	push	{r7, lr}
 800fdb8:	b084      	sub	sp, #16
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	6078      	str	r0, [r7, #4]
	auto exp = new Unary_expression();
 800fdbe:	2008      	movs	r0, #8
 800fdc0:	f006 ffb5 	bl	8016d2e <_Znwj>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	601a      	str	r2, [r3, #0]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	711a      	strb	r2, [r3, #4]
 800fdce:	60fb      	str	r3, [r7, #12]
	if(match_unary_operator(exp))
 800fdd0:	68f9      	ldr	r1, [r7, #12]
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f7ff ffd1 	bl	800fd7a <_ZN6Parser20match_unary_operatorEP16Unary_expression>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d002      	beq.n	800fde4 <_ZN6Parser22parse_unary_expressionEv+0x2e>
	{
		get_next_token();
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f7fa fc74 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
	}
	exp->prior_exp = parse_priority_expression();
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f7ff ff89 	bl	800fcfc <_ZN6Parser25parse_priority_expressionEv>
 800fdea:	4602      	mov	r2, r0
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	601a      	str	r2, [r3, #0]
	return exp;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3710      	adds	r7, #16
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}

0800fdfa <_ZN6Parser22parse_power_expressionEv>:

Power_expression* Parser::parse_power_expression()
{
 800fdfa:	b580      	push	{r7, lr}
 800fdfc:	b084      	sub	sp, #16
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	6078      	str	r0, [r7, #4]
	auto exp = new Power_expression();
 800fe02:	2008      	movs	r0, #8
 800fe04:	f006 ff93 	bl	8016d2e <_Znwj>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	601a      	str	r2, [r3, #0]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	605a      	str	r2, [r3, #4]
 800fe12:	60fb      	str	r3, [r7, #12]
	exp->left_un_exp = parse_unary_expression();
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f7ff ffce 	bl	800fdb6 <_ZN6Parser22parse_unary_expressionEv>
 800fe1a:	4602      	mov	r2, r0
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	601a      	str	r2, [r3, #0]
	if(token_buffer.get_type() == TOKEN_POWER)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	3308      	adds	r3, #8
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7ff faad 	bl	800f384 <_ZN5Token8get_typeEv>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	2b23      	cmp	r3, #35	; 0x23
 800fe2e:	bf0c      	ite	eq
 800fe30:	2301      	moveq	r3, #1
 800fe32:	2300      	movne	r3, #0
 800fe34:	b2db      	uxtb	r3, r3
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d009      	beq.n	800fe4e <_ZN6Parser22parse_power_expressionEv+0x54>
	{
		get_next_token();
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f7fa fc46 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		exp->right_un_exp = parse_unary_expression();
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f7ff ffb8 	bl	800fdb6 <_ZN6Parser22parse_unary_expressionEv>
 800fe46:	4602      	mov	r2, r0
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	605a      	str	r2, [r3, #4]
 800fe4c:	e002      	b.n	800fe54 <_ZN6Parser22parse_power_expressionEv+0x5a>
	}
	else
	{
		exp->right_un_exp = nullptr;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2200      	movs	r2, #0
 800fe52:	605a      	str	r2, [r3, #4]
	}
	return exp;
 800fe54:	68fb      	ldr	r3, [r7, #12]
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3710      	adds	r7, #16
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}

0800fe5e <_ZN6Parser23match_multiply_operatorEP19Multiply_expression>:

bool Parser::match_multiply_operator(Multiply_expression* exp)
{
 800fe5e:	b580      	push	{r7, lr}
 800fe60:	b084      	sub	sp, #16
 800fe62:	af00      	add	r7, sp, #0
 800fe64:	6078      	str	r0, [r7, #4]
 800fe66:	6039      	str	r1, [r7, #0]
	switch(token_buffer.get_type())
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	3308      	adds	r3, #8
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7ff fa89 	bl	800f384 <_ZN5Token8get_typeEv>
 800fe72:	4603      	mov	r3, r0
 800fe74:	2b24      	cmp	r3, #36	; 0x24
 800fe76:	d01c      	beq.n	800feb2 <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x54>
 800fe78:	2b24      	cmp	r3, #36	; 0x24
 800fe7a:	dc25      	bgt.n	800fec8 <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x6a>
 800fe7c:	2b21      	cmp	r3, #33	; 0x21
 800fe7e:	d002      	beq.n	800fe86 <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x28>
 800fe80:	2b22      	cmp	r3, #34	; 0x22
 800fe82:	d00b      	beq.n	800fe9c <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x3e>
 800fe84:	e020      	b.n	800fec8 <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x6a>
	{
	case TOKEN_MULTIPLY:
		exp->ops.push_back(MULT_OP_MULTIPLY);
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	330c      	adds	r3, #12
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	737a      	strb	r2, [r7, #13]
 800fe8e:	f107 020d 	add.w	r2, r7, #13
 800fe92:	4611      	mov	r1, r2
 800fe94:	4618      	mov	r0, r3
 800fe96:	f000 fcec 	bl	8010872 <_ZNSt6vectorI13mult_operatorSaIS0_EE9push_backEOS0_>
		break;
 800fe9a:	e017      	b.n	800fecc <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x6e>
	case TOKEN_DIVIDE:
		exp->ops.push_back(MULT_OP_DIVIDE);
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	330c      	adds	r3, #12
 800fea0:	2202      	movs	r2, #2
 800fea2:	73ba      	strb	r2, [r7, #14]
 800fea4:	f107 020e 	add.w	r2, r7, #14
 800fea8:	4611      	mov	r1, r2
 800feaa:	4618      	mov	r0, r3
 800feac:	f000 fce1 	bl	8010872 <_ZNSt6vectorI13mult_operatorSaIS0_EE9push_backEOS0_>
		break;
 800feb0:	e00c      	b.n	800fecc <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x6e>
	case TOKEN_MODULO:
		exp->ops.push_back(MULT_OP_MODULO);
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	330c      	adds	r3, #12
 800feb6:	2203      	movs	r2, #3
 800feb8:	73fa      	strb	r2, [r7, #15]
 800feba:	f107 020f 	add.w	r2, r7, #15
 800febe:	4611      	mov	r1, r2
 800fec0:	4618      	mov	r0, r3
 800fec2:	f000 fcd6 	bl	8010872 <_ZNSt6vectorI13mult_operatorSaIS0_EE9push_backEOS0_>
		break;
 800fec6:	e001      	b.n	800fecc <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x6e>
	default:
		return false;
 800fec8:	2300      	movs	r3, #0
 800feca:	e000      	b.n	800fece <_ZN6Parser23match_multiply_operatorEP19Multiply_expression+0x70>
	}
	return true;
 800fecc:	2301      	movs	r3, #1
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3710      	adds	r7, #16
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}

0800fed6 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800fed6:	b580      	push	{r7, lr}
 800fed8:	b082      	sub	sp, #8
 800feda:	af00      	add	r7, sp, #0
 800fedc:	6078      	str	r0, [r7, #4]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	4618      	mov	r0, r3
 800fee2:	f000 fcd7 	bl	8010894 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE12_Vector_implC1Ev>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	4618      	mov	r0, r3
 800feea:	3708      	adds	r7, #8
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}

0800fef0 <_ZNSt6vectorIP16Power_expressionSaIS1_EEC1Ev>:
      vector() = default;
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7ff ffeb 	bl	800fed6 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EEC1Ev>
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	4618      	mov	r0, r3
 800ff04:	3708      	adds	r7, #8
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}

0800ff0a <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EEC1Ev>:
      _Vector_base() = default;
 800ff0a:	b580      	push	{r7, lr}
 800ff0c:	b082      	sub	sp, #8
 800ff0e:	af00      	add	r7, sp, #0
 800ff10:	6078      	str	r0, [r7, #4]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	4618      	mov	r0, r3
 800ff16:	f000 fccd 	bl	80108b4 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE12_Vector_implC1Ev>
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3708      	adds	r7, #8
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <_ZNSt6vectorI13mult_operatorSaIS0_EEC1Ev>:
      vector() = default;
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7ff ffeb 	bl	800ff0a <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EEC1Ev>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	4618      	mov	r0, r3
 800ff38:	3708      	adds	r7, #8
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}

0800ff3e <_ZN19Multiply_expressionC1Ev>:
	MULT_OP_MULTIPLY,
	MULT_OP_DIVIDE,
	MULT_OP_MODULO
}mult_operator;

class Multiply_expression
 800ff3e:	b580      	push	{r7, lr}
 800ff40:	b082      	sub	sp, #8
 800ff42:	af00      	add	r7, sp, #0
 800ff44:	6078      	str	r0, [r7, #4]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7ff ffd1 	bl	800fef0 <_ZNSt6vectorIP16Power_expressionSaIS1_EEC1Ev>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	330c      	adds	r3, #12
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7ff ffe6 	bl	800ff24 <_ZNSt6vectorI13mult_operatorSaIS0_EEC1Ev>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3708      	adds	r7, #8
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}

0800ff62 <_ZN6Parser25parse_multiply_expressionEv>:

Multiply_expression* Parser::parse_multiply_expression()
{
 800ff62:	b590      	push	{r4, r7, lr}
 800ff64:	b087      	sub	sp, #28
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
	auto exp = new Multiply_expression();
 800ff6a:	2018      	movs	r0, #24
 800ff6c:	f006 fedf 	bl	8016d2e <_Znwj>
 800ff70:	4603      	mov	r3, r0
 800ff72:	461c      	mov	r4, r3
 800ff74:	4622      	mov	r2, r4
 800ff76:	2300      	movs	r3, #0
 800ff78:	6013      	str	r3, [r2, #0]
 800ff7a:	6053      	str	r3, [r2, #4]
 800ff7c:	6093      	str	r3, [r2, #8]
 800ff7e:	60d3      	str	r3, [r2, #12]
 800ff80:	6113      	str	r3, [r2, #16]
 800ff82:	6153      	str	r3, [r2, #20]
 800ff84:	4620      	mov	r0, r4
 800ff86:	f7ff ffda 	bl	800ff3e <_ZN19Multiply_expressionC1Ev>
 800ff8a:	617c      	str	r4, [r7, #20]
	exp->pow_exps.push_back(parse_power_expression());
 800ff8c:	697c      	ldr	r4, [r7, #20]
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f7ff ff33 	bl	800fdfa <_ZN6Parser22parse_power_expressionEv>
 800ff94:	4603      	mov	r3, r0
 800ff96:	60fb      	str	r3, [r7, #12]
 800ff98:	f107 030c 	add.w	r3, r7, #12
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	f000 fc98 	bl	80108d4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE9push_backEOS1_>
	while(match_multiply_operator(exp))
 800ffa4:	6979      	ldr	r1, [r7, #20]
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f7ff ff59 	bl	800fe5e <_ZN6Parser23match_multiply_operatorEP19Multiply_expression>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d00f      	beq.n	800ffd2 <_ZN6Parser25parse_multiply_expressionEv+0x70>
	{
		get_next_token();
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7fa fb8a 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		exp->pow_exps.push_back(parse_power_expression());
 800ffb8:	697c      	ldr	r4, [r7, #20]
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f7ff ff1d 	bl	800fdfa <_ZN6Parser22parse_power_expressionEv>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	613b      	str	r3, [r7, #16]
 800ffc4:	f107 0310 	add.w	r3, r7, #16
 800ffc8:	4619      	mov	r1, r3
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f000 fc82 	bl	80108d4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE9push_backEOS1_>
	while(match_multiply_operator(exp))
 800ffd0:	e7e8      	b.n	800ffa4 <_ZN6Parser25parse_multiply_expressionEv+0x42>
	}
	return exp;
 800ffd2:	697b      	ldr	r3, [r7, #20]
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	371c      	adds	r7, #28
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd90      	pop	{r4, r7, pc}

0800ffdc <_ZN6Parser18match_sum_operatorEP14Sum_expression>:

bool Parser::match_sum_operator(Sum_expression* exp)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
	switch(token_buffer.get_type())
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	3308      	adds	r3, #8
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7ff f9ca 	bl	800f384 <_ZN5Token8get_typeEv>
 800fff0:	4603      	mov	r3, r0
 800fff2:	2b1f      	cmp	r3, #31
 800fff4:	d002      	beq.n	800fffc <_ZN6Parser18match_sum_operatorEP14Sum_expression+0x20>
 800fff6:	2b20      	cmp	r3, #32
 800fff8:	d00b      	beq.n	8010012 <_ZN6Parser18match_sum_operatorEP14Sum_expression+0x36>
 800fffa:	e015      	b.n	8010028 <_ZN6Parser18match_sum_operatorEP14Sum_expression+0x4c>
	{
	case TOKEN_PLUS:
		exp->ops.push_back(SUM_OP_PLUS);
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	330c      	adds	r3, #12
 8010000:	2201      	movs	r2, #1
 8010002:	73ba      	strb	r2, [r7, #14]
 8010004:	f107 020e 	add.w	r2, r7, #14
 8010008:	4611      	mov	r1, r2
 801000a:	4618      	mov	r0, r3
 801000c:	f000 fc73 	bl	80108f6 <_ZNSt6vectorI12sum_operatorSaIS0_EE9push_backEOS0_>
		break;
 8010010:	e00c      	b.n	801002c <_ZN6Parser18match_sum_operatorEP14Sum_expression+0x50>
	case TOKEN_MINUS:
		exp->ops.push_back(SUM_OP_MINUS);
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	330c      	adds	r3, #12
 8010016:	2202      	movs	r2, #2
 8010018:	73fa      	strb	r2, [r7, #15]
 801001a:	f107 020f 	add.w	r2, r7, #15
 801001e:	4611      	mov	r1, r2
 8010020:	4618      	mov	r0, r3
 8010022:	f000 fc68 	bl	80108f6 <_ZNSt6vectorI12sum_operatorSaIS0_EE9push_backEOS0_>
		break;
 8010026:	e001      	b.n	801002c <_ZN6Parser18match_sum_operatorEP14Sum_expression+0x50>
	default:
		return false;
 8010028:	2300      	movs	r3, #0
 801002a:	e000      	b.n	801002e <_ZN6Parser18match_sum_operatorEP14Sum_expression+0x52>
	}
	return true;
 801002c:	2301      	movs	r3, #1
}
 801002e:	4618      	mov	r0, r3
 8010030:	3710      	adds	r7, #16
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}

08010036 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8010036:	b580      	push	{r7, lr}
 8010038:	b082      	sub	sp, #8
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	4618      	mov	r0, r3
 8010042:	f000 fc69 	bl	8010918 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE12_Vector_implC1Ev>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4618      	mov	r0, r3
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EEC1Ev>:
      vector() = default;
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	4618      	mov	r0, r3
 801005c:	f7ff ffeb 	bl	8010036 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EEC1Ev>
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	4618      	mov	r0, r3
 8010064:	3708      	adds	r7, #8
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}

0801006a <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EEC1Ev>:
      _Vector_base() = default;
 801006a:	b580      	push	{r7, lr}
 801006c:	b082      	sub	sp, #8
 801006e:	af00      	add	r7, sp, #0
 8010070:	6078      	str	r0, [r7, #4]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	4618      	mov	r0, r3
 8010076:	f000 fc5f 	bl	8010938 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE12_Vector_implC1Ev>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	4618      	mov	r0, r3
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <_ZNSt6vectorI12sum_operatorSaIS0_EEC1Ev>:
      vector() = default;
 8010084:	b580      	push	{r7, lr}
 8010086:	b082      	sub	sp, #8
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	4618      	mov	r0, r3
 8010090:	f7ff ffeb 	bl	801006a <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EEC1Ev>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	4618      	mov	r0, r3
 8010098:	3708      	adds	r7, #8
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <_ZN14Sum_expressionC1Ev>:
	SUM_OP_NONE,
	SUM_OP_PLUS,
	SUM_OP_MINUS
}sum_operator;

class Sum_expression
 801009e:	b580      	push	{r7, lr}
 80100a0:	b082      	sub	sp, #8
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7ff ffd1 	bl	8010050 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EEC1Ev>
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	330c      	adds	r3, #12
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7ff ffe6 	bl	8010084 <_ZNSt6vectorI12sum_operatorSaIS0_EEC1Ev>
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	4618      	mov	r0, r3
 80100bc:	3708      	adds	r7, #8
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}

080100c2 <_ZN6Parser20parse_sum_expressionEv>:

Sum_expression* Parser::parse_sum_expression()
{
 80100c2:	b590      	push	{r4, r7, lr}
 80100c4:	b087      	sub	sp, #28
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
	auto exp = new Sum_expression();
 80100ca:	2018      	movs	r0, #24
 80100cc:	f006 fe2f 	bl	8016d2e <_Znwj>
 80100d0:	4603      	mov	r3, r0
 80100d2:	461c      	mov	r4, r3
 80100d4:	4622      	mov	r2, r4
 80100d6:	2300      	movs	r3, #0
 80100d8:	6013      	str	r3, [r2, #0]
 80100da:	6053      	str	r3, [r2, #4]
 80100dc:	6093      	str	r3, [r2, #8]
 80100de:	60d3      	str	r3, [r2, #12]
 80100e0:	6113      	str	r3, [r2, #16]
 80100e2:	6153      	str	r3, [r2, #20]
 80100e4:	4620      	mov	r0, r4
 80100e6:	f7ff ffda 	bl	801009e <_ZN14Sum_expressionC1Ev>
 80100ea:	617c      	str	r4, [r7, #20]
	exp->mult_exps.push_back(parse_multiply_expression());
 80100ec:	697c      	ldr	r4, [r7, #20]
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f7ff ff37 	bl	800ff62 <_ZN6Parser25parse_multiply_expressionEv>
 80100f4:	4603      	mov	r3, r0
 80100f6:	60fb      	str	r3, [r7, #12]
 80100f8:	f107 030c 	add.w	r3, r7, #12
 80100fc:	4619      	mov	r1, r3
 80100fe:	4620      	mov	r0, r4
 8010100:	f000 fc2a 	bl	8010958 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE9push_backEOS1_>
	while(match_sum_operator(exp))
 8010104:	6979      	ldr	r1, [r7, #20]
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f7ff ff68 	bl	800ffdc <_ZN6Parser18match_sum_operatorEP14Sum_expression>
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	d00f      	beq.n	8010132 <_ZN6Parser20parse_sum_expressionEv+0x70>
	{
		get_next_token();
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f7fa fada 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		exp->mult_exps.push_back(parse_multiply_expression());
 8010118:	697c      	ldr	r4, [r7, #20]
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f7ff ff21 	bl	800ff62 <_ZN6Parser25parse_multiply_expressionEv>
 8010120:	4603      	mov	r3, r0
 8010122:	613b      	str	r3, [r7, #16]
 8010124:	f107 0310 	add.w	r3, r7, #16
 8010128:	4619      	mov	r1, r3
 801012a:	4620      	mov	r0, r4
 801012c:	f000 fc14 	bl	8010958 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE9push_backEOS1_>
	while(match_sum_operator(exp))
 8010130:	e7e8      	b.n	8010104 <_ZN6Parser20parse_sum_expressionEv+0x42>
	}
	return exp;
 8010132:	697b      	ldr	r3, [r7, #20]
}
 8010134:	4618      	mov	r0, r3
 8010136:	371c      	adds	r7, #28
 8010138:	46bd      	mov	sp, r7
 801013a:	bd90      	pop	{r4, r7, pc}

0801013c <_ZN6Parser23match_relation_operatorEP19Relation_expression>:

bool Parser::match_relation_operator(Relation_expression* exp)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
	switch (token_buffer.get_type())
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	3308      	adds	r3, #8
 801014a:	4618      	mov	r0, r3
 801014c:	f7ff f91a 	bl	800f384 <_ZN5Token8get_typeEv>
 8010150:	4603      	mov	r3, r0
 8010152:	3b19      	subs	r3, #25
 8010154:	2b03      	cmp	r3, #3
 8010156:	d81b      	bhi.n	8010190 <_ZN6Parser23match_relation_operatorEP19Relation_expression+0x54>
 8010158:	a201      	add	r2, pc, #4	; (adr r2, 8010160 <_ZN6Parser23match_relation_operatorEP19Relation_expression+0x24>)
 801015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801015e:	bf00      	nop
 8010160:	08010181 	.word	0x08010181
 8010164:	08010189 	.word	0x08010189
 8010168:	08010171 	.word	0x08010171
 801016c:	08010179 	.word	0x08010179
	{
	case TOKEN_SMALLER_THAN:
		exp->op = REL_OP_SMALLER;
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	2201      	movs	r2, #1
 8010174:	721a      	strb	r2, [r3, #8]
		break;
 8010176:	e010      	b.n	801019a <_ZN6Parser23match_relation_operatorEP19Relation_expression+0x5e>
	case TOKEN_SMALLER_OR_EQUAL:
		exp->op = REL_OP_SMALLER_EQUAL;
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	2202      	movs	r2, #2
 801017c:	721a      	strb	r2, [r3, #8]
		break;
 801017e:	e00c      	b.n	801019a <_ZN6Parser23match_relation_operatorEP19Relation_expression+0x5e>
	case TOKEN_GREATER_THAN:
		exp->op = REL_OP_GREATER;
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	2203      	movs	r2, #3
 8010184:	721a      	strb	r2, [r3, #8]
		break;
 8010186:	e008      	b.n	801019a <_ZN6Parser23match_relation_operatorEP19Relation_expression+0x5e>
	case TOKEN_GREATER_OR_EQUAL:
		exp->op = REL_OP_SMALLER_EQUAL;
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	2202      	movs	r2, #2
 801018c:	721a      	strb	r2, [r3, #8]
		break;
 801018e:	e004      	b.n	801019a <_ZN6Parser23match_relation_operatorEP19Relation_expression+0x5e>
	default:
		exp->right_sum_exp = nullptr;
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	2200      	movs	r2, #0
 8010194:	605a      	str	r2, [r3, #4]
		return false;
 8010196:	2300      	movs	r3, #0
 8010198:	e000      	b.n	801019c <_ZN6Parser23match_relation_operatorEP19Relation_expression+0x60>
	}
	return true;
 801019a:	2301      	movs	r3, #1
}
 801019c:	4618      	mov	r0, r3
 801019e:	3708      	adds	r7, #8
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <_ZN6Parser25parse_relation_expressionEv>:

Relation_expression* Parser::parse_relation_expression()
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b084      	sub	sp, #16
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
	auto exp = new Relation_expression();
 80101ac:	200c      	movs	r0, #12
 80101ae:	f006 fdbe 	bl	8016d2e <_Znwj>
 80101b2:	4603      	mov	r3, r0
 80101b4:	2200      	movs	r2, #0
 80101b6:	601a      	str	r2, [r3, #0]
 80101b8:	2200      	movs	r2, #0
 80101ba:	605a      	str	r2, [r3, #4]
 80101bc:	2200      	movs	r2, #0
 80101be:	721a      	strb	r2, [r3, #8]
 80101c0:	60fb      	str	r3, [r7, #12]
	exp->left_sum_exp = parse_sum_expression();
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7ff ff7d 	bl	80100c2 <_ZN6Parser20parse_sum_expressionEv>
 80101c8:	4602      	mov	r2, r0
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	601a      	str	r2, [r3, #0]
	if(match_relation_operator(exp))
 80101ce:	68f9      	ldr	r1, [r7, #12]
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f7ff ffb3 	bl	801013c <_ZN6Parser23match_relation_operatorEP19Relation_expression>
 80101d6:	4603      	mov	r3, r0
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d008      	beq.n	80101ee <_ZN6Parser25parse_relation_expressionEv+0x4a>
	{
		get_next_token();
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f7fa fa75 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		exp->right_sum_exp = parse_sum_expression();
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f7ff ff6d 	bl	80100c2 <_ZN6Parser20parse_sum_expressionEv>
 80101e8:	4602      	mov	r2, r0
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	605a      	str	r2, [r3, #4]
	}
	return exp;
 80101ee:	68fb      	ldr	r3, [r7, #12]
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3710      	adds	r7, #16
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <_ZN6Parser22match_compare_operatorEP18Compare_expression>:

bool Parser::match_compare_operator(Compare_expression *exp)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
	switch (token_buffer.get_type())
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	3308      	adds	r3, #8
 8010206:	4618      	mov	r0, r3
 8010208:	f7ff f8bc 	bl	800f384 <_ZN5Token8get_typeEv>
 801020c:	4603      	mov	r3, r0
 801020e:	2b1d      	cmp	r3, #29
 8010210:	d002      	beq.n	8010218 <_ZN6Parser22match_compare_operatorEP18Compare_expression+0x20>
 8010212:	2b1e      	cmp	r3, #30
 8010214:	d004      	beq.n	8010220 <_ZN6Parser22match_compare_operatorEP18Compare_expression+0x28>
 8010216:	e007      	b.n	8010228 <_ZN6Parser22match_compare_operatorEP18Compare_expression+0x30>
	{
	case TOKEN_EQUALS:
		exp->op = COMP_OP_EQUAL;
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	2201      	movs	r2, #1
 801021c:	721a      	strb	r2, [r3, #8]
		break;
 801021e:	e008      	b.n	8010232 <_ZN6Parser22match_compare_operatorEP18Compare_expression+0x3a>
	case TOKEN_NOT_EQUAL:
		exp->op = COMP_OP_NOT_EQUAL;
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	2202      	movs	r2, #2
 8010224:	721a      	strb	r2, [r3, #8]
		break;
 8010226:	e004      	b.n	8010232 <_ZN6Parser22match_compare_operatorEP18Compare_expression+0x3a>
	default:
		exp->right_rel_exp = nullptr;
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	2200      	movs	r2, #0
 801022c:	605a      	str	r2, [r3, #4]
		return false;
 801022e:	2300      	movs	r3, #0
 8010230:	e000      	b.n	8010234 <_ZN6Parser22match_compare_operatorEP18Compare_expression+0x3c>
	}
	return true;
 8010232:	2301      	movs	r3, #1
}
 8010234:	4618      	mov	r0, r3
 8010236:	3708      	adds	r7, #8
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}

0801023c <_ZN6Parser24parse_compare_expressionEv>:

Compare_expression* Parser::parse_compare_expression()
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b084      	sub	sp, #16
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
	auto exp = new Compare_expression();
 8010244:	200c      	movs	r0, #12
 8010246:	f006 fd72 	bl	8016d2e <_Znwj>
 801024a:	4603      	mov	r3, r0
 801024c:	2200      	movs	r2, #0
 801024e:	601a      	str	r2, [r3, #0]
 8010250:	2200      	movs	r2, #0
 8010252:	605a      	str	r2, [r3, #4]
 8010254:	2200      	movs	r2, #0
 8010256:	721a      	strb	r2, [r3, #8]
 8010258:	60fb      	str	r3, [r7, #12]
	exp->left_rel_exp = parse_relation_expression();
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f7ff ffa2 	bl	80101a4 <_ZN6Parser25parse_relation_expressionEv>
 8010260:	4602      	mov	r2, r0
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	601a      	str	r2, [r3, #0]
	if(match_compare_operator(exp))
 8010266:	68f9      	ldr	r1, [r7, #12]
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f7ff ffc5 	bl	80101f8 <_ZN6Parser22match_compare_operatorEP18Compare_expression>
 801026e:	4603      	mov	r3, r0
 8010270:	2b00      	cmp	r3, #0
 8010272:	d008      	beq.n	8010286 <_ZN6Parser24parse_compare_expressionEv+0x4a>
	{
		get_next_token();
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f7fa fa29 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		exp->right_rel_exp = parse_relation_expression();
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f7ff ff92 	bl	80101a4 <_ZN6Parser25parse_relation_expressionEv>
 8010280:	4602      	mov	r2, r0
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	605a      	str	r2, [r3, #4]
	}
	return exp;
 8010286:	68fb      	ldr	r3, [r7, #12]
}
 8010288:	4618      	mov	r0, r3
 801028a:	3710      	adds	r7, #16
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	4618      	mov	r0, r3
 801029c:	f000 fb6d 	bl	801097a <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE12_Vector_implC1Ev>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	4618      	mov	r0, r3
 80102a4:	3708      	adds	r7, #8
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}

080102aa <_ZNSt6vectorIP18Compare_expressionSaIS1_EEC1Ev>:
      vector() = default;
 80102aa:	b580      	push	{r7, lr}
 80102ac:	b082      	sub	sp, #8
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	6078      	str	r0, [r7, #4]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7ff ffeb 	bl	8010290 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EEC1Ev>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	4618      	mov	r0, r3
 80102be:	3708      	adds	r7, #8
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <_ZN14And_expressionC1Ev>:
	Relation_expression* left_rel_exp;
	Relation_expression* right_rel_exp;
	comp_operator op;
};

class And_expression
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b082      	sub	sp, #8
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7ff ffeb 	bl	80102aa <_ZNSt6vectorIP18Compare_expressionSaIS1_EEC1Ev>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	4618      	mov	r0, r3
 80102d8:	3708      	adds	r7, #8
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}

080102de <_ZN6Parser20parse_and_expressionEv>:

And_expression* Parser::parse_and_expression()
{
 80102de:	b590      	push	{r4, r7, lr}
 80102e0:	b087      	sub	sp, #28
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
	auto exp = new And_expression();
 80102e6:	200c      	movs	r0, #12
 80102e8:	f006 fd21 	bl	8016d2e <_Znwj>
 80102ec:	4603      	mov	r3, r0
 80102ee:	461c      	mov	r4, r3
 80102f0:	4622      	mov	r2, r4
 80102f2:	2300      	movs	r3, #0
 80102f4:	6013      	str	r3, [r2, #0]
 80102f6:	6053      	str	r3, [r2, #4]
 80102f8:	6093      	str	r3, [r2, #8]
 80102fa:	4620      	mov	r0, r4
 80102fc:	f7ff ffe2 	bl	80102c4 <_ZN14And_expressionC1Ev>
 8010300:	617c      	str	r4, [r7, #20]
	exp->comp_exps.push_back(parse_compare_expression());
 8010302:	697c      	ldr	r4, [r7, #20]
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f7ff ff99 	bl	801023c <_ZN6Parser24parse_compare_expressionEv>
 801030a:	4603      	mov	r3, r0
 801030c:	60fb      	str	r3, [r7, #12]
 801030e:	f107 030c 	add.w	r3, r7, #12
 8010312:	4619      	mov	r1, r3
 8010314:	4620      	mov	r0, r4
 8010316:	f000 fb40 	bl	801099a <_ZNSt6vectorIP18Compare_expressionSaIS1_EE9push_backEOS1_>
	while(token_buffer.get_type() == TOKEN_AND)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	3308      	adds	r3, #8
 801031e:	4618      	mov	r0, r3
 8010320:	f7ff f830 	bl	800f384 <_ZN5Token8get_typeEv>
 8010324:	4603      	mov	r3, r0
 8010326:	2b16      	cmp	r3, #22
 8010328:	bf0c      	ite	eq
 801032a:	2301      	moveq	r3, #1
 801032c:	2300      	movne	r3, #0
 801032e:	b2db      	uxtb	r3, r3
 8010330:	2b00      	cmp	r3, #0
 8010332:	d00f      	beq.n	8010354 <_ZN6Parser20parse_and_expressionEv+0x76>
	{
		get_next_token();
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f7fa f9c9 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		exp->comp_exps.push_back(parse_compare_expression());
 801033a:	697c      	ldr	r4, [r7, #20]
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f7ff ff7d 	bl	801023c <_ZN6Parser24parse_compare_expressionEv>
 8010342:	4603      	mov	r3, r0
 8010344:	613b      	str	r3, [r7, #16]
 8010346:	f107 0310 	add.w	r3, r7, #16
 801034a:	4619      	mov	r1, r3
 801034c:	4620      	mov	r0, r4
 801034e:	f000 fb24 	bl	801099a <_ZNSt6vectorIP18Compare_expressionSaIS1_EE9push_backEOS1_>
	while(token_buffer.get_type() == TOKEN_AND)
 8010352:	e7e2      	b.n	801031a <_ZN6Parser20parse_and_expressionEv+0x3c>
	}
	return exp;
 8010354:	697b      	ldr	r3, [r7, #20]
}
 8010356:	4618      	mov	r0, r3
 8010358:	371c      	adds	r7, #28
 801035a:	46bd      	mov	sp, r7
 801035c:	bd90      	pop	{r4, r7, pc}

0801035e <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EEC1Ev>:
      _Vector_base() = default;
 801035e:	b580      	push	{r7, lr}
 8010360:	b082      	sub	sp, #8
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	4618      	mov	r0, r3
 801036a:	f000 fb27 	bl	80109bc <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE12_Vector_implC1Ev>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	4618      	mov	r0, r3
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <_ZNSt6vectorIP14And_expressionSaIS1_EEC1Ev>:
      vector() = default;
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	4618      	mov	r0, r3
 8010384:	f7ff ffeb 	bl	801035e <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EEC1Ev>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	4618      	mov	r0, r3
 801038c:	3708      	adds	r7, #8
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}

08010392 <_ZN10ExpressionC1Ev>:
public:
	~And_expression();
	std::vector<Compare_expression*> comp_exps;
};

class Expression
 8010392:	b580      	push	{r7, lr}
 8010394:	b082      	sub	sp, #8
 8010396:	af00      	add	r7, sp, #0
 8010398:	6078      	str	r0, [r7, #4]
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	4618      	mov	r0, r3
 801039e:	f7ff ffeb 	bl	8010378 <_ZNSt6vectorIP14And_expressionSaIS1_EEC1Ev>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	4618      	mov	r0, r3
 80103a6:	3708      	adds	r7, #8
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <_ZN6Parser16parse_expressionEv>:

Expression* Parser::parse_expression()
{
 80103ac:	b590      	push	{r4, r7, lr}
 80103ae:	b087      	sub	sp, #28
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
	auto exp = new Expression();
 80103b4:	200c      	movs	r0, #12
 80103b6:	f006 fcba 	bl	8016d2e <_Znwj>
 80103ba:	4603      	mov	r3, r0
 80103bc:	461c      	mov	r4, r3
 80103be:	4622      	mov	r2, r4
 80103c0:	2300      	movs	r3, #0
 80103c2:	6013      	str	r3, [r2, #0]
 80103c4:	6053      	str	r3, [r2, #4]
 80103c6:	6093      	str	r3, [r2, #8]
 80103c8:	4620      	mov	r0, r4
 80103ca:	f7ff ffe2 	bl	8010392 <_ZN10ExpressionC1Ev>
 80103ce:	617c      	str	r4, [r7, #20]
	exp->and_exps.push_back(parse_and_expression());
 80103d0:	697c      	ldr	r4, [r7, #20]
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f7ff ff83 	bl	80102de <_ZN6Parser20parse_and_expressionEv>
 80103d8:	4603      	mov	r3, r0
 80103da:	60fb      	str	r3, [r7, #12]
 80103dc:	f107 030c 	add.w	r3, r7, #12
 80103e0:	4619      	mov	r1, r3
 80103e2:	4620      	mov	r0, r4
 80103e4:	f000 fafa 	bl	80109dc <_ZNSt6vectorIP14And_expressionSaIS1_EE9push_backEOS1_>
	while(token_buffer.get_type() == TOKEN_OR)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	3308      	adds	r3, #8
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7fe ffc9 	bl	800f384 <_ZN5Token8get_typeEv>
 80103f2:	4603      	mov	r3, r0
 80103f4:	2b15      	cmp	r3, #21
 80103f6:	bf0c      	ite	eq
 80103f8:	2301      	moveq	r3, #1
 80103fa:	2300      	movne	r3, #0
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d00f      	beq.n	8010422 <_ZN6Parser16parse_expressionEv+0x76>
	{
		get_next_token();
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f7fa f962 	bl	800a6cc <_ZN6Parser14get_next_tokenEv>
		exp->and_exps.push_back(parse_and_expression());
 8010408:	697c      	ldr	r4, [r7, #20]
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f7ff ff67 	bl	80102de <_ZN6Parser20parse_and_expressionEv>
 8010410:	4603      	mov	r3, r0
 8010412:	613b      	str	r3, [r7, #16]
 8010414:	f107 0310 	add.w	r3, r7, #16
 8010418:	4619      	mov	r1, r3
 801041a:	4620      	mov	r0, r4
 801041c:	f000 fade 	bl	80109dc <_ZNSt6vectorIP14And_expressionSaIS1_EE9push_backEOS1_>
	while(token_buffer.get_type() == TOKEN_OR)
 8010420:	e7e2      	b.n	80103e8 <_ZN6Parser16parse_expressionEv+0x3c>
	}
	return exp;
 8010422:	697b      	ldr	r3, [r7, #20]
}
 8010424:	4618      	mov	r0, r3
 8010426:	371c      	adds	r7, #28
 8010428:	46bd      	mov	sp, r7
 801042a:	bd90      	pop	{r4, r7, pc}

0801042c <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 801042c:	b590      	push	{r4, r7, lr}
 801042e:	b085      	sub	sp, #20
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 8010436:	2305      	movs	r3, #5
 8010438:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f7f4 f99b 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8010440:	4603      	mov	r3, r0
 8010442:	2b05      	cmp	r3, #5
 8010444:	bf0c      	ite	eq
 8010446:	2301      	moveq	r3, #1
 8010448:	2300      	movne	r3, #0
 801044a:	b2db      	uxtb	r3, r3
 801044c:	2b00      	cmp	r3, #0
 801044e:	d00a      	beq.n	8010466 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 8010450:	6838      	ldr	r0, [r7, #0]
 8010452:	f7fb f83d 	bl	800b4d0 <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 8010456:	4603      	mov	r3, r0
 8010458:	681c      	ldr	r4, [r3, #0]
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f7f4 fd1a 	bl	8004e94 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8010460:	4603      	mov	r3, r0
 8010462:	601c      	str	r4, [r3, #0]
 8010464:	e007      	b.n	8010476 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS9_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8010466:	6838      	ldr	r0, [r7, #0]
 8010468:	f7fb f832 	bl	800b4d0 <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 801046c:	4603      	mov	r3, r0
 801046e:	4619      	mov	r1, r3
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f000 fac4 	bl	80109fe <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj5EJS9_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 8010476:	687b      	ldr	r3, [r7, #4]
	}
 8010478:	4618      	mov	r0, r3
 801047a:	3714      	adds	r7, #20
 801047c:	46bd      	mov	sp, r7
 801047e:	bd90      	pop	{r4, r7, pc}

08010480 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 8010480:	b590      	push	{r4, r7, lr}
 8010482:	b085      	sub	sp, #20
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 801048a:	2304      	movs	r3, #4
 801048c:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f7f4 f971 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8010494:	4603      	mov	r3, r0
 8010496:	2b04      	cmp	r3, #4
 8010498:	bf0c      	ite	eq
 801049a:	2301      	moveq	r3, #1
 801049c:	2300      	movne	r3, #0
 801049e:	b2db      	uxtb	r3, r3
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d00a      	beq.n	80104ba <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 80104a4:	6838      	ldr	r0, [r7, #0]
 80104a6:	f000 fac3 	bl	8010a30 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>
 80104aa:	4603      	mov	r3, r0
 80104ac:	681c      	ldr	r4, [r3, #0]
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f7f4 fc58 	bl	8004d64 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 80104b4:	4603      	mov	r3, r0
 80104b6:	601c      	str	r4, [r3, #0]
 80104b8:	e007      	b.n	80104ca <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS7_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 80104ba:	6838      	ldr	r0, [r7, #0]
 80104bc:	f000 fab8 	bl	8010a30 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>
 80104c0:	4603      	mov	r3, r0
 80104c2:	4619      	mov	r1, r3
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f000 fabe 	bl	8010a46 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj4EJS7_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 80104ca:	687b      	ldr	r3, [r7, #4]
	}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3714      	adds	r7, #20
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd90      	pop	{r4, r7, pc}

080104d4 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b082      	sub	sp, #8
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	7039      	strb	r1, [r7, #0]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4611      	mov	r1, r2
 80104e2:	4618      	mov	r0, r3
 80104e4:	f000 fae6 	bl	8010ab4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4618      	mov	r0, r3
 80104ec:	3708      	adds	r7, #8
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}

080104f2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b082      	sub	sp, #8
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	7039      	strb	r1, [r7, #0]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	4611      	mov	r1, r2
 8010500:	4618      	mov	r0, r3
 8010502:	f7ff ffe7 	bl	80104d4 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	4618      	mov	r0, r3
 801050a:	3708      	adds	r7, #8
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8010510:	b580      	push	{r7, lr}
 8010512:	b082      	sub	sp, #8
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	7039      	strb	r1, [r7, #0]
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	4611      	mov	r1, r2
 801051e:	4618      	mov	r0, r3
 8010520:	f7ff ffe7 	bl	80104f2 <_ZNSt8__detail9__variant15_Move_ctor_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	4618      	mov	r0, r3
 8010528:	3708      	adds	r7, #8
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 801052e:	b580      	push	{r7, lr}
 8010530:	b082      	sub	sp, #8
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
 8010536:	7039      	strb	r1, [r7, #0]
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	4611      	mov	r1, r2
 801053c:	4618      	mov	r0, r3
 801053e:	f7ff ffe7 	bl	8010510 <_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	4618      	mov	r0, r3
 8010546:	3708      	adds	r7, #8
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	7039      	strb	r1, [r7, #0]
	: _Base(__i, std::forward<_Args>(__args)...)
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	4611      	mov	r1, r2
 801055a:	4618      	mov	r0, r3
 801055c:	f7ff ffe7 	bl	801052e <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEECI1NS0_16_Variant_storageILb0EJbifS7_S9_SB_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	4618      	mov	r0, r3
 8010564:	3708      	adds	r7, #8
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}

0801056a <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1Ev>:
      _Variant_base()
 801056a:	b580      	push	{r7, lr}
 801056c:	b082      	sub	sp, #8
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
      : _Variant_base(in_place_index<0>) { }
 8010572:	4619      	mov	r1, r3
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f7ff ffe9 	bl	801054c <_ZNSt8__detail9__variant13_Variant_baseIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4618      	mov	r0, r3
 801057e:	3708      	adds	r7, #8
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}

08010584 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 8010584:	b590      	push	{r4, r7, lr}
 8010586:	b085      	sub	sp, #20
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 801058e:	2300      	movs	r3, #0
 8010590:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f7f4 f8ef 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8010598:	4603      	mov	r3, r0
 801059a:	2b00      	cmp	r3, #0
 801059c:	bf0c      	ite	eq
 801059e:	2301      	moveq	r3, #1
 80105a0:	2300      	movne	r3, #0
 80105a2:	b2db      	uxtb	r3, r3
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00b      	beq.n	80105c0 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3c>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 80105a8:	6838      	ldr	r0, [r7, #0]
 80105aa:	f7fd fdd1 	bl	800e150 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80105ae:	4603      	mov	r3, r0
 80105b0:	781c      	ldrb	r4, [r3, #0]
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f000 fa90 	bl	8010ad8 <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 80105b8:	4603      	mov	r3, r0
 80105ba:	4622      	mov	r2, r4
 80105bc:	701a      	strb	r2, [r3, #0]
 80105be:	e007      	b.n	80105d0 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIbEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4c>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 80105c0:	6838      	ldr	r0, [r7, #0]
 80105c2:	f7fd fdc5 	bl	800e150 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80105c6:	4603      	mov	r3, r0
 80105c8:	4619      	mov	r1, r3
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 faa0 	bl	8010b10 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj0EJbEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 80105d0:	687b      	ldr	r3, [r7, #4]
	}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3714      	adds	r7, #20
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd90      	pop	{r4, r7, pc}

080105da <_ZSt3getIiJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEOT_OSt7variantIJDpT0_EE>:
    constexpr _Tp&& get(variant<_Types...>&& __v)
 80105da:	b580      	push	{r7, lr}
 80105dc:	b082      	sub	sp, #8
 80105de:	af00      	add	r7, sp, #0
 80105e0:	6078      	str	r0, [r7, #4]
	std::move(__v));
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f7fa feca 	bl	800b37c <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 80105e8:	4603      	mov	r3, r0
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
 80105ea:	4618      	mov	r0, r3
 80105ec:	f000 fade 	bl	8010bac <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>
 80105f0:	4603      	mov	r3, r0
    }
 80105f2:	4618      	mov	r0, r3
 80105f4:	3708      	adds	r7, #8
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}

080105fa <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIiEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 80105fa:	b590      	push	{r4, r7, lr}
 80105fc:	b085      	sub	sp, #20
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
 8010602:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 8010604:	2301      	movs	r3, #1
 8010606:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f7f4 f8b4 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 801060e:	4603      	mov	r3, r0
 8010610:	2b01      	cmp	r3, #1
 8010612:	bf0c      	ite	eq
 8010614:	2301      	moveq	r3, #1
 8010616:	2300      	movne	r3, #0
 8010618:	b2db      	uxtb	r3, r3
 801061a:	2b00      	cmp	r3, #0
 801061c:	d00a      	beq.n	8010634 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIiEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 801061e:	6838      	ldr	r0, [r7, #0]
 8010620:	f7f7 f86a 	bl	80076f8 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8010624:	4603      	mov	r3, r0
 8010626:	681c      	ldr	r4, [r3, #0]
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f000 fadf 	bl	8010bec <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 801062e:	4603      	mov	r3, r0
 8010630:	601c      	str	r4, [r3, #0]
 8010632:	e007      	b.n	8010644 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIiEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8010634:	6838      	ldr	r0, [r7, #0]
 8010636:	f7f7 f85f 	bl	80076f8 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 801063a:	4603      	mov	r3, r0
 801063c:	4619      	mov	r1, r3
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f000 faf0 	bl	8010c24 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj1EJiEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 8010644:	687b      	ldr	r3, [r7, #4]
	}
 8010646:	4618      	mov	r0, r3
 8010648:	3714      	adds	r7, #20
 801064a:	46bd      	mov	sp, r7
 801064c:	bd90      	pop	{r4, r7, pc}

0801064e <_ZSt3getIfJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEOT_OSt7variantIJDpT0_EE>:
    constexpr _Tp&& get(variant<_Types...>&& __v)
 801064e:	b580      	push	{r7, lr}
 8010650:	b082      	sub	sp, #8
 8010652:	af00      	add	r7, sp, #0
 8010654:	6078      	str	r0, [r7, #4]
	std::move(__v));
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f7fa fe90 	bl	800b37c <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 801065c:	4603      	mov	r3, r0
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
 801065e:	4618      	mov	r0, r3
 8010660:	f000 fb40 	bl	8010ce4 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>
 8010664:	4603      	mov	r3, r0
    }
 8010666:	4618      	mov	r0, r3
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}

0801066e <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIfEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 801066e:	b590      	push	{r4, r7, lr}
 8010670:	b085      	sub	sp, #20
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
 8010676:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 8010678:	2302      	movs	r3, #2
 801067a:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f7f4 f87a 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8010682:	4603      	mov	r3, r0
 8010684:	2b02      	cmp	r3, #2
 8010686:	bf0c      	ite	eq
 8010688:	2301      	moveq	r3, #1
 801068a:	2300      	movne	r3, #0
 801068c:	b2db      	uxtb	r3, r3
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00a      	beq.n	80106a8 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIfEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 8010692:	6838      	ldr	r0, [r7, #0]
 8010694:	f7f7 f867 	bl	8007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8010698:	4603      	mov	r3, r0
 801069a:	681c      	ldr	r4, [r3, #0]
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f000 fb41 	bl	8010d24 <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 80106a2:	4603      	mov	r3, r0
 80106a4:	601c      	str	r4, [r3, #0]
 80106a6:	e007      	b.n	80106b8 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIfEENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 80106a8:	6838      	ldr	r0, [r7, #0]
 80106aa:	f7f7 f85c 	bl	8007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80106ae:	4603      	mov	r3, r0
 80106b0:	4619      	mov	r1, r3
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f000 fb52 	bl	8010d5c <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj2EJfEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 80106b8:	687b      	ldr	r3, [r7, #4]
	}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3714      	adds	r7, #20
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd90      	pop	{r4, r7, pc}

080106c2 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_>:
	operator=(_Tp&& __rhs)
 80106c2:	b590      	push	{r4, r7, lr}
 80106c4:	b085      	sub	sp, #20
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	6078      	str	r0, [r7, #4]
 80106ca:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 80106cc:	2303      	movs	r3, #3
 80106ce:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	f7f4 f850 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 80106d6:	4603      	mov	r3, r0
 80106d8:	2b03      	cmp	r3, #3
 80106da:	bf0c      	ite	eq
 80106dc:	2301      	moveq	r3, #1
 80106de:	2300      	movne	r3, #0
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d00c      	beq.n	8010700 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x3e>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 80106e6:	6838      	ldr	r0, [r7, #0]
 80106e8:	f7f6 ffcf 	bl	800768a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80106ec:	4604      	mov	r4, r0
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f000 fb4e 	bl	8010d90 <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 80106f4:	4603      	mov	r3, r0
 80106f6:	4621      	mov	r1, r4
 80106f8:	4618      	mov	r0, r3
 80106fa:	f006 fcfc 	bl	80170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80106fe:	e007      	b.n	8010710 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEaSIS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EESA_E4typeEE18is_constructible_vISH_SE_E15is_assignable_vIRSH_SE_EERSA_E4typeESF_+0x4e>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8010700:	6838      	ldr	r0, [r7, #0]
 8010702:	f7f6 ffc2 	bl	800768a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8010706:	4603      	mov	r3, r0
 8010708:	4619      	mov	r1, r3
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f000 fb5c 	bl	8010dc8 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj3EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>
	  return *this;
 8010710:	687b      	ldr	r3, [r7, #4]
	}
 8010712:	4618      	mov	r0, r3
 8010714:	3714      	adds	r7, #20
 8010716:	46bd      	mov	sp, r7
 8010718:	bd90      	pop	{r4, r7, pc}

0801071a <_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 801071a:	b580      	push	{r7, lr}
 801071c:	b082      	sub	sp, #8
 801071e:	af00      	add	r7, sp, #0
 8010720:	6078      	str	r0, [r7, #4]
 8010722:	7039      	strb	r1, [r7, #0]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	4611      	mov	r1, r2
 8010728:	4618      	mov	r0, r3
 801072a:	f000 fb84 	bl	8010e36 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP17Primal_expressionP10ExpressionEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	4618      	mov	r0, r3
 8010732:	3708      	adds	r7, #8
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8010738:	b580      	push	{r7, lr}
 801073a:	b082      	sub	sp, #8
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	7039      	strb	r1, [r7, #0]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	4611      	mov	r1, r2
 8010746:	4618      	mov	r0, r3
 8010748:	f7ff ffe7 	bl	801071a <_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	4618      	mov	r0, r3
 8010750:	3708      	adds	r7, #8
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}

08010756 <_ZNSt8__detail9__variant17_Copy_assign_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8010756:	b580      	push	{r7, lr}
 8010758:	b082      	sub	sp, #8
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
 801075e:	7039      	strb	r1, [r7, #0]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	4611      	mov	r1, r2
 8010764:	4618      	mov	r0, r3
 8010766:	f7ff ffe7 	bl	8010738 <_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4618      	mov	r0, r3
 801076e:	3708      	adds	r7, #8
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}

08010774 <_ZNSt8__detail9__variant17_Move_assign_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
      using _Base::_Base;
 8010774:	b580      	push	{r7, lr}
 8010776:	b082      	sub	sp, #8
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	7039      	strb	r1, [r7, #0]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	4611      	mov	r1, r2
 8010782:	4618      	mov	r0, r3
 8010784:	f7ff ffe7 	bl	8010756 <_ZNSt8__detail9__variant17_Copy_assign_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	4618      	mov	r0, r3
 801078c:	3708      	adds	r7, #8
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}

08010792 <_ZNSt8__detail9__variant13_Variant_baseIJP17Primal_expressionP10ExpressionEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 8010792:	b580      	push	{r7, lr}
 8010794:	b082      	sub	sp, #8
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
 801079a:	7039      	strb	r1, [r7, #0]
	: _Base(__i, std::forward<_Args>(__args)...)
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	4611      	mov	r1, r2
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7ff ffe7 	bl	8010774 <_ZNSt8__detail9__variant17_Move_assign_baseILb1EJP17Primal_expressionP10ExpressionEECI1NS0_16_Variant_storageILb1EJS3_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
	{ }
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	4618      	mov	r0, r3
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}

080107b0 <_ZNSt8__detail9__variant13_Variant_baseIJP17Primal_expressionP10ExpressionEEC1Ev>:
      _Variant_base()
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
      : _Variant_base(in_place_index<0>) { }
 80107b8:	4619      	mov	r1, r3
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f7ff ffe9 	bl	8010792 <_ZNSt8__detail9__variant13_Variant_baseIJP17Primal_expressionP10ExpressionEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	4618      	mov	r0, r3
 80107c4:	3708      	adds	r7, #8
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}

080107ca <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>:
	operator=(_Tp&& __rhs)
 80107ca:	b590      	push	{r4, r7, lr}
 80107cc:	b085      	sub	sp, #20
 80107ce:	af00      	add	r7, sp, #0
 80107d0:	6078      	str	r0, [r7, #4]
 80107d2:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 80107d4:	2301      	movs	r3, #1
 80107d6:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f7f4 f819 	bl	8004810 <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 80107de:	4603      	mov	r3, r0
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	bf0c      	ite	eq
 80107e4:	2301      	moveq	r3, #1
 80107e6:	2300      	movne	r3, #0
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00a      	beq.n	8010804 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 80107ee:	6838      	ldr	r0, [r7, #0]
 80107f0:	f7fb fa00 	bl	800bbf4 <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80107f4:	4603      	mov	r3, r0
 80107f6:	681c      	ldr	r4, [r3, #0]
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f7f4 fb9b 	bl	8004f34 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 80107fe:	4603      	mov	r3, r0
 8010800:	601c      	str	r4, [r3, #0]
 8010802:	e007      	b.n	8010814 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8010804:	6838      	ldr	r0, [r7, #0]
 8010806:	f7fb f9f5 	bl	800bbf4 <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 801080a:	4603      	mov	r3, r0
 801080c:	4619      	mov	r1, r3
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f000 fb23 	bl	8010e5a <_ZNSt7variantIJP17Primal_expressionP10ExpressionEE7emplaceILj1EJS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>
	  return *this;
 8010814:	687b      	ldr	r3, [r7, #4]
	}
 8010816:	4618      	mov	r0, r3
 8010818:	3714      	adds	r7, #20
 801081a:	46bd      	mov	sp, r7
 801081c:	bd90      	pop	{r4, r7, pc}

0801081e <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_>:
	operator=(_Tp&& __rhs)
 801081e:	b590      	push	{r4, r7, lr}
 8010820:	b085      	sub	sp, #20
 8010822:	af00      	add	r7, sp, #0
 8010824:	6078      	str	r0, [r7, #4]
 8010826:	6039      	str	r1, [r7, #0]
	  constexpr auto __index = __accepted_index<_Tp&&>;
 8010828:	2300      	movs	r3, #0
 801082a:	60fb      	str	r3, [r7, #12]
	  if (index() == __index)
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f7f3 ffef 	bl	8004810 <_ZNKSt7variantIJP17Primal_expressionP10ExpressionEE5indexEv>
 8010832:	4603      	mov	r3, r0
 8010834:	2b00      	cmp	r3, #0
 8010836:	bf0c      	ite	eq
 8010838:	2301      	moveq	r3, #1
 801083a:	2300      	movne	r3, #0
 801083c:	b2db      	uxtb	r3, r3
 801083e:	2b00      	cmp	r3, #0
 8010840:	d00a      	beq.n	8010858 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x3a>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 8010842:	6838      	ldr	r0, [r7, #0]
 8010844:	f000 fb22 	bl	8010e8c <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010848:	4603      	mov	r3, r0
 801084a:	681c      	ldr	r4, [r3, #0]
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f7f4 fbaf 	bl	8004fb0 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 8010852:	4603      	mov	r3, r0
 8010854:	601c      	str	r4, [r3, #0]
 8010856:	e007      	b.n	8010868 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEEaSIS1_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISB_S8_E15is_assignable_vIRSB_S8_EERS4_E4typeES9_+0x4a>
		this->emplace<__index>(std::forward<_Tp>(__rhs));
 8010858:	6838      	ldr	r0, [r7, #0]
 801085a:	f000 fb17 	bl	8010e8c <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 801085e:	4603      	mov	r3, r0
 8010860:	4619      	mov	r1, r3
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f000 fb1d 	bl	8010ea2 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEE7emplaceILj0EJS1_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>
	  return *this;
 8010868:	687b      	ldr	r3, [r7, #4]
	}
 801086a:	4618      	mov	r0, r3
 801086c:	3714      	adds	r7, #20
 801086e:	46bd      	mov	sp, r7
 8010870:	bd90      	pop	{r4, r7, pc}

08010872 <_ZNSt6vectorI13mult_operatorSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 8010872:	b580      	push	{r7, lr}
 8010874:	b082      	sub	sp, #8
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
 801087a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 801087c:	6838      	ldr	r0, [r7, #0]
 801087e:	f000 fb29 	bl	8010ed4 <_ZSt4moveIR13mult_operatorEONSt16remove_referenceIT_E4typeEOS3_>
 8010882:	4603      	mov	r3, r0
 8010884:	4619      	mov	r1, r3
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f000 fb2f 	bl	8010eea <_ZNSt6vectorI13mult_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_>
 801088c:	bf00      	nop
 801088e:	3708      	adds	r7, #8
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}

08010894 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8010894:	b580      	push	{r7, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f000 fb56 	bl	8010f4e <_ZNSaIP16Power_expressionEC1Ev>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	4618      	mov	r0, r3
 80108a6:	f000 fb5e 	bl	8010f66 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	4618      	mov	r0, r3
 80108ae:	3708      	adds	r7, #8
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b082      	sub	sp, #8
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f000 fb66 	bl	8010f8e <_ZNSaI13mult_operatorEC1Ev>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f000 fb6e 	bl	8010fa6 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4618      	mov	r0, r3
 80108ce:	3708      	adds	r7, #8
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}

080108d4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80108de:	6838      	ldr	r0, [r7, #0]
 80108e0:	f000 fb75 	bl	8010fce <_ZSt4moveIRP16Power_expressionEONSt16remove_referenceIT_E4typeEOS4_>
 80108e4:	4603      	mov	r3, r0
 80108e6:	4619      	mov	r1, r3
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f000 fb7b 	bl	8010fe4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80108ee:	bf00      	nop
 80108f0:	3708      	adds	r7, #8
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}

080108f6 <_ZNSt6vectorI12sum_operatorSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b082      	sub	sp, #8
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
 80108fe:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8010900:	6838      	ldr	r0, [r7, #0]
 8010902:	f000 fba1 	bl	8011048 <_ZSt4moveIR12sum_operatorEONSt16remove_referenceIT_E4typeEOS3_>
 8010906:	4603      	mov	r3, r0
 8010908:	4619      	mov	r1, r3
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	f000 fba7 	bl	801105e <_ZNSt6vectorI12sum_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_>
 8010910:	bf00      	nop
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f000 fbce 	bl	80110c2 <_ZNSaIP19Multiply_expressionEC1Ev>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	4618      	mov	r0, r3
 801092a:	f000 fbd6 	bl	80110da <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	4618      	mov	r0, r3
 8010932:	3708      	adds	r7, #8
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f000 fbde 	bl	8011102 <_ZNSaI12sum_operatorEC1Ev>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	4618      	mov	r0, r3
 801094a:	f000 fbe6 	bl	801111a <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	4618      	mov	r0, r3
 8010952:	3708      	adds	r7, #8
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}

08010958 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8010958:	b580      	push	{r7, lr}
 801095a:	b082      	sub	sp, #8
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8010962:	6838      	ldr	r0, [r7, #0]
 8010964:	f000 fbed 	bl	8011142 <_ZSt4moveIRP19Multiply_expressionEONSt16remove_referenceIT_E4typeEOS4_>
 8010968:	4603      	mov	r3, r0
 801096a:	4619      	mov	r1, r3
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f000 fbf3 	bl	8011158 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8010972:	bf00      	nop
 8010974:	3708      	adds	r7, #8
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 801097a:	b580      	push	{r7, lr}
 801097c:	b082      	sub	sp, #8
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 fc1a 	bl	80111bc <_ZNSaIP18Compare_expressionEC1Ev>
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	4618      	mov	r0, r3
 801098c:	f000 fc22 	bl	80111d4 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	4618      	mov	r0, r3
 8010994:	3708      	adds	r7, #8
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}

0801099a <_ZNSt6vectorIP18Compare_expressionSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 801099a:	b580      	push	{r7, lr}
 801099c:	b082      	sub	sp, #8
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
 80109a2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80109a4:	6838      	ldr	r0, [r7, #0]
 80109a6:	f000 fc29 	bl	80111fc <_ZSt4moveIRP18Compare_expressionEONSt16remove_referenceIT_E4typeEOS4_>
 80109aa:	4603      	mov	r3, r0
 80109ac:	4619      	mov	r1, r3
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f000 fc2f 	bl	8011212 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80109b4:	bf00      	nop
 80109b6:	3708      	adds	r7, #8
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}

080109bc <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80109bc:	b580      	push	{r7, lr}
 80109be:	b082      	sub	sp, #8
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f000 fc56 	bl	8011276 <_ZNSaIP14And_expressionEC1Ev>
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	4618      	mov	r0, r3
 80109ce:	f000 fc5e 	bl	801128e <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	4618      	mov	r0, r3
 80109d6:	3708      	adds	r7, #8
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <_ZNSt6vectorIP14And_expressionSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80109dc:	b580      	push	{r7, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80109e6:	6838      	ldr	r0, [r7, #0]
 80109e8:	f000 fc65 	bl	80112b6 <_ZSt4moveIRP14And_expressionEONSt16remove_referenceIT_E4typeEOS4_>
 80109ec:	4603      	mov	r3, r0
 80109ee:	4619      	mov	r1, r3
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f000 fc6b 	bl	80112cc <_ZNSt6vectorIP14And_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80109f6:	bf00      	nop
 80109f8:	3708      	adds	r7, #8
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}

080109fe <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj5EJS9_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 80109fe:	b580      	push	{r7, lr}
 8010a00:	b082      	sub	sp, #8
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	6078      	str	r0, [r7, #4]
 8010a06:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7f4 f932 	bl	8004c74 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010a10:	6838      	ldr	r0, [r7, #0]
 8010a12:	f7fa fd5d 	bl	800b4d0 <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 8010a16:	4603      	mov	r3, r0
 8010a18:	4619      	mov	r1, r3
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 fc88 	bl	8011330 <_ZSt28__variant_construct_by_indexILj5ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJSA_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7f4 fa37 	bl	8004e94 <_ZSt3getILj5EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8010a26:	4603      	mov	r3, r0
	}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3708      	adds	r7, #8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	370c      	adds	r7, #12
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a44:	4770      	bx	lr

08010a46 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj4EJS7_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 8010a46:	b580      	push	{r7, lr}
 8010a48:	b082      	sub	sp, #8
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	6078      	str	r0, [r7, #4]
 8010a4e:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7f4 f90e 	bl	8004c74 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010a58:	6838      	ldr	r0, [r7, #0]
 8010a5a:	f7ff ffe9 	bl	8010a30 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	4619      	mov	r1, r3
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 fc83 	bl	801136e <_ZSt28__variant_construct_by_indexILj4ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJS8_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f7f4 f97b 	bl	8004d64 <_ZSt3getILj4EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8010a6e:	4603      	mov	r3, r0
	}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3708      	adds	r7, #8
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <_ZNSt8__detail9__variant14_UninitializedIbLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 8010a78:	b480      	push	{r7}
 8010a7a:	b083      	sub	sp, #12
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	7039      	strb	r1, [r7, #0]
	: _M_storage(std::forward<_Args>(__args)...)
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2200      	movs	r2, #0
 8010a86:	701a      	strb	r2, [r3, #0]
	{ }
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	370c      	adds	r7, #12
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a94:	4770      	bx	lr

08010a96 <_ZNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 8010a96:	b580      	push	{r7, lr}
 8010a98:	b082      	sub	sp, #8
 8010a9a:	af00      	add	r7, sp, #0
 8010a9c:	6078      	str	r0, [r7, #4]
 8010a9e:	7039      	strb	r1, [r7, #0]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	4611      	mov	r1, r2
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f7ff ffe7 	bl	8010a78 <_ZNSt8__detail9__variant14_UninitializedIbLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	4618      	mov	r0, r3
 8010aae:	3708      	adds	r7, #8
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	7039      	strb	r1, [r7, #0]
	_M_index(_Np)
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	4611      	mov	r1, r2
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7ff ffe7 	bl	8010a96 <_ZNSt8__detail9__variant15_Variadic_unionIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEC1IJEEESt16in_place_index_tILj0EEDpOT_>
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	761a      	strb	r2, [r3, #24]
	{ }
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	3708      	adds	r7, #8
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}

08010ad8 <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f7f3 fe48 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	bf14      	ite	ne
 8010aec:	2301      	movne	r3, #1
 8010aee:	2300      	moveq	r3, #0
 8010af0:	b2db      	uxtb	r3, r3
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d002      	beq.n	8010afc <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8010af6:	4805      	ldr	r0, [pc, #20]	; (8010b0c <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 8010af8:	f7f3 fc04 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f7f4 fc6d 	bl	80053dc <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8010b02:	4603      	mov	r3, r0
    }
 8010b04:	4618      	mov	r0, r3
 8010b06:	3708      	adds	r7, #8
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}
 8010b0c:	0801a8e0 	.word	0x0801a8e0

08010b10 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj0EJbEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7f4 f8a9 	bl	8004c74 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010b22:	6838      	ldr	r0, [r7, #0]
 8010b24:	f7fd fb14 	bl	800e150 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	4619      	mov	r1, r3
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f000 fc3d 	bl	80113ac <_ZSt28__variant_construct_by_indexILj0ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJbEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7ff ffd0 	bl	8010ad8 <_ZSt3getILj0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8010b38:	4603      	mov	r3, r0
	}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3708      	adds	r7, #8
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}

08010b42 <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8010b42:	b580      	push	{r7, lr}
 8010b44:	b082      	sub	sp, #8
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	7138      	strb	r0, [r7, #4]
 8010b4a:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8010b4c:	6838      	ldr	r0, [r7, #0]
 8010b4e:	f000 fc4d 	bl	80113ec <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010b52:	4603      	mov	r3, r0
 8010b54:	4618      	mov	r0, r3
 8010b56:	f000 fc54 	bl	8011402 <_ZNOSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3708      	adds	r7, #8
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}

08010b64 <_ZNSt8__detail9__variant5__getILj1ENS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8010b64:	b590      	push	{r4, r7, lr}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	7138      	strb	r0, [r7, #4]
 8010b6c:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8010b6e:	6838      	ldr	r0, [r7, #0]
 8010b70:	f7fb fa0c 	bl	800bf8c <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8010b74:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8010b76:	4619      	mov	r1, r3
 8010b78:	4620      	mov	r0, r4
 8010b7a:	f7ff ffe2 	bl	8010b42 <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8010b7e:	4603      	mov	r3, r0
    }
 8010b80:	4618      	mov	r0, r3
 8010b82:	370c      	adds	r7, #12
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd90      	pop	{r4, r7, pc}

08010b88 <_ZNSt8__detail9__variant5__getILj1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8010b88:	b590      	push	{r4, r7, lr}
 8010b8a:	b083      	sub	sp, #12
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f7fb f9f0 	bl	800bf76 <_ZSt7forwardISt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8010b96:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8010b98:	4619      	mov	r1, r3
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f7ff ffe2 	bl	8010b64 <_ZNSt8__detail9__variant5__getILj1ENS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8010ba0:	4603      	mov	r3, r0
    }
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	370c      	adds	r7, #12
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd90      	pop	{r4, r7, pc}
	...

08010bac <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>:
    get(variant<_Types...>&& __v)
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f7f7 facf 	bl	8008158 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	bf14      	ite	ne
 8010bc0:	2301      	movne	r3, #1
 8010bc2:	2300      	moveq	r3, #0
 8010bc4:	b2db      	uxtb	r3, r3
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d002      	beq.n	8010bd0 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8010bca:	4807      	ldr	r0, [pc, #28]	; (8010be8 <_ZSt3getILj1EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x3c>)
 8010bcc:	f7f3 fb9a 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(std::move(__v));
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f7fa fbd3 	bl	800b37c <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7ff ffd5 	bl	8010b88 <_ZNSt8__detail9__variant5__getILj1ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8010bde:	4603      	mov	r3, r0
    }
 8010be0:	4618      	mov	r0, r3
 8010be2:	3708      	adds	r7, #8
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	0801a8e0 	.word	0x0801a8e0

08010bec <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f7f3 fdbe 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	bf14      	ite	ne
 8010c00:	2301      	movne	r3, #1
 8010c02:	2300      	moveq	r3, #0
 8010c04:	b2db      	uxtb	r3, r3
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d002      	beq.n	8010c10 <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8010c0a:	4805      	ldr	r0, [pc, #20]	; (8010c20 <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 8010c0c:	f7f3 fb7a 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f7f4 fc6d 	bl	80054f0 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8010c16:	4603      	mov	r3, r0
    }
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3708      	adds	r7, #8
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	0801a8e0 	.word	0x0801a8e0

08010c24 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj1EJiEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b082      	sub	sp, #8
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7f4 f81f 	bl	8004c74 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010c36:	6838      	ldr	r0, [r7, #0]
 8010c38:	f7f6 fd5e 	bl	80076f8 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	4619      	mov	r1, r3
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f000 fbeb 	bl	801141c <_ZSt28__variant_construct_by_indexILj1ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJiEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f7ff ffd0 	bl	8010bec <_ZSt3getILj1EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8010c4c:	4603      	mov	r3, r0
	}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3708      	adds	r7, #8
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}

08010c56 <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>:
    __get(in_place_index_t<0>, _Union&& __u) noexcept
 8010c56:	b580      	push	{r7, lr}
 8010c58:	b082      	sub	sp, #8
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	7138      	strb	r0, [r7, #4]
 8010c5e:	6039      	str	r1, [r7, #0]
    { return std::forward<_Union>(__u)._M_first._M_get(); }
 8010c60:	6838      	ldr	r0, [r7, #0]
 8010c62:	f000 fbfa 	bl	801145a <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010c66:	4603      	mov	r3, r0
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f000 fc01 	bl	8011470 <_ZNOSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	4618      	mov	r0, r3
 8010c72:	3708      	adds	r7, #8
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}

08010c78 <_ZNSt8__detail9__variant5__getILj1ENS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8010c78:	b590      	push	{r4, r7, lr}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	7138      	strb	r0, [r7, #4]
 8010c80:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8010c82:	6838      	ldr	r0, [r7, #0]
 8010c84:	f000 fbb2 	bl	80113ec <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010c88:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	f7ff ffe2 	bl	8010c56 <_ZNSt8__detail9__variant5__getINS0_15_Variadic_unionIJfbEEEEEDcSt16in_place_index_tILj0EEOT_>
 8010c92:	4603      	mov	r3, r0
    }
 8010c94:	4618      	mov	r0, r3
 8010c96:	370c      	adds	r7, #12
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd90      	pop	{r4, r7, pc}

08010c9c <_ZNSt8__detail9__variant5__getILj2ENS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>:
    __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 8010c9c:	b590      	push	{r4, r7, lr}
 8010c9e:	b083      	sub	sp, #12
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	7138      	strb	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
			      std::forward<_Union>(__u)._M_rest);
 8010ca6:	6838      	ldr	r0, [r7, #0]
 8010ca8:	f7fb f970 	bl	800bf8c <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8010cac:	4603      	mov	r3, r0
      return __variant::__get(in_place_index<_Np-1>,
 8010cae:	4619      	mov	r1, r3
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	f7ff ffe1 	bl	8010c78 <_ZNSt8__detail9__variant5__getILj1ENS0_15_Variadic_unionIJifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8010cb6:	4603      	mov	r3, r0
    }
 8010cb8:	4618      	mov	r0, r3
 8010cba:	370c      	adds	r7, #12
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd90      	pop	{r4, r7, pc}

08010cc0 <_ZNSt8__detail9__variant5__getILj2ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8010cc0:	b590      	push	{r4, r7, lr}
 8010cc2:	b083      	sub	sp, #12
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
			      std::forward<_Variant>(__v)._M_u);
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f7fb f954 	bl	800bf76 <_ZSt7forwardISt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8010cce:	4603      	mov	r3, r0
      return __variant::__get(std::in_place_index<_Np>,
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	f7ff ffe2 	bl	8010c9c <_ZNSt8__detail9__variant5__getILj2ENS0_15_Variadic_unionIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEEDcSt16in_place_index_tIXT_EEOT0_>
 8010cd8:	4603      	mov	r3, r0
    }
 8010cda:	4618      	mov	r0, r3
 8010cdc:	370c      	adds	r7, #12
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd90      	pop	{r4, r7, pc}
	...

08010ce4 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_>:
    get(variant<_Types...>&& __v)
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f7f7 fa33 	bl	8008158 <_ZNKSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEE5indexEv>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	2b02      	cmp	r3, #2
 8010cf6:	bf14      	ite	ne
 8010cf8:	2301      	movne	r3, #1
 8010cfa:	2300      	moveq	r3, #0
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d002      	beq.n	8010d08 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8010d02:	4807      	ldr	r0, [pc, #28]	; (8010d20 <_ZSt3getILj2EJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEONSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeEOSA_+0x3c>)
 8010d04:	f7f3 fafe 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(std::move(__v));
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f7fa fb37 	bl	800b37c <_ZSt4moveIRSt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEONSt16remove_referenceIT_E4typeEOSA_>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7ff ffd5 	bl	8010cc0 <_ZNSt8__detail9__variant5__getILj2ESt7variantIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEifbEEEEDcOT0_>
 8010d16:	4603      	mov	r3, r0
    }
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	0801a8e0 	.word	0x0801a8e0

08010d24 <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b082      	sub	sp, #8
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f7f3 fd22 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2b02      	cmp	r3, #2
 8010d36:	bf14      	ite	ne
 8010d38:	2301      	movne	r3, #1
 8010d3a:	2300      	moveq	r3, #0
 8010d3c:	b2db      	uxtb	r3, r3
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d002      	beq.n	8010d48 <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8010d42:	4805      	ldr	r0, [pc, #20]	; (8010d58 <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 8010d44:	f7f3 fade 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f7f4 fc6d 	bl	8005628 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8010d4e:	4603      	mov	r3, r0
    }
 8010d50:	4618      	mov	r0, r3
 8010d52:	3708      	adds	r7, #8
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}
 8010d58:	0801a8e0 	.word	0x0801a8e0

08010d5c <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj2EJfEEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7f3 ff83 	bl	8004c74 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010d6e:	6838      	ldr	r0, [r7, #0]
 8010d70:	f7f6 fcf9 	bl	8007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8010d74:	4603      	mov	r3, r0
 8010d76:	4619      	mov	r1, r3
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f000 fb86 	bl	801148a <_ZSt28__variant_construct_by_indexILj2ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJfEEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f7ff ffd0 	bl	8010d24 <_ZSt3getILj2EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8010d84:	4603      	mov	r3, r0
	}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3708      	adds	r7, #8
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
	...

08010d90 <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>:
    get(variant<_Types...>& __v)
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b082      	sub	sp, #8
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f7f3 fcec 	bl	8004776 <_ZNKSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE5indexEv>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	2b03      	cmp	r3, #3
 8010da2:	bf14      	ite	ne
 8010da4:	2301      	movne	r3, #1
 8010da6:	2300      	moveq	r3, #0
 8010da8:	b2db      	uxtb	r3, r3
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d002      	beq.n	8010db4 <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x24>
	__throw_bad_variant_access("Unexpected index");
 8010dae:	4805      	ldr	r0, [pc, #20]	; (8010dc4 <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_+0x34>)
 8010db0:	f7f3 faa8 	bl	8004304 <_ZSt26__throw_bad_variant_accessPKc>
      return __detail::__variant::__get<_Np>(__v);
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f7f4 fce5 	bl	8005784 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8010dba:	4603      	mov	r3, r0
    }
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	0801a8e0 	.word	0x0801a8e0

08010dc8 <_ZNSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE7emplaceILj3EJS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ESA_E4typeEDpT0_EERSF_E4typeEDpOSG_>:
	emplace(_Args&&... __args)
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b082      	sub	sp, #8
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7f3 ff4d 	bl	8004c74 <_ZNSt8__detail9__variant16_Variant_storageILb0EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010dda:	6838      	ldr	r0, [r7, #0]
 8010ddc:	f7f6 fc55 	bl	800768a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8010de0:	4603      	mov	r3, r0
 8010de2:	4619      	mov	r1, r3
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f000 fb6f 	bl	80114c8 <_ZSt28__variant_construct_by_indexILj3ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJS6_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f7ff ffd0 	bl	8010d90 <_ZSt3getILj3EJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSE_>
 8010df0:	4603      	mov	r3, r0
	}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3708      	adds	r7, #8
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}

08010dfa <_ZNSt8__detail9__variant14_UninitializedIP17Primal_expressionLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 8010dfa:	b480      	push	{r7}
 8010dfc:	b083      	sub	sp, #12
 8010dfe:	af00      	add	r7, sp, #0
 8010e00:	6078      	str	r0, [r7, #4]
 8010e02:	7039      	strb	r1, [r7, #0]
	: _M_storage(std::forward<_Args>(__args)...)
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	601a      	str	r2, [r3, #0]
	{ }
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	370c      	adds	r7, #12
 8010e10:	46bd      	mov	sp, r7
 8010e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e16:	4770      	bx	lr

08010e18 <_ZNSt8__detail9__variant15_Variadic_unionIJP17Primal_expressionP10ExpressionEEC1IJEEESt16in_place_index_tILj0EEDpOT_>:
	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	7039      	strb	r1, [r7, #0]
	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	4611      	mov	r1, r2
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7ff ffe7 	bl	8010dfa <_ZNSt8__detail9__variant14_UninitializedIP17Primal_expressionLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_>
	{ }
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3708      	adds	r7, #8
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}

08010e36 <_ZNSt8__detail9__variant16_Variant_storageILb1EJP17Primal_expressionP10ExpressionEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_>:
	constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 8010e36:	b580      	push	{r7, lr}
 8010e38:	b082      	sub	sp, #8
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	6078      	str	r0, [r7, #4]
 8010e3e:	7039      	strb	r1, [r7, #0]
	_M_index(_Np)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	4611      	mov	r1, r2
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7ff ffe7 	bl	8010e18 <_ZNSt8__detail9__variant15_Variadic_unionIJP17Primal_expressionP10ExpressionEEC1IJEEESt16in_place_index_tILj0EEDpOT_>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	711a      	strb	r2, [r3, #4]
	{ }
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	4618      	mov	r0, r3
 8010e54:	3708      	adds	r7, #8
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <_ZNSt7variantIJP17Primal_expressionP10ExpressionEE7emplaceILj1EJS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>:
	emplace(_Args&&... __args)
 8010e5a:	b580      	push	{r7, lr}
 8010e5c:	b082      	sub	sp, #8
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
 8010e62:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	4618      	mov	r0, r3
 8010e68:	f000 fb4f 	bl	801150a <_ZNSt8__detail9__variant16_Variant_storageILb1EJP17Primal_expressionP10ExpressionEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010e6c:	6838      	ldr	r0, [r7, #0]
 8010e6e:	f7fa fec1 	bl	800bbf4 <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010e72:	4603      	mov	r3, r0
 8010e74:	4619      	mov	r1, r3
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f000 fb54 	bl	8011524 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJP17Primal_expressionP10ExpressionEEJS4_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f7f4 f859 	bl	8004f34 <_ZSt3getILj1EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 8010e82:	4603      	mov	r3, r0
	}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3708      	adds	r7, #8
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}

08010e8c <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010e8c:	b480      	push	{r7}
 8010e8e:	b083      	sub	sp, #12
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	4618      	mov	r0, r3
 8010e98:	370c      	adds	r7, #12
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr

08010ea2 <_ZNSt7variantIJP17Primal_expressionP10ExpressionEE7emplaceILj0EJS1_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERS9_E4typeEDpOSA_>:
	emplace(_Args&&... __args)
 8010ea2:	b580      	push	{r7, lr}
 8010ea4:	b082      	sub	sp, #8
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
 8010eaa:	6039      	str	r1, [r7, #0]
	      this->_M_reset();
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f000 fb2b 	bl	801150a <_ZNSt8__detail9__variant16_Variant_storageILb1EJP17Primal_expressionP10ExpressionEE8_M_resetEv>
	      __variant_construct_by_index<_Np>(*this,
 8010eb4:	6838      	ldr	r0, [r7, #0]
 8010eb6:	f7ff ffe9 	bl	8010e8c <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f000 fb4f 	bl	8011562 <_ZSt28__variant_construct_by_indexILj0ESt7variantIJP17Primal_expressionP10ExpressionEEJS2_EEvRT0_DpOT1_>
	  return std::get<_Np>(*this);
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f7f4 f873 	bl	8004fb0 <_ZSt3getILj0EJP17Primal_expressionP10ExpressionEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_>
 8010eca:	4603      	mov	r3, r0
	}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3708      	adds	r7, #8
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <_ZSt4moveIR13mult_operatorEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8010ed4:	b480      	push	{r7}
 8010ed6:	b083      	sub	sp, #12
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	4618      	mov	r0, r3
 8010ee0:	370c      	adds	r7, #12
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee8:	4770      	bx	lr

08010eea <_ZNSt6vectorI13mult_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_>:
      vector<_Tp, _Alloc>::
 8010eea:	b5b0      	push	{r4, r5, r7, lr}
 8010eec:	b082      	sub	sp, #8
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
 8010ef2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	685a      	ldr	r2, [r3, #4]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	689b      	ldr	r3, [r3, #8]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d011      	beq.n	8010f24 <_ZNSt6vectorI13mult_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010f00:	687c      	ldr	r4, [r7, #4]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	685d      	ldr	r5, [r3, #4]
 8010f06:	6838      	ldr	r0, [r7, #0]
 8010f08:	f000 fb4a 	bl	80115a0 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	461a      	mov	r2, r3
 8010f10:	4629      	mov	r1, r5
 8010f12:	4620      	mov	r0, r4
 8010f14:	f000 fb4f 	bl	80115b6 <_ZNSt16allocator_traitsISaI13mult_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	1c5a      	adds	r2, r3, #1
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	605a      	str	r2, [r3, #4]
 8010f22:	e00c      	b.n	8010f3e <_ZNSt6vectorI13mult_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f000 fb59 	bl	80115dc <_ZNSt6vectorI13mult_operatorSaIS0_EE3endEv>
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	6838      	ldr	r0, [r7, #0]
 8010f2e:	f000 fb37 	bl	80115a0 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8010f32:	4603      	mov	r3, r0
 8010f34:	461a      	mov	r2, r3
 8010f36:	4621      	mov	r1, r4
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f000 fb61 	bl	8011600 <_ZNSt6vectorI13mult_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
	return back();
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 fbd8 	bl	80116f4 <_ZNSt6vectorI13mult_operatorSaIS0_EE4backEv>
 8010f44:	4603      	mov	r3, r0
      }
 8010f46:	4618      	mov	r0, r3
 8010f48:	3708      	adds	r7, #8
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bdb0      	pop	{r4, r5, r7, pc}

08010f4e <_ZNSaIP16Power_expressionEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8010f4e:	b580      	push	{r7, lr}
 8010f50:	b082      	sub	sp, #8
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 fbe7 	bl	801172a <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionEC1Ev>
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3708      	adds	r7, #8
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010f66:	b480      	push	{r7}
 8010f68:	b083      	sub	sp, #12
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2200      	movs	r2, #0
 8010f72:	601a      	str	r2, [r3, #0]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2200      	movs	r2, #0
 8010f78:	605a      	str	r2, [r3, #4]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	609a      	str	r2, [r3, #8]
	{ }
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	4618      	mov	r0, r3
 8010f84:	370c      	adds	r7, #12
 8010f86:	46bd      	mov	sp, r7
 8010f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8c:	4770      	bx	lr

08010f8e <_ZNSaI13mult_operatorEC1Ev>:
 8010f8e:	b580      	push	{r7, lr}
 8010f90:	b082      	sub	sp, #8
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	6078      	str	r0, [r7, #4]
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f000 fbd2 	bl	8011740 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorEC1Ev>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3708      	adds	r7, #8
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}

08010fa6 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010fa6:	b480      	push	{r7}
 8010fa8:	b083      	sub	sp, #12
 8010faa:	af00      	add	r7, sp, #0
 8010fac:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	601a      	str	r2, [r3, #0]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	605a      	str	r2, [r3, #4]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	609a      	str	r2, [r3, #8]
	{ }
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	370c      	adds	r7, #12
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fcc:	4770      	bx	lr

08010fce <_ZSt4moveIRP16Power_expressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010fce:	b480      	push	{r7}
 8010fd0:	b083      	sub	sp, #12
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	4618      	mov	r0, r3
 8010fda:	370c      	adds	r7, #12
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr

08010fe4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8010fe4:	b5b0      	push	{r4, r5, r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	685a      	ldr	r2, [r3, #4]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	689b      	ldr	r3, [r3, #8]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d011      	beq.n	801101e <_ZNSt6vectorIP16Power_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010ffa:	687c      	ldr	r4, [r7, #4]
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	685d      	ldr	r5, [r3, #4]
 8011000:	6838      	ldr	r0, [r7, #0]
 8011002:	f000 fba8 	bl	8011756 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011006:	4603      	mov	r3, r0
 8011008:	461a      	mov	r2, r3
 801100a:	4629      	mov	r1, r5
 801100c:	4620      	mov	r0, r4
 801100e:	f000 fbad 	bl	801176c <_ZNSt16allocator_traitsISaIP16Power_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	1d1a      	adds	r2, r3, #4
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	605a      	str	r2, [r3, #4]
 801101c:	e00c      	b.n	8011038 <_ZNSt6vectorIP16Power_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f7f3 fc78 	bl	8004914 <_ZNSt6vectorIP16Power_expressionSaIS1_EE3endEv>
 8011024:	4604      	mov	r4, r0
 8011026:	6838      	ldr	r0, [r7, #0]
 8011028:	f000 fb95 	bl	8011756 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 801102c:	4603      	mov	r3, r0
 801102e:	461a      	mov	r2, r3
 8011030:	4621      	mov	r1, r4
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f000 fbae 	bl	8011794 <_ZNSt6vectorIP16Power_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f000 fc27 	bl	801188c <_ZNSt6vectorIP16Power_expressionSaIS1_EE4backEv>
 801103e:	4603      	mov	r3, r0
      }
 8011040:	4618      	mov	r0, r3
 8011042:	3708      	adds	r7, #8
 8011044:	46bd      	mov	sp, r7
 8011046:	bdb0      	pop	{r4, r5, r7, pc}

08011048 <_ZSt4moveIR12sum_operatorEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8011048:	b480      	push	{r7}
 801104a:	b083      	sub	sp, #12
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	4618      	mov	r0, r3
 8011054:	370c      	adds	r7, #12
 8011056:	46bd      	mov	sp, r7
 8011058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105c:	4770      	bx	lr

0801105e <_ZNSt6vectorI12sum_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_>:
      vector<_Tp, _Alloc>::
 801105e:	b5b0      	push	{r4, r5, r7, lr}
 8011060:	b082      	sub	sp, #8
 8011062:	af00      	add	r7, sp, #0
 8011064:	6078      	str	r0, [r7, #4]
 8011066:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	685a      	ldr	r2, [r3, #4]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	689b      	ldr	r3, [r3, #8]
 8011070:	429a      	cmp	r2, r3
 8011072:	d011      	beq.n	8011098 <_ZNSt6vectorI12sum_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8011074:	687c      	ldr	r4, [r7, #4]
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	685d      	ldr	r5, [r3, #4]
 801107a:	6838      	ldr	r0, [r7, #0]
 801107c:	f000 fc21 	bl	80118c2 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8011080:	4603      	mov	r3, r0
 8011082:	461a      	mov	r2, r3
 8011084:	4629      	mov	r1, r5
 8011086:	4620      	mov	r0, r4
 8011088:	f000 fc26 	bl	80118d8 <_ZNSt16allocator_traitsISaI12sum_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	1c5a      	adds	r2, r3, #1
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	605a      	str	r2, [r3, #4]
 8011096:	e00c      	b.n	80110b2 <_ZNSt6vectorI12sum_operatorSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f000 fc30 	bl	80118fe <_ZNSt6vectorI12sum_operatorSaIS0_EE3endEv>
 801109e:	4604      	mov	r4, r0
 80110a0:	6838      	ldr	r0, [r7, #0]
 80110a2:	f000 fc0e 	bl	80118c2 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 80110a6:	4603      	mov	r3, r0
 80110a8:	461a      	mov	r2, r3
 80110aa:	4621      	mov	r1, r4
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f000 fc37 	bl	8011920 <_ZNSt6vectorI12sum_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
	return back();
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f000 fcae 	bl	8011a14 <_ZNSt6vectorI12sum_operatorSaIS0_EE4backEv>
 80110b8:	4603      	mov	r3, r0
      }
 80110ba:	4618      	mov	r0, r3
 80110bc:	3708      	adds	r7, #8
 80110be:	46bd      	mov	sp, r7
 80110c0:	bdb0      	pop	{r4, r5, r7, pc}

080110c2 <_ZNSaIP19Multiply_expressionEC1Ev>:
 80110c2:	b580      	push	{r7, lr}
 80110c4:	b082      	sub	sp, #8
 80110c6:	af00      	add	r7, sp, #0
 80110c8:	6078      	str	r0, [r7, #4]
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f000 fcbd 	bl	8011a4a <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionEC1Ev>
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	4618      	mov	r0, r3
 80110d4:	3708      	adds	r7, #8
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}

080110da <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80110da:	b480      	push	{r7}
 80110dc:	b083      	sub	sp, #12
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2200      	movs	r2, #0
 80110e6:	601a      	str	r2, [r3, #0]
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2200      	movs	r2, #0
 80110ec:	605a      	str	r2, [r3, #4]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2200      	movs	r2, #0
 80110f2:	609a      	str	r2, [r3, #8]
	{ }
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	4618      	mov	r0, r3
 80110f8:	370c      	adds	r7, #12
 80110fa:	46bd      	mov	sp, r7
 80110fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011100:	4770      	bx	lr

08011102 <_ZNSaI12sum_operatorEC1Ev>:
 8011102:	b580      	push	{r7, lr}
 8011104:	b082      	sub	sp, #8
 8011106:	af00      	add	r7, sp, #0
 8011108:	6078      	str	r0, [r7, #4]
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f000 fca8 	bl	8011a60 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorEC1Ev>
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	4618      	mov	r0, r3
 8011114:	3708      	adds	r7, #8
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}

0801111a <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 801111a:	b480      	push	{r7}
 801111c:	b083      	sub	sp, #12
 801111e:	af00      	add	r7, sp, #0
 8011120:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2200      	movs	r2, #0
 8011126:	601a      	str	r2, [r3, #0]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2200      	movs	r2, #0
 801112c:	605a      	str	r2, [r3, #4]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2200      	movs	r2, #0
 8011132:	609a      	str	r2, [r3, #8]
	{ }
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	4618      	mov	r0, r3
 8011138:	370c      	adds	r7, #12
 801113a:	46bd      	mov	sp, r7
 801113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011140:	4770      	bx	lr

08011142 <_ZSt4moveIRP19Multiply_expressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8011142:	b480      	push	{r7}
 8011144:	b083      	sub	sp, #12
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	4618      	mov	r0, r3
 801114e:	370c      	adds	r7, #12
 8011150:	46bd      	mov	sp, r7
 8011152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011156:	4770      	bx	lr

08011158 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8011158:	b5b0      	push	{r4, r5, r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	685a      	ldr	r2, [r3, #4]
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	689b      	ldr	r3, [r3, #8]
 801116a:	429a      	cmp	r2, r3
 801116c:	d011      	beq.n	8011192 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801116e:	687c      	ldr	r4, [r7, #4]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	685d      	ldr	r5, [r3, #4]
 8011174:	6838      	ldr	r0, [r7, #0]
 8011176:	f000 fc7e 	bl	8011a76 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 801117a:	4603      	mov	r3, r0
 801117c:	461a      	mov	r2, r3
 801117e:	4629      	mov	r1, r5
 8011180:	4620      	mov	r0, r4
 8011182:	f000 fc83 	bl	8011a8c <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	1d1a      	adds	r2, r3, #4
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	605a      	str	r2, [r3, #4]
 8011190:	e00c      	b.n	80111ac <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f7f3 fc49 	bl	8004a2a <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE3endEv>
 8011198:	4604      	mov	r4, r0
 801119a:	6838      	ldr	r0, [r7, #0]
 801119c:	f000 fc6b 	bl	8011a76 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80111a0:	4603      	mov	r3, r0
 80111a2:	461a      	mov	r2, r3
 80111a4:	4621      	mov	r1, r4
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f000 fc84 	bl	8011ab4 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f000 fcfd 	bl	8011bac <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE4backEv>
 80111b2:	4603      	mov	r3, r0
      }
 80111b4:	4618      	mov	r0, r3
 80111b6:	3708      	adds	r7, #8
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bdb0      	pop	{r4, r5, r7, pc}

080111bc <_ZNSaIP18Compare_expressionEC1Ev>:
 80111bc:	b580      	push	{r7, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f000 fd0c 	bl	8011be2 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionEC1Ev>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4618      	mov	r0, r3
 80111ce:	3708      	adds	r7, #8
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80111d4:	b480      	push	{r7}
 80111d6:	b083      	sub	sp, #12
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2200      	movs	r2, #0
 80111e0:	601a      	str	r2, [r3, #0]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2200      	movs	r2, #0
 80111e6:	605a      	str	r2, [r3, #4]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	609a      	str	r2, [r3, #8]
	{ }
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	4618      	mov	r0, r3
 80111f2:	370c      	adds	r7, #12
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr

080111fc <_ZSt4moveIRP18Compare_expressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80111fc:	b480      	push	{r7}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	4618      	mov	r0, r3
 8011208:	370c      	adds	r7, #12
 801120a:	46bd      	mov	sp, r7
 801120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011210:	4770      	bx	lr

08011212 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8011212:	b5b0      	push	{r4, r5, r7, lr}
 8011214:	b082      	sub	sp, #8
 8011216:	af00      	add	r7, sp, #0
 8011218:	6078      	str	r0, [r7, #4]
 801121a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	685a      	ldr	r2, [r3, #4]
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	689b      	ldr	r3, [r3, #8]
 8011224:	429a      	cmp	r2, r3
 8011226:	d011      	beq.n	801124c <_ZNSt6vectorIP18Compare_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8011228:	687c      	ldr	r4, [r7, #4]
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	685d      	ldr	r5, [r3, #4]
 801122e:	6838      	ldr	r0, [r7, #0]
 8011230:	f000 fce2 	bl	8011bf8 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011234:	4603      	mov	r3, r0
 8011236:	461a      	mov	r2, r3
 8011238:	4629      	mov	r1, r5
 801123a:	4620      	mov	r0, r4
 801123c:	f000 fce7 	bl	8011c0e <_ZNSt16allocator_traitsISaIP18Compare_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	1d1a      	adds	r2, r3, #4
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	605a      	str	r2, [r3, #4]
 801124a:	e00c      	b.n	8011266 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f7f3 fc5c 	bl	8004b0a <_ZNSt6vectorIP18Compare_expressionSaIS1_EE3endEv>
 8011252:	4604      	mov	r4, r0
 8011254:	6838      	ldr	r0, [r7, #0]
 8011256:	f000 fccf 	bl	8011bf8 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 801125a:	4603      	mov	r3, r0
 801125c:	461a      	mov	r2, r3
 801125e:	4621      	mov	r1, r4
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f000 fce7 	bl	8011c34 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f000 fd60 	bl	8011d2c <_ZNSt6vectorIP18Compare_expressionSaIS1_EE4backEv>
 801126c:	4603      	mov	r3, r0
      }
 801126e:	4618      	mov	r0, r3
 8011270:	3708      	adds	r7, #8
 8011272:	46bd      	mov	sp, r7
 8011274:	bdb0      	pop	{r4, r5, r7, pc}

08011276 <_ZNSaIP14And_expressionEC1Ev>:
 8011276:	b580      	push	{r7, lr}
 8011278:	b082      	sub	sp, #8
 801127a:	af00      	add	r7, sp, #0
 801127c:	6078      	str	r0, [r7, #4]
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f000 fd6f 	bl	8011d62 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionEC1Ev>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	4618      	mov	r0, r3
 8011288:	3708      	adds	r7, #8
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}

0801128e <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 801128e:	b480      	push	{r7}
 8011290:	b083      	sub	sp, #12
 8011292:	af00      	add	r7, sp, #0
 8011294:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2200      	movs	r2, #0
 801129a:	601a      	str	r2, [r3, #0]
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2200      	movs	r2, #0
 80112a0:	605a      	str	r2, [r3, #4]
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	2200      	movs	r2, #0
 80112a6:	609a      	str	r2, [r3, #8]
	{ }
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	4618      	mov	r0, r3
 80112ac:	370c      	adds	r7, #12
 80112ae:	46bd      	mov	sp, r7
 80112b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b4:	4770      	bx	lr

080112b6 <_ZSt4moveIRP14And_expressionEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80112b6:	b480      	push	{r7}
 80112b8:	b083      	sub	sp, #12
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	4618      	mov	r0, r3
 80112c2:	370c      	adds	r7, #12
 80112c4:	46bd      	mov	sp, r7
 80112c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ca:	4770      	bx	lr

080112cc <_ZNSt6vectorIP14And_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80112cc:	b5b0      	push	{r4, r5, r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	685a      	ldr	r2, [r3, #4]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	689b      	ldr	r3, [r3, #8]
 80112de:	429a      	cmp	r2, r3
 80112e0:	d011      	beq.n	8011306 <_ZNSt6vectorIP14And_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80112e2:	687c      	ldr	r4, [r7, #4]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	685d      	ldr	r5, [r3, #4]
 80112e8:	6838      	ldr	r0, [r7, #0]
 80112ea:	f000 fd45 	bl	8011d78 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80112ee:	4603      	mov	r3, r0
 80112f0:	461a      	mov	r2, r3
 80112f2:	4629      	mov	r1, r5
 80112f4:	4620      	mov	r0, r4
 80112f6:	f000 fd4a 	bl	8011d8e <_ZNSt16allocator_traitsISaIP14And_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	1d1a      	adds	r2, r3, #4
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	605a      	str	r2, [r3, #4]
 8011304:	e00c      	b.n	8011320 <_ZNSt6vectorIP14And_expressionSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f7f3 fc6f 	bl	8004bea <_ZNSt6vectorIP14And_expressionSaIS1_EE3endEv>
 801130c:	4604      	mov	r4, r0
 801130e:	6838      	ldr	r0, [r7, #0]
 8011310:	f000 fd32 	bl	8011d78 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011314:	4603      	mov	r3, r0
 8011316:	461a      	mov	r2, r3
 8011318:	4621      	mov	r1, r4
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f000 fd4a 	bl	8011db4 <_ZNSt6vectorIP14And_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f000 fdc3 	bl	8011eac <_ZNSt6vectorIP14And_expressionSaIS1_EE4backEv>
 8011326:	4603      	mov	r3, r0
      }
 8011328:	4618      	mov	r0, r3
 801132a:	3708      	adds	r7, #8
 801132c:	46bd      	mov	sp, r7
 801132e:	bdb0      	pop	{r4, r5, r7, pc}

08011330 <_ZSt28__variant_construct_by_indexILj5ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJSA_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8011330:	b590      	push	{r4, r7, lr}
 8011332:	b085      	sub	sp, #20
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
 8011338:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	2205      	movs	r2, #5
 801133e:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f7f3 fd96 	bl	8004e72 <_ZNSt8__detail9__variant5__getILj5ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8011346:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8011348:	6838      	ldr	r0, [r7, #0]
 801134a:	f7fa f8c1 	bl	800b4d0 <_ZSt7forwardIP13Function_callEOT_RNSt16remove_referenceIS2_E4typeE>
 801134e:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8011350:	681c      	ldr	r4, [r3, #0]
 8011352:	68f8      	ldr	r0, [r7, #12]
 8011354:	f7fb fabd 	bl	800c8d2 <_ZSt9addressofIP13Function_callEPT_RS2_>
 8011358:	4603      	mov	r3, r0
 801135a:	4619      	mov	r1, r3
 801135c:	2004      	movs	r0, #4
 801135e:	f7ef fe3d 	bl	8000fdc <_ZnwjPv>
 8011362:	4603      	mov	r3, r0
 8011364:	601c      	str	r4, [r3, #0]
    }
 8011366:	bf00      	nop
 8011368:	3714      	adds	r7, #20
 801136a:	46bd      	mov	sp, r7
 801136c:	bd90      	pop	{r4, r7, pc}

0801136e <_ZSt28__variant_construct_by_indexILj4ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJS8_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 801136e:	b590      	push	{r4, r7, lr}
 8011370:	b085      	sub	sp, #20
 8011372:	af00      	add	r7, sp, #0
 8011374:	6078      	str	r0, [r7, #4]
 8011376:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2204      	movs	r2, #4
 801137c:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f7f3 fcdf 	bl	8004d42 <_ZNSt8__detail9__variant5__getILj4ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8011384:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8011386:	6838      	ldr	r0, [r7, #0]
 8011388:	f7ff fb52 	bl	8010a30 <_ZSt7forwardIP8VariableEOT_RNSt16remove_referenceIS2_E4typeE>
 801138c:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 801138e:	681c      	ldr	r4, [r3, #0]
 8011390:	68f8      	ldr	r0, [r7, #12]
 8011392:	f000 fda6 	bl	8011ee2 <_ZSt9addressofIP8VariableEPT_RS2_>
 8011396:	4603      	mov	r3, r0
 8011398:	4619      	mov	r1, r3
 801139a:	2004      	movs	r0, #4
 801139c:	f7ef fe1e 	bl	8000fdc <_ZnwjPv>
 80113a0:	4603      	mov	r3, r0
 80113a2:	601c      	str	r4, [r3, #0]
    }
 80113a4:	bf00      	nop
 80113a6:	3714      	adds	r7, #20
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd90      	pop	{r4, r7, pc}

080113ac <_ZSt28__variant_construct_by_indexILj0ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJbEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 80113ac:	b590      	push	{r4, r7, lr}
 80113ae:	b085      	sub	sp, #20
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2200      	movs	r2, #0
 80113ba:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	f7f4 f80d 	bl	80053dc <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80113c2:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 80113c4:	6838      	ldr	r0, [r7, #0]
 80113c6:	f7fc fec3 	bl	800e150 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80113ca:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 80113cc:	781c      	ldrb	r4, [r3, #0]
 80113ce:	68f8      	ldr	r0, [r7, #12]
 80113d0:	f7fc ff2a 	bl	800e228 <_ZSt9addressofIbEPT_RS0_>
 80113d4:	4603      	mov	r3, r0
 80113d6:	4619      	mov	r1, r3
 80113d8:	2001      	movs	r0, #1
 80113da:	f7ef fdff 	bl	8000fdc <_ZnwjPv>
 80113de:	4603      	mov	r3, r0
 80113e0:	4622      	mov	r2, r4
 80113e2:	701a      	strb	r2, [r3, #0]
    }
 80113e4:	bf00      	nop
 80113e6:	3714      	adds	r7, #20
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd90      	pop	{r4, r7, pc}

080113ec <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJifbEEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80113ec:	b480      	push	{r7}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	4618      	mov	r0, r3
 80113f8:	370c      	adds	r7, #12
 80113fa:	46bd      	mov	sp, r7
 80113fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011400:	4770      	bx	lr

08011402 <_ZNOSt8__detail9__variant14_UninitializedIiLb1EE6_M_getEv>:
      constexpr _Type&& _M_get() && noexcept
 8011402:	b580      	push	{r7, lr}
 8011404:	b082      	sub	sp, #8
 8011406:	af00      	add	r7, sp, #0
 8011408:	6078      	str	r0, [r7, #4]
      { return std::move(_M_storage); }
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	4618      	mov	r0, r3
 801140e:	f7fc fd7e 	bl	800df0e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8011412:	4603      	mov	r3, r0
 8011414:	4618      	mov	r0, r3
 8011416:	3708      	adds	r7, #8
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}

0801141c <_ZSt28__variant_construct_by_indexILj1ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJiEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 801141c:	b590      	push	{r4, r7, lr}
 801141e:	b085      	sub	sp, #20
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2201      	movs	r2, #1
 801142a:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f7f4 f85f 	bl	80054f0 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 8011432:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 8011434:	6838      	ldr	r0, [r7, #0]
 8011436:	f7f6 f95f 	bl	80076f8 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 801143a:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 801143c:	681c      	ldr	r4, [r3, #0]
 801143e:	68f8      	ldr	r0, [r7, #12]
 8011440:	f7fc feda 	bl	800e1f8 <_ZSt9addressofIiEPT_RS0_>
 8011444:	4603      	mov	r3, r0
 8011446:	4619      	mov	r1, r3
 8011448:	2004      	movs	r0, #4
 801144a:	f7ef fdc7 	bl	8000fdc <_ZnwjPv>
 801144e:	4603      	mov	r3, r0
 8011450:	601c      	str	r4, [r3, #0]
    }
 8011452:	bf00      	nop
 8011454:	3714      	adds	r7, #20
 8011456:	46bd      	mov	sp, r7
 8011458:	bd90      	pop	{r4, r7, pc}

0801145a <_ZSt7forwardINSt8__detail9__variant15_Variadic_unionIJfbEEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801145a:	b480      	push	{r7}
 801145c:	b083      	sub	sp, #12
 801145e:	af00      	add	r7, sp, #0
 8011460:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	4618      	mov	r0, r3
 8011466:	370c      	adds	r7, #12
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr

08011470 <_ZNOSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv>:
      constexpr _Type&& _M_get() && noexcept
 8011470:	b580      	push	{r7, lr}
 8011472:	b082      	sub	sp, #8
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
      { return std::move(_M_storage); }
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	4618      	mov	r0, r3
 801147c:	f7fc fd6b 	bl	800df56 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8011480:	4603      	mov	r3, r0
 8011482:	4618      	mov	r0, r3
 8011484:	3708      	adds	r7, #8
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <_ZSt28__variant_construct_by_indexILj2ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJfEEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 801148a:	b590      	push	{r4, r7, lr}
 801148c:	b085      	sub	sp, #20
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
 8011492:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	2202      	movs	r2, #2
 8011498:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	f7f4 f8c4 	bl	8005628 <_ZNSt8__detail9__variant5__getILj2ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80114a0:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 80114a2:	6838      	ldr	r0, [r7, #0]
 80114a4:	f7f6 f95f 	bl	8007766 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80114a8:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 80114aa:	681c      	ldr	r4, [r3, #0]
 80114ac:	68f8      	ldr	r0, [r7, #12]
 80114ae:	f7fc feaf 	bl	800e210 <_ZSt9addressofIfEPT_RS0_>
 80114b2:	4603      	mov	r3, r0
 80114b4:	4619      	mov	r1, r3
 80114b6:	2004      	movs	r0, #4
 80114b8:	f7ef fd90 	bl	8000fdc <_ZnwjPv>
 80114bc:	4603      	mov	r3, r0
 80114be:	601c      	str	r4, [r3, #0]
    }
 80114c0:	bf00      	nop
 80114c2:	3714      	adds	r7, #20
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd90      	pop	{r4, r7, pc}

080114c8 <_ZSt28__variant_construct_by_indexILj3ESt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEJS6_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 80114c8:	b590      	push	{r4, r7, lr}
 80114ca:	b085      	sub	sp, #20
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2203      	movs	r2, #3
 80114d6:	761a      	strb	r2, [r3, #24]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f7f4 f953 	bl	8005784 <_ZNSt8__detail9__variant5__getILj3ERSt7variantIJbifNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8VariableP13Function_callEEEEDcOT0_>
 80114de:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 80114e0:	6838      	ldr	r0, [r7, #0]
 80114e2:	f7f6 f8d2 	bl	800768a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80114e6:	4604      	mov	r4, r0
      ::new ((void*)std::addressof(__storage))
 80114e8:	68f8      	ldr	r0, [r7, #12]
 80114ea:	f7fc fe79 	bl	800e1e0 <_ZSt9addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80114ee:	4603      	mov	r3, r0
 80114f0:	4619      	mov	r1, r3
 80114f2:	2018      	movs	r0, #24
 80114f4:	f7ef fd72 	bl	8000fdc <_ZnwjPv>
 80114f8:	4603      	mov	r3, r0
 80114fa:	4621      	mov	r1, r4
 80114fc:	4618      	mov	r0, r3
 80114fe:	f005 fdd4 	bl	80170aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8011502:	bf00      	nop
 8011504:	3714      	adds	r7, #20
 8011506:	46bd      	mov	sp, r7
 8011508:	bd90      	pop	{r4, r7, pc}

0801150a <_ZNSt8__detail9__variant16_Variant_storageILb1EJP17Primal_expressionP10ExpressionEE8_M_resetEv>:
      void _M_reset()
 801150a:	b480      	push	{r7}
 801150c:	b083      	sub	sp, #12
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
      { _M_index = variant_npos; }
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	22ff      	movs	r2, #255	; 0xff
 8011516:	711a      	strb	r2, [r3, #4]
 8011518:	bf00      	nop
 801151a:	370c      	adds	r7, #12
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr

08011524 <_ZSt28__variant_construct_by_indexILj1ESt7variantIJP17Primal_expressionP10ExpressionEEJS4_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8011524:	b590      	push	{r4, r7, lr}
 8011526:	b085      	sub	sp, #20
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2201      	movs	r2, #1
 8011532:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f7f3 fcec 	bl	8004f12 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>
 801153a:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 801153c:	6838      	ldr	r0, [r7, #0]
 801153e:	f7fa fb59 	bl	800bbf4 <_ZSt7forwardIP10ExpressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011542:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8011544:	681c      	ldr	r4, [r3, #0]
 8011546:	68f8      	ldr	r0, [r7, #12]
 8011548:	f000 fcd7 	bl	8011efa <_ZSt9addressofIP10ExpressionEPT_RS2_>
 801154c:	4603      	mov	r3, r0
 801154e:	4619      	mov	r1, r3
 8011550:	2004      	movs	r0, #4
 8011552:	f7ef fd43 	bl	8000fdc <_ZnwjPv>
 8011556:	4603      	mov	r3, r0
 8011558:	601c      	str	r4, [r3, #0]
    }
 801155a:	bf00      	nop
 801155c:	3714      	adds	r7, #20
 801155e:	46bd      	mov	sp, r7
 8011560:	bd90      	pop	{r4, r7, pc}

08011562 <_ZSt28__variant_construct_by_indexILj0ESt7variantIJP17Primal_expressionP10ExpressionEEJS2_EEvRT0_DpOT1_>:
    void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
 8011562:	b590      	push	{r4, r7, lr}
 8011564:	b085      	sub	sp, #20
 8011566:	af00      	add	r7, sp, #0
 8011568:	6078      	str	r0, [r7, #4]
 801156a:	6039      	str	r1, [r7, #0]
      __v._M_index = _Np;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2200      	movs	r2, #0
 8011570:	711a      	strb	r2, [r3, #4]
      auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f7f3 fd0b 	bl	8004f8e <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJP17Primal_expressionP10ExpressionEEEEDcOT0_>
 8011578:	60f8      	str	r0, [r7, #12]
	  (std::forward<_Args>(__args)...);
 801157a:	6838      	ldr	r0, [r7, #0]
 801157c:	f7ff fc86 	bl	8010e8c <_ZSt7forwardIP17Primal_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011580:	4603      	mov	r3, r0
      ::new ((void*)std::addressof(__storage))
 8011582:	681c      	ldr	r4, [r3, #0]
 8011584:	68f8      	ldr	r0, [r7, #12]
 8011586:	f000 fcc4 	bl	8011f12 <_ZSt9addressofIP17Primal_expressionEPT_RS2_>
 801158a:	4603      	mov	r3, r0
 801158c:	4619      	mov	r1, r3
 801158e:	2004      	movs	r0, #4
 8011590:	f7ef fd24 	bl	8000fdc <_ZnwjPv>
 8011594:	4603      	mov	r3, r0
 8011596:	601c      	str	r4, [r3, #0]
    }
 8011598:	bf00      	nop
 801159a:	3714      	adds	r7, #20
 801159c:	46bd      	mov	sp, r7
 801159e:	bd90      	pop	{r4, r7, pc}

080115a0 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80115a0:	b480      	push	{r7}
 80115a2:	b083      	sub	sp, #12
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	4618      	mov	r0, r3
 80115ac:	370c      	adds	r7, #12
 80115ae:	46bd      	mov	sp, r7
 80115b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b4:	4770      	bx	lr

080115b6 <_ZNSt16allocator_traitsISaI13mult_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80115b6:	b580      	push	{r7, lr}
 80115b8:	b084      	sub	sp, #16
 80115ba:	af00      	add	r7, sp, #0
 80115bc:	60f8      	str	r0, [r7, #12]
 80115be:	60b9      	str	r1, [r7, #8]
 80115c0:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f7ff ffec 	bl	80115a0 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 80115c8:	4603      	mov	r3, r0
 80115ca:	461a      	mov	r2, r3
 80115cc:	68b9      	ldr	r1, [r7, #8]
 80115ce:	68f8      	ldr	r0, [r7, #12]
 80115d0:	f000 fcab 	bl	8011f2a <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE9constructIS1_JS1_EEEvPT_DpOT0_>
 80115d4:	bf00      	nop
 80115d6:	3710      	adds	r7, #16
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}

080115dc <_ZNSt6vectorI13mult_operatorSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80115dc:	b580      	push	{r7, lr}
 80115de:	b084      	sub	sp, #16
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	1d1a      	adds	r2, r3, #4
 80115e8:	f107 030c 	add.w	r3, r7, #12
 80115ec:	4611      	mov	r1, r2
 80115ee:	4618      	mov	r0, r3
 80115f0:	f000 fcb2 	bl	8011f58 <_ZN9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	4618      	mov	r0, r3
 80115f8:	3710      	adds	r7, #16
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
	...

08011600 <_ZNSt6vectorI13mult_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011600:	b5b0      	push	{r4, r5, r7, lr}
 8011602:	b08c      	sub	sp, #48	; 0x30
 8011604:	af00      	add	r7, sp, #0
 8011606:	60f8      	str	r0, [r7, #12]
 8011608:	60b9      	str	r1, [r7, #8]
 801160a:	607a      	str	r2, [r7, #4]
      const size_type __len =
 801160c:	4a38      	ldr	r2, [pc, #224]	; (80116f0 <_ZNSt6vectorI13mult_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf0>)
 801160e:	2101      	movs	r1, #1
 8011610:	68f8      	ldr	r0, [r7, #12]
 8011612:	f000 fcb1 	bl	8011f78 <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc>
 8011616:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011624:	68f8      	ldr	r0, [r7, #12]
 8011626:	f000 fcee 	bl	8012006 <_ZNSt6vectorI13mult_operatorSaIS0_EE5beginEv>
 801162a:	4603      	mov	r3, r0
 801162c:	617b      	str	r3, [r7, #20]
 801162e:	f107 0214 	add.w	r2, r7, #20
 8011632:	f107 0308 	add.w	r3, r7, #8
 8011636:	4611      	mov	r1, r2
 8011638:	4618      	mov	r0, r3
 801163a:	f000 fcf4 	bl	8012026 <_ZN9__gnu_cxxmiIP13mult_operatorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 801163e:	4603      	mov	r3, r0
 8011640:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011646:	4618      	mov	r0, r3
 8011648:	f000 fd01 	bl	801204e <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE11_M_allocateEj>
 801164c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801164e:	69fb      	ldr	r3, [r7, #28]
 8011650:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011652:	68fc      	ldr	r4, [r7, #12]
 8011654:	69fa      	ldr	r2, [r7, #28]
 8011656:	6a3b      	ldr	r3, [r7, #32]
 8011658:	18d5      	adds	r5, r2, r3
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f7ff ffa0 	bl	80115a0 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8011660:	4603      	mov	r3, r0
 8011662:	461a      	mov	r2, r3
 8011664:	4629      	mov	r1, r5
 8011666:	4620      	mov	r0, r4
 8011668:	f7ff ffa5 	bl	80115b6 <_ZNSt16allocator_traitsISaI13mult_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 801166c:	2300      	movs	r3, #0
 801166e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011670:	f107 0308 	add.w	r3, r7, #8
 8011674:	4618      	mov	r0, r3
 8011676:	f000 fd12 	bl	801209e <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 801167a:	4603      	mov	r3, r0
 801167c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	4618      	mov	r0, r3
 8011682:	f7f3 fd13 	bl	80050ac <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 8011686:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011688:	69fa      	ldr	r2, [r7, #28]
 801168a:	4621      	mov	r1, r4
 801168c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801168e:	f000 fcf2 	bl	8012076 <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8011692:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8011694:	69bb      	ldr	r3, [r7, #24]
 8011696:	3301      	adds	r3, #1
 8011698:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801169a:	f107 0308 	add.w	r3, r7, #8
 801169e:	4618      	mov	r0, r3
 80116a0:	f000 fcfd 	bl	801209e <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 80116a4:	4603      	mov	r3, r0
 80116a6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7f3 fcfe 	bl	80050ac <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80116b0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80116b2:	69ba      	ldr	r2, [r7, #24]
 80116b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80116b6:	4620      	mov	r0, r4
 80116b8:	f000 fcdd 	bl	8012076 <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80116bc:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80116be:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	689a      	ldr	r2, [r3, #8]
 80116c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c6:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 80116c8:	461a      	mov	r2, r3
 80116ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80116cc:	f7f4 fa88 	bl	8005be0 <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	69fa      	ldr	r2, [r7, #28]
 80116d4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	69ba      	ldr	r2, [r7, #24]
 80116da:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80116dc:	69fa      	ldr	r2, [r7, #28]
 80116de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116e0:	441a      	add	r2, r3
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	609a      	str	r2, [r3, #8]
    }
 80116e6:	bf00      	nop
 80116e8:	3730      	adds	r7, #48	; 0x30
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bdb0      	pop	{r4, r5, r7, pc}
 80116ee:	bf00      	nop
 80116f0:	0801a8f4 	.word	0x0801a8f4

080116f4 <_ZNSt6vectorI13mult_operatorSaIS0_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b084      	sub	sp, #16
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f7ff ff6d 	bl	80115dc <_ZNSt6vectorI13mult_operatorSaIS0_EE3endEv>
 8011702:	4603      	mov	r3, r0
 8011704:	60fb      	str	r3, [r7, #12]
 8011706:	f107 030c 	add.w	r3, r7, #12
 801170a:	2101      	movs	r1, #1
 801170c:	4618      	mov	r0, r3
 801170e:	f000 fcd1 	bl	80120b4 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEmiEi>
 8011712:	4603      	mov	r3, r0
 8011714:	60bb      	str	r3, [r7, #8]
 8011716:	f107 0308 	add.w	r3, r7, #8
 801171a:	4618      	mov	r0, r3
 801171c:	f000 fce2 	bl	80120e4 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEdeEv>
 8011720:	4603      	mov	r3, r0
      }
 8011722:	4618      	mov	r0, r3
 8011724:	3710      	adds	r7, #16
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}

0801172a <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801172a:	b480      	push	{r7}
 801172c:	b083      	sub	sp, #12
 801172e:	af00      	add	r7, sp, #0
 8011730:	6078      	str	r0, [r7, #4]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	4618      	mov	r0, r3
 8011736:	370c      	adds	r7, #12
 8011738:	46bd      	mov	sp, r7
 801173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173e:	4770      	bx	lr

08011740 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorEC1Ev>:
 8011740:	b480      	push	{r7}
 8011742:	b083      	sub	sp, #12
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	4618      	mov	r0, r3
 801174c:	370c      	adds	r7, #12
 801174e:	46bd      	mov	sp, r7
 8011750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011754:	4770      	bx	lr

08011756 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011756:	b480      	push	{r7}
 8011758:	b083      	sub	sp, #12
 801175a:	af00      	add	r7, sp, #0
 801175c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	4618      	mov	r0, r3
 8011762:	370c      	adds	r7, #12
 8011764:	46bd      	mov	sp, r7
 8011766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176a:	4770      	bx	lr

0801176c <_ZNSt16allocator_traitsISaIP16Power_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 801176c:	b580      	push	{r7, lr}
 801176e:	b084      	sub	sp, #16
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f7ff ffec 	bl	8011756 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 801177e:	4603      	mov	r3, r0
 8011780:	461a      	mov	r2, r3
 8011782:	68b9      	ldr	r1, [r7, #8]
 8011784:	68f8      	ldr	r0, [r7, #12]
 8011786:	f000 fcb9 	bl	80120fc <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 801178a:	bf00      	nop
 801178c:	3710      	adds	r7, #16
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
	...

08011794 <_ZNSt6vectorIP16Power_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011794:	b5b0      	push	{r4, r5, r7, lr}
 8011796:	b08c      	sub	sp, #48	; 0x30
 8011798:	af00      	add	r7, sp, #0
 801179a:	60f8      	str	r0, [r7, #12]
 801179c:	60b9      	str	r1, [r7, #8]
 801179e:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80117a0:	4a39      	ldr	r2, [pc, #228]	; (8011888 <_ZNSt6vectorIP16Power_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80117a2:	2101      	movs	r1, #1
 80117a4:	68f8      	ldr	r0, [r7, #12]
 80117a6:	f000 fcbf 	bl	8012128 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc>
 80117aa:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80117b8:	68f8      	ldr	r0, [r7, #12]
 80117ba:	f7f3 f89b 	bl	80048f4 <_ZNSt6vectorIP16Power_expressionSaIS1_EE5beginEv>
 80117be:	4603      	mov	r3, r0
 80117c0:	617b      	str	r3, [r7, #20]
 80117c2:	f107 0214 	add.w	r2, r7, #20
 80117c6:	f107 0308 	add.w	r3, r7, #8
 80117ca:	4611      	mov	r1, r2
 80117cc:	4618      	mov	r0, r3
 80117ce:	f000 fcf2 	bl	80121b6 <_ZN9__gnu_cxxmiIPP16Power_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80117d2:	4603      	mov	r3, r0
 80117d4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80117da:	4618      	mov	r0, r3
 80117dc:	f000 fd00 	bl	80121e0 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE11_M_allocateEj>
 80117e0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80117e2:	69fb      	ldr	r3, [r7, #28]
 80117e4:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80117e6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80117e8:	6a3b      	ldr	r3, [r7, #32]
 80117ea:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80117ec:	69fa      	ldr	r2, [r7, #28]
 80117ee:	18d5      	adds	r5, r2, r3
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f7ff ffb0 	bl	8011756 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80117f6:	4603      	mov	r3, r0
 80117f8:	461a      	mov	r2, r3
 80117fa:	4629      	mov	r1, r5
 80117fc:	4620      	mov	r0, r4
 80117fe:	f7ff ffb5 	bl	801176c <_ZNSt16allocator_traitsISaIP16Power_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011802:	2300      	movs	r3, #0
 8011804:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011806:	f107 0308 	add.w	r3, r7, #8
 801180a:	4618      	mov	r0, r3
 801180c:	f7f3 fc77 	bl	80050fe <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8011810:	4603      	mov	r3, r0
 8011812:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	4618      	mov	r0, r3
 8011818:	f7f3 fc0b 	bl	8005032 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 801181c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801181e:	69fa      	ldr	r2, [r7, #28]
 8011820:	4621      	mov	r1, r4
 8011822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011824:	f000 fcf0 	bl	8012208 <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011828:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801182a:	69bb      	ldr	r3, [r7, #24]
 801182c:	3304      	adds	r3, #4
 801182e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011830:	f107 0308 	add.w	r3, r7, #8
 8011834:	4618      	mov	r0, r3
 8011836:	f7f3 fc62 	bl	80050fe <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 801183a:	4603      	mov	r3, r0
 801183c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	4618      	mov	r0, r3
 8011842:	f7f3 fbf6 	bl	8005032 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8011846:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011848:	69ba      	ldr	r2, [r7, #24]
 801184a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801184c:	4620      	mov	r0, r4
 801184e:	f000 fcdb 	bl	8012208 <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011852:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011854:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	689a      	ldr	r2, [r3, #8]
 801185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801185c:	1ad3      	subs	r3, r2, r3
 801185e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8011860:	461a      	mov	r2, r3
 8011862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011864:	f7f4 f990 	bl	8005b88 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	69fa      	ldr	r2, [r7, #28]
 801186c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	69ba      	ldr	r2, [r7, #24]
 8011872:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011876:	009b      	lsls	r3, r3, #2
 8011878:	69fa      	ldr	r2, [r7, #28]
 801187a:	441a      	add	r2, r3
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	609a      	str	r2, [r3, #8]
    }
 8011880:	bf00      	nop
 8011882:	3730      	adds	r7, #48	; 0x30
 8011884:	46bd      	mov	sp, r7
 8011886:	bdb0      	pop	{r4, r5, r7, pc}
 8011888:	0801a8f4 	.word	0x0801a8f4

0801188c <_ZNSt6vectorIP16Power_expressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 801188c:	b580      	push	{r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f7f3 f83d 	bl	8004914 <_ZNSt6vectorIP16Power_expressionSaIS1_EE3endEv>
 801189a:	4603      	mov	r3, r0
 801189c:	60fb      	str	r3, [r7, #12]
 801189e:	f107 030c 	add.w	r3, r7, #12
 80118a2:	2101      	movs	r1, #1
 80118a4:	4618      	mov	r0, r3
 80118a6:	f000 fcc3 	bl	8012230 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEmiEi>
 80118aa:	4603      	mov	r3, r0
 80118ac:	60bb      	str	r3, [r7, #8]
 80118ae:	f107 0308 	add.w	r3, r7, #8
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7f3 f867 	bl	8004986 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 80118b8:	4603      	mov	r3, r0
      }
 80118ba:	4618      	mov	r0, r3
 80118bc:	3710      	adds	r7, #16
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd80      	pop	{r7, pc}

080118c2 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80118c2:	b480      	push	{r7}
 80118c4:	b083      	sub	sp, #12
 80118c6:	af00      	add	r7, sp, #0
 80118c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	4618      	mov	r0, r3
 80118ce:	370c      	adds	r7, #12
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <_ZNSt16allocator_traitsISaI12sum_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80118d8:	b580      	push	{r7, lr}
 80118da:	b084      	sub	sp, #16
 80118dc:	af00      	add	r7, sp, #0
 80118de:	60f8      	str	r0, [r7, #12]
 80118e0:	60b9      	str	r1, [r7, #8]
 80118e2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f7ff ffec 	bl	80118c2 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 80118ea:	4603      	mov	r3, r0
 80118ec:	461a      	mov	r2, r3
 80118ee:	68b9      	ldr	r1, [r7, #8]
 80118f0:	68f8      	ldr	r0, [r7, #12]
 80118f2:	f000 fcb6 	bl	8012262 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE9constructIS1_JS1_EEEvPT_DpOT0_>
 80118f6:	bf00      	nop
 80118f8:	3710      	adds	r7, #16
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}

080118fe <_ZNSt6vectorI12sum_operatorSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80118fe:	b580      	push	{r7, lr}
 8011900:	b084      	sub	sp, #16
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	1d1a      	adds	r2, r3, #4
 801190a:	f107 030c 	add.w	r3, r7, #12
 801190e:	4611      	mov	r1, r2
 8011910:	4618      	mov	r0, r3
 8011912:	f000 fcbd 	bl	8012290 <_ZN9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	4618      	mov	r0, r3
 801191a:	3710      	adds	r7, #16
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <_ZNSt6vectorI12sum_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011920:	b5b0      	push	{r4, r5, r7, lr}
 8011922:	b08c      	sub	sp, #48	; 0x30
 8011924:	af00      	add	r7, sp, #0
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	60b9      	str	r1, [r7, #8]
 801192a:	607a      	str	r2, [r7, #4]
      const size_type __len =
 801192c:	4a38      	ldr	r2, [pc, #224]	; (8011a10 <_ZNSt6vectorI12sum_operatorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf0>)
 801192e:	2101      	movs	r1, #1
 8011930:	68f8      	ldr	r0, [r7, #12]
 8011932:	f000 fcbd 	bl	80122b0 <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc>
 8011936:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011944:	68f8      	ldr	r0, [r7, #12]
 8011946:	f000 fcfa 	bl	801233e <_ZNSt6vectorI12sum_operatorSaIS0_EE5beginEv>
 801194a:	4603      	mov	r3, r0
 801194c:	617b      	str	r3, [r7, #20]
 801194e:	f107 0214 	add.w	r2, r7, #20
 8011952:	f107 0308 	add.w	r3, r7, #8
 8011956:	4611      	mov	r1, r2
 8011958:	4618      	mov	r0, r3
 801195a:	f000 fd00 	bl	801235e <_ZN9__gnu_cxxmiIP12sum_operatorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 801195e:	4603      	mov	r3, r0
 8011960:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011966:	4618      	mov	r0, r3
 8011968:	f000 fd0d 	bl	8012386 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE11_M_allocateEj>
 801196c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801196e:	69fb      	ldr	r3, [r7, #28]
 8011970:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011972:	68fc      	ldr	r4, [r7, #12]
 8011974:	69fa      	ldr	r2, [r7, #28]
 8011976:	6a3b      	ldr	r3, [r7, #32]
 8011978:	18d5      	adds	r5, r2, r3
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f7ff ffa1 	bl	80118c2 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8011980:	4603      	mov	r3, r0
 8011982:	461a      	mov	r2, r3
 8011984:	4629      	mov	r1, r5
 8011986:	4620      	mov	r0, r4
 8011988:	f7ff ffa6 	bl	80118d8 <_ZNSt16allocator_traitsISaI12sum_operatorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 801198c:	2300      	movs	r3, #0
 801198e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011990:	f107 0308 	add.w	r3, r7, #8
 8011994:	4618      	mov	r0, r3
 8011996:	f000 fd1e 	bl	80123d6 <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 801199a:	4603      	mov	r3, r0
 801199c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7f3 fc19 	bl	80051d8 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80119a6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80119a8:	69fa      	ldr	r2, [r7, #28]
 80119aa:	4621      	mov	r1, r4
 80119ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119ae:	f000 fcfe 	bl	80123ae <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80119b2:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80119b4:	69bb      	ldr	r3, [r7, #24]
 80119b6:	3301      	adds	r3, #1
 80119b8:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80119ba:	f107 0308 	add.w	r3, r7, #8
 80119be:	4618      	mov	r0, r3
 80119c0:	f000 fd09 	bl	80123d6 <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 80119c4:	4603      	mov	r3, r0
 80119c6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7f3 fc04 	bl	80051d8 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80119d0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80119d2:	69ba      	ldr	r2, [r7, #24]
 80119d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80119d6:	4620      	mov	r0, r4
 80119d8:	f000 fce9 	bl	80123ae <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80119dc:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80119de:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	689a      	ldr	r2, [r3, #8]
 80119e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e6:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 80119e8:	461a      	mov	r2, r3
 80119ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80119ec:	f7f4 f950 	bl	8005c90 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	69fa      	ldr	r2, [r7, #28]
 80119f4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	69ba      	ldr	r2, [r7, #24]
 80119fa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80119fc:	69fa      	ldr	r2, [r7, #28]
 80119fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a00:	441a      	add	r2, r3
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	609a      	str	r2, [r3, #8]
    }
 8011a06:	bf00      	nop
 8011a08:	3730      	adds	r7, #48	; 0x30
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8011a0e:	bf00      	nop
 8011a10:	0801a8f4 	.word	0x0801a8f4

08011a14 <_ZNSt6vectorI12sum_operatorSaIS0_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b084      	sub	sp, #16
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f7ff ff6e 	bl	80118fe <_ZNSt6vectorI12sum_operatorSaIS0_EE3endEv>
 8011a22:	4603      	mov	r3, r0
 8011a24:	60fb      	str	r3, [r7, #12]
 8011a26:	f107 030c 	add.w	r3, r7, #12
 8011a2a:	2101      	movs	r1, #1
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f000 fcdd 	bl	80123ec <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEmiEi>
 8011a32:	4603      	mov	r3, r0
 8011a34:	60bb      	str	r3, [r7, #8]
 8011a36:	f107 0308 	add.w	r3, r7, #8
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f000 fcee 	bl	801241c <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEdeEv>
 8011a40:	4603      	mov	r3, r0
      }
 8011a42:	4618      	mov	r0, r3
 8011a44:	3710      	adds	r7, #16
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}

08011a4a <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionEC1Ev>:
 8011a4a:	b480      	push	{r7}
 8011a4c:	b083      	sub	sp, #12
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6078      	str	r0, [r7, #4]
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	4618      	mov	r0, r3
 8011a56:	370c      	adds	r7, #12
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr

08011a60 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorEC1Ev>:
 8011a60:	b480      	push	{r7}
 8011a62:	b083      	sub	sp, #12
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	370c      	adds	r7, #12
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a74:	4770      	bx	lr

08011a76 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011a76:	b480      	push	{r7}
 8011a78:	b083      	sub	sp, #12
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	4618      	mov	r0, r3
 8011a82:	370c      	adds	r7, #12
 8011a84:	46bd      	mov	sp, r7
 8011a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8a:	4770      	bx	lr

08011a8c <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b084      	sub	sp, #16
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f7ff ffec 	bl	8011a76 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	461a      	mov	r2, r3
 8011aa2:	68b9      	ldr	r1, [r7, #8]
 8011aa4:	68f8      	ldr	r0, [r7, #12]
 8011aa6:	f000 fcc5 	bl	8012434 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 8011aaa:	bf00      	nop
 8011aac:	3710      	adds	r7, #16
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
	...

08011ab4 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011ab4:	b5b0      	push	{r4, r5, r7, lr}
 8011ab6:	b08c      	sub	sp, #48	; 0x30
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	60f8      	str	r0, [r7, #12]
 8011abc:	60b9      	str	r1, [r7, #8]
 8011abe:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8011ac0:	4a39      	ldr	r2, [pc, #228]	; (8011ba8 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8011ac2:	2101      	movs	r1, #1
 8011ac4:	68f8      	ldr	r0, [r7, #12]
 8011ac6:	f000 fccb 	bl	8012460 <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc>
 8011aca:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	685b      	ldr	r3, [r3, #4]
 8011ad6:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011ad8:	68f8      	ldr	r0, [r7, #12]
 8011ada:	f7f2 ff96 	bl	8004a0a <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE5beginEv>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	617b      	str	r3, [r7, #20]
 8011ae2:	f107 0214 	add.w	r2, r7, #20
 8011ae6:	f107 0308 	add.w	r3, r7, #8
 8011aea:	4611      	mov	r1, r2
 8011aec:	4618      	mov	r0, r3
 8011aee:	f000 fcfe 	bl	80124ee <_ZN9__gnu_cxxmiIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8011af2:	4603      	mov	r3, r0
 8011af4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011afa:	4618      	mov	r0, r3
 8011afc:	f000 fd0c 	bl	8012518 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE11_M_allocateEj>
 8011b00:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8011b02:	69fb      	ldr	r3, [r7, #28]
 8011b04:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011b06:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011b08:	6a3b      	ldr	r3, [r7, #32]
 8011b0a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011b0c:	69fa      	ldr	r2, [r7, #28]
 8011b0e:	18d5      	adds	r5, r2, r3
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f7ff ffb0 	bl	8011a76 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011b16:	4603      	mov	r3, r0
 8011b18:	461a      	mov	r2, r3
 8011b1a:	4629      	mov	r1, r5
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	f7ff ffb5 	bl	8011a8c <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011b22:	2300      	movs	r3, #0
 8011b24:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011b26:	f107 0308 	add.w	r3, r7, #8
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7f3 fb7d 	bl	800522a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8011b30:	4603      	mov	r3, r0
 8011b32:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7f3 fb11 	bl	800515e <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8011b3c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011b3e:	69fa      	ldr	r2, [r7, #28]
 8011b40:	4621      	mov	r1, r4
 8011b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b44:	f000 fcfc 	bl	8012540 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011b48:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	3304      	adds	r3, #4
 8011b4e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011b50:	f107 0308 	add.w	r3, r7, #8
 8011b54:	4618      	mov	r0, r3
 8011b56:	f7f3 fb68 	bl	800522a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7f3 fafc 	bl	800515e <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8011b66:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011b68:	69ba      	ldr	r2, [r7, #24]
 8011b6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b6c:	4620      	mov	r0, r4
 8011b6e:	f000 fce7 	bl	8012540 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011b72:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011b74:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	689a      	ldr	r2, [r3, #8]
 8011b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b7c:	1ad3      	subs	r3, r2, r3
 8011b7e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8011b80:	461a      	mov	r2, r3
 8011b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b84:	f7f4 f858 	bl	8005c38 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	69fa      	ldr	r2, [r7, #28]
 8011b8c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	69ba      	ldr	r2, [r7, #24]
 8011b92:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b96:	009b      	lsls	r3, r3, #2
 8011b98:	69fa      	ldr	r2, [r7, #28]
 8011b9a:	441a      	add	r2, r3
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	609a      	str	r2, [r3, #8]
    }
 8011ba0:	bf00      	nop
 8011ba2:	3730      	adds	r7, #48	; 0x30
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8011ba8:	0801a8f4 	.word	0x0801a8f4

08011bac <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b084      	sub	sp, #16
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f7f2 ff38 	bl	8004a2a <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE3endEv>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	60fb      	str	r3, [r7, #12]
 8011bbe:	f107 030c 	add.w	r3, r7, #12
 8011bc2:	2101      	movs	r1, #1
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f000 fccf 	bl	8012568 <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEmiEi>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	60bb      	str	r3, [r7, #8]
 8011bce:	f107 0308 	add.w	r3, r7, #8
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7f2 ff62 	bl	8004a9c <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 8011bd8:	4603      	mov	r3, r0
      }
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3710      	adds	r7, #16
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}

08011be2 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionEC1Ev>:
 8011be2:	b480      	push	{r7}
 8011be4:	b083      	sub	sp, #12
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	4618      	mov	r0, r3
 8011bee:	370c      	adds	r7, #12
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf6:	4770      	bx	lr

08011bf8 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011bf8:	b480      	push	{r7}
 8011bfa:	b083      	sub	sp, #12
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	4618      	mov	r0, r3
 8011c04:	370c      	adds	r7, #12
 8011c06:	46bd      	mov	sp, r7
 8011c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0c:	4770      	bx	lr

08011c0e <_ZNSt16allocator_traitsISaIP18Compare_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8011c0e:	b580      	push	{r7, lr}
 8011c10:	b084      	sub	sp, #16
 8011c12:	af00      	add	r7, sp, #0
 8011c14:	60f8      	str	r0, [r7, #12]
 8011c16:	60b9      	str	r1, [r7, #8]
 8011c18:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f7ff ffec 	bl	8011bf8 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011c20:	4603      	mov	r3, r0
 8011c22:	461a      	mov	r2, r3
 8011c24:	68b9      	ldr	r1, [r7, #8]
 8011c26:	68f8      	ldr	r0, [r7, #12]
 8011c28:	f000 fcb7 	bl	801259a <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 8011c2c:	bf00      	nop
 8011c2e:	3710      	adds	r7, #16
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011c34:	b5b0      	push	{r4, r5, r7, lr}
 8011c36:	b08c      	sub	sp, #48	; 0x30
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	60f8      	str	r0, [r7, #12]
 8011c3c:	60b9      	str	r1, [r7, #8]
 8011c3e:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8011c40:	4a39      	ldr	r2, [pc, #228]	; (8011d28 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8011c42:	2101      	movs	r1, #1
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	f000 fcbe 	bl	80125c6 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc>
 8011c4a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011c58:	68f8      	ldr	r0, [r7, #12]
 8011c5a:	f7f2 ff46 	bl	8004aea <_ZNSt6vectorIP18Compare_expressionSaIS1_EE5beginEv>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	617b      	str	r3, [r7, #20]
 8011c62:	f107 0214 	add.w	r2, r7, #20
 8011c66:	f107 0308 	add.w	r3, r7, #8
 8011c6a:	4611      	mov	r1, r2
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f000 fcf1 	bl	8012654 <_ZN9__gnu_cxxmiIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8011c72:	4603      	mov	r3, r0
 8011c74:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f000 fcff 	bl	801267e <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE11_M_allocateEj>
 8011c80:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8011c82:	69fb      	ldr	r3, [r7, #28]
 8011c84:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011c86:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011c88:	6a3b      	ldr	r3, [r7, #32]
 8011c8a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011c8c:	69fa      	ldr	r2, [r7, #28]
 8011c8e:	18d5      	adds	r5, r2, r3
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f7ff ffb1 	bl	8011bf8 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011c96:	4603      	mov	r3, r0
 8011c98:	461a      	mov	r2, r3
 8011c9a:	4629      	mov	r1, r5
 8011c9c:	4620      	mov	r0, r4
 8011c9e:	f7ff ffb6 	bl	8011c0e <_ZNSt16allocator_traitsISaIP18Compare_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011ca6:	f107 0308 	add.w	r3, r7, #8
 8011caa:	4618      	mov	r0, r3
 8011cac:	f7f3 fb16 	bl	80052dc <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7f3 fae7 	bl	800528a <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8011cbc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011cbe:	69fa      	ldr	r2, [r7, #28]
 8011cc0:	4621      	mov	r1, r4
 8011cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011cc4:	f000 fcef 	bl	80126a6 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011cc8:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8011cca:	69bb      	ldr	r3, [r7, #24]
 8011ccc:	3304      	adds	r3, #4
 8011cce:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011cd0:	f107 0308 	add.w	r3, r7, #8
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7f3 fb01 	bl	80052dc <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7f3 fad2 	bl	800528a <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8011ce6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011ce8:	69ba      	ldr	r2, [r7, #24]
 8011cea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011cec:	4620      	mov	r0, r4
 8011cee:	f000 fcda 	bl	80126a6 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011cf2:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011cf4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	689a      	ldr	r2, [r3, #8]
 8011cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cfc:	1ad3      	subs	r3, r2, r3
 8011cfe:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8011d00:	461a      	mov	r2, r3
 8011d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d04:	f7f3 fff0 	bl	8005ce8 <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	69fa      	ldr	r2, [r7, #28]
 8011d0c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	69ba      	ldr	r2, [r7, #24]
 8011d12:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d16:	009b      	lsls	r3, r3, #2
 8011d18:	69fa      	ldr	r2, [r7, #28]
 8011d1a:	441a      	add	r2, r3
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	609a      	str	r2, [r3, #8]
    }
 8011d20:	bf00      	nop
 8011d22:	3730      	adds	r7, #48	; 0x30
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bdb0      	pop	{r4, r5, r7, pc}
 8011d28:	0801a8f4 	.word	0x0801a8f4

08011d2c <_ZNSt6vectorIP18Compare_expressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b084      	sub	sp, #16
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f7f2 fee8 	bl	8004b0a <_ZNSt6vectorIP18Compare_expressionSaIS1_EE3endEv>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	60fb      	str	r3, [r7, #12]
 8011d3e:	f107 030c 	add.w	r3, r7, #12
 8011d42:	2101      	movs	r1, #1
 8011d44:	4618      	mov	r0, r3
 8011d46:	f000 fcc2 	bl	80126ce <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEmiEi>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	60bb      	str	r3, [r7, #8]
 8011d4e:	f107 0308 	add.w	r3, r7, #8
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7f2 ff12 	bl	8004b7c <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 8011d58:	4603      	mov	r3, r0
      }
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3710      	adds	r7, #16
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}

08011d62 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionEC1Ev>:
 8011d62:	b480      	push	{r7}
 8011d64:	b083      	sub	sp, #12
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	6078      	str	r0, [r7, #4]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	370c      	adds	r7, #12
 8011d70:	46bd      	mov	sp, r7
 8011d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d76:	4770      	bx	lr

08011d78 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011d78:	b480      	push	{r7}
 8011d7a:	b083      	sub	sp, #12
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	4618      	mov	r0, r3
 8011d84:	370c      	adds	r7, #12
 8011d86:	46bd      	mov	sp, r7
 8011d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8c:	4770      	bx	lr

08011d8e <_ZNSt16allocator_traitsISaIP14And_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8011d8e:	b580      	push	{r7, lr}
 8011d90:	b084      	sub	sp, #16
 8011d92:	af00      	add	r7, sp, #0
 8011d94:	60f8      	str	r0, [r7, #12]
 8011d96:	60b9      	str	r1, [r7, #8]
 8011d98:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f7ff ffec 	bl	8011d78 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011da0:	4603      	mov	r3, r0
 8011da2:	461a      	mov	r2, r3
 8011da4:	68b9      	ldr	r1, [r7, #8]
 8011da6:	68f8      	ldr	r0, [r7, #12]
 8011da8:	f000 fcaa 	bl	8012700 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>
 8011dac:	bf00      	nop
 8011dae:	3710      	adds	r7, #16
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <_ZNSt6vectorIP14And_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011db4:	b5b0      	push	{r4, r5, r7, lr}
 8011db6:	b08c      	sub	sp, #48	; 0x30
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	60f8      	str	r0, [r7, #12]
 8011dbc:	60b9      	str	r1, [r7, #8]
 8011dbe:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8011dc0:	4a39      	ldr	r2, [pc, #228]	; (8011ea8 <_ZNSt6vectorIP14And_expressionSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8011dc2:	2101      	movs	r1, #1
 8011dc4:	68f8      	ldr	r0, [r7, #12]
 8011dc6:	f000 fcb1 	bl	801272c <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc>
 8011dca:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011dd8:	68f8      	ldr	r0, [r7, #12]
 8011dda:	f7f2 fef6 	bl	8004bca <_ZNSt6vectorIP14And_expressionSaIS1_EE5beginEv>
 8011dde:	4603      	mov	r3, r0
 8011de0:	617b      	str	r3, [r7, #20]
 8011de2:	f107 0214 	add.w	r2, r7, #20
 8011de6:	f107 0308 	add.w	r3, r7, #8
 8011dea:	4611      	mov	r1, r2
 8011dec:	4618      	mov	r0, r3
 8011dee:	f000 fce4 	bl	80127ba <_ZN9__gnu_cxxmiIPP14And_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8011df2:	4603      	mov	r3, r0
 8011df4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f000 fcf2 	bl	80127e4 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE11_M_allocateEj>
 8011e00:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8011e02:	69fb      	ldr	r3, [r7, #28]
 8011e04:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011e06:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011e08:	6a3b      	ldr	r3, [r7, #32]
 8011e0a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011e0c:	69fa      	ldr	r2, [r7, #28]
 8011e0e:	18d5      	adds	r5, r2, r3
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f7ff ffb1 	bl	8011d78 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8011e16:	4603      	mov	r3, r0
 8011e18:	461a      	mov	r2, r3
 8011e1a:	4629      	mov	r1, r5
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	f7ff ffb6 	bl	8011d8e <_ZNSt16allocator_traitsISaIP14And_expressionEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011e22:	2300      	movs	r3, #0
 8011e24:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011e26:	f107 0308 	add.w	r3, r7, #8
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f7f3 faaf 	bl	800538e <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8011e30:	4603      	mov	r3, r0
 8011e32:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7f3 fa80 	bl	800533c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8011e3c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011e3e:	69fa      	ldr	r2, [r7, #28]
 8011e40:	4621      	mov	r1, r4
 8011e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e44:	f000 fce2 	bl	801280c <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011e48:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8011e4a:	69bb      	ldr	r3, [r7, #24]
 8011e4c:	3304      	adds	r3, #4
 8011e4e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011e50:	f107 0308 	add.w	r3, r7, #8
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7f3 fa9a 	bl	800538e <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7f3 fa6b 	bl	800533c <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8011e66:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011e68:	69ba      	ldr	r2, [r7, #24]
 8011e6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	f000 fccd 	bl	801280c <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011e72:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011e74:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	689a      	ldr	r2, [r3, #8]
 8011e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e7c:	1ad3      	subs	r3, r2, r3
 8011e7e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8011e80:	461a      	mov	r2, r3
 8011e82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e84:	f7f3 ff5c 	bl	8005d40 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	69fa      	ldr	r2, [r7, #28]
 8011e8c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	69ba      	ldr	r2, [r7, #24]
 8011e92:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e96:	009b      	lsls	r3, r3, #2
 8011e98:	69fa      	ldr	r2, [r7, #28]
 8011e9a:	441a      	add	r2, r3
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	609a      	str	r2, [r3, #8]
    }
 8011ea0:	bf00      	nop
 8011ea2:	3730      	adds	r7, #48	; 0x30
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8011ea8:	0801a8f4 	.word	0x0801a8f4

08011eac <_ZNSt6vectorIP14And_expressionSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b084      	sub	sp, #16
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f7f2 fe98 	bl	8004bea <_ZNSt6vectorIP14And_expressionSaIS1_EE3endEv>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	60fb      	str	r3, [r7, #12]
 8011ebe:	f107 030c 	add.w	r3, r7, #12
 8011ec2:	2101      	movs	r1, #1
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f000 fcb5 	bl	8012834 <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEmiEi>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	60bb      	str	r3, [r7, #8]
 8011ece:	f107 0308 	add.w	r3, r7, #8
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7f2 fec2 	bl	8004c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEdeEv>
 8011ed8:	4603      	mov	r3, r0
      }
 8011eda:	4618      	mov	r0, r3
 8011edc:	3710      	adds	r7, #16
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}

08011ee2 <_ZSt9addressofIP8VariableEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 8011ee2:	b580      	push	{r7, lr}
 8011ee4:	b082      	sub	sp, #8
 8011ee6:	af00      	add	r7, sp, #0
 8011ee8:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f7f4 fa1f 	bl	800632e <_ZSt11__addressofIP8VariableEPT_RS2_>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3708      	adds	r7, #8
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}

08011efa <_ZSt9addressofIP10ExpressionEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 8011efa:	b580      	push	{r7, lr}
 8011efc:	b082      	sub	sp, #8
 8011efe:	af00      	add	r7, sp, #0
 8011f00:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8011f02:	6878      	ldr	r0, [r7, #4]
 8011f04:	f000 fcaf 	bl	8012866 <_ZSt11__addressofIP10ExpressionEPT_RS2_>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3708      	adds	r7, #8
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}

08011f12 <_ZSt9addressofIP17Primal_expressionEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 8011f12:	b580      	push	{r7, lr}
 8011f14:	b082      	sub	sp, #8
 8011f16:	af00      	add	r7, sp, #0
 8011f18:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f000 fcae 	bl	801287c <_ZSt11__addressofIP17Primal_expressionEPT_RS2_>
 8011f20:	4603      	mov	r3, r0
 8011f22:	4618      	mov	r0, r3
 8011f24:	3708      	adds	r7, #8
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}

08011f2a <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011f2a:	b590      	push	{r4, r7, lr}
 8011f2c:	b085      	sub	sp, #20
 8011f2e:	af00      	add	r7, sp, #0
 8011f30:	60f8      	str	r0, [r7, #12]
 8011f32:	60b9      	str	r1, [r7, #8]
 8011f34:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f7ff fb32 	bl	80115a0 <_ZSt7forwardI13mult_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	781c      	ldrb	r4, [r3, #0]
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	4619      	mov	r1, r3
 8011f44:	2001      	movs	r0, #1
 8011f46:	f7ef f849 	bl	8000fdc <_ZnwjPv>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	4622      	mov	r2, r4
 8011f4e:	701a      	strb	r2, [r3, #0]
 8011f50:	bf00      	nop
 8011f52:	3714      	adds	r7, #20
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd90      	pop	{r4, r7, pc}

08011f58 <_ZN9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011f58:	b480      	push	{r7}
 8011f5a:	b083      	sub	sp, #12
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	681a      	ldr	r2, [r3, #0]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	601a      	str	r2, [r3, #0]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	370c      	adds	r7, #12
 8011f70:	46bd      	mov	sp, r7
 8011f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f76:	4770      	bx	lr

08011f78 <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011f78:	b590      	push	{r4, r7, lr}
 8011f7a:	b087      	sub	sp, #28
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	60f8      	str	r0, [r7, #12]
 8011f80:	60b9      	str	r1, [r7, #8]
 8011f82:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011f84:	68f8      	ldr	r0, [r7, #12]
 8011f86:	f000 fc84 	bl	8012892 <_ZNKSt6vectorI13mult_operatorSaIS0_EE8max_sizeEv>
 8011f8a:	4604      	mov	r4, r0
 8011f8c:	68f8      	ldr	r0, [r7, #12]
 8011f8e:	f000 fc91 	bl	80128b4 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>
 8011f92:	4603      	mov	r3, r0
 8011f94:	1ae2      	subs	r2, r4, r3
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	bf34      	ite	cc
 8011f9c:	2301      	movcc	r3, #1
 8011f9e:	2300      	movcs	r3, #0
 8011fa0:	b2db      	uxtb	r3, r3
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d002      	beq.n	8011fac <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f004 ff8f 	bl	8016eca <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8011fac:	68f8      	ldr	r0, [r7, #12]
 8011fae:	f000 fc81 	bl	80128b4 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>
 8011fb2:	4604      	mov	r4, r0
 8011fb4:	68f8      	ldr	r0, [r7, #12]
 8011fb6:	f000 fc7d 	bl	80128b4 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	613b      	str	r3, [r7, #16]
 8011fbe:	f107 0208 	add.w	r2, r7, #8
 8011fc2:	f107 0310 	add.w	r3, r7, #16
 8011fc6:	4611      	mov	r1, r2
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7fa ff47 	bl	800ce5c <_ZSt3maxIjERKT_S2_S2_>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	4423      	add	r3, r4
 8011fd4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011fd6:	68f8      	ldr	r0, [r7, #12]
 8011fd8:	f000 fc6c 	bl	80128b4 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>
 8011fdc:	4602      	mov	r2, r0
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	4293      	cmp	r3, r2
 8011fe2:	d306      	bcc.n	8011ff2 <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8011fe4:	68f8      	ldr	r0, [r7, #12]
 8011fe6:	f000 fc54 	bl	8012892 <_ZNKSt6vectorI13mult_operatorSaIS0_EE8max_sizeEv>
 8011fea:	4602      	mov	r2, r0
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	d904      	bls.n	8011ffc <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc+0x84>
 8011ff2:	68f8      	ldr	r0, [r7, #12]
 8011ff4:	f000 fc4d 	bl	8012892 <_ZNKSt6vectorI13mult_operatorSaIS0_EE8max_sizeEv>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	e000      	b.n	8011ffe <_ZNKSt6vectorI13mult_operatorSaIS0_EE12_M_check_lenEjPKc+0x86>
 8011ffc:	697b      	ldr	r3, [r7, #20]
      }
 8011ffe:	4618      	mov	r0, r3
 8012000:	371c      	adds	r7, #28
 8012002:	46bd      	mov	sp, r7
 8012004:	bd90      	pop	{r4, r7, pc}

08012006 <_ZNSt6vectorI13mult_operatorSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8012006:	b580      	push	{r7, lr}
 8012008:	b084      	sub	sp, #16
 801200a:	af00      	add	r7, sp, #0
 801200c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801200e:	687a      	ldr	r2, [r7, #4]
 8012010:	f107 030c 	add.w	r3, r7, #12
 8012014:	4611      	mov	r1, r2
 8012016:	4618      	mov	r0, r3
 8012018:	f7ff ff9e 	bl	8011f58 <_ZN9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	4618      	mov	r0, r3
 8012020:	3710      	adds	r7, #16
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}

08012026 <_ZN9__gnu_cxxmiIP13mult_operatorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8012026:	b590      	push	{r4, r7, lr}
 8012028:	b083      	sub	sp, #12
 801202a:	af00      	add	r7, sp, #0
 801202c:	6078      	str	r0, [r7, #4]
 801202e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f000 f834 	bl	801209e <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 8012036:	4603      	mov	r3, r0
 8012038:	681c      	ldr	r4, [r3, #0]
 801203a:	6838      	ldr	r0, [r7, #0]
 801203c:	f000 f82f 	bl	801209e <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 8012040:	4603      	mov	r3, r0
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	1ae3      	subs	r3, r4, r3
 8012046:	4618      	mov	r0, r3
 8012048:	370c      	adds	r7, #12
 801204a:	46bd      	mov	sp, r7
 801204c:	bd90      	pop	{r4, r7, pc}

0801204e <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801204e:	b580      	push	{r7, lr}
 8012050:	b082      	sub	sp, #8
 8012052:	af00      	add	r7, sp, #0
 8012054:	6078      	str	r0, [r7, #4]
 8012056:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d006      	beq.n	801206c <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE11_M_allocateEj+0x1e>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6839      	ldr	r1, [r7, #0]
 8012062:	4618      	mov	r0, r3
 8012064:	f000 fc35 	bl	80128d2 <_ZNSt16allocator_traitsISaI13mult_operatorEE8allocateERS1_j>
 8012068:	4603      	mov	r3, r0
 801206a:	e000      	b.n	801206e <_ZNSt12_Vector_baseI13mult_operatorSaIS0_EE11_M_allocateEj+0x20>
 801206c:	2300      	movs	r3, #0
      }
 801206e:	4618      	mov	r0, r3
 8012070:	3708      	adds	r7, #8
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}

08012076 <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8012076:	b590      	push	{r4, r7, lr}
 8012078:	b089      	sub	sp, #36	; 0x24
 801207a:	af02      	add	r7, sp, #8
 801207c:	60f8      	str	r0, [r7, #12]
 801207e:	60b9      	str	r1, [r7, #8]
 8012080:	607a      	str	r2, [r7, #4]
 8012082:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8012084:	f88d 4000 	strb.w	r4, [sp]
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	687a      	ldr	r2, [r7, #4]
 801208c:	68b9      	ldr	r1, [r7, #8]
 801208e:	68f8      	ldr	r0, [r7, #12]
 8012090:	f000 fc2e 	bl	80128f0 <_ZNSt6vectorI13mult_operatorSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8012094:	4603      	mov	r3, r0
      }
 8012096:	4618      	mov	r0, r3
 8012098:	371c      	adds	r7, #28
 801209a:	46bd      	mov	sp, r7
 801209c:	bd90      	pop	{r4, r7, pc}

0801209e <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801209e:	b480      	push	{r7}
 80120a0:	b083      	sub	sp, #12
 80120a2:	af00      	add	r7, sp, #0
 80120a4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	4618      	mov	r0, r3
 80120aa:	370c      	adds	r7, #12
 80120ac:	46bd      	mov	sp, r7
 80120ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b2:	4770      	bx	lr

080120b4 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b084      	sub	sp, #16
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
 80120bc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	425b      	negs	r3, r3
 80120c6:	4413      	add	r3, r2
 80120c8:	60fb      	str	r3, [r7, #12]
 80120ca:	f107 020c 	add.w	r2, r7, #12
 80120ce:	f107 0308 	add.w	r3, r7, #8
 80120d2:	4611      	mov	r1, r2
 80120d4:	4618      	mov	r0, r3
 80120d6:	f7ff ff3f 	bl	8011f58 <_ZN9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	4618      	mov	r0, r3
 80120de:	3710      	adds	r7, #16
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}

080120e4 <_ZNK9__gnu_cxx17__normal_iteratorIP13mult_operatorSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80120e4:	b480      	push	{r7}
 80120e6:	b083      	sub	sp, #12
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	4618      	mov	r0, r3
 80120f2:	370c      	adds	r7, #12
 80120f4:	46bd      	mov	sp, r7
 80120f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fa:	4770      	bx	lr

080120fc <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80120fc:	b590      	push	{r4, r7, lr}
 80120fe:	b085      	sub	sp, #20
 8012100:	af00      	add	r7, sp, #0
 8012102:	60f8      	str	r0, [r7, #12]
 8012104:	60b9      	str	r1, [r7, #8]
 8012106:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f7ff fb24 	bl	8011756 <_ZSt7forwardIP16Power_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 801210e:	4603      	mov	r3, r0
 8012110:	681c      	ldr	r4, [r3, #0]
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	4619      	mov	r1, r3
 8012116:	2004      	movs	r0, #4
 8012118:	f7ee ff60 	bl	8000fdc <_ZnwjPv>
 801211c:	4603      	mov	r3, r0
 801211e:	601c      	str	r4, [r3, #0]
 8012120:	bf00      	nop
 8012122:	3714      	adds	r7, #20
 8012124:	46bd      	mov	sp, r7
 8012126:	bd90      	pop	{r4, r7, pc}

08012128 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8012128:	b590      	push	{r4, r7, lr}
 801212a:	b087      	sub	sp, #28
 801212c:	af00      	add	r7, sp, #0
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	60b9      	str	r1, [r7, #8]
 8012132:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8012134:	68f8      	ldr	r0, [r7, #12]
 8012136:	f000 fbed 	bl	8012914 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE8max_sizeEv>
 801213a:	4604      	mov	r4, r0
 801213c:	68f8      	ldr	r0, [r7, #12]
 801213e:	f000 fbfa 	bl	8012936 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>
 8012142:	4603      	mov	r3, r0
 8012144:	1ae2      	subs	r2, r4, r3
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	429a      	cmp	r2, r3
 801214a:	bf34      	ite	cc
 801214c:	2301      	movcc	r3, #1
 801214e:	2300      	movcs	r3, #0
 8012150:	b2db      	uxtb	r3, r3
 8012152:	2b00      	cmp	r3, #0
 8012154:	d002      	beq.n	801215c <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f004 feb7 	bl	8016eca <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801215c:	68f8      	ldr	r0, [r7, #12]
 801215e:	f000 fbea 	bl	8012936 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>
 8012162:	4604      	mov	r4, r0
 8012164:	68f8      	ldr	r0, [r7, #12]
 8012166:	f000 fbe6 	bl	8012936 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>
 801216a:	4603      	mov	r3, r0
 801216c:	613b      	str	r3, [r7, #16]
 801216e:	f107 0208 	add.w	r2, r7, #8
 8012172:	f107 0310 	add.w	r3, r7, #16
 8012176:	4611      	mov	r1, r2
 8012178:	4618      	mov	r0, r3
 801217a:	f7fa fe6f 	bl	800ce5c <_ZSt3maxIjERKT_S2_S2_>
 801217e:	4603      	mov	r3, r0
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	4423      	add	r3, r4
 8012184:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012186:	68f8      	ldr	r0, [r7, #12]
 8012188:	f000 fbd5 	bl	8012936 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>
 801218c:	4602      	mov	r2, r0
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	4293      	cmp	r3, r2
 8012192:	d306      	bcc.n	80121a2 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8012194:	68f8      	ldr	r0, [r7, #12]
 8012196:	f000 fbbd 	bl	8012914 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE8max_sizeEv>
 801219a:	4602      	mov	r2, r0
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	4293      	cmp	r3, r2
 80121a0:	d904      	bls.n	80121ac <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 80121a2:	68f8      	ldr	r0, [r7, #12]
 80121a4:	f000 fbb6 	bl	8012914 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE8max_sizeEv>
 80121a8:	4603      	mov	r3, r0
 80121aa:	e000      	b.n	80121ae <_ZNKSt6vectorIP16Power_expressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 80121ac:	697b      	ldr	r3, [r7, #20]
      }
 80121ae:	4618      	mov	r0, r3
 80121b0:	371c      	adds	r7, #28
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd90      	pop	{r4, r7, pc}

080121b6 <_ZN9__gnu_cxxmiIPP16Power_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80121b6:	b590      	push	{r4, r7, lr}
 80121b8:	b083      	sub	sp, #12
 80121ba:	af00      	add	r7, sp, #0
 80121bc:	6078      	str	r0, [r7, #4]
 80121be:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f7f2 ff9c 	bl	80050fe <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 80121c6:	4603      	mov	r3, r0
 80121c8:	681c      	ldr	r4, [r3, #0]
 80121ca:	6838      	ldr	r0, [r7, #0]
 80121cc:	f7f2 ff97 	bl	80050fe <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 80121d0:	4603      	mov	r3, r0
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	1ae3      	subs	r3, r4, r3
 80121d6:	109b      	asrs	r3, r3, #2
 80121d8:	4618      	mov	r0, r3
 80121da:	370c      	adds	r7, #12
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd90      	pop	{r4, r7, pc}

080121e0 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b082      	sub	sp, #8
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d006      	beq.n	80121fe <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE11_M_allocateEj+0x1e>
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6839      	ldr	r1, [r7, #0]
 80121f4:	4618      	mov	r0, r3
 80121f6:	f000 fbae 	bl	8012956 <_ZNSt16allocator_traitsISaIP16Power_expressionEE8allocateERS2_j>
 80121fa:	4603      	mov	r3, r0
 80121fc:	e000      	b.n	8012200 <_ZNSt12_Vector_baseIP16Power_expressionSaIS1_EE11_M_allocateEj+0x20>
 80121fe:	2300      	movs	r3, #0
      }
 8012200:	4618      	mov	r0, r3
 8012202:	3708      	adds	r7, #8
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}

08012208 <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8012208:	b590      	push	{r4, r7, lr}
 801220a:	b089      	sub	sp, #36	; 0x24
 801220c:	af02      	add	r7, sp, #8
 801220e:	60f8      	str	r0, [r7, #12]
 8012210:	60b9      	str	r1, [r7, #8]
 8012212:	607a      	str	r2, [r7, #4]
 8012214:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8012216:	f88d 4000 	strb.w	r4, [sp]
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	687a      	ldr	r2, [r7, #4]
 801221e:	68b9      	ldr	r1, [r7, #8]
 8012220:	68f8      	ldr	r0, [r7, #12]
 8012222:	f000 fba7 	bl	8012974 <_ZNSt6vectorIP16Power_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8012226:	4603      	mov	r3, r0
      }
 8012228:	4618      	mov	r0, r3
 801222a:	371c      	adds	r7, #28
 801222c:	46bd      	mov	sp, r7
 801222e:	bd90      	pop	{r4, r7, pc}

08012230 <_ZNK9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8012230:	b580      	push	{r7, lr}
 8012232:	b084      	sub	sp, #16
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681a      	ldr	r2, [r3, #0]
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	009b      	lsls	r3, r3, #2
 8012242:	425b      	negs	r3, r3
 8012244:	4413      	add	r3, r2
 8012246:	60fb      	str	r3, [r7, #12]
 8012248:	f107 020c 	add.w	r2, r7, #12
 801224c:	f107 0308 	add.w	r3, r7, #8
 8012250:	4611      	mov	r1, r2
 8012252:	4618      	mov	r0, r3
 8012254:	f7f2 ff43 	bl	80050de <_ZN9__gnu_cxx17__normal_iteratorIPP16Power_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	4618      	mov	r0, r3
 801225c:	3710      	adds	r7, #16
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}

08012262 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8012262:	b590      	push	{r4, r7, lr}
 8012264:	b085      	sub	sp, #20
 8012266:	af00      	add	r7, sp, #0
 8012268:	60f8      	str	r0, [r7, #12]
 801226a:	60b9      	str	r1, [r7, #8]
 801226c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7ff fb27 	bl	80118c2 <_ZSt7forwardI12sum_operatorEOT_RNSt16remove_referenceIS1_E4typeE>
 8012274:	4603      	mov	r3, r0
 8012276:	781c      	ldrb	r4, [r3, #0]
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	4619      	mov	r1, r3
 801227c:	2001      	movs	r0, #1
 801227e:	f7ee fead 	bl	8000fdc <_ZnwjPv>
 8012282:	4603      	mov	r3, r0
 8012284:	4622      	mov	r2, r4
 8012286:	701a      	strb	r2, [r3, #0]
 8012288:	bf00      	nop
 801228a:	3714      	adds	r7, #20
 801228c:	46bd      	mov	sp, r7
 801228e:	bd90      	pop	{r4, r7, pc}

08012290 <_ZN9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8012290:	b480      	push	{r7}
 8012292:	b083      	sub	sp, #12
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	681a      	ldr	r2, [r3, #0]
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	601a      	str	r2, [r3, #0]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	4618      	mov	r0, r3
 80122a6:	370c      	adds	r7, #12
 80122a8:	46bd      	mov	sp, r7
 80122aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ae:	4770      	bx	lr

080122b0 <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80122b0:	b590      	push	{r4, r7, lr}
 80122b2:	b087      	sub	sp, #28
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	60f8      	str	r0, [r7, #12]
 80122b8:	60b9      	str	r1, [r7, #8]
 80122ba:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80122bc:	68f8      	ldr	r0, [r7, #12]
 80122be:	f000 fb6b 	bl	8012998 <_ZNKSt6vectorI12sum_operatorSaIS0_EE8max_sizeEv>
 80122c2:	4604      	mov	r4, r0
 80122c4:	68f8      	ldr	r0, [r7, #12]
 80122c6:	f000 fb78 	bl	80129ba <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>
 80122ca:	4603      	mov	r3, r0
 80122cc:	1ae2      	subs	r2, r4, r3
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	bf34      	ite	cc
 80122d4:	2301      	movcc	r3, #1
 80122d6:	2300      	movcs	r3, #0
 80122d8:	b2db      	uxtb	r3, r3
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d002      	beq.n	80122e4 <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f004 fdf3 	bl	8016eca <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80122e4:	68f8      	ldr	r0, [r7, #12]
 80122e6:	f000 fb68 	bl	80129ba <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>
 80122ea:	4604      	mov	r4, r0
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f000 fb64 	bl	80129ba <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>
 80122f2:	4603      	mov	r3, r0
 80122f4:	613b      	str	r3, [r7, #16]
 80122f6:	f107 0208 	add.w	r2, r7, #8
 80122fa:	f107 0310 	add.w	r3, r7, #16
 80122fe:	4611      	mov	r1, r2
 8012300:	4618      	mov	r0, r3
 8012302:	f7fa fdab 	bl	800ce5c <_ZSt3maxIjERKT_S2_S2_>
 8012306:	4603      	mov	r3, r0
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	4423      	add	r3, r4
 801230c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801230e:	68f8      	ldr	r0, [r7, #12]
 8012310:	f000 fb53 	bl	80129ba <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>
 8012314:	4602      	mov	r2, r0
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	4293      	cmp	r3, r2
 801231a:	d306      	bcc.n	801232a <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc+0x7a>
 801231c:	68f8      	ldr	r0, [r7, #12]
 801231e:	f000 fb3b 	bl	8012998 <_ZNKSt6vectorI12sum_operatorSaIS0_EE8max_sizeEv>
 8012322:	4602      	mov	r2, r0
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	4293      	cmp	r3, r2
 8012328:	d904      	bls.n	8012334 <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc+0x84>
 801232a:	68f8      	ldr	r0, [r7, #12]
 801232c:	f000 fb34 	bl	8012998 <_ZNKSt6vectorI12sum_operatorSaIS0_EE8max_sizeEv>
 8012330:	4603      	mov	r3, r0
 8012332:	e000      	b.n	8012336 <_ZNKSt6vectorI12sum_operatorSaIS0_EE12_M_check_lenEjPKc+0x86>
 8012334:	697b      	ldr	r3, [r7, #20]
      }
 8012336:	4618      	mov	r0, r3
 8012338:	371c      	adds	r7, #28
 801233a:	46bd      	mov	sp, r7
 801233c:	bd90      	pop	{r4, r7, pc}

0801233e <_ZNSt6vectorI12sum_operatorSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801233e:	b580      	push	{r7, lr}
 8012340:	b084      	sub	sp, #16
 8012342:	af00      	add	r7, sp, #0
 8012344:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8012346:	687a      	ldr	r2, [r7, #4]
 8012348:	f107 030c 	add.w	r3, r7, #12
 801234c:	4611      	mov	r1, r2
 801234e:	4618      	mov	r0, r3
 8012350:	f7ff ff9e 	bl	8012290 <_ZN9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	4618      	mov	r0, r3
 8012358:	3710      	adds	r7, #16
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}

0801235e <_ZN9__gnu_cxxmiIP12sum_operatorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801235e:	b590      	push	{r4, r7, lr}
 8012360:	b083      	sub	sp, #12
 8012362:	af00      	add	r7, sp, #0
 8012364:	6078      	str	r0, [r7, #4]
 8012366:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f000 f834 	bl	80123d6 <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 801236e:	4603      	mov	r3, r0
 8012370:	681c      	ldr	r4, [r3, #0]
 8012372:	6838      	ldr	r0, [r7, #0]
 8012374:	f000 f82f 	bl	80123d6 <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>
 8012378:	4603      	mov	r3, r0
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	1ae3      	subs	r3, r4, r3
 801237e:	4618      	mov	r0, r3
 8012380:	370c      	adds	r7, #12
 8012382:	46bd      	mov	sp, r7
 8012384:	bd90      	pop	{r4, r7, pc}

08012386 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8012386:	b580      	push	{r7, lr}
 8012388:	b082      	sub	sp, #8
 801238a:	af00      	add	r7, sp, #0
 801238c:	6078      	str	r0, [r7, #4]
 801238e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d006      	beq.n	80123a4 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE11_M_allocateEj+0x1e>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	6839      	ldr	r1, [r7, #0]
 801239a:	4618      	mov	r0, r3
 801239c:	f000 fb1c 	bl	80129d8 <_ZNSt16allocator_traitsISaI12sum_operatorEE8allocateERS1_j>
 80123a0:	4603      	mov	r3, r0
 80123a2:	e000      	b.n	80123a6 <_ZNSt12_Vector_baseI12sum_operatorSaIS0_EE11_M_allocateEj+0x20>
 80123a4:	2300      	movs	r3, #0
      }
 80123a6:	4618      	mov	r0, r3
 80123a8:	3708      	adds	r7, #8
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}

080123ae <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80123ae:	b590      	push	{r4, r7, lr}
 80123b0:	b089      	sub	sp, #36	; 0x24
 80123b2:	af02      	add	r7, sp, #8
 80123b4:	60f8      	str	r0, [r7, #12]
 80123b6:	60b9      	str	r1, [r7, #8]
 80123b8:	607a      	str	r2, [r7, #4]
 80123ba:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80123bc:	f88d 4000 	strb.w	r4, [sp]
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	68b9      	ldr	r1, [r7, #8]
 80123c6:	68f8      	ldr	r0, [r7, #12]
 80123c8:	f000 fb15 	bl	80129f6 <_ZNSt6vectorI12sum_operatorSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80123cc:	4603      	mov	r3, r0
      }
 80123ce:	4618      	mov	r0, r3
 80123d0:	371c      	adds	r7, #28
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd90      	pop	{r4, r7, pc}

080123d6 <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80123d6:	b480      	push	{r7}
 80123d8:	b083      	sub	sp, #12
 80123da:	af00      	add	r7, sp, #0
 80123dc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	4618      	mov	r0, r3
 80123e2:	370c      	adds	r7, #12
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr

080123ec <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b084      	sub	sp, #16
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681a      	ldr	r2, [r3, #0]
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	425b      	negs	r3, r3
 80123fe:	4413      	add	r3, r2
 8012400:	60fb      	str	r3, [r7, #12]
 8012402:	f107 020c 	add.w	r2, r7, #12
 8012406:	f107 0308 	add.w	r3, r7, #8
 801240a:	4611      	mov	r1, r2
 801240c:	4618      	mov	r0, r3
 801240e:	f7ff ff3f 	bl	8012290 <_ZN9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	4618      	mov	r0, r3
 8012416:	3710      	adds	r7, #16
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <_ZNK9__gnu_cxx17__normal_iteratorIP12sum_operatorSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801241c:	b480      	push	{r7}
 801241e:	b083      	sub	sp, #12
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	4618      	mov	r0, r3
 801242a:	370c      	adds	r7, #12
 801242c:	46bd      	mov	sp, r7
 801242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012432:	4770      	bx	lr

08012434 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8012434:	b590      	push	{r4, r7, lr}
 8012436:	b085      	sub	sp, #20
 8012438:	af00      	add	r7, sp, #0
 801243a:	60f8      	str	r0, [r7, #12]
 801243c:	60b9      	str	r1, [r7, #8]
 801243e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f7ff fb18 	bl	8011a76 <_ZSt7forwardIP19Multiply_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8012446:	4603      	mov	r3, r0
 8012448:	681c      	ldr	r4, [r3, #0]
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	4619      	mov	r1, r3
 801244e:	2004      	movs	r0, #4
 8012450:	f7ee fdc4 	bl	8000fdc <_ZnwjPv>
 8012454:	4603      	mov	r3, r0
 8012456:	601c      	str	r4, [r3, #0]
 8012458:	bf00      	nop
 801245a:	3714      	adds	r7, #20
 801245c:	46bd      	mov	sp, r7
 801245e:	bd90      	pop	{r4, r7, pc}

08012460 <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8012460:	b590      	push	{r4, r7, lr}
 8012462:	b087      	sub	sp, #28
 8012464:	af00      	add	r7, sp, #0
 8012466:	60f8      	str	r0, [r7, #12]
 8012468:	60b9      	str	r1, [r7, #8]
 801246a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 801246c:	68f8      	ldr	r0, [r7, #12]
 801246e:	f000 fad4 	bl	8012a1a <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE8max_sizeEv>
 8012472:	4604      	mov	r4, r0
 8012474:	68f8      	ldr	r0, [r7, #12]
 8012476:	f000 fae1 	bl	8012a3c <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>
 801247a:	4603      	mov	r3, r0
 801247c:	1ae2      	subs	r2, r4, r3
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	429a      	cmp	r2, r3
 8012482:	bf34      	ite	cc
 8012484:	2301      	movcc	r3, #1
 8012486:	2300      	movcs	r3, #0
 8012488:	b2db      	uxtb	r3, r3
 801248a:	2b00      	cmp	r3, #0
 801248c:	d002      	beq.n	8012494 <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f004 fd1b 	bl	8016eca <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8012494:	68f8      	ldr	r0, [r7, #12]
 8012496:	f000 fad1 	bl	8012a3c <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>
 801249a:	4604      	mov	r4, r0
 801249c:	68f8      	ldr	r0, [r7, #12]
 801249e:	f000 facd 	bl	8012a3c <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>
 80124a2:	4603      	mov	r3, r0
 80124a4:	613b      	str	r3, [r7, #16]
 80124a6:	f107 0208 	add.w	r2, r7, #8
 80124aa:	f107 0310 	add.w	r3, r7, #16
 80124ae:	4611      	mov	r1, r2
 80124b0:	4618      	mov	r0, r3
 80124b2:	f7fa fcd3 	bl	800ce5c <_ZSt3maxIjERKT_S2_S2_>
 80124b6:	4603      	mov	r3, r0
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	4423      	add	r3, r4
 80124bc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80124be:	68f8      	ldr	r0, [r7, #12]
 80124c0:	f000 fabc 	bl	8012a3c <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>
 80124c4:	4602      	mov	r2, r0
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	4293      	cmp	r3, r2
 80124ca:	d306      	bcc.n	80124da <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80124cc:	68f8      	ldr	r0, [r7, #12]
 80124ce:	f000 faa4 	bl	8012a1a <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE8max_sizeEv>
 80124d2:	4602      	mov	r2, r0
 80124d4:	697b      	ldr	r3, [r7, #20]
 80124d6:	4293      	cmp	r3, r2
 80124d8:	d904      	bls.n	80124e4 <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 80124da:	68f8      	ldr	r0, [r7, #12]
 80124dc:	f000 fa9d 	bl	8012a1a <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE8max_sizeEv>
 80124e0:	4603      	mov	r3, r0
 80124e2:	e000      	b.n	80124e6 <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 80124e4:	697b      	ldr	r3, [r7, #20]
      }
 80124e6:	4618      	mov	r0, r3
 80124e8:	371c      	adds	r7, #28
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd90      	pop	{r4, r7, pc}

080124ee <_ZN9__gnu_cxxmiIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80124ee:	b590      	push	{r4, r7, lr}
 80124f0:	b083      	sub	sp, #12
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
 80124f6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f7f2 fe96 	bl	800522a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 80124fe:	4603      	mov	r3, r0
 8012500:	681c      	ldr	r4, [r3, #0]
 8012502:	6838      	ldr	r0, [r7, #0]
 8012504:	f7f2 fe91 	bl	800522a <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8012508:	4603      	mov	r3, r0
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	1ae3      	subs	r3, r4, r3
 801250e:	109b      	asrs	r3, r3, #2
 8012510:	4618      	mov	r0, r3
 8012512:	370c      	adds	r7, #12
 8012514:	46bd      	mov	sp, r7
 8012516:	bd90      	pop	{r4, r7, pc}

08012518 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8012518:	b580      	push	{r7, lr}
 801251a:	b082      	sub	sp, #8
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d006      	beq.n	8012536 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE11_M_allocateEj+0x1e>
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6839      	ldr	r1, [r7, #0]
 801252c:	4618      	mov	r0, r3
 801252e:	f000 fa95 	bl	8012a5c <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE8allocateERS2_j>
 8012532:	4603      	mov	r3, r0
 8012534:	e000      	b.n	8012538 <_ZNSt12_Vector_baseIP19Multiply_expressionSaIS1_EE11_M_allocateEj+0x20>
 8012536:	2300      	movs	r3, #0
      }
 8012538:	4618      	mov	r0, r3
 801253a:	3708      	adds	r7, #8
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8012540:	b590      	push	{r4, r7, lr}
 8012542:	b089      	sub	sp, #36	; 0x24
 8012544:	af02      	add	r7, sp, #8
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	607a      	str	r2, [r7, #4]
 801254c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801254e:	f88d 4000 	strb.w	r4, [sp]
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	68b9      	ldr	r1, [r7, #8]
 8012558:	68f8      	ldr	r0, [r7, #12]
 801255a:	f000 fa8e 	bl	8012a7a <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 801255e:	4603      	mov	r3, r0
      }
 8012560:	4618      	mov	r0, r3
 8012562:	371c      	adds	r7, #28
 8012564:	46bd      	mov	sp, r7
 8012566:	bd90      	pop	{r4, r7, pc}

08012568 <_ZNK9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8012568:	b580      	push	{r7, lr}
 801256a:	b084      	sub	sp, #16
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681a      	ldr	r2, [r3, #0]
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	009b      	lsls	r3, r3, #2
 801257a:	425b      	negs	r3, r3
 801257c:	4413      	add	r3, r2
 801257e:	60fb      	str	r3, [r7, #12]
 8012580:	f107 020c 	add.w	r2, r7, #12
 8012584:	f107 0308 	add.w	r3, r7, #8
 8012588:	4611      	mov	r1, r2
 801258a:	4618      	mov	r0, r3
 801258c:	f7f2 fe3d 	bl	800520a <_ZN9__gnu_cxx17__normal_iteratorIPP19Multiply_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	4618      	mov	r0, r3
 8012594:	3710      	adds	r7, #16
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}

0801259a <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801259a:	b590      	push	{r4, r7, lr}
 801259c:	b085      	sub	sp, #20
 801259e:	af00      	add	r7, sp, #0
 80125a0:	60f8      	str	r0, [r7, #12]
 80125a2:	60b9      	str	r1, [r7, #8]
 80125a4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f7ff fb26 	bl	8011bf8 <_ZSt7forwardIP18Compare_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 80125ac:	4603      	mov	r3, r0
 80125ae:	681c      	ldr	r4, [r3, #0]
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	4619      	mov	r1, r3
 80125b4:	2004      	movs	r0, #4
 80125b6:	f7ee fd11 	bl	8000fdc <_ZnwjPv>
 80125ba:	4603      	mov	r3, r0
 80125bc:	601c      	str	r4, [r3, #0]
 80125be:	bf00      	nop
 80125c0:	3714      	adds	r7, #20
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd90      	pop	{r4, r7, pc}

080125c6 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80125c6:	b590      	push	{r4, r7, lr}
 80125c8:	b087      	sub	sp, #28
 80125ca:	af00      	add	r7, sp, #0
 80125cc:	60f8      	str	r0, [r7, #12]
 80125ce:	60b9      	str	r1, [r7, #8]
 80125d0:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80125d2:	68f8      	ldr	r0, [r7, #12]
 80125d4:	f000 fa63 	bl	8012a9e <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE8max_sizeEv>
 80125d8:	4604      	mov	r4, r0
 80125da:	68f8      	ldr	r0, [r7, #12]
 80125dc:	f000 fa70 	bl	8012ac0 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>
 80125e0:	4603      	mov	r3, r0
 80125e2:	1ae2      	subs	r2, r4, r3
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	bf34      	ite	cc
 80125ea:	2301      	movcc	r3, #1
 80125ec:	2300      	movcs	r3, #0
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d002      	beq.n	80125fa <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f004 fc68 	bl	8016eca <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80125fa:	68f8      	ldr	r0, [r7, #12]
 80125fc:	f000 fa60 	bl	8012ac0 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>
 8012600:	4604      	mov	r4, r0
 8012602:	68f8      	ldr	r0, [r7, #12]
 8012604:	f000 fa5c 	bl	8012ac0 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>
 8012608:	4603      	mov	r3, r0
 801260a:	613b      	str	r3, [r7, #16]
 801260c:	f107 0208 	add.w	r2, r7, #8
 8012610:	f107 0310 	add.w	r3, r7, #16
 8012614:	4611      	mov	r1, r2
 8012616:	4618      	mov	r0, r3
 8012618:	f7fa fc20 	bl	800ce5c <_ZSt3maxIjERKT_S2_S2_>
 801261c:	4603      	mov	r3, r0
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4423      	add	r3, r4
 8012622:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012624:	68f8      	ldr	r0, [r7, #12]
 8012626:	f000 fa4b 	bl	8012ac0 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>
 801262a:	4602      	mov	r2, r0
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	4293      	cmp	r3, r2
 8012630:	d306      	bcc.n	8012640 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8012632:	68f8      	ldr	r0, [r7, #12]
 8012634:	f000 fa33 	bl	8012a9e <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE8max_sizeEv>
 8012638:	4602      	mov	r2, r0
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	4293      	cmp	r3, r2
 801263e:	d904      	bls.n	801264a <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f000 fa2c 	bl	8012a9e <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE8max_sizeEv>
 8012646:	4603      	mov	r3, r0
 8012648:	e000      	b.n	801264c <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 801264a:	697b      	ldr	r3, [r7, #20]
      }
 801264c:	4618      	mov	r0, r3
 801264e:	371c      	adds	r7, #28
 8012650:	46bd      	mov	sp, r7
 8012652:	bd90      	pop	{r4, r7, pc}

08012654 <_ZN9__gnu_cxxmiIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8012654:	b590      	push	{r4, r7, lr}
 8012656:	b083      	sub	sp, #12
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f7f2 fe3c 	bl	80052dc <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 8012664:	4603      	mov	r3, r0
 8012666:	681c      	ldr	r4, [r3, #0]
 8012668:	6838      	ldr	r0, [r7, #0]
 801266a:	f7f2 fe37 	bl	80052dc <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 801266e:	4603      	mov	r3, r0
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	1ae3      	subs	r3, r4, r3
 8012674:	109b      	asrs	r3, r3, #2
 8012676:	4618      	mov	r0, r3
 8012678:	370c      	adds	r7, #12
 801267a:	46bd      	mov	sp, r7
 801267c:	bd90      	pop	{r4, r7, pc}

0801267e <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801267e:	b580      	push	{r7, lr}
 8012680:	b082      	sub	sp, #8
 8012682:	af00      	add	r7, sp, #0
 8012684:	6078      	str	r0, [r7, #4]
 8012686:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d006      	beq.n	801269c <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE11_M_allocateEj+0x1e>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	6839      	ldr	r1, [r7, #0]
 8012692:	4618      	mov	r0, r3
 8012694:	f000 fa24 	bl	8012ae0 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE8allocateERS2_j>
 8012698:	4603      	mov	r3, r0
 801269a:	e000      	b.n	801269e <_ZNSt12_Vector_baseIP18Compare_expressionSaIS1_EE11_M_allocateEj+0x20>
 801269c:	2300      	movs	r3, #0
      }
 801269e:	4618      	mov	r0, r3
 80126a0:	3708      	adds	r7, #8
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}

080126a6 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80126a6:	b590      	push	{r4, r7, lr}
 80126a8:	b089      	sub	sp, #36	; 0x24
 80126aa:	af02      	add	r7, sp, #8
 80126ac:	60f8      	str	r0, [r7, #12]
 80126ae:	60b9      	str	r1, [r7, #8]
 80126b0:	607a      	str	r2, [r7, #4]
 80126b2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80126b4:	f88d 4000 	strb.w	r4, [sp]
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	687a      	ldr	r2, [r7, #4]
 80126bc:	68b9      	ldr	r1, [r7, #8]
 80126be:	68f8      	ldr	r0, [r7, #12]
 80126c0:	f000 fa1d 	bl	8012afe <_ZNSt6vectorIP18Compare_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80126c4:	4603      	mov	r3, r0
      }
 80126c6:	4618      	mov	r0, r3
 80126c8:	371c      	adds	r7, #28
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd90      	pop	{r4, r7, pc}

080126ce <_ZNK9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80126ce:	b580      	push	{r7, lr}
 80126d0:	b084      	sub	sp, #16
 80126d2:	af00      	add	r7, sp, #0
 80126d4:	6078      	str	r0, [r7, #4]
 80126d6:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681a      	ldr	r2, [r3, #0]
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	009b      	lsls	r3, r3, #2
 80126e0:	425b      	negs	r3, r3
 80126e2:	4413      	add	r3, r2
 80126e4:	60fb      	str	r3, [r7, #12]
 80126e6:	f107 020c 	add.w	r2, r7, #12
 80126ea:	f107 0308 	add.w	r3, r7, #8
 80126ee:	4611      	mov	r1, r2
 80126f0:	4618      	mov	r0, r3
 80126f2:	f7f2 fde3 	bl	80052bc <_ZN9__gnu_cxx17__normal_iteratorIPP18Compare_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	4618      	mov	r0, r3
 80126fa:	3710      	adds	r7, #16
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd80      	pop	{r7, pc}

08012700 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8012700:	b590      	push	{r4, r7, lr}
 8012702:	b085      	sub	sp, #20
 8012704:	af00      	add	r7, sp, #0
 8012706:	60f8      	str	r0, [r7, #12]
 8012708:	60b9      	str	r1, [r7, #8]
 801270a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f7ff fb33 	bl	8011d78 <_ZSt7forwardIP14And_expressionEOT_RNSt16remove_referenceIS2_E4typeE>
 8012712:	4603      	mov	r3, r0
 8012714:	681c      	ldr	r4, [r3, #0]
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	4619      	mov	r1, r3
 801271a:	2004      	movs	r0, #4
 801271c:	f7ee fc5e 	bl	8000fdc <_ZnwjPv>
 8012720:	4603      	mov	r3, r0
 8012722:	601c      	str	r4, [r3, #0]
 8012724:	bf00      	nop
 8012726:	3714      	adds	r7, #20
 8012728:	46bd      	mov	sp, r7
 801272a:	bd90      	pop	{r4, r7, pc}

0801272c <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801272c:	b590      	push	{r4, r7, lr}
 801272e:	b087      	sub	sp, #28
 8012730:	af00      	add	r7, sp, #0
 8012732:	60f8      	str	r0, [r7, #12]
 8012734:	60b9      	str	r1, [r7, #8]
 8012736:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8012738:	68f8      	ldr	r0, [r7, #12]
 801273a:	f000 f9f2 	bl	8012b22 <_ZNKSt6vectorIP14And_expressionSaIS1_EE8max_sizeEv>
 801273e:	4604      	mov	r4, r0
 8012740:	68f8      	ldr	r0, [r7, #12]
 8012742:	f000 f9ff 	bl	8012b44 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 8012746:	4603      	mov	r3, r0
 8012748:	1ae2      	subs	r2, r4, r3
 801274a:	68bb      	ldr	r3, [r7, #8]
 801274c:	429a      	cmp	r2, r3
 801274e:	bf34      	ite	cc
 8012750:	2301      	movcc	r3, #1
 8012752:	2300      	movcs	r3, #0
 8012754:	b2db      	uxtb	r3, r3
 8012756:	2b00      	cmp	r3, #0
 8012758:	d002      	beq.n	8012760 <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f004 fbb5 	bl	8016eca <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8012760:	68f8      	ldr	r0, [r7, #12]
 8012762:	f000 f9ef 	bl	8012b44 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 8012766:	4604      	mov	r4, r0
 8012768:	68f8      	ldr	r0, [r7, #12]
 801276a:	f000 f9eb 	bl	8012b44 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 801276e:	4603      	mov	r3, r0
 8012770:	613b      	str	r3, [r7, #16]
 8012772:	f107 0208 	add.w	r2, r7, #8
 8012776:	f107 0310 	add.w	r3, r7, #16
 801277a:	4611      	mov	r1, r2
 801277c:	4618      	mov	r0, r3
 801277e:	f7fa fb6d 	bl	800ce5c <_ZSt3maxIjERKT_S2_S2_>
 8012782:	4603      	mov	r3, r0
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	4423      	add	r3, r4
 8012788:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801278a:	68f8      	ldr	r0, [r7, #12]
 801278c:	f000 f9da 	bl	8012b44 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>
 8012790:	4602      	mov	r2, r0
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	4293      	cmp	r3, r2
 8012796:	d306      	bcc.n	80127a6 <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8012798:	68f8      	ldr	r0, [r7, #12]
 801279a:	f000 f9c2 	bl	8012b22 <_ZNKSt6vectorIP14And_expressionSaIS1_EE8max_sizeEv>
 801279e:	4602      	mov	r2, r0
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	4293      	cmp	r3, r2
 80127a4:	d904      	bls.n	80127b0 <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc+0x84>
 80127a6:	68f8      	ldr	r0, [r7, #12]
 80127a8:	f000 f9bb 	bl	8012b22 <_ZNKSt6vectorIP14And_expressionSaIS1_EE8max_sizeEv>
 80127ac:	4603      	mov	r3, r0
 80127ae:	e000      	b.n	80127b2 <_ZNKSt6vectorIP14And_expressionSaIS1_EE12_M_check_lenEjPKc+0x86>
 80127b0:	697b      	ldr	r3, [r7, #20]
      }
 80127b2:	4618      	mov	r0, r3
 80127b4:	371c      	adds	r7, #28
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd90      	pop	{r4, r7, pc}

080127ba <_ZN9__gnu_cxxmiIPP14And_expressionSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80127ba:	b590      	push	{r4, r7, lr}
 80127bc:	b083      	sub	sp, #12
 80127be:	af00      	add	r7, sp, #0
 80127c0:	6078      	str	r0, [r7, #4]
 80127c2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f7f2 fde2 	bl	800538e <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 80127ca:	4603      	mov	r3, r0
 80127cc:	681c      	ldr	r4, [r3, #0]
 80127ce:	6838      	ldr	r0, [r7, #0]
 80127d0:	f7f2 fddd 	bl	800538e <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEE4baseEv>
 80127d4:	4603      	mov	r3, r0
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	1ae3      	subs	r3, r4, r3
 80127da:	109b      	asrs	r3, r3, #2
 80127dc:	4618      	mov	r0, r3
 80127de:	370c      	adds	r7, #12
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd90      	pop	{r4, r7, pc}

080127e4 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d006      	beq.n	8012802 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE11_M_allocateEj+0x1e>
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6839      	ldr	r1, [r7, #0]
 80127f8:	4618      	mov	r0, r3
 80127fa:	f000 f9b3 	bl	8012b64 <_ZNSt16allocator_traitsISaIP14And_expressionEE8allocateERS2_j>
 80127fe:	4603      	mov	r3, r0
 8012800:	e000      	b.n	8012804 <_ZNSt12_Vector_baseIP14And_expressionSaIS1_EE11_M_allocateEj+0x20>
 8012802:	2300      	movs	r3, #0
      }
 8012804:	4618      	mov	r0, r3
 8012806:	3708      	adds	r7, #8
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801280c:	b590      	push	{r4, r7, lr}
 801280e:	b089      	sub	sp, #36	; 0x24
 8012810:	af02      	add	r7, sp, #8
 8012812:	60f8      	str	r0, [r7, #12]
 8012814:	60b9      	str	r1, [r7, #8]
 8012816:	607a      	str	r2, [r7, #4]
 8012818:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801281a:	f88d 4000 	strb.w	r4, [sp]
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	687a      	ldr	r2, [r7, #4]
 8012822:	68b9      	ldr	r1, [r7, #8]
 8012824:	68f8      	ldr	r0, [r7, #12]
 8012826:	f000 f9ac 	bl	8012b82 <_ZNSt6vectorIP14And_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 801282a:	4603      	mov	r3, r0
      }
 801282c:	4618      	mov	r0, r3
 801282e:	371c      	adds	r7, #28
 8012830:	46bd      	mov	sp, r7
 8012832:	bd90      	pop	{r4, r7, pc}

08012834 <_ZNK9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8012834:	b580      	push	{r7, lr}
 8012836:	b084      	sub	sp, #16
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681a      	ldr	r2, [r3, #0]
 8012842:	683b      	ldr	r3, [r7, #0]
 8012844:	009b      	lsls	r3, r3, #2
 8012846:	425b      	negs	r3, r3
 8012848:	4413      	add	r3, r2
 801284a:	60fb      	str	r3, [r7, #12]
 801284c:	f107 020c 	add.w	r2, r7, #12
 8012850:	f107 0308 	add.w	r3, r7, #8
 8012854:	4611      	mov	r1, r2
 8012856:	4618      	mov	r0, r3
 8012858:	f7f2 fd89 	bl	800536e <_ZN9__gnu_cxx17__normal_iteratorIPP14And_expressionSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	4618      	mov	r0, r3
 8012860:	3710      	adds	r7, #16
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}

08012866 <_ZSt11__addressofIP10ExpressionEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012866:	b480      	push	{r7}
 8012868:	b083      	sub	sp, #12
 801286a:	af00      	add	r7, sp, #0
 801286c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	4618      	mov	r0, r3
 8012872:	370c      	adds	r7, #12
 8012874:	46bd      	mov	sp, r7
 8012876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287a:	4770      	bx	lr

0801287c <_ZSt11__addressofIP17Primal_expressionEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801287c:	b480      	push	{r7}
 801287e:	b083      	sub	sp, #12
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	4618      	mov	r0, r3
 8012888:	370c      	adds	r7, #12
 801288a:	46bd      	mov	sp, r7
 801288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012890:	4770      	bx	lr

08012892 <_ZNKSt6vectorI13mult_operatorSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012892:	b580      	push	{r7, lr}
 8012894:	b082      	sub	sp, #8
 8012896:	af00      	add	r7, sp, #0
 8012898:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	4618      	mov	r0, r3
 801289e:	f000 f99c 	bl	8012bda <_ZNKSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80128a2:	4603      	mov	r3, r0
 80128a4:	4618      	mov	r0, r3
 80128a6:	f000 f97e 	bl	8012ba6 <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_max_sizeERKS1_>
 80128aa:	4603      	mov	r3, r0
 80128ac:	4618      	mov	r0, r3
 80128ae:	3708      	adds	r7, #8
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}

080128b4 <_ZNKSt6vectorI13mult_operatorSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80128b4:	b480      	push	{r7}
 80128b6:	b083      	sub	sp, #12
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	685a      	ldr	r2, [r3, #4]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	1ad3      	subs	r3, r2, r3
 80128c6:	4618      	mov	r0, r3
 80128c8:	370c      	adds	r7, #12
 80128ca:	46bd      	mov	sp, r7
 80128cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d0:	4770      	bx	lr

080128d2 <_ZNSt16allocator_traitsISaI13mult_operatorEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80128d2:	b580      	push	{r7, lr}
 80128d4:	b082      	sub	sp, #8
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	6078      	str	r0, [r7, #4]
 80128da:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80128dc:	2200      	movs	r2, #0
 80128de:	6839      	ldr	r1, [r7, #0]
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f000 f985 	bl	8012bf0 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE8allocateEjPKv>
 80128e6:	4603      	mov	r3, r0
 80128e8:	4618      	mov	r0, r3
 80128ea:	3708      	adds	r7, #8
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}

080128f0 <_ZNSt6vectorI13mult_operatorSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b084      	sub	sp, #16
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	60f8      	str	r0, [r7, #12]
 80128f8:	60b9      	str	r1, [r7, #8]
 80128fa:	607a      	str	r2, [r7, #4]
 80128fc:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	68b9      	ldr	r1, [r7, #8]
 8012904:	68f8      	ldr	r0, [r7, #12]
 8012906:	f000 f990 	bl	8012c2a <_ZSt12__relocate_aIP13mult_operatorS1_SaIS0_EET0_T_S4_S3_RT1_>
 801290a:	4603      	mov	r3, r0
      }
 801290c:	4618      	mov	r0, r3
 801290e:	3710      	adds	r7, #16
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}

08012914 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	4618      	mov	r0, r3
 8012920:	f000 f9ba 	bl	8012c98 <_ZNKSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8012924:	4603      	mov	r3, r0
 8012926:	4618      	mov	r0, r3
 8012928:	f000 f99c 	bl	8012c64 <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_max_sizeERKS2_>
 801292c:	4603      	mov	r3, r0
 801292e:	4618      	mov	r0, r3
 8012930:	3708      	adds	r7, #8
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}

08012936 <_ZNKSt6vectorIP16Power_expressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012936:	b480      	push	{r7}
 8012938:	b083      	sub	sp, #12
 801293a:	af00      	add	r7, sp, #0
 801293c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	685a      	ldr	r2, [r3, #4]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	1ad3      	subs	r3, r2, r3
 8012948:	109b      	asrs	r3, r3, #2
 801294a:	4618      	mov	r0, r3
 801294c:	370c      	adds	r7, #12
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr

08012956 <_ZNSt16allocator_traitsISaIP16Power_expressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012956:	b580      	push	{r7, lr}
 8012958:	b082      	sub	sp, #8
 801295a:	af00      	add	r7, sp, #0
 801295c:	6078      	str	r0, [r7, #4]
 801295e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8012960:	2200      	movs	r2, #0
 8012962:	6839      	ldr	r1, [r7, #0]
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	f000 f9a2 	bl	8012cae <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE8allocateEjPKv>
 801296a:	4603      	mov	r3, r0
 801296c:	4618      	mov	r0, r3
 801296e:	3708      	adds	r7, #8
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}

08012974 <_ZNSt6vectorIP16Power_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012974:	b580      	push	{r7, lr}
 8012976:	b084      	sub	sp, #16
 8012978:	af00      	add	r7, sp, #0
 801297a:	60f8      	str	r0, [r7, #12]
 801297c:	60b9      	str	r1, [r7, #8]
 801297e:	607a      	str	r2, [r7, #4]
 8012980:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	687a      	ldr	r2, [r7, #4]
 8012986:	68b9      	ldr	r1, [r7, #8]
 8012988:	68f8      	ldr	r0, [r7, #12]
 801298a:	f000 f9af 	bl	8012cec <_ZSt12__relocate_aIPP16Power_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 801298e:	4603      	mov	r3, r0
      }
 8012990:	4618      	mov	r0, r3
 8012992:	3710      	adds	r7, #16
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}

08012998 <_ZNKSt6vectorI12sum_operatorSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	4618      	mov	r0, r3
 80129a4:	f000 f9d9 	bl	8012d5a <_ZNKSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>
 80129a8:	4603      	mov	r3, r0
 80129aa:	4618      	mov	r0, r3
 80129ac:	f000 f9bb 	bl	8012d26 <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_max_sizeERKS1_>
 80129b0:	4603      	mov	r3, r0
 80129b2:	4618      	mov	r0, r3
 80129b4:	3708      	adds	r7, #8
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}

080129ba <_ZNKSt6vectorI12sum_operatorSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80129ba:	b480      	push	{r7}
 80129bc:	b083      	sub	sp, #12
 80129be:	af00      	add	r7, sp, #0
 80129c0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	685a      	ldr	r2, [r3, #4]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	1ad3      	subs	r3, r2, r3
 80129cc:	4618      	mov	r0, r3
 80129ce:	370c      	adds	r7, #12
 80129d0:	46bd      	mov	sp, r7
 80129d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d6:	4770      	bx	lr

080129d8 <_ZNSt16allocator_traitsISaI12sum_operatorEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80129d8:	b580      	push	{r7, lr}
 80129da:	b082      	sub	sp, #8
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80129e2:	2200      	movs	r2, #0
 80129e4:	6839      	ldr	r1, [r7, #0]
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f000 f9c2 	bl	8012d70 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE8allocateEjPKv>
 80129ec:	4603      	mov	r3, r0
 80129ee:	4618      	mov	r0, r3
 80129f0:	3708      	adds	r7, #8
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}

080129f6 <_ZNSt6vectorI12sum_operatorSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80129f6:	b580      	push	{r7, lr}
 80129f8:	b084      	sub	sp, #16
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	60f8      	str	r0, [r7, #12]
 80129fe:	60b9      	str	r1, [r7, #8]
 8012a00:	607a      	str	r2, [r7, #4]
 8012a02:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	687a      	ldr	r2, [r7, #4]
 8012a08:	68b9      	ldr	r1, [r7, #8]
 8012a0a:	68f8      	ldr	r0, [r7, #12]
 8012a0c:	f000 f9cd 	bl	8012daa <_ZSt12__relocate_aIP12sum_operatorS1_SaIS0_EET0_T_S4_S3_RT1_>
 8012a10:	4603      	mov	r3, r0
      }
 8012a12:	4618      	mov	r0, r3
 8012a14:	3710      	adds	r7, #16
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}

08012a1a <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012a1a:	b580      	push	{r7, lr}
 8012a1c:	b082      	sub	sp, #8
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	4618      	mov	r0, r3
 8012a26:	f000 f9f7 	bl	8012e18 <_ZNKSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f000 f9d9 	bl	8012de4 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_max_sizeERKS2_>
 8012a32:	4603      	mov	r3, r0
 8012a34:	4618      	mov	r0, r3
 8012a36:	3708      	adds	r7, #8
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}

08012a3c <_ZNKSt6vectorIP19Multiply_expressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012a3c:	b480      	push	{r7}
 8012a3e:	b083      	sub	sp, #12
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	685a      	ldr	r2, [r3, #4]
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	1ad3      	subs	r3, r2, r3
 8012a4e:	109b      	asrs	r3, r3, #2
 8012a50:	4618      	mov	r0, r3
 8012a52:	370c      	adds	r7, #12
 8012a54:	46bd      	mov	sp, r7
 8012a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5a:	4770      	bx	lr

08012a5c <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b082      	sub	sp, #8
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8012a66:	2200      	movs	r2, #0
 8012a68:	6839      	ldr	r1, [r7, #0]
 8012a6a:	6878      	ldr	r0, [r7, #4]
 8012a6c:	f000 f9df 	bl	8012e2e <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE8allocateEjPKv>
 8012a70:	4603      	mov	r3, r0
 8012a72:	4618      	mov	r0, r3
 8012a74:	3708      	adds	r7, #8
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}

08012a7a <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012a7a:	b580      	push	{r7, lr}
 8012a7c:	b084      	sub	sp, #16
 8012a7e:	af00      	add	r7, sp, #0
 8012a80:	60f8      	str	r0, [r7, #12]
 8012a82:	60b9      	str	r1, [r7, #8]
 8012a84:	607a      	str	r2, [r7, #4]
 8012a86:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	687a      	ldr	r2, [r7, #4]
 8012a8c:	68b9      	ldr	r1, [r7, #8]
 8012a8e:	68f8      	ldr	r0, [r7, #12]
 8012a90:	f000 f9ec 	bl	8012e6c <_ZSt12__relocate_aIPP19Multiply_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012a94:	4603      	mov	r3, r0
      }
 8012a96:	4618      	mov	r0, r3
 8012a98:	3710      	adds	r7, #16
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}

08012a9e <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012a9e:	b580      	push	{r7, lr}
 8012aa0:	b082      	sub	sp, #8
 8012aa2:	af00      	add	r7, sp, #0
 8012aa4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f000 fa16 	bl	8012eda <_ZNKSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f000 f9f8 	bl	8012ea6 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_max_sizeERKS2_>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <_ZNKSt6vectorIP18Compare_expressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012ac0:	b480      	push	{r7}
 8012ac2:	b083      	sub	sp, #12
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	685a      	ldr	r2, [r3, #4]
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	1ad3      	subs	r3, r2, r3
 8012ad2:	109b      	asrs	r3, r3, #2
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	370c      	adds	r7, #12
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr

08012ae0 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8012aea:	2200      	movs	r2, #0
 8012aec:	6839      	ldr	r1, [r7, #0]
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f000 f9fe 	bl	8012ef0 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE8allocateEjPKv>
 8012af4:	4603      	mov	r3, r0
 8012af6:	4618      	mov	r0, r3
 8012af8:	3708      	adds	r7, #8
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}

08012afe <_ZNSt6vectorIP18Compare_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012afe:	b580      	push	{r7, lr}
 8012b00:	b084      	sub	sp, #16
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	60f8      	str	r0, [r7, #12]
 8012b06:	60b9      	str	r1, [r7, #8]
 8012b08:	607a      	str	r2, [r7, #4]
 8012b0a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	687a      	ldr	r2, [r7, #4]
 8012b10:	68b9      	ldr	r1, [r7, #8]
 8012b12:	68f8      	ldr	r0, [r7, #12]
 8012b14:	f000 fa0b 	bl	8012f2e <_ZSt12__relocate_aIPP18Compare_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012b18:	4603      	mov	r3, r0
      }
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3710      	adds	r7, #16
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}

08012b22 <_ZNKSt6vectorIP14And_expressionSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012b22:	b580      	push	{r7, lr}
 8012b24:	b082      	sub	sp, #8
 8012b26:	af00      	add	r7, sp, #0
 8012b28:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f000 fa35 	bl	8012f9c <_ZNKSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>
 8012b32:	4603      	mov	r3, r0
 8012b34:	4618      	mov	r0, r3
 8012b36:	f000 fa17 	bl	8012f68 <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_max_sizeERKS2_>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3708      	adds	r7, #8
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}

08012b44 <_ZNKSt6vectorIP14And_expressionSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012b44:	b480      	push	{r7}
 8012b46:	b083      	sub	sp, #12
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	685a      	ldr	r2, [r3, #4]
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	1ad3      	subs	r3, r2, r3
 8012b56:	109b      	asrs	r3, r3, #2
 8012b58:	4618      	mov	r0, r3
 8012b5a:	370c      	adds	r7, #12
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr

08012b64 <_ZNSt16allocator_traitsISaIP14And_expressionEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b082      	sub	sp, #8
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8012b6e:	2200      	movs	r2, #0
 8012b70:	6839      	ldr	r1, [r7, #0]
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f000 fa1d 	bl	8012fb2 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE8allocateEjPKv>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3708      	adds	r7, #8
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}

08012b82 <_ZNSt6vectorIP14And_expressionSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012b82:	b580      	push	{r7, lr}
 8012b84:	b084      	sub	sp, #16
 8012b86:	af00      	add	r7, sp, #0
 8012b88:	60f8      	str	r0, [r7, #12]
 8012b8a:	60b9      	str	r1, [r7, #8]
 8012b8c:	607a      	str	r2, [r7, #4]
 8012b8e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012b90:	683b      	ldr	r3, [r7, #0]
 8012b92:	687a      	ldr	r2, [r7, #4]
 8012b94:	68b9      	ldr	r1, [r7, #8]
 8012b96:	68f8      	ldr	r0, [r7, #12]
 8012b98:	f000 fa2a 	bl	8012ff0 <_ZSt12__relocate_aIPP14And_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012b9c:	4603      	mov	r3, r0
      }
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3710      	adds	r7, #16
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}

08012ba6 <_ZNSt6vectorI13mult_operatorSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012ba6:	b580      	push	{r7, lr}
 8012ba8:	b084      	sub	sp, #16
 8012baa:	af00      	add	r7, sp, #0
 8012bac:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8012bae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012bb2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f000 fa38 	bl	801302a <_ZNSt16allocator_traitsISaI13mult_operatorEE8max_sizeERKS1_>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012bbe:	f107 0208 	add.w	r2, r7, #8
 8012bc2:	f107 030c 	add.w	r3, r7, #12
 8012bc6:	4611      	mov	r1, r2
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7fa fec4 	bl	800d956 <_ZSt3minIjERKT_S2_S2_>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	681b      	ldr	r3, [r3, #0]
      }
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3710      	adds	r7, #16
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}

08012bda <_ZNKSt12_Vector_baseI13mult_operatorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012bda:	b480      	push	{r7}
 8012bdc:	b083      	sub	sp, #12
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	4618      	mov	r0, r3
 8012be6:	370c      	adds	r7, #12
 8012be8:	46bd      	mov	sp, r7
 8012bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bee:	4770      	bx	lr

08012bf0 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b084      	sub	sp, #16
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	60f8      	str	r0, [r7, #12]
 8012bf8:	60b9      	str	r1, [r7, #8]
 8012bfa:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8012bfc:	68f8      	ldr	r0, [r7, #12]
 8012bfe:	f000 fa20 	bl	8013042 <_ZNK9__gnu_cxx13new_allocatorI13mult_operatorE8max_sizeEv>
 8012c02:	4602      	mov	r2, r0
 8012c04:	68bb      	ldr	r3, [r7, #8]
 8012c06:	4293      	cmp	r3, r2
 8012c08:	bf8c      	ite	hi
 8012c0a:	2301      	movhi	r3, #1
 8012c0c:	2300      	movls	r3, #0
 8012c0e:	b2db      	uxtb	r3, r3
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d001      	beq.n	8012c18 <_ZN9__gnu_cxx13new_allocatorI13mult_operatorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8012c14:	f004 f950 	bl	8016eb8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012c18:	68b8      	ldr	r0, [r7, #8]
 8012c1a:	f004 f888 	bl	8016d2e <_Znwj>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	bf00      	nop
      }
 8012c22:	4618      	mov	r0, r3
 8012c24:	3710      	adds	r7, #16
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}

08012c2a <_ZSt12__relocate_aIP13mult_operatorS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8012c2a:	b5b0      	push	{r4, r5, r7, lr}
 8012c2c:	b084      	sub	sp, #16
 8012c2e:	af00      	add	r7, sp, #0
 8012c30:	60f8      	str	r0, [r7, #12]
 8012c32:	60b9      	str	r1, [r7, #8]
 8012c34:	607a      	str	r2, [r7, #4]
 8012c36:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012c38:	68f8      	ldr	r0, [r7, #12]
 8012c3a:	f000 fa0e 	bl	801305a <_ZSt12__niter_baseIP13mult_operatorET_S2_>
 8012c3e:	4604      	mov	r4, r0
 8012c40:	68b8      	ldr	r0, [r7, #8]
 8012c42:	f000 fa0a 	bl	801305a <_ZSt12__niter_baseIP13mult_operatorET_S2_>
 8012c46:	4605      	mov	r5, r0
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f000 fa06 	bl	801305a <_ZSt12__niter_baseIP13mult_operatorET_S2_>
 8012c4e:	4602      	mov	r2, r0
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	4629      	mov	r1, r5
 8012c54:	4620      	mov	r0, r4
 8012c56:	f000 fa0b 	bl	8013070 <_ZSt14__relocate_a_1I13mult_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8012c5a:	4603      	mov	r3, r0
    }
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3710      	adds	r7, #16
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bdb0      	pop	{r4, r5, r7, pc}

08012c64 <_ZNSt6vectorIP16Power_expressionSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b084      	sub	sp, #16
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8012c6c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012c70:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f000 fa17 	bl	80130a6 <_ZNSt16allocator_traitsISaIP16Power_expressionEE8max_sizeERKS2_>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012c7c:	f107 0208 	add.w	r2, r7, #8
 8012c80:	f107 030c 	add.w	r3, r7, #12
 8012c84:	4611      	mov	r1, r2
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7fa fe65 	bl	800d956 <_ZSt3minIjERKT_S2_S2_>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	681b      	ldr	r3, [r3, #0]
      }
 8012c90:	4618      	mov	r0, r3
 8012c92:	3710      	adds	r7, #16
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}

08012c98 <_ZNKSt12_Vector_baseIP16Power_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012c98:	b480      	push	{r7}
 8012c9a:	b083      	sub	sp, #12
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	370c      	adds	r7, #12
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cac:	4770      	bx	lr

08012cae <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012cae:	b580      	push	{r7, lr}
 8012cb0:	b084      	sub	sp, #16
 8012cb2:	af00      	add	r7, sp, #0
 8012cb4:	60f8      	str	r0, [r7, #12]
 8012cb6:	60b9      	str	r1, [r7, #8]
 8012cb8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8012cba:	68f8      	ldr	r0, [r7, #12]
 8012cbc:	f000 f9ff 	bl	80130be <_ZNK9__gnu_cxx13new_allocatorIP16Power_expressionE8max_sizeEv>
 8012cc0:	4602      	mov	r2, r0
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	4293      	cmp	r3, r2
 8012cc6:	bf8c      	ite	hi
 8012cc8:	2301      	movhi	r3, #1
 8012cca:	2300      	movls	r3, #0
 8012ccc:	b2db      	uxtb	r3, r3
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d001      	beq.n	8012cd6 <_ZN9__gnu_cxx13new_allocatorIP16Power_expressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8012cd2:	f004 f8f1 	bl	8016eb8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	009b      	lsls	r3, r3, #2
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f004 f827 	bl	8016d2e <_Znwj>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	bf00      	nop
      }
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3710      	adds	r7, #16
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}

08012cec <_ZSt12__relocate_aIPP16Power_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8012cec:	b5b0      	push	{r4, r5, r7, lr}
 8012cee:	b084      	sub	sp, #16
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	60f8      	str	r0, [r7, #12]
 8012cf4:	60b9      	str	r1, [r7, #8]
 8012cf6:	607a      	str	r2, [r7, #4]
 8012cf8:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012cfa:	68f8      	ldr	r0, [r7, #12]
 8012cfc:	f000 f9eb 	bl	80130d6 <_ZSt12__niter_baseIPP16Power_expressionET_S3_>
 8012d00:	4604      	mov	r4, r0
 8012d02:	68b8      	ldr	r0, [r7, #8]
 8012d04:	f000 f9e7 	bl	80130d6 <_ZSt12__niter_baseIPP16Power_expressionET_S3_>
 8012d08:	4605      	mov	r5, r0
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f000 f9e3 	bl	80130d6 <_ZSt12__niter_baseIPP16Power_expressionET_S3_>
 8012d10:	4602      	mov	r2, r0
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	4629      	mov	r1, r5
 8012d16:	4620      	mov	r0, r4
 8012d18:	f000 f9e8 	bl	80130ec <_ZSt14__relocate_a_1IP16Power_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8012d1c:	4603      	mov	r3, r0
    }
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3710      	adds	r7, #16
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bdb0      	pop	{r4, r5, r7, pc}

08012d26 <_ZNSt6vectorI12sum_operatorSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012d26:	b580      	push	{r7, lr}
 8012d28:	b084      	sub	sp, #16
 8012d2a:	af00      	add	r7, sp, #0
 8012d2c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8012d2e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012d32:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f000 f9f7 	bl	8013128 <_ZNSt16allocator_traitsISaI12sum_operatorEE8max_sizeERKS1_>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012d3e:	f107 0208 	add.w	r2, r7, #8
 8012d42:	f107 030c 	add.w	r3, r7, #12
 8012d46:	4611      	mov	r1, r2
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f7fa fe04 	bl	800d956 <_ZSt3minIjERKT_S2_S2_>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	681b      	ldr	r3, [r3, #0]
      }
 8012d52:	4618      	mov	r0, r3
 8012d54:	3710      	adds	r7, #16
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}

08012d5a <_ZNKSt12_Vector_baseI12sum_operatorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012d5a:	b480      	push	{r7}
 8012d5c:	b083      	sub	sp, #12
 8012d5e:	af00      	add	r7, sp, #0
 8012d60:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	4618      	mov	r0, r3
 8012d66:	370c      	adds	r7, #12
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr

08012d70 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b084      	sub	sp, #16
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	60f8      	str	r0, [r7, #12]
 8012d78:	60b9      	str	r1, [r7, #8]
 8012d7a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8012d7c:	68f8      	ldr	r0, [r7, #12]
 8012d7e:	f000 f9df 	bl	8013140 <_ZNK9__gnu_cxx13new_allocatorI12sum_operatorE8max_sizeEv>
 8012d82:	4602      	mov	r2, r0
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	4293      	cmp	r3, r2
 8012d88:	bf8c      	ite	hi
 8012d8a:	2301      	movhi	r3, #1
 8012d8c:	2300      	movls	r3, #0
 8012d8e:	b2db      	uxtb	r3, r3
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d001      	beq.n	8012d98 <_ZN9__gnu_cxx13new_allocatorI12sum_operatorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8012d94:	f004 f890 	bl	8016eb8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012d98:	68b8      	ldr	r0, [r7, #8]
 8012d9a:	f003 ffc8 	bl	8016d2e <_Znwj>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	bf00      	nop
      }
 8012da2:	4618      	mov	r0, r3
 8012da4:	3710      	adds	r7, #16
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}

08012daa <_ZSt12__relocate_aIP12sum_operatorS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8012daa:	b5b0      	push	{r4, r5, r7, lr}
 8012dac:	b084      	sub	sp, #16
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	60f8      	str	r0, [r7, #12]
 8012db2:	60b9      	str	r1, [r7, #8]
 8012db4:	607a      	str	r2, [r7, #4]
 8012db6:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012db8:	68f8      	ldr	r0, [r7, #12]
 8012dba:	f000 f9cd 	bl	8013158 <_ZSt12__niter_baseIP12sum_operatorET_S2_>
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	68b8      	ldr	r0, [r7, #8]
 8012dc2:	f000 f9c9 	bl	8013158 <_ZSt12__niter_baseIP12sum_operatorET_S2_>
 8012dc6:	4605      	mov	r5, r0
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f000 f9c5 	bl	8013158 <_ZSt12__niter_baseIP12sum_operatorET_S2_>
 8012dce:	4602      	mov	r2, r0
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	4629      	mov	r1, r5
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	f000 f9ca 	bl	801316e <_ZSt14__relocate_a_1I12sum_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8012dda:	4603      	mov	r3, r0
    }
 8012ddc:	4618      	mov	r0, r3
 8012dde:	3710      	adds	r7, #16
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bdb0      	pop	{r4, r5, r7, pc}

08012de4 <_ZNSt6vectorIP19Multiply_expressionSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b084      	sub	sp, #16
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8012dec:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012df0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f000 f9d6 	bl	80131a4 <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE8max_sizeERKS2_>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012dfc:	f107 0208 	add.w	r2, r7, #8
 8012e00:	f107 030c 	add.w	r3, r7, #12
 8012e04:	4611      	mov	r1, r2
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7fa fda5 	bl	800d956 <_ZSt3minIjERKT_S2_S2_>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	681b      	ldr	r3, [r3, #0]
      }
 8012e10:	4618      	mov	r0, r3
 8012e12:	3710      	adds	r7, #16
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}

08012e18 <_ZNKSt12_Vector_baseIP19Multiply_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012e18:	b480      	push	{r7}
 8012e1a:	b083      	sub	sp, #12
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	4618      	mov	r0, r3
 8012e24:	370c      	adds	r7, #12
 8012e26:	46bd      	mov	sp, r7
 8012e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2c:	4770      	bx	lr

08012e2e <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012e2e:	b580      	push	{r7, lr}
 8012e30:	b084      	sub	sp, #16
 8012e32:	af00      	add	r7, sp, #0
 8012e34:	60f8      	str	r0, [r7, #12]
 8012e36:	60b9      	str	r1, [r7, #8]
 8012e38:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8012e3a:	68f8      	ldr	r0, [r7, #12]
 8012e3c:	f000 f9be 	bl	80131bc <_ZNK9__gnu_cxx13new_allocatorIP19Multiply_expressionE8max_sizeEv>
 8012e40:	4602      	mov	r2, r0
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	4293      	cmp	r3, r2
 8012e46:	bf8c      	ite	hi
 8012e48:	2301      	movhi	r3, #1
 8012e4a:	2300      	movls	r3, #0
 8012e4c:	b2db      	uxtb	r3, r3
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d001      	beq.n	8012e56 <_ZN9__gnu_cxx13new_allocatorIP19Multiply_expressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8012e52:	f004 f831 	bl	8016eb8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	009b      	lsls	r3, r3, #2
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f003 ff67 	bl	8016d2e <_Znwj>
 8012e60:	4603      	mov	r3, r0
 8012e62:	bf00      	nop
      }
 8012e64:	4618      	mov	r0, r3
 8012e66:	3710      	adds	r7, #16
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd80      	pop	{r7, pc}

08012e6c <_ZSt12__relocate_aIPP19Multiply_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8012e6c:	b5b0      	push	{r4, r5, r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	607a      	str	r2, [r7, #4]
 8012e78:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012e7a:	68f8      	ldr	r0, [r7, #12]
 8012e7c:	f000 f9aa 	bl	80131d4 <_ZSt12__niter_baseIPP19Multiply_expressionET_S3_>
 8012e80:	4604      	mov	r4, r0
 8012e82:	68b8      	ldr	r0, [r7, #8]
 8012e84:	f000 f9a6 	bl	80131d4 <_ZSt12__niter_baseIPP19Multiply_expressionET_S3_>
 8012e88:	4605      	mov	r5, r0
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	f000 f9a2 	bl	80131d4 <_ZSt12__niter_baseIPP19Multiply_expressionET_S3_>
 8012e90:	4602      	mov	r2, r0
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	4629      	mov	r1, r5
 8012e96:	4620      	mov	r0, r4
 8012e98:	f000 f9a7 	bl	80131ea <_ZSt14__relocate_a_1IP19Multiply_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8012e9c:	4603      	mov	r3, r0
    }
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3710      	adds	r7, #16
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bdb0      	pop	{r4, r5, r7, pc}

08012ea6 <_ZNSt6vectorIP18Compare_expressionSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012ea6:	b580      	push	{r7, lr}
 8012ea8:	b084      	sub	sp, #16
 8012eaa:	af00      	add	r7, sp, #0
 8012eac:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8012eae:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012eb2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f000 f9b6 	bl	8013226 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE8max_sizeERKS2_>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012ebe:	f107 0208 	add.w	r2, r7, #8
 8012ec2:	f107 030c 	add.w	r3, r7, #12
 8012ec6:	4611      	mov	r1, r2
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f7fa fd44 	bl	800d956 <_ZSt3minIjERKT_S2_S2_>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	681b      	ldr	r3, [r3, #0]
      }
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	3710      	adds	r7, #16
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd80      	pop	{r7, pc}

08012eda <_ZNKSt12_Vector_baseIP18Compare_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012eda:	b480      	push	{r7}
 8012edc:	b083      	sub	sp, #12
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	370c      	adds	r7, #12
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eee:	4770      	bx	lr

08012ef0 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b084      	sub	sp, #16
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	60f8      	str	r0, [r7, #12]
 8012ef8:	60b9      	str	r1, [r7, #8]
 8012efa:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8012efc:	68f8      	ldr	r0, [r7, #12]
 8012efe:	f000 f99e 	bl	801323e <_ZNK9__gnu_cxx13new_allocatorIP18Compare_expressionE8max_sizeEv>
 8012f02:	4602      	mov	r2, r0
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	4293      	cmp	r3, r2
 8012f08:	bf8c      	ite	hi
 8012f0a:	2301      	movhi	r3, #1
 8012f0c:	2300      	movls	r3, #0
 8012f0e:	b2db      	uxtb	r3, r3
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d001      	beq.n	8012f18 <_ZN9__gnu_cxx13new_allocatorIP18Compare_expressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8012f14:	f003 ffd0 	bl	8016eb8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	009b      	lsls	r3, r3, #2
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f003 ff06 	bl	8016d2e <_Znwj>
 8012f22:	4603      	mov	r3, r0
 8012f24:	bf00      	nop
      }
 8012f26:	4618      	mov	r0, r3
 8012f28:	3710      	adds	r7, #16
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}

08012f2e <_ZSt12__relocate_aIPP18Compare_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8012f2e:	b5b0      	push	{r4, r5, r7, lr}
 8012f30:	b084      	sub	sp, #16
 8012f32:	af00      	add	r7, sp, #0
 8012f34:	60f8      	str	r0, [r7, #12]
 8012f36:	60b9      	str	r1, [r7, #8]
 8012f38:	607a      	str	r2, [r7, #4]
 8012f3a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012f3c:	68f8      	ldr	r0, [r7, #12]
 8012f3e:	f000 f98a 	bl	8013256 <_ZSt12__niter_baseIPP18Compare_expressionET_S3_>
 8012f42:	4604      	mov	r4, r0
 8012f44:	68b8      	ldr	r0, [r7, #8]
 8012f46:	f000 f986 	bl	8013256 <_ZSt12__niter_baseIPP18Compare_expressionET_S3_>
 8012f4a:	4605      	mov	r5, r0
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f000 f982 	bl	8013256 <_ZSt12__niter_baseIPP18Compare_expressionET_S3_>
 8012f52:	4602      	mov	r2, r0
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	4629      	mov	r1, r5
 8012f58:	4620      	mov	r0, r4
 8012f5a:	f000 f987 	bl	801326c <_ZSt14__relocate_a_1IP18Compare_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8012f5e:	4603      	mov	r3, r0
    }
 8012f60:	4618      	mov	r0, r3
 8012f62:	3710      	adds	r7, #16
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bdb0      	pop	{r4, r5, r7, pc}

08012f68 <_ZNSt6vectorIP14And_expressionSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b084      	sub	sp, #16
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8012f70:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012f74:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f000 f996 	bl	80132a8 <_ZNSt16allocator_traitsISaIP14And_expressionEE8max_sizeERKS2_>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012f80:	f107 0208 	add.w	r2, r7, #8
 8012f84:	f107 030c 	add.w	r3, r7, #12
 8012f88:	4611      	mov	r1, r2
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7fa fce3 	bl	800d956 <_ZSt3minIjERKT_S2_S2_>
 8012f90:	4603      	mov	r3, r0
 8012f92:	681b      	ldr	r3, [r3, #0]
      }
 8012f94:	4618      	mov	r0, r3
 8012f96:	3710      	adds	r7, #16
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <_ZNKSt12_Vector_baseIP14And_expressionSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012f9c:	b480      	push	{r7}
 8012f9e:	b083      	sub	sp, #12
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	370c      	adds	r7, #12
 8012faa:	46bd      	mov	sp, r7
 8012fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb0:	4770      	bx	lr

08012fb2 <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012fb2:	b580      	push	{r7, lr}
 8012fb4:	b084      	sub	sp, #16
 8012fb6:	af00      	add	r7, sp, #0
 8012fb8:	60f8      	str	r0, [r7, #12]
 8012fba:	60b9      	str	r1, [r7, #8]
 8012fbc:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8012fbe:	68f8      	ldr	r0, [r7, #12]
 8012fc0:	f000 f97e 	bl	80132c0 <_ZNK9__gnu_cxx13new_allocatorIP14And_expressionE8max_sizeEv>
 8012fc4:	4602      	mov	r2, r0
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	4293      	cmp	r3, r2
 8012fca:	bf8c      	ite	hi
 8012fcc:	2301      	movhi	r3, #1
 8012fce:	2300      	movls	r3, #0
 8012fd0:	b2db      	uxtb	r3, r3
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d001      	beq.n	8012fda <_ZN9__gnu_cxx13new_allocatorIP14And_expressionE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8012fd6:	f003 ff6f 	bl	8016eb8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	009b      	lsls	r3, r3, #2
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f003 fea5 	bl	8016d2e <_Znwj>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	bf00      	nop
      }
 8012fe8:	4618      	mov	r0, r3
 8012fea:	3710      	adds	r7, #16
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}

08012ff0 <_ZSt12__relocate_aIPP14And_expressionS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8012ff0:	b5b0      	push	{r4, r5, r7, lr}
 8012ff2:	b084      	sub	sp, #16
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	60f8      	str	r0, [r7, #12]
 8012ff8:	60b9      	str	r1, [r7, #8]
 8012ffa:	607a      	str	r2, [r7, #4]
 8012ffc:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012ffe:	68f8      	ldr	r0, [r7, #12]
 8013000:	f000 f96a 	bl	80132d8 <_ZSt12__niter_baseIPP14And_expressionET_S3_>
 8013004:	4604      	mov	r4, r0
 8013006:	68b8      	ldr	r0, [r7, #8]
 8013008:	f000 f966 	bl	80132d8 <_ZSt12__niter_baseIPP14And_expressionET_S3_>
 801300c:	4605      	mov	r5, r0
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f000 f962 	bl	80132d8 <_ZSt12__niter_baseIPP14And_expressionET_S3_>
 8013014:	4602      	mov	r2, r0
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	4629      	mov	r1, r5
 801301a:	4620      	mov	r0, r4
 801301c:	f000 f967 	bl	80132ee <_ZSt14__relocate_a_1IP14And_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8013020:	4603      	mov	r3, r0
    }
 8013022:	4618      	mov	r0, r3
 8013024:	3710      	adds	r7, #16
 8013026:	46bd      	mov	sp, r7
 8013028:	bdb0      	pop	{r4, r5, r7, pc}

0801302a <_ZNSt16allocator_traitsISaI13mult_operatorEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 801302a:	b580      	push	{r7, lr}
 801302c:	b082      	sub	sp, #8
 801302e:	af00      	add	r7, sp, #0
 8013030:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f000 f805 	bl	8013042 <_ZNK9__gnu_cxx13new_allocatorI13mult_operatorE8max_sizeEv>
 8013038:	4603      	mov	r3, r0
 801303a:	4618      	mov	r0, r3
 801303c:	3708      	adds	r7, #8
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}

08013042 <_ZNK9__gnu_cxx13new_allocatorI13mult_operatorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8013042:	b480      	push	{r7}
 8013044:	b083      	sub	sp, #12
 8013046:	af00      	add	r7, sp, #0
 8013048:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801304a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 801304e:	4618      	mov	r0, r3
 8013050:	370c      	adds	r7, #12
 8013052:	46bd      	mov	sp, r7
 8013054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013058:	4770      	bx	lr

0801305a <_ZSt12__niter_baseIP13mult_operatorET_S2_>:
    __niter_base(_Iterator __it)
 801305a:	b480      	push	{r7}
 801305c:	b083      	sub	sp, #12
 801305e:	af00      	add	r7, sp, #0
 8013060:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	4618      	mov	r0, r3
 8013066:	370c      	adds	r7, #12
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr

08013070 <_ZSt14__relocate_a_1I13mult_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013070:	b580      	push	{r7, lr}
 8013072:	b086      	sub	sp, #24
 8013074:	af00      	add	r7, sp, #0
 8013076:	60f8      	str	r0, [r7, #12]
 8013078:	60b9      	str	r1, [r7, #8]
 801307a:	607a      	str	r2, [r7, #4]
 801307c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801307e:	68ba      	ldr	r2, [r7, #8]
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	1ad3      	subs	r3, r2, r3
 8013084:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	2b00      	cmp	r3, #0
 801308a:	dd05      	ble.n	8013098 <_ZSt14__relocate_a_1I13mult_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	461a      	mov	r2, r3
 8013090:	68f9      	ldr	r1, [r7, #12]
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f004 f9f8 	bl	8017488 <memmove>
      return __result + __count;
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	4413      	add	r3, r2
    }
 801309e:	4618      	mov	r0, r3
 80130a0:	3718      	adds	r7, #24
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}

080130a6 <_ZNSt16allocator_traitsISaIP16Power_expressionEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 80130a6:	b580      	push	{r7, lr}
 80130a8:	b082      	sub	sp, #8
 80130aa:	af00      	add	r7, sp, #0
 80130ac:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f000 f805 	bl	80130be <_ZNK9__gnu_cxx13new_allocatorIP16Power_expressionE8max_sizeEv>
 80130b4:	4603      	mov	r3, r0
 80130b6:	4618      	mov	r0, r3
 80130b8:	3708      	adds	r7, #8
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}

080130be <_ZNK9__gnu_cxx13new_allocatorIP16Power_expressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80130be:	b480      	push	{r7}
 80130c0:	b083      	sub	sp, #12
 80130c2:	af00      	add	r7, sp, #0
 80130c4:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80130c6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80130ca:	4618      	mov	r0, r3
 80130cc:	370c      	adds	r7, #12
 80130ce:	46bd      	mov	sp, r7
 80130d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d4:	4770      	bx	lr

080130d6 <_ZSt12__niter_baseIPP16Power_expressionET_S3_>:
    __niter_base(_Iterator __it)
 80130d6:	b480      	push	{r7}
 80130d8:	b083      	sub	sp, #12
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	4618      	mov	r0, r3
 80130e2:	370c      	adds	r7, #12
 80130e4:	46bd      	mov	sp, r7
 80130e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ea:	4770      	bx	lr

080130ec <_ZSt14__relocate_a_1IP16Power_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b086      	sub	sp, #24
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	60f8      	str	r0, [r7, #12]
 80130f4:	60b9      	str	r1, [r7, #8]
 80130f6:	607a      	str	r2, [r7, #4]
 80130f8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80130fa:	68ba      	ldr	r2, [r7, #8]
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	1ad3      	subs	r3, r2, r3
 8013100:	109b      	asrs	r3, r3, #2
 8013102:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	2b00      	cmp	r3, #0
 8013108:	dd06      	ble.n	8013118 <_ZSt14__relocate_a_1IP16Power_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801310a:	697b      	ldr	r3, [r7, #20]
 801310c:	009b      	lsls	r3, r3, #2
 801310e:	461a      	mov	r2, r3
 8013110:	68f9      	ldr	r1, [r7, #12]
 8013112:	6878      	ldr	r0, [r7, #4]
 8013114:	f004 f9b8 	bl	8017488 <memmove>
      return __result + __count;
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	687a      	ldr	r2, [r7, #4]
 801311e:	4413      	add	r3, r2
    }
 8013120:	4618      	mov	r0, r3
 8013122:	3718      	adds	r7, #24
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}

08013128 <_ZNSt16allocator_traitsISaI12sum_operatorEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f000 f805 	bl	8013140 <_ZNK9__gnu_cxx13new_allocatorI12sum_operatorE8max_sizeEv>
 8013136:	4603      	mov	r3, r0
 8013138:	4618      	mov	r0, r3
 801313a:	3708      	adds	r7, #8
 801313c:	46bd      	mov	sp, r7
 801313e:	bd80      	pop	{r7, pc}

08013140 <_ZNK9__gnu_cxx13new_allocatorI12sum_operatorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8013140:	b480      	push	{r7}
 8013142:	b083      	sub	sp, #12
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013148:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 801314c:	4618      	mov	r0, r3
 801314e:	370c      	adds	r7, #12
 8013150:	46bd      	mov	sp, r7
 8013152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013156:	4770      	bx	lr

08013158 <_ZSt12__niter_baseIP12sum_operatorET_S2_>:
    __niter_base(_Iterator __it)
 8013158:	b480      	push	{r7}
 801315a:	b083      	sub	sp, #12
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	4618      	mov	r0, r3
 8013164:	370c      	adds	r7, #12
 8013166:	46bd      	mov	sp, r7
 8013168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316c:	4770      	bx	lr

0801316e <_ZSt14__relocate_a_1I12sum_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 801316e:	b580      	push	{r7, lr}
 8013170:	b086      	sub	sp, #24
 8013172:	af00      	add	r7, sp, #0
 8013174:	60f8      	str	r0, [r7, #12]
 8013176:	60b9      	str	r1, [r7, #8]
 8013178:	607a      	str	r2, [r7, #4]
 801317a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801317c:	68ba      	ldr	r2, [r7, #8]
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	1ad3      	subs	r3, r2, r3
 8013182:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	2b00      	cmp	r3, #0
 8013188:	dd05      	ble.n	8013196 <_ZSt14__relocate_a_1I12sum_operatorS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	461a      	mov	r2, r3
 801318e:	68f9      	ldr	r1, [r7, #12]
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f004 f979 	bl	8017488 <memmove>
      return __result + __count;
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	4413      	add	r3, r2
    }
 801319c:	4618      	mov	r0, r3
 801319e:	3718      	adds	r7, #24
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}

080131a4 <_ZNSt16allocator_traitsISaIP19Multiply_expressionEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b082      	sub	sp, #8
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f000 f805 	bl	80131bc <_ZNK9__gnu_cxx13new_allocatorIP19Multiply_expressionE8max_sizeEv>
 80131b2:	4603      	mov	r3, r0
 80131b4:	4618      	mov	r0, r3
 80131b6:	3708      	adds	r7, #8
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}

080131bc <_ZNK9__gnu_cxx13new_allocatorIP19Multiply_expressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80131bc:	b480      	push	{r7}
 80131be:	b083      	sub	sp, #12
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80131c4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80131c8:	4618      	mov	r0, r3
 80131ca:	370c      	adds	r7, #12
 80131cc:	46bd      	mov	sp, r7
 80131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d2:	4770      	bx	lr

080131d4 <_ZSt12__niter_baseIPP19Multiply_expressionET_S3_>:
    __niter_base(_Iterator __it)
 80131d4:	b480      	push	{r7}
 80131d6:	b083      	sub	sp, #12
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
    { return __it; }
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	4618      	mov	r0, r3
 80131e0:	370c      	adds	r7, #12
 80131e2:	46bd      	mov	sp, r7
 80131e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e8:	4770      	bx	lr

080131ea <_ZSt14__relocate_a_1IP19Multiply_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80131ea:	b580      	push	{r7, lr}
 80131ec:	b086      	sub	sp, #24
 80131ee:	af00      	add	r7, sp, #0
 80131f0:	60f8      	str	r0, [r7, #12]
 80131f2:	60b9      	str	r1, [r7, #8]
 80131f4:	607a      	str	r2, [r7, #4]
 80131f6:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80131f8:	68ba      	ldr	r2, [r7, #8]
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	1ad3      	subs	r3, r2, r3
 80131fe:	109b      	asrs	r3, r3, #2
 8013200:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	2b00      	cmp	r3, #0
 8013206:	dd06      	ble.n	8013216 <_ZSt14__relocate_a_1IP19Multiply_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	009b      	lsls	r3, r3, #2
 801320c:	461a      	mov	r2, r3
 801320e:	68f9      	ldr	r1, [r7, #12]
 8013210:	6878      	ldr	r0, [r7, #4]
 8013212:	f004 f939 	bl	8017488 <memmove>
      return __result + __count;
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	687a      	ldr	r2, [r7, #4]
 801321c:	4413      	add	r3, r2
    }
 801321e:	4618      	mov	r0, r3
 8013220:	3718      	adds	r7, #24
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}

08013226 <_ZNSt16allocator_traitsISaIP18Compare_expressionEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8013226:	b580      	push	{r7, lr}
 8013228:	b082      	sub	sp, #8
 801322a:	af00      	add	r7, sp, #0
 801322c:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f000 f805 	bl	801323e <_ZNK9__gnu_cxx13new_allocatorIP18Compare_expressionE8max_sizeEv>
 8013234:	4603      	mov	r3, r0
 8013236:	4618      	mov	r0, r3
 8013238:	3708      	adds	r7, #8
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}

0801323e <_ZNK9__gnu_cxx13new_allocatorIP18Compare_expressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801323e:	b480      	push	{r7}
 8013240:	b083      	sub	sp, #12
 8013242:	af00      	add	r7, sp, #0
 8013244:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013246:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 801324a:	4618      	mov	r0, r3
 801324c:	370c      	adds	r7, #12
 801324e:	46bd      	mov	sp, r7
 8013250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013254:	4770      	bx	lr

08013256 <_ZSt12__niter_baseIPP18Compare_expressionET_S3_>:
    __niter_base(_Iterator __it)
 8013256:	b480      	push	{r7}
 8013258:	b083      	sub	sp, #12
 801325a:	af00      	add	r7, sp, #0
 801325c:	6078      	str	r0, [r7, #4]
    { return __it; }
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	4618      	mov	r0, r3
 8013262:	370c      	adds	r7, #12
 8013264:	46bd      	mov	sp, r7
 8013266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326a:	4770      	bx	lr

0801326c <_ZSt14__relocate_a_1IP18Compare_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 801326c:	b580      	push	{r7, lr}
 801326e:	b086      	sub	sp, #24
 8013270:	af00      	add	r7, sp, #0
 8013272:	60f8      	str	r0, [r7, #12]
 8013274:	60b9      	str	r1, [r7, #8]
 8013276:	607a      	str	r2, [r7, #4]
 8013278:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801327a:	68ba      	ldr	r2, [r7, #8]
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	1ad3      	subs	r3, r2, r3
 8013280:	109b      	asrs	r3, r3, #2
 8013282:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013284:	697b      	ldr	r3, [r7, #20]
 8013286:	2b00      	cmp	r3, #0
 8013288:	dd06      	ble.n	8013298 <_ZSt14__relocate_a_1IP18Compare_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801328a:	697b      	ldr	r3, [r7, #20]
 801328c:	009b      	lsls	r3, r3, #2
 801328e:	461a      	mov	r2, r3
 8013290:	68f9      	ldr	r1, [r7, #12]
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	f004 f8f8 	bl	8017488 <memmove>
      return __result + __count;
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	009b      	lsls	r3, r3, #2
 801329c:	687a      	ldr	r2, [r7, #4]
 801329e:	4413      	add	r3, r2
    }
 80132a0:	4618      	mov	r0, r3
 80132a2:	3718      	adds	r7, #24
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <_ZNSt16allocator_traitsISaIP14And_expressionEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b082      	sub	sp, #8
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	f000 f805 	bl	80132c0 <_ZNK9__gnu_cxx13new_allocatorIP14And_expressionE8max_sizeEv>
 80132b6:	4603      	mov	r3, r0
 80132b8:	4618      	mov	r0, r3
 80132ba:	3708      	adds	r7, #8
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}

080132c0 <_ZNK9__gnu_cxx13new_allocatorIP14And_expressionE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80132c0:	b480      	push	{r7}
 80132c2:	b083      	sub	sp, #12
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80132c8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80132cc:	4618      	mov	r0, r3
 80132ce:	370c      	adds	r7, #12
 80132d0:	46bd      	mov	sp, r7
 80132d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d6:	4770      	bx	lr

080132d8 <_ZSt12__niter_baseIPP14And_expressionET_S3_>:
    __niter_base(_Iterator __it)
 80132d8:	b480      	push	{r7}
 80132da:	b083      	sub	sp, #12
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
    { return __it; }
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	4618      	mov	r0, r3
 80132e4:	370c      	adds	r7, #12
 80132e6:	46bd      	mov	sp, r7
 80132e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ec:	4770      	bx	lr

080132ee <_ZSt14__relocate_a_1IP14And_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80132ee:	b580      	push	{r7, lr}
 80132f0:	b086      	sub	sp, #24
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	60f8      	str	r0, [r7, #12]
 80132f6:	60b9      	str	r1, [r7, #8]
 80132f8:	607a      	str	r2, [r7, #4]
 80132fa:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80132fc:	68ba      	ldr	r2, [r7, #8]
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	1ad3      	subs	r3, r2, r3
 8013302:	109b      	asrs	r3, r3, #2
 8013304:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	2b00      	cmp	r3, #0
 801330a:	dd06      	ble.n	801331a <_ZSt14__relocate_a_1IP14And_expressionS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	009b      	lsls	r3, r3, #2
 8013310:	461a      	mov	r2, r3
 8013312:	68f9      	ldr	r1, [r7, #12]
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f004 f8b7 	bl	8017488 <memmove>
      return __result + __count;
 801331a:	697b      	ldr	r3, [r7, #20]
 801331c:	009b      	lsls	r3, r3, #2
 801331e:	687a      	ldr	r2, [r7, #4]
 8013320:	4413      	add	r3, r2
    }
 8013322:	4618      	mov	r0, r3
 8013324:	3718      	adds	r7, #24
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
	...

0801332c <_Z41__static_initialization_and_destruction_0ii>:
 801332c:	b590      	push	{r4, r7, lr}
 801332e:	b0e7      	sub	sp, #412	; 0x19c
 8013330:	af02      	add	r7, sp, #8
 8013332:	1d3b      	adds	r3, r7, #4
 8013334:	6018      	str	r0, [r3, #0]
 8013336:	463b      	mov	r3, r7
 8013338:	6019      	str	r1, [r3, #0]
 801333a:	1d3b      	adds	r3, r7, #4
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	2b01      	cmp	r3, #1
 8013340:	f040 819d 	bne.w	801367e <_Z41__static_initialization_and_destruction_0ii+0x352>
 8013344:	463b      	mov	r3, r7
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801334c:	4293      	cmp	r3, r2
 801334e:	f040 8196 	bne.w	801367e <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8013352:	f107 0314 	add.w	r3, r7, #20
 8013356:	4618      	mov	r0, r3
 8013358:	2322      	movs	r3, #34	; 0x22
 801335a:	461a      	mov	r2, r3
 801335c:	2100      	movs	r1, #0
 801335e:	f004 f8ad 	bl	80174bc <memset>
 8013362:	f107 0314 	add.w	r3, r7, #20
 8013366:	223a      	movs	r2, #58	; 0x3a
 8013368:	701a      	strb	r2, [r3, #0]
 801336a:	f107 0314 	add.w	r3, r7, #20
 801336e:	2201      	movs	r2, #1
 8013370:	705a      	strb	r2, [r3, #1]
 8013372:	f107 0314 	add.w	r3, r7, #20
 8013376:	220a      	movs	r2, #10
 8013378:	709a      	strb	r2, [r3, #2]
 801337a:	f107 0314 	add.w	r3, r7, #20
 801337e:	220a      	movs	r2, #10
 8013380:	70da      	strb	r2, [r3, #3]
 8013382:	f107 0314 	add.w	r3, r7, #20
 8013386:	222c      	movs	r2, #44	; 0x2c
 8013388:	711a      	strb	r2, [r3, #4]
 801338a:	f107 0314 	add.w	r3, r7, #20
 801338e:	220c      	movs	r2, #12
 8013390:	715a      	strb	r2, [r3, #5]
 8013392:	f107 0314 	add.w	r3, r7, #20
 8013396:	222e      	movs	r2, #46	; 0x2e
 8013398:	719a      	strb	r2, [r3, #6]
 801339a:	f107 0314 	add.w	r3, r7, #20
 801339e:	220b      	movs	r2, #11
 80133a0:	71da      	strb	r2, [r3, #7]
 80133a2:	f107 0314 	add.w	r3, r7, #20
 80133a6:	225b      	movs	r2, #91	; 0x5b
 80133a8:	721a      	strb	r2, [r3, #8]
 80133aa:	f107 0314 	add.w	r3, r7, #20
 80133ae:	220d      	movs	r2, #13
 80133b0:	725a      	strb	r2, [r3, #9]
 80133b2:	f107 0314 	add.w	r3, r7, #20
 80133b6:	225d      	movs	r2, #93	; 0x5d
 80133b8:	729a      	strb	r2, [r3, #10]
 80133ba:	f107 0314 	add.w	r3, r7, #20
 80133be:	220e      	movs	r2, #14
 80133c0:	72da      	strb	r2, [r3, #11]
 80133c2:	f107 0314 	add.w	r3, r7, #20
 80133c6:	227c      	movs	r2, #124	; 0x7c
 80133c8:	731a      	strb	r2, [r3, #12]
 80133ca:	f107 0314 	add.w	r3, r7, #20
 80133ce:	2215      	movs	r2, #21
 80133d0:	735a      	strb	r2, [r3, #13]
 80133d2:	f107 0314 	add.w	r3, r7, #20
 80133d6:	2226      	movs	r2, #38	; 0x26
 80133d8:	739a      	strb	r2, [r3, #14]
 80133da:	f107 0314 	add.w	r3, r7, #20
 80133de:	2216      	movs	r2, #22
 80133e0:	73da      	strb	r2, [r3, #15]
 80133e2:	f107 0314 	add.w	r3, r7, #20
 80133e6:	222b      	movs	r2, #43	; 0x2b
 80133e8:	741a      	strb	r2, [r3, #16]
 80133ea:	f107 0314 	add.w	r3, r7, #20
 80133ee:	221f      	movs	r2, #31
 80133f0:	745a      	strb	r2, [r3, #17]
 80133f2:	f107 0314 	add.w	r3, r7, #20
 80133f6:	222d      	movs	r2, #45	; 0x2d
 80133f8:	749a      	strb	r2, [r3, #18]
 80133fa:	f107 0314 	add.w	r3, r7, #20
 80133fe:	2220      	movs	r2, #32
 8013400:	74da      	strb	r2, [r3, #19]
 8013402:	f107 0314 	add.w	r3, r7, #20
 8013406:	222a      	movs	r2, #42	; 0x2a
 8013408:	751a      	strb	r2, [r3, #20]
 801340a:	f107 0314 	add.w	r3, r7, #20
 801340e:	2221      	movs	r2, #33	; 0x21
 8013410:	755a      	strb	r2, [r3, #21]
 8013412:	f107 0314 	add.w	r3, r7, #20
 8013416:	222f      	movs	r2, #47	; 0x2f
 8013418:	759a      	strb	r2, [r3, #22]
 801341a:	f107 0314 	add.w	r3, r7, #20
 801341e:	2222      	movs	r2, #34	; 0x22
 8013420:	75da      	strb	r2, [r3, #23]
 8013422:	f107 0314 	add.w	r3, r7, #20
 8013426:	225e      	movs	r2, #94	; 0x5e
 8013428:	761a      	strb	r2, [r3, #24]
 801342a:	f107 0314 	add.w	r3, r7, #20
 801342e:	2223      	movs	r2, #35	; 0x23
 8013430:	765a      	strb	r2, [r3, #25]
 8013432:	f107 0314 	add.w	r3, r7, #20
 8013436:	2225      	movs	r2, #37	; 0x25
 8013438:	769a      	strb	r2, [r3, #26]
 801343a:	f107 0314 	add.w	r3, r7, #20
 801343e:	2224      	movs	r2, #36	; 0x24
 8013440:	76da      	strb	r2, [r3, #27]
 8013442:	f107 0314 	add.w	r3, r7, #20
 8013446:	2228      	movs	r2, #40	; 0x28
 8013448:	771a      	strb	r2, [r3, #28]
 801344a:	f107 0314 	add.w	r3, r7, #20
 801344e:	2226      	movs	r2, #38	; 0x26
 8013450:	775a      	strb	r2, [r3, #29]
 8013452:	f107 0314 	add.w	r3, r7, #20
 8013456:	2229      	movs	r2, #41	; 0x29
 8013458:	779a      	strb	r2, [r3, #30]
 801345a:	f107 0314 	add.w	r3, r7, #20
 801345e:	2227      	movs	r2, #39	; 0x27
 8013460:	77da      	strb	r2, [r3, #31]
 8013462:	f107 0314 	add.w	r3, r7, #20
 8013466:	2225      	movs	r2, #37	; 0x25
 8013468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 801346c:	f107 030c 	add.w	r3, r7, #12
 8013470:	f107 0214 	add.w	r2, r7, #20
 8013474:	601a      	str	r2, [r3, #0]
 8013476:	f107 030c 	add.w	r3, r7, #12
 801347a:	2211      	movs	r2, #17
 801347c:	605a      	str	r2, [r3, #4]
 801347e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013482:	4618      	mov	r0, r3
 8013484:	f7ed ff06 	bl	8001294 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8013488:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801348c:	f107 020c 	add.w	r2, r7, #12
 8013490:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013494:	9300      	str	r3, [sp, #0]
 8013496:	460b      	mov	r3, r1
 8013498:	ca06      	ldmia	r2, {r1, r2}
 801349a:	4885      	ldr	r0, [pc, #532]	; (80136b0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 801349c:	f7ed ff12 	bl	80012c4 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80134a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80134a4:	4618      	mov	r0, r3
 80134a6:	f7ed ff01 	bl	80012ac <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 80134aa:	2305      	movs	r3, #5
 80134ac:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 80134b0:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 80134b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134b8:	497e      	ldr	r1, [pc, #504]	; (80136b4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80134ba:	4618      	mov	r0, r3
 80134bc:	f7ed fdee 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 80134c0:	2306      	movs	r3, #6
 80134c2:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 80134c6:	f207 1263 	addw	r2, r7, #355	; 0x163
 80134ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134ce:	331c      	adds	r3, #28
 80134d0:	4979      	ldr	r1, [pc, #484]	; (80136b8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7ed fe0a 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 80134d8:	2307      	movs	r3, #7
 80134da:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 80134de:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80134e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134e6:	3338      	adds	r3, #56	; 0x38
 80134e8:	4974      	ldr	r1, [pc, #464]	; (80136bc <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7ed fdfe 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 80134f0:	2308      	movs	r3, #8
 80134f2:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 80134f6:	f207 1265 	addw	r2, r7, #357	; 0x165
 80134fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134fe:	3354      	adds	r3, #84	; 0x54
 8013500:	496f      	ldr	r1, [pc, #444]	; (80136c0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8013502:	4618      	mov	r0, r3
 8013504:	f7ed fdca 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8013508:	2309      	movs	r3, #9
 801350a:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 801350e:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8013512:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013516:	3370      	adds	r3, #112	; 0x70
 8013518:	496a      	ldr	r1, [pc, #424]	; (80136c4 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 801351a:	4618      	mov	r0, r3
 801351c:	f7ed fe0e 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8013520:	2310      	movs	r3, #16
 8013522:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8013526:	f207 1267 	addw	r2, r7, #359	; 0x167
 801352a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801352e:	338c      	adds	r3, #140	; 0x8c
 8013530:	4965      	ldr	r1, [pc, #404]	; (80136c8 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013532:	4618      	mov	r0, r3
 8013534:	f7ed fe2a 	bl	800118c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8013538:	2311      	movs	r3, #17
 801353a:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 801353e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8013542:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013546:	33a8      	adds	r3, #168	; 0xa8
 8013548:	4960      	ldr	r1, [pc, #384]	; (80136cc <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 801354a:	4618      	mov	r0, r3
 801354c:	f7ed fdf6 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8013550:	2312      	movs	r3, #18
 8013552:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8013556:	f207 1269 	addw	r2, r7, #361	; 0x169
 801355a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801355e:	33c4      	adds	r3, #196	; 0xc4
 8013560:	495b      	ldr	r1, [pc, #364]	; (80136d0 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8013562:	4618      	mov	r0, r3
 8013564:	f7ed fd9a 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8013568:	2313      	movs	r3, #19
 801356a:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 801356e:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8013572:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013576:	33e0      	adds	r3, #224	; 0xe0
 8013578:	4956      	ldr	r1, [pc, #344]	; (80136d4 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 801357a:	4618      	mov	r0, r3
 801357c:	f7ed fdb6 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8013580:	2314      	movs	r3, #20
 8013582:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8013586:	f207 126b 	addw	r2, r7, #363	; 0x16b
 801358a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801358e:	33fc      	adds	r3, #252	; 0xfc
 8013590:	4951      	ldr	r1, [pc, #324]	; (80136d8 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8013592:	4618      	mov	r0, r3
 8013594:	f7ed fe22 	bl	80011dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8013598:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801359c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80135a0:	601a      	str	r2, [r3, #0]
 80135a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80135a6:	220a      	movs	r2, #10
 80135a8:	605a      	str	r2, [r3, #4]
 80135aa:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7ed ff15 	bl	80013de <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 80135b4:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 80135b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80135bc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80135c0:	9300      	str	r3, [sp, #0]
 80135c2:	460b      	mov	r3, r1
 80135c4:	ca06      	ldmia	r2, {r1, r2}
 80135c6:	4845      	ldr	r0, [pc, #276]	; (80136dc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80135c8:	f7ed ff21 	bl	800140e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80135cc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7ed ff10 	bl	80013f6 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 80135d6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80135da:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80135de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80135e2:	429c      	cmp	r4, r3
 80135e4:	d004      	beq.n	80135f0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 80135e6:	3c1c      	subs	r4, #28
 80135e8:	4620      	mov	r0, r4
 80135ea:	f7ed fd4a 	bl	8001082 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 80135ee:	e7f6      	b.n	80135de <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 80135f0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80135f4:	2200      	movs	r2, #0
 80135f6:	601a      	str	r2, [r3, #0]
 80135f8:	605a      	str	r2, [r3, #4]
 80135fa:	609a      	str	r2, [r3, #8]
 80135fc:	233c      	movs	r3, #60	; 0x3c
 80135fe:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8013602:	231b      	movs	r3, #27
 8013604:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8013608:	231c      	movs	r3, #28
 801360a:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 801360e:	233e      	movs	r3, #62	; 0x3e
 8013610:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8013614:	2319      	movs	r3, #25
 8013616:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 801361a:	231a      	movs	r3, #26
 801361c:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8013620:	233d      	movs	r3, #61	; 0x3d
 8013622:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8013626:	2318      	movs	r3, #24
 8013628:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 801362c:	231d      	movs	r3, #29
 801362e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8013632:	2321      	movs	r3, #33	; 0x21
 8013634:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8013638:	2317      	movs	r3, #23
 801363a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 801363e:	231e      	movs	r3, #30
 8013640:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8013644:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013648:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801364c:	2304      	movs	r3, #4
 801364e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8013652:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8013656:	4618      	mov	r0, r3
 8013658:	f7ed ff09 	bl	800146e <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 801365c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8013660:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8013664:	9300      	str	r3, [sp, #0]
 8013666:	4613      	mov	r3, r2
 8013668:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 801366c:	ca06      	ldmia	r2, {r1, r2}
 801366e:	481c      	ldr	r0, [pc, #112]	; (80136e0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013670:	f7ed ff15 	bl	800149e <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8013674:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8013678:	4618      	mov	r0, r3
 801367a:	f7ed ff04 	bl	8001486 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 801367e:	1d3b      	adds	r3, r7, #4
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d10e      	bne.n	80136a4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8013686:	463b      	mov	r3, r7
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801368e:	4293      	cmp	r3, r2
 8013690:	d108      	bne.n	80136a4 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8013692:	4813      	ldr	r0, [pc, #76]	; (80136e0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013694:	f7f0 fc22 	bl	8003edc <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8013698:	4810      	ldr	r0, [pc, #64]	; (80136dc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 801369a:	f7f0 fc2c 	bl	8003ef6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 801369e:	4804      	ldr	r0, [pc, #16]	; (80136b0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80136a0:	f7f0 fc36 	bl	8003f10 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80136a4:	bf00      	nop
 80136a6:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd90      	pop	{r4, r7, pc}
 80136ae:	bf00      	nop
 80136b0:	200003b0 	.word	0x200003b0
 80136b4:	0801a93c 	.word	0x0801a93c
 80136b8:	0801a944 	.word	0x0801a944
 80136bc:	0801a94c 	.word	0x0801a94c
 80136c0:	0801a954 	.word	0x0801a954
 80136c4:	0801a95c 	.word	0x0801a95c
 80136c8:	0801a964 	.word	0x0801a964
 80136cc:	0801a968 	.word	0x0801a968
 80136d0:	0801a970 	.word	0x0801a970
 80136d4:	0801a978 	.word	0x0801a978
 80136d8:	0801a980 	.word	0x0801a980
 80136dc:	200003c8 	.word	0x200003c8
 80136e0:	200003e0 	.word	0x200003e0

080136e4 <_GLOBAL__sub_I__ZN6Parser31parse_variable_or_function_callEP17Primal_expression>:
 80136e4:	b580      	push	{r7, lr}
 80136e6:	af00      	add	r7, sp, #0
 80136e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80136ec:	2001      	movs	r0, #1
 80136ee:	f7ff fe1d 	bl	801332c <_Z41__static_initialization_and_destruction_0ii>
 80136f2:	bd80      	pop	{r7, pc}

080136f4 <_GLOBAL__sub_D__ZN6Parser31parse_variable_or_function_callEP17Primal_expression>:
 80136f4:	b580      	push	{r7, lr}
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80136fc:	2000      	movs	r0, #0
 80136fe:	f7ff fe15 	bl	801332c <_Z41__static_initialization_and_destruction_0ii>
 8013702:	bd80      	pop	{r7, pc}

08013704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013708:	f000 feb3 	bl	8014472 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801370c:	f000 f80a 	bl	8013724 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8013710:	f000 f8e0 	bl	80138d4 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8013714:	f000 f8aa 	bl	801386c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  my_main_run(&huart1);
 8013718:	4801      	ldr	r0, [pc, #4]	; (8013720 <main+0x1c>)
 801371a:	f000 fae5 	bl	8013ce8 <_Z11my_main_runP20__UART_HandleTypeDef>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 801371e:	e7fe      	b.n	801371e <main+0x1a>
 8013720:	20000440 	.word	0x20000440

08013724 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b0b4      	sub	sp, #208	; 0xd0
 8013728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801372a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801372e:	2230      	movs	r2, #48	; 0x30
 8013730:	2100      	movs	r1, #0
 8013732:	4618      	mov	r0, r3
 8013734:	f003 fec2 	bl	80174bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013738:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801373c:	2200      	movs	r2, #0
 801373e:	601a      	str	r2, [r3, #0]
 8013740:	605a      	str	r2, [r3, #4]
 8013742:	609a      	str	r2, [r3, #8]
 8013744:	60da      	str	r2, [r3, #12]
 8013746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013748:	f107 0308 	add.w	r3, r7, #8
 801374c:	2284      	movs	r2, #132	; 0x84
 801374e:	2100      	movs	r1, #0
 8013750:	4618      	mov	r0, r3
 8013752:	f003 feb3 	bl	80174bc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8013756:	4b43      	ldr	r3, [pc, #268]	; (8013864 <_Z18SystemClock_Configv+0x140>)
 8013758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801375a:	4a42      	ldr	r2, [pc, #264]	; (8013864 <_Z18SystemClock_Configv+0x140>)
 801375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013760:	6413      	str	r3, [r2, #64]	; 0x40
 8013762:	4b40      	ldr	r3, [pc, #256]	; (8013864 <_Z18SystemClock_Configv+0x140>)
 8013764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801376a:	607b      	str	r3, [r7, #4]
 801376c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801376e:	4b3e      	ldr	r3, [pc, #248]	; (8013868 <_Z18SystemClock_Configv+0x144>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	4a3d      	ldr	r2, [pc, #244]	; (8013868 <_Z18SystemClock_Configv+0x144>)
 8013774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013778:	6013      	str	r3, [r2, #0]
 801377a:	4b3b      	ldr	r3, [pc, #236]	; (8013868 <_Z18SystemClock_Configv+0x144>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013782:	603b      	str	r3, [r7, #0]
 8013784:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8013786:	2302      	movs	r3, #2
 8013788:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801378c:	2301      	movs	r3, #1
 801378e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8013792:	2310      	movs	r3, #16
 8013794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013798:	2302      	movs	r3, #2
 801379a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 801379e:	2300      	movs	r3, #0
 80137a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80137a4:	2308      	movs	r3, #8
 80137a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80137aa:	23d8      	movs	r3, #216	; 0xd8
 80137ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80137b0:	2302      	movs	r3, #2
 80137b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80137b6:	2302      	movs	r3, #2
 80137b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80137bc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80137c0:	4618      	mov	r0, r3
 80137c2:	f001 fa77 	bl	8014cb4 <HAL_RCC_OscConfig>
 80137c6:	4603      	mov	r3, r0
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	bf14      	ite	ne
 80137cc:	2301      	movne	r3, #1
 80137ce:	2300      	moveq	r3, #0
 80137d0:	b2db      	uxtb	r3, r3
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d001      	beq.n	80137da <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 80137d6:	f000 f895 	bl	8013904 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80137da:	f001 fa1b 	bl	8014c14 <HAL_PWREx_EnableOverDrive>
 80137de:	4603      	mov	r3, r0
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	bf14      	ite	ne
 80137e4:	2301      	movne	r3, #1
 80137e6:	2300      	moveq	r3, #0
 80137e8:	b2db      	uxtb	r3, r3
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d001      	beq.n	80137f2 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 80137ee:	f000 f889 	bl	8013904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80137f2:	230f      	movs	r3, #15
 80137f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80137f8:	2302      	movs	r3, #2
 80137fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80137fe:	2300      	movs	r3, #0
 8013800:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013804:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801380c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8013814:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013818:	2107      	movs	r1, #7
 801381a:	4618      	mov	r0, r3
 801381c:	f001 fcee 	bl	80151fc <HAL_RCC_ClockConfig>
 8013820:	4603      	mov	r3, r0
 8013822:	2b00      	cmp	r3, #0
 8013824:	bf14      	ite	ne
 8013826:	2301      	movne	r3, #1
 8013828:	2300      	moveq	r3, #0
 801382a:	b2db      	uxtb	r3, r3
 801382c:	2b00      	cmp	r3, #0
 801382e:	d001      	beq.n	8013834 <_Z18SystemClock_Configv+0x110>
  {
    Error_Handler();
 8013830:	f000 f868 	bl	8013904 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8013834:	2340      	movs	r3, #64	; 0x40
 8013836:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8013838:	2300      	movs	r3, #0
 801383a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801383c:	f107 0308 	add.w	r3, r7, #8
 8013840:	4618      	mov	r0, r3
 8013842:	f001 feb1 	bl	80155a8 <HAL_RCCEx_PeriphCLKConfig>
 8013846:	4603      	mov	r3, r0
 8013848:	2b00      	cmp	r3, #0
 801384a:	bf14      	ite	ne
 801384c:	2301      	movne	r3, #1
 801384e:	2300      	moveq	r3, #0
 8013850:	b2db      	uxtb	r3, r3
 8013852:	2b00      	cmp	r3, #0
 8013854:	d001      	beq.n	801385a <_Z18SystemClock_Configv+0x136>
  {
    Error_Handler();
 8013856:	f000 f855 	bl	8013904 <Error_Handler>
  }
}
 801385a:	bf00      	nop
 801385c:	37d0      	adds	r7, #208	; 0xd0
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}
 8013862:	bf00      	nop
 8013864:	40023800 	.word	0x40023800
 8013868:	40007000 	.word	0x40007000

0801386c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8013870:	4b16      	ldr	r3, [pc, #88]	; (80138cc <_ZL19MX_USART1_UART_Initv+0x60>)
 8013872:	4a17      	ldr	r2, [pc, #92]	; (80138d0 <_ZL19MX_USART1_UART_Initv+0x64>)
 8013874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8013876:	4b15      	ldr	r3, [pc, #84]	; (80138cc <_ZL19MX_USART1_UART_Initv+0x60>)
 8013878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801387c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801387e:	4b13      	ldr	r3, [pc, #76]	; (80138cc <_ZL19MX_USART1_UART_Initv+0x60>)
 8013880:	2200      	movs	r2, #0
 8013882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8013884:	4b11      	ldr	r3, [pc, #68]	; (80138cc <_ZL19MX_USART1_UART_Initv+0x60>)
 8013886:	2200      	movs	r2, #0
 8013888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801388a:	4b10      	ldr	r3, [pc, #64]	; (80138cc <_ZL19MX_USART1_UART_Initv+0x60>)
 801388c:	2200      	movs	r2, #0
 801388e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8013890:	4b0e      	ldr	r3, [pc, #56]	; (80138cc <_ZL19MX_USART1_UART_Initv+0x60>)
 8013892:	220c      	movs	r2, #12
 8013894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013896:	4b0d      	ldr	r3, [pc, #52]	; (80138cc <_ZL19MX_USART1_UART_Initv+0x60>)
 8013898:	2200      	movs	r2, #0
 801389a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801389c:	4b0b      	ldr	r3, [pc, #44]	; (80138cc <_ZL19MX_USART1_UART_Initv+0x60>)
 801389e:	2200      	movs	r2, #0
 80138a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80138a2:	4b0a      	ldr	r3, [pc, #40]	; (80138cc <_ZL19MX_USART1_UART_Initv+0x60>)
 80138a4:	2200      	movs	r2, #0
 80138a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80138a8:	4b08      	ldr	r3, [pc, #32]	; (80138cc <_ZL19MX_USART1_UART_Initv+0x60>)
 80138aa:	2200      	movs	r2, #0
 80138ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80138ae:	4807      	ldr	r0, [pc, #28]	; (80138cc <_ZL19MX_USART1_UART_Initv+0x60>)
 80138b0:	f002 fa6a 	bl	8015d88 <HAL_UART_Init>
 80138b4:	4603      	mov	r3, r0
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	bf14      	ite	ne
 80138ba:	2301      	movne	r3, #1
 80138bc:	2300      	moveq	r3, #0
 80138be:	b2db      	uxtb	r3, r3
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d001      	beq.n	80138c8 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80138c4:	f000 f81e 	bl	8013904 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80138c8:	bf00      	nop
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	20000440 	.word	0x20000440
 80138d0:	40011000 	.word	0x40011000

080138d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80138d4:	b480      	push	{r7}
 80138d6:	b083      	sub	sp, #12
 80138d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80138da:	4b09      	ldr	r3, [pc, #36]	; (8013900 <_ZL12MX_GPIO_Initv+0x2c>)
 80138dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138de:	4a08      	ldr	r2, [pc, #32]	; (8013900 <_ZL12MX_GPIO_Initv+0x2c>)
 80138e0:	f043 0301 	orr.w	r3, r3, #1
 80138e4:	6313      	str	r3, [r2, #48]	; 0x30
 80138e6:	4b06      	ldr	r3, [pc, #24]	; (8013900 <_ZL12MX_GPIO_Initv+0x2c>)
 80138e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138ea:	f003 0301 	and.w	r3, r3, #1
 80138ee:	607b      	str	r3, [r7, #4]
 80138f0:	687b      	ldr	r3, [r7, #4]

}
 80138f2:	bf00      	nop
 80138f4:	370c      	adds	r7, #12
 80138f6:	46bd      	mov	sp, r7
 80138f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fc:	4770      	bx	lr
 80138fe:	bf00      	nop
 8013900:	40023800 	.word	0x40023800

08013904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013904:	b480      	push	{r7}
 8013906:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8013908:	b672      	cpsid	i
}
 801390a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801390c:	e7fe      	b.n	801390c <Error_Handler+0x8>
	...

08013910 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8013910:	b590      	push	{r4, r7, lr}
 8013912:	b0e7      	sub	sp, #412	; 0x19c
 8013914:	af02      	add	r7, sp, #8
 8013916:	1d3b      	adds	r3, r7, #4
 8013918:	6018      	str	r0, [r3, #0]
 801391a:	463b      	mov	r3, r7
 801391c:	6019      	str	r1, [r3, #0]
 801391e:	1d3b      	adds	r3, r7, #4
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	2b01      	cmp	r3, #1
 8013924:	f040 819d 	bne.w	8013c62 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8013928:	463b      	mov	r3, r7
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013930:	4293      	cmp	r3, r2
 8013932:	f040 8196 	bne.w	8013c62 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8013936:	f107 0314 	add.w	r3, r7, #20
 801393a:	4618      	mov	r0, r3
 801393c:	2322      	movs	r3, #34	; 0x22
 801393e:	461a      	mov	r2, r3
 8013940:	2100      	movs	r1, #0
 8013942:	f003 fdbb 	bl	80174bc <memset>
 8013946:	f107 0314 	add.w	r3, r7, #20
 801394a:	223a      	movs	r2, #58	; 0x3a
 801394c:	701a      	strb	r2, [r3, #0]
 801394e:	f107 0314 	add.w	r3, r7, #20
 8013952:	2201      	movs	r2, #1
 8013954:	705a      	strb	r2, [r3, #1]
 8013956:	f107 0314 	add.w	r3, r7, #20
 801395a:	220a      	movs	r2, #10
 801395c:	709a      	strb	r2, [r3, #2]
 801395e:	f107 0314 	add.w	r3, r7, #20
 8013962:	220a      	movs	r2, #10
 8013964:	70da      	strb	r2, [r3, #3]
 8013966:	f107 0314 	add.w	r3, r7, #20
 801396a:	222c      	movs	r2, #44	; 0x2c
 801396c:	711a      	strb	r2, [r3, #4]
 801396e:	f107 0314 	add.w	r3, r7, #20
 8013972:	220c      	movs	r2, #12
 8013974:	715a      	strb	r2, [r3, #5]
 8013976:	f107 0314 	add.w	r3, r7, #20
 801397a:	222e      	movs	r2, #46	; 0x2e
 801397c:	719a      	strb	r2, [r3, #6]
 801397e:	f107 0314 	add.w	r3, r7, #20
 8013982:	220b      	movs	r2, #11
 8013984:	71da      	strb	r2, [r3, #7]
 8013986:	f107 0314 	add.w	r3, r7, #20
 801398a:	225b      	movs	r2, #91	; 0x5b
 801398c:	721a      	strb	r2, [r3, #8]
 801398e:	f107 0314 	add.w	r3, r7, #20
 8013992:	220d      	movs	r2, #13
 8013994:	725a      	strb	r2, [r3, #9]
 8013996:	f107 0314 	add.w	r3, r7, #20
 801399a:	225d      	movs	r2, #93	; 0x5d
 801399c:	729a      	strb	r2, [r3, #10]
 801399e:	f107 0314 	add.w	r3, r7, #20
 80139a2:	220e      	movs	r2, #14
 80139a4:	72da      	strb	r2, [r3, #11]
 80139a6:	f107 0314 	add.w	r3, r7, #20
 80139aa:	227c      	movs	r2, #124	; 0x7c
 80139ac:	731a      	strb	r2, [r3, #12]
 80139ae:	f107 0314 	add.w	r3, r7, #20
 80139b2:	2215      	movs	r2, #21
 80139b4:	735a      	strb	r2, [r3, #13]
 80139b6:	f107 0314 	add.w	r3, r7, #20
 80139ba:	2226      	movs	r2, #38	; 0x26
 80139bc:	739a      	strb	r2, [r3, #14]
 80139be:	f107 0314 	add.w	r3, r7, #20
 80139c2:	2216      	movs	r2, #22
 80139c4:	73da      	strb	r2, [r3, #15]
 80139c6:	f107 0314 	add.w	r3, r7, #20
 80139ca:	222b      	movs	r2, #43	; 0x2b
 80139cc:	741a      	strb	r2, [r3, #16]
 80139ce:	f107 0314 	add.w	r3, r7, #20
 80139d2:	221f      	movs	r2, #31
 80139d4:	745a      	strb	r2, [r3, #17]
 80139d6:	f107 0314 	add.w	r3, r7, #20
 80139da:	222d      	movs	r2, #45	; 0x2d
 80139dc:	749a      	strb	r2, [r3, #18]
 80139de:	f107 0314 	add.w	r3, r7, #20
 80139e2:	2220      	movs	r2, #32
 80139e4:	74da      	strb	r2, [r3, #19]
 80139e6:	f107 0314 	add.w	r3, r7, #20
 80139ea:	222a      	movs	r2, #42	; 0x2a
 80139ec:	751a      	strb	r2, [r3, #20]
 80139ee:	f107 0314 	add.w	r3, r7, #20
 80139f2:	2221      	movs	r2, #33	; 0x21
 80139f4:	755a      	strb	r2, [r3, #21]
 80139f6:	f107 0314 	add.w	r3, r7, #20
 80139fa:	222f      	movs	r2, #47	; 0x2f
 80139fc:	759a      	strb	r2, [r3, #22]
 80139fe:	f107 0314 	add.w	r3, r7, #20
 8013a02:	2222      	movs	r2, #34	; 0x22
 8013a04:	75da      	strb	r2, [r3, #23]
 8013a06:	f107 0314 	add.w	r3, r7, #20
 8013a0a:	225e      	movs	r2, #94	; 0x5e
 8013a0c:	761a      	strb	r2, [r3, #24]
 8013a0e:	f107 0314 	add.w	r3, r7, #20
 8013a12:	2223      	movs	r2, #35	; 0x23
 8013a14:	765a      	strb	r2, [r3, #25]
 8013a16:	f107 0314 	add.w	r3, r7, #20
 8013a1a:	2225      	movs	r2, #37	; 0x25
 8013a1c:	769a      	strb	r2, [r3, #26]
 8013a1e:	f107 0314 	add.w	r3, r7, #20
 8013a22:	2224      	movs	r2, #36	; 0x24
 8013a24:	76da      	strb	r2, [r3, #27]
 8013a26:	f107 0314 	add.w	r3, r7, #20
 8013a2a:	2228      	movs	r2, #40	; 0x28
 8013a2c:	771a      	strb	r2, [r3, #28]
 8013a2e:	f107 0314 	add.w	r3, r7, #20
 8013a32:	2226      	movs	r2, #38	; 0x26
 8013a34:	775a      	strb	r2, [r3, #29]
 8013a36:	f107 0314 	add.w	r3, r7, #20
 8013a3a:	2229      	movs	r2, #41	; 0x29
 8013a3c:	779a      	strb	r2, [r3, #30]
 8013a3e:	f107 0314 	add.w	r3, r7, #20
 8013a42:	2227      	movs	r2, #39	; 0x27
 8013a44:	77da      	strb	r2, [r3, #31]
 8013a46:	f107 0314 	add.w	r3, r7, #20
 8013a4a:	2225      	movs	r2, #37	; 0x25
 8013a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8013a50:	f107 030c 	add.w	r3, r7, #12
 8013a54:	f107 0214 	add.w	r2, r7, #20
 8013a58:	601a      	str	r2, [r3, #0]
 8013a5a:	f107 030c 	add.w	r3, r7, #12
 8013a5e:	2211      	movs	r2, #17
 8013a60:	605a      	str	r2, [r3, #4]
 8013a62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7ed fc14 	bl	8001294 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8013a6c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8013a70:	f107 020c 	add.w	r2, r7, #12
 8013a74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013a78:	9300      	str	r3, [sp, #0]
 8013a7a:	460b      	mov	r3, r1
 8013a7c:	ca06      	ldmia	r2, {r1, r2}
 8013a7e:	4885      	ldr	r0, [pc, #532]	; (8013c94 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8013a80:	f7ed fc20 	bl	80012c4 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8013a84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f7ed fc0f 	bl	80012ac <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8013a8e:	2305      	movs	r3, #5
 8013a90:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8013a94:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8013a98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a9c:	497e      	ldr	r1, [pc, #504]	; (8013c98 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7ed fafc 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8013aa4:	2306      	movs	r3, #6
 8013aa6:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8013aaa:	f207 1263 	addw	r2, r7, #355	; 0x163
 8013aae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ab2:	331c      	adds	r3, #28
 8013ab4:	4979      	ldr	r1, [pc, #484]	; (8013c9c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7ed fb18 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8013abc:	2307      	movs	r3, #7
 8013abe:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8013ac2:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8013ac6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013aca:	3338      	adds	r3, #56	; 0x38
 8013acc:	4974      	ldr	r1, [pc, #464]	; (8013ca0 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f7ed fb0c 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8013ad4:	2308      	movs	r3, #8
 8013ad6:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8013ada:	f207 1265 	addw	r2, r7, #357	; 0x165
 8013ade:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ae2:	3354      	adds	r3, #84	; 0x54
 8013ae4:	496f      	ldr	r1, [pc, #444]	; (8013ca4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7ed fad8 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8013aec:	2309      	movs	r3, #9
 8013aee:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8013af2:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8013af6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013afa:	3370      	adds	r3, #112	; 0x70
 8013afc:	496a      	ldr	r1, [pc, #424]	; (8013ca8 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7ed fb1c 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8013b04:	2310      	movs	r3, #16
 8013b06:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8013b0a:	f207 1267 	addw	r2, r7, #359	; 0x167
 8013b0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013b12:	338c      	adds	r3, #140	; 0x8c
 8013b14:	4965      	ldr	r1, [pc, #404]	; (8013cac <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7ed fb38 	bl	800118c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8013b1c:	2311      	movs	r3, #17
 8013b1e:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8013b22:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8013b26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013b2a:	33a8      	adds	r3, #168	; 0xa8
 8013b2c:	4960      	ldr	r1, [pc, #384]	; (8013cb0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f7ed fb04 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8013b34:	2312      	movs	r3, #18
 8013b36:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8013b3a:	f207 1269 	addw	r2, r7, #361	; 0x169
 8013b3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013b42:	33c4      	adds	r3, #196	; 0xc4
 8013b44:	495b      	ldr	r1, [pc, #364]	; (8013cb4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7ed faa8 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8013b4c:	2313      	movs	r3, #19
 8013b4e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8013b52:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8013b56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013b5a:	33e0      	adds	r3, #224	; 0xe0
 8013b5c:	4956      	ldr	r1, [pc, #344]	; (8013cb8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f7ed fac4 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8013b64:	2314      	movs	r3, #20
 8013b66:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8013b6a:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8013b6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013b72:	33fc      	adds	r3, #252	; 0xfc
 8013b74:	4951      	ldr	r1, [pc, #324]	; (8013cbc <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8013b76:	4618      	mov	r0, r3
 8013b78:	f7ed fb30 	bl	80011dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8013b7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013b80:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8013b84:	601a      	str	r2, [r3, #0]
 8013b86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013b8a:	220a      	movs	r2, #10
 8013b8c:	605a      	str	r2, [r3, #4]
 8013b8e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7ed fc23 	bl	80013de <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8013b98:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8013b9c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013ba0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013ba4:	9300      	str	r3, [sp, #0]
 8013ba6:	460b      	mov	r3, r1
 8013ba8:	ca06      	ldmia	r2, {r1, r2}
 8013baa:	4845      	ldr	r0, [pc, #276]	; (8013cc0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8013bac:	f7ed fc2f 	bl	800140e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8013bb0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7ed fc1e 	bl	80013f6 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8013bba:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8013bbe:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8013bc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013bc6:	429c      	cmp	r4, r3
 8013bc8:	d004      	beq.n	8013bd4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 8013bca:	3c1c      	subs	r4, #28
 8013bcc:	4620      	mov	r0, r4
 8013bce:	f7ed fa58 	bl	8001082 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8013bd2:	e7f6      	b.n	8013bc2 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8013bd4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013bd8:	2200      	movs	r2, #0
 8013bda:	601a      	str	r2, [r3, #0]
 8013bdc:	605a      	str	r2, [r3, #4]
 8013bde:	609a      	str	r2, [r3, #8]
 8013be0:	233c      	movs	r3, #60	; 0x3c
 8013be2:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8013be6:	231b      	movs	r3, #27
 8013be8:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8013bec:	231c      	movs	r3, #28
 8013bee:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8013bf2:	233e      	movs	r3, #62	; 0x3e
 8013bf4:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8013bf8:	2319      	movs	r3, #25
 8013bfa:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8013bfe:	231a      	movs	r3, #26
 8013c00:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8013c04:	233d      	movs	r3, #61	; 0x3d
 8013c06:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8013c0a:	2318      	movs	r3, #24
 8013c0c:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8013c10:	231d      	movs	r3, #29
 8013c12:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8013c16:	2321      	movs	r3, #33	; 0x21
 8013c18:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8013c1c:	2317      	movs	r3, #23
 8013c1e:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8013c22:	231e      	movs	r3, #30
 8013c24:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8013c28:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013c2c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8013c30:	2304      	movs	r3, #4
 8013c32:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8013c36:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7ed fc17 	bl	800146e <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8013c40:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8013c44:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8013c48:	9300      	str	r3, [sp, #0]
 8013c4a:	4613      	mov	r3, r2
 8013c4c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8013c50:	ca06      	ldmia	r2, {r1, r2}
 8013c52:	481c      	ldr	r0, [pc, #112]	; (8013cc4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013c54:	f7ed fc23 	bl	800149e <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8013c58:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f7ed fc12 	bl	8001486 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 8013c62:	1d3b      	adds	r3, r7, #4
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d10e      	bne.n	8013c88 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8013c6a:	463b      	mov	r3, r7
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c72:	4293      	cmp	r3, r2
 8013c74:	d108      	bne.n	8013c88 <_Z41__static_initialization_and_destruction_0ii+0x378>
 8013c76:	4813      	ldr	r0, [pc, #76]	; (8013cc4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013c78:	f7f0 f930 	bl	8003edc <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 8013c7c:	4810      	ldr	r0, [pc, #64]	; (8013cc0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8013c7e:	f7f0 f93a 	bl	8003ef6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 8013c82:	4804      	ldr	r0, [pc, #16]	; (8013c94 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8013c84:	f7f0 f944 	bl	8003f10 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 8013c88:	bf00      	nop
 8013c8a:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd90      	pop	{r4, r7, pc}
 8013c92:	bf00      	nop
 8013c94:	200003f8 	.word	0x200003f8
 8013c98:	0801a9b0 	.word	0x0801a9b0
 8013c9c:	0801a9b8 	.word	0x0801a9b8
 8013ca0:	0801a9c0 	.word	0x0801a9c0
 8013ca4:	0801a9c8 	.word	0x0801a9c8
 8013ca8:	0801a9d0 	.word	0x0801a9d0
 8013cac:	0801a9d8 	.word	0x0801a9d8
 8013cb0:	0801a9dc 	.word	0x0801a9dc
 8013cb4:	0801a9e4 	.word	0x0801a9e4
 8013cb8:	0801a9ec 	.word	0x0801a9ec
 8013cbc:	0801a9f4 	.word	0x0801a9f4
 8013cc0:	20000410 	.word	0x20000410
 8013cc4:	20000428 	.word	0x20000428

08013cc8 <_GLOBAL__sub_I_huart1>:
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	af00      	add	r7, sp, #0
 8013ccc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013cd0:	2001      	movs	r0, #1
 8013cd2:	f7ff fe1d 	bl	8013910 <_Z41__static_initialization_and_destruction_0ii>
 8013cd6:	bd80      	pop	{r7, pc}

08013cd8 <_GLOBAL__sub_D_huart1>:
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	af00      	add	r7, sp, #0
 8013cdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013ce0:	2000      	movs	r0, #0
 8013ce2:	f7ff fe15 	bl	8013910 <_Z41__static_initialization_and_destruction_0ii>
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <_Z11my_main_runP20__UART_HandleTypeDef>:
#include "my_main.h"

// main function called after setup from CUBEMX
void my_main_run(UART_HandleTypeDef* huart)
{
 8013ce8:	b590      	push	{r4, r7, lr}
 8013cea:	b0a3      	sub	sp, #140	; 0x8c
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
	Source Com(huart);
 8013cf0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013cf4:	6879      	ldr	r1, [r7, #4]
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7fa fc8e 	bl	800e618 <_ZN6SourceC1EP20__UART_HandleTypeDef>
	Transmitter Trans(huart);
 8013cfc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013d00:	6879      	ldr	r1, [r7, #4]
 8013d02:	4618      	mov	r0, r3
 8013d04:	f7fb fd7a 	bl	800f7fc <_ZN11TransmitterC1EP20__UART_HandleTypeDef>
	Lexer Lex(&Com);
 8013d08:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8013d0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013d10:	4611      	mov	r1, r2
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7f2 fdbf 	bl	8006896 <_ZN5LexerC1EP6Source>
	Parser Par(&Lex, &Trans);
 8013d18:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8013d1c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8013d20:	f107 0308 	add.w	r3, r7, #8
 8013d24:	4618      	mov	r0, r3
 8013d26:	f7f5 fd97 	bl	8009858 <_ZN6ParserC1EP5LexerP11Transmitter>

	Program* P = Par.parse_program();
 8013d2a:	f107 0308 	add.w	r3, r7, #8
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7f6 fe36 	bl	800a9a0 <_ZN6Parser13parse_programEv>
 8013d34:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	delete P;
 8013d38:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8013d3c:	2c00      	cmp	r4, #0
 8013d3e:	d006      	beq.n	8013d4e <_Z11my_main_runP20__UART_HandleTypeDef+0x66>
 8013d40:	4620      	mov	r0, r4
 8013d42:	f7f5 fd9f 	bl	8009884 <_ZN7ProgramD1Ev>
 8013d46:	210c      	movs	r1, #12
 8013d48:	4620      	mov	r0, r4
 8013d4a:	f002 ffee 	bl	8016d2a <_ZdlPvj>


	for(;;)
 8013d4e:	e7fe      	b.n	8013d4e <_Z11my_main_runP20__UART_HandleTypeDef+0x66>

08013d50 <_Z41__static_initialization_and_destruction_0ii>:
	{

	}
}
 8013d50:	b590      	push	{r4, r7, lr}
 8013d52:	b0e7      	sub	sp, #412	; 0x19c
 8013d54:	af02      	add	r7, sp, #8
 8013d56:	1d3b      	adds	r3, r7, #4
 8013d58:	6018      	str	r0, [r3, #0]
 8013d5a:	463b      	mov	r3, r7
 8013d5c:	6019      	str	r1, [r3, #0]
 8013d5e:	1d3b      	adds	r3, r7, #4
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	2b01      	cmp	r3, #1
 8013d64:	f040 819d 	bne.w	80140a2 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8013d68:	463b      	mov	r3, r7
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d70:	4293      	cmp	r3, r2
 8013d72:	f040 8196 	bne.w	80140a2 <_Z41__static_initialization_and_destruction_0ii+0x352>
};
 8013d76:	f107 0314 	add.w	r3, r7, #20
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	2322      	movs	r3, #34	; 0x22
 8013d7e:	461a      	mov	r2, r3
 8013d80:	2100      	movs	r1, #0
 8013d82:	f003 fb9b 	bl	80174bc <memset>
 8013d86:	f107 0314 	add.w	r3, r7, #20
 8013d8a:	223a      	movs	r2, #58	; 0x3a
 8013d8c:	701a      	strb	r2, [r3, #0]
 8013d8e:	f107 0314 	add.w	r3, r7, #20
 8013d92:	2201      	movs	r2, #1
 8013d94:	705a      	strb	r2, [r3, #1]
 8013d96:	f107 0314 	add.w	r3, r7, #20
 8013d9a:	220a      	movs	r2, #10
 8013d9c:	709a      	strb	r2, [r3, #2]
 8013d9e:	f107 0314 	add.w	r3, r7, #20
 8013da2:	220a      	movs	r2, #10
 8013da4:	70da      	strb	r2, [r3, #3]
 8013da6:	f107 0314 	add.w	r3, r7, #20
 8013daa:	222c      	movs	r2, #44	; 0x2c
 8013dac:	711a      	strb	r2, [r3, #4]
 8013dae:	f107 0314 	add.w	r3, r7, #20
 8013db2:	220c      	movs	r2, #12
 8013db4:	715a      	strb	r2, [r3, #5]
 8013db6:	f107 0314 	add.w	r3, r7, #20
 8013dba:	222e      	movs	r2, #46	; 0x2e
 8013dbc:	719a      	strb	r2, [r3, #6]
 8013dbe:	f107 0314 	add.w	r3, r7, #20
 8013dc2:	220b      	movs	r2, #11
 8013dc4:	71da      	strb	r2, [r3, #7]
 8013dc6:	f107 0314 	add.w	r3, r7, #20
 8013dca:	225b      	movs	r2, #91	; 0x5b
 8013dcc:	721a      	strb	r2, [r3, #8]
 8013dce:	f107 0314 	add.w	r3, r7, #20
 8013dd2:	220d      	movs	r2, #13
 8013dd4:	725a      	strb	r2, [r3, #9]
 8013dd6:	f107 0314 	add.w	r3, r7, #20
 8013dda:	225d      	movs	r2, #93	; 0x5d
 8013ddc:	729a      	strb	r2, [r3, #10]
 8013dde:	f107 0314 	add.w	r3, r7, #20
 8013de2:	220e      	movs	r2, #14
 8013de4:	72da      	strb	r2, [r3, #11]
 8013de6:	f107 0314 	add.w	r3, r7, #20
 8013dea:	227c      	movs	r2, #124	; 0x7c
 8013dec:	731a      	strb	r2, [r3, #12]
 8013dee:	f107 0314 	add.w	r3, r7, #20
 8013df2:	2215      	movs	r2, #21
 8013df4:	735a      	strb	r2, [r3, #13]
 8013df6:	f107 0314 	add.w	r3, r7, #20
 8013dfa:	2226      	movs	r2, #38	; 0x26
 8013dfc:	739a      	strb	r2, [r3, #14]
 8013dfe:	f107 0314 	add.w	r3, r7, #20
 8013e02:	2216      	movs	r2, #22
 8013e04:	73da      	strb	r2, [r3, #15]
 8013e06:	f107 0314 	add.w	r3, r7, #20
 8013e0a:	222b      	movs	r2, #43	; 0x2b
 8013e0c:	741a      	strb	r2, [r3, #16]
 8013e0e:	f107 0314 	add.w	r3, r7, #20
 8013e12:	221f      	movs	r2, #31
 8013e14:	745a      	strb	r2, [r3, #17]
 8013e16:	f107 0314 	add.w	r3, r7, #20
 8013e1a:	222d      	movs	r2, #45	; 0x2d
 8013e1c:	749a      	strb	r2, [r3, #18]
 8013e1e:	f107 0314 	add.w	r3, r7, #20
 8013e22:	2220      	movs	r2, #32
 8013e24:	74da      	strb	r2, [r3, #19]
 8013e26:	f107 0314 	add.w	r3, r7, #20
 8013e2a:	222a      	movs	r2, #42	; 0x2a
 8013e2c:	751a      	strb	r2, [r3, #20]
 8013e2e:	f107 0314 	add.w	r3, r7, #20
 8013e32:	2221      	movs	r2, #33	; 0x21
 8013e34:	755a      	strb	r2, [r3, #21]
 8013e36:	f107 0314 	add.w	r3, r7, #20
 8013e3a:	222f      	movs	r2, #47	; 0x2f
 8013e3c:	759a      	strb	r2, [r3, #22]
 8013e3e:	f107 0314 	add.w	r3, r7, #20
 8013e42:	2222      	movs	r2, #34	; 0x22
 8013e44:	75da      	strb	r2, [r3, #23]
 8013e46:	f107 0314 	add.w	r3, r7, #20
 8013e4a:	225e      	movs	r2, #94	; 0x5e
 8013e4c:	761a      	strb	r2, [r3, #24]
 8013e4e:	f107 0314 	add.w	r3, r7, #20
 8013e52:	2223      	movs	r2, #35	; 0x23
 8013e54:	765a      	strb	r2, [r3, #25]
 8013e56:	f107 0314 	add.w	r3, r7, #20
 8013e5a:	2225      	movs	r2, #37	; 0x25
 8013e5c:	769a      	strb	r2, [r3, #26]
 8013e5e:	f107 0314 	add.w	r3, r7, #20
 8013e62:	2224      	movs	r2, #36	; 0x24
 8013e64:	76da      	strb	r2, [r3, #27]
 8013e66:	f107 0314 	add.w	r3, r7, #20
 8013e6a:	2228      	movs	r2, #40	; 0x28
 8013e6c:	771a      	strb	r2, [r3, #28]
 8013e6e:	f107 0314 	add.w	r3, r7, #20
 8013e72:	2226      	movs	r2, #38	; 0x26
 8013e74:	775a      	strb	r2, [r3, #29]
 8013e76:	f107 0314 	add.w	r3, r7, #20
 8013e7a:	2229      	movs	r2, #41	; 0x29
 8013e7c:	779a      	strb	r2, [r3, #30]
 8013e7e:	f107 0314 	add.w	r3, r7, #20
 8013e82:	2227      	movs	r2, #39	; 0x27
 8013e84:	77da      	strb	r2, [r3, #31]
 8013e86:	f107 0314 	add.w	r3, r7, #20
 8013e8a:	2225      	movs	r2, #37	; 0x25
 8013e8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8013e90:	f107 030c 	add.w	r3, r7, #12
 8013e94:	f107 0214 	add.w	r2, r7, #20
 8013e98:	601a      	str	r2, [r3, #0]
 8013e9a:	f107 030c 	add.w	r3, r7, #12
 8013e9e:	2211      	movs	r2, #17
 8013ea0:	605a      	str	r2, [r3, #4]
 8013ea2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7ed f9f4 	bl	8001294 <_ZNSaISt4pairIKc10token_typeEEC1Ev>
 8013eac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8013eb0:	f107 020c 	add.w	r2, r7, #12
 8013eb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013eb8:	9300      	str	r3, [sp, #0]
 8013eba:	460b      	mov	r3, r1
 8013ebc:	ca06      	ldmia	r2, {r1, r2}
 8013ebe:	4885      	ldr	r0, [pc, #532]	; (80140d4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8013ec0:	f7ed fa00 	bl	80012c4 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8013ec4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7ed f9ef 	bl	80012ac <_ZNSaISt4pairIKc10token_typeEED1Ev>
	{"true", TOKEN_TRUE},
 8013ece:	2305      	movs	r3, #5
 8013ed0:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
};
 8013ed4:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8013ed8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013edc:	497e      	ldr	r1, [pc, #504]	; (80140d8 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f7ed f8dc 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"false", TOKEN_FALSE},
 8013ee4:	2306      	movs	r3, #6
 8013ee6:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
};
 8013eea:	f207 1263 	addw	r2, r7, #355	; 0x163
 8013eee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ef2:	331c      	adds	r3, #28
 8013ef4:	4979      	ldr	r1, [pc, #484]	; (80140dc <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7ed f8f8 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"setup", TOKEN_SETUP},
 8013efc:	2307      	movs	r3, #7
 8013efe:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
};
 8013f02:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8013f06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f0a:	3338      	adds	r3, #56	; 0x38
 8013f0c:	4974      	ldr	r1, [pc, #464]	; (80140e0 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f7ed f8ec 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"loop", TOKEN_LOOP},
 8013f14:	2308      	movs	r3, #8
 8013f16:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
};
 8013f1a:	f207 1265 	addw	r2, r7, #357	; 0x165
 8013f1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f22:	3354      	adds	r3, #84	; 0x54
 8013f24:	496f      	ldr	r1, [pc, #444]	; (80140e4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8013f26:	4618      	mov	r0, r3
 8013f28:	f7ed f8b8 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"finish", TOKEN_FINISH},
 8013f2c:	2309      	movs	r3, #9
 8013f2e:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
};
 8013f32:	f507 72b3 	add.w	r2, r7, #358	; 0x166
 8013f36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f3a:	3370      	adds	r3, #112	; 0x70
 8013f3c:	496a      	ldr	r1, [pc, #424]	; (80140e8 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7ed f8fc 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"if", TOKEN_IF},
 8013f44:	2310      	movs	r3, #16
 8013f46:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
};
 8013f4a:	f207 1267 	addw	r2, r7, #359	; 0x167
 8013f4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f52:	338c      	adds	r3, #140	; 0x8c
 8013f54:	4965      	ldr	r1, [pc, #404]	; (80140ec <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013f56:	4618      	mov	r0, r3
 8013f58:	f7ed f918 	bl	800118c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA3_KcS7_Lb1EEEOT_OT0_>
	{"elseif", TOKEN_ELSEIF},
 8013f5c:	2311      	movs	r3, #17
 8013f5e:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
};
 8013f62:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8013f66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f6a:	33a8      	adds	r3, #168	; 0xa8
 8013f6c:	4960      	ldr	r1, [pc, #384]	; (80140f0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8013f6e:	4618      	mov	r0, r3
 8013f70:	f7ed f8e4 	bl	800113c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA7_KcS7_Lb1EEEOT_OT0_>
	{"else", TOKEN_ELSE},
 8013f74:	2312      	movs	r3, #18
 8013f76:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
};
 8013f7a:	f207 1269 	addw	r2, r7, #361	; 0x169
 8013f7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f82:	33c4      	adds	r3, #196	; 0xc4
 8013f84:	495b      	ldr	r1, [pc, #364]	; (80140f4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7ed f888 	bl	800109c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA5_KcS7_Lb1EEEOT_OT0_>
	{"while", TOKEN_WHILE},
 8013f8c:	2313      	movs	r3, #19
 8013f8e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
};
 8013f92:	f507 72b5 	add.w	r2, r7, #362	; 0x16a
 8013f96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f9a:	33e0      	adds	r3, #224	; 0xe0
 8013f9c:	4956      	ldr	r1, [pc, #344]	; (80140f8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7ed f8a4 	bl	80010ec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA6_KcS7_Lb1EEEOT_OT0_>
	{"end", TOKEN_END},
 8013fa4:	2314      	movs	r3, #20
 8013fa6:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
};
 8013faa:	f207 126b 	addw	r2, r7, #363	; 0x16b
 8013fae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013fb2:	33fc      	adds	r3, #252	; 0xfc
 8013fb4:	4951      	ldr	r1, [pc, #324]	; (80140fc <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7ed f910 	bl	80011dc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEC1IRA4_KcS7_Lb1EEEOT_OT0_>
 8013fbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013fc0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8013fc4:	601a      	str	r2, [r3, #0]
 8013fc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013fca:	220a      	movs	r2, #10
 8013fcc:	605a      	str	r2, [r3, #4]
 8013fce:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7ed fa03 	bl	80013de <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEEC1Ev>
 8013fd8:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8013fdc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013fe0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013fe4:	9300      	str	r3, [sp, #0]
 8013fe6:	460b      	mov	r3, r1
 8013fe8:	ca06      	ldmia	r2, {r1, r2}
 8013fea:	4845      	ldr	r0, [pc, #276]	; (8014100 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8013fec:	f7ed fa0f 	bl	800140e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8013ff0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f7ed f9fe 	bl	80013f6 <_ZNSaISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeEED1Ev>
 8013ffa:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8013ffe:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8014002:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014006:	429c      	cmp	r4, r3
 8014008:	d004      	beq.n	8014014 <_Z41__static_initialization_and_destruction_0ii+0x2c4>
 801400a:	3c1c      	subs	r4, #28
 801400c:	4620      	mov	r0, r4
 801400e:	f7ed f838 	bl	8001082 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeED1Ev>
 8014012:	e7f6      	b.n	8014002 <_Z41__static_initialization_and_destruction_0ii+0x2b2>
};
 8014014:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8014018:	2200      	movs	r2, #0
 801401a:	601a      	str	r2, [r3, #0]
 801401c:	605a      	str	r2, [r3, #4]
 801401e:	609a      	str	r2, [r3, #8]
 8014020:	233c      	movs	r3, #60	; 0x3c
 8014022:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8014026:	231b      	movs	r3, #27
 8014028:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 801402c:	231c      	movs	r3, #28
 801402e:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8014032:	233e      	movs	r3, #62	; 0x3e
 8014034:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8014038:	2319      	movs	r3, #25
 801403a:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 801403e:	231a      	movs	r3, #26
 8014040:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8014044:	233d      	movs	r3, #61	; 0x3d
 8014046:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 801404a:	2318      	movs	r3, #24
 801404c:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8014050:	231d      	movs	r3, #29
 8014052:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8014056:	2321      	movs	r3, #33	; 0x21
 8014058:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 801405c:	2317      	movs	r3, #23
 801405e:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8014062:	231e      	movs	r3, #30
 8014064:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8014068:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801406c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8014070:	2304      	movs	r3, #4
 8014072:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8014076:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801407a:	4618      	mov	r0, r3
 801407c:	f7ed f9f7 	bl	800146e <_ZNSaISt4pairIKc12double_tokenEEC1Ev>
 8014080:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8014084:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8014088:	9300      	str	r3, [sp, #0]
 801408a:	4613      	mov	r3, r2
 801408c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8014090:	ca06      	ldmia	r2, {r1, r2}
 8014092:	481c      	ldr	r0, [pc, #112]	; (8014104 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8014094:	f7ed fa03 	bl	800149e <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8014098:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801409c:	4618      	mov	r0, r3
 801409e:	f7ed f9f2 	bl	8001486 <_ZNSaISt4pairIKc12double_tokenEED1Ev>
static const std::map<char, double_token> token_double_chars
 80140a2:	1d3b      	adds	r3, r7, #4
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d10e      	bne.n	80140c8 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80140aa:	463b      	mov	r3, r7
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80140b2:	4293      	cmp	r3, r2
 80140b4:	d108      	bne.n	80140c8 <_Z41__static_initialization_and_destruction_0ii+0x378>
 80140b6:	4813      	ldr	r0, [pc, #76]	; (8014104 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80140b8:	f7ef ff10 	bl	8003edc <_ZNSt3mapIc12double_tokenSt4lessIcESaISt4pairIKcS0_EEED1Ev>
static const std::map<std::string, token_type> token_strings
 80140bc:	4810      	ldr	r0, [pc, #64]	; (8014100 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80140be:	f7ef ff1a 	bl	8003ef6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10token_typeSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
static const std::map<char, token_type> token_chars
 80140c2:	4804      	ldr	r0, [pc, #16]	; (80140d4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80140c4:	f7ef ff24 	bl	8003f10 <_ZNSt3mapIc10token_typeSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 80140c8:	bf00      	nop
 80140ca:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd90      	pop	{r4, r7, pc}
 80140d2:	bf00      	nop
 80140d4:	200004c4 	.word	0x200004c4
 80140d8:	0801aa24 	.word	0x0801aa24
 80140dc:	0801aa2c 	.word	0x0801aa2c
 80140e0:	0801aa34 	.word	0x0801aa34
 80140e4:	0801aa3c 	.word	0x0801aa3c
 80140e8:	0801aa44 	.word	0x0801aa44
 80140ec:	0801aa4c 	.word	0x0801aa4c
 80140f0:	0801aa50 	.word	0x0801aa50
 80140f4:	0801aa58 	.word	0x0801aa58
 80140f8:	0801aa60 	.word	0x0801aa60
 80140fc:	0801aa68 	.word	0x0801aa68
 8014100:	200004dc 	.word	0x200004dc
 8014104:	200004f4 	.word	0x200004f4

08014108 <_GLOBAL__sub_I__Z11my_main_runP20__UART_HandleTypeDef>:
 8014108:	b580      	push	{r7, lr}
 801410a:	af00      	add	r7, sp, #0
 801410c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014110:	2001      	movs	r0, #1
 8014112:	f7ff fe1d 	bl	8013d50 <_Z41__static_initialization_and_destruction_0ii>
 8014116:	bd80      	pop	{r7, pc}

08014118 <_GLOBAL__sub_D__Z11my_main_runP20__UART_HandleTypeDef>:
 8014118:	b580      	push	{r7, lr}
 801411a:	af00      	add	r7, sp, #0
 801411c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014120:	2000      	movs	r0, #0
 8014122:	f7ff fe15 	bl	8013d50 <_Z41__static_initialization_and_destruction_0ii>
 8014126:	bd80      	pop	{r7, pc}

08014128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014128:	b480      	push	{r7}
 801412a:	b083      	sub	sp, #12
 801412c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 801412e:	4b0f      	ldr	r3, [pc, #60]	; (801416c <HAL_MspInit+0x44>)
 8014130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014132:	4a0e      	ldr	r2, [pc, #56]	; (801416c <HAL_MspInit+0x44>)
 8014134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014138:	6413      	str	r3, [r2, #64]	; 0x40
 801413a:	4b0c      	ldr	r3, [pc, #48]	; (801416c <HAL_MspInit+0x44>)
 801413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801413e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014142:	607b      	str	r3, [r7, #4]
 8014144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014146:	4b09      	ldr	r3, [pc, #36]	; (801416c <HAL_MspInit+0x44>)
 8014148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801414a:	4a08      	ldr	r2, [pc, #32]	; (801416c <HAL_MspInit+0x44>)
 801414c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014150:	6453      	str	r3, [r2, #68]	; 0x44
 8014152:	4b06      	ldr	r3, [pc, #24]	; (801416c <HAL_MspInit+0x44>)
 8014154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801415a:	603b      	str	r3, [r7, #0]
 801415c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801415e:	bf00      	nop
 8014160:	370c      	adds	r7, #12
 8014162:	46bd      	mov	sp, r7
 8014164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014168:	4770      	bx	lr
 801416a:	bf00      	nop
 801416c:	40023800 	.word	0x40023800

08014170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b08a      	sub	sp, #40	; 0x28
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014178:	f107 0314 	add.w	r3, r7, #20
 801417c:	2200      	movs	r2, #0
 801417e:	601a      	str	r2, [r3, #0]
 8014180:	605a      	str	r2, [r3, #4]
 8014182:	609a      	str	r2, [r3, #8]
 8014184:	60da      	str	r2, [r3, #12]
 8014186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	4a1b      	ldr	r2, [pc, #108]	; (80141fc <HAL_UART_MspInit+0x8c>)
 801418e:	4293      	cmp	r3, r2
 8014190:	d130      	bne.n	80141f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8014192:	4b1b      	ldr	r3, [pc, #108]	; (8014200 <HAL_UART_MspInit+0x90>)
 8014194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014196:	4a1a      	ldr	r2, [pc, #104]	; (8014200 <HAL_UART_MspInit+0x90>)
 8014198:	f043 0310 	orr.w	r3, r3, #16
 801419c:	6453      	str	r3, [r2, #68]	; 0x44
 801419e:	4b18      	ldr	r3, [pc, #96]	; (8014200 <HAL_UART_MspInit+0x90>)
 80141a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141a2:	f003 0310 	and.w	r3, r3, #16
 80141a6:	613b      	str	r3, [r7, #16]
 80141a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80141aa:	4b15      	ldr	r3, [pc, #84]	; (8014200 <HAL_UART_MspInit+0x90>)
 80141ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141ae:	4a14      	ldr	r2, [pc, #80]	; (8014200 <HAL_UART_MspInit+0x90>)
 80141b0:	f043 0301 	orr.w	r3, r3, #1
 80141b4:	6313      	str	r3, [r2, #48]	; 0x30
 80141b6:	4b12      	ldr	r3, [pc, #72]	; (8014200 <HAL_UART_MspInit+0x90>)
 80141b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141ba:	f003 0301 	and.w	r3, r3, #1
 80141be:	60fb      	str	r3, [r7, #12]
 80141c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80141c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80141c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80141c8:	2302      	movs	r3, #2
 80141ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80141cc:	2300      	movs	r3, #0
 80141ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141d0:	2303      	movs	r3, #3
 80141d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80141d4:	2307      	movs	r3, #7
 80141d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80141d8:	f107 0314 	add.w	r3, r7, #20
 80141dc:	4619      	mov	r1, r3
 80141de:	4809      	ldr	r0, [pc, #36]	; (8014204 <HAL_UART_MspInit+0x94>)
 80141e0:	f000 fb6c 	bl	80148bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80141e4:	2200      	movs	r2, #0
 80141e6:	2100      	movs	r1, #0
 80141e8:	2025      	movs	r0, #37	; 0x25
 80141ea:	f000 fa9e 	bl	801472a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80141ee:	2025      	movs	r0, #37	; 0x25
 80141f0:	f000 fab7 	bl	8014762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80141f4:	bf00      	nop
 80141f6:	3728      	adds	r7, #40	; 0x28
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}
 80141fc:	40011000 	.word	0x40011000
 8014200:	40023800 	.word	0x40023800
 8014204:	40020000 	.word	0x40020000

08014208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014208:	b480      	push	{r7}
 801420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801420c:	e7fe      	b.n	801420c <NMI_Handler+0x4>

0801420e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801420e:	b480      	push	{r7}
 8014210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014212:	e7fe      	b.n	8014212 <HardFault_Handler+0x4>

08014214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014214:	b480      	push	{r7}
 8014216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014218:	e7fe      	b.n	8014218 <MemManage_Handler+0x4>

0801421a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801421a:	b480      	push	{r7}
 801421c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801421e:	e7fe      	b.n	801421e <BusFault_Handler+0x4>

08014220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014220:	b480      	push	{r7}
 8014222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014224:	e7fe      	b.n	8014224 <UsageFault_Handler+0x4>

08014226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8014226:	b480      	push	{r7}
 8014228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801422a:	bf00      	nop
 801422c:	46bd      	mov	sp, r7
 801422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014232:	4770      	bx	lr

08014234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014234:	b480      	push	{r7}
 8014236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014238:	bf00      	nop
 801423a:	46bd      	mov	sp, r7
 801423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014240:	4770      	bx	lr

08014242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014242:	b480      	push	{r7}
 8014244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014246:	bf00      	nop
 8014248:	46bd      	mov	sp, r7
 801424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424e:	4770      	bx	lr

08014250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014254:	f000 f94a 	bl	80144ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014258:	bf00      	nop
 801425a:	bd80      	pop	{r7, pc}

0801425c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8014260:	4802      	ldr	r0, [pc, #8]	; (801426c <USART1_IRQHandler+0x10>)
 8014262:	f001 ff43 	bl	80160ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8014266:	bf00      	nop
 8014268:	bd80      	pop	{r7, pc}
 801426a:	bf00      	nop
 801426c:	20000440 	.word	0x20000440

08014270 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8014270:	b480      	push	{r7}
 8014272:	af00      	add	r7, sp, #0
	return 1;
 8014274:	2301      	movs	r3, #1
}
 8014276:	4618      	mov	r0, r3
 8014278:	46bd      	mov	sp, r7
 801427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427e:	4770      	bx	lr

08014280 <_kill>:

int _kill(int pid, int sig)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801428a:	f003 f875 	bl	8017378 <__errno>
 801428e:	4603      	mov	r3, r0
 8014290:	2216      	movs	r2, #22
 8014292:	601a      	str	r2, [r3, #0]
	return -1;
 8014294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014298:	4618      	mov	r0, r3
 801429a:	3708      	adds	r7, #8
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}

080142a0 <_exit>:

void _exit (int status)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b082      	sub	sp, #8
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80142a8:	f04f 31ff 	mov.w	r1, #4294967295
 80142ac:	6878      	ldr	r0, [r7, #4]
 80142ae:	f7ff ffe7 	bl	8014280 <_kill>
	while (1) {}		/* Make sure we hang here */
 80142b2:	e7fe      	b.n	80142b2 <_exit+0x12>

080142b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b086      	sub	sp, #24
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	60f8      	str	r0, [r7, #12]
 80142bc:	60b9      	str	r1, [r7, #8]
 80142be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80142c0:	2300      	movs	r3, #0
 80142c2:	617b      	str	r3, [r7, #20]
 80142c4:	e00a      	b.n	80142dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80142c6:	f3af 8000 	nop.w
 80142ca:	4601      	mov	r1, r0
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	1c5a      	adds	r2, r3, #1
 80142d0:	60ba      	str	r2, [r7, #8]
 80142d2:	b2ca      	uxtb	r2, r1
 80142d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80142d6:	697b      	ldr	r3, [r7, #20]
 80142d8:	3301      	adds	r3, #1
 80142da:	617b      	str	r3, [r7, #20]
 80142dc:	697a      	ldr	r2, [r7, #20]
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	429a      	cmp	r2, r3
 80142e2:	dbf0      	blt.n	80142c6 <_read+0x12>
	}

return len;
 80142e4:	687b      	ldr	r3, [r7, #4]
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	3718      	adds	r7, #24
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}

080142ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80142ee:	b580      	push	{r7, lr}
 80142f0:	b086      	sub	sp, #24
 80142f2:	af00      	add	r7, sp, #0
 80142f4:	60f8      	str	r0, [r7, #12]
 80142f6:	60b9      	str	r1, [r7, #8]
 80142f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80142fa:	2300      	movs	r3, #0
 80142fc:	617b      	str	r3, [r7, #20]
 80142fe:	e009      	b.n	8014314 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	1c5a      	adds	r2, r3, #1
 8014304:	60ba      	str	r2, [r7, #8]
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	4618      	mov	r0, r3
 801430a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	3301      	adds	r3, #1
 8014312:	617b      	str	r3, [r7, #20]
 8014314:	697a      	ldr	r2, [r7, #20]
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	429a      	cmp	r2, r3
 801431a:	dbf1      	blt.n	8014300 <_write+0x12>
	}
	return len;
 801431c:	687b      	ldr	r3, [r7, #4]
}
 801431e:	4618      	mov	r0, r3
 8014320:	3718      	adds	r7, #24
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}

08014326 <_close>:

int _close(int file)
{
 8014326:	b480      	push	{r7}
 8014328:	b083      	sub	sp, #12
 801432a:	af00      	add	r7, sp, #0
 801432c:	6078      	str	r0, [r7, #4]
	return -1;
 801432e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014332:	4618      	mov	r0, r3
 8014334:	370c      	adds	r7, #12
 8014336:	46bd      	mov	sp, r7
 8014338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433c:	4770      	bx	lr

0801433e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801433e:	b480      	push	{r7}
 8014340:	b083      	sub	sp, #12
 8014342:	af00      	add	r7, sp, #0
 8014344:	6078      	str	r0, [r7, #4]
 8014346:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801434e:	605a      	str	r2, [r3, #4]
	return 0;
 8014350:	2300      	movs	r3, #0
}
 8014352:	4618      	mov	r0, r3
 8014354:	370c      	adds	r7, #12
 8014356:	46bd      	mov	sp, r7
 8014358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435c:	4770      	bx	lr

0801435e <_isatty>:

int _isatty(int file)
{
 801435e:	b480      	push	{r7}
 8014360:	b083      	sub	sp, #12
 8014362:	af00      	add	r7, sp, #0
 8014364:	6078      	str	r0, [r7, #4]
	return 1;
 8014366:	2301      	movs	r3, #1
}
 8014368:	4618      	mov	r0, r3
 801436a:	370c      	adds	r7, #12
 801436c:	46bd      	mov	sp, r7
 801436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014372:	4770      	bx	lr

08014374 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8014374:	b480      	push	{r7}
 8014376:	b085      	sub	sp, #20
 8014378:	af00      	add	r7, sp, #0
 801437a:	60f8      	str	r0, [r7, #12]
 801437c:	60b9      	str	r1, [r7, #8]
 801437e:	607a      	str	r2, [r7, #4]
	return 0;
 8014380:	2300      	movs	r3, #0
}
 8014382:	4618      	mov	r0, r3
 8014384:	3714      	adds	r7, #20
 8014386:	46bd      	mov	sp, r7
 8014388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438c:	4770      	bx	lr
	...

08014390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b086      	sub	sp, #24
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8014398:	4a14      	ldr	r2, [pc, #80]	; (80143ec <_sbrk+0x5c>)
 801439a:	4b15      	ldr	r3, [pc, #84]	; (80143f0 <_sbrk+0x60>)
 801439c:	1ad3      	subs	r3, r2, r3
 801439e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80143a0:	697b      	ldr	r3, [r7, #20]
 80143a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80143a4:	4b13      	ldr	r3, [pc, #76]	; (80143f4 <_sbrk+0x64>)
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d102      	bne.n	80143b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80143ac:	4b11      	ldr	r3, [pc, #68]	; (80143f4 <_sbrk+0x64>)
 80143ae:	4a12      	ldr	r2, [pc, #72]	; (80143f8 <_sbrk+0x68>)
 80143b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80143b2:	4b10      	ldr	r3, [pc, #64]	; (80143f4 <_sbrk+0x64>)
 80143b4:	681a      	ldr	r2, [r3, #0]
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	4413      	add	r3, r2
 80143ba:	693a      	ldr	r2, [r7, #16]
 80143bc:	429a      	cmp	r2, r3
 80143be:	d207      	bcs.n	80143d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80143c0:	f002 ffda 	bl	8017378 <__errno>
 80143c4:	4603      	mov	r3, r0
 80143c6:	220c      	movs	r2, #12
 80143c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80143ca:	f04f 33ff 	mov.w	r3, #4294967295
 80143ce:	e009      	b.n	80143e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80143d0:	4b08      	ldr	r3, [pc, #32]	; (80143f4 <_sbrk+0x64>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80143d6:	4b07      	ldr	r3, [pc, #28]	; (80143f4 <_sbrk+0x64>)
 80143d8:	681a      	ldr	r2, [r3, #0]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	4413      	add	r3, r2
 80143de:	4a05      	ldr	r2, [pc, #20]	; (80143f4 <_sbrk+0x64>)
 80143e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80143e2:	68fb      	ldr	r3, [r7, #12]
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3718      	adds	r7, #24
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}
 80143ec:	20050000 	.word	0x20050000
 80143f0:	00000400 	.word	0x00000400
 80143f4:	2000050c 	.word	0x2000050c
 80143f8:	20000530 	.word	0x20000530

080143fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80143fc:	b480      	push	{r7}
 80143fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014400:	4b06      	ldr	r3, [pc, #24]	; (801441c <SystemInit+0x20>)
 8014402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014406:	4a05      	ldr	r2, [pc, #20]	; (801441c <SystemInit+0x20>)
 8014408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801440c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8014410:	bf00      	nop
 8014412:	46bd      	mov	sp, r7
 8014414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014418:	4770      	bx	lr
 801441a:	bf00      	nop
 801441c:	e000ed00 	.word	0xe000ed00

08014420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8014420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014458 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8014424:	480d      	ldr	r0, [pc, #52]	; (801445c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8014426:	490e      	ldr	r1, [pc, #56]	; (8014460 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8014428:	4a0e      	ldr	r2, [pc, #56]	; (8014464 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801442a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801442c:	e002      	b.n	8014434 <LoopCopyDataInit>

0801442e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801442e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8014432:	3304      	adds	r3, #4

08014434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8014434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8014436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014438:	d3f9      	bcc.n	801442e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801443a:	4a0b      	ldr	r2, [pc, #44]	; (8014468 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 801443c:	4c0b      	ldr	r4, [pc, #44]	; (801446c <LoopFillZerobss+0x26>)
  movs r3, #0
 801443e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014440:	e001      	b.n	8014446 <LoopFillZerobss>

08014442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8014442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8014444:	3204      	adds	r2, #4

08014446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8014446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8014448:	d3fb      	bcc.n	8014442 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801444a:	f7ff ffd7 	bl	80143fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801444e:	f002 ff99 	bl	8017384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014452:	f7ff f957 	bl	8013704 <main>
  bx  lr    
 8014456:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8014458:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 801445c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8014460:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8014464:	0801b00c 	.word	0x0801b00c
  ldr r2, =_sbss
 8014468:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 801446c:	20000530 	.word	0x20000530

08014470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014470:	e7fe      	b.n	8014470 <ADC_IRQHandler>

08014472 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8014472:	b580      	push	{r7, lr}
 8014474:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8014476:	2003      	movs	r0, #3
 8014478:	f000 f94c 	bl	8014714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801447c:	200f      	movs	r0, #15
 801447e:	f000 f805 	bl	801448c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8014482:	f7ff fe51 	bl	8014128 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8014486:	2300      	movs	r3, #0
}
 8014488:	4618      	mov	r0, r3
 801448a:	bd80      	pop	{r7, pc}

0801448c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b082      	sub	sp, #8
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8014494:	4b12      	ldr	r3, [pc, #72]	; (80144e0 <HAL_InitTick+0x54>)
 8014496:	681a      	ldr	r2, [r3, #0]
 8014498:	4b12      	ldr	r3, [pc, #72]	; (80144e4 <HAL_InitTick+0x58>)
 801449a:	781b      	ldrb	r3, [r3, #0]
 801449c:	4619      	mov	r1, r3
 801449e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80144a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80144a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80144aa:	4618      	mov	r0, r3
 80144ac:	f000 f967 	bl	801477e <HAL_SYSTICK_Config>
 80144b0:	4603      	mov	r3, r0
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d001      	beq.n	80144ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80144b6:	2301      	movs	r3, #1
 80144b8:	e00e      	b.n	80144d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	2b0f      	cmp	r3, #15
 80144be:	d80a      	bhi.n	80144d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80144c0:	2200      	movs	r2, #0
 80144c2:	6879      	ldr	r1, [r7, #4]
 80144c4:	f04f 30ff 	mov.w	r0, #4294967295
 80144c8:	f000 f92f 	bl	801472a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80144cc:	4a06      	ldr	r2, [pc, #24]	; (80144e8 <HAL_InitTick+0x5c>)
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80144d2:	2300      	movs	r3, #0
 80144d4:	e000      	b.n	80144d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80144d6:	2301      	movs	r3, #1
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3708      	adds	r7, #8
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}
 80144e0:	20000000 	.word	0x20000000
 80144e4:	20000008 	.word	0x20000008
 80144e8:	20000004 	.word	0x20000004

080144ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80144ec:	b480      	push	{r7}
 80144ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80144f0:	4b06      	ldr	r3, [pc, #24]	; (801450c <HAL_IncTick+0x20>)
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	461a      	mov	r2, r3
 80144f6:	4b06      	ldr	r3, [pc, #24]	; (8014510 <HAL_IncTick+0x24>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	4413      	add	r3, r2
 80144fc:	4a04      	ldr	r2, [pc, #16]	; (8014510 <HAL_IncTick+0x24>)
 80144fe:	6013      	str	r3, [r2, #0]
}
 8014500:	bf00      	nop
 8014502:	46bd      	mov	sp, r7
 8014504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014508:	4770      	bx	lr
 801450a:	bf00      	nop
 801450c:	20000008 	.word	0x20000008
 8014510:	2000051c 	.word	0x2000051c

08014514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014514:	b480      	push	{r7}
 8014516:	af00      	add	r7, sp, #0
  return uwTick;
 8014518:	4b03      	ldr	r3, [pc, #12]	; (8014528 <HAL_GetTick+0x14>)
 801451a:	681b      	ldr	r3, [r3, #0]
}
 801451c:	4618      	mov	r0, r3
 801451e:	46bd      	mov	sp, r7
 8014520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014524:	4770      	bx	lr
 8014526:	bf00      	nop
 8014528:	2000051c 	.word	0x2000051c

0801452c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b084      	sub	sp, #16
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014534:	f7ff ffee 	bl	8014514 <HAL_GetTick>
 8014538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014544:	d005      	beq.n	8014552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8014546:	4b0a      	ldr	r3, [pc, #40]	; (8014570 <HAL_Delay+0x44>)
 8014548:	781b      	ldrb	r3, [r3, #0]
 801454a:	461a      	mov	r2, r3
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	4413      	add	r3, r2
 8014550:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8014552:	bf00      	nop
 8014554:	f7ff ffde 	bl	8014514 <HAL_GetTick>
 8014558:	4602      	mov	r2, r0
 801455a:	68bb      	ldr	r3, [r7, #8]
 801455c:	1ad3      	subs	r3, r2, r3
 801455e:	68fa      	ldr	r2, [r7, #12]
 8014560:	429a      	cmp	r2, r3
 8014562:	d8f7      	bhi.n	8014554 <HAL_Delay+0x28>
  {
  }
}
 8014564:	bf00      	nop
 8014566:	bf00      	nop
 8014568:	3710      	adds	r7, #16
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	20000008 	.word	0x20000008

08014574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014574:	b480      	push	{r7}
 8014576:	b085      	sub	sp, #20
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f003 0307 	and.w	r3, r3, #7
 8014582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8014584:	4b0b      	ldr	r3, [pc, #44]	; (80145b4 <__NVIC_SetPriorityGrouping+0x40>)
 8014586:	68db      	ldr	r3, [r3, #12]
 8014588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801458a:	68ba      	ldr	r2, [r7, #8]
 801458c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8014590:	4013      	ands	r3, r2
 8014592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801459c:	4b06      	ldr	r3, [pc, #24]	; (80145b8 <__NVIC_SetPriorityGrouping+0x44>)
 801459e:	4313      	orrs	r3, r2
 80145a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80145a2:	4a04      	ldr	r2, [pc, #16]	; (80145b4 <__NVIC_SetPriorityGrouping+0x40>)
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	60d3      	str	r3, [r2, #12]
}
 80145a8:	bf00      	nop
 80145aa:	3714      	adds	r7, #20
 80145ac:	46bd      	mov	sp, r7
 80145ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b2:	4770      	bx	lr
 80145b4:	e000ed00 	.word	0xe000ed00
 80145b8:	05fa0000 	.word	0x05fa0000

080145bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80145bc:	b480      	push	{r7}
 80145be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80145c0:	4b04      	ldr	r3, [pc, #16]	; (80145d4 <__NVIC_GetPriorityGrouping+0x18>)
 80145c2:	68db      	ldr	r3, [r3, #12]
 80145c4:	0a1b      	lsrs	r3, r3, #8
 80145c6:	f003 0307 	and.w	r3, r3, #7
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr
 80145d4:	e000ed00 	.word	0xe000ed00

080145d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80145d8:	b480      	push	{r7}
 80145da:	b083      	sub	sp, #12
 80145dc:	af00      	add	r7, sp, #0
 80145de:	4603      	mov	r3, r0
 80145e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80145e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	db0b      	blt.n	8014602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80145ea:	79fb      	ldrb	r3, [r7, #7]
 80145ec:	f003 021f 	and.w	r2, r3, #31
 80145f0:	4907      	ldr	r1, [pc, #28]	; (8014610 <__NVIC_EnableIRQ+0x38>)
 80145f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80145f6:	095b      	lsrs	r3, r3, #5
 80145f8:	2001      	movs	r0, #1
 80145fa:	fa00 f202 	lsl.w	r2, r0, r2
 80145fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8014602:	bf00      	nop
 8014604:	370c      	adds	r7, #12
 8014606:	46bd      	mov	sp, r7
 8014608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460c:	4770      	bx	lr
 801460e:	bf00      	nop
 8014610:	e000e100 	.word	0xe000e100

08014614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014614:	b480      	push	{r7}
 8014616:	b083      	sub	sp, #12
 8014618:	af00      	add	r7, sp, #0
 801461a:	4603      	mov	r3, r0
 801461c:	6039      	str	r1, [r7, #0]
 801461e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014624:	2b00      	cmp	r3, #0
 8014626:	db0a      	blt.n	801463e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014628:	683b      	ldr	r3, [r7, #0]
 801462a:	b2da      	uxtb	r2, r3
 801462c:	490c      	ldr	r1, [pc, #48]	; (8014660 <__NVIC_SetPriority+0x4c>)
 801462e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014632:	0112      	lsls	r2, r2, #4
 8014634:	b2d2      	uxtb	r2, r2
 8014636:	440b      	add	r3, r1
 8014638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801463c:	e00a      	b.n	8014654 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	b2da      	uxtb	r2, r3
 8014642:	4908      	ldr	r1, [pc, #32]	; (8014664 <__NVIC_SetPriority+0x50>)
 8014644:	79fb      	ldrb	r3, [r7, #7]
 8014646:	f003 030f 	and.w	r3, r3, #15
 801464a:	3b04      	subs	r3, #4
 801464c:	0112      	lsls	r2, r2, #4
 801464e:	b2d2      	uxtb	r2, r2
 8014650:	440b      	add	r3, r1
 8014652:	761a      	strb	r2, [r3, #24]
}
 8014654:	bf00      	nop
 8014656:	370c      	adds	r7, #12
 8014658:	46bd      	mov	sp, r7
 801465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465e:	4770      	bx	lr
 8014660:	e000e100 	.word	0xe000e100
 8014664:	e000ed00 	.word	0xe000ed00

08014668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014668:	b480      	push	{r7}
 801466a:	b089      	sub	sp, #36	; 0x24
 801466c:	af00      	add	r7, sp, #0
 801466e:	60f8      	str	r0, [r7, #12]
 8014670:	60b9      	str	r1, [r7, #8]
 8014672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	f003 0307 	and.w	r3, r3, #7
 801467a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801467c:	69fb      	ldr	r3, [r7, #28]
 801467e:	f1c3 0307 	rsb	r3, r3, #7
 8014682:	2b04      	cmp	r3, #4
 8014684:	bf28      	it	cs
 8014686:	2304      	movcs	r3, #4
 8014688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801468a:	69fb      	ldr	r3, [r7, #28]
 801468c:	3304      	adds	r3, #4
 801468e:	2b06      	cmp	r3, #6
 8014690:	d902      	bls.n	8014698 <NVIC_EncodePriority+0x30>
 8014692:	69fb      	ldr	r3, [r7, #28]
 8014694:	3b03      	subs	r3, #3
 8014696:	e000      	b.n	801469a <NVIC_EncodePriority+0x32>
 8014698:	2300      	movs	r3, #0
 801469a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801469c:	f04f 32ff 	mov.w	r2, #4294967295
 80146a0:	69bb      	ldr	r3, [r7, #24]
 80146a2:	fa02 f303 	lsl.w	r3, r2, r3
 80146a6:	43da      	mvns	r2, r3
 80146a8:	68bb      	ldr	r3, [r7, #8]
 80146aa:	401a      	ands	r2, r3
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80146b0:	f04f 31ff 	mov.w	r1, #4294967295
 80146b4:	697b      	ldr	r3, [r7, #20]
 80146b6:	fa01 f303 	lsl.w	r3, r1, r3
 80146ba:	43d9      	mvns	r1, r3
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80146c0:	4313      	orrs	r3, r2
         );
}
 80146c2:	4618      	mov	r0, r3
 80146c4:	3724      	adds	r7, #36	; 0x24
 80146c6:	46bd      	mov	sp, r7
 80146c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146cc:	4770      	bx	lr
	...

080146d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b082      	sub	sp, #8
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	3b01      	subs	r3, #1
 80146dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80146e0:	d301      	bcc.n	80146e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80146e2:	2301      	movs	r3, #1
 80146e4:	e00f      	b.n	8014706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80146e6:	4a0a      	ldr	r2, [pc, #40]	; (8014710 <SysTick_Config+0x40>)
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	3b01      	subs	r3, #1
 80146ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80146ee:	210f      	movs	r1, #15
 80146f0:	f04f 30ff 	mov.w	r0, #4294967295
 80146f4:	f7ff ff8e 	bl	8014614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80146f8:	4b05      	ldr	r3, [pc, #20]	; (8014710 <SysTick_Config+0x40>)
 80146fa:	2200      	movs	r2, #0
 80146fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80146fe:	4b04      	ldr	r3, [pc, #16]	; (8014710 <SysTick_Config+0x40>)
 8014700:	2207      	movs	r2, #7
 8014702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8014704:	2300      	movs	r3, #0
}
 8014706:	4618      	mov	r0, r3
 8014708:	3708      	adds	r7, #8
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}
 801470e:	bf00      	nop
 8014710:	e000e010 	.word	0xe000e010

08014714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f7ff ff29 	bl	8014574 <__NVIC_SetPriorityGrouping>
}
 8014722:	bf00      	nop
 8014724:	3708      	adds	r7, #8
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}

0801472a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801472a:	b580      	push	{r7, lr}
 801472c:	b086      	sub	sp, #24
 801472e:	af00      	add	r7, sp, #0
 8014730:	4603      	mov	r3, r0
 8014732:	60b9      	str	r1, [r7, #8]
 8014734:	607a      	str	r2, [r7, #4]
 8014736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8014738:	2300      	movs	r3, #0
 801473a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801473c:	f7ff ff3e 	bl	80145bc <__NVIC_GetPriorityGrouping>
 8014740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	68b9      	ldr	r1, [r7, #8]
 8014746:	6978      	ldr	r0, [r7, #20]
 8014748:	f7ff ff8e 	bl	8014668 <NVIC_EncodePriority>
 801474c:	4602      	mov	r2, r0
 801474e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014752:	4611      	mov	r1, r2
 8014754:	4618      	mov	r0, r3
 8014756:	f7ff ff5d 	bl	8014614 <__NVIC_SetPriority>
}
 801475a:	bf00      	nop
 801475c:	3718      	adds	r7, #24
 801475e:	46bd      	mov	sp, r7
 8014760:	bd80      	pop	{r7, pc}

08014762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014762:	b580      	push	{r7, lr}
 8014764:	b082      	sub	sp, #8
 8014766:	af00      	add	r7, sp, #0
 8014768:	4603      	mov	r3, r0
 801476a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801476c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014770:	4618      	mov	r0, r3
 8014772:	f7ff ff31 	bl	80145d8 <__NVIC_EnableIRQ>
}
 8014776:	bf00      	nop
 8014778:	3708      	adds	r7, #8
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}

0801477e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801477e:	b580      	push	{r7, lr}
 8014780:	b082      	sub	sp, #8
 8014782:	af00      	add	r7, sp, #0
 8014784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8014786:	6878      	ldr	r0, [r7, #4]
 8014788:	f7ff ffa2 	bl	80146d0 <SysTick_Config>
 801478c:	4603      	mov	r3, r0
}
 801478e:	4618      	mov	r0, r3
 8014790:	3708      	adds	r7, #8
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}

08014796 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8014796:	b580      	push	{r7, lr}
 8014798:	b084      	sub	sp, #16
 801479a:	af00      	add	r7, sp, #0
 801479c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80147a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80147a4:	f7ff feb6 	bl	8014514 <HAL_GetTick>
 80147a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80147b0:	b2db      	uxtb	r3, r3
 80147b2:	2b02      	cmp	r3, #2
 80147b4:	d008      	beq.n	80147c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	2280      	movs	r2, #128	; 0x80
 80147ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	2200      	movs	r2, #0
 80147c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80147c4:	2301      	movs	r3, #1
 80147c6:	e052      	b.n	801486e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	681a      	ldr	r2, [r3, #0]
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	f022 0216 	bic.w	r2, r2, #22
 80147d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	695a      	ldr	r2, [r3, #20]
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80147e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d103      	bne.n	80147f8 <HAL_DMA_Abort+0x62>
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d007      	beq.n	8014808 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	681a      	ldr	r2, [r3, #0]
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	f022 0208 	bic.w	r2, r2, #8
 8014806:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	681a      	ldr	r2, [r3, #0]
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	f022 0201 	bic.w	r2, r2, #1
 8014816:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8014818:	e013      	b.n	8014842 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801481a:	f7ff fe7b 	bl	8014514 <HAL_GetTick>
 801481e:	4602      	mov	r2, r0
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	1ad3      	subs	r3, r2, r3
 8014824:	2b05      	cmp	r3, #5
 8014826:	d90c      	bls.n	8014842 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	2220      	movs	r2, #32
 801482c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	2200      	movs	r2, #0
 8014832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2203      	movs	r2, #3
 801483a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 801483e:	2303      	movs	r3, #3
 8014840:	e015      	b.n	801486e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	f003 0301 	and.w	r3, r3, #1
 801484c:	2b00      	cmp	r3, #0
 801484e:	d1e4      	bne.n	801481a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014854:	223f      	movs	r2, #63	; 0x3f
 8014856:	409a      	lsls	r2, r3
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2200      	movs	r2, #0
 8014860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2201      	movs	r2, #1
 8014868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 801486c:	2300      	movs	r3, #0
}
 801486e:	4618      	mov	r0, r3
 8014870:	3710      	adds	r7, #16
 8014872:	46bd      	mov	sp, r7
 8014874:	bd80      	pop	{r7, pc}

08014876 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8014876:	b480      	push	{r7}
 8014878:	b083      	sub	sp, #12
 801487a:	af00      	add	r7, sp, #0
 801487c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014884:	b2db      	uxtb	r3, r3
 8014886:	2b02      	cmp	r3, #2
 8014888:	d004      	beq.n	8014894 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2280      	movs	r2, #128	; 0x80
 801488e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8014890:	2301      	movs	r3, #1
 8014892:	e00c      	b.n	80148ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2205      	movs	r2, #5
 8014898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	681a      	ldr	r2, [r3, #0]
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	f022 0201 	bic.w	r2, r2, #1
 80148aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80148ac:	2300      	movs	r3, #0
}
 80148ae:	4618      	mov	r0, r3
 80148b0:	370c      	adds	r7, #12
 80148b2:	46bd      	mov	sp, r7
 80148b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b8:	4770      	bx	lr
	...

080148bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80148bc:	b480      	push	{r7}
 80148be:	b089      	sub	sp, #36	; 0x24
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
 80148c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80148c6:	2300      	movs	r3, #0
 80148c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80148ca:	2300      	movs	r3, #0
 80148cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80148ce:	2300      	movs	r3, #0
 80148d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80148d2:	2300      	movs	r3, #0
 80148d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80148d6:	2300      	movs	r3, #0
 80148d8:	61fb      	str	r3, [r7, #28]
 80148da:	e175      	b.n	8014bc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80148dc:	2201      	movs	r2, #1
 80148de:	69fb      	ldr	r3, [r7, #28]
 80148e0:	fa02 f303 	lsl.w	r3, r2, r3
 80148e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	697a      	ldr	r2, [r7, #20]
 80148ec:	4013      	ands	r3, r2
 80148ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80148f0:	693a      	ldr	r2, [r7, #16]
 80148f2:	697b      	ldr	r3, [r7, #20]
 80148f4:	429a      	cmp	r2, r3
 80148f6:	f040 8164 	bne.w	8014bc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	685b      	ldr	r3, [r3, #4]
 80148fe:	2b01      	cmp	r3, #1
 8014900:	d00b      	beq.n	801491a <HAL_GPIO_Init+0x5e>
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	685b      	ldr	r3, [r3, #4]
 8014906:	2b02      	cmp	r3, #2
 8014908:	d007      	beq.n	801491a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801490e:	2b11      	cmp	r3, #17
 8014910:	d003      	beq.n	801491a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8014912:	683b      	ldr	r3, [r7, #0]
 8014914:	685b      	ldr	r3, [r3, #4]
 8014916:	2b12      	cmp	r3, #18
 8014918:	d130      	bne.n	801497c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	689b      	ldr	r3, [r3, #8]
 801491e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8014920:	69fb      	ldr	r3, [r7, #28]
 8014922:	005b      	lsls	r3, r3, #1
 8014924:	2203      	movs	r2, #3
 8014926:	fa02 f303 	lsl.w	r3, r2, r3
 801492a:	43db      	mvns	r3, r3
 801492c:	69ba      	ldr	r2, [r7, #24]
 801492e:	4013      	ands	r3, r2
 8014930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	68da      	ldr	r2, [r3, #12]
 8014936:	69fb      	ldr	r3, [r7, #28]
 8014938:	005b      	lsls	r3, r3, #1
 801493a:	fa02 f303 	lsl.w	r3, r2, r3
 801493e:	69ba      	ldr	r2, [r7, #24]
 8014940:	4313      	orrs	r3, r2
 8014942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	69ba      	ldr	r2, [r7, #24]
 8014948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	685b      	ldr	r3, [r3, #4]
 801494e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8014950:	2201      	movs	r2, #1
 8014952:	69fb      	ldr	r3, [r7, #28]
 8014954:	fa02 f303 	lsl.w	r3, r2, r3
 8014958:	43db      	mvns	r3, r3
 801495a:	69ba      	ldr	r2, [r7, #24]
 801495c:	4013      	ands	r3, r2
 801495e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	685b      	ldr	r3, [r3, #4]
 8014964:	091b      	lsrs	r3, r3, #4
 8014966:	f003 0201 	and.w	r2, r3, #1
 801496a:	69fb      	ldr	r3, [r7, #28]
 801496c:	fa02 f303 	lsl.w	r3, r2, r3
 8014970:	69ba      	ldr	r2, [r7, #24]
 8014972:	4313      	orrs	r3, r2
 8014974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	69ba      	ldr	r2, [r7, #24]
 801497a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	68db      	ldr	r3, [r3, #12]
 8014980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8014982:	69fb      	ldr	r3, [r7, #28]
 8014984:	005b      	lsls	r3, r3, #1
 8014986:	2203      	movs	r2, #3
 8014988:	fa02 f303 	lsl.w	r3, r2, r3
 801498c:	43db      	mvns	r3, r3
 801498e:	69ba      	ldr	r2, [r7, #24]
 8014990:	4013      	ands	r3, r2
 8014992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	689a      	ldr	r2, [r3, #8]
 8014998:	69fb      	ldr	r3, [r7, #28]
 801499a:	005b      	lsls	r3, r3, #1
 801499c:	fa02 f303 	lsl.w	r3, r2, r3
 80149a0:	69ba      	ldr	r2, [r7, #24]
 80149a2:	4313      	orrs	r3, r2
 80149a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	69ba      	ldr	r2, [r7, #24]
 80149aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80149ac:	683b      	ldr	r3, [r7, #0]
 80149ae:	685b      	ldr	r3, [r3, #4]
 80149b0:	2b02      	cmp	r3, #2
 80149b2:	d003      	beq.n	80149bc <HAL_GPIO_Init+0x100>
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	685b      	ldr	r3, [r3, #4]
 80149b8:	2b12      	cmp	r3, #18
 80149ba:	d123      	bne.n	8014a04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80149bc:	69fb      	ldr	r3, [r7, #28]
 80149be:	08da      	lsrs	r2, r3, #3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	3208      	adds	r2, #8
 80149c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80149ca:	69fb      	ldr	r3, [r7, #28]
 80149cc:	f003 0307 	and.w	r3, r3, #7
 80149d0:	009b      	lsls	r3, r3, #2
 80149d2:	220f      	movs	r2, #15
 80149d4:	fa02 f303 	lsl.w	r3, r2, r3
 80149d8:	43db      	mvns	r3, r3
 80149da:	69ba      	ldr	r2, [r7, #24]
 80149dc:	4013      	ands	r3, r2
 80149de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	691a      	ldr	r2, [r3, #16]
 80149e4:	69fb      	ldr	r3, [r7, #28]
 80149e6:	f003 0307 	and.w	r3, r3, #7
 80149ea:	009b      	lsls	r3, r3, #2
 80149ec:	fa02 f303 	lsl.w	r3, r2, r3
 80149f0:	69ba      	ldr	r2, [r7, #24]
 80149f2:	4313      	orrs	r3, r2
 80149f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80149f6:	69fb      	ldr	r3, [r7, #28]
 80149f8:	08da      	lsrs	r2, r3, #3
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	3208      	adds	r2, #8
 80149fe:	69b9      	ldr	r1, [r7, #24]
 8014a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8014a0a:	69fb      	ldr	r3, [r7, #28]
 8014a0c:	005b      	lsls	r3, r3, #1
 8014a0e:	2203      	movs	r2, #3
 8014a10:	fa02 f303 	lsl.w	r3, r2, r3
 8014a14:	43db      	mvns	r3, r3
 8014a16:	69ba      	ldr	r2, [r7, #24]
 8014a18:	4013      	ands	r3, r2
 8014a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	685b      	ldr	r3, [r3, #4]
 8014a20:	f003 0203 	and.w	r2, r3, #3
 8014a24:	69fb      	ldr	r3, [r7, #28]
 8014a26:	005b      	lsls	r3, r3, #1
 8014a28:	fa02 f303 	lsl.w	r3, r2, r3
 8014a2c:	69ba      	ldr	r2, [r7, #24]
 8014a2e:	4313      	orrs	r3, r2
 8014a30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	69ba      	ldr	r2, [r7, #24]
 8014a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8014a38:	683b      	ldr	r3, [r7, #0]
 8014a3a:	685b      	ldr	r3, [r3, #4]
 8014a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	f000 80be 	beq.w	8014bc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014a46:	4b66      	ldr	r3, [pc, #408]	; (8014be0 <HAL_GPIO_Init+0x324>)
 8014a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a4a:	4a65      	ldr	r2, [pc, #404]	; (8014be0 <HAL_GPIO_Init+0x324>)
 8014a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014a50:	6453      	str	r3, [r2, #68]	; 0x44
 8014a52:	4b63      	ldr	r3, [pc, #396]	; (8014be0 <HAL_GPIO_Init+0x324>)
 8014a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014a5a:	60fb      	str	r3, [r7, #12]
 8014a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8014a5e:	4a61      	ldr	r2, [pc, #388]	; (8014be4 <HAL_GPIO_Init+0x328>)
 8014a60:	69fb      	ldr	r3, [r7, #28]
 8014a62:	089b      	lsrs	r3, r3, #2
 8014a64:	3302      	adds	r3, #2
 8014a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8014a6c:	69fb      	ldr	r3, [r7, #28]
 8014a6e:	f003 0303 	and.w	r3, r3, #3
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	220f      	movs	r2, #15
 8014a76:	fa02 f303 	lsl.w	r3, r2, r3
 8014a7a:	43db      	mvns	r3, r3
 8014a7c:	69ba      	ldr	r2, [r7, #24]
 8014a7e:	4013      	ands	r3, r2
 8014a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	4a58      	ldr	r2, [pc, #352]	; (8014be8 <HAL_GPIO_Init+0x32c>)
 8014a86:	4293      	cmp	r3, r2
 8014a88:	d037      	beq.n	8014afa <HAL_GPIO_Init+0x23e>
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	4a57      	ldr	r2, [pc, #348]	; (8014bec <HAL_GPIO_Init+0x330>)
 8014a8e:	4293      	cmp	r3, r2
 8014a90:	d031      	beq.n	8014af6 <HAL_GPIO_Init+0x23a>
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	4a56      	ldr	r2, [pc, #344]	; (8014bf0 <HAL_GPIO_Init+0x334>)
 8014a96:	4293      	cmp	r3, r2
 8014a98:	d02b      	beq.n	8014af2 <HAL_GPIO_Init+0x236>
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	4a55      	ldr	r2, [pc, #340]	; (8014bf4 <HAL_GPIO_Init+0x338>)
 8014a9e:	4293      	cmp	r3, r2
 8014aa0:	d025      	beq.n	8014aee <HAL_GPIO_Init+0x232>
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	4a54      	ldr	r2, [pc, #336]	; (8014bf8 <HAL_GPIO_Init+0x33c>)
 8014aa6:	4293      	cmp	r3, r2
 8014aa8:	d01f      	beq.n	8014aea <HAL_GPIO_Init+0x22e>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	4a53      	ldr	r2, [pc, #332]	; (8014bfc <HAL_GPIO_Init+0x340>)
 8014aae:	4293      	cmp	r3, r2
 8014ab0:	d019      	beq.n	8014ae6 <HAL_GPIO_Init+0x22a>
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	4a52      	ldr	r2, [pc, #328]	; (8014c00 <HAL_GPIO_Init+0x344>)
 8014ab6:	4293      	cmp	r3, r2
 8014ab8:	d013      	beq.n	8014ae2 <HAL_GPIO_Init+0x226>
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	4a51      	ldr	r2, [pc, #324]	; (8014c04 <HAL_GPIO_Init+0x348>)
 8014abe:	4293      	cmp	r3, r2
 8014ac0:	d00d      	beq.n	8014ade <HAL_GPIO_Init+0x222>
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	4a50      	ldr	r2, [pc, #320]	; (8014c08 <HAL_GPIO_Init+0x34c>)
 8014ac6:	4293      	cmp	r3, r2
 8014ac8:	d007      	beq.n	8014ada <HAL_GPIO_Init+0x21e>
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	4a4f      	ldr	r2, [pc, #316]	; (8014c0c <HAL_GPIO_Init+0x350>)
 8014ace:	4293      	cmp	r3, r2
 8014ad0:	d101      	bne.n	8014ad6 <HAL_GPIO_Init+0x21a>
 8014ad2:	2309      	movs	r3, #9
 8014ad4:	e012      	b.n	8014afc <HAL_GPIO_Init+0x240>
 8014ad6:	230a      	movs	r3, #10
 8014ad8:	e010      	b.n	8014afc <HAL_GPIO_Init+0x240>
 8014ada:	2308      	movs	r3, #8
 8014adc:	e00e      	b.n	8014afc <HAL_GPIO_Init+0x240>
 8014ade:	2307      	movs	r3, #7
 8014ae0:	e00c      	b.n	8014afc <HAL_GPIO_Init+0x240>
 8014ae2:	2306      	movs	r3, #6
 8014ae4:	e00a      	b.n	8014afc <HAL_GPIO_Init+0x240>
 8014ae6:	2305      	movs	r3, #5
 8014ae8:	e008      	b.n	8014afc <HAL_GPIO_Init+0x240>
 8014aea:	2304      	movs	r3, #4
 8014aec:	e006      	b.n	8014afc <HAL_GPIO_Init+0x240>
 8014aee:	2303      	movs	r3, #3
 8014af0:	e004      	b.n	8014afc <HAL_GPIO_Init+0x240>
 8014af2:	2302      	movs	r3, #2
 8014af4:	e002      	b.n	8014afc <HAL_GPIO_Init+0x240>
 8014af6:	2301      	movs	r3, #1
 8014af8:	e000      	b.n	8014afc <HAL_GPIO_Init+0x240>
 8014afa:	2300      	movs	r3, #0
 8014afc:	69fa      	ldr	r2, [r7, #28]
 8014afe:	f002 0203 	and.w	r2, r2, #3
 8014b02:	0092      	lsls	r2, r2, #2
 8014b04:	4093      	lsls	r3, r2
 8014b06:	69ba      	ldr	r2, [r7, #24]
 8014b08:	4313      	orrs	r3, r2
 8014b0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8014b0c:	4935      	ldr	r1, [pc, #212]	; (8014be4 <HAL_GPIO_Init+0x328>)
 8014b0e:	69fb      	ldr	r3, [r7, #28]
 8014b10:	089b      	lsrs	r3, r3, #2
 8014b12:	3302      	adds	r3, #2
 8014b14:	69ba      	ldr	r2, [r7, #24]
 8014b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8014b1a:	4b3d      	ldr	r3, [pc, #244]	; (8014c10 <HAL_GPIO_Init+0x354>)
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8014b20:	693b      	ldr	r3, [r7, #16]
 8014b22:	43db      	mvns	r3, r3
 8014b24:	69ba      	ldr	r2, [r7, #24]
 8014b26:	4013      	ands	r3, r2
 8014b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	685b      	ldr	r3, [r3, #4]
 8014b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d003      	beq.n	8014b3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8014b36:	69ba      	ldr	r2, [r7, #24]
 8014b38:	693b      	ldr	r3, [r7, #16]
 8014b3a:	4313      	orrs	r3, r2
 8014b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8014b3e:	4a34      	ldr	r2, [pc, #208]	; (8014c10 <HAL_GPIO_Init+0x354>)
 8014b40:	69bb      	ldr	r3, [r7, #24]
 8014b42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8014b44:	4b32      	ldr	r3, [pc, #200]	; (8014c10 <HAL_GPIO_Init+0x354>)
 8014b46:	685b      	ldr	r3, [r3, #4]
 8014b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	43db      	mvns	r3, r3
 8014b4e:	69ba      	ldr	r2, [r7, #24]
 8014b50:	4013      	ands	r3, r2
 8014b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8014b54:	683b      	ldr	r3, [r7, #0]
 8014b56:	685b      	ldr	r3, [r3, #4]
 8014b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d003      	beq.n	8014b68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8014b60:	69ba      	ldr	r2, [r7, #24]
 8014b62:	693b      	ldr	r3, [r7, #16]
 8014b64:	4313      	orrs	r3, r2
 8014b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8014b68:	4a29      	ldr	r2, [pc, #164]	; (8014c10 <HAL_GPIO_Init+0x354>)
 8014b6a:	69bb      	ldr	r3, [r7, #24]
 8014b6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8014b6e:	4b28      	ldr	r3, [pc, #160]	; (8014c10 <HAL_GPIO_Init+0x354>)
 8014b70:	689b      	ldr	r3, [r3, #8]
 8014b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8014b74:	693b      	ldr	r3, [r7, #16]
 8014b76:	43db      	mvns	r3, r3
 8014b78:	69ba      	ldr	r2, [r7, #24]
 8014b7a:	4013      	ands	r3, r2
 8014b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d003      	beq.n	8014b92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8014b8a:	69ba      	ldr	r2, [r7, #24]
 8014b8c:	693b      	ldr	r3, [r7, #16]
 8014b8e:	4313      	orrs	r3, r2
 8014b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8014b92:	4a1f      	ldr	r2, [pc, #124]	; (8014c10 <HAL_GPIO_Init+0x354>)
 8014b94:	69bb      	ldr	r3, [r7, #24]
 8014b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8014b98:	4b1d      	ldr	r3, [pc, #116]	; (8014c10 <HAL_GPIO_Init+0x354>)
 8014b9a:	68db      	ldr	r3, [r3, #12]
 8014b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8014b9e:	693b      	ldr	r3, [r7, #16]
 8014ba0:	43db      	mvns	r3, r3
 8014ba2:	69ba      	ldr	r2, [r7, #24]
 8014ba4:	4013      	ands	r3, r2
 8014ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8014ba8:	683b      	ldr	r3, [r7, #0]
 8014baa:	685b      	ldr	r3, [r3, #4]
 8014bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d003      	beq.n	8014bbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8014bb4:	69ba      	ldr	r2, [r7, #24]
 8014bb6:	693b      	ldr	r3, [r7, #16]
 8014bb8:	4313      	orrs	r3, r2
 8014bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8014bbc:	4a14      	ldr	r2, [pc, #80]	; (8014c10 <HAL_GPIO_Init+0x354>)
 8014bbe:	69bb      	ldr	r3, [r7, #24]
 8014bc0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8014bc2:	69fb      	ldr	r3, [r7, #28]
 8014bc4:	3301      	adds	r3, #1
 8014bc6:	61fb      	str	r3, [r7, #28]
 8014bc8:	69fb      	ldr	r3, [r7, #28]
 8014bca:	2b0f      	cmp	r3, #15
 8014bcc:	f67f ae86 	bls.w	80148dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8014bd0:	bf00      	nop
 8014bd2:	bf00      	nop
 8014bd4:	3724      	adds	r7, #36	; 0x24
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bdc:	4770      	bx	lr
 8014bde:	bf00      	nop
 8014be0:	40023800 	.word	0x40023800
 8014be4:	40013800 	.word	0x40013800
 8014be8:	40020000 	.word	0x40020000
 8014bec:	40020400 	.word	0x40020400
 8014bf0:	40020800 	.word	0x40020800
 8014bf4:	40020c00 	.word	0x40020c00
 8014bf8:	40021000 	.word	0x40021000
 8014bfc:	40021400 	.word	0x40021400
 8014c00:	40021800 	.word	0x40021800
 8014c04:	40021c00 	.word	0x40021c00
 8014c08:	40022000 	.word	0x40022000
 8014c0c:	40022400 	.word	0x40022400
 8014c10:	40013c00 	.word	0x40013c00

08014c14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b082      	sub	sp, #8
 8014c18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8014c1e:	4b23      	ldr	r3, [pc, #140]	; (8014cac <HAL_PWREx_EnableOverDrive+0x98>)
 8014c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c22:	4a22      	ldr	r2, [pc, #136]	; (8014cac <HAL_PWREx_EnableOverDrive+0x98>)
 8014c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014c28:	6413      	str	r3, [r2, #64]	; 0x40
 8014c2a:	4b20      	ldr	r3, [pc, #128]	; (8014cac <HAL_PWREx_EnableOverDrive+0x98>)
 8014c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014c32:	603b      	str	r3, [r7, #0]
 8014c34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8014c36:	4b1e      	ldr	r3, [pc, #120]	; (8014cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	4a1d      	ldr	r2, [pc, #116]	; (8014cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8014c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014c40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014c42:	f7ff fc67 	bl	8014514 <HAL_GetTick>
 8014c46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8014c48:	e009      	b.n	8014c5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8014c4a:	f7ff fc63 	bl	8014514 <HAL_GetTick>
 8014c4e:	4602      	mov	r2, r0
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	1ad3      	subs	r3, r2, r3
 8014c54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014c58:	d901      	bls.n	8014c5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8014c5a:	2303      	movs	r3, #3
 8014c5c:	e022      	b.n	8014ca4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8014c5e:	4b14      	ldr	r3, [pc, #80]	; (8014cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8014c60:	685b      	ldr	r3, [r3, #4]
 8014c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014c6a:	d1ee      	bne.n	8014c4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8014c6c:	4b10      	ldr	r3, [pc, #64]	; (8014cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	4a0f      	ldr	r2, [pc, #60]	; (8014cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8014c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014c76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014c78:	f7ff fc4c 	bl	8014514 <HAL_GetTick>
 8014c7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8014c7e:	e009      	b.n	8014c94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8014c80:	f7ff fc48 	bl	8014514 <HAL_GetTick>
 8014c84:	4602      	mov	r2, r0
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	1ad3      	subs	r3, r2, r3
 8014c8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014c8e:	d901      	bls.n	8014c94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8014c90:	2303      	movs	r3, #3
 8014c92:	e007      	b.n	8014ca4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8014c94:	4b06      	ldr	r3, [pc, #24]	; (8014cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8014c96:	685b      	ldr	r3, [r3, #4]
 8014c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014ca0:	d1ee      	bne.n	8014c80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8014ca2:	2300      	movs	r3, #0
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	3708      	adds	r7, #8
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	40023800 	.word	0x40023800
 8014cb0:	40007000 	.word	0x40007000

08014cb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b086      	sub	sp, #24
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d101      	bne.n	8014cca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8014cc6:	2301      	movs	r3, #1
 8014cc8:	e291      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	f003 0301 	and.w	r3, r3, #1
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	f000 8087 	beq.w	8014de6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014cd8:	4b96      	ldr	r3, [pc, #600]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014cda:	689b      	ldr	r3, [r3, #8]
 8014cdc:	f003 030c 	and.w	r3, r3, #12
 8014ce0:	2b04      	cmp	r3, #4
 8014ce2:	d00c      	beq.n	8014cfe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8014ce4:	4b93      	ldr	r3, [pc, #588]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014ce6:	689b      	ldr	r3, [r3, #8]
 8014ce8:	f003 030c 	and.w	r3, r3, #12
 8014cec:	2b08      	cmp	r3, #8
 8014cee:	d112      	bne.n	8014d16 <HAL_RCC_OscConfig+0x62>
 8014cf0:	4b90      	ldr	r3, [pc, #576]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014cf2:	685b      	ldr	r3, [r3, #4]
 8014cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014cf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014cfc:	d10b      	bne.n	8014d16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014cfe:	4b8d      	ldr	r3, [pc, #564]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d06c      	beq.n	8014de4 <HAL_RCC_OscConfig+0x130>
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	685b      	ldr	r3, [r3, #4]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d168      	bne.n	8014de4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8014d12:	2301      	movs	r3, #1
 8014d14:	e26b      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	685b      	ldr	r3, [r3, #4]
 8014d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d1e:	d106      	bne.n	8014d2e <HAL_RCC_OscConfig+0x7a>
 8014d20:	4b84      	ldr	r3, [pc, #528]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	4a83      	ldr	r2, [pc, #524]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014d2a:	6013      	str	r3, [r2, #0]
 8014d2c:	e02e      	b.n	8014d8c <HAL_RCC_OscConfig+0xd8>
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	685b      	ldr	r3, [r3, #4]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d10c      	bne.n	8014d50 <HAL_RCC_OscConfig+0x9c>
 8014d36:	4b7f      	ldr	r3, [pc, #508]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	4a7e      	ldr	r2, [pc, #504]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014d40:	6013      	str	r3, [r2, #0]
 8014d42:	4b7c      	ldr	r3, [pc, #496]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	4a7b      	ldr	r2, [pc, #492]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014d4c:	6013      	str	r3, [r2, #0]
 8014d4e:	e01d      	b.n	8014d8c <HAL_RCC_OscConfig+0xd8>
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	685b      	ldr	r3, [r3, #4]
 8014d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014d58:	d10c      	bne.n	8014d74 <HAL_RCC_OscConfig+0xc0>
 8014d5a:	4b76      	ldr	r3, [pc, #472]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	4a75      	ldr	r2, [pc, #468]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014d64:	6013      	str	r3, [r2, #0]
 8014d66:	4b73      	ldr	r3, [pc, #460]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	4a72      	ldr	r2, [pc, #456]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014d70:	6013      	str	r3, [r2, #0]
 8014d72:	e00b      	b.n	8014d8c <HAL_RCC_OscConfig+0xd8>
 8014d74:	4b6f      	ldr	r3, [pc, #444]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	4a6e      	ldr	r2, [pc, #440]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014d7e:	6013      	str	r3, [r2, #0]
 8014d80:	4b6c      	ldr	r3, [pc, #432]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	4a6b      	ldr	r2, [pc, #428]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	685b      	ldr	r3, [r3, #4]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d013      	beq.n	8014dbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014d94:	f7ff fbbe 	bl	8014514 <HAL_GetTick>
 8014d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014d9a:	e008      	b.n	8014dae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014d9c:	f7ff fbba 	bl	8014514 <HAL_GetTick>
 8014da0:	4602      	mov	r2, r0
 8014da2:	693b      	ldr	r3, [r7, #16]
 8014da4:	1ad3      	subs	r3, r2, r3
 8014da6:	2b64      	cmp	r3, #100	; 0x64
 8014da8:	d901      	bls.n	8014dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014daa:	2303      	movs	r3, #3
 8014dac:	e21f      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014dae:	4b61      	ldr	r3, [pc, #388]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d0f0      	beq.n	8014d9c <HAL_RCC_OscConfig+0xe8>
 8014dba:	e014      	b.n	8014de6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014dbc:	f7ff fbaa 	bl	8014514 <HAL_GetTick>
 8014dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014dc2:	e008      	b.n	8014dd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014dc4:	f7ff fba6 	bl	8014514 <HAL_GetTick>
 8014dc8:	4602      	mov	r2, r0
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	1ad3      	subs	r3, r2, r3
 8014dce:	2b64      	cmp	r3, #100	; 0x64
 8014dd0:	d901      	bls.n	8014dd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8014dd2:	2303      	movs	r3, #3
 8014dd4:	e20b      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014dd6:	4b57      	ldr	r3, [pc, #348]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d1f0      	bne.n	8014dc4 <HAL_RCC_OscConfig+0x110>
 8014de2:	e000      	b.n	8014de6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	f003 0302 	and.w	r3, r3, #2
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d069      	beq.n	8014ec6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8014df2:	4b50      	ldr	r3, [pc, #320]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014df4:	689b      	ldr	r3, [r3, #8]
 8014df6:	f003 030c 	and.w	r3, r3, #12
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d00b      	beq.n	8014e16 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8014dfe:	4b4d      	ldr	r3, [pc, #308]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014e00:	689b      	ldr	r3, [r3, #8]
 8014e02:	f003 030c 	and.w	r3, r3, #12
 8014e06:	2b08      	cmp	r3, #8
 8014e08:	d11c      	bne.n	8014e44 <HAL_RCC_OscConfig+0x190>
 8014e0a:	4b4a      	ldr	r3, [pc, #296]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d116      	bne.n	8014e44 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014e16:	4b47      	ldr	r3, [pc, #284]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	f003 0302 	and.w	r3, r3, #2
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d005      	beq.n	8014e2e <HAL_RCC_OscConfig+0x17a>
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	68db      	ldr	r3, [r3, #12]
 8014e26:	2b01      	cmp	r3, #1
 8014e28:	d001      	beq.n	8014e2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8014e2a:	2301      	movs	r3, #1
 8014e2c:	e1df      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014e2e:	4b41      	ldr	r3, [pc, #260]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	691b      	ldr	r3, [r3, #16]
 8014e3a:	00db      	lsls	r3, r3, #3
 8014e3c:	493d      	ldr	r1, [pc, #244]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014e3e:	4313      	orrs	r3, r2
 8014e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014e42:	e040      	b.n	8014ec6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	68db      	ldr	r3, [r3, #12]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d023      	beq.n	8014e94 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014e4c:	4b39      	ldr	r3, [pc, #228]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	4a38      	ldr	r2, [pc, #224]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014e52:	f043 0301 	orr.w	r3, r3, #1
 8014e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014e58:	f7ff fb5c 	bl	8014514 <HAL_GetTick>
 8014e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014e5e:	e008      	b.n	8014e72 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014e60:	f7ff fb58 	bl	8014514 <HAL_GetTick>
 8014e64:	4602      	mov	r2, r0
 8014e66:	693b      	ldr	r3, [r7, #16]
 8014e68:	1ad3      	subs	r3, r2, r3
 8014e6a:	2b02      	cmp	r3, #2
 8014e6c:	d901      	bls.n	8014e72 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8014e6e:	2303      	movs	r3, #3
 8014e70:	e1bd      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014e72:	4b30      	ldr	r3, [pc, #192]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	f003 0302 	and.w	r3, r3, #2
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d0f0      	beq.n	8014e60 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014e7e:	4b2d      	ldr	r3, [pc, #180]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	691b      	ldr	r3, [r3, #16]
 8014e8a:	00db      	lsls	r3, r3, #3
 8014e8c:	4929      	ldr	r1, [pc, #164]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014e8e:	4313      	orrs	r3, r2
 8014e90:	600b      	str	r3, [r1, #0]
 8014e92:	e018      	b.n	8014ec6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014e94:	4b27      	ldr	r3, [pc, #156]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	4a26      	ldr	r2, [pc, #152]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014e9a:	f023 0301 	bic.w	r3, r3, #1
 8014e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014ea0:	f7ff fb38 	bl	8014514 <HAL_GetTick>
 8014ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014ea6:	e008      	b.n	8014eba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014ea8:	f7ff fb34 	bl	8014514 <HAL_GetTick>
 8014eac:	4602      	mov	r2, r0
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	1ad3      	subs	r3, r2, r3
 8014eb2:	2b02      	cmp	r3, #2
 8014eb4:	d901      	bls.n	8014eba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8014eb6:	2303      	movs	r3, #3
 8014eb8:	e199      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014eba:	4b1e      	ldr	r3, [pc, #120]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	f003 0302 	and.w	r3, r3, #2
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d1f0      	bne.n	8014ea8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	f003 0308 	and.w	r3, r3, #8
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d038      	beq.n	8014f44 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	695b      	ldr	r3, [r3, #20]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d019      	beq.n	8014f0e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014eda:	4b16      	ldr	r3, [pc, #88]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ede:	4a15      	ldr	r2, [pc, #84]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014ee0:	f043 0301 	orr.w	r3, r3, #1
 8014ee4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014ee6:	f7ff fb15 	bl	8014514 <HAL_GetTick>
 8014eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014eec:	e008      	b.n	8014f00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014eee:	f7ff fb11 	bl	8014514 <HAL_GetTick>
 8014ef2:	4602      	mov	r2, r0
 8014ef4:	693b      	ldr	r3, [r7, #16]
 8014ef6:	1ad3      	subs	r3, r2, r3
 8014ef8:	2b02      	cmp	r3, #2
 8014efa:	d901      	bls.n	8014f00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8014efc:	2303      	movs	r3, #3
 8014efe:	e176      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014f00:	4b0c      	ldr	r3, [pc, #48]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f04:	f003 0302 	and.w	r3, r3, #2
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d0f0      	beq.n	8014eee <HAL_RCC_OscConfig+0x23a>
 8014f0c:	e01a      	b.n	8014f44 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014f0e:	4b09      	ldr	r3, [pc, #36]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f12:	4a08      	ldr	r2, [pc, #32]	; (8014f34 <HAL_RCC_OscConfig+0x280>)
 8014f14:	f023 0301 	bic.w	r3, r3, #1
 8014f18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014f1a:	f7ff fafb 	bl	8014514 <HAL_GetTick>
 8014f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014f20:	e00a      	b.n	8014f38 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014f22:	f7ff faf7 	bl	8014514 <HAL_GetTick>
 8014f26:	4602      	mov	r2, r0
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	1ad3      	subs	r3, r2, r3
 8014f2c:	2b02      	cmp	r3, #2
 8014f2e:	d903      	bls.n	8014f38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8014f30:	2303      	movs	r3, #3
 8014f32:	e15c      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
 8014f34:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014f38:	4b91      	ldr	r3, [pc, #580]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8014f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f3c:	f003 0302 	and.w	r3, r3, #2
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d1ee      	bne.n	8014f22 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	f003 0304 	and.w	r3, r3, #4
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	f000 80a4 	beq.w	801509a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014f52:	4b8b      	ldr	r3, [pc, #556]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8014f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d10d      	bne.n	8014f7a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8014f5e:	4b88      	ldr	r3, [pc, #544]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8014f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f62:	4a87      	ldr	r2, [pc, #540]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8014f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014f68:	6413      	str	r3, [r2, #64]	; 0x40
 8014f6a:	4b85      	ldr	r3, [pc, #532]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8014f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014f72:	60bb      	str	r3, [r7, #8]
 8014f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8014f76:	2301      	movs	r3, #1
 8014f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014f7a:	4b82      	ldr	r3, [pc, #520]	; (8015184 <HAL_RCC_OscConfig+0x4d0>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d118      	bne.n	8014fb8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8014f86:	4b7f      	ldr	r3, [pc, #508]	; (8015184 <HAL_RCC_OscConfig+0x4d0>)
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	4a7e      	ldr	r2, [pc, #504]	; (8015184 <HAL_RCC_OscConfig+0x4d0>)
 8014f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014f92:	f7ff fabf 	bl	8014514 <HAL_GetTick>
 8014f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014f98:	e008      	b.n	8014fac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014f9a:	f7ff fabb 	bl	8014514 <HAL_GetTick>
 8014f9e:	4602      	mov	r2, r0
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	1ad3      	subs	r3, r2, r3
 8014fa4:	2b64      	cmp	r3, #100	; 0x64
 8014fa6:	d901      	bls.n	8014fac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8014fa8:	2303      	movs	r3, #3
 8014faa:	e120      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014fac:	4b75      	ldr	r3, [pc, #468]	; (8015184 <HAL_RCC_OscConfig+0x4d0>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d0f0      	beq.n	8014f9a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	689b      	ldr	r3, [r3, #8]
 8014fbc:	2b01      	cmp	r3, #1
 8014fbe:	d106      	bne.n	8014fce <HAL_RCC_OscConfig+0x31a>
 8014fc0:	4b6f      	ldr	r3, [pc, #444]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8014fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fc4:	4a6e      	ldr	r2, [pc, #440]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8014fc6:	f043 0301 	orr.w	r3, r3, #1
 8014fca:	6713      	str	r3, [r2, #112]	; 0x70
 8014fcc:	e02d      	b.n	801502a <HAL_RCC_OscConfig+0x376>
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	689b      	ldr	r3, [r3, #8]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d10c      	bne.n	8014ff0 <HAL_RCC_OscConfig+0x33c>
 8014fd6:	4b6a      	ldr	r3, [pc, #424]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8014fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fda:	4a69      	ldr	r2, [pc, #420]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8014fdc:	f023 0301 	bic.w	r3, r3, #1
 8014fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8014fe2:	4b67      	ldr	r3, [pc, #412]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8014fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fe6:	4a66      	ldr	r2, [pc, #408]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8014fe8:	f023 0304 	bic.w	r3, r3, #4
 8014fec:	6713      	str	r3, [r2, #112]	; 0x70
 8014fee:	e01c      	b.n	801502a <HAL_RCC_OscConfig+0x376>
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	689b      	ldr	r3, [r3, #8]
 8014ff4:	2b05      	cmp	r3, #5
 8014ff6:	d10c      	bne.n	8015012 <HAL_RCC_OscConfig+0x35e>
 8014ff8:	4b61      	ldr	r3, [pc, #388]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8014ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ffc:	4a60      	ldr	r2, [pc, #384]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8014ffe:	f043 0304 	orr.w	r3, r3, #4
 8015002:	6713      	str	r3, [r2, #112]	; 0x70
 8015004:	4b5e      	ldr	r3, [pc, #376]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8015006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015008:	4a5d      	ldr	r2, [pc, #372]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 801500a:	f043 0301 	orr.w	r3, r3, #1
 801500e:	6713      	str	r3, [r2, #112]	; 0x70
 8015010:	e00b      	b.n	801502a <HAL_RCC_OscConfig+0x376>
 8015012:	4b5b      	ldr	r3, [pc, #364]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8015014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015016:	4a5a      	ldr	r2, [pc, #360]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8015018:	f023 0301 	bic.w	r3, r3, #1
 801501c:	6713      	str	r3, [r2, #112]	; 0x70
 801501e:	4b58      	ldr	r3, [pc, #352]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8015020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015022:	4a57      	ldr	r2, [pc, #348]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8015024:	f023 0304 	bic.w	r3, r3, #4
 8015028:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	689b      	ldr	r3, [r3, #8]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d015      	beq.n	801505e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015032:	f7ff fa6f 	bl	8014514 <HAL_GetTick>
 8015036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015038:	e00a      	b.n	8015050 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801503a:	f7ff fa6b 	bl	8014514 <HAL_GetTick>
 801503e:	4602      	mov	r2, r0
 8015040:	693b      	ldr	r3, [r7, #16]
 8015042:	1ad3      	subs	r3, r2, r3
 8015044:	f241 3288 	movw	r2, #5000	; 0x1388
 8015048:	4293      	cmp	r3, r2
 801504a:	d901      	bls.n	8015050 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 801504c:	2303      	movs	r3, #3
 801504e:	e0ce      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015050:	4b4b      	ldr	r3, [pc, #300]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8015052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015054:	f003 0302 	and.w	r3, r3, #2
 8015058:	2b00      	cmp	r3, #0
 801505a:	d0ee      	beq.n	801503a <HAL_RCC_OscConfig+0x386>
 801505c:	e014      	b.n	8015088 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801505e:	f7ff fa59 	bl	8014514 <HAL_GetTick>
 8015062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8015064:	e00a      	b.n	801507c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015066:	f7ff fa55 	bl	8014514 <HAL_GetTick>
 801506a:	4602      	mov	r2, r0
 801506c:	693b      	ldr	r3, [r7, #16]
 801506e:	1ad3      	subs	r3, r2, r3
 8015070:	f241 3288 	movw	r2, #5000	; 0x1388
 8015074:	4293      	cmp	r3, r2
 8015076:	d901      	bls.n	801507c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8015078:	2303      	movs	r3, #3
 801507a:	e0b8      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801507c:	4b40      	ldr	r3, [pc, #256]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 801507e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015080:	f003 0302 	and.w	r3, r3, #2
 8015084:	2b00      	cmp	r3, #0
 8015086:	d1ee      	bne.n	8015066 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8015088:	7dfb      	ldrb	r3, [r7, #23]
 801508a:	2b01      	cmp	r3, #1
 801508c:	d105      	bne.n	801509a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801508e:	4b3c      	ldr	r3, [pc, #240]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8015090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015092:	4a3b      	ldr	r2, [pc, #236]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8015094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015098:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	699b      	ldr	r3, [r3, #24]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	f000 80a4 	beq.w	80151ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80150a4:	4b36      	ldr	r3, [pc, #216]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 80150a6:	689b      	ldr	r3, [r3, #8]
 80150a8:	f003 030c 	and.w	r3, r3, #12
 80150ac:	2b08      	cmp	r3, #8
 80150ae:	d06b      	beq.n	8015188 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	699b      	ldr	r3, [r3, #24]
 80150b4:	2b02      	cmp	r3, #2
 80150b6:	d149      	bne.n	801514c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80150b8:	4b31      	ldr	r3, [pc, #196]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	4a30      	ldr	r2, [pc, #192]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 80150be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80150c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80150c4:	f7ff fa26 	bl	8014514 <HAL_GetTick>
 80150c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80150ca:	e008      	b.n	80150de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80150cc:	f7ff fa22 	bl	8014514 <HAL_GetTick>
 80150d0:	4602      	mov	r2, r0
 80150d2:	693b      	ldr	r3, [r7, #16]
 80150d4:	1ad3      	subs	r3, r2, r3
 80150d6:	2b02      	cmp	r3, #2
 80150d8:	d901      	bls.n	80150de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80150da:	2303      	movs	r3, #3
 80150dc:	e087      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80150de:	4b28      	ldr	r3, [pc, #160]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d1f0      	bne.n	80150cc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	69da      	ldr	r2, [r3, #28]
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	6a1b      	ldr	r3, [r3, #32]
 80150f2:	431a      	orrs	r2, r3
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150f8:	019b      	lsls	r3, r3, #6
 80150fa:	431a      	orrs	r2, r3
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015100:	085b      	lsrs	r3, r3, #1
 8015102:	3b01      	subs	r3, #1
 8015104:	041b      	lsls	r3, r3, #16
 8015106:	431a      	orrs	r2, r3
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801510c:	061b      	lsls	r3, r3, #24
 801510e:	4313      	orrs	r3, r2
 8015110:	4a1b      	ldr	r2, [pc, #108]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8015112:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015116:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015118:	4b19      	ldr	r3, [pc, #100]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	4a18      	ldr	r2, [pc, #96]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 801511e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015124:	f7ff f9f6 	bl	8014514 <HAL_GetTick>
 8015128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801512a:	e008      	b.n	801513e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801512c:	f7ff f9f2 	bl	8014514 <HAL_GetTick>
 8015130:	4602      	mov	r2, r0
 8015132:	693b      	ldr	r3, [r7, #16]
 8015134:	1ad3      	subs	r3, r2, r3
 8015136:	2b02      	cmp	r3, #2
 8015138:	d901      	bls.n	801513e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 801513a:	2303      	movs	r3, #3
 801513c:	e057      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801513e:	4b10      	ldr	r3, [pc, #64]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015146:	2b00      	cmp	r3, #0
 8015148:	d0f0      	beq.n	801512c <HAL_RCC_OscConfig+0x478>
 801514a:	e04f      	b.n	80151ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801514c:	4b0c      	ldr	r3, [pc, #48]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	4a0b      	ldr	r2, [pc, #44]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8015152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8015156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015158:	f7ff f9dc 	bl	8014514 <HAL_GetTick>
 801515c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801515e:	e008      	b.n	8015172 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015160:	f7ff f9d8 	bl	8014514 <HAL_GetTick>
 8015164:	4602      	mov	r2, r0
 8015166:	693b      	ldr	r3, [r7, #16]
 8015168:	1ad3      	subs	r3, r2, r3
 801516a:	2b02      	cmp	r3, #2
 801516c:	d901      	bls.n	8015172 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 801516e:	2303      	movs	r3, #3
 8015170:	e03d      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015172:	4b03      	ldr	r3, [pc, #12]	; (8015180 <HAL_RCC_OscConfig+0x4cc>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801517a:	2b00      	cmp	r3, #0
 801517c:	d1f0      	bne.n	8015160 <HAL_RCC_OscConfig+0x4ac>
 801517e:	e035      	b.n	80151ec <HAL_RCC_OscConfig+0x538>
 8015180:	40023800 	.word	0x40023800
 8015184:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8015188:	4b1b      	ldr	r3, [pc, #108]	; (80151f8 <HAL_RCC_OscConfig+0x544>)
 801518a:	685b      	ldr	r3, [r3, #4]
 801518c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	699b      	ldr	r3, [r3, #24]
 8015192:	2b01      	cmp	r3, #1
 8015194:	d028      	beq.n	80151e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80151a0:	429a      	cmp	r2, r3
 80151a2:	d121      	bne.n	80151e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80151ae:	429a      	cmp	r2, r3
 80151b0:	d11a      	bne.n	80151e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80151b2:	68fa      	ldr	r2, [r7, #12]
 80151b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80151b8:	4013      	ands	r3, r2
 80151ba:	687a      	ldr	r2, [r7, #4]
 80151bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80151be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80151c0:	4293      	cmp	r3, r2
 80151c2:	d111      	bne.n	80151e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151ce:	085b      	lsrs	r3, r3, #1
 80151d0:	3b01      	subs	r3, #1
 80151d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80151d4:	429a      	cmp	r2, r3
 80151d6:	d107      	bne.n	80151e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d001      	beq.n	80151ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80151e8:	2301      	movs	r3, #1
 80151ea:	e000      	b.n	80151ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80151ec:	2300      	movs	r3, #0
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	3718      	adds	r7, #24
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bd80      	pop	{r7, pc}
 80151f6:	bf00      	nop
 80151f8:	40023800 	.word	0x40023800

080151fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b084      	sub	sp, #16
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
 8015204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8015206:	2300      	movs	r3, #0
 8015208:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d101      	bne.n	8015214 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8015210:	2301      	movs	r3, #1
 8015212:	e0d0      	b.n	80153b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8015214:	4b6a      	ldr	r3, [pc, #424]	; (80153c0 <HAL_RCC_ClockConfig+0x1c4>)
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	f003 030f 	and.w	r3, r3, #15
 801521c:	683a      	ldr	r2, [r7, #0]
 801521e:	429a      	cmp	r2, r3
 8015220:	d910      	bls.n	8015244 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015222:	4b67      	ldr	r3, [pc, #412]	; (80153c0 <HAL_RCC_ClockConfig+0x1c4>)
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	f023 020f 	bic.w	r2, r3, #15
 801522a:	4965      	ldr	r1, [pc, #404]	; (80153c0 <HAL_RCC_ClockConfig+0x1c4>)
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	4313      	orrs	r3, r2
 8015230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015232:	4b63      	ldr	r3, [pc, #396]	; (80153c0 <HAL_RCC_ClockConfig+0x1c4>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	f003 030f 	and.w	r3, r3, #15
 801523a:	683a      	ldr	r2, [r7, #0]
 801523c:	429a      	cmp	r2, r3
 801523e:	d001      	beq.n	8015244 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8015240:	2301      	movs	r3, #1
 8015242:	e0b8      	b.n	80153b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	f003 0302 	and.w	r3, r3, #2
 801524c:	2b00      	cmp	r3, #0
 801524e:	d020      	beq.n	8015292 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	f003 0304 	and.w	r3, r3, #4
 8015258:	2b00      	cmp	r3, #0
 801525a:	d005      	beq.n	8015268 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801525c:	4b59      	ldr	r3, [pc, #356]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 801525e:	689b      	ldr	r3, [r3, #8]
 8015260:	4a58      	ldr	r2, [pc, #352]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 8015262:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8015266:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	f003 0308 	and.w	r3, r3, #8
 8015270:	2b00      	cmp	r3, #0
 8015272:	d005      	beq.n	8015280 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8015274:	4b53      	ldr	r3, [pc, #332]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 8015276:	689b      	ldr	r3, [r3, #8]
 8015278:	4a52      	ldr	r2, [pc, #328]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 801527a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801527e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015280:	4b50      	ldr	r3, [pc, #320]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 8015282:	689b      	ldr	r3, [r3, #8]
 8015284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	689b      	ldr	r3, [r3, #8]
 801528c:	494d      	ldr	r1, [pc, #308]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 801528e:	4313      	orrs	r3, r2
 8015290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	f003 0301 	and.w	r3, r3, #1
 801529a:	2b00      	cmp	r3, #0
 801529c:	d040      	beq.n	8015320 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	685b      	ldr	r3, [r3, #4]
 80152a2:	2b01      	cmp	r3, #1
 80152a4:	d107      	bne.n	80152b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80152a6:	4b47      	ldr	r3, [pc, #284]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d115      	bne.n	80152de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80152b2:	2301      	movs	r3, #1
 80152b4:	e07f      	b.n	80153b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	685b      	ldr	r3, [r3, #4]
 80152ba:	2b02      	cmp	r3, #2
 80152bc:	d107      	bne.n	80152ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80152be:	4b41      	ldr	r3, [pc, #260]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d109      	bne.n	80152de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80152ca:	2301      	movs	r3, #1
 80152cc:	e073      	b.n	80153b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80152ce:	4b3d      	ldr	r3, [pc, #244]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	f003 0302 	and.w	r3, r3, #2
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d101      	bne.n	80152de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80152da:	2301      	movs	r3, #1
 80152dc:	e06b      	b.n	80153b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80152de:	4b39      	ldr	r3, [pc, #228]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 80152e0:	689b      	ldr	r3, [r3, #8]
 80152e2:	f023 0203 	bic.w	r2, r3, #3
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	685b      	ldr	r3, [r3, #4]
 80152ea:	4936      	ldr	r1, [pc, #216]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 80152ec:	4313      	orrs	r3, r2
 80152ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80152f0:	f7ff f910 	bl	8014514 <HAL_GetTick>
 80152f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80152f6:	e00a      	b.n	801530e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80152f8:	f7ff f90c 	bl	8014514 <HAL_GetTick>
 80152fc:	4602      	mov	r2, r0
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	1ad3      	subs	r3, r2, r3
 8015302:	f241 3288 	movw	r2, #5000	; 0x1388
 8015306:	4293      	cmp	r3, r2
 8015308:	d901      	bls.n	801530e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 801530a:	2303      	movs	r3, #3
 801530c:	e053      	b.n	80153b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801530e:	4b2d      	ldr	r3, [pc, #180]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 8015310:	689b      	ldr	r3, [r3, #8]
 8015312:	f003 020c 	and.w	r2, r3, #12
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	685b      	ldr	r3, [r3, #4]
 801531a:	009b      	lsls	r3, r3, #2
 801531c:	429a      	cmp	r2, r3
 801531e:	d1eb      	bne.n	80152f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8015320:	4b27      	ldr	r3, [pc, #156]	; (80153c0 <HAL_RCC_ClockConfig+0x1c4>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	f003 030f 	and.w	r3, r3, #15
 8015328:	683a      	ldr	r2, [r7, #0]
 801532a:	429a      	cmp	r2, r3
 801532c:	d210      	bcs.n	8015350 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801532e:	4b24      	ldr	r3, [pc, #144]	; (80153c0 <HAL_RCC_ClockConfig+0x1c4>)
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	f023 020f 	bic.w	r2, r3, #15
 8015336:	4922      	ldr	r1, [pc, #136]	; (80153c0 <HAL_RCC_ClockConfig+0x1c4>)
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	4313      	orrs	r3, r2
 801533c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801533e:	4b20      	ldr	r3, [pc, #128]	; (80153c0 <HAL_RCC_ClockConfig+0x1c4>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	f003 030f 	and.w	r3, r3, #15
 8015346:	683a      	ldr	r2, [r7, #0]
 8015348:	429a      	cmp	r2, r3
 801534a:	d001      	beq.n	8015350 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 801534c:	2301      	movs	r3, #1
 801534e:	e032      	b.n	80153b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	f003 0304 	and.w	r3, r3, #4
 8015358:	2b00      	cmp	r3, #0
 801535a:	d008      	beq.n	801536e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801535c:	4b19      	ldr	r3, [pc, #100]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 801535e:	689b      	ldr	r3, [r3, #8]
 8015360:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	68db      	ldr	r3, [r3, #12]
 8015368:	4916      	ldr	r1, [pc, #88]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 801536a:	4313      	orrs	r3, r2
 801536c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	f003 0308 	and.w	r3, r3, #8
 8015376:	2b00      	cmp	r3, #0
 8015378:	d009      	beq.n	801538e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801537a:	4b12      	ldr	r3, [pc, #72]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 801537c:	689b      	ldr	r3, [r3, #8]
 801537e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	691b      	ldr	r3, [r3, #16]
 8015386:	00db      	lsls	r3, r3, #3
 8015388:	490e      	ldr	r1, [pc, #56]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 801538a:	4313      	orrs	r3, r2
 801538c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801538e:	f000 f821 	bl	80153d4 <HAL_RCC_GetSysClockFreq>
 8015392:	4602      	mov	r2, r0
 8015394:	4b0b      	ldr	r3, [pc, #44]	; (80153c4 <HAL_RCC_ClockConfig+0x1c8>)
 8015396:	689b      	ldr	r3, [r3, #8]
 8015398:	091b      	lsrs	r3, r3, #4
 801539a:	f003 030f 	and.w	r3, r3, #15
 801539e:	490a      	ldr	r1, [pc, #40]	; (80153c8 <HAL_RCC_ClockConfig+0x1cc>)
 80153a0:	5ccb      	ldrb	r3, [r1, r3]
 80153a2:	fa22 f303 	lsr.w	r3, r2, r3
 80153a6:	4a09      	ldr	r2, [pc, #36]	; (80153cc <HAL_RCC_ClockConfig+0x1d0>)
 80153a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80153aa:	4b09      	ldr	r3, [pc, #36]	; (80153d0 <HAL_RCC_ClockConfig+0x1d4>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	4618      	mov	r0, r3
 80153b0:	f7ff f86c 	bl	801448c <HAL_InitTick>

  return HAL_OK;
 80153b4:	2300      	movs	r3, #0
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3710      	adds	r7, #16
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
 80153be:	bf00      	nop
 80153c0:	40023c00 	.word	0x40023c00
 80153c4:	40023800 	.word	0x40023800
 80153c8:	0801aae4 	.word	0x0801aae4
 80153cc:	20000000 	.word	0x20000000
 80153d0:	20000004 	.word	0x20000004

080153d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80153d4:	b5b0      	push	{r4, r5, r7, lr}
 80153d6:	b084      	sub	sp, #16
 80153d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80153da:	2100      	movs	r1, #0
 80153dc:	6079      	str	r1, [r7, #4]
 80153de:	2100      	movs	r1, #0
 80153e0:	60f9      	str	r1, [r7, #12]
 80153e2:	2100      	movs	r1, #0
 80153e4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80153e6:	2100      	movs	r1, #0
 80153e8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80153ea:	4952      	ldr	r1, [pc, #328]	; (8015534 <HAL_RCC_GetSysClockFreq+0x160>)
 80153ec:	6889      	ldr	r1, [r1, #8]
 80153ee:	f001 010c 	and.w	r1, r1, #12
 80153f2:	2908      	cmp	r1, #8
 80153f4:	d00d      	beq.n	8015412 <HAL_RCC_GetSysClockFreq+0x3e>
 80153f6:	2908      	cmp	r1, #8
 80153f8:	f200 8094 	bhi.w	8015524 <HAL_RCC_GetSysClockFreq+0x150>
 80153fc:	2900      	cmp	r1, #0
 80153fe:	d002      	beq.n	8015406 <HAL_RCC_GetSysClockFreq+0x32>
 8015400:	2904      	cmp	r1, #4
 8015402:	d003      	beq.n	801540c <HAL_RCC_GetSysClockFreq+0x38>
 8015404:	e08e      	b.n	8015524 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8015406:	4b4c      	ldr	r3, [pc, #304]	; (8015538 <HAL_RCC_GetSysClockFreq+0x164>)
 8015408:	60bb      	str	r3, [r7, #8]
      break;
 801540a:	e08e      	b.n	801552a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801540c:	4b4b      	ldr	r3, [pc, #300]	; (801553c <HAL_RCC_GetSysClockFreq+0x168>)
 801540e:	60bb      	str	r3, [r7, #8]
      break;
 8015410:	e08b      	b.n	801552a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8015412:	4948      	ldr	r1, [pc, #288]	; (8015534 <HAL_RCC_GetSysClockFreq+0x160>)
 8015414:	6849      	ldr	r1, [r1, #4]
 8015416:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801541a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801541c:	4945      	ldr	r1, [pc, #276]	; (8015534 <HAL_RCC_GetSysClockFreq+0x160>)
 801541e:	6849      	ldr	r1, [r1, #4]
 8015420:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8015424:	2900      	cmp	r1, #0
 8015426:	d024      	beq.n	8015472 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015428:	4942      	ldr	r1, [pc, #264]	; (8015534 <HAL_RCC_GetSysClockFreq+0x160>)
 801542a:	6849      	ldr	r1, [r1, #4]
 801542c:	0989      	lsrs	r1, r1, #6
 801542e:	4608      	mov	r0, r1
 8015430:	f04f 0100 	mov.w	r1, #0
 8015434:	f240 14ff 	movw	r4, #511	; 0x1ff
 8015438:	f04f 0500 	mov.w	r5, #0
 801543c:	ea00 0204 	and.w	r2, r0, r4
 8015440:	ea01 0305 	and.w	r3, r1, r5
 8015444:	493d      	ldr	r1, [pc, #244]	; (801553c <HAL_RCC_GetSysClockFreq+0x168>)
 8015446:	fb01 f003 	mul.w	r0, r1, r3
 801544a:	2100      	movs	r1, #0
 801544c:	fb01 f102 	mul.w	r1, r1, r2
 8015450:	1844      	adds	r4, r0, r1
 8015452:	493a      	ldr	r1, [pc, #232]	; (801553c <HAL_RCC_GetSysClockFreq+0x168>)
 8015454:	fba2 0101 	umull	r0, r1, r2, r1
 8015458:	1863      	adds	r3, r4, r1
 801545a:	4619      	mov	r1, r3
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	461a      	mov	r2, r3
 8015460:	f04f 0300 	mov.w	r3, #0
 8015464:	f7eb fc08 	bl	8000c78 <__aeabi_uldivmod>
 8015468:	4602      	mov	r2, r0
 801546a:	460b      	mov	r3, r1
 801546c:	4613      	mov	r3, r2
 801546e:	60fb      	str	r3, [r7, #12]
 8015470:	e04a      	b.n	8015508 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015472:	4b30      	ldr	r3, [pc, #192]	; (8015534 <HAL_RCC_GetSysClockFreq+0x160>)
 8015474:	685b      	ldr	r3, [r3, #4]
 8015476:	099b      	lsrs	r3, r3, #6
 8015478:	461a      	mov	r2, r3
 801547a:	f04f 0300 	mov.w	r3, #0
 801547e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8015482:	f04f 0100 	mov.w	r1, #0
 8015486:	ea02 0400 	and.w	r4, r2, r0
 801548a:	ea03 0501 	and.w	r5, r3, r1
 801548e:	4620      	mov	r0, r4
 8015490:	4629      	mov	r1, r5
 8015492:	f04f 0200 	mov.w	r2, #0
 8015496:	f04f 0300 	mov.w	r3, #0
 801549a:	014b      	lsls	r3, r1, #5
 801549c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80154a0:	0142      	lsls	r2, r0, #5
 80154a2:	4610      	mov	r0, r2
 80154a4:	4619      	mov	r1, r3
 80154a6:	1b00      	subs	r0, r0, r4
 80154a8:	eb61 0105 	sbc.w	r1, r1, r5
 80154ac:	f04f 0200 	mov.w	r2, #0
 80154b0:	f04f 0300 	mov.w	r3, #0
 80154b4:	018b      	lsls	r3, r1, #6
 80154b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80154ba:	0182      	lsls	r2, r0, #6
 80154bc:	1a12      	subs	r2, r2, r0
 80154be:	eb63 0301 	sbc.w	r3, r3, r1
 80154c2:	f04f 0000 	mov.w	r0, #0
 80154c6:	f04f 0100 	mov.w	r1, #0
 80154ca:	00d9      	lsls	r1, r3, #3
 80154cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80154d0:	00d0      	lsls	r0, r2, #3
 80154d2:	4602      	mov	r2, r0
 80154d4:	460b      	mov	r3, r1
 80154d6:	1912      	adds	r2, r2, r4
 80154d8:	eb45 0303 	adc.w	r3, r5, r3
 80154dc:	f04f 0000 	mov.w	r0, #0
 80154e0:	f04f 0100 	mov.w	r1, #0
 80154e4:	0299      	lsls	r1, r3, #10
 80154e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80154ea:	0290      	lsls	r0, r2, #10
 80154ec:	4602      	mov	r2, r0
 80154ee:	460b      	mov	r3, r1
 80154f0:	4610      	mov	r0, r2
 80154f2:	4619      	mov	r1, r3
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	461a      	mov	r2, r3
 80154f8:	f04f 0300 	mov.w	r3, #0
 80154fc:	f7eb fbbc 	bl	8000c78 <__aeabi_uldivmod>
 8015500:	4602      	mov	r2, r0
 8015502:	460b      	mov	r3, r1
 8015504:	4613      	mov	r3, r2
 8015506:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8015508:	4b0a      	ldr	r3, [pc, #40]	; (8015534 <HAL_RCC_GetSysClockFreq+0x160>)
 801550a:	685b      	ldr	r3, [r3, #4]
 801550c:	0c1b      	lsrs	r3, r3, #16
 801550e:	f003 0303 	and.w	r3, r3, #3
 8015512:	3301      	adds	r3, #1
 8015514:	005b      	lsls	r3, r3, #1
 8015516:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8015518:	68fa      	ldr	r2, [r7, #12]
 801551a:	683b      	ldr	r3, [r7, #0]
 801551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015520:	60bb      	str	r3, [r7, #8]
      break;
 8015522:	e002      	b.n	801552a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8015524:	4b04      	ldr	r3, [pc, #16]	; (8015538 <HAL_RCC_GetSysClockFreq+0x164>)
 8015526:	60bb      	str	r3, [r7, #8]
      break;
 8015528:	bf00      	nop
    }
  }
  return sysclockfreq;
 801552a:	68bb      	ldr	r3, [r7, #8]
}
 801552c:	4618      	mov	r0, r3
 801552e:	3710      	adds	r7, #16
 8015530:	46bd      	mov	sp, r7
 8015532:	bdb0      	pop	{r4, r5, r7, pc}
 8015534:	40023800 	.word	0x40023800
 8015538:	00f42400 	.word	0x00f42400
 801553c:	017d7840 	.word	0x017d7840

08015540 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015540:	b480      	push	{r7}
 8015542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015544:	4b03      	ldr	r3, [pc, #12]	; (8015554 <HAL_RCC_GetHCLKFreq+0x14>)
 8015546:	681b      	ldr	r3, [r3, #0]
}
 8015548:	4618      	mov	r0, r3
 801554a:	46bd      	mov	sp, r7
 801554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015550:	4770      	bx	lr
 8015552:	bf00      	nop
 8015554:	20000000 	.word	0x20000000

08015558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801555c:	f7ff fff0 	bl	8015540 <HAL_RCC_GetHCLKFreq>
 8015560:	4602      	mov	r2, r0
 8015562:	4b05      	ldr	r3, [pc, #20]	; (8015578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8015564:	689b      	ldr	r3, [r3, #8]
 8015566:	0a9b      	lsrs	r3, r3, #10
 8015568:	f003 0307 	and.w	r3, r3, #7
 801556c:	4903      	ldr	r1, [pc, #12]	; (801557c <HAL_RCC_GetPCLK1Freq+0x24>)
 801556e:	5ccb      	ldrb	r3, [r1, r3]
 8015570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8015574:	4618      	mov	r0, r3
 8015576:	bd80      	pop	{r7, pc}
 8015578:	40023800 	.word	0x40023800
 801557c:	0801aaf4 	.word	0x0801aaf4

08015580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015584:	f7ff ffdc 	bl	8015540 <HAL_RCC_GetHCLKFreq>
 8015588:	4602      	mov	r2, r0
 801558a:	4b05      	ldr	r3, [pc, #20]	; (80155a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 801558c:	689b      	ldr	r3, [r3, #8]
 801558e:	0b5b      	lsrs	r3, r3, #13
 8015590:	f003 0307 	and.w	r3, r3, #7
 8015594:	4903      	ldr	r1, [pc, #12]	; (80155a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015596:	5ccb      	ldrb	r3, [r1, r3]
 8015598:	fa22 f303 	lsr.w	r3, r2, r3
}
 801559c:	4618      	mov	r0, r3
 801559e:	bd80      	pop	{r7, pc}
 80155a0:	40023800 	.word	0x40023800
 80155a4:	0801aaf4 	.word	0x0801aaf4

080155a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b088      	sub	sp, #32
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80155b0:	2300      	movs	r3, #0
 80155b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80155b4:	2300      	movs	r3, #0
 80155b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80155b8:	2300      	movs	r3, #0
 80155ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80155bc:	2300      	movs	r3, #0
 80155be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80155c0:	2300      	movs	r3, #0
 80155c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	f003 0301 	and.w	r3, r3, #1
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d012      	beq.n	80155f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80155d0:	4b69      	ldr	r3, [pc, #420]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80155d2:	689b      	ldr	r3, [r3, #8]
 80155d4:	4a68      	ldr	r2, [pc, #416]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80155d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80155da:	6093      	str	r3, [r2, #8]
 80155dc:	4b66      	ldr	r3, [pc, #408]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80155de:	689a      	ldr	r2, [r3, #8]
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155e4:	4964      	ldr	r1, [pc, #400]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80155e6:	4313      	orrs	r3, r2
 80155e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d101      	bne.n	80155f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80155f2:	2301      	movs	r3, #1
 80155f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d017      	beq.n	8015632 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015602:	4b5d      	ldr	r3, [pc, #372]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015608:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015610:	4959      	ldr	r1, [pc, #356]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015612:	4313      	orrs	r3, r2
 8015614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801561c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015620:	d101      	bne.n	8015626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8015622:	2301      	movs	r3, #1
 8015624:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801562a:	2b00      	cmp	r3, #0
 801562c:	d101      	bne.n	8015632 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801562e:	2301      	movs	r3, #1
 8015630:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801563a:	2b00      	cmp	r3, #0
 801563c:	d017      	beq.n	801566e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801563e:	4b4e      	ldr	r3, [pc, #312]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015644:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801564c:	494a      	ldr	r1, [pc, #296]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801564e:	4313      	orrs	r3, r2
 8015650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801565c:	d101      	bne.n	8015662 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801565e:	2301      	movs	r3, #1
 8015660:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015666:	2b00      	cmp	r3, #0
 8015668:	d101      	bne.n	801566e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801566a:	2301      	movs	r3, #1
 801566c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015676:	2b00      	cmp	r3, #0
 8015678:	d001      	beq.n	801567e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801567a:	2301      	movs	r3, #1
 801567c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	f003 0320 	and.w	r3, r3, #32
 8015686:	2b00      	cmp	r3, #0
 8015688:	f000 808b 	beq.w	80157a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801568c:	4b3a      	ldr	r3, [pc, #232]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015690:	4a39      	ldr	r2, [pc, #228]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015696:	6413      	str	r3, [r2, #64]	; 0x40
 8015698:	4b37      	ldr	r3, [pc, #220]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801569c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80156a0:	60bb      	str	r3, [r7, #8]
 80156a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80156a4:	4b35      	ldr	r3, [pc, #212]	; (801577c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	4a34      	ldr	r2, [pc, #208]	; (801577c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80156aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80156ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80156b0:	f7fe ff30 	bl	8014514 <HAL_GetTick>
 80156b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80156b6:	e008      	b.n	80156ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80156b8:	f7fe ff2c 	bl	8014514 <HAL_GetTick>
 80156bc:	4602      	mov	r2, r0
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	1ad3      	subs	r3, r2, r3
 80156c2:	2b64      	cmp	r3, #100	; 0x64
 80156c4:	d901      	bls.n	80156ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80156c6:	2303      	movs	r3, #3
 80156c8:	e357      	b.n	8015d7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80156ca:	4b2c      	ldr	r3, [pc, #176]	; (801577c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d0f0      	beq.n	80156b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80156d6:	4b28      	ldr	r3, [pc, #160]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80156d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80156de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80156e0:	693b      	ldr	r3, [r7, #16]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d035      	beq.n	8015752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80156ee:	693a      	ldr	r2, [r7, #16]
 80156f0:	429a      	cmp	r2, r3
 80156f2:	d02e      	beq.n	8015752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80156f4:	4b20      	ldr	r3, [pc, #128]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80156f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80156fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80156fe:	4b1e      	ldr	r3, [pc, #120]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015702:	4a1d      	ldr	r2, [pc, #116]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015708:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801570a:	4b1b      	ldr	r3, [pc, #108]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801570c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801570e:	4a1a      	ldr	r2, [pc, #104]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015714:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8015716:	4a18      	ldr	r2, [pc, #96]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015718:	693b      	ldr	r3, [r7, #16]
 801571a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801571c:	4b16      	ldr	r3, [pc, #88]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015720:	f003 0301 	and.w	r3, r3, #1
 8015724:	2b01      	cmp	r3, #1
 8015726:	d114      	bne.n	8015752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015728:	f7fe fef4 	bl	8014514 <HAL_GetTick>
 801572c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801572e:	e00a      	b.n	8015746 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015730:	f7fe fef0 	bl	8014514 <HAL_GetTick>
 8015734:	4602      	mov	r2, r0
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	1ad3      	subs	r3, r2, r3
 801573a:	f241 3288 	movw	r2, #5000	; 0x1388
 801573e:	4293      	cmp	r3, r2
 8015740:	d901      	bls.n	8015746 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8015742:	2303      	movs	r3, #3
 8015744:	e319      	b.n	8015d7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015746:	4b0c      	ldr	r3, [pc, #48]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801574a:	f003 0302 	and.w	r3, r3, #2
 801574e:	2b00      	cmp	r3, #0
 8015750:	d0ee      	beq.n	8015730 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801575a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801575e:	d111      	bne.n	8015784 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8015760:	4b05      	ldr	r3, [pc, #20]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015762:	689b      	ldr	r3, [r3, #8]
 8015764:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801576c:	4b04      	ldr	r3, [pc, #16]	; (8015780 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801576e:	400b      	ands	r3, r1
 8015770:	4901      	ldr	r1, [pc, #4]	; (8015778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8015772:	4313      	orrs	r3, r2
 8015774:	608b      	str	r3, [r1, #8]
 8015776:	e00b      	b.n	8015790 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8015778:	40023800 	.word	0x40023800
 801577c:	40007000 	.word	0x40007000
 8015780:	0ffffcff 	.word	0x0ffffcff
 8015784:	4bb1      	ldr	r3, [pc, #708]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015786:	689b      	ldr	r3, [r3, #8]
 8015788:	4ab0      	ldr	r2, [pc, #704]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801578a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801578e:	6093      	str	r3, [r2, #8]
 8015790:	4bae      	ldr	r3, [pc, #696]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015792:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801579c:	49ab      	ldr	r1, [pc, #684]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801579e:	4313      	orrs	r3, r2
 80157a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	f003 0310 	and.w	r3, r3, #16
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d010      	beq.n	80157d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80157ae:	4ba7      	ldr	r3, [pc, #668]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80157b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80157b4:	4aa5      	ldr	r2, [pc, #660]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80157b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80157ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80157be:	4ba3      	ldr	r3, [pc, #652]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80157c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157c8:	49a0      	ldr	r1, [pc, #640]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80157ca:	4313      	orrs	r3, r2
 80157cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d00a      	beq.n	80157f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80157dc:	4b9b      	ldr	r3, [pc, #620]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80157de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80157e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80157ea:	4998      	ldr	r1, [pc, #608]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80157ec:	4313      	orrs	r3, r2
 80157ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d00a      	beq.n	8015814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80157fe:	4b93      	ldr	r3, [pc, #588]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015804:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801580c:	498f      	ldr	r1, [pc, #572]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801580e:	4313      	orrs	r3, r2
 8015810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801581c:	2b00      	cmp	r3, #0
 801581e:	d00a      	beq.n	8015836 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015820:	4b8a      	ldr	r3, [pc, #552]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015826:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801582e:	4987      	ldr	r1, [pc, #540]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015830:	4313      	orrs	r3, r2
 8015832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801583e:	2b00      	cmp	r3, #0
 8015840:	d00a      	beq.n	8015858 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8015842:	4b82      	ldr	r3, [pc, #520]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015848:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015850:	497e      	ldr	r1, [pc, #504]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015852:	4313      	orrs	r3, r2
 8015854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015860:	2b00      	cmp	r3, #0
 8015862:	d00a      	beq.n	801587a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015864:	4b79      	ldr	r3, [pc, #484]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801586a:	f023 0203 	bic.w	r2, r3, #3
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015872:	4976      	ldr	r1, [pc, #472]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015874:	4313      	orrs	r3, r2
 8015876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015882:	2b00      	cmp	r3, #0
 8015884:	d00a      	beq.n	801589c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015886:	4b71      	ldr	r3, [pc, #452]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801588c:	f023 020c 	bic.w	r2, r3, #12
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015894:	496d      	ldr	r1, [pc, #436]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015896:	4313      	orrs	r3, r2
 8015898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d00a      	beq.n	80158be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80158a8:	4b68      	ldr	r3, [pc, #416]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80158aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80158ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80158b6:	4965      	ldr	r1, [pc, #404]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80158b8:	4313      	orrs	r3, r2
 80158ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d00a      	beq.n	80158e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80158ca:	4b60      	ldr	r3, [pc, #384]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80158cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80158d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158d8:	495c      	ldr	r1, [pc, #368]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80158da:	4313      	orrs	r3, r2
 80158dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d00a      	beq.n	8015902 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80158ec:	4b57      	ldr	r3, [pc, #348]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80158ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80158f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80158fa:	4954      	ldr	r1, [pc, #336]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80158fc:	4313      	orrs	r3, r2
 80158fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801590a:	2b00      	cmp	r3, #0
 801590c:	d00a      	beq.n	8015924 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801590e:	4b4f      	ldr	r3, [pc, #316]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015914:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801591c:	494b      	ldr	r1, [pc, #300]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801591e:	4313      	orrs	r3, r2
 8015920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801592c:	2b00      	cmp	r3, #0
 801592e:	d00a      	beq.n	8015946 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8015930:	4b46      	ldr	r3, [pc, #280]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015936:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801593e:	4943      	ldr	r1, [pc, #268]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015940:	4313      	orrs	r3, r2
 8015942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801594e:	2b00      	cmp	r3, #0
 8015950:	d00a      	beq.n	8015968 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8015952:	4b3e      	ldr	r3, [pc, #248]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015958:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015960:	493a      	ldr	r1, [pc, #232]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015962:	4313      	orrs	r3, r2
 8015964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015970:	2b00      	cmp	r3, #0
 8015972:	d00a      	beq.n	801598a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8015974:	4b35      	ldr	r3, [pc, #212]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801597a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015982:	4932      	ldr	r1, [pc, #200]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015984:	4313      	orrs	r3, r2
 8015986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015992:	2b00      	cmp	r3, #0
 8015994:	d011      	beq.n	80159ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8015996:	4b2d      	ldr	r3, [pc, #180]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801599c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80159a4:	4929      	ldr	r1, [pc, #164]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80159a6:	4313      	orrs	r3, r2
 80159a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80159b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80159b4:	d101      	bne.n	80159ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80159b6:	2301      	movs	r3, #1
 80159b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	f003 0308 	and.w	r3, r3, #8
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d001      	beq.n	80159ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80159c6:	2301      	movs	r3, #1
 80159c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d00a      	beq.n	80159ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80159d6:	4b1d      	ldr	r3, [pc, #116]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80159d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80159dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80159e4:	4919      	ldr	r1, [pc, #100]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80159e6:	4313      	orrs	r3, r2
 80159e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d00b      	beq.n	8015a10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80159f8:	4b14      	ldr	r3, [pc, #80]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80159fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80159fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015a08:	4910      	ldr	r1, [pc, #64]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015a0a:	4313      	orrs	r3, r2
 8015a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8015a10:	69fb      	ldr	r3, [r7, #28]
 8015a12:	2b01      	cmp	r3, #1
 8015a14:	d006      	beq.n	8015a24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	f000 80d9 	beq.w	8015bd6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8015a24:	4b09      	ldr	r3, [pc, #36]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	4a08      	ldr	r2, [pc, #32]	; (8015a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015a2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015a30:	f7fe fd70 	bl	8014514 <HAL_GetTick>
 8015a34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8015a36:	e00b      	b.n	8015a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8015a38:	f7fe fd6c 	bl	8014514 <HAL_GetTick>
 8015a3c:	4602      	mov	r2, r0
 8015a3e:	697b      	ldr	r3, [r7, #20]
 8015a40:	1ad3      	subs	r3, r2, r3
 8015a42:	2b64      	cmp	r3, #100	; 0x64
 8015a44:	d904      	bls.n	8015a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8015a46:	2303      	movs	r3, #3
 8015a48:	e197      	b.n	8015d7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8015a4a:	bf00      	nop
 8015a4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8015a50:	4b6c      	ldr	r3, [pc, #432]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d1ed      	bne.n	8015a38 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	f003 0301 	and.w	r3, r3, #1
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d021      	beq.n	8015aac <HAL_RCCEx_PeriphCLKConfig+0x504>
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d11d      	bne.n	8015aac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8015a70:	4b64      	ldr	r3, [pc, #400]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015a76:	0c1b      	lsrs	r3, r3, #16
 8015a78:	f003 0303 	and.w	r3, r3, #3
 8015a7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8015a7e:	4b61      	ldr	r3, [pc, #388]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015a84:	0e1b      	lsrs	r3, r3, #24
 8015a86:	f003 030f 	and.w	r3, r3, #15
 8015a8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	685b      	ldr	r3, [r3, #4]
 8015a90:	019a      	lsls	r2, r3, #6
 8015a92:	693b      	ldr	r3, [r7, #16]
 8015a94:	041b      	lsls	r3, r3, #16
 8015a96:	431a      	orrs	r2, r3
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	061b      	lsls	r3, r3, #24
 8015a9c:	431a      	orrs	r2, r3
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	689b      	ldr	r3, [r3, #8]
 8015aa2:	071b      	lsls	r3, r3, #28
 8015aa4:	4957      	ldr	r1, [pc, #348]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015aa6:	4313      	orrs	r3, r2
 8015aa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d004      	beq.n	8015ac2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015ac0:	d00a      	beq.n	8015ad8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d02e      	beq.n	8015b2c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015ad6:	d129      	bne.n	8015b2c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8015ad8:	4b4a      	ldr	r3, [pc, #296]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015ade:	0c1b      	lsrs	r3, r3, #16
 8015ae0:	f003 0303 	and.w	r3, r3, #3
 8015ae4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8015ae6:	4b47      	ldr	r3, [pc, #284]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015aec:	0f1b      	lsrs	r3, r3, #28
 8015aee:	f003 0307 	and.w	r3, r3, #7
 8015af2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	685b      	ldr	r3, [r3, #4]
 8015af8:	019a      	lsls	r2, r3, #6
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	041b      	lsls	r3, r3, #16
 8015afe:	431a      	orrs	r2, r3
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	68db      	ldr	r3, [r3, #12]
 8015b04:	061b      	lsls	r3, r3, #24
 8015b06:	431a      	orrs	r2, r3
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	071b      	lsls	r3, r3, #28
 8015b0c:	493d      	ldr	r1, [pc, #244]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015b0e:	4313      	orrs	r3, r2
 8015b10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8015b14:	4b3b      	ldr	r3, [pc, #236]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b1a:	f023 021f 	bic.w	r2, r3, #31
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b22:	3b01      	subs	r3, #1
 8015b24:	4937      	ldr	r1, [pc, #220]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015b26:	4313      	orrs	r3, r2
 8015b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d01d      	beq.n	8015b74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8015b38:	4b32      	ldr	r3, [pc, #200]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015b3e:	0e1b      	lsrs	r3, r3, #24
 8015b40:	f003 030f 	and.w	r3, r3, #15
 8015b44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8015b46:	4b2f      	ldr	r3, [pc, #188]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015b4c:	0f1b      	lsrs	r3, r3, #28
 8015b4e:	f003 0307 	and.w	r3, r3, #7
 8015b52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	685b      	ldr	r3, [r3, #4]
 8015b58:	019a      	lsls	r2, r3, #6
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	691b      	ldr	r3, [r3, #16]
 8015b5e:	041b      	lsls	r3, r3, #16
 8015b60:	431a      	orrs	r2, r3
 8015b62:	693b      	ldr	r3, [r7, #16]
 8015b64:	061b      	lsls	r3, r3, #24
 8015b66:	431a      	orrs	r2, r3
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	071b      	lsls	r3, r3, #28
 8015b6c:	4925      	ldr	r1, [pc, #148]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015b6e:	4313      	orrs	r3, r2
 8015b70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d011      	beq.n	8015ba4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	685b      	ldr	r3, [r3, #4]
 8015b84:	019a      	lsls	r2, r3, #6
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	691b      	ldr	r3, [r3, #16]
 8015b8a:	041b      	lsls	r3, r3, #16
 8015b8c:	431a      	orrs	r2, r3
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	68db      	ldr	r3, [r3, #12]
 8015b92:	061b      	lsls	r3, r3, #24
 8015b94:	431a      	orrs	r2, r3
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	689b      	ldr	r3, [r3, #8]
 8015b9a:	071b      	lsls	r3, r3, #28
 8015b9c:	4919      	ldr	r1, [pc, #100]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015b9e:	4313      	orrs	r3, r2
 8015ba0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8015ba4:	4b17      	ldr	r3, [pc, #92]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	4a16      	ldr	r2, [pc, #88]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015baa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015bb0:	f7fe fcb0 	bl	8014514 <HAL_GetTick>
 8015bb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8015bb6:	e008      	b.n	8015bca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8015bb8:	f7fe fcac 	bl	8014514 <HAL_GetTick>
 8015bbc:	4602      	mov	r2, r0
 8015bbe:	697b      	ldr	r3, [r7, #20]
 8015bc0:	1ad3      	subs	r3, r2, r3
 8015bc2:	2b64      	cmp	r3, #100	; 0x64
 8015bc4:	d901      	bls.n	8015bca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8015bc6:	2303      	movs	r3, #3
 8015bc8:	e0d7      	b.n	8015d7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8015bca:	4b0e      	ldr	r3, [pc, #56]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d0f0      	beq.n	8015bb8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8015bd6:	69bb      	ldr	r3, [r7, #24]
 8015bd8:	2b01      	cmp	r3, #1
 8015bda:	f040 80cd 	bne.w	8015d78 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8015bde:	4b09      	ldr	r3, [pc, #36]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	4a08      	ldr	r2, [pc, #32]	; (8015c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8015be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015bea:	f7fe fc93 	bl	8014514 <HAL_GetTick>
 8015bee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8015bf0:	e00a      	b.n	8015c08 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8015bf2:	f7fe fc8f 	bl	8014514 <HAL_GetTick>
 8015bf6:	4602      	mov	r2, r0
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	1ad3      	subs	r3, r2, r3
 8015bfc:	2b64      	cmp	r3, #100	; 0x64
 8015bfe:	d903      	bls.n	8015c08 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8015c00:	2303      	movs	r3, #3
 8015c02:	e0ba      	b.n	8015d7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8015c04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8015c08:	4b5e      	ldr	r3, [pc, #376]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015c14:	d0ed      	beq.n	8015bf2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d003      	beq.n	8015c2a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d009      	beq.n	8015c3e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d02e      	beq.n	8015c94 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d12a      	bne.n	8015c94 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8015c3e:	4b51      	ldr	r3, [pc, #324]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015c44:	0c1b      	lsrs	r3, r3, #16
 8015c46:	f003 0303 	and.w	r3, r3, #3
 8015c4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8015c4c:	4b4d      	ldr	r3, [pc, #308]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015c52:	0f1b      	lsrs	r3, r3, #28
 8015c54:	f003 0307 	and.w	r3, r3, #7
 8015c58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	695b      	ldr	r3, [r3, #20]
 8015c5e:	019a      	lsls	r2, r3, #6
 8015c60:	693b      	ldr	r3, [r7, #16]
 8015c62:	041b      	lsls	r3, r3, #16
 8015c64:	431a      	orrs	r2, r3
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	699b      	ldr	r3, [r3, #24]
 8015c6a:	061b      	lsls	r3, r3, #24
 8015c6c:	431a      	orrs	r2, r3
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	071b      	lsls	r3, r3, #28
 8015c72:	4944      	ldr	r1, [pc, #272]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015c74:	4313      	orrs	r3, r2
 8015c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8015c7a:	4b42      	ldr	r3, [pc, #264]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c88:	3b01      	subs	r3, #1
 8015c8a:	021b      	lsls	r3, r3, #8
 8015c8c:	493d      	ldr	r1, [pc, #244]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015c8e:	4313      	orrs	r3, r2
 8015c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d022      	beq.n	8015ce6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015ca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8015ca8:	d11d      	bne.n	8015ce6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8015caa:	4b36      	ldr	r3, [pc, #216]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015cb0:	0e1b      	lsrs	r3, r3, #24
 8015cb2:	f003 030f 	and.w	r3, r3, #15
 8015cb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8015cb8:	4b32      	ldr	r3, [pc, #200]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015cbe:	0f1b      	lsrs	r3, r3, #28
 8015cc0:	f003 0307 	and.w	r3, r3, #7
 8015cc4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	695b      	ldr	r3, [r3, #20]
 8015cca:	019a      	lsls	r2, r3, #6
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	6a1b      	ldr	r3, [r3, #32]
 8015cd0:	041b      	lsls	r3, r3, #16
 8015cd2:	431a      	orrs	r2, r3
 8015cd4:	693b      	ldr	r3, [r7, #16]
 8015cd6:	061b      	lsls	r3, r3, #24
 8015cd8:	431a      	orrs	r2, r3
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	071b      	lsls	r3, r3, #28
 8015cde:	4929      	ldr	r1, [pc, #164]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015ce0:	4313      	orrs	r3, r2
 8015ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	f003 0308 	and.w	r3, r3, #8
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d028      	beq.n	8015d44 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8015cf2:	4b24      	ldr	r3, [pc, #144]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015cf8:	0e1b      	lsrs	r3, r3, #24
 8015cfa:	f003 030f 	and.w	r3, r3, #15
 8015cfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8015d00:	4b20      	ldr	r3, [pc, #128]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015d06:	0c1b      	lsrs	r3, r3, #16
 8015d08:	f003 0303 	and.w	r3, r3, #3
 8015d0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	695b      	ldr	r3, [r3, #20]
 8015d12:	019a      	lsls	r2, r3, #6
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	041b      	lsls	r3, r3, #16
 8015d18:	431a      	orrs	r2, r3
 8015d1a:	693b      	ldr	r3, [r7, #16]
 8015d1c:	061b      	lsls	r3, r3, #24
 8015d1e:	431a      	orrs	r2, r3
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	69db      	ldr	r3, [r3, #28]
 8015d24:	071b      	lsls	r3, r3, #28
 8015d26:	4917      	ldr	r1, [pc, #92]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015d28:	4313      	orrs	r3, r2
 8015d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8015d2e:	4b15      	ldr	r3, [pc, #84]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015d34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d3c:	4911      	ldr	r1, [pc, #68]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015d3e:	4313      	orrs	r3, r2
 8015d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8015d44:	4b0f      	ldr	r3, [pc, #60]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	4a0e      	ldr	r2, [pc, #56]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015d4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015d50:	f7fe fbe0 	bl	8014514 <HAL_GetTick>
 8015d54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8015d56:	e008      	b.n	8015d6a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8015d58:	f7fe fbdc 	bl	8014514 <HAL_GetTick>
 8015d5c:	4602      	mov	r2, r0
 8015d5e:	697b      	ldr	r3, [r7, #20]
 8015d60:	1ad3      	subs	r3, r2, r3
 8015d62:	2b64      	cmp	r3, #100	; 0x64
 8015d64:	d901      	bls.n	8015d6a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8015d66:	2303      	movs	r3, #3
 8015d68:	e007      	b.n	8015d7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8015d6a:	4b06      	ldr	r3, [pc, #24]	; (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015d76:	d1ef      	bne.n	8015d58 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8015d78:	2300      	movs	r3, #0
}
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	3720      	adds	r7, #32
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	bd80      	pop	{r7, pc}
 8015d82:	bf00      	nop
 8015d84:	40023800 	.word	0x40023800

08015d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b082      	sub	sp, #8
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d101      	bne.n	8015d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015d96:	2301      	movs	r3, #1
 8015d98:	e040      	b.n	8015e1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d106      	bne.n	8015db0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	2200      	movs	r2, #0
 8015da6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	f7fe f9e0 	bl	8014170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	2224      	movs	r2, #36	; 0x24
 8015db4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	681a      	ldr	r2, [r3, #0]
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	f022 0201 	bic.w	r2, r2, #1
 8015dc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015dc6:	6878      	ldr	r0, [r7, #4]
 8015dc8:	f000 fb9c 	bl	8016504 <UART_SetConfig>
 8015dcc:	4603      	mov	r3, r0
 8015dce:	2b01      	cmp	r3, #1
 8015dd0:	d101      	bne.n	8015dd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	e022      	b.n	8015e1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d002      	beq.n	8015de4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8015dde:	6878      	ldr	r0, [r7, #4]
 8015de0:	f000 fdf2 	bl	80169c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	685a      	ldr	r2, [r3, #4]
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	689a      	ldr	r2, [r3, #8]
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	681a      	ldr	r2, [r3, #0]
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	f042 0201 	orr.w	r2, r2, #1
 8015e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015e14:	6878      	ldr	r0, [r7, #4]
 8015e16:	f000 fe79 	bl	8016b0c <UART_CheckIdleState>
 8015e1a:	4603      	mov	r3, r0
}
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	3708      	adds	r7, #8
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd80      	pop	{r7, pc}

08015e24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b08a      	sub	sp, #40	; 0x28
 8015e28:	af02      	add	r7, sp, #8
 8015e2a:	60f8      	str	r0, [r7, #12]
 8015e2c:	60b9      	str	r1, [r7, #8]
 8015e2e:	603b      	str	r3, [r7, #0]
 8015e30:	4613      	mov	r3, r2
 8015e32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015e38:	2b20      	cmp	r3, #32
 8015e3a:	f040 8081 	bne.w	8015f40 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8015e3e:	68bb      	ldr	r3, [r7, #8]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d002      	beq.n	8015e4a <HAL_UART_Transmit+0x26>
 8015e44:	88fb      	ldrh	r3, [r7, #6]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d101      	bne.n	8015e4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8015e4a:	2301      	movs	r3, #1
 8015e4c:	e079      	b.n	8015f42 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8015e54:	2b01      	cmp	r3, #1
 8015e56:	d101      	bne.n	8015e5c <HAL_UART_Transmit+0x38>
 8015e58:	2302      	movs	r3, #2
 8015e5a:	e072      	b.n	8015f42 <HAL_UART_Transmit+0x11e>
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	2201      	movs	r2, #1
 8015e60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	2200      	movs	r2, #0
 8015e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	2221      	movs	r2, #33	; 0x21
 8015e70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015e72:	f7fe fb4f 	bl	8014514 <HAL_GetTick>
 8015e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	88fa      	ldrh	r2, [r7, #6]
 8015e7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	88fa      	ldrh	r2, [r7, #6]
 8015e84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	689b      	ldr	r3, [r3, #8]
 8015e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015e90:	d108      	bne.n	8015ea4 <HAL_UART_Transmit+0x80>
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	691b      	ldr	r3, [r3, #16]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d104      	bne.n	8015ea4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015e9e:	68bb      	ldr	r3, [r7, #8]
 8015ea0:	61bb      	str	r3, [r7, #24]
 8015ea2:	e003      	b.n	8015eac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8015ea4:	68bb      	ldr	r3, [r7, #8]
 8015ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	2200      	movs	r2, #0
 8015eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8015eb4:	e02c      	b.n	8015f10 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	9300      	str	r3, [sp, #0]
 8015eba:	697b      	ldr	r3, [r7, #20]
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	2180      	movs	r1, #128	; 0x80
 8015ec0:	68f8      	ldr	r0, [r7, #12]
 8015ec2:	f000 fe56 	bl	8016b72 <UART_WaitOnFlagUntilTimeout>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d001      	beq.n	8015ed0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8015ecc:	2303      	movs	r3, #3
 8015ece:	e038      	b.n	8015f42 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8015ed0:	69fb      	ldr	r3, [r7, #28]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d10b      	bne.n	8015eee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015ed6:	69bb      	ldr	r3, [r7, #24]
 8015ed8:	881b      	ldrh	r3, [r3, #0]
 8015eda:	461a      	mov	r2, r3
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015ee4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8015ee6:	69bb      	ldr	r3, [r7, #24]
 8015ee8:	3302      	adds	r3, #2
 8015eea:	61bb      	str	r3, [r7, #24]
 8015eec:	e007      	b.n	8015efe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8015eee:	69fb      	ldr	r3, [r7, #28]
 8015ef0:	781a      	ldrb	r2, [r3, #0]
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8015ef8:	69fb      	ldr	r3, [r7, #28]
 8015efa:	3301      	adds	r3, #1
 8015efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8015f04:	b29b      	uxth	r3, r3
 8015f06:	3b01      	subs	r3, #1
 8015f08:	b29a      	uxth	r2, r3
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8015f16:	b29b      	uxth	r3, r3
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d1cc      	bne.n	8015eb6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015f1c:	683b      	ldr	r3, [r7, #0]
 8015f1e:	9300      	str	r3, [sp, #0]
 8015f20:	697b      	ldr	r3, [r7, #20]
 8015f22:	2200      	movs	r2, #0
 8015f24:	2140      	movs	r1, #64	; 0x40
 8015f26:	68f8      	ldr	r0, [r7, #12]
 8015f28:	f000 fe23 	bl	8016b72 <UART_WaitOnFlagUntilTimeout>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d001      	beq.n	8015f36 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8015f32:	2303      	movs	r3, #3
 8015f34:	e005      	b.n	8015f42 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	2220      	movs	r2, #32
 8015f3a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	e000      	b.n	8015f42 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8015f40:	2302      	movs	r3, #2
  }
}
 8015f42:	4618      	mov	r0, r3
 8015f44:	3720      	adds	r7, #32
 8015f46:	46bd      	mov	sp, r7
 8015f48:	bd80      	pop	{r7, pc}

08015f4a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015f4a:	b580      	push	{r7, lr}
 8015f4c:	b08a      	sub	sp, #40	; 0x28
 8015f4e:	af02      	add	r7, sp, #8
 8015f50:	60f8      	str	r0, [r7, #12]
 8015f52:	60b9      	str	r1, [r7, #8]
 8015f54:	603b      	str	r3, [r7, #0]
 8015f56:	4613      	mov	r3, r2
 8015f58:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f5e:	2b20      	cmp	r3, #32
 8015f60:	f040 80be 	bne.w	80160e0 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8015f64:	68bb      	ldr	r3, [r7, #8]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d002      	beq.n	8015f70 <HAL_UART_Receive+0x26>
 8015f6a:	88fb      	ldrh	r3, [r7, #6]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d101      	bne.n	8015f74 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8015f70:	2301      	movs	r3, #1
 8015f72:	e0b6      	b.n	80160e2 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8015f7a:	2b01      	cmp	r3, #1
 8015f7c:	d101      	bne.n	8015f82 <HAL_UART_Receive+0x38>
 8015f7e:	2302      	movs	r3, #2
 8015f80:	e0af      	b.n	80160e2 <HAL_UART_Receive+0x198>
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	2201      	movs	r2, #1
 8015f86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	2222      	movs	r2, #34	; 0x22
 8015f96:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015f9e:	f7fe fab9 	bl	8014514 <HAL_GetTick>
 8015fa2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	88fa      	ldrh	r2, [r7, #6]
 8015fa8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	88fa      	ldrh	r2, [r7, #6]
 8015fb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	689b      	ldr	r3, [r3, #8]
 8015fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015fbc:	d10e      	bne.n	8015fdc <HAL_UART_Receive+0x92>
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	691b      	ldr	r3, [r3, #16]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d105      	bne.n	8015fd2 <HAL_UART_Receive+0x88>
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015fcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8015fd0:	e02d      	b.n	801602e <HAL_UART_Receive+0xe4>
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	22ff      	movs	r2, #255	; 0xff
 8015fd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8015fda:	e028      	b.n	801602e <HAL_UART_Receive+0xe4>
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	689b      	ldr	r3, [r3, #8]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d10d      	bne.n	8016000 <HAL_UART_Receive+0xb6>
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	691b      	ldr	r3, [r3, #16]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d104      	bne.n	8015ff6 <HAL_UART_Receive+0xac>
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	22ff      	movs	r2, #255	; 0xff
 8015ff0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8015ff4:	e01b      	b.n	801602e <HAL_UART_Receive+0xe4>
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	227f      	movs	r2, #127	; 0x7f
 8015ffa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8015ffe:	e016      	b.n	801602e <HAL_UART_Receive+0xe4>
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	689b      	ldr	r3, [r3, #8]
 8016004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016008:	d10d      	bne.n	8016026 <HAL_UART_Receive+0xdc>
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	691b      	ldr	r3, [r3, #16]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d104      	bne.n	801601c <HAL_UART_Receive+0xd2>
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	227f      	movs	r2, #127	; 0x7f
 8016016:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801601a:	e008      	b.n	801602e <HAL_UART_Receive+0xe4>
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	223f      	movs	r2, #63	; 0x3f
 8016020:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8016024:	e003      	b.n	801602e <HAL_UART_Receive+0xe4>
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	2200      	movs	r2, #0
 801602a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016034:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	689b      	ldr	r3, [r3, #8]
 801603a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801603e:	d108      	bne.n	8016052 <HAL_UART_Receive+0x108>
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	691b      	ldr	r3, [r3, #16]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d104      	bne.n	8016052 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8016048:	2300      	movs	r3, #0
 801604a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801604c:	68bb      	ldr	r3, [r7, #8]
 801604e:	61bb      	str	r3, [r7, #24]
 8016050:	e003      	b.n	801605a <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016056:	2300      	movs	r3, #0
 8016058:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	2200      	movs	r2, #0
 801605e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8016062:	e032      	b.n	80160ca <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8016064:	683b      	ldr	r3, [r7, #0]
 8016066:	9300      	str	r3, [sp, #0]
 8016068:	697b      	ldr	r3, [r7, #20]
 801606a:	2200      	movs	r2, #0
 801606c:	2120      	movs	r1, #32
 801606e:	68f8      	ldr	r0, [r7, #12]
 8016070:	f000 fd7f 	bl	8016b72 <UART_WaitOnFlagUntilTimeout>
 8016074:	4603      	mov	r3, r0
 8016076:	2b00      	cmp	r3, #0
 8016078:	d001      	beq.n	801607e <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 801607a:	2303      	movs	r3, #3
 801607c:	e031      	b.n	80160e2 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 801607e:	69fb      	ldr	r3, [r7, #28]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d10c      	bne.n	801609e <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801608a:	b29a      	uxth	r2, r3
 801608c:	8a7b      	ldrh	r3, [r7, #18]
 801608e:	4013      	ands	r3, r2
 8016090:	b29a      	uxth	r2, r3
 8016092:	69bb      	ldr	r3, [r7, #24]
 8016094:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8016096:	69bb      	ldr	r3, [r7, #24]
 8016098:	3302      	adds	r3, #2
 801609a:	61bb      	str	r3, [r7, #24]
 801609c:	e00c      	b.n	80160b8 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160a4:	b2da      	uxtb	r2, r3
 80160a6:	8a7b      	ldrh	r3, [r7, #18]
 80160a8:	b2db      	uxtb	r3, r3
 80160aa:	4013      	ands	r3, r2
 80160ac:	b2da      	uxtb	r2, r3
 80160ae:	69fb      	ldr	r3, [r7, #28]
 80160b0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80160b2:	69fb      	ldr	r3, [r7, #28]
 80160b4:	3301      	adds	r3, #1
 80160b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80160be:	b29b      	uxth	r3, r3
 80160c0:	3b01      	subs	r3, #1
 80160c2:	b29a      	uxth	r2, r3
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80160d0:	b29b      	uxth	r3, r3
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d1c6      	bne.n	8016064 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	2220      	movs	r2, #32
 80160da:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80160dc:	2300      	movs	r3, #0
 80160de:	e000      	b.n	80160e2 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80160e0:	2302      	movs	r3, #2
  }
}
 80160e2:	4618      	mov	r0, r3
 80160e4:	3720      	adds	r7, #32
 80160e6:	46bd      	mov	sp, r7
 80160e8:	bd80      	pop	{r7, pc}
	...

080160ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b088      	sub	sp, #32
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	69db      	ldr	r3, [r3, #28]
 80160fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	689b      	ldr	r3, [r3, #8]
 801610a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801610c:	69fa      	ldr	r2, [r7, #28]
 801610e:	f640 030f 	movw	r3, #2063	; 0x80f
 8016112:	4013      	ands	r3, r2
 8016114:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8016116:	693b      	ldr	r3, [r7, #16]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d113      	bne.n	8016144 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801611c:	69fb      	ldr	r3, [r7, #28]
 801611e:	f003 0320 	and.w	r3, r3, #32
 8016122:	2b00      	cmp	r3, #0
 8016124:	d00e      	beq.n	8016144 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016126:	69bb      	ldr	r3, [r7, #24]
 8016128:	f003 0320 	and.w	r3, r3, #32
 801612c:	2b00      	cmp	r3, #0
 801612e:	d009      	beq.n	8016144 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016134:	2b00      	cmp	r3, #0
 8016136:	f000 81b9 	beq.w	80164ac <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801613e:	6878      	ldr	r0, [r7, #4]
 8016140:	4798      	blx	r3
      }
      return;
 8016142:	e1b3      	b.n	80164ac <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8016144:	693b      	ldr	r3, [r7, #16]
 8016146:	2b00      	cmp	r3, #0
 8016148:	f000 80e3 	beq.w	8016312 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801614c:	697b      	ldr	r3, [r7, #20]
 801614e:	f003 0301 	and.w	r3, r3, #1
 8016152:	2b00      	cmp	r3, #0
 8016154:	d105      	bne.n	8016162 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8016156:	69ba      	ldr	r2, [r7, #24]
 8016158:	4ba5      	ldr	r3, [pc, #660]	; (80163f0 <HAL_UART_IRQHandler+0x304>)
 801615a:	4013      	ands	r3, r2
 801615c:	2b00      	cmp	r3, #0
 801615e:	f000 80d8 	beq.w	8016312 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016162:	69fb      	ldr	r3, [r7, #28]
 8016164:	f003 0301 	and.w	r3, r3, #1
 8016168:	2b00      	cmp	r3, #0
 801616a:	d010      	beq.n	801618e <HAL_UART_IRQHandler+0xa2>
 801616c:	69bb      	ldr	r3, [r7, #24]
 801616e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016172:	2b00      	cmp	r3, #0
 8016174:	d00b      	beq.n	801618e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	2201      	movs	r2, #1
 801617c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016184:	f043 0201 	orr.w	r2, r3, #1
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801618e:	69fb      	ldr	r3, [r7, #28]
 8016190:	f003 0302 	and.w	r3, r3, #2
 8016194:	2b00      	cmp	r3, #0
 8016196:	d010      	beq.n	80161ba <HAL_UART_IRQHandler+0xce>
 8016198:	697b      	ldr	r3, [r7, #20]
 801619a:	f003 0301 	and.w	r3, r3, #1
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d00b      	beq.n	80161ba <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	2202      	movs	r2, #2
 80161a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80161b0:	f043 0204 	orr.w	r2, r3, #4
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80161ba:	69fb      	ldr	r3, [r7, #28]
 80161bc:	f003 0304 	and.w	r3, r3, #4
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d010      	beq.n	80161e6 <HAL_UART_IRQHandler+0xfa>
 80161c4:	697b      	ldr	r3, [r7, #20]
 80161c6:	f003 0301 	and.w	r3, r3, #1
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d00b      	beq.n	80161e6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	2204      	movs	r2, #4
 80161d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80161dc:	f043 0202 	orr.w	r2, r3, #2
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80161e6:	69fb      	ldr	r3, [r7, #28]
 80161e8:	f003 0308 	and.w	r3, r3, #8
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d015      	beq.n	801621c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80161f0:	69bb      	ldr	r3, [r7, #24]
 80161f2:	f003 0320 	and.w	r3, r3, #32
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d104      	bne.n	8016204 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80161fa:	697b      	ldr	r3, [r7, #20]
 80161fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016200:	2b00      	cmp	r3, #0
 8016202:	d00b      	beq.n	801621c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	2208      	movs	r2, #8
 801620a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016212:	f043 0208 	orr.w	r2, r3, #8
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801621c:	69fb      	ldr	r3, [r7, #28]
 801621e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016222:	2b00      	cmp	r3, #0
 8016224:	d011      	beq.n	801624a <HAL_UART_IRQHandler+0x15e>
 8016226:	69bb      	ldr	r3, [r7, #24]
 8016228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801622c:	2b00      	cmp	r3, #0
 801622e:	d00c      	beq.n	801624a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016240:	f043 0220 	orr.w	r2, r3, #32
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016250:	2b00      	cmp	r3, #0
 8016252:	f000 812d 	beq.w	80164b0 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8016256:	69fb      	ldr	r3, [r7, #28]
 8016258:	f003 0320 	and.w	r3, r3, #32
 801625c:	2b00      	cmp	r3, #0
 801625e:	d00c      	beq.n	801627a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016260:	69bb      	ldr	r3, [r7, #24]
 8016262:	f003 0320 	and.w	r3, r3, #32
 8016266:	2b00      	cmp	r3, #0
 8016268:	d007      	beq.n	801627a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801626e:	2b00      	cmp	r3, #0
 8016270:	d003      	beq.n	801627a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016276:	6878      	ldr	r0, [r7, #4]
 8016278:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016280:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	689b      	ldr	r3, [r3, #8]
 8016288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801628c:	2b40      	cmp	r3, #64	; 0x40
 801628e:	d004      	beq.n	801629a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016296:	2b00      	cmp	r3, #0
 8016298:	d031      	beq.n	80162fe <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801629a:	6878      	ldr	r0, [r7, #4]
 801629c:	f000 fce5 	bl	8016c6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	689b      	ldr	r3, [r3, #8]
 80162a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80162aa:	2b40      	cmp	r3, #64	; 0x40
 80162ac:	d123      	bne.n	80162f6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	689a      	ldr	r2, [r3, #8]
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80162bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d013      	beq.n	80162ee <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162ca:	4a4a      	ldr	r2, [pc, #296]	; (80163f4 <HAL_UART_IRQHandler+0x308>)
 80162cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162d2:	4618      	mov	r0, r3
 80162d4:	f7fe facf 	bl	8014876 <HAL_DMA_Abort_IT>
 80162d8:	4603      	mov	r3, r0
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d017      	beq.n	801630e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80162e4:	687a      	ldr	r2, [r7, #4]
 80162e6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80162e8:	4610      	mov	r0, r2
 80162ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80162ec:	e00f      	b.n	801630e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	f000 f8f2 	bl	80164d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80162f4:	e00b      	b.n	801630e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80162f6:	6878      	ldr	r0, [r7, #4]
 80162f8:	f000 f8ee 	bl	80164d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80162fc:	e007      	b.n	801630e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f000 f8ea 	bl	80164d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	2200      	movs	r2, #0
 8016308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 801630c:	e0d0      	b.n	80164b0 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801630e:	bf00      	nop
    return;
 8016310:	e0ce      	b.n	80164b0 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016316:	2b01      	cmp	r3, #1
 8016318:	f040 80a7 	bne.w	801646a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801631c:	69fb      	ldr	r3, [r7, #28]
 801631e:	f003 0310 	and.w	r3, r3, #16
 8016322:	2b00      	cmp	r3, #0
 8016324:	f000 80a1 	beq.w	801646a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016328:	69bb      	ldr	r3, [r7, #24]
 801632a:	f003 0310 	and.w	r3, r3, #16
 801632e:	2b00      	cmp	r3, #0
 8016330:	f000 809b 	beq.w	801646a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	2210      	movs	r2, #16
 801633a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	689b      	ldr	r3, [r3, #8]
 8016342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016346:	2b40      	cmp	r3, #64	; 0x40
 8016348:	d156      	bne.n	80163f8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	685b      	ldr	r3, [r3, #4]
 8016352:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8016354:	893b      	ldrh	r3, [r7, #8]
 8016356:	2b00      	cmp	r3, #0
 8016358:	f000 80ac 	beq.w	80164b4 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8016362:	893a      	ldrh	r2, [r7, #8]
 8016364:	429a      	cmp	r2, r3
 8016366:	f080 80a5 	bcs.w	80164b4 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	893a      	ldrh	r2, [r7, #8]
 801636e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016376:	69db      	ldr	r3, [r3, #28]
 8016378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801637c:	d02a      	beq.n	80163d4 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	681a      	ldr	r2, [r3, #0]
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801638c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	689a      	ldr	r2, [r3, #8]
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	f022 0201 	bic.w	r2, r2, #1
 801639c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	689a      	ldr	r2, [r3, #8]
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80163ac:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	2220      	movs	r2, #32
 80163b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	2200      	movs	r2, #0
 80163b8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	681a      	ldr	r2, [r3, #0]
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	f022 0210 	bic.w	r2, r2, #16
 80163c8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80163ce:	4618      	mov	r0, r3
 80163d0:	f7fe f9e1 	bl	8014796 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80163e0:	b29b      	uxth	r3, r3
 80163e2:	1ad3      	subs	r3, r2, r3
 80163e4:	b29b      	uxth	r3, r3
 80163e6:	4619      	mov	r1, r3
 80163e8:	6878      	ldr	r0, [r7, #4]
 80163ea:	f000 f87f 	bl	80164ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80163ee:	e061      	b.n	80164b4 <HAL_UART_IRQHandler+0x3c8>
 80163f0:	04000120 	.word	0x04000120
 80163f4:	08016cc9 	.word	0x08016cc9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8016404:	b29b      	uxth	r3, r3
 8016406:	1ad3      	subs	r3, r2, r3
 8016408:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8016410:	b29b      	uxth	r3, r3
 8016412:	2b00      	cmp	r3, #0
 8016414:	d050      	beq.n	80164b8 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8016416:	897b      	ldrh	r3, [r7, #10]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d04d      	beq.n	80164b8 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	681a      	ldr	r2, [r3, #0]
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801642a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	689a      	ldr	r2, [r3, #8]
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	f022 0201 	bic.w	r2, r2, #1
 801643a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2220      	movs	r2, #32
 8016440:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	2200      	movs	r2, #0
 8016446:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	2200      	movs	r2, #0
 801644c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	681a      	ldr	r2, [r3, #0]
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	f022 0210 	bic.w	r2, r2, #16
 801645c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801645e:	897b      	ldrh	r3, [r7, #10]
 8016460:	4619      	mov	r1, r3
 8016462:	6878      	ldr	r0, [r7, #4]
 8016464:	f000 f842 	bl	80164ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016468:	e026      	b.n	80164b8 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801646a:	69fb      	ldr	r3, [r7, #28]
 801646c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016470:	2b00      	cmp	r3, #0
 8016472:	d00d      	beq.n	8016490 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8016474:	69bb      	ldr	r3, [r7, #24]
 8016476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801647a:	2b00      	cmp	r3, #0
 801647c:	d008      	beq.n	8016490 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016482:	2b00      	cmp	r3, #0
 8016484:	d01a      	beq.n	80164bc <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801648a:	6878      	ldr	r0, [r7, #4]
 801648c:	4798      	blx	r3
    }
    return;
 801648e:	e015      	b.n	80164bc <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016490:	69fb      	ldr	r3, [r7, #28]
 8016492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016496:	2b00      	cmp	r3, #0
 8016498:	d011      	beq.n	80164be <HAL_UART_IRQHandler+0x3d2>
 801649a:	69bb      	ldr	r3, [r7, #24]
 801649c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d00c      	beq.n	80164be <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f000 fc25 	bl	8016cf4 <UART_EndTransmit_IT>
    return;
 80164aa:	e008      	b.n	80164be <HAL_UART_IRQHandler+0x3d2>
      return;
 80164ac:	bf00      	nop
 80164ae:	e006      	b.n	80164be <HAL_UART_IRQHandler+0x3d2>
    return;
 80164b0:	bf00      	nop
 80164b2:	e004      	b.n	80164be <HAL_UART_IRQHandler+0x3d2>
      return;
 80164b4:	bf00      	nop
 80164b6:	e002      	b.n	80164be <HAL_UART_IRQHandler+0x3d2>
      return;
 80164b8:	bf00      	nop
 80164ba:	e000      	b.n	80164be <HAL_UART_IRQHandler+0x3d2>
    return;
 80164bc:	bf00      	nop
  }

}
 80164be:	3720      	adds	r7, #32
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}

080164c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80164c4:	b480      	push	{r7}
 80164c6:	b083      	sub	sp, #12
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80164cc:	bf00      	nop
 80164ce:	370c      	adds	r7, #12
 80164d0:	46bd      	mov	sp, r7
 80164d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d6:	4770      	bx	lr

080164d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80164d8:	b480      	push	{r7}
 80164da:	b083      	sub	sp, #12
 80164dc:	af00      	add	r7, sp, #0
 80164de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80164e0:	bf00      	nop
 80164e2:	370c      	adds	r7, #12
 80164e4:	46bd      	mov	sp, r7
 80164e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ea:	4770      	bx	lr

080164ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80164ec:	b480      	push	{r7}
 80164ee:	b083      	sub	sp, #12
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
 80164f4:	460b      	mov	r3, r1
 80164f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80164f8:	bf00      	nop
 80164fa:	370c      	adds	r7, #12
 80164fc:	46bd      	mov	sp, r7
 80164fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016502:	4770      	bx	lr

08016504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b088      	sub	sp, #32
 8016508:	af00      	add	r7, sp, #0
 801650a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801650c:	2300      	movs	r3, #0
 801650e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	689a      	ldr	r2, [r3, #8]
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	691b      	ldr	r3, [r3, #16]
 8016518:	431a      	orrs	r2, r3
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	695b      	ldr	r3, [r3, #20]
 801651e:	431a      	orrs	r2, r3
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	69db      	ldr	r3, [r3, #28]
 8016524:	4313      	orrs	r3, r2
 8016526:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	681a      	ldr	r2, [r3, #0]
 801652e:	4ba7      	ldr	r3, [pc, #668]	; (80167cc <UART_SetConfig+0x2c8>)
 8016530:	4013      	ands	r3, r2
 8016532:	687a      	ldr	r2, [r7, #4]
 8016534:	6812      	ldr	r2, [r2, #0]
 8016536:	6979      	ldr	r1, [r7, #20]
 8016538:	430b      	orrs	r3, r1
 801653a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	685b      	ldr	r3, [r3, #4]
 8016542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	68da      	ldr	r2, [r3, #12]
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	430a      	orrs	r2, r1
 8016550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	699b      	ldr	r3, [r3, #24]
 8016556:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	6a1b      	ldr	r3, [r3, #32]
 801655c:	697a      	ldr	r2, [r7, #20]
 801655e:	4313      	orrs	r3, r2
 8016560:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	689b      	ldr	r3, [r3, #8]
 8016568:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	697a      	ldr	r2, [r7, #20]
 8016572:	430a      	orrs	r2, r1
 8016574:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	4a95      	ldr	r2, [pc, #596]	; (80167d0 <UART_SetConfig+0x2cc>)
 801657c:	4293      	cmp	r3, r2
 801657e:	d120      	bne.n	80165c2 <UART_SetConfig+0xbe>
 8016580:	4b94      	ldr	r3, [pc, #592]	; (80167d4 <UART_SetConfig+0x2d0>)
 8016582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016586:	f003 0303 	and.w	r3, r3, #3
 801658a:	2b03      	cmp	r3, #3
 801658c:	d816      	bhi.n	80165bc <UART_SetConfig+0xb8>
 801658e:	a201      	add	r2, pc, #4	; (adr r2, 8016594 <UART_SetConfig+0x90>)
 8016590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016594:	080165a5 	.word	0x080165a5
 8016598:	080165b1 	.word	0x080165b1
 801659c:	080165ab 	.word	0x080165ab
 80165a0:	080165b7 	.word	0x080165b7
 80165a4:	2301      	movs	r3, #1
 80165a6:	77fb      	strb	r3, [r7, #31]
 80165a8:	e14f      	b.n	801684a <UART_SetConfig+0x346>
 80165aa:	2302      	movs	r3, #2
 80165ac:	77fb      	strb	r3, [r7, #31]
 80165ae:	e14c      	b.n	801684a <UART_SetConfig+0x346>
 80165b0:	2304      	movs	r3, #4
 80165b2:	77fb      	strb	r3, [r7, #31]
 80165b4:	e149      	b.n	801684a <UART_SetConfig+0x346>
 80165b6:	2308      	movs	r3, #8
 80165b8:	77fb      	strb	r3, [r7, #31]
 80165ba:	e146      	b.n	801684a <UART_SetConfig+0x346>
 80165bc:	2310      	movs	r3, #16
 80165be:	77fb      	strb	r3, [r7, #31]
 80165c0:	e143      	b.n	801684a <UART_SetConfig+0x346>
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	4a84      	ldr	r2, [pc, #528]	; (80167d8 <UART_SetConfig+0x2d4>)
 80165c8:	4293      	cmp	r3, r2
 80165ca:	d132      	bne.n	8016632 <UART_SetConfig+0x12e>
 80165cc:	4b81      	ldr	r3, [pc, #516]	; (80167d4 <UART_SetConfig+0x2d0>)
 80165ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80165d2:	f003 030c 	and.w	r3, r3, #12
 80165d6:	2b0c      	cmp	r3, #12
 80165d8:	d828      	bhi.n	801662c <UART_SetConfig+0x128>
 80165da:	a201      	add	r2, pc, #4	; (adr r2, 80165e0 <UART_SetConfig+0xdc>)
 80165dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165e0:	08016615 	.word	0x08016615
 80165e4:	0801662d 	.word	0x0801662d
 80165e8:	0801662d 	.word	0x0801662d
 80165ec:	0801662d 	.word	0x0801662d
 80165f0:	08016621 	.word	0x08016621
 80165f4:	0801662d 	.word	0x0801662d
 80165f8:	0801662d 	.word	0x0801662d
 80165fc:	0801662d 	.word	0x0801662d
 8016600:	0801661b 	.word	0x0801661b
 8016604:	0801662d 	.word	0x0801662d
 8016608:	0801662d 	.word	0x0801662d
 801660c:	0801662d 	.word	0x0801662d
 8016610:	08016627 	.word	0x08016627
 8016614:	2300      	movs	r3, #0
 8016616:	77fb      	strb	r3, [r7, #31]
 8016618:	e117      	b.n	801684a <UART_SetConfig+0x346>
 801661a:	2302      	movs	r3, #2
 801661c:	77fb      	strb	r3, [r7, #31]
 801661e:	e114      	b.n	801684a <UART_SetConfig+0x346>
 8016620:	2304      	movs	r3, #4
 8016622:	77fb      	strb	r3, [r7, #31]
 8016624:	e111      	b.n	801684a <UART_SetConfig+0x346>
 8016626:	2308      	movs	r3, #8
 8016628:	77fb      	strb	r3, [r7, #31]
 801662a:	e10e      	b.n	801684a <UART_SetConfig+0x346>
 801662c:	2310      	movs	r3, #16
 801662e:	77fb      	strb	r3, [r7, #31]
 8016630:	e10b      	b.n	801684a <UART_SetConfig+0x346>
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	4a69      	ldr	r2, [pc, #420]	; (80167dc <UART_SetConfig+0x2d8>)
 8016638:	4293      	cmp	r3, r2
 801663a:	d120      	bne.n	801667e <UART_SetConfig+0x17a>
 801663c:	4b65      	ldr	r3, [pc, #404]	; (80167d4 <UART_SetConfig+0x2d0>)
 801663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016642:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8016646:	2b30      	cmp	r3, #48	; 0x30
 8016648:	d013      	beq.n	8016672 <UART_SetConfig+0x16e>
 801664a:	2b30      	cmp	r3, #48	; 0x30
 801664c:	d814      	bhi.n	8016678 <UART_SetConfig+0x174>
 801664e:	2b20      	cmp	r3, #32
 8016650:	d009      	beq.n	8016666 <UART_SetConfig+0x162>
 8016652:	2b20      	cmp	r3, #32
 8016654:	d810      	bhi.n	8016678 <UART_SetConfig+0x174>
 8016656:	2b00      	cmp	r3, #0
 8016658:	d002      	beq.n	8016660 <UART_SetConfig+0x15c>
 801665a:	2b10      	cmp	r3, #16
 801665c:	d006      	beq.n	801666c <UART_SetConfig+0x168>
 801665e:	e00b      	b.n	8016678 <UART_SetConfig+0x174>
 8016660:	2300      	movs	r3, #0
 8016662:	77fb      	strb	r3, [r7, #31]
 8016664:	e0f1      	b.n	801684a <UART_SetConfig+0x346>
 8016666:	2302      	movs	r3, #2
 8016668:	77fb      	strb	r3, [r7, #31]
 801666a:	e0ee      	b.n	801684a <UART_SetConfig+0x346>
 801666c:	2304      	movs	r3, #4
 801666e:	77fb      	strb	r3, [r7, #31]
 8016670:	e0eb      	b.n	801684a <UART_SetConfig+0x346>
 8016672:	2308      	movs	r3, #8
 8016674:	77fb      	strb	r3, [r7, #31]
 8016676:	e0e8      	b.n	801684a <UART_SetConfig+0x346>
 8016678:	2310      	movs	r3, #16
 801667a:	77fb      	strb	r3, [r7, #31]
 801667c:	e0e5      	b.n	801684a <UART_SetConfig+0x346>
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	4a57      	ldr	r2, [pc, #348]	; (80167e0 <UART_SetConfig+0x2dc>)
 8016684:	4293      	cmp	r3, r2
 8016686:	d120      	bne.n	80166ca <UART_SetConfig+0x1c6>
 8016688:	4b52      	ldr	r3, [pc, #328]	; (80167d4 <UART_SetConfig+0x2d0>)
 801668a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801668e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016692:	2bc0      	cmp	r3, #192	; 0xc0
 8016694:	d013      	beq.n	80166be <UART_SetConfig+0x1ba>
 8016696:	2bc0      	cmp	r3, #192	; 0xc0
 8016698:	d814      	bhi.n	80166c4 <UART_SetConfig+0x1c0>
 801669a:	2b80      	cmp	r3, #128	; 0x80
 801669c:	d009      	beq.n	80166b2 <UART_SetConfig+0x1ae>
 801669e:	2b80      	cmp	r3, #128	; 0x80
 80166a0:	d810      	bhi.n	80166c4 <UART_SetConfig+0x1c0>
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d002      	beq.n	80166ac <UART_SetConfig+0x1a8>
 80166a6:	2b40      	cmp	r3, #64	; 0x40
 80166a8:	d006      	beq.n	80166b8 <UART_SetConfig+0x1b4>
 80166aa:	e00b      	b.n	80166c4 <UART_SetConfig+0x1c0>
 80166ac:	2300      	movs	r3, #0
 80166ae:	77fb      	strb	r3, [r7, #31]
 80166b0:	e0cb      	b.n	801684a <UART_SetConfig+0x346>
 80166b2:	2302      	movs	r3, #2
 80166b4:	77fb      	strb	r3, [r7, #31]
 80166b6:	e0c8      	b.n	801684a <UART_SetConfig+0x346>
 80166b8:	2304      	movs	r3, #4
 80166ba:	77fb      	strb	r3, [r7, #31]
 80166bc:	e0c5      	b.n	801684a <UART_SetConfig+0x346>
 80166be:	2308      	movs	r3, #8
 80166c0:	77fb      	strb	r3, [r7, #31]
 80166c2:	e0c2      	b.n	801684a <UART_SetConfig+0x346>
 80166c4:	2310      	movs	r3, #16
 80166c6:	77fb      	strb	r3, [r7, #31]
 80166c8:	e0bf      	b.n	801684a <UART_SetConfig+0x346>
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	4a45      	ldr	r2, [pc, #276]	; (80167e4 <UART_SetConfig+0x2e0>)
 80166d0:	4293      	cmp	r3, r2
 80166d2:	d125      	bne.n	8016720 <UART_SetConfig+0x21c>
 80166d4:	4b3f      	ldr	r3, [pc, #252]	; (80167d4 <UART_SetConfig+0x2d0>)
 80166d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80166da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80166de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80166e2:	d017      	beq.n	8016714 <UART_SetConfig+0x210>
 80166e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80166e8:	d817      	bhi.n	801671a <UART_SetConfig+0x216>
 80166ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80166ee:	d00b      	beq.n	8016708 <UART_SetConfig+0x204>
 80166f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80166f4:	d811      	bhi.n	801671a <UART_SetConfig+0x216>
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d003      	beq.n	8016702 <UART_SetConfig+0x1fe>
 80166fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80166fe:	d006      	beq.n	801670e <UART_SetConfig+0x20a>
 8016700:	e00b      	b.n	801671a <UART_SetConfig+0x216>
 8016702:	2300      	movs	r3, #0
 8016704:	77fb      	strb	r3, [r7, #31]
 8016706:	e0a0      	b.n	801684a <UART_SetConfig+0x346>
 8016708:	2302      	movs	r3, #2
 801670a:	77fb      	strb	r3, [r7, #31]
 801670c:	e09d      	b.n	801684a <UART_SetConfig+0x346>
 801670e:	2304      	movs	r3, #4
 8016710:	77fb      	strb	r3, [r7, #31]
 8016712:	e09a      	b.n	801684a <UART_SetConfig+0x346>
 8016714:	2308      	movs	r3, #8
 8016716:	77fb      	strb	r3, [r7, #31]
 8016718:	e097      	b.n	801684a <UART_SetConfig+0x346>
 801671a:	2310      	movs	r3, #16
 801671c:	77fb      	strb	r3, [r7, #31]
 801671e:	e094      	b.n	801684a <UART_SetConfig+0x346>
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	4a30      	ldr	r2, [pc, #192]	; (80167e8 <UART_SetConfig+0x2e4>)
 8016726:	4293      	cmp	r3, r2
 8016728:	d125      	bne.n	8016776 <UART_SetConfig+0x272>
 801672a:	4b2a      	ldr	r3, [pc, #168]	; (80167d4 <UART_SetConfig+0x2d0>)
 801672c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016730:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8016734:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8016738:	d017      	beq.n	801676a <UART_SetConfig+0x266>
 801673a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801673e:	d817      	bhi.n	8016770 <UART_SetConfig+0x26c>
 8016740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016744:	d00b      	beq.n	801675e <UART_SetConfig+0x25a>
 8016746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801674a:	d811      	bhi.n	8016770 <UART_SetConfig+0x26c>
 801674c:	2b00      	cmp	r3, #0
 801674e:	d003      	beq.n	8016758 <UART_SetConfig+0x254>
 8016750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016754:	d006      	beq.n	8016764 <UART_SetConfig+0x260>
 8016756:	e00b      	b.n	8016770 <UART_SetConfig+0x26c>
 8016758:	2301      	movs	r3, #1
 801675a:	77fb      	strb	r3, [r7, #31]
 801675c:	e075      	b.n	801684a <UART_SetConfig+0x346>
 801675e:	2302      	movs	r3, #2
 8016760:	77fb      	strb	r3, [r7, #31]
 8016762:	e072      	b.n	801684a <UART_SetConfig+0x346>
 8016764:	2304      	movs	r3, #4
 8016766:	77fb      	strb	r3, [r7, #31]
 8016768:	e06f      	b.n	801684a <UART_SetConfig+0x346>
 801676a:	2308      	movs	r3, #8
 801676c:	77fb      	strb	r3, [r7, #31]
 801676e:	e06c      	b.n	801684a <UART_SetConfig+0x346>
 8016770:	2310      	movs	r3, #16
 8016772:	77fb      	strb	r3, [r7, #31]
 8016774:	e069      	b.n	801684a <UART_SetConfig+0x346>
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	4a1c      	ldr	r2, [pc, #112]	; (80167ec <UART_SetConfig+0x2e8>)
 801677c:	4293      	cmp	r3, r2
 801677e:	d137      	bne.n	80167f0 <UART_SetConfig+0x2ec>
 8016780:	4b14      	ldr	r3, [pc, #80]	; (80167d4 <UART_SetConfig+0x2d0>)
 8016782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016786:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801678a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801678e:	d017      	beq.n	80167c0 <UART_SetConfig+0x2bc>
 8016790:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8016794:	d817      	bhi.n	80167c6 <UART_SetConfig+0x2c2>
 8016796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801679a:	d00b      	beq.n	80167b4 <UART_SetConfig+0x2b0>
 801679c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80167a0:	d811      	bhi.n	80167c6 <UART_SetConfig+0x2c2>
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d003      	beq.n	80167ae <UART_SetConfig+0x2aa>
 80167a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80167aa:	d006      	beq.n	80167ba <UART_SetConfig+0x2b6>
 80167ac:	e00b      	b.n	80167c6 <UART_SetConfig+0x2c2>
 80167ae:	2300      	movs	r3, #0
 80167b0:	77fb      	strb	r3, [r7, #31]
 80167b2:	e04a      	b.n	801684a <UART_SetConfig+0x346>
 80167b4:	2302      	movs	r3, #2
 80167b6:	77fb      	strb	r3, [r7, #31]
 80167b8:	e047      	b.n	801684a <UART_SetConfig+0x346>
 80167ba:	2304      	movs	r3, #4
 80167bc:	77fb      	strb	r3, [r7, #31]
 80167be:	e044      	b.n	801684a <UART_SetConfig+0x346>
 80167c0:	2308      	movs	r3, #8
 80167c2:	77fb      	strb	r3, [r7, #31]
 80167c4:	e041      	b.n	801684a <UART_SetConfig+0x346>
 80167c6:	2310      	movs	r3, #16
 80167c8:	77fb      	strb	r3, [r7, #31]
 80167ca:	e03e      	b.n	801684a <UART_SetConfig+0x346>
 80167cc:	efff69f3 	.word	0xefff69f3
 80167d0:	40011000 	.word	0x40011000
 80167d4:	40023800 	.word	0x40023800
 80167d8:	40004400 	.word	0x40004400
 80167dc:	40004800 	.word	0x40004800
 80167e0:	40004c00 	.word	0x40004c00
 80167e4:	40005000 	.word	0x40005000
 80167e8:	40011400 	.word	0x40011400
 80167ec:	40007800 	.word	0x40007800
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	4a71      	ldr	r2, [pc, #452]	; (80169bc <UART_SetConfig+0x4b8>)
 80167f6:	4293      	cmp	r3, r2
 80167f8:	d125      	bne.n	8016846 <UART_SetConfig+0x342>
 80167fa:	4b71      	ldr	r3, [pc, #452]	; (80169c0 <UART_SetConfig+0x4bc>)
 80167fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8016804:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8016808:	d017      	beq.n	801683a <UART_SetConfig+0x336>
 801680a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801680e:	d817      	bhi.n	8016840 <UART_SetConfig+0x33c>
 8016810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016814:	d00b      	beq.n	801682e <UART_SetConfig+0x32a>
 8016816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801681a:	d811      	bhi.n	8016840 <UART_SetConfig+0x33c>
 801681c:	2b00      	cmp	r3, #0
 801681e:	d003      	beq.n	8016828 <UART_SetConfig+0x324>
 8016820:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016824:	d006      	beq.n	8016834 <UART_SetConfig+0x330>
 8016826:	e00b      	b.n	8016840 <UART_SetConfig+0x33c>
 8016828:	2300      	movs	r3, #0
 801682a:	77fb      	strb	r3, [r7, #31]
 801682c:	e00d      	b.n	801684a <UART_SetConfig+0x346>
 801682e:	2302      	movs	r3, #2
 8016830:	77fb      	strb	r3, [r7, #31]
 8016832:	e00a      	b.n	801684a <UART_SetConfig+0x346>
 8016834:	2304      	movs	r3, #4
 8016836:	77fb      	strb	r3, [r7, #31]
 8016838:	e007      	b.n	801684a <UART_SetConfig+0x346>
 801683a:	2308      	movs	r3, #8
 801683c:	77fb      	strb	r3, [r7, #31]
 801683e:	e004      	b.n	801684a <UART_SetConfig+0x346>
 8016840:	2310      	movs	r3, #16
 8016842:	77fb      	strb	r3, [r7, #31]
 8016844:	e001      	b.n	801684a <UART_SetConfig+0x346>
 8016846:	2310      	movs	r3, #16
 8016848:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	69db      	ldr	r3, [r3, #28]
 801684e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016852:	d15b      	bne.n	801690c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8016854:	7ffb      	ldrb	r3, [r7, #31]
 8016856:	2b08      	cmp	r3, #8
 8016858:	d827      	bhi.n	80168aa <UART_SetConfig+0x3a6>
 801685a:	a201      	add	r2, pc, #4	; (adr r2, 8016860 <UART_SetConfig+0x35c>)
 801685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016860:	08016885 	.word	0x08016885
 8016864:	0801688d 	.word	0x0801688d
 8016868:	08016895 	.word	0x08016895
 801686c:	080168ab 	.word	0x080168ab
 8016870:	0801689b 	.word	0x0801689b
 8016874:	080168ab 	.word	0x080168ab
 8016878:	080168ab 	.word	0x080168ab
 801687c:	080168ab 	.word	0x080168ab
 8016880:	080168a3 	.word	0x080168a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016884:	f7fe fe68 	bl	8015558 <HAL_RCC_GetPCLK1Freq>
 8016888:	61b8      	str	r0, [r7, #24]
        break;
 801688a:	e013      	b.n	80168b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801688c:	f7fe fe78 	bl	8015580 <HAL_RCC_GetPCLK2Freq>
 8016890:	61b8      	str	r0, [r7, #24]
        break;
 8016892:	e00f      	b.n	80168b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016894:	4b4b      	ldr	r3, [pc, #300]	; (80169c4 <UART_SetConfig+0x4c0>)
 8016896:	61bb      	str	r3, [r7, #24]
        break;
 8016898:	e00c      	b.n	80168b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801689a:	f7fe fd9b 	bl	80153d4 <HAL_RCC_GetSysClockFreq>
 801689e:	61b8      	str	r0, [r7, #24]
        break;
 80168a0:	e008      	b.n	80168b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80168a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80168a6:	61bb      	str	r3, [r7, #24]
        break;
 80168a8:	e004      	b.n	80168b4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80168aa:	2300      	movs	r3, #0
 80168ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80168ae:	2301      	movs	r3, #1
 80168b0:	77bb      	strb	r3, [r7, #30]
        break;
 80168b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80168b4:	69bb      	ldr	r3, [r7, #24]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d074      	beq.n	80169a4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80168ba:	69bb      	ldr	r3, [r7, #24]
 80168bc:	005a      	lsls	r2, r3, #1
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	685b      	ldr	r3, [r3, #4]
 80168c2:	085b      	lsrs	r3, r3, #1
 80168c4:	441a      	add	r2, r3
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	685b      	ldr	r3, [r3, #4]
 80168ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80168ce:	b29b      	uxth	r3, r3
 80168d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80168d2:	693b      	ldr	r3, [r7, #16]
 80168d4:	2b0f      	cmp	r3, #15
 80168d6:	d916      	bls.n	8016906 <UART_SetConfig+0x402>
 80168d8:	693b      	ldr	r3, [r7, #16]
 80168da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80168de:	d212      	bcs.n	8016906 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80168e0:	693b      	ldr	r3, [r7, #16]
 80168e2:	b29b      	uxth	r3, r3
 80168e4:	f023 030f 	bic.w	r3, r3, #15
 80168e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80168ea:	693b      	ldr	r3, [r7, #16]
 80168ec:	085b      	lsrs	r3, r3, #1
 80168ee:	b29b      	uxth	r3, r3
 80168f0:	f003 0307 	and.w	r3, r3, #7
 80168f4:	b29a      	uxth	r2, r3
 80168f6:	89fb      	ldrh	r3, [r7, #14]
 80168f8:	4313      	orrs	r3, r2
 80168fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	89fa      	ldrh	r2, [r7, #14]
 8016902:	60da      	str	r2, [r3, #12]
 8016904:	e04e      	b.n	80169a4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8016906:	2301      	movs	r3, #1
 8016908:	77bb      	strb	r3, [r7, #30]
 801690a:	e04b      	b.n	80169a4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 801690c:	7ffb      	ldrb	r3, [r7, #31]
 801690e:	2b08      	cmp	r3, #8
 8016910:	d827      	bhi.n	8016962 <UART_SetConfig+0x45e>
 8016912:	a201      	add	r2, pc, #4	; (adr r2, 8016918 <UART_SetConfig+0x414>)
 8016914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016918:	0801693d 	.word	0x0801693d
 801691c:	08016945 	.word	0x08016945
 8016920:	0801694d 	.word	0x0801694d
 8016924:	08016963 	.word	0x08016963
 8016928:	08016953 	.word	0x08016953
 801692c:	08016963 	.word	0x08016963
 8016930:	08016963 	.word	0x08016963
 8016934:	08016963 	.word	0x08016963
 8016938:	0801695b 	.word	0x0801695b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801693c:	f7fe fe0c 	bl	8015558 <HAL_RCC_GetPCLK1Freq>
 8016940:	61b8      	str	r0, [r7, #24]
        break;
 8016942:	e013      	b.n	801696c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016944:	f7fe fe1c 	bl	8015580 <HAL_RCC_GetPCLK2Freq>
 8016948:	61b8      	str	r0, [r7, #24]
        break;
 801694a:	e00f      	b.n	801696c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801694c:	4b1d      	ldr	r3, [pc, #116]	; (80169c4 <UART_SetConfig+0x4c0>)
 801694e:	61bb      	str	r3, [r7, #24]
        break;
 8016950:	e00c      	b.n	801696c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016952:	f7fe fd3f 	bl	80153d4 <HAL_RCC_GetSysClockFreq>
 8016956:	61b8      	str	r0, [r7, #24]
        break;
 8016958:	e008      	b.n	801696c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801695a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801695e:	61bb      	str	r3, [r7, #24]
        break;
 8016960:	e004      	b.n	801696c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8016962:	2300      	movs	r3, #0
 8016964:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8016966:	2301      	movs	r3, #1
 8016968:	77bb      	strb	r3, [r7, #30]
        break;
 801696a:	bf00      	nop
    }

    if (pclk != 0U)
 801696c:	69bb      	ldr	r3, [r7, #24]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d018      	beq.n	80169a4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	685b      	ldr	r3, [r3, #4]
 8016976:	085a      	lsrs	r2, r3, #1
 8016978:	69bb      	ldr	r3, [r7, #24]
 801697a:	441a      	add	r2, r3
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	685b      	ldr	r3, [r3, #4]
 8016980:	fbb2 f3f3 	udiv	r3, r2, r3
 8016984:	b29b      	uxth	r3, r3
 8016986:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016988:	693b      	ldr	r3, [r7, #16]
 801698a:	2b0f      	cmp	r3, #15
 801698c:	d908      	bls.n	80169a0 <UART_SetConfig+0x49c>
 801698e:	693b      	ldr	r3, [r7, #16]
 8016990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016994:	d204      	bcs.n	80169a0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	693a      	ldr	r2, [r7, #16]
 801699c:	60da      	str	r2, [r3, #12]
 801699e:	e001      	b.n	80169a4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80169a0:	2301      	movs	r3, #1
 80169a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	2200      	movs	r2, #0
 80169a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	2200      	movs	r2, #0
 80169ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80169b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80169b2:	4618      	mov	r0, r3
 80169b4:	3720      	adds	r7, #32
 80169b6:	46bd      	mov	sp, r7
 80169b8:	bd80      	pop	{r7, pc}
 80169ba:	bf00      	nop
 80169bc:	40007c00 	.word	0x40007c00
 80169c0:	40023800 	.word	0x40023800
 80169c4:	00f42400 	.word	0x00f42400

080169c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80169c8:	b480      	push	{r7}
 80169ca:	b083      	sub	sp, #12
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169d4:	f003 0301 	and.w	r3, r3, #1
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d00a      	beq.n	80169f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	685b      	ldr	r3, [r3, #4]
 80169e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	430a      	orrs	r2, r1
 80169f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169f6:	f003 0302 	and.w	r3, r3, #2
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d00a      	beq.n	8016a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	685b      	ldr	r3, [r3, #4]
 8016a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	430a      	orrs	r2, r1
 8016a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a18:	f003 0304 	and.w	r3, r3, #4
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d00a      	beq.n	8016a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	685b      	ldr	r3, [r3, #4]
 8016a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	430a      	orrs	r2, r1
 8016a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a3a:	f003 0308 	and.w	r3, r3, #8
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d00a      	beq.n	8016a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	685b      	ldr	r3, [r3, #4]
 8016a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	430a      	orrs	r2, r1
 8016a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a5c:	f003 0310 	and.w	r3, r3, #16
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d00a      	beq.n	8016a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	689b      	ldr	r3, [r3, #8]
 8016a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	430a      	orrs	r2, r1
 8016a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a7e:	f003 0320 	and.w	r3, r3, #32
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d00a      	beq.n	8016a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	689b      	ldr	r3, [r3, #8]
 8016a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	430a      	orrs	r2, r1
 8016a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d01a      	beq.n	8016ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	685b      	ldr	r3, [r3, #4]
 8016aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	430a      	orrs	r2, r1
 8016abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016ac6:	d10a      	bne.n	8016ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	685b      	ldr	r3, [r3, #4]
 8016ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	430a      	orrs	r2, r1
 8016adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d00a      	beq.n	8016b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	685b      	ldr	r3, [r3, #4]
 8016af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	430a      	orrs	r2, r1
 8016afe:	605a      	str	r2, [r3, #4]
  }
}
 8016b00:	bf00      	nop
 8016b02:	370c      	adds	r7, #12
 8016b04:	46bd      	mov	sp, r7
 8016b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b0a:	4770      	bx	lr

08016b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b086      	sub	sp, #24
 8016b10:	af02      	add	r7, sp, #8
 8016b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	2200      	movs	r2, #0
 8016b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016b1c:	f7fd fcfa 	bl	8014514 <HAL_GetTick>
 8016b20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	f003 0308 	and.w	r3, r3, #8
 8016b2c:	2b08      	cmp	r3, #8
 8016b2e:	d10e      	bne.n	8016b4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016b34:	9300      	str	r3, [sp, #0]
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	2200      	movs	r2, #0
 8016b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016b3e:	6878      	ldr	r0, [r7, #4]
 8016b40:	f000 f817 	bl	8016b72 <UART_WaitOnFlagUntilTimeout>
 8016b44:	4603      	mov	r3, r0
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d001      	beq.n	8016b4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016b4a:	2303      	movs	r3, #3
 8016b4c:	e00d      	b.n	8016b6a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	2220      	movs	r2, #32
 8016b52:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	2220      	movs	r2, #32
 8016b58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	2200      	movs	r2, #0
 8016b64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8016b68:	2300      	movs	r3, #0
}
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	3710      	adds	r7, #16
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	bd80      	pop	{r7, pc}

08016b72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016b72:	b580      	push	{r7, lr}
 8016b74:	b084      	sub	sp, #16
 8016b76:	af00      	add	r7, sp, #0
 8016b78:	60f8      	str	r0, [r7, #12]
 8016b7a:	60b9      	str	r1, [r7, #8]
 8016b7c:	603b      	str	r3, [r7, #0]
 8016b7e:	4613      	mov	r3, r2
 8016b80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016b82:	e05e      	b.n	8016c42 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016b84:	69bb      	ldr	r3, [r7, #24]
 8016b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b8a:	d05a      	beq.n	8016c42 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016b8c:	f7fd fcc2 	bl	8014514 <HAL_GetTick>
 8016b90:	4602      	mov	r2, r0
 8016b92:	683b      	ldr	r3, [r7, #0]
 8016b94:	1ad3      	subs	r3, r2, r3
 8016b96:	69ba      	ldr	r2, [r7, #24]
 8016b98:	429a      	cmp	r2, r3
 8016b9a:	d302      	bcc.n	8016ba2 <UART_WaitOnFlagUntilTimeout+0x30>
 8016b9c:	69bb      	ldr	r3, [r7, #24]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d11b      	bne.n	8016bda <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	681a      	ldr	r2, [r3, #0]
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8016bb0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	689a      	ldr	r2, [r3, #8]
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	f022 0201 	bic.w	r2, r2, #1
 8016bc0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	2220      	movs	r2, #32
 8016bc6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	2220      	movs	r2, #32
 8016bcc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8016bd6:	2303      	movs	r3, #3
 8016bd8:	e043      	b.n	8016c62 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	f003 0304 	and.w	r3, r3, #4
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d02c      	beq.n	8016c42 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	69db      	ldr	r3, [r3, #28]
 8016bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016bf6:	d124      	bne.n	8016c42 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016c00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	681a      	ldr	r2, [r3, #0]
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8016c10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	689a      	ldr	r2, [r3, #8]
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	f022 0201 	bic.w	r2, r2, #1
 8016c20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	2220      	movs	r2, #32
 8016c26:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	2220      	movs	r2, #32
 8016c2c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	2220      	movs	r2, #32
 8016c32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	2200      	movs	r2, #0
 8016c3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8016c3e:	2303      	movs	r3, #3
 8016c40:	e00f      	b.n	8016c62 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	69da      	ldr	r2, [r3, #28]
 8016c48:	68bb      	ldr	r3, [r7, #8]
 8016c4a:	4013      	ands	r3, r2
 8016c4c:	68ba      	ldr	r2, [r7, #8]
 8016c4e:	429a      	cmp	r2, r3
 8016c50:	bf0c      	ite	eq
 8016c52:	2301      	moveq	r3, #1
 8016c54:	2300      	movne	r3, #0
 8016c56:	b2db      	uxtb	r3, r3
 8016c58:	461a      	mov	r2, r3
 8016c5a:	79fb      	ldrb	r3, [r7, #7]
 8016c5c:	429a      	cmp	r2, r3
 8016c5e:	d091      	beq.n	8016b84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016c60:	2300      	movs	r3, #0
}
 8016c62:	4618      	mov	r0, r3
 8016c64:	3710      	adds	r7, #16
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bd80      	pop	{r7, pc}

08016c6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016c6a:	b480      	push	{r7}
 8016c6c:	b083      	sub	sp, #12
 8016c6e:	af00      	add	r7, sp, #0
 8016c70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	681a      	ldr	r2, [r3, #0]
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8016c80:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	689a      	ldr	r2, [r3, #8]
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	f022 0201 	bic.w	r2, r2, #1
 8016c90:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c96:	2b01      	cmp	r3, #1
 8016c98:	d107      	bne.n	8016caa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	681a      	ldr	r2, [r3, #0]
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	f022 0210 	bic.w	r2, r2, #16
 8016ca8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	2220      	movs	r2, #32
 8016cae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	2200      	movs	r2, #0
 8016cba:	665a      	str	r2, [r3, #100]	; 0x64
}
 8016cbc:	bf00      	nop
 8016cbe:	370c      	adds	r7, #12
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc6:	4770      	bx	lr

08016cc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b084      	sub	sp, #16
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	2200      	movs	r2, #0
 8016cda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016ce6:	68f8      	ldr	r0, [r7, #12]
 8016ce8:	f7ff fbf6 	bl	80164d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016cec:	bf00      	nop
 8016cee:	3710      	adds	r7, #16
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	bd80      	pop	{r7, pc}

08016cf4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b082      	sub	sp, #8
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	681a      	ldr	r2, [r3, #0]
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016d0a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	2220      	movs	r2, #32
 8016d10:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	2200      	movs	r2, #0
 8016d16:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8016d18:	6878      	ldr	r0, [r7, #4]
 8016d1a:	f7ff fbd3 	bl	80164c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016d1e:	bf00      	nop
 8016d20:	3708      	adds	r7, #8
 8016d22:	46bd      	mov	sp, r7
 8016d24:	bd80      	pop	{r7, pc}

08016d26 <_ZdlPv>:
 8016d26:	f000 bb8b 	b.w	8017440 <free>

08016d2a <_ZdlPvj>:
 8016d2a:	f7ff bffc 	b.w	8016d26 <_ZdlPv>

08016d2e <_Znwj>:
 8016d2e:	2801      	cmp	r0, #1
 8016d30:	bf38      	it	cc
 8016d32:	2001      	movcc	r0, #1
 8016d34:	b510      	push	{r4, lr}
 8016d36:	4604      	mov	r4, r0
 8016d38:	4620      	mov	r0, r4
 8016d3a:	f000 fb79 	bl	8017430 <malloc>
 8016d3e:	b930      	cbnz	r0, 8016d4e <_Znwj+0x20>
 8016d40:	f000 fb0a 	bl	8017358 <_ZSt15get_new_handlerv>
 8016d44:	b908      	cbnz	r0, 8016d4a <_Znwj+0x1c>
 8016d46:	f000 fb0f 	bl	8017368 <abort>
 8016d4a:	4780      	blx	r0
 8016d4c:	e7f4      	b.n	8016d38 <_Znwj+0xa>
 8016d4e:	bd10      	pop	{r4, pc}

08016d50 <_ZNSaIcEC1Ev>:
 8016d50:	4770      	bx	lr

08016d52 <_ZNSaIcED1Ev>:
 8016d52:	4770      	bx	lr

08016d54 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8016d54:	68c3      	ldr	r3, [r0, #12]
 8016d56:	689a      	ldr	r2, [r3, #8]
 8016d58:	60c2      	str	r2, [r0, #12]
 8016d5a:	b510      	push	{r4, lr}
 8016d5c:	b102      	cbz	r2, 8016d60 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8016d5e:	6050      	str	r0, [r2, #4]
 8016d60:	6842      	ldr	r2, [r0, #4]
 8016d62:	605a      	str	r2, [r3, #4]
 8016d64:	680c      	ldr	r4, [r1, #0]
 8016d66:	4284      	cmp	r4, r0
 8016d68:	d103      	bne.n	8016d72 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8016d6a:	600b      	str	r3, [r1, #0]
 8016d6c:	6098      	str	r0, [r3, #8]
 8016d6e:	6043      	str	r3, [r0, #4]
 8016d70:	bd10      	pop	{r4, pc}
 8016d72:	6891      	ldr	r1, [r2, #8]
 8016d74:	4281      	cmp	r1, r0
 8016d76:	bf0c      	ite	eq
 8016d78:	6093      	streq	r3, [r2, #8]
 8016d7a:	60d3      	strne	r3, [r2, #12]
 8016d7c:	e7f6      	b.n	8016d6c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08016d7e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8016d7e:	6883      	ldr	r3, [r0, #8]
 8016d80:	68da      	ldr	r2, [r3, #12]
 8016d82:	6082      	str	r2, [r0, #8]
 8016d84:	b510      	push	{r4, lr}
 8016d86:	b102      	cbz	r2, 8016d8a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8016d88:	6050      	str	r0, [r2, #4]
 8016d8a:	6842      	ldr	r2, [r0, #4]
 8016d8c:	605a      	str	r2, [r3, #4]
 8016d8e:	680c      	ldr	r4, [r1, #0]
 8016d90:	4284      	cmp	r4, r0
 8016d92:	d103      	bne.n	8016d9c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8016d94:	600b      	str	r3, [r1, #0]
 8016d96:	60d8      	str	r0, [r3, #12]
 8016d98:	6043      	str	r3, [r0, #4]
 8016d9a:	bd10      	pop	{r4, pc}
 8016d9c:	68d1      	ldr	r1, [r2, #12]
 8016d9e:	4281      	cmp	r1, r0
 8016da0:	bf0c      	ite	eq
 8016da2:	60d3      	streq	r3, [r2, #12]
 8016da4:	6093      	strne	r3, [r2, #8]
 8016da6:	e7f6      	b.n	8016d96 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08016da8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8016da8:	7803      	ldrb	r3, [r0, #0]
 8016daa:	b933      	cbnz	r3, 8016dba <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8016dac:	6843      	ldr	r3, [r0, #4]
 8016dae:	685b      	ldr	r3, [r3, #4]
 8016db0:	4283      	cmp	r3, r0
 8016db2:	d102      	bne.n	8016dba <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8016db4:	68db      	ldr	r3, [r3, #12]
 8016db6:	4618      	mov	r0, r3
 8016db8:	4770      	bx	lr
 8016dba:	6882      	ldr	r2, [r0, #8]
 8016dbc:	b122      	cbz	r2, 8016dc8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8016dbe:	4613      	mov	r3, r2
 8016dc0:	68d2      	ldr	r2, [r2, #12]
 8016dc2:	2a00      	cmp	r2, #0
 8016dc4:	d1fb      	bne.n	8016dbe <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8016dc6:	e7f6      	b.n	8016db6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8016dc8:	6843      	ldr	r3, [r0, #4]
 8016dca:	689a      	ldr	r2, [r3, #8]
 8016dcc:	4282      	cmp	r2, r0
 8016dce:	d1f2      	bne.n	8016db6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	685b      	ldr	r3, [r3, #4]
 8016dd4:	e7f9      	b.n	8016dca <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08016dd6 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8016dd6:	68c3      	ldr	r3, [r0, #12]
 8016dd8:	b123      	cbz	r3, 8016de4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8016dda:	4618      	mov	r0, r3
 8016ddc:	689b      	ldr	r3, [r3, #8]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d1fb      	bne.n	8016dda <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8016de2:	4770      	bx	lr
 8016de4:	6843      	ldr	r3, [r0, #4]
 8016de6:	68da      	ldr	r2, [r3, #12]
 8016de8:	4282      	cmp	r2, r0
 8016dea:	d102      	bne.n	8016df2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8016dec:	4618      	mov	r0, r3
 8016dee:	685b      	ldr	r3, [r3, #4]
 8016df0:	e7f9      	b.n	8016de6 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 8016df2:	68c2      	ldr	r2, [r0, #12]
 8016df4:	4293      	cmp	r3, r2
 8016df6:	bf18      	it	ne
 8016df8:	4618      	movne	r0, r3
 8016dfa:	4770      	bx	lr

08016dfc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8016dfc:	f7ff bfd4 	b.w	8016da8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08016e00 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8016e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e04:	461e      	mov	r6, r3
 8016e06:	f103 0804 	add.w	r8, r3, #4
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8016e10:	460c      	mov	r4, r1
 8016e12:	604a      	str	r2, [r1, #4]
 8016e14:	700b      	strb	r3, [r1, #0]
 8016e16:	b300      	cbz	r0, 8016e5a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8016e18:	4296      	cmp	r6, r2
 8016e1a:	6091      	str	r1, [r2, #8]
 8016e1c:	d118      	bne.n	8016e50 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8016e1e:	6071      	str	r1, [r6, #4]
 8016e20:	60f4      	str	r4, [r6, #12]
 8016e22:	2701      	movs	r7, #1
 8016e24:	f04f 0900 	mov.w	r9, #0
 8016e28:	6873      	ldr	r3, [r6, #4]
 8016e2a:	42a3      	cmp	r3, r4
 8016e2c:	d03f      	beq.n	8016eae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8016e2e:	6860      	ldr	r0, [r4, #4]
 8016e30:	7802      	ldrb	r2, [r0, #0]
 8016e32:	2a00      	cmp	r2, #0
 8016e34:	d13c      	bne.n	8016eb0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 8016e36:	6845      	ldr	r5, [r0, #4]
 8016e38:	68ab      	ldr	r3, [r5, #8]
 8016e3a:	4298      	cmp	r0, r3
 8016e3c:	d123      	bne.n	8016e86 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8016e3e:	68eb      	ldr	r3, [r5, #12]
 8016e40:	b183      	cbz	r3, 8016e64 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8016e42:	781a      	ldrb	r2, [r3, #0]
 8016e44:	b972      	cbnz	r2, 8016e64 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8016e46:	7007      	strb	r7, [r0, #0]
 8016e48:	701f      	strb	r7, [r3, #0]
 8016e4a:	702a      	strb	r2, [r5, #0]
 8016e4c:	462c      	mov	r4, r5
 8016e4e:	e7eb      	b.n	8016e28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8016e50:	68b3      	ldr	r3, [r6, #8]
 8016e52:	4293      	cmp	r3, r2
 8016e54:	d1e5      	bne.n	8016e22 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8016e56:	60b1      	str	r1, [r6, #8]
 8016e58:	e7e3      	b.n	8016e22 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8016e5a:	60d1      	str	r1, [r2, #12]
 8016e5c:	68f3      	ldr	r3, [r6, #12]
 8016e5e:	4293      	cmp	r3, r2
 8016e60:	d1df      	bne.n	8016e22 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8016e62:	e7dd      	b.n	8016e20 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8016e64:	68c3      	ldr	r3, [r0, #12]
 8016e66:	42a3      	cmp	r3, r4
 8016e68:	d103      	bne.n	8016e72 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8016e6a:	4641      	mov	r1, r8
 8016e6c:	f7ff ff72 	bl	8016d54 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8016e70:	4604      	mov	r4, r0
 8016e72:	6863      	ldr	r3, [r4, #4]
 8016e74:	4641      	mov	r1, r8
 8016e76:	701f      	strb	r7, [r3, #0]
 8016e78:	4628      	mov	r0, r5
 8016e7a:	f885 9000 	strb.w	r9, [r5]
 8016e7e:	f7ff ff7e 	bl	8016d7e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8016e82:	4625      	mov	r5, r4
 8016e84:	e7e2      	b.n	8016e4c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8016e86:	b113      	cbz	r3, 8016e8e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8016e88:	781a      	ldrb	r2, [r3, #0]
 8016e8a:	2a00      	cmp	r2, #0
 8016e8c:	d0db      	beq.n	8016e46 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8016e8e:	6883      	ldr	r3, [r0, #8]
 8016e90:	42a3      	cmp	r3, r4
 8016e92:	d103      	bne.n	8016e9c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8016e94:	4641      	mov	r1, r8
 8016e96:	f7ff ff72 	bl	8016d7e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8016e9a:	4604      	mov	r4, r0
 8016e9c:	6863      	ldr	r3, [r4, #4]
 8016e9e:	4641      	mov	r1, r8
 8016ea0:	701f      	strb	r7, [r3, #0]
 8016ea2:	4628      	mov	r0, r5
 8016ea4:	f885 9000 	strb.w	r9, [r5]
 8016ea8:	f7ff ff54 	bl	8016d54 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8016eac:	e7e9      	b.n	8016e82 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8016eae:	4623      	mov	r3, r4
 8016eb0:	2201      	movs	r2, #1
 8016eb2:	701a      	strb	r2, [r3, #0]
 8016eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016eb8 <_ZSt17__throw_bad_allocv>:
 8016eb8:	b508      	push	{r3, lr}
 8016eba:	f000 fa55 	bl	8017368 <abort>

08016ebe <_ZSt19__throw_logic_errorPKc>:
 8016ebe:	b508      	push	{r3, lr}
 8016ec0:	f000 fa52 	bl	8017368 <abort>

08016ec4 <_ZSt24__throw_invalid_argumentPKc>:
 8016ec4:	b508      	push	{r3, lr}
 8016ec6:	f000 fa4f 	bl	8017368 <abort>

08016eca <_ZSt20__throw_length_errorPKc>:
 8016eca:	b508      	push	{r3, lr}
 8016ecc:	f000 fa4c 	bl	8017368 <abort>

08016ed0 <_ZSt20__throw_out_of_rangePKc>:
 8016ed0:	b508      	push	{r3, lr}
 8016ed2:	f000 fa49 	bl	8017368 <abort>

08016ed6 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8016ed6:	b10a      	cbz	r2, 8016edc <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8016ed8:	f000 baba 	b.w	8017450 <memcmp>
 8016edc:	4610      	mov	r0, r2
 8016ede:	4770      	bx	lr

08016ee0 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8016ee0:	b10a      	cbz	r2, 8016ee6 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8016ee2:	f000 bac3 	b.w	801746c <memcpy>
 8016ee6:	4770      	bx	lr

08016ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8016ee8:	6001      	str	r1, [r0, #0]
 8016eea:	4770      	bx	lr

08016eec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8016eec:	6800      	ldr	r0, [r0, #0]
 8016eee:	4770      	bx	lr

08016ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8016ef0:	3008      	adds	r0, #8
 8016ef2:	4770      	bx	lr

08016ef4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8016ef4:	6081      	str	r1, [r0, #8]
 8016ef6:	4770      	bx	lr

08016ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8016ef8:	6803      	ldr	r3, [r0, #0]
 8016efa:	6041      	str	r1, [r0, #4]
 8016efc:	2200      	movs	r2, #0
 8016efe:	545a      	strb	r2, [r3, r1]
 8016f00:	4770      	bx	lr
	...

08016f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8016f04:	b508      	push	{r3, lr}
 8016f06:	680b      	ldr	r3, [r1, #0]
 8016f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016f0c:	d302      	bcc.n	8016f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8016f0e:	480d      	ldr	r0, [pc, #52]	; (8016f44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8016f10:	f7ff ffdb 	bl	8016eca <_ZSt20__throw_length_errorPKc>
 8016f14:	4293      	cmp	r3, r2
 8016f16:	d90b      	bls.n	8016f30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8016f18:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8016f1c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8016f20:	d206      	bcs.n	8016f30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8016f22:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8016f26:	bf2a      	itet	cs
 8016f28:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8016f2c:	6008      	strcc	r0, [r1, #0]
 8016f2e:	600b      	strcs	r3, [r1, #0]
 8016f30:	6808      	ldr	r0, [r1, #0]
 8016f32:	3001      	adds	r0, #1
 8016f34:	d501      	bpl.n	8016f3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8016f36:	f7ff ffbf 	bl	8016eb8 <_ZSt17__throw_bad_allocv>
 8016f3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016f3e:	f7ff bef6 	b.w	8016d2e <_Znwj>
 8016f42:	bf00      	nop
 8016f44:	0801aafc 	.word	0x0801aafc

08016f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8016f48:	f850 3b08 	ldr.w	r3, [r0], #8
 8016f4c:	4283      	cmp	r3, r0
 8016f4e:	d002      	beq.n	8016f56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8016f50:	4618      	mov	r0, r3
 8016f52:	f7ff bee8 	b.w	8016d26 <_ZdlPv>
 8016f56:	4770      	bx	lr

08016f58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8016f58:	6840      	ldr	r0, [r0, #4]
 8016f5a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8016f5e:	3901      	subs	r1, #1
 8016f60:	1a09      	subs	r1, r1, r0
 8016f62:	4291      	cmp	r1, r2
 8016f64:	b508      	push	{r3, lr}
 8016f66:	d202      	bcs.n	8016f6e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8016f68:	4618      	mov	r0, r3
 8016f6a:	f7ff ffae 	bl	8016eca <_ZSt20__throw_length_errorPKc>
 8016f6e:	bd08      	pop	{r3, pc}

08016f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8016f70:	2a01      	cmp	r2, #1
 8016f72:	b510      	push	{r4, lr}
 8016f74:	d102      	bne.n	8016f7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8016f76:	780a      	ldrb	r2, [r1, #0]
 8016f78:	7002      	strb	r2, [r0, #0]
 8016f7a:	bd10      	pop	{r4, pc}
 8016f7c:	f7ff ffb0 	bl	8016ee0 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8016f80:	e7fb      	b.n	8016f7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08016f82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8016f82:	2a01      	cmp	r2, #1
 8016f84:	b430      	push	{r4, r5}
 8016f86:	d103      	bne.n	8016f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8016f88:	780b      	ldrb	r3, [r1, #0]
 8016f8a:	7003      	strb	r3, [r0, #0]
 8016f8c:	bc30      	pop	{r4, r5}
 8016f8e:	4770      	bx	lr
 8016f90:	2a00      	cmp	r2, #0
 8016f92:	d0fb      	beq.n	8016f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8016f94:	bc30      	pop	{r4, r5}
 8016f96:	f000 ba77 	b.w	8017488 <memmove>

08016f9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8016f9a:	b508      	push	{r3, lr}
 8016f9c:	1a52      	subs	r2, r2, r1
 8016f9e:	f7ff ffe7 	bl	8016f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016fa2:	bd08      	pop	{r3, pc}

08016fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8016fa4:	b508      	push	{r3, lr}
 8016fa6:	1a52      	subs	r2, r2, r1
 8016fa8:	f7ff ffe2 	bl	8016f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016fac:	bd08      	pop	{r3, pc}

08016fae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8016fae:	4288      	cmp	r0, r1
 8016fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016fb2:	4604      	mov	r4, r0
 8016fb4:	460e      	mov	r6, r1
 8016fb6:	d01e      	beq.n	8016ff6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 8016fb8:	4603      	mov	r3, r0
 8016fba:	684d      	ldr	r5, [r1, #4]
 8016fbc:	f853 2b08 	ldr.w	r2, [r3], #8
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	bf14      	ite	ne
 8016fc4:	6882      	ldrne	r2, [r0, #8]
 8016fc6:	220f      	moveq	r2, #15
 8016fc8:	42aa      	cmp	r2, r5
 8016fca:	d20a      	bcs.n	8016fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8016fcc:	a901      	add	r1, sp, #4
 8016fce:	9501      	str	r5, [sp, #4]
 8016fd0:	f7ff ff98 	bl	8016f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8016fd4:	4607      	mov	r7, r0
 8016fd6:	4620      	mov	r0, r4
 8016fd8:	f7ff ffb6 	bl	8016f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8016fdc:	9b01      	ldr	r3, [sp, #4]
 8016fde:	6027      	str	r7, [r4, #0]
 8016fe0:	60a3      	str	r3, [r4, #8]
 8016fe2:	b125      	cbz	r5, 8016fee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 8016fe4:	6831      	ldr	r1, [r6, #0]
 8016fe6:	6820      	ldr	r0, [r4, #0]
 8016fe8:	462a      	mov	r2, r5
 8016fea:	f7ff ffc1 	bl	8016f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016fee:	6823      	ldr	r3, [r4, #0]
 8016ff0:	6065      	str	r5, [r4, #4]
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	555a      	strb	r2, [r3, r5]
 8016ff6:	b003      	add	sp, #12
 8016ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8016ffa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016ffe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017000:	461f      	mov	r7, r3
 8017002:	6843      	ldr	r3, [r0, #4]
 8017004:	eb01 0802 	add.w	r8, r1, r2
 8017008:	1ab2      	subs	r2, r6, r2
 801700a:	441a      	add	r2, r3
 801700c:	eba3 0908 	sub.w	r9, r3, r8
 8017010:	4603      	mov	r3, r0
 8017012:	9201      	str	r2, [sp, #4]
 8017014:	f853 2b08 	ldr.w	r2, [r3], #8
 8017018:	429a      	cmp	r2, r3
 801701a:	bf18      	it	ne
 801701c:	6882      	ldrne	r2, [r0, #8]
 801701e:	460d      	mov	r5, r1
 8017020:	bf08      	it	eq
 8017022:	220f      	moveq	r2, #15
 8017024:	a901      	add	r1, sp, #4
 8017026:	4604      	mov	r4, r0
 8017028:	f7ff ff6c 	bl	8016f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801702c:	4682      	mov	sl, r0
 801702e:	b11d      	cbz	r5, 8017038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8017030:	6821      	ldr	r1, [r4, #0]
 8017032:	462a      	mov	r2, r5
 8017034:	f7ff ff9c 	bl	8016f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8017038:	b137      	cbz	r7, 8017048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 801703a:	b12e      	cbz	r6, 8017048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 801703c:	4632      	mov	r2, r6
 801703e:	4639      	mov	r1, r7
 8017040:	eb0a 0005 	add.w	r0, sl, r5
 8017044:	f7ff ff94 	bl	8016f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8017048:	f1b9 0f00 	cmp.w	r9, #0
 801704c:	d007      	beq.n	801705e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 801704e:	6821      	ldr	r1, [r4, #0]
 8017050:	4435      	add	r5, r6
 8017052:	464a      	mov	r2, r9
 8017054:	4441      	add	r1, r8
 8017056:	eb0a 0005 	add.w	r0, sl, r5
 801705a:	f7ff ff89 	bl	8016f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801705e:	4620      	mov	r0, r4
 8017060:	f7ff ff72 	bl	8016f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8017064:	9b01      	ldr	r3, [sp, #4]
 8017066:	f8c4 a000 	str.w	sl, [r4]
 801706a:	60a3      	str	r3, [r4, #8]
 801706c:	b002      	add	sp, #8
 801706e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 8017072:	b538      	push	{r3, r4, r5, lr}
 8017074:	4604      	mov	r4, r0
 8017076:	4615      	mov	r5, r2
 8017078:	4608      	mov	r0, r1
 801707a:	4411      	add	r1, r2
 801707c:	6862      	ldr	r2, [r4, #4]
 801707e:	1a52      	subs	r2, r2, r1
 8017080:	d005      	beq.n	801708e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8017082:	b125      	cbz	r5, 801708e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8017084:	6823      	ldr	r3, [r4, #0]
 8017086:	4419      	add	r1, r3
 8017088:	4418      	add	r0, r3
 801708a:	f7ff ff7a 	bl	8016f82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801708e:	6862      	ldr	r2, [r4, #4]
 8017090:	6823      	ldr	r3, [r4, #0]
 8017092:	1b55      	subs	r5, r2, r5
 8017094:	2200      	movs	r2, #0
 8017096:	6065      	str	r5, [r4, #4]
 8017098:	555a      	strb	r2, [r3, r5]
 801709a:	bd38      	pop	{r3, r4, r5, pc}

0801709c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801709c:	f100 0208 	add.w	r2, r0, #8
 80170a0:	6002      	str	r2, [r0, #0]
 80170a2:	2200      	movs	r2, #0
 80170a4:	6042      	str	r2, [r0, #4]
 80170a6:	7202      	strb	r2, [r0, #8]
 80170a8:	4770      	bx	lr

080170aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 80170aa:	b570      	push	{r4, r5, r6, lr}
 80170ac:	4604      	mov	r4, r0
 80170ae:	460e      	mov	r6, r1
 80170b0:	3008      	adds	r0, #8
 80170b2:	6020      	str	r0, [r4, #0]
 80170b4:	f856 3b08 	ldr.w	r3, [r6], #8
 80170b8:	429e      	cmp	r6, r3
 80170ba:	460d      	mov	r5, r1
 80170bc:	d10b      	bne.n	80170d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 80170be:	2210      	movs	r2, #16
 80170c0:	4631      	mov	r1, r6
 80170c2:	f7ff ff0d 	bl	8016ee0 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80170c6:	686b      	ldr	r3, [r5, #4]
 80170c8:	6063      	str	r3, [r4, #4]
 80170ca:	2300      	movs	r3, #0
 80170cc:	602e      	str	r6, [r5, #0]
 80170ce:	606b      	str	r3, [r5, #4]
 80170d0:	722b      	strb	r3, [r5, #8]
 80170d2:	4620      	mov	r0, r4
 80170d4:	bd70      	pop	{r4, r5, r6, pc}
 80170d6:	6023      	str	r3, [r4, #0]
 80170d8:	688b      	ldr	r3, [r1, #8]
 80170da:	60a3      	str	r3, [r4, #8]
 80170dc:	e7f3      	b.n	80170c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

080170de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80170de:	b510      	push	{r4, lr}
 80170e0:	4604      	mov	r4, r0
 80170e2:	f7ff ff31 	bl	8016f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80170e6:	4620      	mov	r0, r4
 80170e8:	bd10      	pop	{r4, pc}

080170ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 80170ea:	b510      	push	{r4, lr}
 80170ec:	4604      	mov	r4, r0
 80170ee:	f7ff ff5e 	bl	8016fae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80170f2:	4620      	mov	r0, r4
 80170f4:	bd10      	pop	{r4, pc}

080170f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80170f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170f8:	460d      	mov	r5, r1
 80170fa:	f851 3b08 	ldr.w	r3, [r1], #8
 80170fe:	686a      	ldr	r2, [r5, #4]
 8017100:	4299      	cmp	r1, r3
 8017102:	4604      	mov	r4, r0
 8017104:	6800      	ldr	r0, [r0, #0]
 8017106:	d10d      	bne.n	8017124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8017108:	b10a      	cbz	r2, 801710e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 801710a:	f7ff ff31 	bl	8016f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801710e:	686b      	ldr	r3, [r5, #4]
 8017110:	6822      	ldr	r2, [r4, #0]
 8017112:	6063      	str	r3, [r4, #4]
 8017114:	2100      	movs	r1, #0
 8017116:	54d1      	strb	r1, [r2, r3]
 8017118:	682a      	ldr	r2, [r5, #0]
 801711a:	2300      	movs	r3, #0
 801711c:	606b      	str	r3, [r5, #4]
 801711e:	7013      	strb	r3, [r2, #0]
 8017120:	4620      	mov	r0, r4
 8017122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017124:	e9c4 3200 	strd	r3, r2, [r4]
 8017128:	f104 0708 	add.w	r7, r4, #8
 801712c:	42b8      	cmp	r0, r7
 801712e:	68ab      	ldr	r3, [r5, #8]
 8017130:	bf18      	it	ne
 8017132:	68a6      	ldrne	r6, [r4, #8]
 8017134:	60a3      	str	r3, [r4, #8]
 8017136:	bf08      	it	eq
 8017138:	2000      	moveq	r0, #0
 801713a:	b110      	cbz	r0, 8017142 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 801713c:	6028      	str	r0, [r5, #0]
 801713e:	60ae      	str	r6, [r5, #8]
 8017140:	e7ea      	b.n	8017118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 8017142:	6029      	str	r1, [r5, #0]
 8017144:	e7e8      	b.n	8017118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

08017146 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8017146:	6840      	ldr	r0, [r0, #4]
 8017148:	4770      	bx	lr

0801714a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 801714a:	6840      	ldr	r0, [r0, #4]
 801714c:	4770      	bx	lr

0801714e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 801714e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017150:	4605      	mov	r5, r0
 8017152:	6843      	ldr	r3, [r0, #4]
 8017154:	4299      	cmp	r1, r3
 8017156:	bf2c      	ite	cs
 8017158:	9101      	strcs	r1, [sp, #4]
 801715a:	9301      	strcc	r3, [sp, #4]
 801715c:	f855 1b08 	ldr.w	r1, [r5], #8
 8017160:	428d      	cmp	r5, r1
 8017162:	bf18      	it	ne
 8017164:	6882      	ldrne	r2, [r0, #8]
 8017166:	4604      	mov	r4, r0
 8017168:	9801      	ldr	r0, [sp, #4]
 801716a:	bf08      	it	eq
 801716c:	220f      	moveq	r2, #15
 801716e:	4290      	cmp	r0, r2
 8017170:	d012      	beq.n	8017198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
 8017172:	d801      	bhi.n	8017178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x2a>
 8017174:	280f      	cmp	r0, #15
 8017176:	d911      	bls.n	801719c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4e>
 8017178:	a901      	add	r1, sp, #4
 801717a:	4620      	mov	r0, r4
 801717c:	f7ff fec2 	bl	8016f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8017180:	6862      	ldr	r2, [r4, #4]
 8017182:	6821      	ldr	r1, [r4, #0]
 8017184:	3201      	adds	r2, #1
 8017186:	4605      	mov	r5, r0
 8017188:	f7ff fef2 	bl	8016f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801718c:	4620      	mov	r0, r4
 801718e:	f7ff fedb 	bl	8016f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8017192:	9b01      	ldr	r3, [sp, #4]
 8017194:	6025      	str	r5, [r4, #0]
 8017196:	60a3      	str	r3, [r4, #8]
 8017198:	b003      	add	sp, #12
 801719a:	bd30      	pop	{r4, r5, pc}
 801719c:	428d      	cmp	r5, r1
 801719e:	d0fb      	beq.n	8017198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
 80171a0:	1c5a      	adds	r2, r3, #1
 80171a2:	4628      	mov	r0, r5
 80171a4:	f7ff fee4 	bl	8016f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80171a8:	6820      	ldr	r0, [r4, #0]
 80171aa:	f7ff fdbc 	bl	8016d26 <_ZdlPv>
 80171ae:	6025      	str	r5, [r4, #0]
 80171b0:	e7f2      	b.n	8017198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>

080171b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>:
 80171b2:	6843      	ldr	r3, [r0, #4]
 80171b4:	6800      	ldr	r0, [r0, #0]
 80171b6:	3b01      	subs	r3, #1
 80171b8:	4418      	add	r0, r3
 80171ba:	4770      	bx	lr

080171bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80171bc:	4603      	mov	r3, r0
 80171be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80171c0:	f853 2b08 	ldr.w	r2, [r3], #8
 80171c4:	6846      	ldr	r6, [r0, #4]
 80171c6:	429a      	cmp	r2, r3
 80171c8:	bf18      	it	ne
 80171ca:	6883      	ldrne	r3, [r0, #8]
 80171cc:	f106 0501 	add.w	r5, r6, #1
 80171d0:	bf08      	it	eq
 80171d2:	230f      	moveq	r3, #15
 80171d4:	429d      	cmp	r5, r3
 80171d6:	4604      	mov	r4, r0
 80171d8:	460f      	mov	r7, r1
 80171da:	d906      	bls.n	80171ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 80171dc:	2301      	movs	r3, #1
 80171de:	9300      	str	r3, [sp, #0]
 80171e0:	2300      	movs	r3, #0
 80171e2:	461a      	mov	r2, r3
 80171e4:	4631      	mov	r1, r6
 80171e6:	f7ff ff08 	bl	8016ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80171ea:	6823      	ldr	r3, [r4, #0]
 80171ec:	559f      	strb	r7, [r3, r6]
 80171ee:	6823      	ldr	r3, [r4, #0]
 80171f0:	6065      	str	r5, [r4, #4]
 80171f2:	2200      	movs	r2, #0
 80171f4:	555a      	strb	r2, [r3, r5]
 80171f6:	b003      	add	sp, #12
 80171f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080171fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>:
 80171fa:	b508      	push	{r3, lr}
 80171fc:	6841      	ldr	r1, [r0, #4]
 80171fe:	2201      	movs	r2, #1
 8017200:	3901      	subs	r1, #1
 8017202:	f7ff ff36 	bl	8017072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 8017206:	bd08      	pop	{r3, pc}

08017208 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8017208:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801720a:	4604      	mov	r4, r0
 801720c:	4623      	mov	r3, r4
 801720e:	6840      	ldr	r0, [r0, #4]
 8017210:	f853 6b08 	ldr.w	r6, [r3], #8
 8017214:	429e      	cmp	r6, r3
 8017216:	bf18      	it	ne
 8017218:	68a3      	ldrne	r3, [r4, #8]
 801721a:	eb00 0502 	add.w	r5, r0, r2
 801721e:	bf08      	it	eq
 8017220:	230f      	moveq	r3, #15
 8017222:	429d      	cmp	r5, r3
 8017224:	d80a      	bhi.n	801723c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8017226:	b112      	cbz	r2, 801722e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8017228:	4430      	add	r0, r6
 801722a:	f7ff fea1 	bl	8016f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801722e:	6823      	ldr	r3, [r4, #0]
 8017230:	6065      	str	r5, [r4, #4]
 8017232:	2200      	movs	r2, #0
 8017234:	4620      	mov	r0, r4
 8017236:	555a      	strb	r2, [r3, r5]
 8017238:	b002      	add	sp, #8
 801723a:	bd70      	pop	{r4, r5, r6, pc}
 801723c:	9200      	str	r2, [sp, #0]
 801723e:	460b      	mov	r3, r1
 8017240:	2200      	movs	r2, #0
 8017242:	4601      	mov	r1, r0
 8017244:	4620      	mov	r0, r4
 8017246:	f7ff fed8 	bl	8016ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801724a:	e7f0      	b.n	801722e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0801724c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 801724c:	b508      	push	{r3, lr}
 801724e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8017252:	f7ff ffd9 	bl	8017208 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8017256:	bd08      	pop	{r3, pc}

08017258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8017258:	b570      	push	{r4, r5, r6, lr}
 801725a:	4b06      	ldr	r3, [pc, #24]	; (8017274 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 801725c:	4604      	mov	r4, r0
 801725e:	460d      	mov	r5, r1
 8017260:	4616      	mov	r6, r2
 8017262:	2100      	movs	r1, #0
 8017264:	f7ff fe78 	bl	8016f58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8017268:	4632      	mov	r2, r6
 801726a:	4629      	mov	r1, r5
 801726c:	4620      	mov	r0, r4
 801726e:	f7ff ffcb 	bl	8017208 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8017272:	bd70      	pop	{r4, r5, r6, pc}
 8017274:	0801ab14 	.word	0x0801ab14

08017278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8017278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801727a:	4604      	mov	r4, r0
 801727c:	4608      	mov	r0, r1
 801727e:	460d      	mov	r5, r1
 8017280:	f7e9 f816 	bl	80002b0 <strlen>
 8017284:	4b06      	ldr	r3, [pc, #24]	; (80172a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8017286:	9001      	str	r0, [sp, #4]
 8017288:	4602      	mov	r2, r0
 801728a:	2100      	movs	r1, #0
 801728c:	4620      	mov	r0, r4
 801728e:	f7ff fe63 	bl	8016f58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8017292:	9a01      	ldr	r2, [sp, #4]
 8017294:	4629      	mov	r1, r5
 8017296:	4620      	mov	r0, r4
 8017298:	f7ff ffb6 	bl	8017208 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801729c:	b003      	add	sp, #12
 801729e:	bd30      	pop	{r4, r5, pc}
 80172a0:	0801ab14 	.word	0x0801ab14

080172a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80172a4:	6800      	ldr	r0, [r0, #0]
 80172a6:	4770      	bx	lr

080172a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 80172a8:	b538      	push	{r3, r4, r5, lr}
 80172aa:	6845      	ldr	r5, [r0, #4]
 80172ac:	684c      	ldr	r4, [r1, #4]
 80172ae:	6800      	ldr	r0, [r0, #0]
 80172b0:	6809      	ldr	r1, [r1, #0]
 80172b2:	42a5      	cmp	r5, r4
 80172b4:	462a      	mov	r2, r5
 80172b6:	bf28      	it	cs
 80172b8:	4622      	movcs	r2, r4
 80172ba:	f7ff fe0c 	bl	8016ed6 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80172be:	b900      	cbnz	r0, 80172c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 80172c0:	1b28      	subs	r0, r5, r4
 80172c2:	bd38      	pop	{r3, r4, r5, pc}

080172c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 80172c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80172c6:	6846      	ldr	r6, [r0, #4]
 80172c8:	9101      	str	r1, [sp, #4]
 80172ca:	4605      	mov	r5, r0
 80172cc:	4608      	mov	r0, r1
 80172ce:	f7e8 ffef 	bl	80002b0 <strlen>
 80172d2:	4286      	cmp	r6, r0
 80172d4:	4604      	mov	r4, r0
 80172d6:	4632      	mov	r2, r6
 80172d8:	9901      	ldr	r1, [sp, #4]
 80172da:	bf28      	it	cs
 80172dc:	4602      	movcs	r2, r0
 80172de:	6828      	ldr	r0, [r5, #0]
 80172e0:	f7ff fdf9 	bl	8016ed6 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80172e4:	b900      	cbnz	r0, 80172e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 80172e6:	1b30      	subs	r0, r6, r4
 80172e8:	b002      	add	sp, #8
 80172ea:	bd70      	pop	{r4, r5, r6, pc}

080172ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80172ec:	6001      	str	r1, [r0, #0]
 80172ee:	4770      	bx	lr

080172f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80172f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80172f2:	4604      	mov	r4, r0
 80172f4:	4616      	mov	r6, r2
 80172f6:	460d      	mov	r5, r1
 80172f8:	b919      	cbnz	r1, 8017302 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80172fa:	b112      	cbz	r2, 8017302 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80172fc:	480d      	ldr	r0, [pc, #52]	; (8017334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 80172fe:	f7ff fdde 	bl	8016ebe <_ZSt19__throw_logic_errorPKc>
 8017302:	1b73      	subs	r3, r6, r5
 8017304:	2b0f      	cmp	r3, #15
 8017306:	9301      	str	r3, [sp, #4]
 8017308:	d907      	bls.n	801731a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 801730a:	2200      	movs	r2, #0
 801730c:	a901      	add	r1, sp, #4
 801730e:	4620      	mov	r0, r4
 8017310:	f7ff fdf8 	bl	8016f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8017314:	9b01      	ldr	r3, [sp, #4]
 8017316:	6020      	str	r0, [r4, #0]
 8017318:	60a3      	str	r3, [r4, #8]
 801731a:	4632      	mov	r2, r6
 801731c:	4629      	mov	r1, r5
 801731e:	6820      	ldr	r0, [r4, #0]
 8017320:	f7ff fe3b 	bl	8016f9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8017324:	9b01      	ldr	r3, [sp, #4]
 8017326:	6822      	ldr	r2, [r4, #0]
 8017328:	6063      	str	r3, [r4, #4]
 801732a:	2100      	movs	r1, #0
 801732c:	54d1      	strb	r1, [r2, r3]
 801732e:	b002      	add	sp, #8
 8017330:	bd70      	pop	{r4, r5, r6, pc}
 8017332:	bf00      	nop
 8017334:	0801ab29 	.word	0x0801ab29

08017338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8017338:	b538      	push	{r3, r4, r5, lr}
 801733a:	f100 0308 	add.w	r3, r0, #8
 801733e:	6003      	str	r3, [r0, #0]
 8017340:	e9d1 5200 	ldrd	r5, r2, [r1]
 8017344:	4604      	mov	r4, r0
 8017346:	f04f 0300 	mov.w	r3, #0
 801734a:	442a      	add	r2, r5
 801734c:	4629      	mov	r1, r5
 801734e:	f7ff ffcf 	bl	80172f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8017352:	4620      	mov	r0, r4
 8017354:	bd38      	pop	{r3, r4, r5, pc}
	...

08017358 <_ZSt15get_new_handlerv>:
 8017358:	4b02      	ldr	r3, [pc, #8]	; (8017364 <_ZSt15get_new_handlerv+0xc>)
 801735a:	6818      	ldr	r0, [r3, #0]
 801735c:	f3bf 8f5b 	dmb	ish
 8017360:	4770      	bx	lr
 8017362:	bf00      	nop
 8017364:	20000510 	.word	0x20000510

08017368 <abort>:
 8017368:	b508      	push	{r3, lr}
 801736a:	2006      	movs	r0, #6
 801736c:	f000 f990 	bl	8017690 <raise>
 8017370:	2001      	movs	r0, #1
 8017372:	f7fc ff95 	bl	80142a0 <_exit>
	...

08017378 <__errno>:
 8017378:	4b01      	ldr	r3, [pc, #4]	; (8017380 <__errno+0x8>)
 801737a:	6818      	ldr	r0, [r3, #0]
 801737c:	4770      	bx	lr
 801737e:	bf00      	nop
 8017380:	2000000c 	.word	0x2000000c

08017384 <__libc_init_array>:
 8017384:	b570      	push	{r4, r5, r6, lr}
 8017386:	4d0d      	ldr	r5, [pc, #52]	; (80173bc <__libc_init_array+0x38>)
 8017388:	4c0d      	ldr	r4, [pc, #52]	; (80173c0 <__libc_init_array+0x3c>)
 801738a:	1b64      	subs	r4, r4, r5
 801738c:	10a4      	asrs	r4, r4, #2
 801738e:	2600      	movs	r6, #0
 8017390:	42a6      	cmp	r6, r4
 8017392:	d109      	bne.n	80173a8 <__libc_init_array+0x24>
 8017394:	4d0b      	ldr	r5, [pc, #44]	; (80173c4 <__libc_init_array+0x40>)
 8017396:	4c0c      	ldr	r4, [pc, #48]	; (80173c8 <__libc_init_array+0x44>)
 8017398:	f003 f814 	bl	801a3c4 <_init>
 801739c:	1b64      	subs	r4, r4, r5
 801739e:	10a4      	asrs	r4, r4, #2
 80173a0:	2600      	movs	r6, #0
 80173a2:	42a6      	cmp	r6, r4
 80173a4:	d105      	bne.n	80173b2 <__libc_init_array+0x2e>
 80173a6:	bd70      	pop	{r4, r5, r6, pc}
 80173a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80173ac:	4798      	blx	r3
 80173ae:	3601      	adds	r6, #1
 80173b0:	e7ee      	b.n	8017390 <__libc_init_array+0xc>
 80173b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80173b6:	4798      	blx	r3
 80173b8:	3601      	adds	r6, #1
 80173ba:	e7f2      	b.n	80173a2 <__libc_init_array+0x1e>
 80173bc:	0801afbc 	.word	0x0801afbc
 80173c0:	0801afbc 	.word	0x0801afbc
 80173c4:	0801afbc 	.word	0x0801afbc
 80173c8:	0801afe4 	.word	0x0801afe4

080173cc <isalnum>:
 80173cc:	4b02      	ldr	r3, [pc, #8]	; (80173d8 <isalnum+0xc>)
 80173ce:	4418      	add	r0, r3
 80173d0:	7840      	ldrb	r0, [r0, #1]
 80173d2:	f000 0007 	and.w	r0, r0, #7
 80173d6:	4770      	bx	lr
 80173d8:	0801abdd 	.word	0x0801abdd

080173dc <isalpha>:
 80173dc:	4b02      	ldr	r3, [pc, #8]	; (80173e8 <isalpha+0xc>)
 80173de:	4418      	add	r0, r3
 80173e0:	7840      	ldrb	r0, [r0, #1]
 80173e2:	f000 0003 	and.w	r0, r0, #3
 80173e6:	4770      	bx	lr
 80173e8:	0801abdd 	.word	0x0801abdd

080173ec <isspace>:
 80173ec:	4b02      	ldr	r3, [pc, #8]	; (80173f8 <isspace+0xc>)
 80173ee:	4418      	add	r0, r3
 80173f0:	7840      	ldrb	r0, [r0, #1]
 80173f2:	f000 0008 	and.w	r0, r0, #8
 80173f6:	4770      	bx	lr
 80173f8:	0801abdd 	.word	0x0801abdd

080173fc <__itoa>:
 80173fc:	1e93      	subs	r3, r2, #2
 80173fe:	2b22      	cmp	r3, #34	; 0x22
 8017400:	b510      	push	{r4, lr}
 8017402:	460c      	mov	r4, r1
 8017404:	d904      	bls.n	8017410 <__itoa+0x14>
 8017406:	2300      	movs	r3, #0
 8017408:	700b      	strb	r3, [r1, #0]
 801740a:	461c      	mov	r4, r3
 801740c:	4620      	mov	r0, r4
 801740e:	bd10      	pop	{r4, pc}
 8017410:	2a0a      	cmp	r2, #10
 8017412:	d109      	bne.n	8017428 <__itoa+0x2c>
 8017414:	2800      	cmp	r0, #0
 8017416:	da07      	bge.n	8017428 <__itoa+0x2c>
 8017418:	232d      	movs	r3, #45	; 0x2d
 801741a:	700b      	strb	r3, [r1, #0]
 801741c:	4240      	negs	r0, r0
 801741e:	2101      	movs	r1, #1
 8017420:	4421      	add	r1, r4
 8017422:	f001 f85f 	bl	80184e4 <__utoa>
 8017426:	e7f1      	b.n	801740c <__itoa+0x10>
 8017428:	2100      	movs	r1, #0
 801742a:	e7f9      	b.n	8017420 <__itoa+0x24>

0801742c <itoa>:
 801742c:	f7ff bfe6 	b.w	80173fc <__itoa>

08017430 <malloc>:
 8017430:	4b02      	ldr	r3, [pc, #8]	; (801743c <malloc+0xc>)
 8017432:	4601      	mov	r1, r0
 8017434:	6818      	ldr	r0, [r3, #0]
 8017436:	f000 b899 	b.w	801756c <_malloc_r>
 801743a:	bf00      	nop
 801743c:	2000000c 	.word	0x2000000c

08017440 <free>:
 8017440:	4b02      	ldr	r3, [pc, #8]	; (801744c <free+0xc>)
 8017442:	4601      	mov	r1, r0
 8017444:	6818      	ldr	r0, [r3, #0]
 8017446:	f000 b841 	b.w	80174cc <_free_r>
 801744a:	bf00      	nop
 801744c:	2000000c 	.word	0x2000000c

08017450 <memcmp>:
 8017450:	b530      	push	{r4, r5, lr}
 8017452:	3901      	subs	r1, #1
 8017454:	2400      	movs	r4, #0
 8017456:	42a2      	cmp	r2, r4
 8017458:	d101      	bne.n	801745e <memcmp+0xe>
 801745a:	2000      	movs	r0, #0
 801745c:	e005      	b.n	801746a <memcmp+0x1a>
 801745e:	5d03      	ldrb	r3, [r0, r4]
 8017460:	3401      	adds	r4, #1
 8017462:	5d0d      	ldrb	r5, [r1, r4]
 8017464:	42ab      	cmp	r3, r5
 8017466:	d0f6      	beq.n	8017456 <memcmp+0x6>
 8017468:	1b58      	subs	r0, r3, r5
 801746a:	bd30      	pop	{r4, r5, pc}

0801746c <memcpy>:
 801746c:	440a      	add	r2, r1
 801746e:	4291      	cmp	r1, r2
 8017470:	f100 33ff 	add.w	r3, r0, #4294967295
 8017474:	d100      	bne.n	8017478 <memcpy+0xc>
 8017476:	4770      	bx	lr
 8017478:	b510      	push	{r4, lr}
 801747a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801747e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017482:	4291      	cmp	r1, r2
 8017484:	d1f9      	bne.n	801747a <memcpy+0xe>
 8017486:	bd10      	pop	{r4, pc}

08017488 <memmove>:
 8017488:	4288      	cmp	r0, r1
 801748a:	b510      	push	{r4, lr}
 801748c:	eb01 0402 	add.w	r4, r1, r2
 8017490:	d902      	bls.n	8017498 <memmove+0x10>
 8017492:	4284      	cmp	r4, r0
 8017494:	4623      	mov	r3, r4
 8017496:	d807      	bhi.n	80174a8 <memmove+0x20>
 8017498:	1e43      	subs	r3, r0, #1
 801749a:	42a1      	cmp	r1, r4
 801749c:	d008      	beq.n	80174b0 <memmove+0x28>
 801749e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80174a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80174a6:	e7f8      	b.n	801749a <memmove+0x12>
 80174a8:	4402      	add	r2, r0
 80174aa:	4601      	mov	r1, r0
 80174ac:	428a      	cmp	r2, r1
 80174ae:	d100      	bne.n	80174b2 <memmove+0x2a>
 80174b0:	bd10      	pop	{r4, pc}
 80174b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80174b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80174ba:	e7f7      	b.n	80174ac <memmove+0x24>

080174bc <memset>:
 80174bc:	4402      	add	r2, r0
 80174be:	4603      	mov	r3, r0
 80174c0:	4293      	cmp	r3, r2
 80174c2:	d100      	bne.n	80174c6 <memset+0xa>
 80174c4:	4770      	bx	lr
 80174c6:	f803 1b01 	strb.w	r1, [r3], #1
 80174ca:	e7f9      	b.n	80174c0 <memset+0x4>

080174cc <_free_r>:
 80174cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80174ce:	2900      	cmp	r1, #0
 80174d0:	d048      	beq.n	8017564 <_free_r+0x98>
 80174d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80174d6:	9001      	str	r0, [sp, #4]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	f1a1 0404 	sub.w	r4, r1, #4
 80174de:	bfb8      	it	lt
 80174e0:	18e4      	addlt	r4, r4, r3
 80174e2:	f001 fbc3 	bl	8018c6c <__malloc_lock>
 80174e6:	4a20      	ldr	r2, [pc, #128]	; (8017568 <_free_r+0x9c>)
 80174e8:	9801      	ldr	r0, [sp, #4]
 80174ea:	6813      	ldr	r3, [r2, #0]
 80174ec:	4615      	mov	r5, r2
 80174ee:	b933      	cbnz	r3, 80174fe <_free_r+0x32>
 80174f0:	6063      	str	r3, [r4, #4]
 80174f2:	6014      	str	r4, [r2, #0]
 80174f4:	b003      	add	sp, #12
 80174f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80174fa:	f001 bbbd 	b.w	8018c78 <__malloc_unlock>
 80174fe:	42a3      	cmp	r3, r4
 8017500:	d90b      	bls.n	801751a <_free_r+0x4e>
 8017502:	6821      	ldr	r1, [r4, #0]
 8017504:	1862      	adds	r2, r4, r1
 8017506:	4293      	cmp	r3, r2
 8017508:	bf04      	itt	eq
 801750a:	681a      	ldreq	r2, [r3, #0]
 801750c:	685b      	ldreq	r3, [r3, #4]
 801750e:	6063      	str	r3, [r4, #4]
 8017510:	bf04      	itt	eq
 8017512:	1852      	addeq	r2, r2, r1
 8017514:	6022      	streq	r2, [r4, #0]
 8017516:	602c      	str	r4, [r5, #0]
 8017518:	e7ec      	b.n	80174f4 <_free_r+0x28>
 801751a:	461a      	mov	r2, r3
 801751c:	685b      	ldr	r3, [r3, #4]
 801751e:	b10b      	cbz	r3, 8017524 <_free_r+0x58>
 8017520:	42a3      	cmp	r3, r4
 8017522:	d9fa      	bls.n	801751a <_free_r+0x4e>
 8017524:	6811      	ldr	r1, [r2, #0]
 8017526:	1855      	adds	r5, r2, r1
 8017528:	42a5      	cmp	r5, r4
 801752a:	d10b      	bne.n	8017544 <_free_r+0x78>
 801752c:	6824      	ldr	r4, [r4, #0]
 801752e:	4421      	add	r1, r4
 8017530:	1854      	adds	r4, r2, r1
 8017532:	42a3      	cmp	r3, r4
 8017534:	6011      	str	r1, [r2, #0]
 8017536:	d1dd      	bne.n	80174f4 <_free_r+0x28>
 8017538:	681c      	ldr	r4, [r3, #0]
 801753a:	685b      	ldr	r3, [r3, #4]
 801753c:	6053      	str	r3, [r2, #4]
 801753e:	4421      	add	r1, r4
 8017540:	6011      	str	r1, [r2, #0]
 8017542:	e7d7      	b.n	80174f4 <_free_r+0x28>
 8017544:	d902      	bls.n	801754c <_free_r+0x80>
 8017546:	230c      	movs	r3, #12
 8017548:	6003      	str	r3, [r0, #0]
 801754a:	e7d3      	b.n	80174f4 <_free_r+0x28>
 801754c:	6825      	ldr	r5, [r4, #0]
 801754e:	1961      	adds	r1, r4, r5
 8017550:	428b      	cmp	r3, r1
 8017552:	bf04      	itt	eq
 8017554:	6819      	ldreq	r1, [r3, #0]
 8017556:	685b      	ldreq	r3, [r3, #4]
 8017558:	6063      	str	r3, [r4, #4]
 801755a:	bf04      	itt	eq
 801755c:	1949      	addeq	r1, r1, r5
 801755e:	6021      	streq	r1, [r4, #0]
 8017560:	6054      	str	r4, [r2, #4]
 8017562:	e7c7      	b.n	80174f4 <_free_r+0x28>
 8017564:	b003      	add	sp, #12
 8017566:	bd30      	pop	{r4, r5, pc}
 8017568:	20000514 	.word	0x20000514

0801756c <_malloc_r>:
 801756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801756e:	1ccd      	adds	r5, r1, #3
 8017570:	f025 0503 	bic.w	r5, r5, #3
 8017574:	3508      	adds	r5, #8
 8017576:	2d0c      	cmp	r5, #12
 8017578:	bf38      	it	cc
 801757a:	250c      	movcc	r5, #12
 801757c:	2d00      	cmp	r5, #0
 801757e:	4606      	mov	r6, r0
 8017580:	db01      	blt.n	8017586 <_malloc_r+0x1a>
 8017582:	42a9      	cmp	r1, r5
 8017584:	d903      	bls.n	801758e <_malloc_r+0x22>
 8017586:	230c      	movs	r3, #12
 8017588:	6033      	str	r3, [r6, #0]
 801758a:	2000      	movs	r0, #0
 801758c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801758e:	f001 fb6d 	bl	8018c6c <__malloc_lock>
 8017592:	4921      	ldr	r1, [pc, #132]	; (8017618 <_malloc_r+0xac>)
 8017594:	680a      	ldr	r2, [r1, #0]
 8017596:	4614      	mov	r4, r2
 8017598:	b99c      	cbnz	r4, 80175c2 <_malloc_r+0x56>
 801759a:	4f20      	ldr	r7, [pc, #128]	; (801761c <_malloc_r+0xb0>)
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	b923      	cbnz	r3, 80175aa <_malloc_r+0x3e>
 80175a0:	4621      	mov	r1, r4
 80175a2:	4630      	mov	r0, r6
 80175a4:	f000 f83c 	bl	8017620 <_sbrk_r>
 80175a8:	6038      	str	r0, [r7, #0]
 80175aa:	4629      	mov	r1, r5
 80175ac:	4630      	mov	r0, r6
 80175ae:	f000 f837 	bl	8017620 <_sbrk_r>
 80175b2:	1c43      	adds	r3, r0, #1
 80175b4:	d123      	bne.n	80175fe <_malloc_r+0x92>
 80175b6:	230c      	movs	r3, #12
 80175b8:	6033      	str	r3, [r6, #0]
 80175ba:	4630      	mov	r0, r6
 80175bc:	f001 fb5c 	bl	8018c78 <__malloc_unlock>
 80175c0:	e7e3      	b.n	801758a <_malloc_r+0x1e>
 80175c2:	6823      	ldr	r3, [r4, #0]
 80175c4:	1b5b      	subs	r3, r3, r5
 80175c6:	d417      	bmi.n	80175f8 <_malloc_r+0x8c>
 80175c8:	2b0b      	cmp	r3, #11
 80175ca:	d903      	bls.n	80175d4 <_malloc_r+0x68>
 80175cc:	6023      	str	r3, [r4, #0]
 80175ce:	441c      	add	r4, r3
 80175d0:	6025      	str	r5, [r4, #0]
 80175d2:	e004      	b.n	80175de <_malloc_r+0x72>
 80175d4:	6863      	ldr	r3, [r4, #4]
 80175d6:	42a2      	cmp	r2, r4
 80175d8:	bf0c      	ite	eq
 80175da:	600b      	streq	r3, [r1, #0]
 80175dc:	6053      	strne	r3, [r2, #4]
 80175de:	4630      	mov	r0, r6
 80175e0:	f001 fb4a 	bl	8018c78 <__malloc_unlock>
 80175e4:	f104 000b 	add.w	r0, r4, #11
 80175e8:	1d23      	adds	r3, r4, #4
 80175ea:	f020 0007 	bic.w	r0, r0, #7
 80175ee:	1ac2      	subs	r2, r0, r3
 80175f0:	d0cc      	beq.n	801758c <_malloc_r+0x20>
 80175f2:	1a1b      	subs	r3, r3, r0
 80175f4:	50a3      	str	r3, [r4, r2]
 80175f6:	e7c9      	b.n	801758c <_malloc_r+0x20>
 80175f8:	4622      	mov	r2, r4
 80175fa:	6864      	ldr	r4, [r4, #4]
 80175fc:	e7cc      	b.n	8017598 <_malloc_r+0x2c>
 80175fe:	1cc4      	adds	r4, r0, #3
 8017600:	f024 0403 	bic.w	r4, r4, #3
 8017604:	42a0      	cmp	r0, r4
 8017606:	d0e3      	beq.n	80175d0 <_malloc_r+0x64>
 8017608:	1a21      	subs	r1, r4, r0
 801760a:	4630      	mov	r0, r6
 801760c:	f000 f808 	bl	8017620 <_sbrk_r>
 8017610:	3001      	adds	r0, #1
 8017612:	d1dd      	bne.n	80175d0 <_malloc_r+0x64>
 8017614:	e7cf      	b.n	80175b6 <_malloc_r+0x4a>
 8017616:	bf00      	nop
 8017618:	20000514 	.word	0x20000514
 801761c:	20000518 	.word	0x20000518

08017620 <_sbrk_r>:
 8017620:	b538      	push	{r3, r4, r5, lr}
 8017622:	4d06      	ldr	r5, [pc, #24]	; (801763c <_sbrk_r+0x1c>)
 8017624:	2300      	movs	r3, #0
 8017626:	4604      	mov	r4, r0
 8017628:	4608      	mov	r0, r1
 801762a:	602b      	str	r3, [r5, #0]
 801762c:	f7fc feb0 	bl	8014390 <_sbrk>
 8017630:	1c43      	adds	r3, r0, #1
 8017632:	d102      	bne.n	801763a <_sbrk_r+0x1a>
 8017634:	682b      	ldr	r3, [r5, #0]
 8017636:	b103      	cbz	r3, 801763a <_sbrk_r+0x1a>
 8017638:	6023      	str	r3, [r4, #0]
 801763a:	bd38      	pop	{r3, r4, r5, pc}
 801763c:	20000520 	.word	0x20000520

08017640 <_raise_r>:
 8017640:	291f      	cmp	r1, #31
 8017642:	b538      	push	{r3, r4, r5, lr}
 8017644:	4604      	mov	r4, r0
 8017646:	460d      	mov	r5, r1
 8017648:	d904      	bls.n	8017654 <_raise_r+0x14>
 801764a:	2316      	movs	r3, #22
 801764c:	6003      	str	r3, [r0, #0]
 801764e:	f04f 30ff 	mov.w	r0, #4294967295
 8017652:	bd38      	pop	{r3, r4, r5, pc}
 8017654:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017656:	b112      	cbz	r2, 801765e <_raise_r+0x1e>
 8017658:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801765c:	b94b      	cbnz	r3, 8017672 <_raise_r+0x32>
 801765e:	4620      	mov	r0, r4
 8017660:	f000 f830 	bl	80176c4 <_getpid_r>
 8017664:	462a      	mov	r2, r5
 8017666:	4601      	mov	r1, r0
 8017668:	4620      	mov	r0, r4
 801766a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801766e:	f000 b817 	b.w	80176a0 <_kill_r>
 8017672:	2b01      	cmp	r3, #1
 8017674:	d00a      	beq.n	801768c <_raise_r+0x4c>
 8017676:	1c59      	adds	r1, r3, #1
 8017678:	d103      	bne.n	8017682 <_raise_r+0x42>
 801767a:	2316      	movs	r3, #22
 801767c:	6003      	str	r3, [r0, #0]
 801767e:	2001      	movs	r0, #1
 8017680:	e7e7      	b.n	8017652 <_raise_r+0x12>
 8017682:	2400      	movs	r4, #0
 8017684:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017688:	4628      	mov	r0, r5
 801768a:	4798      	blx	r3
 801768c:	2000      	movs	r0, #0
 801768e:	e7e0      	b.n	8017652 <_raise_r+0x12>

08017690 <raise>:
 8017690:	4b02      	ldr	r3, [pc, #8]	; (801769c <raise+0xc>)
 8017692:	4601      	mov	r1, r0
 8017694:	6818      	ldr	r0, [r3, #0]
 8017696:	f7ff bfd3 	b.w	8017640 <_raise_r>
 801769a:	bf00      	nop
 801769c:	2000000c 	.word	0x2000000c

080176a0 <_kill_r>:
 80176a0:	b538      	push	{r3, r4, r5, lr}
 80176a2:	4d07      	ldr	r5, [pc, #28]	; (80176c0 <_kill_r+0x20>)
 80176a4:	2300      	movs	r3, #0
 80176a6:	4604      	mov	r4, r0
 80176a8:	4608      	mov	r0, r1
 80176aa:	4611      	mov	r1, r2
 80176ac:	602b      	str	r3, [r5, #0]
 80176ae:	f7fc fde7 	bl	8014280 <_kill>
 80176b2:	1c43      	adds	r3, r0, #1
 80176b4:	d102      	bne.n	80176bc <_kill_r+0x1c>
 80176b6:	682b      	ldr	r3, [r5, #0]
 80176b8:	b103      	cbz	r3, 80176bc <_kill_r+0x1c>
 80176ba:	6023      	str	r3, [r4, #0]
 80176bc:	bd38      	pop	{r3, r4, r5, pc}
 80176be:	bf00      	nop
 80176c0:	20000520 	.word	0x20000520

080176c4 <_getpid_r>:
 80176c4:	f7fc bdd4 	b.w	8014270 <_getpid>

080176c8 <sulp>:
 80176c8:	b570      	push	{r4, r5, r6, lr}
 80176ca:	4604      	mov	r4, r0
 80176cc:	460d      	mov	r5, r1
 80176ce:	ec45 4b10 	vmov	d0, r4, r5
 80176d2:	4616      	mov	r6, r2
 80176d4:	f001 fe42 	bl	801935c <__ulp>
 80176d8:	ec51 0b10 	vmov	r0, r1, d0
 80176dc:	b17e      	cbz	r6, 80176fe <sulp+0x36>
 80176de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80176e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	dd09      	ble.n	80176fe <sulp+0x36>
 80176ea:	051b      	lsls	r3, r3, #20
 80176ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80176f0:	2400      	movs	r4, #0
 80176f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80176f6:	4622      	mov	r2, r4
 80176f8:	462b      	mov	r3, r5
 80176fa:	f7e8 ff9d 	bl	8000638 <__aeabi_dmul>
 80176fe:	bd70      	pop	{r4, r5, r6, pc}

08017700 <_strtod_l>:
 8017700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017704:	b0a3      	sub	sp, #140	; 0x8c
 8017706:	461f      	mov	r7, r3
 8017708:	2300      	movs	r3, #0
 801770a:	931e      	str	r3, [sp, #120]	; 0x78
 801770c:	4ba4      	ldr	r3, [pc, #656]	; (80179a0 <_strtod_l+0x2a0>)
 801770e:	9219      	str	r2, [sp, #100]	; 0x64
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	9307      	str	r3, [sp, #28]
 8017714:	4604      	mov	r4, r0
 8017716:	4618      	mov	r0, r3
 8017718:	4688      	mov	r8, r1
 801771a:	f7e8 fdc9 	bl	80002b0 <strlen>
 801771e:	f04f 0a00 	mov.w	sl, #0
 8017722:	4605      	mov	r5, r0
 8017724:	f04f 0b00 	mov.w	fp, #0
 8017728:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801772c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801772e:	781a      	ldrb	r2, [r3, #0]
 8017730:	2a2b      	cmp	r2, #43	; 0x2b
 8017732:	d04c      	beq.n	80177ce <_strtod_l+0xce>
 8017734:	d839      	bhi.n	80177aa <_strtod_l+0xaa>
 8017736:	2a0d      	cmp	r2, #13
 8017738:	d832      	bhi.n	80177a0 <_strtod_l+0xa0>
 801773a:	2a08      	cmp	r2, #8
 801773c:	d832      	bhi.n	80177a4 <_strtod_l+0xa4>
 801773e:	2a00      	cmp	r2, #0
 8017740:	d03c      	beq.n	80177bc <_strtod_l+0xbc>
 8017742:	2300      	movs	r3, #0
 8017744:	930e      	str	r3, [sp, #56]	; 0x38
 8017746:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017748:	7833      	ldrb	r3, [r6, #0]
 801774a:	2b30      	cmp	r3, #48	; 0x30
 801774c:	f040 80b4 	bne.w	80178b8 <_strtod_l+0x1b8>
 8017750:	7873      	ldrb	r3, [r6, #1]
 8017752:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017756:	2b58      	cmp	r3, #88	; 0x58
 8017758:	d16c      	bne.n	8017834 <_strtod_l+0x134>
 801775a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801775c:	9301      	str	r3, [sp, #4]
 801775e:	ab1e      	add	r3, sp, #120	; 0x78
 8017760:	9702      	str	r7, [sp, #8]
 8017762:	9300      	str	r3, [sp, #0]
 8017764:	4a8f      	ldr	r2, [pc, #572]	; (80179a4 <_strtod_l+0x2a4>)
 8017766:	ab1f      	add	r3, sp, #124	; 0x7c
 8017768:	a91d      	add	r1, sp, #116	; 0x74
 801776a:	4620      	mov	r0, r4
 801776c:	f000 ff64 	bl	8018638 <__gethex>
 8017770:	f010 0707 	ands.w	r7, r0, #7
 8017774:	4605      	mov	r5, r0
 8017776:	d005      	beq.n	8017784 <_strtod_l+0x84>
 8017778:	2f06      	cmp	r7, #6
 801777a:	d12a      	bne.n	80177d2 <_strtod_l+0xd2>
 801777c:	3601      	adds	r6, #1
 801777e:	2300      	movs	r3, #0
 8017780:	961d      	str	r6, [sp, #116]	; 0x74
 8017782:	930e      	str	r3, [sp, #56]	; 0x38
 8017784:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017786:	2b00      	cmp	r3, #0
 8017788:	f040 8596 	bne.w	80182b8 <_strtod_l+0xbb8>
 801778c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801778e:	b1db      	cbz	r3, 80177c8 <_strtod_l+0xc8>
 8017790:	4652      	mov	r2, sl
 8017792:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017796:	ec43 2b10 	vmov	d0, r2, r3
 801779a:	b023      	add	sp, #140	; 0x8c
 801779c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177a0:	2a20      	cmp	r2, #32
 80177a2:	d1ce      	bne.n	8017742 <_strtod_l+0x42>
 80177a4:	3301      	adds	r3, #1
 80177a6:	931d      	str	r3, [sp, #116]	; 0x74
 80177a8:	e7c0      	b.n	801772c <_strtod_l+0x2c>
 80177aa:	2a2d      	cmp	r2, #45	; 0x2d
 80177ac:	d1c9      	bne.n	8017742 <_strtod_l+0x42>
 80177ae:	2201      	movs	r2, #1
 80177b0:	920e      	str	r2, [sp, #56]	; 0x38
 80177b2:	1c5a      	adds	r2, r3, #1
 80177b4:	921d      	str	r2, [sp, #116]	; 0x74
 80177b6:	785b      	ldrb	r3, [r3, #1]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d1c4      	bne.n	8017746 <_strtod_l+0x46>
 80177bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80177be:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	f040 8576 	bne.w	80182b4 <_strtod_l+0xbb4>
 80177c8:	4652      	mov	r2, sl
 80177ca:	465b      	mov	r3, fp
 80177cc:	e7e3      	b.n	8017796 <_strtod_l+0x96>
 80177ce:	2200      	movs	r2, #0
 80177d0:	e7ee      	b.n	80177b0 <_strtod_l+0xb0>
 80177d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80177d4:	b13a      	cbz	r2, 80177e6 <_strtod_l+0xe6>
 80177d6:	2135      	movs	r1, #53	; 0x35
 80177d8:	a820      	add	r0, sp, #128	; 0x80
 80177da:	f001 feca 	bl	8019572 <__copybits>
 80177de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80177e0:	4620      	mov	r0, r4
 80177e2:	f001 fa8f 	bl	8018d04 <_Bfree>
 80177e6:	3f01      	subs	r7, #1
 80177e8:	2f05      	cmp	r7, #5
 80177ea:	d807      	bhi.n	80177fc <_strtod_l+0xfc>
 80177ec:	e8df f007 	tbb	[pc, r7]
 80177f0:	1d180b0e 	.word	0x1d180b0e
 80177f4:	030e      	.short	0x030e
 80177f6:	f04f 0b00 	mov.w	fp, #0
 80177fa:	46da      	mov	sl, fp
 80177fc:	0728      	lsls	r0, r5, #28
 80177fe:	d5c1      	bpl.n	8017784 <_strtod_l+0x84>
 8017800:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8017804:	e7be      	b.n	8017784 <_strtod_l+0x84>
 8017806:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801780a:	e7f7      	b.n	80177fc <_strtod_l+0xfc>
 801780c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8017810:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017812:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017816:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801781a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801781e:	e7ed      	b.n	80177fc <_strtod_l+0xfc>
 8017820:	f8df b184 	ldr.w	fp, [pc, #388]	; 80179a8 <_strtod_l+0x2a8>
 8017824:	f04f 0a00 	mov.w	sl, #0
 8017828:	e7e8      	b.n	80177fc <_strtod_l+0xfc>
 801782a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801782e:	f04f 3aff 	mov.w	sl, #4294967295
 8017832:	e7e3      	b.n	80177fc <_strtod_l+0xfc>
 8017834:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017836:	1c5a      	adds	r2, r3, #1
 8017838:	921d      	str	r2, [sp, #116]	; 0x74
 801783a:	785b      	ldrb	r3, [r3, #1]
 801783c:	2b30      	cmp	r3, #48	; 0x30
 801783e:	d0f9      	beq.n	8017834 <_strtod_l+0x134>
 8017840:	2b00      	cmp	r3, #0
 8017842:	d09f      	beq.n	8017784 <_strtod_l+0x84>
 8017844:	2301      	movs	r3, #1
 8017846:	f04f 0900 	mov.w	r9, #0
 801784a:	9304      	str	r3, [sp, #16]
 801784c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801784e:	930a      	str	r3, [sp, #40]	; 0x28
 8017850:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017854:	464f      	mov	r7, r9
 8017856:	220a      	movs	r2, #10
 8017858:	981d      	ldr	r0, [sp, #116]	; 0x74
 801785a:	7806      	ldrb	r6, [r0, #0]
 801785c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8017860:	b2d9      	uxtb	r1, r3
 8017862:	2909      	cmp	r1, #9
 8017864:	d92a      	bls.n	80178bc <_strtod_l+0x1bc>
 8017866:	9907      	ldr	r1, [sp, #28]
 8017868:	462a      	mov	r2, r5
 801786a:	f001 fee3 	bl	8019634 <strncmp>
 801786e:	b398      	cbz	r0, 80178d8 <_strtod_l+0x1d8>
 8017870:	2000      	movs	r0, #0
 8017872:	4633      	mov	r3, r6
 8017874:	463d      	mov	r5, r7
 8017876:	9007      	str	r0, [sp, #28]
 8017878:	4602      	mov	r2, r0
 801787a:	2b65      	cmp	r3, #101	; 0x65
 801787c:	d001      	beq.n	8017882 <_strtod_l+0x182>
 801787e:	2b45      	cmp	r3, #69	; 0x45
 8017880:	d118      	bne.n	80178b4 <_strtod_l+0x1b4>
 8017882:	b91d      	cbnz	r5, 801788c <_strtod_l+0x18c>
 8017884:	9b04      	ldr	r3, [sp, #16]
 8017886:	4303      	orrs	r3, r0
 8017888:	d098      	beq.n	80177bc <_strtod_l+0xbc>
 801788a:	2500      	movs	r5, #0
 801788c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8017890:	f108 0301 	add.w	r3, r8, #1
 8017894:	931d      	str	r3, [sp, #116]	; 0x74
 8017896:	f898 3001 	ldrb.w	r3, [r8, #1]
 801789a:	2b2b      	cmp	r3, #43	; 0x2b
 801789c:	d075      	beq.n	801798a <_strtod_l+0x28a>
 801789e:	2b2d      	cmp	r3, #45	; 0x2d
 80178a0:	d07b      	beq.n	801799a <_strtod_l+0x29a>
 80178a2:	f04f 0c00 	mov.w	ip, #0
 80178a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80178aa:	2909      	cmp	r1, #9
 80178ac:	f240 8082 	bls.w	80179b4 <_strtod_l+0x2b4>
 80178b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80178b4:	2600      	movs	r6, #0
 80178b6:	e09d      	b.n	80179f4 <_strtod_l+0x2f4>
 80178b8:	2300      	movs	r3, #0
 80178ba:	e7c4      	b.n	8017846 <_strtod_l+0x146>
 80178bc:	2f08      	cmp	r7, #8
 80178be:	bfd8      	it	le
 80178c0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80178c2:	f100 0001 	add.w	r0, r0, #1
 80178c6:	bfda      	itte	le
 80178c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80178cc:	9309      	strle	r3, [sp, #36]	; 0x24
 80178ce:	fb02 3909 	mlagt	r9, r2, r9, r3
 80178d2:	3701      	adds	r7, #1
 80178d4:	901d      	str	r0, [sp, #116]	; 0x74
 80178d6:	e7bf      	b.n	8017858 <_strtod_l+0x158>
 80178d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80178da:	195a      	adds	r2, r3, r5
 80178dc:	921d      	str	r2, [sp, #116]	; 0x74
 80178de:	5d5b      	ldrb	r3, [r3, r5]
 80178e0:	2f00      	cmp	r7, #0
 80178e2:	d037      	beq.n	8017954 <_strtod_l+0x254>
 80178e4:	9007      	str	r0, [sp, #28]
 80178e6:	463d      	mov	r5, r7
 80178e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80178ec:	2a09      	cmp	r2, #9
 80178ee:	d912      	bls.n	8017916 <_strtod_l+0x216>
 80178f0:	2201      	movs	r2, #1
 80178f2:	e7c2      	b.n	801787a <_strtod_l+0x17a>
 80178f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80178f6:	1c5a      	adds	r2, r3, #1
 80178f8:	921d      	str	r2, [sp, #116]	; 0x74
 80178fa:	785b      	ldrb	r3, [r3, #1]
 80178fc:	3001      	adds	r0, #1
 80178fe:	2b30      	cmp	r3, #48	; 0x30
 8017900:	d0f8      	beq.n	80178f4 <_strtod_l+0x1f4>
 8017902:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8017906:	2a08      	cmp	r2, #8
 8017908:	f200 84db 	bhi.w	80182c2 <_strtod_l+0xbc2>
 801790c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801790e:	9007      	str	r0, [sp, #28]
 8017910:	2000      	movs	r0, #0
 8017912:	920a      	str	r2, [sp, #40]	; 0x28
 8017914:	4605      	mov	r5, r0
 8017916:	3b30      	subs	r3, #48	; 0x30
 8017918:	f100 0201 	add.w	r2, r0, #1
 801791c:	d014      	beq.n	8017948 <_strtod_l+0x248>
 801791e:	9907      	ldr	r1, [sp, #28]
 8017920:	4411      	add	r1, r2
 8017922:	9107      	str	r1, [sp, #28]
 8017924:	462a      	mov	r2, r5
 8017926:	eb00 0e05 	add.w	lr, r0, r5
 801792a:	210a      	movs	r1, #10
 801792c:	4572      	cmp	r2, lr
 801792e:	d113      	bne.n	8017958 <_strtod_l+0x258>
 8017930:	182a      	adds	r2, r5, r0
 8017932:	2a08      	cmp	r2, #8
 8017934:	f105 0501 	add.w	r5, r5, #1
 8017938:	4405      	add	r5, r0
 801793a:	dc1c      	bgt.n	8017976 <_strtod_l+0x276>
 801793c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801793e:	220a      	movs	r2, #10
 8017940:	fb02 3301 	mla	r3, r2, r1, r3
 8017944:	9309      	str	r3, [sp, #36]	; 0x24
 8017946:	2200      	movs	r2, #0
 8017948:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801794a:	1c59      	adds	r1, r3, #1
 801794c:	911d      	str	r1, [sp, #116]	; 0x74
 801794e:	785b      	ldrb	r3, [r3, #1]
 8017950:	4610      	mov	r0, r2
 8017952:	e7c9      	b.n	80178e8 <_strtod_l+0x1e8>
 8017954:	4638      	mov	r0, r7
 8017956:	e7d2      	b.n	80178fe <_strtod_l+0x1fe>
 8017958:	2a08      	cmp	r2, #8
 801795a:	dc04      	bgt.n	8017966 <_strtod_l+0x266>
 801795c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801795e:	434e      	muls	r6, r1
 8017960:	9609      	str	r6, [sp, #36]	; 0x24
 8017962:	3201      	adds	r2, #1
 8017964:	e7e2      	b.n	801792c <_strtod_l+0x22c>
 8017966:	f102 0c01 	add.w	ip, r2, #1
 801796a:	f1bc 0f10 	cmp.w	ip, #16
 801796e:	bfd8      	it	le
 8017970:	fb01 f909 	mulle.w	r9, r1, r9
 8017974:	e7f5      	b.n	8017962 <_strtod_l+0x262>
 8017976:	2d10      	cmp	r5, #16
 8017978:	bfdc      	itt	le
 801797a:	220a      	movle	r2, #10
 801797c:	fb02 3909 	mlale	r9, r2, r9, r3
 8017980:	e7e1      	b.n	8017946 <_strtod_l+0x246>
 8017982:	2300      	movs	r3, #0
 8017984:	9307      	str	r3, [sp, #28]
 8017986:	2201      	movs	r2, #1
 8017988:	e77c      	b.n	8017884 <_strtod_l+0x184>
 801798a:	f04f 0c00 	mov.w	ip, #0
 801798e:	f108 0302 	add.w	r3, r8, #2
 8017992:	931d      	str	r3, [sp, #116]	; 0x74
 8017994:	f898 3002 	ldrb.w	r3, [r8, #2]
 8017998:	e785      	b.n	80178a6 <_strtod_l+0x1a6>
 801799a:	f04f 0c01 	mov.w	ip, #1
 801799e:	e7f6      	b.n	801798e <_strtod_l+0x28e>
 80179a0:	0801ad58 	.word	0x0801ad58
 80179a4:	0801ab64 	.word	0x0801ab64
 80179a8:	7ff00000 	.word	0x7ff00000
 80179ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80179ae:	1c59      	adds	r1, r3, #1
 80179b0:	911d      	str	r1, [sp, #116]	; 0x74
 80179b2:	785b      	ldrb	r3, [r3, #1]
 80179b4:	2b30      	cmp	r3, #48	; 0x30
 80179b6:	d0f9      	beq.n	80179ac <_strtod_l+0x2ac>
 80179b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80179bc:	2908      	cmp	r1, #8
 80179be:	f63f af79 	bhi.w	80178b4 <_strtod_l+0x1b4>
 80179c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80179c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80179c8:	9308      	str	r3, [sp, #32]
 80179ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80179cc:	1c59      	adds	r1, r3, #1
 80179ce:	911d      	str	r1, [sp, #116]	; 0x74
 80179d0:	785b      	ldrb	r3, [r3, #1]
 80179d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80179d6:	2e09      	cmp	r6, #9
 80179d8:	d937      	bls.n	8017a4a <_strtod_l+0x34a>
 80179da:	9e08      	ldr	r6, [sp, #32]
 80179dc:	1b89      	subs	r1, r1, r6
 80179de:	2908      	cmp	r1, #8
 80179e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80179e4:	dc02      	bgt.n	80179ec <_strtod_l+0x2ec>
 80179e6:	4576      	cmp	r6, lr
 80179e8:	bfa8      	it	ge
 80179ea:	4676      	movge	r6, lr
 80179ec:	f1bc 0f00 	cmp.w	ip, #0
 80179f0:	d000      	beq.n	80179f4 <_strtod_l+0x2f4>
 80179f2:	4276      	negs	r6, r6
 80179f4:	2d00      	cmp	r5, #0
 80179f6:	d14f      	bne.n	8017a98 <_strtod_l+0x398>
 80179f8:	9904      	ldr	r1, [sp, #16]
 80179fa:	4301      	orrs	r1, r0
 80179fc:	f47f aec2 	bne.w	8017784 <_strtod_l+0x84>
 8017a00:	2a00      	cmp	r2, #0
 8017a02:	f47f aedb 	bne.w	80177bc <_strtod_l+0xbc>
 8017a06:	2b69      	cmp	r3, #105	; 0x69
 8017a08:	d027      	beq.n	8017a5a <_strtod_l+0x35a>
 8017a0a:	dc24      	bgt.n	8017a56 <_strtod_l+0x356>
 8017a0c:	2b49      	cmp	r3, #73	; 0x49
 8017a0e:	d024      	beq.n	8017a5a <_strtod_l+0x35a>
 8017a10:	2b4e      	cmp	r3, #78	; 0x4e
 8017a12:	f47f aed3 	bne.w	80177bc <_strtod_l+0xbc>
 8017a16:	499e      	ldr	r1, [pc, #632]	; (8017c90 <_strtod_l+0x590>)
 8017a18:	a81d      	add	r0, sp, #116	; 0x74
 8017a1a:	f001 f865 	bl	8018ae8 <__match>
 8017a1e:	2800      	cmp	r0, #0
 8017a20:	f43f aecc 	beq.w	80177bc <_strtod_l+0xbc>
 8017a24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017a26:	781b      	ldrb	r3, [r3, #0]
 8017a28:	2b28      	cmp	r3, #40	; 0x28
 8017a2a:	d12d      	bne.n	8017a88 <_strtod_l+0x388>
 8017a2c:	4999      	ldr	r1, [pc, #612]	; (8017c94 <_strtod_l+0x594>)
 8017a2e:	aa20      	add	r2, sp, #128	; 0x80
 8017a30:	a81d      	add	r0, sp, #116	; 0x74
 8017a32:	f001 f86d 	bl	8018b10 <__hexnan>
 8017a36:	2805      	cmp	r0, #5
 8017a38:	d126      	bne.n	8017a88 <_strtod_l+0x388>
 8017a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017a3c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8017a40:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017a44:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017a48:	e69c      	b.n	8017784 <_strtod_l+0x84>
 8017a4a:	210a      	movs	r1, #10
 8017a4c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017a50:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017a54:	e7b9      	b.n	80179ca <_strtod_l+0x2ca>
 8017a56:	2b6e      	cmp	r3, #110	; 0x6e
 8017a58:	e7db      	b.n	8017a12 <_strtod_l+0x312>
 8017a5a:	498f      	ldr	r1, [pc, #572]	; (8017c98 <_strtod_l+0x598>)
 8017a5c:	a81d      	add	r0, sp, #116	; 0x74
 8017a5e:	f001 f843 	bl	8018ae8 <__match>
 8017a62:	2800      	cmp	r0, #0
 8017a64:	f43f aeaa 	beq.w	80177bc <_strtod_l+0xbc>
 8017a68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017a6a:	498c      	ldr	r1, [pc, #560]	; (8017c9c <_strtod_l+0x59c>)
 8017a6c:	3b01      	subs	r3, #1
 8017a6e:	a81d      	add	r0, sp, #116	; 0x74
 8017a70:	931d      	str	r3, [sp, #116]	; 0x74
 8017a72:	f001 f839 	bl	8018ae8 <__match>
 8017a76:	b910      	cbnz	r0, 8017a7e <_strtod_l+0x37e>
 8017a78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017a7a:	3301      	adds	r3, #1
 8017a7c:	931d      	str	r3, [sp, #116]	; 0x74
 8017a7e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8017cac <_strtod_l+0x5ac>
 8017a82:	f04f 0a00 	mov.w	sl, #0
 8017a86:	e67d      	b.n	8017784 <_strtod_l+0x84>
 8017a88:	4885      	ldr	r0, [pc, #532]	; (8017ca0 <_strtod_l+0x5a0>)
 8017a8a:	f001 fdc5 	bl	8019618 <nan>
 8017a8e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8017a92:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8017a96:	e675      	b.n	8017784 <_strtod_l+0x84>
 8017a98:	9b07      	ldr	r3, [sp, #28]
 8017a9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a9c:	1af3      	subs	r3, r6, r3
 8017a9e:	2f00      	cmp	r7, #0
 8017aa0:	bf08      	it	eq
 8017aa2:	462f      	moveq	r7, r5
 8017aa4:	2d10      	cmp	r5, #16
 8017aa6:	9308      	str	r3, [sp, #32]
 8017aa8:	46a8      	mov	r8, r5
 8017aaa:	bfa8      	it	ge
 8017aac:	f04f 0810 	movge.w	r8, #16
 8017ab0:	f7e8 fd48 	bl	8000544 <__aeabi_ui2d>
 8017ab4:	2d09      	cmp	r5, #9
 8017ab6:	4682      	mov	sl, r0
 8017ab8:	468b      	mov	fp, r1
 8017aba:	dd13      	ble.n	8017ae4 <_strtod_l+0x3e4>
 8017abc:	4b79      	ldr	r3, [pc, #484]	; (8017ca4 <_strtod_l+0x5a4>)
 8017abe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017ac2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8017ac6:	f7e8 fdb7 	bl	8000638 <__aeabi_dmul>
 8017aca:	4682      	mov	sl, r0
 8017acc:	4648      	mov	r0, r9
 8017ace:	468b      	mov	fp, r1
 8017ad0:	f7e8 fd38 	bl	8000544 <__aeabi_ui2d>
 8017ad4:	4602      	mov	r2, r0
 8017ad6:	460b      	mov	r3, r1
 8017ad8:	4650      	mov	r0, sl
 8017ada:	4659      	mov	r1, fp
 8017adc:	f7e8 fbf6 	bl	80002cc <__adddf3>
 8017ae0:	4682      	mov	sl, r0
 8017ae2:	468b      	mov	fp, r1
 8017ae4:	2d0f      	cmp	r5, #15
 8017ae6:	dc38      	bgt.n	8017b5a <_strtod_l+0x45a>
 8017ae8:	9b08      	ldr	r3, [sp, #32]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	f43f ae4a 	beq.w	8017784 <_strtod_l+0x84>
 8017af0:	dd24      	ble.n	8017b3c <_strtod_l+0x43c>
 8017af2:	2b16      	cmp	r3, #22
 8017af4:	dc0b      	bgt.n	8017b0e <_strtod_l+0x40e>
 8017af6:	4d6b      	ldr	r5, [pc, #428]	; (8017ca4 <_strtod_l+0x5a4>)
 8017af8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8017afc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017b00:	4652      	mov	r2, sl
 8017b02:	465b      	mov	r3, fp
 8017b04:	f7e8 fd98 	bl	8000638 <__aeabi_dmul>
 8017b08:	4682      	mov	sl, r0
 8017b0a:	468b      	mov	fp, r1
 8017b0c:	e63a      	b.n	8017784 <_strtod_l+0x84>
 8017b0e:	9a08      	ldr	r2, [sp, #32]
 8017b10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8017b14:	4293      	cmp	r3, r2
 8017b16:	db20      	blt.n	8017b5a <_strtod_l+0x45a>
 8017b18:	4c62      	ldr	r4, [pc, #392]	; (8017ca4 <_strtod_l+0x5a4>)
 8017b1a:	f1c5 050f 	rsb	r5, r5, #15
 8017b1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8017b22:	4652      	mov	r2, sl
 8017b24:	465b      	mov	r3, fp
 8017b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b2a:	f7e8 fd85 	bl	8000638 <__aeabi_dmul>
 8017b2e:	9b08      	ldr	r3, [sp, #32]
 8017b30:	1b5d      	subs	r5, r3, r5
 8017b32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8017b36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017b3a:	e7e3      	b.n	8017b04 <_strtod_l+0x404>
 8017b3c:	9b08      	ldr	r3, [sp, #32]
 8017b3e:	3316      	adds	r3, #22
 8017b40:	db0b      	blt.n	8017b5a <_strtod_l+0x45a>
 8017b42:	9b07      	ldr	r3, [sp, #28]
 8017b44:	4a57      	ldr	r2, [pc, #348]	; (8017ca4 <_strtod_l+0x5a4>)
 8017b46:	1b9e      	subs	r6, r3, r6
 8017b48:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8017b4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017b50:	4650      	mov	r0, sl
 8017b52:	4659      	mov	r1, fp
 8017b54:	f7e8 fe9a 	bl	800088c <__aeabi_ddiv>
 8017b58:	e7d6      	b.n	8017b08 <_strtod_l+0x408>
 8017b5a:	9b08      	ldr	r3, [sp, #32]
 8017b5c:	eba5 0808 	sub.w	r8, r5, r8
 8017b60:	4498      	add	r8, r3
 8017b62:	f1b8 0f00 	cmp.w	r8, #0
 8017b66:	dd71      	ble.n	8017c4c <_strtod_l+0x54c>
 8017b68:	f018 030f 	ands.w	r3, r8, #15
 8017b6c:	d00a      	beq.n	8017b84 <_strtod_l+0x484>
 8017b6e:	494d      	ldr	r1, [pc, #308]	; (8017ca4 <_strtod_l+0x5a4>)
 8017b70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017b74:	4652      	mov	r2, sl
 8017b76:	465b      	mov	r3, fp
 8017b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b7c:	f7e8 fd5c 	bl	8000638 <__aeabi_dmul>
 8017b80:	4682      	mov	sl, r0
 8017b82:	468b      	mov	fp, r1
 8017b84:	f038 080f 	bics.w	r8, r8, #15
 8017b88:	d04d      	beq.n	8017c26 <_strtod_l+0x526>
 8017b8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017b8e:	dd22      	ble.n	8017bd6 <_strtod_l+0x4d6>
 8017b90:	2500      	movs	r5, #0
 8017b92:	462e      	mov	r6, r5
 8017b94:	9509      	str	r5, [sp, #36]	; 0x24
 8017b96:	9507      	str	r5, [sp, #28]
 8017b98:	2322      	movs	r3, #34	; 0x22
 8017b9a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8017cac <_strtod_l+0x5ac>
 8017b9e:	6023      	str	r3, [r4, #0]
 8017ba0:	f04f 0a00 	mov.w	sl, #0
 8017ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	f43f adec 	beq.w	8017784 <_strtod_l+0x84>
 8017bac:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017bae:	4620      	mov	r0, r4
 8017bb0:	f001 f8a8 	bl	8018d04 <_Bfree>
 8017bb4:	9907      	ldr	r1, [sp, #28]
 8017bb6:	4620      	mov	r0, r4
 8017bb8:	f001 f8a4 	bl	8018d04 <_Bfree>
 8017bbc:	4631      	mov	r1, r6
 8017bbe:	4620      	mov	r0, r4
 8017bc0:	f001 f8a0 	bl	8018d04 <_Bfree>
 8017bc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017bc6:	4620      	mov	r0, r4
 8017bc8:	f001 f89c 	bl	8018d04 <_Bfree>
 8017bcc:	4629      	mov	r1, r5
 8017bce:	4620      	mov	r0, r4
 8017bd0:	f001 f898 	bl	8018d04 <_Bfree>
 8017bd4:	e5d6      	b.n	8017784 <_strtod_l+0x84>
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017bdc:	4650      	mov	r0, sl
 8017bde:	4659      	mov	r1, fp
 8017be0:	4699      	mov	r9, r3
 8017be2:	f1b8 0f01 	cmp.w	r8, #1
 8017be6:	dc21      	bgt.n	8017c2c <_strtod_l+0x52c>
 8017be8:	b10b      	cbz	r3, 8017bee <_strtod_l+0x4ee>
 8017bea:	4682      	mov	sl, r0
 8017bec:	468b      	mov	fp, r1
 8017bee:	4b2e      	ldr	r3, [pc, #184]	; (8017ca8 <_strtod_l+0x5a8>)
 8017bf0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017bf4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017bf8:	4652      	mov	r2, sl
 8017bfa:	465b      	mov	r3, fp
 8017bfc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017c00:	f7e8 fd1a 	bl	8000638 <__aeabi_dmul>
 8017c04:	4b29      	ldr	r3, [pc, #164]	; (8017cac <_strtod_l+0x5ac>)
 8017c06:	460a      	mov	r2, r1
 8017c08:	400b      	ands	r3, r1
 8017c0a:	4929      	ldr	r1, [pc, #164]	; (8017cb0 <_strtod_l+0x5b0>)
 8017c0c:	428b      	cmp	r3, r1
 8017c0e:	4682      	mov	sl, r0
 8017c10:	d8be      	bhi.n	8017b90 <_strtod_l+0x490>
 8017c12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017c16:	428b      	cmp	r3, r1
 8017c18:	bf86      	itte	hi
 8017c1a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8017cb4 <_strtod_l+0x5b4>
 8017c1e:	f04f 3aff 	movhi.w	sl, #4294967295
 8017c22:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017c26:	2300      	movs	r3, #0
 8017c28:	9304      	str	r3, [sp, #16]
 8017c2a:	e081      	b.n	8017d30 <_strtod_l+0x630>
 8017c2c:	f018 0f01 	tst.w	r8, #1
 8017c30:	d007      	beq.n	8017c42 <_strtod_l+0x542>
 8017c32:	4b1d      	ldr	r3, [pc, #116]	; (8017ca8 <_strtod_l+0x5a8>)
 8017c34:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c3c:	f7e8 fcfc 	bl	8000638 <__aeabi_dmul>
 8017c40:	2301      	movs	r3, #1
 8017c42:	f109 0901 	add.w	r9, r9, #1
 8017c46:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017c4a:	e7ca      	b.n	8017be2 <_strtod_l+0x4e2>
 8017c4c:	d0eb      	beq.n	8017c26 <_strtod_l+0x526>
 8017c4e:	f1c8 0800 	rsb	r8, r8, #0
 8017c52:	f018 020f 	ands.w	r2, r8, #15
 8017c56:	d00a      	beq.n	8017c6e <_strtod_l+0x56e>
 8017c58:	4b12      	ldr	r3, [pc, #72]	; (8017ca4 <_strtod_l+0x5a4>)
 8017c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017c5e:	4650      	mov	r0, sl
 8017c60:	4659      	mov	r1, fp
 8017c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c66:	f7e8 fe11 	bl	800088c <__aeabi_ddiv>
 8017c6a:	4682      	mov	sl, r0
 8017c6c:	468b      	mov	fp, r1
 8017c6e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017c72:	d0d8      	beq.n	8017c26 <_strtod_l+0x526>
 8017c74:	f1b8 0f1f 	cmp.w	r8, #31
 8017c78:	dd1e      	ble.n	8017cb8 <_strtod_l+0x5b8>
 8017c7a:	2500      	movs	r5, #0
 8017c7c:	462e      	mov	r6, r5
 8017c7e:	9509      	str	r5, [sp, #36]	; 0x24
 8017c80:	9507      	str	r5, [sp, #28]
 8017c82:	2322      	movs	r3, #34	; 0x22
 8017c84:	f04f 0a00 	mov.w	sl, #0
 8017c88:	f04f 0b00 	mov.w	fp, #0
 8017c8c:	6023      	str	r3, [r4, #0]
 8017c8e:	e789      	b.n	8017ba4 <_strtod_l+0x4a4>
 8017c90:	0801ab61 	.word	0x0801ab61
 8017c94:	0801ab78 	.word	0x0801ab78
 8017c98:	0801ab58 	.word	0x0801ab58
 8017c9c:	0801ab5b 	.word	0x0801ab5b
 8017ca0:	0801af1f 	.word	0x0801af1f
 8017ca4:	0801ae10 	.word	0x0801ae10
 8017ca8:	0801ade8 	.word	0x0801ade8
 8017cac:	7ff00000 	.word	0x7ff00000
 8017cb0:	7ca00000 	.word	0x7ca00000
 8017cb4:	7fefffff 	.word	0x7fefffff
 8017cb8:	f018 0310 	ands.w	r3, r8, #16
 8017cbc:	bf18      	it	ne
 8017cbe:	236a      	movne	r3, #106	; 0x6a
 8017cc0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8018078 <_strtod_l+0x978>
 8017cc4:	9304      	str	r3, [sp, #16]
 8017cc6:	4650      	mov	r0, sl
 8017cc8:	4659      	mov	r1, fp
 8017cca:	2300      	movs	r3, #0
 8017ccc:	f018 0f01 	tst.w	r8, #1
 8017cd0:	d004      	beq.n	8017cdc <_strtod_l+0x5dc>
 8017cd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017cd6:	f7e8 fcaf 	bl	8000638 <__aeabi_dmul>
 8017cda:	2301      	movs	r3, #1
 8017cdc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017ce0:	f109 0908 	add.w	r9, r9, #8
 8017ce4:	d1f2      	bne.n	8017ccc <_strtod_l+0x5cc>
 8017ce6:	b10b      	cbz	r3, 8017cec <_strtod_l+0x5ec>
 8017ce8:	4682      	mov	sl, r0
 8017cea:	468b      	mov	fp, r1
 8017cec:	9b04      	ldr	r3, [sp, #16]
 8017cee:	b1bb      	cbz	r3, 8017d20 <_strtod_l+0x620>
 8017cf0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017cf4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	4659      	mov	r1, fp
 8017cfc:	dd10      	ble.n	8017d20 <_strtod_l+0x620>
 8017cfe:	2b1f      	cmp	r3, #31
 8017d00:	f340 8128 	ble.w	8017f54 <_strtod_l+0x854>
 8017d04:	2b34      	cmp	r3, #52	; 0x34
 8017d06:	bfde      	ittt	le
 8017d08:	3b20      	suble	r3, #32
 8017d0a:	f04f 32ff 	movle.w	r2, #4294967295
 8017d0e:	fa02 f303 	lslle.w	r3, r2, r3
 8017d12:	f04f 0a00 	mov.w	sl, #0
 8017d16:	bfcc      	ite	gt
 8017d18:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017d1c:	ea03 0b01 	andle.w	fp, r3, r1
 8017d20:	2200      	movs	r2, #0
 8017d22:	2300      	movs	r3, #0
 8017d24:	4650      	mov	r0, sl
 8017d26:	4659      	mov	r1, fp
 8017d28:	f7e8 feee 	bl	8000b08 <__aeabi_dcmpeq>
 8017d2c:	2800      	cmp	r0, #0
 8017d2e:	d1a4      	bne.n	8017c7a <_strtod_l+0x57a>
 8017d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d32:	9300      	str	r3, [sp, #0]
 8017d34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017d36:	462b      	mov	r3, r5
 8017d38:	463a      	mov	r2, r7
 8017d3a:	4620      	mov	r0, r4
 8017d3c:	f001 f84e 	bl	8018ddc <__s2b>
 8017d40:	9009      	str	r0, [sp, #36]	; 0x24
 8017d42:	2800      	cmp	r0, #0
 8017d44:	f43f af24 	beq.w	8017b90 <_strtod_l+0x490>
 8017d48:	9b07      	ldr	r3, [sp, #28]
 8017d4a:	1b9e      	subs	r6, r3, r6
 8017d4c:	9b08      	ldr	r3, [sp, #32]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	bfb4      	ite	lt
 8017d52:	4633      	movlt	r3, r6
 8017d54:	2300      	movge	r3, #0
 8017d56:	9310      	str	r3, [sp, #64]	; 0x40
 8017d58:	9b08      	ldr	r3, [sp, #32]
 8017d5a:	2500      	movs	r5, #0
 8017d5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017d60:	9318      	str	r3, [sp, #96]	; 0x60
 8017d62:	462e      	mov	r6, r5
 8017d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d66:	4620      	mov	r0, r4
 8017d68:	6859      	ldr	r1, [r3, #4]
 8017d6a:	f000 ff8b 	bl	8018c84 <_Balloc>
 8017d6e:	9007      	str	r0, [sp, #28]
 8017d70:	2800      	cmp	r0, #0
 8017d72:	f43f af11 	beq.w	8017b98 <_strtod_l+0x498>
 8017d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d78:	691a      	ldr	r2, [r3, #16]
 8017d7a:	3202      	adds	r2, #2
 8017d7c:	f103 010c 	add.w	r1, r3, #12
 8017d80:	0092      	lsls	r2, r2, #2
 8017d82:	300c      	adds	r0, #12
 8017d84:	f7ff fb72 	bl	801746c <memcpy>
 8017d88:	ec4b ab10 	vmov	d0, sl, fp
 8017d8c:	aa20      	add	r2, sp, #128	; 0x80
 8017d8e:	a91f      	add	r1, sp, #124	; 0x7c
 8017d90:	4620      	mov	r0, r4
 8017d92:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8017d96:	f001 fb5d 	bl	8019454 <__d2b>
 8017d9a:	901e      	str	r0, [sp, #120]	; 0x78
 8017d9c:	2800      	cmp	r0, #0
 8017d9e:	f43f aefb 	beq.w	8017b98 <_strtod_l+0x498>
 8017da2:	2101      	movs	r1, #1
 8017da4:	4620      	mov	r0, r4
 8017da6:	f001 f8b3 	bl	8018f10 <__i2b>
 8017daa:	4606      	mov	r6, r0
 8017dac:	2800      	cmp	r0, #0
 8017dae:	f43f aef3 	beq.w	8017b98 <_strtod_l+0x498>
 8017db2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017db4:	9904      	ldr	r1, [sp, #16]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	bfab      	itete	ge
 8017dba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8017dbc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8017dbe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8017dc0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8017dc4:	bfac      	ite	ge
 8017dc6:	eb03 0902 	addge.w	r9, r3, r2
 8017dca:	1ad7      	sublt	r7, r2, r3
 8017dcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017dce:	eba3 0801 	sub.w	r8, r3, r1
 8017dd2:	4490      	add	r8, r2
 8017dd4:	4ba3      	ldr	r3, [pc, #652]	; (8018064 <_strtod_l+0x964>)
 8017dd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8017dda:	4598      	cmp	r8, r3
 8017ddc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017de0:	f280 80cc 	bge.w	8017f7c <_strtod_l+0x87c>
 8017de4:	eba3 0308 	sub.w	r3, r3, r8
 8017de8:	2b1f      	cmp	r3, #31
 8017dea:	eba2 0203 	sub.w	r2, r2, r3
 8017dee:	f04f 0101 	mov.w	r1, #1
 8017df2:	f300 80b6 	bgt.w	8017f62 <_strtod_l+0x862>
 8017df6:	fa01 f303 	lsl.w	r3, r1, r3
 8017dfa:	9311      	str	r3, [sp, #68]	; 0x44
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	930c      	str	r3, [sp, #48]	; 0x30
 8017e00:	eb09 0802 	add.w	r8, r9, r2
 8017e04:	9b04      	ldr	r3, [sp, #16]
 8017e06:	45c1      	cmp	r9, r8
 8017e08:	4417      	add	r7, r2
 8017e0a:	441f      	add	r7, r3
 8017e0c:	464b      	mov	r3, r9
 8017e0e:	bfa8      	it	ge
 8017e10:	4643      	movge	r3, r8
 8017e12:	42bb      	cmp	r3, r7
 8017e14:	bfa8      	it	ge
 8017e16:	463b      	movge	r3, r7
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	bfc2      	ittt	gt
 8017e1c:	eba8 0803 	subgt.w	r8, r8, r3
 8017e20:	1aff      	subgt	r7, r7, r3
 8017e22:	eba9 0903 	subgt.w	r9, r9, r3
 8017e26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	dd17      	ble.n	8017e5c <_strtod_l+0x75c>
 8017e2c:	4631      	mov	r1, r6
 8017e2e:	461a      	mov	r2, r3
 8017e30:	4620      	mov	r0, r4
 8017e32:	f001 f929 	bl	8019088 <__pow5mult>
 8017e36:	4606      	mov	r6, r0
 8017e38:	2800      	cmp	r0, #0
 8017e3a:	f43f aead 	beq.w	8017b98 <_strtod_l+0x498>
 8017e3e:	4601      	mov	r1, r0
 8017e40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017e42:	4620      	mov	r0, r4
 8017e44:	f001 f87a 	bl	8018f3c <__multiply>
 8017e48:	900f      	str	r0, [sp, #60]	; 0x3c
 8017e4a:	2800      	cmp	r0, #0
 8017e4c:	f43f aea4 	beq.w	8017b98 <_strtod_l+0x498>
 8017e50:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017e52:	4620      	mov	r0, r4
 8017e54:	f000 ff56 	bl	8018d04 <_Bfree>
 8017e58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e5a:	931e      	str	r3, [sp, #120]	; 0x78
 8017e5c:	f1b8 0f00 	cmp.w	r8, #0
 8017e60:	f300 8091 	bgt.w	8017f86 <_strtod_l+0x886>
 8017e64:	9b08      	ldr	r3, [sp, #32]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	dd08      	ble.n	8017e7c <_strtod_l+0x77c>
 8017e6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017e6c:	9907      	ldr	r1, [sp, #28]
 8017e6e:	4620      	mov	r0, r4
 8017e70:	f001 f90a 	bl	8019088 <__pow5mult>
 8017e74:	9007      	str	r0, [sp, #28]
 8017e76:	2800      	cmp	r0, #0
 8017e78:	f43f ae8e 	beq.w	8017b98 <_strtod_l+0x498>
 8017e7c:	2f00      	cmp	r7, #0
 8017e7e:	dd08      	ble.n	8017e92 <_strtod_l+0x792>
 8017e80:	9907      	ldr	r1, [sp, #28]
 8017e82:	463a      	mov	r2, r7
 8017e84:	4620      	mov	r0, r4
 8017e86:	f001 f959 	bl	801913c <__lshift>
 8017e8a:	9007      	str	r0, [sp, #28]
 8017e8c:	2800      	cmp	r0, #0
 8017e8e:	f43f ae83 	beq.w	8017b98 <_strtod_l+0x498>
 8017e92:	f1b9 0f00 	cmp.w	r9, #0
 8017e96:	dd08      	ble.n	8017eaa <_strtod_l+0x7aa>
 8017e98:	4631      	mov	r1, r6
 8017e9a:	464a      	mov	r2, r9
 8017e9c:	4620      	mov	r0, r4
 8017e9e:	f001 f94d 	bl	801913c <__lshift>
 8017ea2:	4606      	mov	r6, r0
 8017ea4:	2800      	cmp	r0, #0
 8017ea6:	f43f ae77 	beq.w	8017b98 <_strtod_l+0x498>
 8017eaa:	9a07      	ldr	r2, [sp, #28]
 8017eac:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017eae:	4620      	mov	r0, r4
 8017eb0:	f001 f9cc 	bl	801924c <__mdiff>
 8017eb4:	4605      	mov	r5, r0
 8017eb6:	2800      	cmp	r0, #0
 8017eb8:	f43f ae6e 	beq.w	8017b98 <_strtod_l+0x498>
 8017ebc:	68c3      	ldr	r3, [r0, #12]
 8017ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	60c3      	str	r3, [r0, #12]
 8017ec4:	4631      	mov	r1, r6
 8017ec6:	f001 f9a5 	bl	8019214 <__mcmp>
 8017eca:	2800      	cmp	r0, #0
 8017ecc:	da65      	bge.n	8017f9a <_strtod_l+0x89a>
 8017ece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ed0:	ea53 030a 	orrs.w	r3, r3, sl
 8017ed4:	f040 8087 	bne.w	8017fe6 <_strtod_l+0x8e6>
 8017ed8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	f040 8082 	bne.w	8017fe6 <_strtod_l+0x8e6>
 8017ee2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017ee6:	0d1b      	lsrs	r3, r3, #20
 8017ee8:	051b      	lsls	r3, r3, #20
 8017eea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017eee:	d97a      	bls.n	8017fe6 <_strtod_l+0x8e6>
 8017ef0:	696b      	ldr	r3, [r5, #20]
 8017ef2:	b913      	cbnz	r3, 8017efa <_strtod_l+0x7fa>
 8017ef4:	692b      	ldr	r3, [r5, #16]
 8017ef6:	2b01      	cmp	r3, #1
 8017ef8:	dd75      	ble.n	8017fe6 <_strtod_l+0x8e6>
 8017efa:	4629      	mov	r1, r5
 8017efc:	2201      	movs	r2, #1
 8017efe:	4620      	mov	r0, r4
 8017f00:	f001 f91c 	bl	801913c <__lshift>
 8017f04:	4631      	mov	r1, r6
 8017f06:	4605      	mov	r5, r0
 8017f08:	f001 f984 	bl	8019214 <__mcmp>
 8017f0c:	2800      	cmp	r0, #0
 8017f0e:	dd6a      	ble.n	8017fe6 <_strtod_l+0x8e6>
 8017f10:	9904      	ldr	r1, [sp, #16]
 8017f12:	4a55      	ldr	r2, [pc, #340]	; (8018068 <_strtod_l+0x968>)
 8017f14:	465b      	mov	r3, fp
 8017f16:	2900      	cmp	r1, #0
 8017f18:	f000 8085 	beq.w	8018026 <_strtod_l+0x926>
 8017f1c:	ea02 010b 	and.w	r1, r2, fp
 8017f20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017f24:	dc7f      	bgt.n	8018026 <_strtod_l+0x926>
 8017f26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017f2a:	f77f aeaa 	ble.w	8017c82 <_strtod_l+0x582>
 8017f2e:	4a4f      	ldr	r2, [pc, #316]	; (801806c <_strtod_l+0x96c>)
 8017f30:	2300      	movs	r3, #0
 8017f32:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8017f36:	4650      	mov	r0, sl
 8017f38:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8017f3c:	4659      	mov	r1, fp
 8017f3e:	f7e8 fb7b 	bl	8000638 <__aeabi_dmul>
 8017f42:	460b      	mov	r3, r1
 8017f44:	4303      	orrs	r3, r0
 8017f46:	bf08      	it	eq
 8017f48:	2322      	moveq	r3, #34	; 0x22
 8017f4a:	4682      	mov	sl, r0
 8017f4c:	468b      	mov	fp, r1
 8017f4e:	bf08      	it	eq
 8017f50:	6023      	streq	r3, [r4, #0]
 8017f52:	e62b      	b.n	8017bac <_strtod_l+0x4ac>
 8017f54:	f04f 32ff 	mov.w	r2, #4294967295
 8017f58:	fa02 f303 	lsl.w	r3, r2, r3
 8017f5c:	ea03 0a0a 	and.w	sl, r3, sl
 8017f60:	e6de      	b.n	8017d20 <_strtod_l+0x620>
 8017f62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8017f66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017f6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017f6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8017f72:	fa01 f308 	lsl.w	r3, r1, r8
 8017f76:	930c      	str	r3, [sp, #48]	; 0x30
 8017f78:	9111      	str	r1, [sp, #68]	; 0x44
 8017f7a:	e741      	b.n	8017e00 <_strtod_l+0x700>
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	930c      	str	r3, [sp, #48]	; 0x30
 8017f80:	2301      	movs	r3, #1
 8017f82:	9311      	str	r3, [sp, #68]	; 0x44
 8017f84:	e73c      	b.n	8017e00 <_strtod_l+0x700>
 8017f86:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017f88:	4642      	mov	r2, r8
 8017f8a:	4620      	mov	r0, r4
 8017f8c:	f001 f8d6 	bl	801913c <__lshift>
 8017f90:	901e      	str	r0, [sp, #120]	; 0x78
 8017f92:	2800      	cmp	r0, #0
 8017f94:	f47f af66 	bne.w	8017e64 <_strtod_l+0x764>
 8017f98:	e5fe      	b.n	8017b98 <_strtod_l+0x498>
 8017f9a:	465f      	mov	r7, fp
 8017f9c:	d16e      	bne.n	801807c <_strtod_l+0x97c>
 8017f9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017fa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017fa4:	b342      	cbz	r2, 8017ff8 <_strtod_l+0x8f8>
 8017fa6:	4a32      	ldr	r2, [pc, #200]	; (8018070 <_strtod_l+0x970>)
 8017fa8:	4293      	cmp	r3, r2
 8017faa:	d128      	bne.n	8017ffe <_strtod_l+0x8fe>
 8017fac:	9b04      	ldr	r3, [sp, #16]
 8017fae:	4650      	mov	r0, sl
 8017fb0:	b1eb      	cbz	r3, 8017fee <_strtod_l+0x8ee>
 8017fb2:	4a2d      	ldr	r2, [pc, #180]	; (8018068 <_strtod_l+0x968>)
 8017fb4:	403a      	ands	r2, r7
 8017fb6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017fba:	f04f 31ff 	mov.w	r1, #4294967295
 8017fbe:	d819      	bhi.n	8017ff4 <_strtod_l+0x8f4>
 8017fc0:	0d12      	lsrs	r2, r2, #20
 8017fc2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8017fca:	4298      	cmp	r0, r3
 8017fcc:	d117      	bne.n	8017ffe <_strtod_l+0x8fe>
 8017fce:	4b29      	ldr	r3, [pc, #164]	; (8018074 <_strtod_l+0x974>)
 8017fd0:	429f      	cmp	r7, r3
 8017fd2:	d102      	bne.n	8017fda <_strtod_l+0x8da>
 8017fd4:	3001      	adds	r0, #1
 8017fd6:	f43f addf 	beq.w	8017b98 <_strtod_l+0x498>
 8017fda:	4b23      	ldr	r3, [pc, #140]	; (8018068 <_strtod_l+0x968>)
 8017fdc:	403b      	ands	r3, r7
 8017fde:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017fe2:	f04f 0a00 	mov.w	sl, #0
 8017fe6:	9b04      	ldr	r3, [sp, #16]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d1a0      	bne.n	8017f2e <_strtod_l+0x82e>
 8017fec:	e5de      	b.n	8017bac <_strtod_l+0x4ac>
 8017fee:	f04f 33ff 	mov.w	r3, #4294967295
 8017ff2:	e7ea      	b.n	8017fca <_strtod_l+0x8ca>
 8017ff4:	460b      	mov	r3, r1
 8017ff6:	e7e8      	b.n	8017fca <_strtod_l+0x8ca>
 8017ff8:	ea53 030a 	orrs.w	r3, r3, sl
 8017ffc:	d088      	beq.n	8017f10 <_strtod_l+0x810>
 8017ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018000:	b1db      	cbz	r3, 801803a <_strtod_l+0x93a>
 8018002:	423b      	tst	r3, r7
 8018004:	d0ef      	beq.n	8017fe6 <_strtod_l+0x8e6>
 8018006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018008:	9a04      	ldr	r2, [sp, #16]
 801800a:	4650      	mov	r0, sl
 801800c:	4659      	mov	r1, fp
 801800e:	b1c3      	cbz	r3, 8018042 <_strtod_l+0x942>
 8018010:	f7ff fb5a 	bl	80176c8 <sulp>
 8018014:	4602      	mov	r2, r0
 8018016:	460b      	mov	r3, r1
 8018018:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801801c:	f7e8 f956 	bl	80002cc <__adddf3>
 8018020:	4682      	mov	sl, r0
 8018022:	468b      	mov	fp, r1
 8018024:	e7df      	b.n	8017fe6 <_strtod_l+0x8e6>
 8018026:	4013      	ands	r3, r2
 8018028:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801802c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018030:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018034:	f04f 3aff 	mov.w	sl, #4294967295
 8018038:	e7d5      	b.n	8017fe6 <_strtod_l+0x8e6>
 801803a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801803c:	ea13 0f0a 	tst.w	r3, sl
 8018040:	e7e0      	b.n	8018004 <_strtod_l+0x904>
 8018042:	f7ff fb41 	bl	80176c8 <sulp>
 8018046:	4602      	mov	r2, r0
 8018048:	460b      	mov	r3, r1
 801804a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801804e:	f7e8 f93b 	bl	80002c8 <__aeabi_dsub>
 8018052:	2200      	movs	r2, #0
 8018054:	2300      	movs	r3, #0
 8018056:	4682      	mov	sl, r0
 8018058:	468b      	mov	fp, r1
 801805a:	f7e8 fd55 	bl	8000b08 <__aeabi_dcmpeq>
 801805e:	2800      	cmp	r0, #0
 8018060:	d0c1      	beq.n	8017fe6 <_strtod_l+0x8e6>
 8018062:	e60e      	b.n	8017c82 <_strtod_l+0x582>
 8018064:	fffffc02 	.word	0xfffffc02
 8018068:	7ff00000 	.word	0x7ff00000
 801806c:	39500000 	.word	0x39500000
 8018070:	000fffff 	.word	0x000fffff
 8018074:	7fefffff 	.word	0x7fefffff
 8018078:	0801ab90 	.word	0x0801ab90
 801807c:	4631      	mov	r1, r6
 801807e:	4628      	mov	r0, r5
 8018080:	f001 fa44 	bl	801950c <__ratio>
 8018084:	ec59 8b10 	vmov	r8, r9, d0
 8018088:	ee10 0a10 	vmov	r0, s0
 801808c:	2200      	movs	r2, #0
 801808e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018092:	4649      	mov	r1, r9
 8018094:	f7e8 fd4c 	bl	8000b30 <__aeabi_dcmple>
 8018098:	2800      	cmp	r0, #0
 801809a:	d07c      	beq.n	8018196 <_strtod_l+0xa96>
 801809c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d04c      	beq.n	801813c <_strtod_l+0xa3c>
 80180a2:	4b95      	ldr	r3, [pc, #596]	; (80182f8 <_strtod_l+0xbf8>)
 80180a4:	2200      	movs	r2, #0
 80180a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80180aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80182f8 <_strtod_l+0xbf8>
 80180ae:	f04f 0800 	mov.w	r8, #0
 80180b2:	4b92      	ldr	r3, [pc, #584]	; (80182fc <_strtod_l+0xbfc>)
 80180b4:	403b      	ands	r3, r7
 80180b6:	9311      	str	r3, [sp, #68]	; 0x44
 80180b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80180ba:	4b91      	ldr	r3, [pc, #580]	; (8018300 <_strtod_l+0xc00>)
 80180bc:	429a      	cmp	r2, r3
 80180be:	f040 80b2 	bne.w	8018226 <_strtod_l+0xb26>
 80180c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80180c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80180ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80180ce:	ec4b ab10 	vmov	d0, sl, fp
 80180d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80180d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80180da:	f001 f93f 	bl	801935c <__ulp>
 80180de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80180e2:	ec53 2b10 	vmov	r2, r3, d0
 80180e6:	f7e8 faa7 	bl	8000638 <__aeabi_dmul>
 80180ea:	4652      	mov	r2, sl
 80180ec:	465b      	mov	r3, fp
 80180ee:	f7e8 f8ed 	bl	80002cc <__adddf3>
 80180f2:	460b      	mov	r3, r1
 80180f4:	4981      	ldr	r1, [pc, #516]	; (80182fc <_strtod_l+0xbfc>)
 80180f6:	4a83      	ldr	r2, [pc, #524]	; (8018304 <_strtod_l+0xc04>)
 80180f8:	4019      	ands	r1, r3
 80180fa:	4291      	cmp	r1, r2
 80180fc:	4682      	mov	sl, r0
 80180fe:	d95e      	bls.n	80181be <_strtod_l+0xabe>
 8018100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018102:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018106:	4293      	cmp	r3, r2
 8018108:	d103      	bne.n	8018112 <_strtod_l+0xa12>
 801810a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801810c:	3301      	adds	r3, #1
 801810e:	f43f ad43 	beq.w	8017b98 <_strtod_l+0x498>
 8018112:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8018310 <_strtod_l+0xc10>
 8018116:	f04f 3aff 	mov.w	sl, #4294967295
 801811a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801811c:	4620      	mov	r0, r4
 801811e:	f000 fdf1 	bl	8018d04 <_Bfree>
 8018122:	9907      	ldr	r1, [sp, #28]
 8018124:	4620      	mov	r0, r4
 8018126:	f000 fded 	bl	8018d04 <_Bfree>
 801812a:	4631      	mov	r1, r6
 801812c:	4620      	mov	r0, r4
 801812e:	f000 fde9 	bl	8018d04 <_Bfree>
 8018132:	4629      	mov	r1, r5
 8018134:	4620      	mov	r0, r4
 8018136:	f000 fde5 	bl	8018d04 <_Bfree>
 801813a:	e613      	b.n	8017d64 <_strtod_l+0x664>
 801813c:	f1ba 0f00 	cmp.w	sl, #0
 8018140:	d11b      	bne.n	801817a <_strtod_l+0xa7a>
 8018142:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018146:	b9f3      	cbnz	r3, 8018186 <_strtod_l+0xa86>
 8018148:	4b6b      	ldr	r3, [pc, #428]	; (80182f8 <_strtod_l+0xbf8>)
 801814a:	2200      	movs	r2, #0
 801814c:	4640      	mov	r0, r8
 801814e:	4649      	mov	r1, r9
 8018150:	f7e8 fce4 	bl	8000b1c <__aeabi_dcmplt>
 8018154:	b9d0      	cbnz	r0, 801818c <_strtod_l+0xa8c>
 8018156:	4640      	mov	r0, r8
 8018158:	4649      	mov	r1, r9
 801815a:	4b6b      	ldr	r3, [pc, #428]	; (8018308 <_strtod_l+0xc08>)
 801815c:	2200      	movs	r2, #0
 801815e:	f7e8 fa6b 	bl	8000638 <__aeabi_dmul>
 8018162:	4680      	mov	r8, r0
 8018164:	4689      	mov	r9, r1
 8018166:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801816a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801816e:	931b      	str	r3, [sp, #108]	; 0x6c
 8018170:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8018174:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018178:	e79b      	b.n	80180b2 <_strtod_l+0x9b2>
 801817a:	f1ba 0f01 	cmp.w	sl, #1
 801817e:	d102      	bne.n	8018186 <_strtod_l+0xa86>
 8018180:	2f00      	cmp	r7, #0
 8018182:	f43f ad7e 	beq.w	8017c82 <_strtod_l+0x582>
 8018186:	4b61      	ldr	r3, [pc, #388]	; (801830c <_strtod_l+0xc0c>)
 8018188:	2200      	movs	r2, #0
 801818a:	e78c      	b.n	80180a6 <_strtod_l+0x9a6>
 801818c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018308 <_strtod_l+0xc08>
 8018190:	f04f 0800 	mov.w	r8, #0
 8018194:	e7e7      	b.n	8018166 <_strtod_l+0xa66>
 8018196:	4b5c      	ldr	r3, [pc, #368]	; (8018308 <_strtod_l+0xc08>)
 8018198:	4640      	mov	r0, r8
 801819a:	4649      	mov	r1, r9
 801819c:	2200      	movs	r2, #0
 801819e:	f7e8 fa4b 	bl	8000638 <__aeabi_dmul>
 80181a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80181a4:	4680      	mov	r8, r0
 80181a6:	4689      	mov	r9, r1
 80181a8:	b933      	cbnz	r3, 80181b8 <_strtod_l+0xab8>
 80181aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80181ae:	9012      	str	r0, [sp, #72]	; 0x48
 80181b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80181b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80181b6:	e7dd      	b.n	8018174 <_strtod_l+0xa74>
 80181b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80181bc:	e7f9      	b.n	80181b2 <_strtod_l+0xab2>
 80181be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80181c2:	9b04      	ldr	r3, [sp, #16]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d1a8      	bne.n	801811a <_strtod_l+0xa1a>
 80181c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80181cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80181ce:	0d1b      	lsrs	r3, r3, #20
 80181d0:	051b      	lsls	r3, r3, #20
 80181d2:	429a      	cmp	r2, r3
 80181d4:	d1a1      	bne.n	801811a <_strtod_l+0xa1a>
 80181d6:	4640      	mov	r0, r8
 80181d8:	4649      	mov	r1, r9
 80181da:	f7e8 fd65 	bl	8000ca8 <__aeabi_d2lz>
 80181de:	f7e8 f9fd 	bl	80005dc <__aeabi_l2d>
 80181e2:	4602      	mov	r2, r0
 80181e4:	460b      	mov	r3, r1
 80181e6:	4640      	mov	r0, r8
 80181e8:	4649      	mov	r1, r9
 80181ea:	f7e8 f86d 	bl	80002c8 <__aeabi_dsub>
 80181ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80181f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80181f4:	ea43 030a 	orr.w	r3, r3, sl
 80181f8:	4313      	orrs	r3, r2
 80181fa:	4680      	mov	r8, r0
 80181fc:	4689      	mov	r9, r1
 80181fe:	d053      	beq.n	80182a8 <_strtod_l+0xba8>
 8018200:	a335      	add	r3, pc, #212	; (adr r3, 80182d8 <_strtod_l+0xbd8>)
 8018202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018206:	f7e8 fc89 	bl	8000b1c <__aeabi_dcmplt>
 801820a:	2800      	cmp	r0, #0
 801820c:	f47f acce 	bne.w	8017bac <_strtod_l+0x4ac>
 8018210:	a333      	add	r3, pc, #204	; (adr r3, 80182e0 <_strtod_l+0xbe0>)
 8018212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018216:	4640      	mov	r0, r8
 8018218:	4649      	mov	r1, r9
 801821a:	f7e8 fc9d 	bl	8000b58 <__aeabi_dcmpgt>
 801821e:	2800      	cmp	r0, #0
 8018220:	f43f af7b 	beq.w	801811a <_strtod_l+0xa1a>
 8018224:	e4c2      	b.n	8017bac <_strtod_l+0x4ac>
 8018226:	9b04      	ldr	r3, [sp, #16]
 8018228:	b333      	cbz	r3, 8018278 <_strtod_l+0xb78>
 801822a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801822c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018230:	d822      	bhi.n	8018278 <_strtod_l+0xb78>
 8018232:	a32d      	add	r3, pc, #180	; (adr r3, 80182e8 <_strtod_l+0xbe8>)
 8018234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018238:	4640      	mov	r0, r8
 801823a:	4649      	mov	r1, r9
 801823c:	f7e8 fc78 	bl	8000b30 <__aeabi_dcmple>
 8018240:	b1a0      	cbz	r0, 801826c <_strtod_l+0xb6c>
 8018242:	4649      	mov	r1, r9
 8018244:	4640      	mov	r0, r8
 8018246:	f7e8 fca7 	bl	8000b98 <__aeabi_d2uiz>
 801824a:	2801      	cmp	r0, #1
 801824c:	bf38      	it	cc
 801824e:	2001      	movcc	r0, #1
 8018250:	f7e8 f978 	bl	8000544 <__aeabi_ui2d>
 8018254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018256:	4680      	mov	r8, r0
 8018258:	4689      	mov	r9, r1
 801825a:	bb13      	cbnz	r3, 80182a2 <_strtod_l+0xba2>
 801825c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018260:	9014      	str	r0, [sp, #80]	; 0x50
 8018262:	9315      	str	r3, [sp, #84]	; 0x54
 8018264:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018268:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801826c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801826e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018270:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018274:	1a9b      	subs	r3, r3, r2
 8018276:	930d      	str	r3, [sp, #52]	; 0x34
 8018278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801827c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018280:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018284:	f001 f86a 	bl	801935c <__ulp>
 8018288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801828c:	ec53 2b10 	vmov	r2, r3, d0
 8018290:	f7e8 f9d2 	bl	8000638 <__aeabi_dmul>
 8018294:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018298:	f7e8 f818 	bl	80002cc <__adddf3>
 801829c:	4682      	mov	sl, r0
 801829e:	468b      	mov	fp, r1
 80182a0:	e78f      	b.n	80181c2 <_strtod_l+0xac2>
 80182a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80182a6:	e7dd      	b.n	8018264 <_strtod_l+0xb64>
 80182a8:	a311      	add	r3, pc, #68	; (adr r3, 80182f0 <_strtod_l+0xbf0>)
 80182aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ae:	f7e8 fc35 	bl	8000b1c <__aeabi_dcmplt>
 80182b2:	e7b4      	b.n	801821e <_strtod_l+0xb1e>
 80182b4:	2300      	movs	r3, #0
 80182b6:	930e      	str	r3, [sp, #56]	; 0x38
 80182b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80182ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80182bc:	6013      	str	r3, [r2, #0]
 80182be:	f7ff ba65 	b.w	801778c <_strtod_l+0x8c>
 80182c2:	2b65      	cmp	r3, #101	; 0x65
 80182c4:	f43f ab5d 	beq.w	8017982 <_strtod_l+0x282>
 80182c8:	2b45      	cmp	r3, #69	; 0x45
 80182ca:	f43f ab5a 	beq.w	8017982 <_strtod_l+0x282>
 80182ce:	2201      	movs	r2, #1
 80182d0:	f7ff bb92 	b.w	80179f8 <_strtod_l+0x2f8>
 80182d4:	f3af 8000 	nop.w
 80182d8:	94a03595 	.word	0x94a03595
 80182dc:	3fdfffff 	.word	0x3fdfffff
 80182e0:	35afe535 	.word	0x35afe535
 80182e4:	3fe00000 	.word	0x3fe00000
 80182e8:	ffc00000 	.word	0xffc00000
 80182ec:	41dfffff 	.word	0x41dfffff
 80182f0:	94a03595 	.word	0x94a03595
 80182f4:	3fcfffff 	.word	0x3fcfffff
 80182f8:	3ff00000 	.word	0x3ff00000
 80182fc:	7ff00000 	.word	0x7ff00000
 8018300:	7fe00000 	.word	0x7fe00000
 8018304:	7c9fffff 	.word	0x7c9fffff
 8018308:	3fe00000 	.word	0x3fe00000
 801830c:	bff00000 	.word	0xbff00000
 8018310:	7fefffff 	.word	0x7fefffff

08018314 <strtof>:
 8018314:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8018318:	4e26      	ldr	r6, [pc, #152]	; (80183b4 <strtof+0xa0>)
 801831a:	4b27      	ldr	r3, [pc, #156]	; (80183b8 <strtof+0xa4>)
 801831c:	460a      	mov	r2, r1
 801831e:	ed2d 8b02 	vpush	{d8}
 8018322:	4601      	mov	r1, r0
 8018324:	6830      	ldr	r0, [r6, #0]
 8018326:	f7ff f9eb 	bl	8017700 <_strtod_l>
 801832a:	ec55 4b10 	vmov	r4, r5, d0
 801832e:	ee10 2a10 	vmov	r2, s0
 8018332:	ee10 0a10 	vmov	r0, s0
 8018336:	462b      	mov	r3, r5
 8018338:	4629      	mov	r1, r5
 801833a:	f7e8 fc17 	bl	8000b6c <__aeabi_dcmpun>
 801833e:	b190      	cbz	r0, 8018366 <strtof+0x52>
 8018340:	2d00      	cmp	r5, #0
 8018342:	481e      	ldr	r0, [pc, #120]	; (80183bc <strtof+0xa8>)
 8018344:	da09      	bge.n	801835a <strtof+0x46>
 8018346:	f001 f96f 	bl	8019628 <nanf>
 801834a:	eeb1 8a40 	vneg.f32	s16, s0
 801834e:	eeb0 0a48 	vmov.f32	s0, s16
 8018352:	ecbd 8b02 	vpop	{d8}
 8018356:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801835a:	ecbd 8b02 	vpop	{d8}
 801835e:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8018362:	f001 b961 	b.w	8019628 <nanf>
 8018366:	4620      	mov	r0, r4
 8018368:	4629      	mov	r1, r5
 801836a:	f7e8 fc35 	bl	8000bd8 <__aeabi_d2f>
 801836e:	ee08 0a10 	vmov	s16, r0
 8018372:	eddf 7a13 	vldr	s15, [pc, #76]	; 80183c0 <strtof+0xac>
 8018376:	eeb0 7ac8 	vabs.f32	s14, s16
 801837a:	eeb4 7a67 	vcmp.f32	s14, s15
 801837e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018382:	dde4      	ble.n	801834e <strtof+0x3a>
 8018384:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8018388:	4b0e      	ldr	r3, [pc, #56]	; (80183c4 <strtof+0xb0>)
 801838a:	f04f 32ff 	mov.w	r2, #4294967295
 801838e:	4620      	mov	r0, r4
 8018390:	4649      	mov	r1, r9
 8018392:	f7e8 fbeb 	bl	8000b6c <__aeabi_dcmpun>
 8018396:	b940      	cbnz	r0, 80183aa <strtof+0x96>
 8018398:	4b0a      	ldr	r3, [pc, #40]	; (80183c4 <strtof+0xb0>)
 801839a:	f04f 32ff 	mov.w	r2, #4294967295
 801839e:	4620      	mov	r0, r4
 80183a0:	4649      	mov	r1, r9
 80183a2:	f7e8 fbc5 	bl	8000b30 <__aeabi_dcmple>
 80183a6:	2800      	cmp	r0, #0
 80183a8:	d0d1      	beq.n	801834e <strtof+0x3a>
 80183aa:	6833      	ldr	r3, [r6, #0]
 80183ac:	2222      	movs	r2, #34	; 0x22
 80183ae:	601a      	str	r2, [r3, #0]
 80183b0:	e7cd      	b.n	801834e <strtof+0x3a>
 80183b2:	bf00      	nop
 80183b4:	2000000c 	.word	0x2000000c
 80183b8:	20000074 	.word	0x20000074
 80183bc:	0801af1f 	.word	0x0801af1f
 80183c0:	7f7fffff 	.word	0x7f7fffff
 80183c4:	7fefffff 	.word	0x7fefffff

080183c8 <_strtol_l.isra.0>:
 80183c8:	2b01      	cmp	r3, #1
 80183ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183ce:	d001      	beq.n	80183d4 <_strtol_l.isra.0+0xc>
 80183d0:	2b24      	cmp	r3, #36	; 0x24
 80183d2:	d906      	bls.n	80183e2 <_strtol_l.isra.0+0x1a>
 80183d4:	f7fe ffd0 	bl	8017378 <__errno>
 80183d8:	2316      	movs	r3, #22
 80183da:	6003      	str	r3, [r0, #0]
 80183dc:	2000      	movs	r0, #0
 80183de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183e2:	4f3a      	ldr	r7, [pc, #232]	; (80184cc <_strtol_l.isra.0+0x104>)
 80183e4:	468e      	mov	lr, r1
 80183e6:	4676      	mov	r6, lr
 80183e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80183ec:	5de5      	ldrb	r5, [r4, r7]
 80183ee:	f015 0508 	ands.w	r5, r5, #8
 80183f2:	d1f8      	bne.n	80183e6 <_strtol_l.isra.0+0x1e>
 80183f4:	2c2d      	cmp	r4, #45	; 0x2d
 80183f6:	d134      	bne.n	8018462 <_strtol_l.isra.0+0x9a>
 80183f8:	f89e 4000 	ldrb.w	r4, [lr]
 80183fc:	f04f 0801 	mov.w	r8, #1
 8018400:	f106 0e02 	add.w	lr, r6, #2
 8018404:	2b00      	cmp	r3, #0
 8018406:	d05c      	beq.n	80184c2 <_strtol_l.isra.0+0xfa>
 8018408:	2b10      	cmp	r3, #16
 801840a:	d10c      	bne.n	8018426 <_strtol_l.isra.0+0x5e>
 801840c:	2c30      	cmp	r4, #48	; 0x30
 801840e:	d10a      	bne.n	8018426 <_strtol_l.isra.0+0x5e>
 8018410:	f89e 4000 	ldrb.w	r4, [lr]
 8018414:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018418:	2c58      	cmp	r4, #88	; 0x58
 801841a:	d14d      	bne.n	80184b8 <_strtol_l.isra.0+0xf0>
 801841c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8018420:	2310      	movs	r3, #16
 8018422:	f10e 0e02 	add.w	lr, lr, #2
 8018426:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801842a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801842e:	2600      	movs	r6, #0
 8018430:	fbbc f9f3 	udiv	r9, ip, r3
 8018434:	4635      	mov	r5, r6
 8018436:	fb03 ca19 	mls	sl, r3, r9, ip
 801843a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801843e:	2f09      	cmp	r7, #9
 8018440:	d818      	bhi.n	8018474 <_strtol_l.isra.0+0xac>
 8018442:	463c      	mov	r4, r7
 8018444:	42a3      	cmp	r3, r4
 8018446:	dd24      	ble.n	8018492 <_strtol_l.isra.0+0xca>
 8018448:	2e00      	cmp	r6, #0
 801844a:	db1f      	blt.n	801848c <_strtol_l.isra.0+0xc4>
 801844c:	45a9      	cmp	r9, r5
 801844e:	d31d      	bcc.n	801848c <_strtol_l.isra.0+0xc4>
 8018450:	d101      	bne.n	8018456 <_strtol_l.isra.0+0x8e>
 8018452:	45a2      	cmp	sl, r4
 8018454:	db1a      	blt.n	801848c <_strtol_l.isra.0+0xc4>
 8018456:	fb05 4503 	mla	r5, r5, r3, r4
 801845a:	2601      	movs	r6, #1
 801845c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018460:	e7eb      	b.n	801843a <_strtol_l.isra.0+0x72>
 8018462:	2c2b      	cmp	r4, #43	; 0x2b
 8018464:	bf08      	it	eq
 8018466:	f89e 4000 	ldrbeq.w	r4, [lr]
 801846a:	46a8      	mov	r8, r5
 801846c:	bf08      	it	eq
 801846e:	f106 0e02 	addeq.w	lr, r6, #2
 8018472:	e7c7      	b.n	8018404 <_strtol_l.isra.0+0x3c>
 8018474:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018478:	2f19      	cmp	r7, #25
 801847a:	d801      	bhi.n	8018480 <_strtol_l.isra.0+0xb8>
 801847c:	3c37      	subs	r4, #55	; 0x37
 801847e:	e7e1      	b.n	8018444 <_strtol_l.isra.0+0x7c>
 8018480:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018484:	2f19      	cmp	r7, #25
 8018486:	d804      	bhi.n	8018492 <_strtol_l.isra.0+0xca>
 8018488:	3c57      	subs	r4, #87	; 0x57
 801848a:	e7db      	b.n	8018444 <_strtol_l.isra.0+0x7c>
 801848c:	f04f 36ff 	mov.w	r6, #4294967295
 8018490:	e7e4      	b.n	801845c <_strtol_l.isra.0+0x94>
 8018492:	2e00      	cmp	r6, #0
 8018494:	da05      	bge.n	80184a2 <_strtol_l.isra.0+0xda>
 8018496:	2322      	movs	r3, #34	; 0x22
 8018498:	6003      	str	r3, [r0, #0]
 801849a:	4665      	mov	r5, ip
 801849c:	b942      	cbnz	r2, 80184b0 <_strtol_l.isra.0+0xe8>
 801849e:	4628      	mov	r0, r5
 80184a0:	e79d      	b.n	80183de <_strtol_l.isra.0+0x16>
 80184a2:	f1b8 0f00 	cmp.w	r8, #0
 80184a6:	d000      	beq.n	80184aa <_strtol_l.isra.0+0xe2>
 80184a8:	426d      	negs	r5, r5
 80184aa:	2a00      	cmp	r2, #0
 80184ac:	d0f7      	beq.n	801849e <_strtol_l.isra.0+0xd6>
 80184ae:	b10e      	cbz	r6, 80184b4 <_strtol_l.isra.0+0xec>
 80184b0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80184b4:	6011      	str	r1, [r2, #0]
 80184b6:	e7f2      	b.n	801849e <_strtol_l.isra.0+0xd6>
 80184b8:	2430      	movs	r4, #48	; 0x30
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d1b3      	bne.n	8018426 <_strtol_l.isra.0+0x5e>
 80184be:	2308      	movs	r3, #8
 80184c0:	e7b1      	b.n	8018426 <_strtol_l.isra.0+0x5e>
 80184c2:	2c30      	cmp	r4, #48	; 0x30
 80184c4:	d0a4      	beq.n	8018410 <_strtol_l.isra.0+0x48>
 80184c6:	230a      	movs	r3, #10
 80184c8:	e7ad      	b.n	8018426 <_strtol_l.isra.0+0x5e>
 80184ca:	bf00      	nop
 80184cc:	0801abde 	.word	0x0801abde

080184d0 <strtol>:
 80184d0:	4613      	mov	r3, r2
 80184d2:	460a      	mov	r2, r1
 80184d4:	4601      	mov	r1, r0
 80184d6:	4802      	ldr	r0, [pc, #8]	; (80184e0 <strtol+0x10>)
 80184d8:	6800      	ldr	r0, [r0, #0]
 80184da:	f7ff bf75 	b.w	80183c8 <_strtol_l.isra.0>
 80184de:	bf00      	nop
 80184e0:	2000000c 	.word	0x2000000c

080184e4 <__utoa>:
 80184e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184e6:	4c1f      	ldr	r4, [pc, #124]	; (8018564 <__utoa+0x80>)
 80184e8:	b08b      	sub	sp, #44	; 0x2c
 80184ea:	4605      	mov	r5, r0
 80184ec:	460b      	mov	r3, r1
 80184ee:	466e      	mov	r6, sp
 80184f0:	f104 0c20 	add.w	ip, r4, #32
 80184f4:	6820      	ldr	r0, [r4, #0]
 80184f6:	6861      	ldr	r1, [r4, #4]
 80184f8:	4637      	mov	r7, r6
 80184fa:	c703      	stmia	r7!, {r0, r1}
 80184fc:	3408      	adds	r4, #8
 80184fe:	4564      	cmp	r4, ip
 8018500:	463e      	mov	r6, r7
 8018502:	d1f7      	bne.n	80184f4 <__utoa+0x10>
 8018504:	7921      	ldrb	r1, [r4, #4]
 8018506:	7139      	strb	r1, [r7, #4]
 8018508:	1e91      	subs	r1, r2, #2
 801850a:	6820      	ldr	r0, [r4, #0]
 801850c:	6038      	str	r0, [r7, #0]
 801850e:	2922      	cmp	r1, #34	; 0x22
 8018510:	f04f 0100 	mov.w	r1, #0
 8018514:	d904      	bls.n	8018520 <__utoa+0x3c>
 8018516:	7019      	strb	r1, [r3, #0]
 8018518:	460b      	mov	r3, r1
 801851a:	4618      	mov	r0, r3
 801851c:	b00b      	add	sp, #44	; 0x2c
 801851e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018520:	1e58      	subs	r0, r3, #1
 8018522:	4684      	mov	ip, r0
 8018524:	fbb5 f7f2 	udiv	r7, r5, r2
 8018528:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801852c:	fb02 5617 	mls	r6, r2, r7, r5
 8018530:	4476      	add	r6, lr
 8018532:	460c      	mov	r4, r1
 8018534:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8018538:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801853c:	462e      	mov	r6, r5
 801853e:	42b2      	cmp	r2, r6
 8018540:	f101 0101 	add.w	r1, r1, #1
 8018544:	463d      	mov	r5, r7
 8018546:	d9ed      	bls.n	8018524 <__utoa+0x40>
 8018548:	2200      	movs	r2, #0
 801854a:	545a      	strb	r2, [r3, r1]
 801854c:	1919      	adds	r1, r3, r4
 801854e:	1aa5      	subs	r5, r4, r2
 8018550:	42aa      	cmp	r2, r5
 8018552:	dae2      	bge.n	801851a <__utoa+0x36>
 8018554:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8018558:	780e      	ldrb	r6, [r1, #0]
 801855a:	7006      	strb	r6, [r0, #0]
 801855c:	3201      	adds	r2, #1
 801855e:	f801 5901 	strb.w	r5, [r1], #-1
 8018562:	e7f4      	b.n	801854e <__utoa+0x6a>
 8018564:	0801abb8 	.word	0x0801abb8

08018568 <rshift>:
 8018568:	6903      	ldr	r3, [r0, #16]
 801856a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801856e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018572:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018576:	f100 0414 	add.w	r4, r0, #20
 801857a:	dd45      	ble.n	8018608 <rshift+0xa0>
 801857c:	f011 011f 	ands.w	r1, r1, #31
 8018580:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018584:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018588:	d10c      	bne.n	80185a4 <rshift+0x3c>
 801858a:	f100 0710 	add.w	r7, r0, #16
 801858e:	4629      	mov	r1, r5
 8018590:	42b1      	cmp	r1, r6
 8018592:	d334      	bcc.n	80185fe <rshift+0x96>
 8018594:	1a9b      	subs	r3, r3, r2
 8018596:	009b      	lsls	r3, r3, #2
 8018598:	1eea      	subs	r2, r5, #3
 801859a:	4296      	cmp	r6, r2
 801859c:	bf38      	it	cc
 801859e:	2300      	movcc	r3, #0
 80185a0:	4423      	add	r3, r4
 80185a2:	e015      	b.n	80185d0 <rshift+0x68>
 80185a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80185a8:	f1c1 0820 	rsb	r8, r1, #32
 80185ac:	40cf      	lsrs	r7, r1
 80185ae:	f105 0e04 	add.w	lr, r5, #4
 80185b2:	46a1      	mov	r9, r4
 80185b4:	4576      	cmp	r6, lr
 80185b6:	46f4      	mov	ip, lr
 80185b8:	d815      	bhi.n	80185e6 <rshift+0x7e>
 80185ba:	1a9b      	subs	r3, r3, r2
 80185bc:	009a      	lsls	r2, r3, #2
 80185be:	3a04      	subs	r2, #4
 80185c0:	3501      	adds	r5, #1
 80185c2:	42ae      	cmp	r6, r5
 80185c4:	bf38      	it	cc
 80185c6:	2200      	movcc	r2, #0
 80185c8:	18a3      	adds	r3, r4, r2
 80185ca:	50a7      	str	r7, [r4, r2]
 80185cc:	b107      	cbz	r7, 80185d0 <rshift+0x68>
 80185ce:	3304      	adds	r3, #4
 80185d0:	1b1a      	subs	r2, r3, r4
 80185d2:	42a3      	cmp	r3, r4
 80185d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80185d8:	bf08      	it	eq
 80185da:	2300      	moveq	r3, #0
 80185dc:	6102      	str	r2, [r0, #16]
 80185de:	bf08      	it	eq
 80185e0:	6143      	streq	r3, [r0, #20]
 80185e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80185e6:	f8dc c000 	ldr.w	ip, [ip]
 80185ea:	fa0c fc08 	lsl.w	ip, ip, r8
 80185ee:	ea4c 0707 	orr.w	r7, ip, r7
 80185f2:	f849 7b04 	str.w	r7, [r9], #4
 80185f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80185fa:	40cf      	lsrs	r7, r1
 80185fc:	e7da      	b.n	80185b4 <rshift+0x4c>
 80185fe:	f851 cb04 	ldr.w	ip, [r1], #4
 8018602:	f847 cf04 	str.w	ip, [r7, #4]!
 8018606:	e7c3      	b.n	8018590 <rshift+0x28>
 8018608:	4623      	mov	r3, r4
 801860a:	e7e1      	b.n	80185d0 <rshift+0x68>

0801860c <__hexdig_fun>:
 801860c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018610:	2b09      	cmp	r3, #9
 8018612:	d802      	bhi.n	801861a <__hexdig_fun+0xe>
 8018614:	3820      	subs	r0, #32
 8018616:	b2c0      	uxtb	r0, r0
 8018618:	4770      	bx	lr
 801861a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801861e:	2b05      	cmp	r3, #5
 8018620:	d801      	bhi.n	8018626 <__hexdig_fun+0x1a>
 8018622:	3847      	subs	r0, #71	; 0x47
 8018624:	e7f7      	b.n	8018616 <__hexdig_fun+0xa>
 8018626:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801862a:	2b05      	cmp	r3, #5
 801862c:	d801      	bhi.n	8018632 <__hexdig_fun+0x26>
 801862e:	3827      	subs	r0, #39	; 0x27
 8018630:	e7f1      	b.n	8018616 <__hexdig_fun+0xa>
 8018632:	2000      	movs	r0, #0
 8018634:	4770      	bx	lr
	...

08018638 <__gethex>:
 8018638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801863c:	ed2d 8b02 	vpush	{d8}
 8018640:	b089      	sub	sp, #36	; 0x24
 8018642:	ee08 0a10 	vmov	s16, r0
 8018646:	9304      	str	r3, [sp, #16]
 8018648:	4bbc      	ldr	r3, [pc, #752]	; (801893c <__gethex+0x304>)
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	9301      	str	r3, [sp, #4]
 801864e:	4618      	mov	r0, r3
 8018650:	468b      	mov	fp, r1
 8018652:	4690      	mov	r8, r2
 8018654:	f7e7 fe2c 	bl	80002b0 <strlen>
 8018658:	9b01      	ldr	r3, [sp, #4]
 801865a:	f8db 2000 	ldr.w	r2, [fp]
 801865e:	4403      	add	r3, r0
 8018660:	4682      	mov	sl, r0
 8018662:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018666:	9305      	str	r3, [sp, #20]
 8018668:	1c93      	adds	r3, r2, #2
 801866a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801866e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018672:	32fe      	adds	r2, #254	; 0xfe
 8018674:	18d1      	adds	r1, r2, r3
 8018676:	461f      	mov	r7, r3
 8018678:	f813 0b01 	ldrb.w	r0, [r3], #1
 801867c:	9100      	str	r1, [sp, #0]
 801867e:	2830      	cmp	r0, #48	; 0x30
 8018680:	d0f8      	beq.n	8018674 <__gethex+0x3c>
 8018682:	f7ff ffc3 	bl	801860c <__hexdig_fun>
 8018686:	4604      	mov	r4, r0
 8018688:	2800      	cmp	r0, #0
 801868a:	d13a      	bne.n	8018702 <__gethex+0xca>
 801868c:	9901      	ldr	r1, [sp, #4]
 801868e:	4652      	mov	r2, sl
 8018690:	4638      	mov	r0, r7
 8018692:	f000 ffcf 	bl	8019634 <strncmp>
 8018696:	4605      	mov	r5, r0
 8018698:	2800      	cmp	r0, #0
 801869a:	d168      	bne.n	801876e <__gethex+0x136>
 801869c:	f817 000a 	ldrb.w	r0, [r7, sl]
 80186a0:	eb07 060a 	add.w	r6, r7, sl
 80186a4:	f7ff ffb2 	bl	801860c <__hexdig_fun>
 80186a8:	2800      	cmp	r0, #0
 80186aa:	d062      	beq.n	8018772 <__gethex+0x13a>
 80186ac:	4633      	mov	r3, r6
 80186ae:	7818      	ldrb	r0, [r3, #0]
 80186b0:	2830      	cmp	r0, #48	; 0x30
 80186b2:	461f      	mov	r7, r3
 80186b4:	f103 0301 	add.w	r3, r3, #1
 80186b8:	d0f9      	beq.n	80186ae <__gethex+0x76>
 80186ba:	f7ff ffa7 	bl	801860c <__hexdig_fun>
 80186be:	2301      	movs	r3, #1
 80186c0:	fab0 f480 	clz	r4, r0
 80186c4:	0964      	lsrs	r4, r4, #5
 80186c6:	4635      	mov	r5, r6
 80186c8:	9300      	str	r3, [sp, #0]
 80186ca:	463a      	mov	r2, r7
 80186cc:	4616      	mov	r6, r2
 80186ce:	3201      	adds	r2, #1
 80186d0:	7830      	ldrb	r0, [r6, #0]
 80186d2:	f7ff ff9b 	bl	801860c <__hexdig_fun>
 80186d6:	2800      	cmp	r0, #0
 80186d8:	d1f8      	bne.n	80186cc <__gethex+0x94>
 80186da:	9901      	ldr	r1, [sp, #4]
 80186dc:	4652      	mov	r2, sl
 80186de:	4630      	mov	r0, r6
 80186e0:	f000 ffa8 	bl	8019634 <strncmp>
 80186e4:	b980      	cbnz	r0, 8018708 <__gethex+0xd0>
 80186e6:	b94d      	cbnz	r5, 80186fc <__gethex+0xc4>
 80186e8:	eb06 050a 	add.w	r5, r6, sl
 80186ec:	462a      	mov	r2, r5
 80186ee:	4616      	mov	r6, r2
 80186f0:	3201      	adds	r2, #1
 80186f2:	7830      	ldrb	r0, [r6, #0]
 80186f4:	f7ff ff8a 	bl	801860c <__hexdig_fun>
 80186f8:	2800      	cmp	r0, #0
 80186fa:	d1f8      	bne.n	80186ee <__gethex+0xb6>
 80186fc:	1bad      	subs	r5, r5, r6
 80186fe:	00ad      	lsls	r5, r5, #2
 8018700:	e004      	b.n	801870c <__gethex+0xd4>
 8018702:	2400      	movs	r4, #0
 8018704:	4625      	mov	r5, r4
 8018706:	e7e0      	b.n	80186ca <__gethex+0x92>
 8018708:	2d00      	cmp	r5, #0
 801870a:	d1f7      	bne.n	80186fc <__gethex+0xc4>
 801870c:	7833      	ldrb	r3, [r6, #0]
 801870e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018712:	2b50      	cmp	r3, #80	; 0x50
 8018714:	d13b      	bne.n	801878e <__gethex+0x156>
 8018716:	7873      	ldrb	r3, [r6, #1]
 8018718:	2b2b      	cmp	r3, #43	; 0x2b
 801871a:	d02c      	beq.n	8018776 <__gethex+0x13e>
 801871c:	2b2d      	cmp	r3, #45	; 0x2d
 801871e:	d02e      	beq.n	801877e <__gethex+0x146>
 8018720:	1c71      	adds	r1, r6, #1
 8018722:	f04f 0900 	mov.w	r9, #0
 8018726:	7808      	ldrb	r0, [r1, #0]
 8018728:	f7ff ff70 	bl	801860c <__hexdig_fun>
 801872c:	1e43      	subs	r3, r0, #1
 801872e:	b2db      	uxtb	r3, r3
 8018730:	2b18      	cmp	r3, #24
 8018732:	d82c      	bhi.n	801878e <__gethex+0x156>
 8018734:	f1a0 0210 	sub.w	r2, r0, #16
 8018738:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801873c:	f7ff ff66 	bl	801860c <__hexdig_fun>
 8018740:	1e43      	subs	r3, r0, #1
 8018742:	b2db      	uxtb	r3, r3
 8018744:	2b18      	cmp	r3, #24
 8018746:	d91d      	bls.n	8018784 <__gethex+0x14c>
 8018748:	f1b9 0f00 	cmp.w	r9, #0
 801874c:	d000      	beq.n	8018750 <__gethex+0x118>
 801874e:	4252      	negs	r2, r2
 8018750:	4415      	add	r5, r2
 8018752:	f8cb 1000 	str.w	r1, [fp]
 8018756:	b1e4      	cbz	r4, 8018792 <__gethex+0x15a>
 8018758:	9b00      	ldr	r3, [sp, #0]
 801875a:	2b00      	cmp	r3, #0
 801875c:	bf14      	ite	ne
 801875e:	2700      	movne	r7, #0
 8018760:	2706      	moveq	r7, #6
 8018762:	4638      	mov	r0, r7
 8018764:	b009      	add	sp, #36	; 0x24
 8018766:	ecbd 8b02 	vpop	{d8}
 801876a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801876e:	463e      	mov	r6, r7
 8018770:	4625      	mov	r5, r4
 8018772:	2401      	movs	r4, #1
 8018774:	e7ca      	b.n	801870c <__gethex+0xd4>
 8018776:	f04f 0900 	mov.w	r9, #0
 801877a:	1cb1      	adds	r1, r6, #2
 801877c:	e7d3      	b.n	8018726 <__gethex+0xee>
 801877e:	f04f 0901 	mov.w	r9, #1
 8018782:	e7fa      	b.n	801877a <__gethex+0x142>
 8018784:	230a      	movs	r3, #10
 8018786:	fb03 0202 	mla	r2, r3, r2, r0
 801878a:	3a10      	subs	r2, #16
 801878c:	e7d4      	b.n	8018738 <__gethex+0x100>
 801878e:	4631      	mov	r1, r6
 8018790:	e7df      	b.n	8018752 <__gethex+0x11a>
 8018792:	1bf3      	subs	r3, r6, r7
 8018794:	3b01      	subs	r3, #1
 8018796:	4621      	mov	r1, r4
 8018798:	2b07      	cmp	r3, #7
 801879a:	dc0b      	bgt.n	80187b4 <__gethex+0x17c>
 801879c:	ee18 0a10 	vmov	r0, s16
 80187a0:	f000 fa70 	bl	8018c84 <_Balloc>
 80187a4:	4604      	mov	r4, r0
 80187a6:	b940      	cbnz	r0, 80187ba <__gethex+0x182>
 80187a8:	4b65      	ldr	r3, [pc, #404]	; (8018940 <__gethex+0x308>)
 80187aa:	4602      	mov	r2, r0
 80187ac:	21de      	movs	r1, #222	; 0xde
 80187ae:	4865      	ldr	r0, [pc, #404]	; (8018944 <__gethex+0x30c>)
 80187b0:	f000 ff60 	bl	8019674 <__assert_func>
 80187b4:	3101      	adds	r1, #1
 80187b6:	105b      	asrs	r3, r3, #1
 80187b8:	e7ee      	b.n	8018798 <__gethex+0x160>
 80187ba:	f100 0914 	add.w	r9, r0, #20
 80187be:	f04f 0b00 	mov.w	fp, #0
 80187c2:	f1ca 0301 	rsb	r3, sl, #1
 80187c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80187ca:	f8cd b000 	str.w	fp, [sp]
 80187ce:	9306      	str	r3, [sp, #24]
 80187d0:	42b7      	cmp	r7, r6
 80187d2:	d340      	bcc.n	8018856 <__gethex+0x21e>
 80187d4:	9802      	ldr	r0, [sp, #8]
 80187d6:	9b00      	ldr	r3, [sp, #0]
 80187d8:	f840 3b04 	str.w	r3, [r0], #4
 80187dc:	eba0 0009 	sub.w	r0, r0, r9
 80187e0:	1080      	asrs	r0, r0, #2
 80187e2:	0146      	lsls	r6, r0, #5
 80187e4:	6120      	str	r0, [r4, #16]
 80187e6:	4618      	mov	r0, r3
 80187e8:	f000 fb42 	bl	8018e70 <__hi0bits>
 80187ec:	1a30      	subs	r0, r6, r0
 80187ee:	f8d8 6000 	ldr.w	r6, [r8]
 80187f2:	42b0      	cmp	r0, r6
 80187f4:	dd63      	ble.n	80188be <__gethex+0x286>
 80187f6:	1b87      	subs	r7, r0, r6
 80187f8:	4639      	mov	r1, r7
 80187fa:	4620      	mov	r0, r4
 80187fc:	f000 fedc 	bl	80195b8 <__any_on>
 8018800:	4682      	mov	sl, r0
 8018802:	b1a8      	cbz	r0, 8018830 <__gethex+0x1f8>
 8018804:	1e7b      	subs	r3, r7, #1
 8018806:	1159      	asrs	r1, r3, #5
 8018808:	f003 021f 	and.w	r2, r3, #31
 801880c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018810:	f04f 0a01 	mov.w	sl, #1
 8018814:	fa0a f202 	lsl.w	r2, sl, r2
 8018818:	420a      	tst	r2, r1
 801881a:	d009      	beq.n	8018830 <__gethex+0x1f8>
 801881c:	4553      	cmp	r3, sl
 801881e:	dd05      	ble.n	801882c <__gethex+0x1f4>
 8018820:	1eb9      	subs	r1, r7, #2
 8018822:	4620      	mov	r0, r4
 8018824:	f000 fec8 	bl	80195b8 <__any_on>
 8018828:	2800      	cmp	r0, #0
 801882a:	d145      	bne.n	80188b8 <__gethex+0x280>
 801882c:	f04f 0a02 	mov.w	sl, #2
 8018830:	4639      	mov	r1, r7
 8018832:	4620      	mov	r0, r4
 8018834:	f7ff fe98 	bl	8018568 <rshift>
 8018838:	443d      	add	r5, r7
 801883a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801883e:	42ab      	cmp	r3, r5
 8018840:	da4c      	bge.n	80188dc <__gethex+0x2a4>
 8018842:	ee18 0a10 	vmov	r0, s16
 8018846:	4621      	mov	r1, r4
 8018848:	f000 fa5c 	bl	8018d04 <_Bfree>
 801884c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801884e:	2300      	movs	r3, #0
 8018850:	6013      	str	r3, [r2, #0]
 8018852:	27a3      	movs	r7, #163	; 0xa3
 8018854:	e785      	b.n	8018762 <__gethex+0x12a>
 8018856:	1e73      	subs	r3, r6, #1
 8018858:	9a05      	ldr	r2, [sp, #20]
 801885a:	9303      	str	r3, [sp, #12]
 801885c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018860:	4293      	cmp	r3, r2
 8018862:	d019      	beq.n	8018898 <__gethex+0x260>
 8018864:	f1bb 0f20 	cmp.w	fp, #32
 8018868:	d107      	bne.n	801887a <__gethex+0x242>
 801886a:	9b02      	ldr	r3, [sp, #8]
 801886c:	9a00      	ldr	r2, [sp, #0]
 801886e:	f843 2b04 	str.w	r2, [r3], #4
 8018872:	9302      	str	r3, [sp, #8]
 8018874:	2300      	movs	r3, #0
 8018876:	9300      	str	r3, [sp, #0]
 8018878:	469b      	mov	fp, r3
 801887a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801887e:	f7ff fec5 	bl	801860c <__hexdig_fun>
 8018882:	9b00      	ldr	r3, [sp, #0]
 8018884:	f000 000f 	and.w	r0, r0, #15
 8018888:	fa00 f00b 	lsl.w	r0, r0, fp
 801888c:	4303      	orrs	r3, r0
 801888e:	9300      	str	r3, [sp, #0]
 8018890:	f10b 0b04 	add.w	fp, fp, #4
 8018894:	9b03      	ldr	r3, [sp, #12]
 8018896:	e00d      	b.n	80188b4 <__gethex+0x27c>
 8018898:	9b03      	ldr	r3, [sp, #12]
 801889a:	9a06      	ldr	r2, [sp, #24]
 801889c:	4413      	add	r3, r2
 801889e:	42bb      	cmp	r3, r7
 80188a0:	d3e0      	bcc.n	8018864 <__gethex+0x22c>
 80188a2:	4618      	mov	r0, r3
 80188a4:	9901      	ldr	r1, [sp, #4]
 80188a6:	9307      	str	r3, [sp, #28]
 80188a8:	4652      	mov	r2, sl
 80188aa:	f000 fec3 	bl	8019634 <strncmp>
 80188ae:	9b07      	ldr	r3, [sp, #28]
 80188b0:	2800      	cmp	r0, #0
 80188b2:	d1d7      	bne.n	8018864 <__gethex+0x22c>
 80188b4:	461e      	mov	r6, r3
 80188b6:	e78b      	b.n	80187d0 <__gethex+0x198>
 80188b8:	f04f 0a03 	mov.w	sl, #3
 80188bc:	e7b8      	b.n	8018830 <__gethex+0x1f8>
 80188be:	da0a      	bge.n	80188d6 <__gethex+0x29e>
 80188c0:	1a37      	subs	r7, r6, r0
 80188c2:	4621      	mov	r1, r4
 80188c4:	ee18 0a10 	vmov	r0, s16
 80188c8:	463a      	mov	r2, r7
 80188ca:	f000 fc37 	bl	801913c <__lshift>
 80188ce:	1bed      	subs	r5, r5, r7
 80188d0:	4604      	mov	r4, r0
 80188d2:	f100 0914 	add.w	r9, r0, #20
 80188d6:	f04f 0a00 	mov.w	sl, #0
 80188da:	e7ae      	b.n	801883a <__gethex+0x202>
 80188dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80188e0:	42a8      	cmp	r0, r5
 80188e2:	dd72      	ble.n	80189ca <__gethex+0x392>
 80188e4:	1b45      	subs	r5, r0, r5
 80188e6:	42ae      	cmp	r6, r5
 80188e8:	dc36      	bgt.n	8018958 <__gethex+0x320>
 80188ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80188ee:	2b02      	cmp	r3, #2
 80188f0:	d02a      	beq.n	8018948 <__gethex+0x310>
 80188f2:	2b03      	cmp	r3, #3
 80188f4:	d02c      	beq.n	8018950 <__gethex+0x318>
 80188f6:	2b01      	cmp	r3, #1
 80188f8:	d115      	bne.n	8018926 <__gethex+0x2ee>
 80188fa:	42ae      	cmp	r6, r5
 80188fc:	d113      	bne.n	8018926 <__gethex+0x2ee>
 80188fe:	2e01      	cmp	r6, #1
 8018900:	d10b      	bne.n	801891a <__gethex+0x2e2>
 8018902:	9a04      	ldr	r2, [sp, #16]
 8018904:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018908:	6013      	str	r3, [r2, #0]
 801890a:	2301      	movs	r3, #1
 801890c:	6123      	str	r3, [r4, #16]
 801890e:	f8c9 3000 	str.w	r3, [r9]
 8018912:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018914:	2762      	movs	r7, #98	; 0x62
 8018916:	601c      	str	r4, [r3, #0]
 8018918:	e723      	b.n	8018762 <__gethex+0x12a>
 801891a:	1e71      	subs	r1, r6, #1
 801891c:	4620      	mov	r0, r4
 801891e:	f000 fe4b 	bl	80195b8 <__any_on>
 8018922:	2800      	cmp	r0, #0
 8018924:	d1ed      	bne.n	8018902 <__gethex+0x2ca>
 8018926:	ee18 0a10 	vmov	r0, s16
 801892a:	4621      	mov	r1, r4
 801892c:	f000 f9ea 	bl	8018d04 <_Bfree>
 8018930:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018932:	2300      	movs	r3, #0
 8018934:	6013      	str	r3, [r2, #0]
 8018936:	2750      	movs	r7, #80	; 0x50
 8018938:	e713      	b.n	8018762 <__gethex+0x12a>
 801893a:	bf00      	nop
 801893c:	0801ad58 	.word	0x0801ad58
 8018940:	0801acde 	.word	0x0801acde
 8018944:	0801acef 	.word	0x0801acef
 8018948:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801894a:	2b00      	cmp	r3, #0
 801894c:	d1eb      	bne.n	8018926 <__gethex+0x2ee>
 801894e:	e7d8      	b.n	8018902 <__gethex+0x2ca>
 8018950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018952:	2b00      	cmp	r3, #0
 8018954:	d1d5      	bne.n	8018902 <__gethex+0x2ca>
 8018956:	e7e6      	b.n	8018926 <__gethex+0x2ee>
 8018958:	1e6f      	subs	r7, r5, #1
 801895a:	f1ba 0f00 	cmp.w	sl, #0
 801895e:	d131      	bne.n	80189c4 <__gethex+0x38c>
 8018960:	b127      	cbz	r7, 801896c <__gethex+0x334>
 8018962:	4639      	mov	r1, r7
 8018964:	4620      	mov	r0, r4
 8018966:	f000 fe27 	bl	80195b8 <__any_on>
 801896a:	4682      	mov	sl, r0
 801896c:	117b      	asrs	r3, r7, #5
 801896e:	2101      	movs	r1, #1
 8018970:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018974:	f007 071f 	and.w	r7, r7, #31
 8018978:	fa01 f707 	lsl.w	r7, r1, r7
 801897c:	421f      	tst	r7, r3
 801897e:	4629      	mov	r1, r5
 8018980:	4620      	mov	r0, r4
 8018982:	bf18      	it	ne
 8018984:	f04a 0a02 	orrne.w	sl, sl, #2
 8018988:	1b76      	subs	r6, r6, r5
 801898a:	f7ff fded 	bl	8018568 <rshift>
 801898e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018992:	2702      	movs	r7, #2
 8018994:	f1ba 0f00 	cmp.w	sl, #0
 8018998:	d048      	beq.n	8018a2c <__gethex+0x3f4>
 801899a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801899e:	2b02      	cmp	r3, #2
 80189a0:	d015      	beq.n	80189ce <__gethex+0x396>
 80189a2:	2b03      	cmp	r3, #3
 80189a4:	d017      	beq.n	80189d6 <__gethex+0x39e>
 80189a6:	2b01      	cmp	r3, #1
 80189a8:	d109      	bne.n	80189be <__gethex+0x386>
 80189aa:	f01a 0f02 	tst.w	sl, #2
 80189ae:	d006      	beq.n	80189be <__gethex+0x386>
 80189b0:	f8d9 0000 	ldr.w	r0, [r9]
 80189b4:	ea4a 0a00 	orr.w	sl, sl, r0
 80189b8:	f01a 0f01 	tst.w	sl, #1
 80189bc:	d10e      	bne.n	80189dc <__gethex+0x3a4>
 80189be:	f047 0710 	orr.w	r7, r7, #16
 80189c2:	e033      	b.n	8018a2c <__gethex+0x3f4>
 80189c4:	f04f 0a01 	mov.w	sl, #1
 80189c8:	e7d0      	b.n	801896c <__gethex+0x334>
 80189ca:	2701      	movs	r7, #1
 80189cc:	e7e2      	b.n	8018994 <__gethex+0x35c>
 80189ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189d0:	f1c3 0301 	rsb	r3, r3, #1
 80189d4:	9315      	str	r3, [sp, #84]	; 0x54
 80189d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d0f0      	beq.n	80189be <__gethex+0x386>
 80189dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80189e0:	f104 0314 	add.w	r3, r4, #20
 80189e4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80189e8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80189ec:	f04f 0c00 	mov.w	ip, #0
 80189f0:	4618      	mov	r0, r3
 80189f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80189f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80189fa:	d01c      	beq.n	8018a36 <__gethex+0x3fe>
 80189fc:	3201      	adds	r2, #1
 80189fe:	6002      	str	r2, [r0, #0]
 8018a00:	2f02      	cmp	r7, #2
 8018a02:	f104 0314 	add.w	r3, r4, #20
 8018a06:	d13f      	bne.n	8018a88 <__gethex+0x450>
 8018a08:	f8d8 2000 	ldr.w	r2, [r8]
 8018a0c:	3a01      	subs	r2, #1
 8018a0e:	42b2      	cmp	r2, r6
 8018a10:	d10a      	bne.n	8018a28 <__gethex+0x3f0>
 8018a12:	1171      	asrs	r1, r6, #5
 8018a14:	2201      	movs	r2, #1
 8018a16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018a1a:	f006 061f 	and.w	r6, r6, #31
 8018a1e:	fa02 f606 	lsl.w	r6, r2, r6
 8018a22:	421e      	tst	r6, r3
 8018a24:	bf18      	it	ne
 8018a26:	4617      	movne	r7, r2
 8018a28:	f047 0720 	orr.w	r7, r7, #32
 8018a2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018a2e:	601c      	str	r4, [r3, #0]
 8018a30:	9b04      	ldr	r3, [sp, #16]
 8018a32:	601d      	str	r5, [r3, #0]
 8018a34:	e695      	b.n	8018762 <__gethex+0x12a>
 8018a36:	4299      	cmp	r1, r3
 8018a38:	f843 cc04 	str.w	ip, [r3, #-4]
 8018a3c:	d8d8      	bhi.n	80189f0 <__gethex+0x3b8>
 8018a3e:	68a3      	ldr	r3, [r4, #8]
 8018a40:	459b      	cmp	fp, r3
 8018a42:	db19      	blt.n	8018a78 <__gethex+0x440>
 8018a44:	6861      	ldr	r1, [r4, #4]
 8018a46:	ee18 0a10 	vmov	r0, s16
 8018a4a:	3101      	adds	r1, #1
 8018a4c:	f000 f91a 	bl	8018c84 <_Balloc>
 8018a50:	4681      	mov	r9, r0
 8018a52:	b918      	cbnz	r0, 8018a5c <__gethex+0x424>
 8018a54:	4b1a      	ldr	r3, [pc, #104]	; (8018ac0 <__gethex+0x488>)
 8018a56:	4602      	mov	r2, r0
 8018a58:	2184      	movs	r1, #132	; 0x84
 8018a5a:	e6a8      	b.n	80187ae <__gethex+0x176>
 8018a5c:	6922      	ldr	r2, [r4, #16]
 8018a5e:	3202      	adds	r2, #2
 8018a60:	f104 010c 	add.w	r1, r4, #12
 8018a64:	0092      	lsls	r2, r2, #2
 8018a66:	300c      	adds	r0, #12
 8018a68:	f7fe fd00 	bl	801746c <memcpy>
 8018a6c:	4621      	mov	r1, r4
 8018a6e:	ee18 0a10 	vmov	r0, s16
 8018a72:	f000 f947 	bl	8018d04 <_Bfree>
 8018a76:	464c      	mov	r4, r9
 8018a78:	6923      	ldr	r3, [r4, #16]
 8018a7a:	1c5a      	adds	r2, r3, #1
 8018a7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018a80:	6122      	str	r2, [r4, #16]
 8018a82:	2201      	movs	r2, #1
 8018a84:	615a      	str	r2, [r3, #20]
 8018a86:	e7bb      	b.n	8018a00 <__gethex+0x3c8>
 8018a88:	6922      	ldr	r2, [r4, #16]
 8018a8a:	455a      	cmp	r2, fp
 8018a8c:	dd0b      	ble.n	8018aa6 <__gethex+0x46e>
 8018a8e:	2101      	movs	r1, #1
 8018a90:	4620      	mov	r0, r4
 8018a92:	f7ff fd69 	bl	8018568 <rshift>
 8018a96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018a9a:	3501      	adds	r5, #1
 8018a9c:	42ab      	cmp	r3, r5
 8018a9e:	f6ff aed0 	blt.w	8018842 <__gethex+0x20a>
 8018aa2:	2701      	movs	r7, #1
 8018aa4:	e7c0      	b.n	8018a28 <__gethex+0x3f0>
 8018aa6:	f016 061f 	ands.w	r6, r6, #31
 8018aaa:	d0fa      	beq.n	8018aa2 <__gethex+0x46a>
 8018aac:	449a      	add	sl, r3
 8018aae:	f1c6 0620 	rsb	r6, r6, #32
 8018ab2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018ab6:	f000 f9db 	bl	8018e70 <__hi0bits>
 8018aba:	42b0      	cmp	r0, r6
 8018abc:	dbe7      	blt.n	8018a8e <__gethex+0x456>
 8018abe:	e7f0      	b.n	8018aa2 <__gethex+0x46a>
 8018ac0:	0801acde 	.word	0x0801acde

08018ac4 <L_shift>:
 8018ac4:	f1c2 0208 	rsb	r2, r2, #8
 8018ac8:	0092      	lsls	r2, r2, #2
 8018aca:	b570      	push	{r4, r5, r6, lr}
 8018acc:	f1c2 0620 	rsb	r6, r2, #32
 8018ad0:	6843      	ldr	r3, [r0, #4]
 8018ad2:	6804      	ldr	r4, [r0, #0]
 8018ad4:	fa03 f506 	lsl.w	r5, r3, r6
 8018ad8:	432c      	orrs	r4, r5
 8018ada:	40d3      	lsrs	r3, r2
 8018adc:	6004      	str	r4, [r0, #0]
 8018ade:	f840 3f04 	str.w	r3, [r0, #4]!
 8018ae2:	4288      	cmp	r0, r1
 8018ae4:	d3f4      	bcc.n	8018ad0 <L_shift+0xc>
 8018ae6:	bd70      	pop	{r4, r5, r6, pc}

08018ae8 <__match>:
 8018ae8:	b530      	push	{r4, r5, lr}
 8018aea:	6803      	ldr	r3, [r0, #0]
 8018aec:	3301      	adds	r3, #1
 8018aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018af2:	b914      	cbnz	r4, 8018afa <__match+0x12>
 8018af4:	6003      	str	r3, [r0, #0]
 8018af6:	2001      	movs	r0, #1
 8018af8:	bd30      	pop	{r4, r5, pc}
 8018afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018afe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018b02:	2d19      	cmp	r5, #25
 8018b04:	bf98      	it	ls
 8018b06:	3220      	addls	r2, #32
 8018b08:	42a2      	cmp	r2, r4
 8018b0a:	d0f0      	beq.n	8018aee <__match+0x6>
 8018b0c:	2000      	movs	r0, #0
 8018b0e:	e7f3      	b.n	8018af8 <__match+0x10>

08018b10 <__hexnan>:
 8018b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b14:	680b      	ldr	r3, [r1, #0]
 8018b16:	6801      	ldr	r1, [r0, #0]
 8018b18:	115e      	asrs	r6, r3, #5
 8018b1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018b1e:	f013 031f 	ands.w	r3, r3, #31
 8018b22:	b087      	sub	sp, #28
 8018b24:	bf18      	it	ne
 8018b26:	3604      	addne	r6, #4
 8018b28:	2500      	movs	r5, #0
 8018b2a:	1f37      	subs	r7, r6, #4
 8018b2c:	4682      	mov	sl, r0
 8018b2e:	4690      	mov	r8, r2
 8018b30:	9301      	str	r3, [sp, #4]
 8018b32:	f846 5c04 	str.w	r5, [r6, #-4]
 8018b36:	46b9      	mov	r9, r7
 8018b38:	463c      	mov	r4, r7
 8018b3a:	9502      	str	r5, [sp, #8]
 8018b3c:	46ab      	mov	fp, r5
 8018b3e:	784a      	ldrb	r2, [r1, #1]
 8018b40:	1c4b      	adds	r3, r1, #1
 8018b42:	9303      	str	r3, [sp, #12]
 8018b44:	b342      	cbz	r2, 8018b98 <__hexnan+0x88>
 8018b46:	4610      	mov	r0, r2
 8018b48:	9105      	str	r1, [sp, #20]
 8018b4a:	9204      	str	r2, [sp, #16]
 8018b4c:	f7ff fd5e 	bl	801860c <__hexdig_fun>
 8018b50:	2800      	cmp	r0, #0
 8018b52:	d14f      	bne.n	8018bf4 <__hexnan+0xe4>
 8018b54:	9a04      	ldr	r2, [sp, #16]
 8018b56:	9905      	ldr	r1, [sp, #20]
 8018b58:	2a20      	cmp	r2, #32
 8018b5a:	d818      	bhi.n	8018b8e <__hexnan+0x7e>
 8018b5c:	9b02      	ldr	r3, [sp, #8]
 8018b5e:	459b      	cmp	fp, r3
 8018b60:	dd13      	ble.n	8018b8a <__hexnan+0x7a>
 8018b62:	454c      	cmp	r4, r9
 8018b64:	d206      	bcs.n	8018b74 <__hexnan+0x64>
 8018b66:	2d07      	cmp	r5, #7
 8018b68:	dc04      	bgt.n	8018b74 <__hexnan+0x64>
 8018b6a:	462a      	mov	r2, r5
 8018b6c:	4649      	mov	r1, r9
 8018b6e:	4620      	mov	r0, r4
 8018b70:	f7ff ffa8 	bl	8018ac4 <L_shift>
 8018b74:	4544      	cmp	r4, r8
 8018b76:	d950      	bls.n	8018c1a <__hexnan+0x10a>
 8018b78:	2300      	movs	r3, #0
 8018b7a:	f1a4 0904 	sub.w	r9, r4, #4
 8018b7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018b82:	f8cd b008 	str.w	fp, [sp, #8]
 8018b86:	464c      	mov	r4, r9
 8018b88:	461d      	mov	r5, r3
 8018b8a:	9903      	ldr	r1, [sp, #12]
 8018b8c:	e7d7      	b.n	8018b3e <__hexnan+0x2e>
 8018b8e:	2a29      	cmp	r2, #41	; 0x29
 8018b90:	d156      	bne.n	8018c40 <__hexnan+0x130>
 8018b92:	3102      	adds	r1, #2
 8018b94:	f8ca 1000 	str.w	r1, [sl]
 8018b98:	f1bb 0f00 	cmp.w	fp, #0
 8018b9c:	d050      	beq.n	8018c40 <__hexnan+0x130>
 8018b9e:	454c      	cmp	r4, r9
 8018ba0:	d206      	bcs.n	8018bb0 <__hexnan+0xa0>
 8018ba2:	2d07      	cmp	r5, #7
 8018ba4:	dc04      	bgt.n	8018bb0 <__hexnan+0xa0>
 8018ba6:	462a      	mov	r2, r5
 8018ba8:	4649      	mov	r1, r9
 8018baa:	4620      	mov	r0, r4
 8018bac:	f7ff ff8a 	bl	8018ac4 <L_shift>
 8018bb0:	4544      	cmp	r4, r8
 8018bb2:	d934      	bls.n	8018c1e <__hexnan+0x10e>
 8018bb4:	f1a8 0204 	sub.w	r2, r8, #4
 8018bb8:	4623      	mov	r3, r4
 8018bba:	f853 1b04 	ldr.w	r1, [r3], #4
 8018bbe:	f842 1f04 	str.w	r1, [r2, #4]!
 8018bc2:	429f      	cmp	r7, r3
 8018bc4:	d2f9      	bcs.n	8018bba <__hexnan+0xaa>
 8018bc6:	1b3b      	subs	r3, r7, r4
 8018bc8:	f023 0303 	bic.w	r3, r3, #3
 8018bcc:	3304      	adds	r3, #4
 8018bce:	3401      	adds	r4, #1
 8018bd0:	3e03      	subs	r6, #3
 8018bd2:	42b4      	cmp	r4, r6
 8018bd4:	bf88      	it	hi
 8018bd6:	2304      	movhi	r3, #4
 8018bd8:	4443      	add	r3, r8
 8018bda:	2200      	movs	r2, #0
 8018bdc:	f843 2b04 	str.w	r2, [r3], #4
 8018be0:	429f      	cmp	r7, r3
 8018be2:	d2fb      	bcs.n	8018bdc <__hexnan+0xcc>
 8018be4:	683b      	ldr	r3, [r7, #0]
 8018be6:	b91b      	cbnz	r3, 8018bf0 <__hexnan+0xe0>
 8018be8:	4547      	cmp	r7, r8
 8018bea:	d127      	bne.n	8018c3c <__hexnan+0x12c>
 8018bec:	2301      	movs	r3, #1
 8018bee:	603b      	str	r3, [r7, #0]
 8018bf0:	2005      	movs	r0, #5
 8018bf2:	e026      	b.n	8018c42 <__hexnan+0x132>
 8018bf4:	3501      	adds	r5, #1
 8018bf6:	2d08      	cmp	r5, #8
 8018bf8:	f10b 0b01 	add.w	fp, fp, #1
 8018bfc:	dd06      	ble.n	8018c0c <__hexnan+0xfc>
 8018bfe:	4544      	cmp	r4, r8
 8018c00:	d9c3      	bls.n	8018b8a <__hexnan+0x7a>
 8018c02:	2300      	movs	r3, #0
 8018c04:	f844 3c04 	str.w	r3, [r4, #-4]
 8018c08:	2501      	movs	r5, #1
 8018c0a:	3c04      	subs	r4, #4
 8018c0c:	6822      	ldr	r2, [r4, #0]
 8018c0e:	f000 000f 	and.w	r0, r0, #15
 8018c12:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018c16:	6022      	str	r2, [r4, #0]
 8018c18:	e7b7      	b.n	8018b8a <__hexnan+0x7a>
 8018c1a:	2508      	movs	r5, #8
 8018c1c:	e7b5      	b.n	8018b8a <__hexnan+0x7a>
 8018c1e:	9b01      	ldr	r3, [sp, #4]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d0df      	beq.n	8018be4 <__hexnan+0xd4>
 8018c24:	f04f 32ff 	mov.w	r2, #4294967295
 8018c28:	f1c3 0320 	rsb	r3, r3, #32
 8018c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8018c30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018c34:	401a      	ands	r2, r3
 8018c36:	f846 2c04 	str.w	r2, [r6, #-4]
 8018c3a:	e7d3      	b.n	8018be4 <__hexnan+0xd4>
 8018c3c:	3f04      	subs	r7, #4
 8018c3e:	e7d1      	b.n	8018be4 <__hexnan+0xd4>
 8018c40:	2004      	movs	r0, #4
 8018c42:	b007      	add	sp, #28
 8018c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c48 <__ascii_mbtowc>:
 8018c48:	b082      	sub	sp, #8
 8018c4a:	b901      	cbnz	r1, 8018c4e <__ascii_mbtowc+0x6>
 8018c4c:	a901      	add	r1, sp, #4
 8018c4e:	b142      	cbz	r2, 8018c62 <__ascii_mbtowc+0x1a>
 8018c50:	b14b      	cbz	r3, 8018c66 <__ascii_mbtowc+0x1e>
 8018c52:	7813      	ldrb	r3, [r2, #0]
 8018c54:	600b      	str	r3, [r1, #0]
 8018c56:	7812      	ldrb	r2, [r2, #0]
 8018c58:	1e10      	subs	r0, r2, #0
 8018c5a:	bf18      	it	ne
 8018c5c:	2001      	movne	r0, #1
 8018c5e:	b002      	add	sp, #8
 8018c60:	4770      	bx	lr
 8018c62:	4610      	mov	r0, r2
 8018c64:	e7fb      	b.n	8018c5e <__ascii_mbtowc+0x16>
 8018c66:	f06f 0001 	mvn.w	r0, #1
 8018c6a:	e7f8      	b.n	8018c5e <__ascii_mbtowc+0x16>

08018c6c <__malloc_lock>:
 8018c6c:	4801      	ldr	r0, [pc, #4]	; (8018c74 <__malloc_lock+0x8>)
 8018c6e:	f000 bd32 	b.w	80196d6 <__retarget_lock_acquire_recursive>
 8018c72:	bf00      	nop
 8018c74:	20000528 	.word	0x20000528

08018c78 <__malloc_unlock>:
 8018c78:	4801      	ldr	r0, [pc, #4]	; (8018c80 <__malloc_unlock+0x8>)
 8018c7a:	f000 bd2d 	b.w	80196d8 <__retarget_lock_release_recursive>
 8018c7e:	bf00      	nop
 8018c80:	20000528 	.word	0x20000528

08018c84 <_Balloc>:
 8018c84:	b570      	push	{r4, r5, r6, lr}
 8018c86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018c88:	4604      	mov	r4, r0
 8018c8a:	460d      	mov	r5, r1
 8018c8c:	b976      	cbnz	r6, 8018cac <_Balloc+0x28>
 8018c8e:	2010      	movs	r0, #16
 8018c90:	f7fe fbce 	bl	8017430 <malloc>
 8018c94:	4602      	mov	r2, r0
 8018c96:	6260      	str	r0, [r4, #36]	; 0x24
 8018c98:	b920      	cbnz	r0, 8018ca4 <_Balloc+0x20>
 8018c9a:	4b18      	ldr	r3, [pc, #96]	; (8018cfc <_Balloc+0x78>)
 8018c9c:	4818      	ldr	r0, [pc, #96]	; (8018d00 <_Balloc+0x7c>)
 8018c9e:	2166      	movs	r1, #102	; 0x66
 8018ca0:	f000 fce8 	bl	8019674 <__assert_func>
 8018ca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018ca8:	6006      	str	r6, [r0, #0]
 8018caa:	60c6      	str	r6, [r0, #12]
 8018cac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018cae:	68f3      	ldr	r3, [r6, #12]
 8018cb0:	b183      	cbz	r3, 8018cd4 <_Balloc+0x50>
 8018cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018cb4:	68db      	ldr	r3, [r3, #12]
 8018cb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018cba:	b9b8      	cbnz	r0, 8018cec <_Balloc+0x68>
 8018cbc:	2101      	movs	r1, #1
 8018cbe:	fa01 f605 	lsl.w	r6, r1, r5
 8018cc2:	1d72      	adds	r2, r6, #5
 8018cc4:	0092      	lsls	r2, r2, #2
 8018cc6:	4620      	mov	r0, r4
 8018cc8:	f000 fc97 	bl	80195fa <_calloc_r>
 8018ccc:	b160      	cbz	r0, 8018ce8 <_Balloc+0x64>
 8018cce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018cd2:	e00e      	b.n	8018cf2 <_Balloc+0x6e>
 8018cd4:	2221      	movs	r2, #33	; 0x21
 8018cd6:	2104      	movs	r1, #4
 8018cd8:	4620      	mov	r0, r4
 8018cda:	f000 fc8e 	bl	80195fa <_calloc_r>
 8018cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018ce0:	60f0      	str	r0, [r6, #12]
 8018ce2:	68db      	ldr	r3, [r3, #12]
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d1e4      	bne.n	8018cb2 <_Balloc+0x2e>
 8018ce8:	2000      	movs	r0, #0
 8018cea:	bd70      	pop	{r4, r5, r6, pc}
 8018cec:	6802      	ldr	r2, [r0, #0]
 8018cee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018cf8:	e7f7      	b.n	8018cea <_Balloc+0x66>
 8018cfa:	bf00      	nop
 8018cfc:	0801ad6c 	.word	0x0801ad6c
 8018d00:	0801ad83 	.word	0x0801ad83

08018d04 <_Bfree>:
 8018d04:	b570      	push	{r4, r5, r6, lr}
 8018d06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018d08:	4605      	mov	r5, r0
 8018d0a:	460c      	mov	r4, r1
 8018d0c:	b976      	cbnz	r6, 8018d2c <_Bfree+0x28>
 8018d0e:	2010      	movs	r0, #16
 8018d10:	f7fe fb8e 	bl	8017430 <malloc>
 8018d14:	4602      	mov	r2, r0
 8018d16:	6268      	str	r0, [r5, #36]	; 0x24
 8018d18:	b920      	cbnz	r0, 8018d24 <_Bfree+0x20>
 8018d1a:	4b09      	ldr	r3, [pc, #36]	; (8018d40 <_Bfree+0x3c>)
 8018d1c:	4809      	ldr	r0, [pc, #36]	; (8018d44 <_Bfree+0x40>)
 8018d1e:	218a      	movs	r1, #138	; 0x8a
 8018d20:	f000 fca8 	bl	8019674 <__assert_func>
 8018d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018d28:	6006      	str	r6, [r0, #0]
 8018d2a:	60c6      	str	r6, [r0, #12]
 8018d2c:	b13c      	cbz	r4, 8018d3e <_Bfree+0x3a>
 8018d2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018d30:	6862      	ldr	r2, [r4, #4]
 8018d32:	68db      	ldr	r3, [r3, #12]
 8018d34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018d38:	6021      	str	r1, [r4, #0]
 8018d3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018d3e:	bd70      	pop	{r4, r5, r6, pc}
 8018d40:	0801ad6c 	.word	0x0801ad6c
 8018d44:	0801ad83 	.word	0x0801ad83

08018d48 <__multadd>:
 8018d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d4c:	690e      	ldr	r6, [r1, #16]
 8018d4e:	4607      	mov	r7, r0
 8018d50:	4698      	mov	r8, r3
 8018d52:	460c      	mov	r4, r1
 8018d54:	f101 0014 	add.w	r0, r1, #20
 8018d58:	2300      	movs	r3, #0
 8018d5a:	6805      	ldr	r5, [r0, #0]
 8018d5c:	b2a9      	uxth	r1, r5
 8018d5e:	fb02 8101 	mla	r1, r2, r1, r8
 8018d62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018d66:	0c2d      	lsrs	r5, r5, #16
 8018d68:	fb02 c505 	mla	r5, r2, r5, ip
 8018d6c:	b289      	uxth	r1, r1
 8018d6e:	3301      	adds	r3, #1
 8018d70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018d74:	429e      	cmp	r6, r3
 8018d76:	f840 1b04 	str.w	r1, [r0], #4
 8018d7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018d7e:	dcec      	bgt.n	8018d5a <__multadd+0x12>
 8018d80:	f1b8 0f00 	cmp.w	r8, #0
 8018d84:	d022      	beq.n	8018dcc <__multadd+0x84>
 8018d86:	68a3      	ldr	r3, [r4, #8]
 8018d88:	42b3      	cmp	r3, r6
 8018d8a:	dc19      	bgt.n	8018dc0 <__multadd+0x78>
 8018d8c:	6861      	ldr	r1, [r4, #4]
 8018d8e:	4638      	mov	r0, r7
 8018d90:	3101      	adds	r1, #1
 8018d92:	f7ff ff77 	bl	8018c84 <_Balloc>
 8018d96:	4605      	mov	r5, r0
 8018d98:	b928      	cbnz	r0, 8018da6 <__multadd+0x5e>
 8018d9a:	4602      	mov	r2, r0
 8018d9c:	4b0d      	ldr	r3, [pc, #52]	; (8018dd4 <__multadd+0x8c>)
 8018d9e:	480e      	ldr	r0, [pc, #56]	; (8018dd8 <__multadd+0x90>)
 8018da0:	21b5      	movs	r1, #181	; 0xb5
 8018da2:	f000 fc67 	bl	8019674 <__assert_func>
 8018da6:	6922      	ldr	r2, [r4, #16]
 8018da8:	3202      	adds	r2, #2
 8018daa:	f104 010c 	add.w	r1, r4, #12
 8018dae:	0092      	lsls	r2, r2, #2
 8018db0:	300c      	adds	r0, #12
 8018db2:	f7fe fb5b 	bl	801746c <memcpy>
 8018db6:	4621      	mov	r1, r4
 8018db8:	4638      	mov	r0, r7
 8018dba:	f7ff ffa3 	bl	8018d04 <_Bfree>
 8018dbe:	462c      	mov	r4, r5
 8018dc0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018dc4:	3601      	adds	r6, #1
 8018dc6:	f8c3 8014 	str.w	r8, [r3, #20]
 8018dca:	6126      	str	r6, [r4, #16]
 8018dcc:	4620      	mov	r0, r4
 8018dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dd2:	bf00      	nop
 8018dd4:	0801acde 	.word	0x0801acde
 8018dd8:	0801ad83 	.word	0x0801ad83

08018ddc <__s2b>:
 8018ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018de0:	460c      	mov	r4, r1
 8018de2:	4615      	mov	r5, r2
 8018de4:	461f      	mov	r7, r3
 8018de6:	2209      	movs	r2, #9
 8018de8:	3308      	adds	r3, #8
 8018dea:	4606      	mov	r6, r0
 8018dec:	fb93 f3f2 	sdiv	r3, r3, r2
 8018df0:	2100      	movs	r1, #0
 8018df2:	2201      	movs	r2, #1
 8018df4:	429a      	cmp	r2, r3
 8018df6:	db09      	blt.n	8018e0c <__s2b+0x30>
 8018df8:	4630      	mov	r0, r6
 8018dfa:	f7ff ff43 	bl	8018c84 <_Balloc>
 8018dfe:	b940      	cbnz	r0, 8018e12 <__s2b+0x36>
 8018e00:	4602      	mov	r2, r0
 8018e02:	4b19      	ldr	r3, [pc, #100]	; (8018e68 <__s2b+0x8c>)
 8018e04:	4819      	ldr	r0, [pc, #100]	; (8018e6c <__s2b+0x90>)
 8018e06:	21ce      	movs	r1, #206	; 0xce
 8018e08:	f000 fc34 	bl	8019674 <__assert_func>
 8018e0c:	0052      	lsls	r2, r2, #1
 8018e0e:	3101      	adds	r1, #1
 8018e10:	e7f0      	b.n	8018df4 <__s2b+0x18>
 8018e12:	9b08      	ldr	r3, [sp, #32]
 8018e14:	6143      	str	r3, [r0, #20]
 8018e16:	2d09      	cmp	r5, #9
 8018e18:	f04f 0301 	mov.w	r3, #1
 8018e1c:	6103      	str	r3, [r0, #16]
 8018e1e:	dd16      	ble.n	8018e4e <__s2b+0x72>
 8018e20:	f104 0909 	add.w	r9, r4, #9
 8018e24:	46c8      	mov	r8, r9
 8018e26:	442c      	add	r4, r5
 8018e28:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018e2c:	4601      	mov	r1, r0
 8018e2e:	3b30      	subs	r3, #48	; 0x30
 8018e30:	220a      	movs	r2, #10
 8018e32:	4630      	mov	r0, r6
 8018e34:	f7ff ff88 	bl	8018d48 <__multadd>
 8018e38:	45a0      	cmp	r8, r4
 8018e3a:	d1f5      	bne.n	8018e28 <__s2b+0x4c>
 8018e3c:	f1a5 0408 	sub.w	r4, r5, #8
 8018e40:	444c      	add	r4, r9
 8018e42:	1b2d      	subs	r5, r5, r4
 8018e44:	1963      	adds	r3, r4, r5
 8018e46:	42bb      	cmp	r3, r7
 8018e48:	db04      	blt.n	8018e54 <__s2b+0x78>
 8018e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e4e:	340a      	adds	r4, #10
 8018e50:	2509      	movs	r5, #9
 8018e52:	e7f6      	b.n	8018e42 <__s2b+0x66>
 8018e54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018e58:	4601      	mov	r1, r0
 8018e5a:	3b30      	subs	r3, #48	; 0x30
 8018e5c:	220a      	movs	r2, #10
 8018e5e:	4630      	mov	r0, r6
 8018e60:	f7ff ff72 	bl	8018d48 <__multadd>
 8018e64:	e7ee      	b.n	8018e44 <__s2b+0x68>
 8018e66:	bf00      	nop
 8018e68:	0801acde 	.word	0x0801acde
 8018e6c:	0801ad83 	.word	0x0801ad83

08018e70 <__hi0bits>:
 8018e70:	0c03      	lsrs	r3, r0, #16
 8018e72:	041b      	lsls	r3, r3, #16
 8018e74:	b9d3      	cbnz	r3, 8018eac <__hi0bits+0x3c>
 8018e76:	0400      	lsls	r0, r0, #16
 8018e78:	2310      	movs	r3, #16
 8018e7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018e7e:	bf04      	itt	eq
 8018e80:	0200      	lsleq	r0, r0, #8
 8018e82:	3308      	addeq	r3, #8
 8018e84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018e88:	bf04      	itt	eq
 8018e8a:	0100      	lsleq	r0, r0, #4
 8018e8c:	3304      	addeq	r3, #4
 8018e8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018e92:	bf04      	itt	eq
 8018e94:	0080      	lsleq	r0, r0, #2
 8018e96:	3302      	addeq	r3, #2
 8018e98:	2800      	cmp	r0, #0
 8018e9a:	db05      	blt.n	8018ea8 <__hi0bits+0x38>
 8018e9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018ea0:	f103 0301 	add.w	r3, r3, #1
 8018ea4:	bf08      	it	eq
 8018ea6:	2320      	moveq	r3, #32
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	4770      	bx	lr
 8018eac:	2300      	movs	r3, #0
 8018eae:	e7e4      	b.n	8018e7a <__hi0bits+0xa>

08018eb0 <__lo0bits>:
 8018eb0:	6803      	ldr	r3, [r0, #0]
 8018eb2:	f013 0207 	ands.w	r2, r3, #7
 8018eb6:	4601      	mov	r1, r0
 8018eb8:	d00b      	beq.n	8018ed2 <__lo0bits+0x22>
 8018eba:	07da      	lsls	r2, r3, #31
 8018ebc:	d424      	bmi.n	8018f08 <__lo0bits+0x58>
 8018ebe:	0798      	lsls	r0, r3, #30
 8018ec0:	bf49      	itett	mi
 8018ec2:	085b      	lsrmi	r3, r3, #1
 8018ec4:	089b      	lsrpl	r3, r3, #2
 8018ec6:	2001      	movmi	r0, #1
 8018ec8:	600b      	strmi	r3, [r1, #0]
 8018eca:	bf5c      	itt	pl
 8018ecc:	600b      	strpl	r3, [r1, #0]
 8018ece:	2002      	movpl	r0, #2
 8018ed0:	4770      	bx	lr
 8018ed2:	b298      	uxth	r0, r3
 8018ed4:	b9b0      	cbnz	r0, 8018f04 <__lo0bits+0x54>
 8018ed6:	0c1b      	lsrs	r3, r3, #16
 8018ed8:	2010      	movs	r0, #16
 8018eda:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018ede:	bf04      	itt	eq
 8018ee0:	0a1b      	lsreq	r3, r3, #8
 8018ee2:	3008      	addeq	r0, #8
 8018ee4:	071a      	lsls	r2, r3, #28
 8018ee6:	bf04      	itt	eq
 8018ee8:	091b      	lsreq	r3, r3, #4
 8018eea:	3004      	addeq	r0, #4
 8018eec:	079a      	lsls	r2, r3, #30
 8018eee:	bf04      	itt	eq
 8018ef0:	089b      	lsreq	r3, r3, #2
 8018ef2:	3002      	addeq	r0, #2
 8018ef4:	07da      	lsls	r2, r3, #31
 8018ef6:	d403      	bmi.n	8018f00 <__lo0bits+0x50>
 8018ef8:	085b      	lsrs	r3, r3, #1
 8018efa:	f100 0001 	add.w	r0, r0, #1
 8018efe:	d005      	beq.n	8018f0c <__lo0bits+0x5c>
 8018f00:	600b      	str	r3, [r1, #0]
 8018f02:	4770      	bx	lr
 8018f04:	4610      	mov	r0, r2
 8018f06:	e7e8      	b.n	8018eda <__lo0bits+0x2a>
 8018f08:	2000      	movs	r0, #0
 8018f0a:	4770      	bx	lr
 8018f0c:	2020      	movs	r0, #32
 8018f0e:	4770      	bx	lr

08018f10 <__i2b>:
 8018f10:	b510      	push	{r4, lr}
 8018f12:	460c      	mov	r4, r1
 8018f14:	2101      	movs	r1, #1
 8018f16:	f7ff feb5 	bl	8018c84 <_Balloc>
 8018f1a:	4602      	mov	r2, r0
 8018f1c:	b928      	cbnz	r0, 8018f2a <__i2b+0x1a>
 8018f1e:	4b05      	ldr	r3, [pc, #20]	; (8018f34 <__i2b+0x24>)
 8018f20:	4805      	ldr	r0, [pc, #20]	; (8018f38 <__i2b+0x28>)
 8018f22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018f26:	f000 fba5 	bl	8019674 <__assert_func>
 8018f2a:	2301      	movs	r3, #1
 8018f2c:	6144      	str	r4, [r0, #20]
 8018f2e:	6103      	str	r3, [r0, #16]
 8018f30:	bd10      	pop	{r4, pc}
 8018f32:	bf00      	nop
 8018f34:	0801acde 	.word	0x0801acde
 8018f38:	0801ad83 	.word	0x0801ad83

08018f3c <__multiply>:
 8018f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f40:	4614      	mov	r4, r2
 8018f42:	690a      	ldr	r2, [r1, #16]
 8018f44:	6923      	ldr	r3, [r4, #16]
 8018f46:	429a      	cmp	r2, r3
 8018f48:	bfb8      	it	lt
 8018f4a:	460b      	movlt	r3, r1
 8018f4c:	460d      	mov	r5, r1
 8018f4e:	bfbc      	itt	lt
 8018f50:	4625      	movlt	r5, r4
 8018f52:	461c      	movlt	r4, r3
 8018f54:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018f58:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018f5c:	68ab      	ldr	r3, [r5, #8]
 8018f5e:	6869      	ldr	r1, [r5, #4]
 8018f60:	eb0a 0709 	add.w	r7, sl, r9
 8018f64:	42bb      	cmp	r3, r7
 8018f66:	b085      	sub	sp, #20
 8018f68:	bfb8      	it	lt
 8018f6a:	3101      	addlt	r1, #1
 8018f6c:	f7ff fe8a 	bl	8018c84 <_Balloc>
 8018f70:	b930      	cbnz	r0, 8018f80 <__multiply+0x44>
 8018f72:	4602      	mov	r2, r0
 8018f74:	4b42      	ldr	r3, [pc, #264]	; (8019080 <__multiply+0x144>)
 8018f76:	4843      	ldr	r0, [pc, #268]	; (8019084 <__multiply+0x148>)
 8018f78:	f240 115d 	movw	r1, #349	; 0x15d
 8018f7c:	f000 fb7a 	bl	8019674 <__assert_func>
 8018f80:	f100 0614 	add.w	r6, r0, #20
 8018f84:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018f88:	4633      	mov	r3, r6
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	4543      	cmp	r3, r8
 8018f8e:	d31e      	bcc.n	8018fce <__multiply+0x92>
 8018f90:	f105 0c14 	add.w	ip, r5, #20
 8018f94:	f104 0314 	add.w	r3, r4, #20
 8018f98:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018f9c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018fa0:	9202      	str	r2, [sp, #8]
 8018fa2:	ebac 0205 	sub.w	r2, ip, r5
 8018fa6:	3a15      	subs	r2, #21
 8018fa8:	f022 0203 	bic.w	r2, r2, #3
 8018fac:	3204      	adds	r2, #4
 8018fae:	f105 0115 	add.w	r1, r5, #21
 8018fb2:	458c      	cmp	ip, r1
 8018fb4:	bf38      	it	cc
 8018fb6:	2204      	movcc	r2, #4
 8018fb8:	9201      	str	r2, [sp, #4]
 8018fba:	9a02      	ldr	r2, [sp, #8]
 8018fbc:	9303      	str	r3, [sp, #12]
 8018fbe:	429a      	cmp	r2, r3
 8018fc0:	d808      	bhi.n	8018fd4 <__multiply+0x98>
 8018fc2:	2f00      	cmp	r7, #0
 8018fc4:	dc55      	bgt.n	8019072 <__multiply+0x136>
 8018fc6:	6107      	str	r7, [r0, #16]
 8018fc8:	b005      	add	sp, #20
 8018fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fce:	f843 2b04 	str.w	r2, [r3], #4
 8018fd2:	e7db      	b.n	8018f8c <__multiply+0x50>
 8018fd4:	f8b3 a000 	ldrh.w	sl, [r3]
 8018fd8:	f1ba 0f00 	cmp.w	sl, #0
 8018fdc:	d020      	beq.n	8019020 <__multiply+0xe4>
 8018fde:	f105 0e14 	add.w	lr, r5, #20
 8018fe2:	46b1      	mov	r9, r6
 8018fe4:	2200      	movs	r2, #0
 8018fe6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018fea:	f8d9 b000 	ldr.w	fp, [r9]
 8018fee:	b2a1      	uxth	r1, r4
 8018ff0:	fa1f fb8b 	uxth.w	fp, fp
 8018ff4:	fb0a b101 	mla	r1, sl, r1, fp
 8018ff8:	4411      	add	r1, r2
 8018ffa:	f8d9 2000 	ldr.w	r2, [r9]
 8018ffe:	0c24      	lsrs	r4, r4, #16
 8019000:	0c12      	lsrs	r2, r2, #16
 8019002:	fb0a 2404 	mla	r4, sl, r4, r2
 8019006:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801900a:	b289      	uxth	r1, r1
 801900c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019010:	45f4      	cmp	ip, lr
 8019012:	f849 1b04 	str.w	r1, [r9], #4
 8019016:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801901a:	d8e4      	bhi.n	8018fe6 <__multiply+0xaa>
 801901c:	9901      	ldr	r1, [sp, #4]
 801901e:	5072      	str	r2, [r6, r1]
 8019020:	9a03      	ldr	r2, [sp, #12]
 8019022:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019026:	3304      	adds	r3, #4
 8019028:	f1b9 0f00 	cmp.w	r9, #0
 801902c:	d01f      	beq.n	801906e <__multiply+0x132>
 801902e:	6834      	ldr	r4, [r6, #0]
 8019030:	f105 0114 	add.w	r1, r5, #20
 8019034:	46b6      	mov	lr, r6
 8019036:	f04f 0a00 	mov.w	sl, #0
 801903a:	880a      	ldrh	r2, [r1, #0]
 801903c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019040:	fb09 b202 	mla	r2, r9, r2, fp
 8019044:	4492      	add	sl, r2
 8019046:	b2a4      	uxth	r4, r4
 8019048:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801904c:	f84e 4b04 	str.w	r4, [lr], #4
 8019050:	f851 4b04 	ldr.w	r4, [r1], #4
 8019054:	f8be 2000 	ldrh.w	r2, [lr]
 8019058:	0c24      	lsrs	r4, r4, #16
 801905a:	fb09 2404 	mla	r4, r9, r4, r2
 801905e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8019062:	458c      	cmp	ip, r1
 8019064:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019068:	d8e7      	bhi.n	801903a <__multiply+0xfe>
 801906a:	9a01      	ldr	r2, [sp, #4]
 801906c:	50b4      	str	r4, [r6, r2]
 801906e:	3604      	adds	r6, #4
 8019070:	e7a3      	b.n	8018fba <__multiply+0x7e>
 8019072:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019076:	2b00      	cmp	r3, #0
 8019078:	d1a5      	bne.n	8018fc6 <__multiply+0x8a>
 801907a:	3f01      	subs	r7, #1
 801907c:	e7a1      	b.n	8018fc2 <__multiply+0x86>
 801907e:	bf00      	nop
 8019080:	0801acde 	.word	0x0801acde
 8019084:	0801ad83 	.word	0x0801ad83

08019088 <__pow5mult>:
 8019088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801908c:	4615      	mov	r5, r2
 801908e:	f012 0203 	ands.w	r2, r2, #3
 8019092:	4606      	mov	r6, r0
 8019094:	460f      	mov	r7, r1
 8019096:	d007      	beq.n	80190a8 <__pow5mult+0x20>
 8019098:	4c25      	ldr	r4, [pc, #148]	; (8019130 <__pow5mult+0xa8>)
 801909a:	3a01      	subs	r2, #1
 801909c:	2300      	movs	r3, #0
 801909e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80190a2:	f7ff fe51 	bl	8018d48 <__multadd>
 80190a6:	4607      	mov	r7, r0
 80190a8:	10ad      	asrs	r5, r5, #2
 80190aa:	d03d      	beq.n	8019128 <__pow5mult+0xa0>
 80190ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80190ae:	b97c      	cbnz	r4, 80190d0 <__pow5mult+0x48>
 80190b0:	2010      	movs	r0, #16
 80190b2:	f7fe f9bd 	bl	8017430 <malloc>
 80190b6:	4602      	mov	r2, r0
 80190b8:	6270      	str	r0, [r6, #36]	; 0x24
 80190ba:	b928      	cbnz	r0, 80190c8 <__pow5mult+0x40>
 80190bc:	4b1d      	ldr	r3, [pc, #116]	; (8019134 <__pow5mult+0xac>)
 80190be:	481e      	ldr	r0, [pc, #120]	; (8019138 <__pow5mult+0xb0>)
 80190c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80190c4:	f000 fad6 	bl	8019674 <__assert_func>
 80190c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80190cc:	6004      	str	r4, [r0, #0]
 80190ce:	60c4      	str	r4, [r0, #12]
 80190d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80190d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80190d8:	b94c      	cbnz	r4, 80190ee <__pow5mult+0x66>
 80190da:	f240 2171 	movw	r1, #625	; 0x271
 80190de:	4630      	mov	r0, r6
 80190e0:	f7ff ff16 	bl	8018f10 <__i2b>
 80190e4:	2300      	movs	r3, #0
 80190e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80190ea:	4604      	mov	r4, r0
 80190ec:	6003      	str	r3, [r0, #0]
 80190ee:	f04f 0900 	mov.w	r9, #0
 80190f2:	07eb      	lsls	r3, r5, #31
 80190f4:	d50a      	bpl.n	801910c <__pow5mult+0x84>
 80190f6:	4639      	mov	r1, r7
 80190f8:	4622      	mov	r2, r4
 80190fa:	4630      	mov	r0, r6
 80190fc:	f7ff ff1e 	bl	8018f3c <__multiply>
 8019100:	4639      	mov	r1, r7
 8019102:	4680      	mov	r8, r0
 8019104:	4630      	mov	r0, r6
 8019106:	f7ff fdfd 	bl	8018d04 <_Bfree>
 801910a:	4647      	mov	r7, r8
 801910c:	106d      	asrs	r5, r5, #1
 801910e:	d00b      	beq.n	8019128 <__pow5mult+0xa0>
 8019110:	6820      	ldr	r0, [r4, #0]
 8019112:	b938      	cbnz	r0, 8019124 <__pow5mult+0x9c>
 8019114:	4622      	mov	r2, r4
 8019116:	4621      	mov	r1, r4
 8019118:	4630      	mov	r0, r6
 801911a:	f7ff ff0f 	bl	8018f3c <__multiply>
 801911e:	6020      	str	r0, [r4, #0]
 8019120:	f8c0 9000 	str.w	r9, [r0]
 8019124:	4604      	mov	r4, r0
 8019126:	e7e4      	b.n	80190f2 <__pow5mult+0x6a>
 8019128:	4638      	mov	r0, r7
 801912a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801912e:	bf00      	nop
 8019130:	0801aed8 	.word	0x0801aed8
 8019134:	0801ad6c 	.word	0x0801ad6c
 8019138:	0801ad83 	.word	0x0801ad83

0801913c <__lshift>:
 801913c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019140:	460c      	mov	r4, r1
 8019142:	6849      	ldr	r1, [r1, #4]
 8019144:	6923      	ldr	r3, [r4, #16]
 8019146:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801914a:	68a3      	ldr	r3, [r4, #8]
 801914c:	4607      	mov	r7, r0
 801914e:	4691      	mov	r9, r2
 8019150:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019154:	f108 0601 	add.w	r6, r8, #1
 8019158:	42b3      	cmp	r3, r6
 801915a:	db0b      	blt.n	8019174 <__lshift+0x38>
 801915c:	4638      	mov	r0, r7
 801915e:	f7ff fd91 	bl	8018c84 <_Balloc>
 8019162:	4605      	mov	r5, r0
 8019164:	b948      	cbnz	r0, 801917a <__lshift+0x3e>
 8019166:	4602      	mov	r2, r0
 8019168:	4b28      	ldr	r3, [pc, #160]	; (801920c <__lshift+0xd0>)
 801916a:	4829      	ldr	r0, [pc, #164]	; (8019210 <__lshift+0xd4>)
 801916c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019170:	f000 fa80 	bl	8019674 <__assert_func>
 8019174:	3101      	adds	r1, #1
 8019176:	005b      	lsls	r3, r3, #1
 8019178:	e7ee      	b.n	8019158 <__lshift+0x1c>
 801917a:	2300      	movs	r3, #0
 801917c:	f100 0114 	add.w	r1, r0, #20
 8019180:	f100 0210 	add.w	r2, r0, #16
 8019184:	4618      	mov	r0, r3
 8019186:	4553      	cmp	r3, sl
 8019188:	db33      	blt.n	80191f2 <__lshift+0xb6>
 801918a:	6920      	ldr	r0, [r4, #16]
 801918c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019190:	f104 0314 	add.w	r3, r4, #20
 8019194:	f019 091f 	ands.w	r9, r9, #31
 8019198:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801919c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80191a0:	d02b      	beq.n	80191fa <__lshift+0xbe>
 80191a2:	f1c9 0e20 	rsb	lr, r9, #32
 80191a6:	468a      	mov	sl, r1
 80191a8:	2200      	movs	r2, #0
 80191aa:	6818      	ldr	r0, [r3, #0]
 80191ac:	fa00 f009 	lsl.w	r0, r0, r9
 80191b0:	4302      	orrs	r2, r0
 80191b2:	f84a 2b04 	str.w	r2, [sl], #4
 80191b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80191ba:	459c      	cmp	ip, r3
 80191bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80191c0:	d8f3      	bhi.n	80191aa <__lshift+0x6e>
 80191c2:	ebac 0304 	sub.w	r3, ip, r4
 80191c6:	3b15      	subs	r3, #21
 80191c8:	f023 0303 	bic.w	r3, r3, #3
 80191cc:	3304      	adds	r3, #4
 80191ce:	f104 0015 	add.w	r0, r4, #21
 80191d2:	4584      	cmp	ip, r0
 80191d4:	bf38      	it	cc
 80191d6:	2304      	movcc	r3, #4
 80191d8:	50ca      	str	r2, [r1, r3]
 80191da:	b10a      	cbz	r2, 80191e0 <__lshift+0xa4>
 80191dc:	f108 0602 	add.w	r6, r8, #2
 80191e0:	3e01      	subs	r6, #1
 80191e2:	4638      	mov	r0, r7
 80191e4:	612e      	str	r6, [r5, #16]
 80191e6:	4621      	mov	r1, r4
 80191e8:	f7ff fd8c 	bl	8018d04 <_Bfree>
 80191ec:	4628      	mov	r0, r5
 80191ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80191f6:	3301      	adds	r3, #1
 80191f8:	e7c5      	b.n	8019186 <__lshift+0x4a>
 80191fa:	3904      	subs	r1, #4
 80191fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8019200:	f841 2f04 	str.w	r2, [r1, #4]!
 8019204:	459c      	cmp	ip, r3
 8019206:	d8f9      	bhi.n	80191fc <__lshift+0xc0>
 8019208:	e7ea      	b.n	80191e0 <__lshift+0xa4>
 801920a:	bf00      	nop
 801920c:	0801acde 	.word	0x0801acde
 8019210:	0801ad83 	.word	0x0801ad83

08019214 <__mcmp>:
 8019214:	b530      	push	{r4, r5, lr}
 8019216:	6902      	ldr	r2, [r0, #16]
 8019218:	690c      	ldr	r4, [r1, #16]
 801921a:	1b12      	subs	r2, r2, r4
 801921c:	d10e      	bne.n	801923c <__mcmp+0x28>
 801921e:	f100 0314 	add.w	r3, r0, #20
 8019222:	3114      	adds	r1, #20
 8019224:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019228:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801922c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019230:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019234:	42a5      	cmp	r5, r4
 8019236:	d003      	beq.n	8019240 <__mcmp+0x2c>
 8019238:	d305      	bcc.n	8019246 <__mcmp+0x32>
 801923a:	2201      	movs	r2, #1
 801923c:	4610      	mov	r0, r2
 801923e:	bd30      	pop	{r4, r5, pc}
 8019240:	4283      	cmp	r3, r0
 8019242:	d3f3      	bcc.n	801922c <__mcmp+0x18>
 8019244:	e7fa      	b.n	801923c <__mcmp+0x28>
 8019246:	f04f 32ff 	mov.w	r2, #4294967295
 801924a:	e7f7      	b.n	801923c <__mcmp+0x28>

0801924c <__mdiff>:
 801924c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019250:	460c      	mov	r4, r1
 8019252:	4606      	mov	r6, r0
 8019254:	4611      	mov	r1, r2
 8019256:	4620      	mov	r0, r4
 8019258:	4617      	mov	r7, r2
 801925a:	f7ff ffdb 	bl	8019214 <__mcmp>
 801925e:	1e05      	subs	r5, r0, #0
 8019260:	d110      	bne.n	8019284 <__mdiff+0x38>
 8019262:	4629      	mov	r1, r5
 8019264:	4630      	mov	r0, r6
 8019266:	f7ff fd0d 	bl	8018c84 <_Balloc>
 801926a:	b930      	cbnz	r0, 801927a <__mdiff+0x2e>
 801926c:	4b39      	ldr	r3, [pc, #228]	; (8019354 <__mdiff+0x108>)
 801926e:	4602      	mov	r2, r0
 8019270:	f240 2132 	movw	r1, #562	; 0x232
 8019274:	4838      	ldr	r0, [pc, #224]	; (8019358 <__mdiff+0x10c>)
 8019276:	f000 f9fd 	bl	8019674 <__assert_func>
 801927a:	2301      	movs	r3, #1
 801927c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019284:	bfa4      	itt	ge
 8019286:	463b      	movge	r3, r7
 8019288:	4627      	movge	r7, r4
 801928a:	4630      	mov	r0, r6
 801928c:	6879      	ldr	r1, [r7, #4]
 801928e:	bfa6      	itte	ge
 8019290:	461c      	movge	r4, r3
 8019292:	2500      	movge	r5, #0
 8019294:	2501      	movlt	r5, #1
 8019296:	f7ff fcf5 	bl	8018c84 <_Balloc>
 801929a:	b920      	cbnz	r0, 80192a6 <__mdiff+0x5a>
 801929c:	4b2d      	ldr	r3, [pc, #180]	; (8019354 <__mdiff+0x108>)
 801929e:	4602      	mov	r2, r0
 80192a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80192a4:	e7e6      	b.n	8019274 <__mdiff+0x28>
 80192a6:	693e      	ldr	r6, [r7, #16]
 80192a8:	60c5      	str	r5, [r0, #12]
 80192aa:	6925      	ldr	r5, [r4, #16]
 80192ac:	f107 0114 	add.w	r1, r7, #20
 80192b0:	f104 0914 	add.w	r9, r4, #20
 80192b4:	f100 0e14 	add.w	lr, r0, #20
 80192b8:	f107 0210 	add.w	r2, r7, #16
 80192bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80192c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80192c4:	46f2      	mov	sl, lr
 80192c6:	2700      	movs	r7, #0
 80192c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80192cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80192d0:	fa1f f883 	uxth.w	r8, r3
 80192d4:	fa17 f78b 	uxtah	r7, r7, fp
 80192d8:	0c1b      	lsrs	r3, r3, #16
 80192da:	eba7 0808 	sub.w	r8, r7, r8
 80192de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80192e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80192e6:	fa1f f888 	uxth.w	r8, r8
 80192ea:	141f      	asrs	r7, r3, #16
 80192ec:	454d      	cmp	r5, r9
 80192ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80192f2:	f84a 3b04 	str.w	r3, [sl], #4
 80192f6:	d8e7      	bhi.n	80192c8 <__mdiff+0x7c>
 80192f8:	1b2b      	subs	r3, r5, r4
 80192fa:	3b15      	subs	r3, #21
 80192fc:	f023 0303 	bic.w	r3, r3, #3
 8019300:	3304      	adds	r3, #4
 8019302:	3415      	adds	r4, #21
 8019304:	42a5      	cmp	r5, r4
 8019306:	bf38      	it	cc
 8019308:	2304      	movcc	r3, #4
 801930a:	4419      	add	r1, r3
 801930c:	4473      	add	r3, lr
 801930e:	469e      	mov	lr, r3
 8019310:	460d      	mov	r5, r1
 8019312:	4565      	cmp	r5, ip
 8019314:	d30e      	bcc.n	8019334 <__mdiff+0xe8>
 8019316:	f10c 0203 	add.w	r2, ip, #3
 801931a:	1a52      	subs	r2, r2, r1
 801931c:	f022 0203 	bic.w	r2, r2, #3
 8019320:	3903      	subs	r1, #3
 8019322:	458c      	cmp	ip, r1
 8019324:	bf38      	it	cc
 8019326:	2200      	movcc	r2, #0
 8019328:	441a      	add	r2, r3
 801932a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801932e:	b17b      	cbz	r3, 8019350 <__mdiff+0x104>
 8019330:	6106      	str	r6, [r0, #16]
 8019332:	e7a5      	b.n	8019280 <__mdiff+0x34>
 8019334:	f855 8b04 	ldr.w	r8, [r5], #4
 8019338:	fa17 f488 	uxtah	r4, r7, r8
 801933c:	1422      	asrs	r2, r4, #16
 801933e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019342:	b2a4      	uxth	r4, r4
 8019344:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019348:	f84e 4b04 	str.w	r4, [lr], #4
 801934c:	1417      	asrs	r7, r2, #16
 801934e:	e7e0      	b.n	8019312 <__mdiff+0xc6>
 8019350:	3e01      	subs	r6, #1
 8019352:	e7ea      	b.n	801932a <__mdiff+0xde>
 8019354:	0801acde 	.word	0x0801acde
 8019358:	0801ad83 	.word	0x0801ad83

0801935c <__ulp>:
 801935c:	b082      	sub	sp, #8
 801935e:	ed8d 0b00 	vstr	d0, [sp]
 8019362:	9b01      	ldr	r3, [sp, #4]
 8019364:	4912      	ldr	r1, [pc, #72]	; (80193b0 <__ulp+0x54>)
 8019366:	4019      	ands	r1, r3
 8019368:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801936c:	2900      	cmp	r1, #0
 801936e:	dd05      	ble.n	801937c <__ulp+0x20>
 8019370:	2200      	movs	r2, #0
 8019372:	460b      	mov	r3, r1
 8019374:	ec43 2b10 	vmov	d0, r2, r3
 8019378:	b002      	add	sp, #8
 801937a:	4770      	bx	lr
 801937c:	4249      	negs	r1, r1
 801937e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019382:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019386:	f04f 0200 	mov.w	r2, #0
 801938a:	f04f 0300 	mov.w	r3, #0
 801938e:	da04      	bge.n	801939a <__ulp+0x3e>
 8019390:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019394:	fa41 f300 	asr.w	r3, r1, r0
 8019398:	e7ec      	b.n	8019374 <__ulp+0x18>
 801939a:	f1a0 0114 	sub.w	r1, r0, #20
 801939e:	291e      	cmp	r1, #30
 80193a0:	bfda      	itte	le
 80193a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80193a6:	fa20 f101 	lsrle.w	r1, r0, r1
 80193aa:	2101      	movgt	r1, #1
 80193ac:	460a      	mov	r2, r1
 80193ae:	e7e1      	b.n	8019374 <__ulp+0x18>
 80193b0:	7ff00000 	.word	0x7ff00000

080193b4 <__b2d>:
 80193b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193b6:	6905      	ldr	r5, [r0, #16]
 80193b8:	f100 0714 	add.w	r7, r0, #20
 80193bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80193c0:	1f2e      	subs	r6, r5, #4
 80193c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80193c6:	4620      	mov	r0, r4
 80193c8:	f7ff fd52 	bl	8018e70 <__hi0bits>
 80193cc:	f1c0 0320 	rsb	r3, r0, #32
 80193d0:	280a      	cmp	r0, #10
 80193d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019450 <__b2d+0x9c>
 80193d6:	600b      	str	r3, [r1, #0]
 80193d8:	dc14      	bgt.n	8019404 <__b2d+0x50>
 80193da:	f1c0 0e0b 	rsb	lr, r0, #11
 80193de:	fa24 f10e 	lsr.w	r1, r4, lr
 80193e2:	42b7      	cmp	r7, r6
 80193e4:	ea41 030c 	orr.w	r3, r1, ip
 80193e8:	bf34      	ite	cc
 80193ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80193ee:	2100      	movcs	r1, #0
 80193f0:	3015      	adds	r0, #21
 80193f2:	fa04 f000 	lsl.w	r0, r4, r0
 80193f6:	fa21 f10e 	lsr.w	r1, r1, lr
 80193fa:	ea40 0201 	orr.w	r2, r0, r1
 80193fe:	ec43 2b10 	vmov	d0, r2, r3
 8019402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019404:	42b7      	cmp	r7, r6
 8019406:	bf3a      	itte	cc
 8019408:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801940c:	f1a5 0608 	subcc.w	r6, r5, #8
 8019410:	2100      	movcs	r1, #0
 8019412:	380b      	subs	r0, #11
 8019414:	d017      	beq.n	8019446 <__b2d+0x92>
 8019416:	f1c0 0c20 	rsb	ip, r0, #32
 801941a:	fa04 f500 	lsl.w	r5, r4, r0
 801941e:	42be      	cmp	r6, r7
 8019420:	fa21 f40c 	lsr.w	r4, r1, ip
 8019424:	ea45 0504 	orr.w	r5, r5, r4
 8019428:	bf8c      	ite	hi
 801942a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801942e:	2400      	movls	r4, #0
 8019430:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019434:	fa01 f000 	lsl.w	r0, r1, r0
 8019438:	fa24 f40c 	lsr.w	r4, r4, ip
 801943c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019440:	ea40 0204 	orr.w	r2, r0, r4
 8019444:	e7db      	b.n	80193fe <__b2d+0x4a>
 8019446:	ea44 030c 	orr.w	r3, r4, ip
 801944a:	460a      	mov	r2, r1
 801944c:	e7d7      	b.n	80193fe <__b2d+0x4a>
 801944e:	bf00      	nop
 8019450:	3ff00000 	.word	0x3ff00000

08019454 <__d2b>:
 8019454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019458:	4689      	mov	r9, r1
 801945a:	2101      	movs	r1, #1
 801945c:	ec57 6b10 	vmov	r6, r7, d0
 8019460:	4690      	mov	r8, r2
 8019462:	f7ff fc0f 	bl	8018c84 <_Balloc>
 8019466:	4604      	mov	r4, r0
 8019468:	b930      	cbnz	r0, 8019478 <__d2b+0x24>
 801946a:	4602      	mov	r2, r0
 801946c:	4b25      	ldr	r3, [pc, #148]	; (8019504 <__d2b+0xb0>)
 801946e:	4826      	ldr	r0, [pc, #152]	; (8019508 <__d2b+0xb4>)
 8019470:	f240 310a 	movw	r1, #778	; 0x30a
 8019474:	f000 f8fe 	bl	8019674 <__assert_func>
 8019478:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801947c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019480:	bb35      	cbnz	r5, 80194d0 <__d2b+0x7c>
 8019482:	2e00      	cmp	r6, #0
 8019484:	9301      	str	r3, [sp, #4]
 8019486:	d028      	beq.n	80194da <__d2b+0x86>
 8019488:	4668      	mov	r0, sp
 801948a:	9600      	str	r6, [sp, #0]
 801948c:	f7ff fd10 	bl	8018eb0 <__lo0bits>
 8019490:	9900      	ldr	r1, [sp, #0]
 8019492:	b300      	cbz	r0, 80194d6 <__d2b+0x82>
 8019494:	9a01      	ldr	r2, [sp, #4]
 8019496:	f1c0 0320 	rsb	r3, r0, #32
 801949a:	fa02 f303 	lsl.w	r3, r2, r3
 801949e:	430b      	orrs	r3, r1
 80194a0:	40c2      	lsrs	r2, r0
 80194a2:	6163      	str	r3, [r4, #20]
 80194a4:	9201      	str	r2, [sp, #4]
 80194a6:	9b01      	ldr	r3, [sp, #4]
 80194a8:	61a3      	str	r3, [r4, #24]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	bf14      	ite	ne
 80194ae:	2202      	movne	r2, #2
 80194b0:	2201      	moveq	r2, #1
 80194b2:	6122      	str	r2, [r4, #16]
 80194b4:	b1d5      	cbz	r5, 80194ec <__d2b+0x98>
 80194b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80194ba:	4405      	add	r5, r0
 80194bc:	f8c9 5000 	str.w	r5, [r9]
 80194c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80194c4:	f8c8 0000 	str.w	r0, [r8]
 80194c8:	4620      	mov	r0, r4
 80194ca:	b003      	add	sp, #12
 80194cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80194d4:	e7d5      	b.n	8019482 <__d2b+0x2e>
 80194d6:	6161      	str	r1, [r4, #20]
 80194d8:	e7e5      	b.n	80194a6 <__d2b+0x52>
 80194da:	a801      	add	r0, sp, #4
 80194dc:	f7ff fce8 	bl	8018eb0 <__lo0bits>
 80194e0:	9b01      	ldr	r3, [sp, #4]
 80194e2:	6163      	str	r3, [r4, #20]
 80194e4:	2201      	movs	r2, #1
 80194e6:	6122      	str	r2, [r4, #16]
 80194e8:	3020      	adds	r0, #32
 80194ea:	e7e3      	b.n	80194b4 <__d2b+0x60>
 80194ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80194f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80194f4:	f8c9 0000 	str.w	r0, [r9]
 80194f8:	6918      	ldr	r0, [r3, #16]
 80194fa:	f7ff fcb9 	bl	8018e70 <__hi0bits>
 80194fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019502:	e7df      	b.n	80194c4 <__d2b+0x70>
 8019504:	0801acde 	.word	0x0801acde
 8019508:	0801ad83 	.word	0x0801ad83

0801950c <__ratio>:
 801950c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019510:	4688      	mov	r8, r1
 8019512:	4669      	mov	r1, sp
 8019514:	4681      	mov	r9, r0
 8019516:	f7ff ff4d 	bl	80193b4 <__b2d>
 801951a:	a901      	add	r1, sp, #4
 801951c:	4640      	mov	r0, r8
 801951e:	ec55 4b10 	vmov	r4, r5, d0
 8019522:	f7ff ff47 	bl	80193b4 <__b2d>
 8019526:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801952a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801952e:	eba3 0c02 	sub.w	ip, r3, r2
 8019532:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019536:	1a9b      	subs	r3, r3, r2
 8019538:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801953c:	ec51 0b10 	vmov	r0, r1, d0
 8019540:	2b00      	cmp	r3, #0
 8019542:	bfd6      	itet	le
 8019544:	460a      	movle	r2, r1
 8019546:	462a      	movgt	r2, r5
 8019548:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801954c:	468b      	mov	fp, r1
 801954e:	462f      	mov	r7, r5
 8019550:	bfd4      	ite	le
 8019552:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019556:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801955a:	4620      	mov	r0, r4
 801955c:	ee10 2a10 	vmov	r2, s0
 8019560:	465b      	mov	r3, fp
 8019562:	4639      	mov	r1, r7
 8019564:	f7e7 f992 	bl	800088c <__aeabi_ddiv>
 8019568:	ec41 0b10 	vmov	d0, r0, r1
 801956c:	b003      	add	sp, #12
 801956e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019572 <__copybits>:
 8019572:	3901      	subs	r1, #1
 8019574:	b570      	push	{r4, r5, r6, lr}
 8019576:	1149      	asrs	r1, r1, #5
 8019578:	6914      	ldr	r4, [r2, #16]
 801957a:	3101      	adds	r1, #1
 801957c:	f102 0314 	add.w	r3, r2, #20
 8019580:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019584:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019588:	1f05      	subs	r5, r0, #4
 801958a:	42a3      	cmp	r3, r4
 801958c:	d30c      	bcc.n	80195a8 <__copybits+0x36>
 801958e:	1aa3      	subs	r3, r4, r2
 8019590:	3b11      	subs	r3, #17
 8019592:	f023 0303 	bic.w	r3, r3, #3
 8019596:	3211      	adds	r2, #17
 8019598:	42a2      	cmp	r2, r4
 801959a:	bf88      	it	hi
 801959c:	2300      	movhi	r3, #0
 801959e:	4418      	add	r0, r3
 80195a0:	2300      	movs	r3, #0
 80195a2:	4288      	cmp	r0, r1
 80195a4:	d305      	bcc.n	80195b2 <__copybits+0x40>
 80195a6:	bd70      	pop	{r4, r5, r6, pc}
 80195a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80195ac:	f845 6f04 	str.w	r6, [r5, #4]!
 80195b0:	e7eb      	b.n	801958a <__copybits+0x18>
 80195b2:	f840 3b04 	str.w	r3, [r0], #4
 80195b6:	e7f4      	b.n	80195a2 <__copybits+0x30>

080195b8 <__any_on>:
 80195b8:	f100 0214 	add.w	r2, r0, #20
 80195bc:	6900      	ldr	r0, [r0, #16]
 80195be:	114b      	asrs	r3, r1, #5
 80195c0:	4298      	cmp	r0, r3
 80195c2:	b510      	push	{r4, lr}
 80195c4:	db11      	blt.n	80195ea <__any_on+0x32>
 80195c6:	dd0a      	ble.n	80195de <__any_on+0x26>
 80195c8:	f011 011f 	ands.w	r1, r1, #31
 80195cc:	d007      	beq.n	80195de <__any_on+0x26>
 80195ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80195d2:	fa24 f001 	lsr.w	r0, r4, r1
 80195d6:	fa00 f101 	lsl.w	r1, r0, r1
 80195da:	428c      	cmp	r4, r1
 80195dc:	d10b      	bne.n	80195f6 <__any_on+0x3e>
 80195de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80195e2:	4293      	cmp	r3, r2
 80195e4:	d803      	bhi.n	80195ee <__any_on+0x36>
 80195e6:	2000      	movs	r0, #0
 80195e8:	bd10      	pop	{r4, pc}
 80195ea:	4603      	mov	r3, r0
 80195ec:	e7f7      	b.n	80195de <__any_on+0x26>
 80195ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80195f2:	2900      	cmp	r1, #0
 80195f4:	d0f5      	beq.n	80195e2 <__any_on+0x2a>
 80195f6:	2001      	movs	r0, #1
 80195f8:	e7f6      	b.n	80195e8 <__any_on+0x30>

080195fa <_calloc_r>:
 80195fa:	b513      	push	{r0, r1, r4, lr}
 80195fc:	434a      	muls	r2, r1
 80195fe:	4611      	mov	r1, r2
 8019600:	9201      	str	r2, [sp, #4]
 8019602:	f7fd ffb3 	bl	801756c <_malloc_r>
 8019606:	4604      	mov	r4, r0
 8019608:	b118      	cbz	r0, 8019612 <_calloc_r+0x18>
 801960a:	9a01      	ldr	r2, [sp, #4]
 801960c:	2100      	movs	r1, #0
 801960e:	f7fd ff55 	bl	80174bc <memset>
 8019612:	4620      	mov	r0, r4
 8019614:	b002      	add	sp, #8
 8019616:	bd10      	pop	{r4, pc}

08019618 <nan>:
 8019618:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019620 <nan+0x8>
 801961c:	4770      	bx	lr
 801961e:	bf00      	nop
 8019620:	00000000 	.word	0x00000000
 8019624:	7ff80000 	.word	0x7ff80000

08019628 <nanf>:
 8019628:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019630 <nanf+0x8>
 801962c:	4770      	bx	lr
 801962e:	bf00      	nop
 8019630:	7fc00000 	.word	0x7fc00000

08019634 <strncmp>:
 8019634:	b510      	push	{r4, lr}
 8019636:	b16a      	cbz	r2, 8019654 <strncmp+0x20>
 8019638:	3901      	subs	r1, #1
 801963a:	1884      	adds	r4, r0, r2
 801963c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019640:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019644:	4293      	cmp	r3, r2
 8019646:	d103      	bne.n	8019650 <strncmp+0x1c>
 8019648:	42a0      	cmp	r0, r4
 801964a:	d001      	beq.n	8019650 <strncmp+0x1c>
 801964c:	2b00      	cmp	r3, #0
 801964e:	d1f5      	bne.n	801963c <strncmp+0x8>
 8019650:	1a98      	subs	r0, r3, r2
 8019652:	bd10      	pop	{r4, pc}
 8019654:	4610      	mov	r0, r2
 8019656:	e7fc      	b.n	8019652 <strncmp+0x1e>

08019658 <__ascii_wctomb>:
 8019658:	b149      	cbz	r1, 801966e <__ascii_wctomb+0x16>
 801965a:	2aff      	cmp	r2, #255	; 0xff
 801965c:	bf85      	ittet	hi
 801965e:	238a      	movhi	r3, #138	; 0x8a
 8019660:	6003      	strhi	r3, [r0, #0]
 8019662:	700a      	strbls	r2, [r1, #0]
 8019664:	f04f 30ff 	movhi.w	r0, #4294967295
 8019668:	bf98      	it	ls
 801966a:	2001      	movls	r0, #1
 801966c:	4770      	bx	lr
 801966e:	4608      	mov	r0, r1
 8019670:	4770      	bx	lr
	...

08019674 <__assert_func>:
 8019674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019676:	4614      	mov	r4, r2
 8019678:	461a      	mov	r2, r3
 801967a:	4b09      	ldr	r3, [pc, #36]	; (80196a0 <__assert_func+0x2c>)
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	4605      	mov	r5, r0
 8019680:	68d8      	ldr	r0, [r3, #12]
 8019682:	b14c      	cbz	r4, 8019698 <__assert_func+0x24>
 8019684:	4b07      	ldr	r3, [pc, #28]	; (80196a4 <__assert_func+0x30>)
 8019686:	9100      	str	r1, [sp, #0]
 8019688:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801968c:	4906      	ldr	r1, [pc, #24]	; (80196a8 <__assert_func+0x34>)
 801968e:	462b      	mov	r3, r5
 8019690:	f000 f80e 	bl	80196b0 <fiprintf>
 8019694:	f7fd fe68 	bl	8017368 <abort>
 8019698:	4b04      	ldr	r3, [pc, #16]	; (80196ac <__assert_func+0x38>)
 801969a:	461c      	mov	r4, r3
 801969c:	e7f3      	b.n	8019686 <__assert_func+0x12>
 801969e:	bf00      	nop
 80196a0:	2000000c 	.word	0x2000000c
 80196a4:	0801aee4 	.word	0x0801aee4
 80196a8:	0801aef1 	.word	0x0801aef1
 80196ac:	0801af1f 	.word	0x0801af1f

080196b0 <fiprintf>:
 80196b0:	b40e      	push	{r1, r2, r3}
 80196b2:	b503      	push	{r0, r1, lr}
 80196b4:	4601      	mov	r1, r0
 80196b6:	ab03      	add	r3, sp, #12
 80196b8:	4805      	ldr	r0, [pc, #20]	; (80196d0 <fiprintf+0x20>)
 80196ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80196be:	6800      	ldr	r0, [r0, #0]
 80196c0:	9301      	str	r3, [sp, #4]
 80196c2:	f000 f833 	bl	801972c <_vfiprintf_r>
 80196c6:	b002      	add	sp, #8
 80196c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80196cc:	b003      	add	sp, #12
 80196ce:	4770      	bx	lr
 80196d0:	2000000c 	.word	0x2000000c

080196d4 <__retarget_lock_init_recursive>:
 80196d4:	4770      	bx	lr

080196d6 <__retarget_lock_acquire_recursive>:
 80196d6:	4770      	bx	lr

080196d8 <__retarget_lock_release_recursive>:
 80196d8:	4770      	bx	lr

080196da <__sfputc_r>:
 80196da:	6893      	ldr	r3, [r2, #8]
 80196dc:	3b01      	subs	r3, #1
 80196de:	2b00      	cmp	r3, #0
 80196e0:	b410      	push	{r4}
 80196e2:	6093      	str	r3, [r2, #8]
 80196e4:	da08      	bge.n	80196f8 <__sfputc_r+0x1e>
 80196e6:	6994      	ldr	r4, [r2, #24]
 80196e8:	42a3      	cmp	r3, r4
 80196ea:	db01      	blt.n	80196f0 <__sfputc_r+0x16>
 80196ec:	290a      	cmp	r1, #10
 80196ee:	d103      	bne.n	80196f8 <__sfputc_r+0x1e>
 80196f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196f4:	f000 bade 	b.w	8019cb4 <__swbuf_r>
 80196f8:	6813      	ldr	r3, [r2, #0]
 80196fa:	1c58      	adds	r0, r3, #1
 80196fc:	6010      	str	r0, [r2, #0]
 80196fe:	7019      	strb	r1, [r3, #0]
 8019700:	4608      	mov	r0, r1
 8019702:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019706:	4770      	bx	lr

08019708 <__sfputs_r>:
 8019708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801970a:	4606      	mov	r6, r0
 801970c:	460f      	mov	r7, r1
 801970e:	4614      	mov	r4, r2
 8019710:	18d5      	adds	r5, r2, r3
 8019712:	42ac      	cmp	r4, r5
 8019714:	d101      	bne.n	801971a <__sfputs_r+0x12>
 8019716:	2000      	movs	r0, #0
 8019718:	e007      	b.n	801972a <__sfputs_r+0x22>
 801971a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801971e:	463a      	mov	r2, r7
 8019720:	4630      	mov	r0, r6
 8019722:	f7ff ffda 	bl	80196da <__sfputc_r>
 8019726:	1c43      	adds	r3, r0, #1
 8019728:	d1f3      	bne.n	8019712 <__sfputs_r+0xa>
 801972a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801972c <_vfiprintf_r>:
 801972c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019730:	460d      	mov	r5, r1
 8019732:	b09d      	sub	sp, #116	; 0x74
 8019734:	4614      	mov	r4, r2
 8019736:	4698      	mov	r8, r3
 8019738:	4606      	mov	r6, r0
 801973a:	b118      	cbz	r0, 8019744 <_vfiprintf_r+0x18>
 801973c:	6983      	ldr	r3, [r0, #24]
 801973e:	b90b      	cbnz	r3, 8019744 <_vfiprintf_r+0x18>
 8019740:	f000 fc92 	bl	801a068 <__sinit>
 8019744:	4b89      	ldr	r3, [pc, #548]	; (801996c <_vfiprintf_r+0x240>)
 8019746:	429d      	cmp	r5, r3
 8019748:	d11b      	bne.n	8019782 <_vfiprintf_r+0x56>
 801974a:	6875      	ldr	r5, [r6, #4]
 801974c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801974e:	07d9      	lsls	r1, r3, #31
 8019750:	d405      	bmi.n	801975e <_vfiprintf_r+0x32>
 8019752:	89ab      	ldrh	r3, [r5, #12]
 8019754:	059a      	lsls	r2, r3, #22
 8019756:	d402      	bmi.n	801975e <_vfiprintf_r+0x32>
 8019758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801975a:	f7ff ffbc 	bl	80196d6 <__retarget_lock_acquire_recursive>
 801975e:	89ab      	ldrh	r3, [r5, #12]
 8019760:	071b      	lsls	r3, r3, #28
 8019762:	d501      	bpl.n	8019768 <_vfiprintf_r+0x3c>
 8019764:	692b      	ldr	r3, [r5, #16]
 8019766:	b9eb      	cbnz	r3, 80197a4 <_vfiprintf_r+0x78>
 8019768:	4629      	mov	r1, r5
 801976a:	4630      	mov	r0, r6
 801976c:	f000 faf4 	bl	8019d58 <__swsetup_r>
 8019770:	b1c0      	cbz	r0, 80197a4 <_vfiprintf_r+0x78>
 8019772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019774:	07dc      	lsls	r4, r3, #31
 8019776:	d50e      	bpl.n	8019796 <_vfiprintf_r+0x6a>
 8019778:	f04f 30ff 	mov.w	r0, #4294967295
 801977c:	b01d      	add	sp, #116	; 0x74
 801977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019782:	4b7b      	ldr	r3, [pc, #492]	; (8019970 <_vfiprintf_r+0x244>)
 8019784:	429d      	cmp	r5, r3
 8019786:	d101      	bne.n	801978c <_vfiprintf_r+0x60>
 8019788:	68b5      	ldr	r5, [r6, #8]
 801978a:	e7df      	b.n	801974c <_vfiprintf_r+0x20>
 801978c:	4b79      	ldr	r3, [pc, #484]	; (8019974 <_vfiprintf_r+0x248>)
 801978e:	429d      	cmp	r5, r3
 8019790:	bf08      	it	eq
 8019792:	68f5      	ldreq	r5, [r6, #12]
 8019794:	e7da      	b.n	801974c <_vfiprintf_r+0x20>
 8019796:	89ab      	ldrh	r3, [r5, #12]
 8019798:	0598      	lsls	r0, r3, #22
 801979a:	d4ed      	bmi.n	8019778 <_vfiprintf_r+0x4c>
 801979c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801979e:	f7ff ff9b 	bl	80196d8 <__retarget_lock_release_recursive>
 80197a2:	e7e9      	b.n	8019778 <_vfiprintf_r+0x4c>
 80197a4:	2300      	movs	r3, #0
 80197a6:	9309      	str	r3, [sp, #36]	; 0x24
 80197a8:	2320      	movs	r3, #32
 80197aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80197ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80197b2:	2330      	movs	r3, #48	; 0x30
 80197b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019978 <_vfiprintf_r+0x24c>
 80197b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80197bc:	f04f 0901 	mov.w	r9, #1
 80197c0:	4623      	mov	r3, r4
 80197c2:	469a      	mov	sl, r3
 80197c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80197c8:	b10a      	cbz	r2, 80197ce <_vfiprintf_r+0xa2>
 80197ca:	2a25      	cmp	r2, #37	; 0x25
 80197cc:	d1f9      	bne.n	80197c2 <_vfiprintf_r+0x96>
 80197ce:	ebba 0b04 	subs.w	fp, sl, r4
 80197d2:	d00b      	beq.n	80197ec <_vfiprintf_r+0xc0>
 80197d4:	465b      	mov	r3, fp
 80197d6:	4622      	mov	r2, r4
 80197d8:	4629      	mov	r1, r5
 80197da:	4630      	mov	r0, r6
 80197dc:	f7ff ff94 	bl	8019708 <__sfputs_r>
 80197e0:	3001      	adds	r0, #1
 80197e2:	f000 80aa 	beq.w	801993a <_vfiprintf_r+0x20e>
 80197e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80197e8:	445a      	add	r2, fp
 80197ea:	9209      	str	r2, [sp, #36]	; 0x24
 80197ec:	f89a 3000 	ldrb.w	r3, [sl]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	f000 80a2 	beq.w	801993a <_vfiprintf_r+0x20e>
 80197f6:	2300      	movs	r3, #0
 80197f8:	f04f 32ff 	mov.w	r2, #4294967295
 80197fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019800:	f10a 0a01 	add.w	sl, sl, #1
 8019804:	9304      	str	r3, [sp, #16]
 8019806:	9307      	str	r3, [sp, #28]
 8019808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801980c:	931a      	str	r3, [sp, #104]	; 0x68
 801980e:	4654      	mov	r4, sl
 8019810:	2205      	movs	r2, #5
 8019812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019816:	4858      	ldr	r0, [pc, #352]	; (8019978 <_vfiprintf_r+0x24c>)
 8019818:	f7e6 fcfa 	bl	8000210 <memchr>
 801981c:	9a04      	ldr	r2, [sp, #16]
 801981e:	b9d8      	cbnz	r0, 8019858 <_vfiprintf_r+0x12c>
 8019820:	06d1      	lsls	r1, r2, #27
 8019822:	bf44      	itt	mi
 8019824:	2320      	movmi	r3, #32
 8019826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801982a:	0713      	lsls	r3, r2, #28
 801982c:	bf44      	itt	mi
 801982e:	232b      	movmi	r3, #43	; 0x2b
 8019830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019834:	f89a 3000 	ldrb.w	r3, [sl]
 8019838:	2b2a      	cmp	r3, #42	; 0x2a
 801983a:	d015      	beq.n	8019868 <_vfiprintf_r+0x13c>
 801983c:	9a07      	ldr	r2, [sp, #28]
 801983e:	4654      	mov	r4, sl
 8019840:	2000      	movs	r0, #0
 8019842:	f04f 0c0a 	mov.w	ip, #10
 8019846:	4621      	mov	r1, r4
 8019848:	f811 3b01 	ldrb.w	r3, [r1], #1
 801984c:	3b30      	subs	r3, #48	; 0x30
 801984e:	2b09      	cmp	r3, #9
 8019850:	d94e      	bls.n	80198f0 <_vfiprintf_r+0x1c4>
 8019852:	b1b0      	cbz	r0, 8019882 <_vfiprintf_r+0x156>
 8019854:	9207      	str	r2, [sp, #28]
 8019856:	e014      	b.n	8019882 <_vfiprintf_r+0x156>
 8019858:	eba0 0308 	sub.w	r3, r0, r8
 801985c:	fa09 f303 	lsl.w	r3, r9, r3
 8019860:	4313      	orrs	r3, r2
 8019862:	9304      	str	r3, [sp, #16]
 8019864:	46a2      	mov	sl, r4
 8019866:	e7d2      	b.n	801980e <_vfiprintf_r+0xe2>
 8019868:	9b03      	ldr	r3, [sp, #12]
 801986a:	1d19      	adds	r1, r3, #4
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	9103      	str	r1, [sp, #12]
 8019870:	2b00      	cmp	r3, #0
 8019872:	bfbb      	ittet	lt
 8019874:	425b      	neglt	r3, r3
 8019876:	f042 0202 	orrlt.w	r2, r2, #2
 801987a:	9307      	strge	r3, [sp, #28]
 801987c:	9307      	strlt	r3, [sp, #28]
 801987e:	bfb8      	it	lt
 8019880:	9204      	strlt	r2, [sp, #16]
 8019882:	7823      	ldrb	r3, [r4, #0]
 8019884:	2b2e      	cmp	r3, #46	; 0x2e
 8019886:	d10c      	bne.n	80198a2 <_vfiprintf_r+0x176>
 8019888:	7863      	ldrb	r3, [r4, #1]
 801988a:	2b2a      	cmp	r3, #42	; 0x2a
 801988c:	d135      	bne.n	80198fa <_vfiprintf_r+0x1ce>
 801988e:	9b03      	ldr	r3, [sp, #12]
 8019890:	1d1a      	adds	r2, r3, #4
 8019892:	681b      	ldr	r3, [r3, #0]
 8019894:	9203      	str	r2, [sp, #12]
 8019896:	2b00      	cmp	r3, #0
 8019898:	bfb8      	it	lt
 801989a:	f04f 33ff 	movlt.w	r3, #4294967295
 801989e:	3402      	adds	r4, #2
 80198a0:	9305      	str	r3, [sp, #20]
 80198a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019988 <_vfiprintf_r+0x25c>
 80198a6:	7821      	ldrb	r1, [r4, #0]
 80198a8:	2203      	movs	r2, #3
 80198aa:	4650      	mov	r0, sl
 80198ac:	f7e6 fcb0 	bl	8000210 <memchr>
 80198b0:	b140      	cbz	r0, 80198c4 <_vfiprintf_r+0x198>
 80198b2:	2340      	movs	r3, #64	; 0x40
 80198b4:	eba0 000a 	sub.w	r0, r0, sl
 80198b8:	fa03 f000 	lsl.w	r0, r3, r0
 80198bc:	9b04      	ldr	r3, [sp, #16]
 80198be:	4303      	orrs	r3, r0
 80198c0:	3401      	adds	r4, #1
 80198c2:	9304      	str	r3, [sp, #16]
 80198c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198c8:	482c      	ldr	r0, [pc, #176]	; (801997c <_vfiprintf_r+0x250>)
 80198ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80198ce:	2206      	movs	r2, #6
 80198d0:	f7e6 fc9e 	bl	8000210 <memchr>
 80198d4:	2800      	cmp	r0, #0
 80198d6:	d03f      	beq.n	8019958 <_vfiprintf_r+0x22c>
 80198d8:	4b29      	ldr	r3, [pc, #164]	; (8019980 <_vfiprintf_r+0x254>)
 80198da:	bb1b      	cbnz	r3, 8019924 <_vfiprintf_r+0x1f8>
 80198dc:	9b03      	ldr	r3, [sp, #12]
 80198de:	3307      	adds	r3, #7
 80198e0:	f023 0307 	bic.w	r3, r3, #7
 80198e4:	3308      	adds	r3, #8
 80198e6:	9303      	str	r3, [sp, #12]
 80198e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198ea:	443b      	add	r3, r7
 80198ec:	9309      	str	r3, [sp, #36]	; 0x24
 80198ee:	e767      	b.n	80197c0 <_vfiprintf_r+0x94>
 80198f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80198f4:	460c      	mov	r4, r1
 80198f6:	2001      	movs	r0, #1
 80198f8:	e7a5      	b.n	8019846 <_vfiprintf_r+0x11a>
 80198fa:	2300      	movs	r3, #0
 80198fc:	3401      	adds	r4, #1
 80198fe:	9305      	str	r3, [sp, #20]
 8019900:	4619      	mov	r1, r3
 8019902:	f04f 0c0a 	mov.w	ip, #10
 8019906:	4620      	mov	r0, r4
 8019908:	f810 2b01 	ldrb.w	r2, [r0], #1
 801990c:	3a30      	subs	r2, #48	; 0x30
 801990e:	2a09      	cmp	r2, #9
 8019910:	d903      	bls.n	801991a <_vfiprintf_r+0x1ee>
 8019912:	2b00      	cmp	r3, #0
 8019914:	d0c5      	beq.n	80198a2 <_vfiprintf_r+0x176>
 8019916:	9105      	str	r1, [sp, #20]
 8019918:	e7c3      	b.n	80198a2 <_vfiprintf_r+0x176>
 801991a:	fb0c 2101 	mla	r1, ip, r1, r2
 801991e:	4604      	mov	r4, r0
 8019920:	2301      	movs	r3, #1
 8019922:	e7f0      	b.n	8019906 <_vfiprintf_r+0x1da>
 8019924:	ab03      	add	r3, sp, #12
 8019926:	9300      	str	r3, [sp, #0]
 8019928:	462a      	mov	r2, r5
 801992a:	4b16      	ldr	r3, [pc, #88]	; (8019984 <_vfiprintf_r+0x258>)
 801992c:	a904      	add	r1, sp, #16
 801992e:	4630      	mov	r0, r6
 8019930:	f3af 8000 	nop.w
 8019934:	4607      	mov	r7, r0
 8019936:	1c78      	adds	r0, r7, #1
 8019938:	d1d6      	bne.n	80198e8 <_vfiprintf_r+0x1bc>
 801993a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801993c:	07d9      	lsls	r1, r3, #31
 801993e:	d405      	bmi.n	801994c <_vfiprintf_r+0x220>
 8019940:	89ab      	ldrh	r3, [r5, #12]
 8019942:	059a      	lsls	r2, r3, #22
 8019944:	d402      	bmi.n	801994c <_vfiprintf_r+0x220>
 8019946:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019948:	f7ff fec6 	bl	80196d8 <__retarget_lock_release_recursive>
 801994c:	89ab      	ldrh	r3, [r5, #12]
 801994e:	065b      	lsls	r3, r3, #25
 8019950:	f53f af12 	bmi.w	8019778 <_vfiprintf_r+0x4c>
 8019954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019956:	e711      	b.n	801977c <_vfiprintf_r+0x50>
 8019958:	ab03      	add	r3, sp, #12
 801995a:	9300      	str	r3, [sp, #0]
 801995c:	462a      	mov	r2, r5
 801995e:	4b09      	ldr	r3, [pc, #36]	; (8019984 <_vfiprintf_r+0x258>)
 8019960:	a904      	add	r1, sp, #16
 8019962:	4630      	mov	r0, r6
 8019964:	f000 f880 	bl	8019a68 <_printf_i>
 8019968:	e7e4      	b.n	8019934 <_vfiprintf_r+0x208>
 801996a:	bf00      	nop
 801996c:	0801af74 	.word	0x0801af74
 8019970:	0801af94 	.word	0x0801af94
 8019974:	0801af54 	.word	0x0801af54
 8019978:	0801af20 	.word	0x0801af20
 801997c:	0801af2a 	.word	0x0801af2a
 8019980:	00000000 	.word	0x00000000
 8019984:	08019709 	.word	0x08019709
 8019988:	0801af26 	.word	0x0801af26

0801998c <_printf_common>:
 801998c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019990:	4616      	mov	r6, r2
 8019992:	4699      	mov	r9, r3
 8019994:	688a      	ldr	r2, [r1, #8]
 8019996:	690b      	ldr	r3, [r1, #16]
 8019998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801999c:	4293      	cmp	r3, r2
 801999e:	bfb8      	it	lt
 80199a0:	4613      	movlt	r3, r2
 80199a2:	6033      	str	r3, [r6, #0]
 80199a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80199a8:	4607      	mov	r7, r0
 80199aa:	460c      	mov	r4, r1
 80199ac:	b10a      	cbz	r2, 80199b2 <_printf_common+0x26>
 80199ae:	3301      	adds	r3, #1
 80199b0:	6033      	str	r3, [r6, #0]
 80199b2:	6823      	ldr	r3, [r4, #0]
 80199b4:	0699      	lsls	r1, r3, #26
 80199b6:	bf42      	ittt	mi
 80199b8:	6833      	ldrmi	r3, [r6, #0]
 80199ba:	3302      	addmi	r3, #2
 80199bc:	6033      	strmi	r3, [r6, #0]
 80199be:	6825      	ldr	r5, [r4, #0]
 80199c0:	f015 0506 	ands.w	r5, r5, #6
 80199c4:	d106      	bne.n	80199d4 <_printf_common+0x48>
 80199c6:	f104 0a19 	add.w	sl, r4, #25
 80199ca:	68e3      	ldr	r3, [r4, #12]
 80199cc:	6832      	ldr	r2, [r6, #0]
 80199ce:	1a9b      	subs	r3, r3, r2
 80199d0:	42ab      	cmp	r3, r5
 80199d2:	dc26      	bgt.n	8019a22 <_printf_common+0x96>
 80199d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80199d8:	1e13      	subs	r3, r2, #0
 80199da:	6822      	ldr	r2, [r4, #0]
 80199dc:	bf18      	it	ne
 80199de:	2301      	movne	r3, #1
 80199e0:	0692      	lsls	r2, r2, #26
 80199e2:	d42b      	bmi.n	8019a3c <_printf_common+0xb0>
 80199e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80199e8:	4649      	mov	r1, r9
 80199ea:	4638      	mov	r0, r7
 80199ec:	47c0      	blx	r8
 80199ee:	3001      	adds	r0, #1
 80199f0:	d01e      	beq.n	8019a30 <_printf_common+0xa4>
 80199f2:	6823      	ldr	r3, [r4, #0]
 80199f4:	68e5      	ldr	r5, [r4, #12]
 80199f6:	6832      	ldr	r2, [r6, #0]
 80199f8:	f003 0306 	and.w	r3, r3, #6
 80199fc:	2b04      	cmp	r3, #4
 80199fe:	bf08      	it	eq
 8019a00:	1aad      	subeq	r5, r5, r2
 8019a02:	68a3      	ldr	r3, [r4, #8]
 8019a04:	6922      	ldr	r2, [r4, #16]
 8019a06:	bf0c      	ite	eq
 8019a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019a0c:	2500      	movne	r5, #0
 8019a0e:	4293      	cmp	r3, r2
 8019a10:	bfc4      	itt	gt
 8019a12:	1a9b      	subgt	r3, r3, r2
 8019a14:	18ed      	addgt	r5, r5, r3
 8019a16:	2600      	movs	r6, #0
 8019a18:	341a      	adds	r4, #26
 8019a1a:	42b5      	cmp	r5, r6
 8019a1c:	d11a      	bne.n	8019a54 <_printf_common+0xc8>
 8019a1e:	2000      	movs	r0, #0
 8019a20:	e008      	b.n	8019a34 <_printf_common+0xa8>
 8019a22:	2301      	movs	r3, #1
 8019a24:	4652      	mov	r2, sl
 8019a26:	4649      	mov	r1, r9
 8019a28:	4638      	mov	r0, r7
 8019a2a:	47c0      	blx	r8
 8019a2c:	3001      	adds	r0, #1
 8019a2e:	d103      	bne.n	8019a38 <_printf_common+0xac>
 8019a30:	f04f 30ff 	mov.w	r0, #4294967295
 8019a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a38:	3501      	adds	r5, #1
 8019a3a:	e7c6      	b.n	80199ca <_printf_common+0x3e>
 8019a3c:	18e1      	adds	r1, r4, r3
 8019a3e:	1c5a      	adds	r2, r3, #1
 8019a40:	2030      	movs	r0, #48	; 0x30
 8019a42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019a46:	4422      	add	r2, r4
 8019a48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019a4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019a50:	3302      	adds	r3, #2
 8019a52:	e7c7      	b.n	80199e4 <_printf_common+0x58>
 8019a54:	2301      	movs	r3, #1
 8019a56:	4622      	mov	r2, r4
 8019a58:	4649      	mov	r1, r9
 8019a5a:	4638      	mov	r0, r7
 8019a5c:	47c0      	blx	r8
 8019a5e:	3001      	adds	r0, #1
 8019a60:	d0e6      	beq.n	8019a30 <_printf_common+0xa4>
 8019a62:	3601      	adds	r6, #1
 8019a64:	e7d9      	b.n	8019a1a <_printf_common+0x8e>
	...

08019a68 <_printf_i>:
 8019a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019a6c:	460c      	mov	r4, r1
 8019a6e:	4691      	mov	r9, r2
 8019a70:	7e27      	ldrb	r7, [r4, #24]
 8019a72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019a74:	2f78      	cmp	r7, #120	; 0x78
 8019a76:	4680      	mov	r8, r0
 8019a78:	469a      	mov	sl, r3
 8019a7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019a7e:	d807      	bhi.n	8019a90 <_printf_i+0x28>
 8019a80:	2f62      	cmp	r7, #98	; 0x62
 8019a82:	d80a      	bhi.n	8019a9a <_printf_i+0x32>
 8019a84:	2f00      	cmp	r7, #0
 8019a86:	f000 80d8 	beq.w	8019c3a <_printf_i+0x1d2>
 8019a8a:	2f58      	cmp	r7, #88	; 0x58
 8019a8c:	f000 80a3 	beq.w	8019bd6 <_printf_i+0x16e>
 8019a90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019a94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019a98:	e03a      	b.n	8019b10 <_printf_i+0xa8>
 8019a9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019a9e:	2b15      	cmp	r3, #21
 8019aa0:	d8f6      	bhi.n	8019a90 <_printf_i+0x28>
 8019aa2:	a001      	add	r0, pc, #4	; (adr r0, 8019aa8 <_printf_i+0x40>)
 8019aa4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8019aa8:	08019b01 	.word	0x08019b01
 8019aac:	08019b15 	.word	0x08019b15
 8019ab0:	08019a91 	.word	0x08019a91
 8019ab4:	08019a91 	.word	0x08019a91
 8019ab8:	08019a91 	.word	0x08019a91
 8019abc:	08019a91 	.word	0x08019a91
 8019ac0:	08019b15 	.word	0x08019b15
 8019ac4:	08019a91 	.word	0x08019a91
 8019ac8:	08019a91 	.word	0x08019a91
 8019acc:	08019a91 	.word	0x08019a91
 8019ad0:	08019a91 	.word	0x08019a91
 8019ad4:	08019c21 	.word	0x08019c21
 8019ad8:	08019b45 	.word	0x08019b45
 8019adc:	08019c03 	.word	0x08019c03
 8019ae0:	08019a91 	.word	0x08019a91
 8019ae4:	08019a91 	.word	0x08019a91
 8019ae8:	08019c43 	.word	0x08019c43
 8019aec:	08019a91 	.word	0x08019a91
 8019af0:	08019b45 	.word	0x08019b45
 8019af4:	08019a91 	.word	0x08019a91
 8019af8:	08019a91 	.word	0x08019a91
 8019afc:	08019c0b 	.word	0x08019c0b
 8019b00:	680b      	ldr	r3, [r1, #0]
 8019b02:	1d1a      	adds	r2, r3, #4
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	600a      	str	r2, [r1, #0]
 8019b08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019b10:	2301      	movs	r3, #1
 8019b12:	e0a3      	b.n	8019c5c <_printf_i+0x1f4>
 8019b14:	6825      	ldr	r5, [r4, #0]
 8019b16:	6808      	ldr	r0, [r1, #0]
 8019b18:	062e      	lsls	r6, r5, #24
 8019b1a:	f100 0304 	add.w	r3, r0, #4
 8019b1e:	d50a      	bpl.n	8019b36 <_printf_i+0xce>
 8019b20:	6805      	ldr	r5, [r0, #0]
 8019b22:	600b      	str	r3, [r1, #0]
 8019b24:	2d00      	cmp	r5, #0
 8019b26:	da03      	bge.n	8019b30 <_printf_i+0xc8>
 8019b28:	232d      	movs	r3, #45	; 0x2d
 8019b2a:	426d      	negs	r5, r5
 8019b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b30:	485e      	ldr	r0, [pc, #376]	; (8019cac <_printf_i+0x244>)
 8019b32:	230a      	movs	r3, #10
 8019b34:	e019      	b.n	8019b6a <_printf_i+0x102>
 8019b36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019b3a:	6805      	ldr	r5, [r0, #0]
 8019b3c:	600b      	str	r3, [r1, #0]
 8019b3e:	bf18      	it	ne
 8019b40:	b22d      	sxthne	r5, r5
 8019b42:	e7ef      	b.n	8019b24 <_printf_i+0xbc>
 8019b44:	680b      	ldr	r3, [r1, #0]
 8019b46:	6825      	ldr	r5, [r4, #0]
 8019b48:	1d18      	adds	r0, r3, #4
 8019b4a:	6008      	str	r0, [r1, #0]
 8019b4c:	0628      	lsls	r0, r5, #24
 8019b4e:	d501      	bpl.n	8019b54 <_printf_i+0xec>
 8019b50:	681d      	ldr	r5, [r3, #0]
 8019b52:	e002      	b.n	8019b5a <_printf_i+0xf2>
 8019b54:	0669      	lsls	r1, r5, #25
 8019b56:	d5fb      	bpl.n	8019b50 <_printf_i+0xe8>
 8019b58:	881d      	ldrh	r5, [r3, #0]
 8019b5a:	4854      	ldr	r0, [pc, #336]	; (8019cac <_printf_i+0x244>)
 8019b5c:	2f6f      	cmp	r7, #111	; 0x6f
 8019b5e:	bf0c      	ite	eq
 8019b60:	2308      	moveq	r3, #8
 8019b62:	230a      	movne	r3, #10
 8019b64:	2100      	movs	r1, #0
 8019b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019b6a:	6866      	ldr	r6, [r4, #4]
 8019b6c:	60a6      	str	r6, [r4, #8]
 8019b6e:	2e00      	cmp	r6, #0
 8019b70:	bfa2      	ittt	ge
 8019b72:	6821      	ldrge	r1, [r4, #0]
 8019b74:	f021 0104 	bicge.w	r1, r1, #4
 8019b78:	6021      	strge	r1, [r4, #0]
 8019b7a:	b90d      	cbnz	r5, 8019b80 <_printf_i+0x118>
 8019b7c:	2e00      	cmp	r6, #0
 8019b7e:	d04d      	beq.n	8019c1c <_printf_i+0x1b4>
 8019b80:	4616      	mov	r6, r2
 8019b82:	fbb5 f1f3 	udiv	r1, r5, r3
 8019b86:	fb03 5711 	mls	r7, r3, r1, r5
 8019b8a:	5dc7      	ldrb	r7, [r0, r7]
 8019b8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019b90:	462f      	mov	r7, r5
 8019b92:	42bb      	cmp	r3, r7
 8019b94:	460d      	mov	r5, r1
 8019b96:	d9f4      	bls.n	8019b82 <_printf_i+0x11a>
 8019b98:	2b08      	cmp	r3, #8
 8019b9a:	d10b      	bne.n	8019bb4 <_printf_i+0x14c>
 8019b9c:	6823      	ldr	r3, [r4, #0]
 8019b9e:	07df      	lsls	r7, r3, #31
 8019ba0:	d508      	bpl.n	8019bb4 <_printf_i+0x14c>
 8019ba2:	6923      	ldr	r3, [r4, #16]
 8019ba4:	6861      	ldr	r1, [r4, #4]
 8019ba6:	4299      	cmp	r1, r3
 8019ba8:	bfde      	ittt	le
 8019baa:	2330      	movle	r3, #48	; 0x30
 8019bac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019bb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019bb4:	1b92      	subs	r2, r2, r6
 8019bb6:	6122      	str	r2, [r4, #16]
 8019bb8:	f8cd a000 	str.w	sl, [sp]
 8019bbc:	464b      	mov	r3, r9
 8019bbe:	aa03      	add	r2, sp, #12
 8019bc0:	4621      	mov	r1, r4
 8019bc2:	4640      	mov	r0, r8
 8019bc4:	f7ff fee2 	bl	801998c <_printf_common>
 8019bc8:	3001      	adds	r0, #1
 8019bca:	d14c      	bne.n	8019c66 <_printf_i+0x1fe>
 8019bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8019bd0:	b004      	add	sp, #16
 8019bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bd6:	4835      	ldr	r0, [pc, #212]	; (8019cac <_printf_i+0x244>)
 8019bd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019bdc:	6823      	ldr	r3, [r4, #0]
 8019bde:	680e      	ldr	r6, [r1, #0]
 8019be0:	061f      	lsls	r7, r3, #24
 8019be2:	f856 5b04 	ldr.w	r5, [r6], #4
 8019be6:	600e      	str	r6, [r1, #0]
 8019be8:	d514      	bpl.n	8019c14 <_printf_i+0x1ac>
 8019bea:	07d9      	lsls	r1, r3, #31
 8019bec:	bf44      	itt	mi
 8019bee:	f043 0320 	orrmi.w	r3, r3, #32
 8019bf2:	6023      	strmi	r3, [r4, #0]
 8019bf4:	b91d      	cbnz	r5, 8019bfe <_printf_i+0x196>
 8019bf6:	6823      	ldr	r3, [r4, #0]
 8019bf8:	f023 0320 	bic.w	r3, r3, #32
 8019bfc:	6023      	str	r3, [r4, #0]
 8019bfe:	2310      	movs	r3, #16
 8019c00:	e7b0      	b.n	8019b64 <_printf_i+0xfc>
 8019c02:	6823      	ldr	r3, [r4, #0]
 8019c04:	f043 0320 	orr.w	r3, r3, #32
 8019c08:	6023      	str	r3, [r4, #0]
 8019c0a:	2378      	movs	r3, #120	; 0x78
 8019c0c:	4828      	ldr	r0, [pc, #160]	; (8019cb0 <_printf_i+0x248>)
 8019c0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019c12:	e7e3      	b.n	8019bdc <_printf_i+0x174>
 8019c14:	065e      	lsls	r6, r3, #25
 8019c16:	bf48      	it	mi
 8019c18:	b2ad      	uxthmi	r5, r5
 8019c1a:	e7e6      	b.n	8019bea <_printf_i+0x182>
 8019c1c:	4616      	mov	r6, r2
 8019c1e:	e7bb      	b.n	8019b98 <_printf_i+0x130>
 8019c20:	680b      	ldr	r3, [r1, #0]
 8019c22:	6826      	ldr	r6, [r4, #0]
 8019c24:	6960      	ldr	r0, [r4, #20]
 8019c26:	1d1d      	adds	r5, r3, #4
 8019c28:	600d      	str	r5, [r1, #0]
 8019c2a:	0635      	lsls	r5, r6, #24
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	d501      	bpl.n	8019c34 <_printf_i+0x1cc>
 8019c30:	6018      	str	r0, [r3, #0]
 8019c32:	e002      	b.n	8019c3a <_printf_i+0x1d2>
 8019c34:	0671      	lsls	r1, r6, #25
 8019c36:	d5fb      	bpl.n	8019c30 <_printf_i+0x1c8>
 8019c38:	8018      	strh	r0, [r3, #0]
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	6123      	str	r3, [r4, #16]
 8019c3e:	4616      	mov	r6, r2
 8019c40:	e7ba      	b.n	8019bb8 <_printf_i+0x150>
 8019c42:	680b      	ldr	r3, [r1, #0]
 8019c44:	1d1a      	adds	r2, r3, #4
 8019c46:	600a      	str	r2, [r1, #0]
 8019c48:	681e      	ldr	r6, [r3, #0]
 8019c4a:	6862      	ldr	r2, [r4, #4]
 8019c4c:	2100      	movs	r1, #0
 8019c4e:	4630      	mov	r0, r6
 8019c50:	f7e6 fade 	bl	8000210 <memchr>
 8019c54:	b108      	cbz	r0, 8019c5a <_printf_i+0x1f2>
 8019c56:	1b80      	subs	r0, r0, r6
 8019c58:	6060      	str	r0, [r4, #4]
 8019c5a:	6863      	ldr	r3, [r4, #4]
 8019c5c:	6123      	str	r3, [r4, #16]
 8019c5e:	2300      	movs	r3, #0
 8019c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c64:	e7a8      	b.n	8019bb8 <_printf_i+0x150>
 8019c66:	6923      	ldr	r3, [r4, #16]
 8019c68:	4632      	mov	r2, r6
 8019c6a:	4649      	mov	r1, r9
 8019c6c:	4640      	mov	r0, r8
 8019c6e:	47d0      	blx	sl
 8019c70:	3001      	adds	r0, #1
 8019c72:	d0ab      	beq.n	8019bcc <_printf_i+0x164>
 8019c74:	6823      	ldr	r3, [r4, #0]
 8019c76:	079b      	lsls	r3, r3, #30
 8019c78:	d413      	bmi.n	8019ca2 <_printf_i+0x23a>
 8019c7a:	68e0      	ldr	r0, [r4, #12]
 8019c7c:	9b03      	ldr	r3, [sp, #12]
 8019c7e:	4298      	cmp	r0, r3
 8019c80:	bfb8      	it	lt
 8019c82:	4618      	movlt	r0, r3
 8019c84:	e7a4      	b.n	8019bd0 <_printf_i+0x168>
 8019c86:	2301      	movs	r3, #1
 8019c88:	4632      	mov	r2, r6
 8019c8a:	4649      	mov	r1, r9
 8019c8c:	4640      	mov	r0, r8
 8019c8e:	47d0      	blx	sl
 8019c90:	3001      	adds	r0, #1
 8019c92:	d09b      	beq.n	8019bcc <_printf_i+0x164>
 8019c94:	3501      	adds	r5, #1
 8019c96:	68e3      	ldr	r3, [r4, #12]
 8019c98:	9903      	ldr	r1, [sp, #12]
 8019c9a:	1a5b      	subs	r3, r3, r1
 8019c9c:	42ab      	cmp	r3, r5
 8019c9e:	dcf2      	bgt.n	8019c86 <_printf_i+0x21e>
 8019ca0:	e7eb      	b.n	8019c7a <_printf_i+0x212>
 8019ca2:	2500      	movs	r5, #0
 8019ca4:	f104 0619 	add.w	r6, r4, #25
 8019ca8:	e7f5      	b.n	8019c96 <_printf_i+0x22e>
 8019caa:	bf00      	nop
 8019cac:	0801af31 	.word	0x0801af31
 8019cb0:	0801af42 	.word	0x0801af42

08019cb4 <__swbuf_r>:
 8019cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cb6:	460e      	mov	r6, r1
 8019cb8:	4614      	mov	r4, r2
 8019cba:	4605      	mov	r5, r0
 8019cbc:	b118      	cbz	r0, 8019cc6 <__swbuf_r+0x12>
 8019cbe:	6983      	ldr	r3, [r0, #24]
 8019cc0:	b90b      	cbnz	r3, 8019cc6 <__swbuf_r+0x12>
 8019cc2:	f000 f9d1 	bl	801a068 <__sinit>
 8019cc6:	4b21      	ldr	r3, [pc, #132]	; (8019d4c <__swbuf_r+0x98>)
 8019cc8:	429c      	cmp	r4, r3
 8019cca:	d12b      	bne.n	8019d24 <__swbuf_r+0x70>
 8019ccc:	686c      	ldr	r4, [r5, #4]
 8019cce:	69a3      	ldr	r3, [r4, #24]
 8019cd0:	60a3      	str	r3, [r4, #8]
 8019cd2:	89a3      	ldrh	r3, [r4, #12]
 8019cd4:	071a      	lsls	r2, r3, #28
 8019cd6:	d52f      	bpl.n	8019d38 <__swbuf_r+0x84>
 8019cd8:	6923      	ldr	r3, [r4, #16]
 8019cda:	b36b      	cbz	r3, 8019d38 <__swbuf_r+0x84>
 8019cdc:	6923      	ldr	r3, [r4, #16]
 8019cde:	6820      	ldr	r0, [r4, #0]
 8019ce0:	1ac0      	subs	r0, r0, r3
 8019ce2:	6963      	ldr	r3, [r4, #20]
 8019ce4:	b2f6      	uxtb	r6, r6
 8019ce6:	4283      	cmp	r3, r0
 8019ce8:	4637      	mov	r7, r6
 8019cea:	dc04      	bgt.n	8019cf6 <__swbuf_r+0x42>
 8019cec:	4621      	mov	r1, r4
 8019cee:	4628      	mov	r0, r5
 8019cf0:	f000 f926 	bl	8019f40 <_fflush_r>
 8019cf4:	bb30      	cbnz	r0, 8019d44 <__swbuf_r+0x90>
 8019cf6:	68a3      	ldr	r3, [r4, #8]
 8019cf8:	3b01      	subs	r3, #1
 8019cfa:	60a3      	str	r3, [r4, #8]
 8019cfc:	6823      	ldr	r3, [r4, #0]
 8019cfe:	1c5a      	adds	r2, r3, #1
 8019d00:	6022      	str	r2, [r4, #0]
 8019d02:	701e      	strb	r6, [r3, #0]
 8019d04:	6963      	ldr	r3, [r4, #20]
 8019d06:	3001      	adds	r0, #1
 8019d08:	4283      	cmp	r3, r0
 8019d0a:	d004      	beq.n	8019d16 <__swbuf_r+0x62>
 8019d0c:	89a3      	ldrh	r3, [r4, #12]
 8019d0e:	07db      	lsls	r3, r3, #31
 8019d10:	d506      	bpl.n	8019d20 <__swbuf_r+0x6c>
 8019d12:	2e0a      	cmp	r6, #10
 8019d14:	d104      	bne.n	8019d20 <__swbuf_r+0x6c>
 8019d16:	4621      	mov	r1, r4
 8019d18:	4628      	mov	r0, r5
 8019d1a:	f000 f911 	bl	8019f40 <_fflush_r>
 8019d1e:	b988      	cbnz	r0, 8019d44 <__swbuf_r+0x90>
 8019d20:	4638      	mov	r0, r7
 8019d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d24:	4b0a      	ldr	r3, [pc, #40]	; (8019d50 <__swbuf_r+0x9c>)
 8019d26:	429c      	cmp	r4, r3
 8019d28:	d101      	bne.n	8019d2e <__swbuf_r+0x7a>
 8019d2a:	68ac      	ldr	r4, [r5, #8]
 8019d2c:	e7cf      	b.n	8019cce <__swbuf_r+0x1a>
 8019d2e:	4b09      	ldr	r3, [pc, #36]	; (8019d54 <__swbuf_r+0xa0>)
 8019d30:	429c      	cmp	r4, r3
 8019d32:	bf08      	it	eq
 8019d34:	68ec      	ldreq	r4, [r5, #12]
 8019d36:	e7ca      	b.n	8019cce <__swbuf_r+0x1a>
 8019d38:	4621      	mov	r1, r4
 8019d3a:	4628      	mov	r0, r5
 8019d3c:	f000 f80c 	bl	8019d58 <__swsetup_r>
 8019d40:	2800      	cmp	r0, #0
 8019d42:	d0cb      	beq.n	8019cdc <__swbuf_r+0x28>
 8019d44:	f04f 37ff 	mov.w	r7, #4294967295
 8019d48:	e7ea      	b.n	8019d20 <__swbuf_r+0x6c>
 8019d4a:	bf00      	nop
 8019d4c:	0801af74 	.word	0x0801af74
 8019d50:	0801af94 	.word	0x0801af94
 8019d54:	0801af54 	.word	0x0801af54

08019d58 <__swsetup_r>:
 8019d58:	4b32      	ldr	r3, [pc, #200]	; (8019e24 <__swsetup_r+0xcc>)
 8019d5a:	b570      	push	{r4, r5, r6, lr}
 8019d5c:	681d      	ldr	r5, [r3, #0]
 8019d5e:	4606      	mov	r6, r0
 8019d60:	460c      	mov	r4, r1
 8019d62:	b125      	cbz	r5, 8019d6e <__swsetup_r+0x16>
 8019d64:	69ab      	ldr	r3, [r5, #24]
 8019d66:	b913      	cbnz	r3, 8019d6e <__swsetup_r+0x16>
 8019d68:	4628      	mov	r0, r5
 8019d6a:	f000 f97d 	bl	801a068 <__sinit>
 8019d6e:	4b2e      	ldr	r3, [pc, #184]	; (8019e28 <__swsetup_r+0xd0>)
 8019d70:	429c      	cmp	r4, r3
 8019d72:	d10f      	bne.n	8019d94 <__swsetup_r+0x3c>
 8019d74:	686c      	ldr	r4, [r5, #4]
 8019d76:	89a3      	ldrh	r3, [r4, #12]
 8019d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019d7c:	0719      	lsls	r1, r3, #28
 8019d7e:	d42c      	bmi.n	8019dda <__swsetup_r+0x82>
 8019d80:	06dd      	lsls	r5, r3, #27
 8019d82:	d411      	bmi.n	8019da8 <__swsetup_r+0x50>
 8019d84:	2309      	movs	r3, #9
 8019d86:	6033      	str	r3, [r6, #0]
 8019d88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019d8c:	81a3      	strh	r3, [r4, #12]
 8019d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8019d92:	e03e      	b.n	8019e12 <__swsetup_r+0xba>
 8019d94:	4b25      	ldr	r3, [pc, #148]	; (8019e2c <__swsetup_r+0xd4>)
 8019d96:	429c      	cmp	r4, r3
 8019d98:	d101      	bne.n	8019d9e <__swsetup_r+0x46>
 8019d9a:	68ac      	ldr	r4, [r5, #8]
 8019d9c:	e7eb      	b.n	8019d76 <__swsetup_r+0x1e>
 8019d9e:	4b24      	ldr	r3, [pc, #144]	; (8019e30 <__swsetup_r+0xd8>)
 8019da0:	429c      	cmp	r4, r3
 8019da2:	bf08      	it	eq
 8019da4:	68ec      	ldreq	r4, [r5, #12]
 8019da6:	e7e6      	b.n	8019d76 <__swsetup_r+0x1e>
 8019da8:	0758      	lsls	r0, r3, #29
 8019daa:	d512      	bpl.n	8019dd2 <__swsetup_r+0x7a>
 8019dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019dae:	b141      	cbz	r1, 8019dc2 <__swsetup_r+0x6a>
 8019db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019db4:	4299      	cmp	r1, r3
 8019db6:	d002      	beq.n	8019dbe <__swsetup_r+0x66>
 8019db8:	4630      	mov	r0, r6
 8019dba:	f7fd fb87 	bl	80174cc <_free_r>
 8019dbe:	2300      	movs	r3, #0
 8019dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8019dc2:	89a3      	ldrh	r3, [r4, #12]
 8019dc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019dc8:	81a3      	strh	r3, [r4, #12]
 8019dca:	2300      	movs	r3, #0
 8019dcc:	6063      	str	r3, [r4, #4]
 8019dce:	6923      	ldr	r3, [r4, #16]
 8019dd0:	6023      	str	r3, [r4, #0]
 8019dd2:	89a3      	ldrh	r3, [r4, #12]
 8019dd4:	f043 0308 	orr.w	r3, r3, #8
 8019dd8:	81a3      	strh	r3, [r4, #12]
 8019dda:	6923      	ldr	r3, [r4, #16]
 8019ddc:	b94b      	cbnz	r3, 8019df2 <__swsetup_r+0x9a>
 8019dde:	89a3      	ldrh	r3, [r4, #12]
 8019de0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019de8:	d003      	beq.n	8019df2 <__swsetup_r+0x9a>
 8019dea:	4621      	mov	r1, r4
 8019dec:	4630      	mov	r0, r6
 8019dee:	f000 f9fd 	bl	801a1ec <__smakebuf_r>
 8019df2:	89a0      	ldrh	r0, [r4, #12]
 8019df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019df8:	f010 0301 	ands.w	r3, r0, #1
 8019dfc:	d00a      	beq.n	8019e14 <__swsetup_r+0xbc>
 8019dfe:	2300      	movs	r3, #0
 8019e00:	60a3      	str	r3, [r4, #8]
 8019e02:	6963      	ldr	r3, [r4, #20]
 8019e04:	425b      	negs	r3, r3
 8019e06:	61a3      	str	r3, [r4, #24]
 8019e08:	6923      	ldr	r3, [r4, #16]
 8019e0a:	b943      	cbnz	r3, 8019e1e <__swsetup_r+0xc6>
 8019e0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019e10:	d1ba      	bne.n	8019d88 <__swsetup_r+0x30>
 8019e12:	bd70      	pop	{r4, r5, r6, pc}
 8019e14:	0781      	lsls	r1, r0, #30
 8019e16:	bf58      	it	pl
 8019e18:	6963      	ldrpl	r3, [r4, #20]
 8019e1a:	60a3      	str	r3, [r4, #8]
 8019e1c:	e7f4      	b.n	8019e08 <__swsetup_r+0xb0>
 8019e1e:	2000      	movs	r0, #0
 8019e20:	e7f7      	b.n	8019e12 <__swsetup_r+0xba>
 8019e22:	bf00      	nop
 8019e24:	2000000c 	.word	0x2000000c
 8019e28:	0801af74 	.word	0x0801af74
 8019e2c:	0801af94 	.word	0x0801af94
 8019e30:	0801af54 	.word	0x0801af54

08019e34 <__sflush_r>:
 8019e34:	898a      	ldrh	r2, [r1, #12]
 8019e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e3a:	4605      	mov	r5, r0
 8019e3c:	0710      	lsls	r0, r2, #28
 8019e3e:	460c      	mov	r4, r1
 8019e40:	d458      	bmi.n	8019ef4 <__sflush_r+0xc0>
 8019e42:	684b      	ldr	r3, [r1, #4]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	dc05      	bgt.n	8019e54 <__sflush_r+0x20>
 8019e48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	dc02      	bgt.n	8019e54 <__sflush_r+0x20>
 8019e4e:	2000      	movs	r0, #0
 8019e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019e56:	2e00      	cmp	r6, #0
 8019e58:	d0f9      	beq.n	8019e4e <__sflush_r+0x1a>
 8019e5a:	2300      	movs	r3, #0
 8019e5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019e60:	682f      	ldr	r7, [r5, #0]
 8019e62:	602b      	str	r3, [r5, #0]
 8019e64:	d032      	beq.n	8019ecc <__sflush_r+0x98>
 8019e66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019e68:	89a3      	ldrh	r3, [r4, #12]
 8019e6a:	075a      	lsls	r2, r3, #29
 8019e6c:	d505      	bpl.n	8019e7a <__sflush_r+0x46>
 8019e6e:	6863      	ldr	r3, [r4, #4]
 8019e70:	1ac0      	subs	r0, r0, r3
 8019e72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019e74:	b10b      	cbz	r3, 8019e7a <__sflush_r+0x46>
 8019e76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019e78:	1ac0      	subs	r0, r0, r3
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	4602      	mov	r2, r0
 8019e7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019e80:	6a21      	ldr	r1, [r4, #32]
 8019e82:	4628      	mov	r0, r5
 8019e84:	47b0      	blx	r6
 8019e86:	1c43      	adds	r3, r0, #1
 8019e88:	89a3      	ldrh	r3, [r4, #12]
 8019e8a:	d106      	bne.n	8019e9a <__sflush_r+0x66>
 8019e8c:	6829      	ldr	r1, [r5, #0]
 8019e8e:	291d      	cmp	r1, #29
 8019e90:	d82c      	bhi.n	8019eec <__sflush_r+0xb8>
 8019e92:	4a2a      	ldr	r2, [pc, #168]	; (8019f3c <__sflush_r+0x108>)
 8019e94:	40ca      	lsrs	r2, r1
 8019e96:	07d6      	lsls	r6, r2, #31
 8019e98:	d528      	bpl.n	8019eec <__sflush_r+0xb8>
 8019e9a:	2200      	movs	r2, #0
 8019e9c:	6062      	str	r2, [r4, #4]
 8019e9e:	04d9      	lsls	r1, r3, #19
 8019ea0:	6922      	ldr	r2, [r4, #16]
 8019ea2:	6022      	str	r2, [r4, #0]
 8019ea4:	d504      	bpl.n	8019eb0 <__sflush_r+0x7c>
 8019ea6:	1c42      	adds	r2, r0, #1
 8019ea8:	d101      	bne.n	8019eae <__sflush_r+0x7a>
 8019eaa:	682b      	ldr	r3, [r5, #0]
 8019eac:	b903      	cbnz	r3, 8019eb0 <__sflush_r+0x7c>
 8019eae:	6560      	str	r0, [r4, #84]	; 0x54
 8019eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019eb2:	602f      	str	r7, [r5, #0]
 8019eb4:	2900      	cmp	r1, #0
 8019eb6:	d0ca      	beq.n	8019e4e <__sflush_r+0x1a>
 8019eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ebc:	4299      	cmp	r1, r3
 8019ebe:	d002      	beq.n	8019ec6 <__sflush_r+0x92>
 8019ec0:	4628      	mov	r0, r5
 8019ec2:	f7fd fb03 	bl	80174cc <_free_r>
 8019ec6:	2000      	movs	r0, #0
 8019ec8:	6360      	str	r0, [r4, #52]	; 0x34
 8019eca:	e7c1      	b.n	8019e50 <__sflush_r+0x1c>
 8019ecc:	6a21      	ldr	r1, [r4, #32]
 8019ece:	2301      	movs	r3, #1
 8019ed0:	4628      	mov	r0, r5
 8019ed2:	47b0      	blx	r6
 8019ed4:	1c41      	adds	r1, r0, #1
 8019ed6:	d1c7      	bne.n	8019e68 <__sflush_r+0x34>
 8019ed8:	682b      	ldr	r3, [r5, #0]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d0c4      	beq.n	8019e68 <__sflush_r+0x34>
 8019ede:	2b1d      	cmp	r3, #29
 8019ee0:	d001      	beq.n	8019ee6 <__sflush_r+0xb2>
 8019ee2:	2b16      	cmp	r3, #22
 8019ee4:	d101      	bne.n	8019eea <__sflush_r+0xb6>
 8019ee6:	602f      	str	r7, [r5, #0]
 8019ee8:	e7b1      	b.n	8019e4e <__sflush_r+0x1a>
 8019eea:	89a3      	ldrh	r3, [r4, #12]
 8019eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ef0:	81a3      	strh	r3, [r4, #12]
 8019ef2:	e7ad      	b.n	8019e50 <__sflush_r+0x1c>
 8019ef4:	690f      	ldr	r7, [r1, #16]
 8019ef6:	2f00      	cmp	r7, #0
 8019ef8:	d0a9      	beq.n	8019e4e <__sflush_r+0x1a>
 8019efa:	0793      	lsls	r3, r2, #30
 8019efc:	680e      	ldr	r6, [r1, #0]
 8019efe:	bf08      	it	eq
 8019f00:	694b      	ldreq	r3, [r1, #20]
 8019f02:	600f      	str	r7, [r1, #0]
 8019f04:	bf18      	it	ne
 8019f06:	2300      	movne	r3, #0
 8019f08:	eba6 0807 	sub.w	r8, r6, r7
 8019f0c:	608b      	str	r3, [r1, #8]
 8019f0e:	f1b8 0f00 	cmp.w	r8, #0
 8019f12:	dd9c      	ble.n	8019e4e <__sflush_r+0x1a>
 8019f14:	6a21      	ldr	r1, [r4, #32]
 8019f16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019f18:	4643      	mov	r3, r8
 8019f1a:	463a      	mov	r2, r7
 8019f1c:	4628      	mov	r0, r5
 8019f1e:	47b0      	blx	r6
 8019f20:	2800      	cmp	r0, #0
 8019f22:	dc06      	bgt.n	8019f32 <__sflush_r+0xfe>
 8019f24:	89a3      	ldrh	r3, [r4, #12]
 8019f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f2a:	81a3      	strh	r3, [r4, #12]
 8019f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8019f30:	e78e      	b.n	8019e50 <__sflush_r+0x1c>
 8019f32:	4407      	add	r7, r0
 8019f34:	eba8 0800 	sub.w	r8, r8, r0
 8019f38:	e7e9      	b.n	8019f0e <__sflush_r+0xda>
 8019f3a:	bf00      	nop
 8019f3c:	20400001 	.word	0x20400001

08019f40 <_fflush_r>:
 8019f40:	b538      	push	{r3, r4, r5, lr}
 8019f42:	690b      	ldr	r3, [r1, #16]
 8019f44:	4605      	mov	r5, r0
 8019f46:	460c      	mov	r4, r1
 8019f48:	b913      	cbnz	r3, 8019f50 <_fflush_r+0x10>
 8019f4a:	2500      	movs	r5, #0
 8019f4c:	4628      	mov	r0, r5
 8019f4e:	bd38      	pop	{r3, r4, r5, pc}
 8019f50:	b118      	cbz	r0, 8019f5a <_fflush_r+0x1a>
 8019f52:	6983      	ldr	r3, [r0, #24]
 8019f54:	b90b      	cbnz	r3, 8019f5a <_fflush_r+0x1a>
 8019f56:	f000 f887 	bl	801a068 <__sinit>
 8019f5a:	4b14      	ldr	r3, [pc, #80]	; (8019fac <_fflush_r+0x6c>)
 8019f5c:	429c      	cmp	r4, r3
 8019f5e:	d11b      	bne.n	8019f98 <_fflush_r+0x58>
 8019f60:	686c      	ldr	r4, [r5, #4]
 8019f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d0ef      	beq.n	8019f4a <_fflush_r+0xa>
 8019f6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019f6c:	07d0      	lsls	r0, r2, #31
 8019f6e:	d404      	bmi.n	8019f7a <_fflush_r+0x3a>
 8019f70:	0599      	lsls	r1, r3, #22
 8019f72:	d402      	bmi.n	8019f7a <_fflush_r+0x3a>
 8019f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019f76:	f7ff fbae 	bl	80196d6 <__retarget_lock_acquire_recursive>
 8019f7a:	4628      	mov	r0, r5
 8019f7c:	4621      	mov	r1, r4
 8019f7e:	f7ff ff59 	bl	8019e34 <__sflush_r>
 8019f82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019f84:	07da      	lsls	r2, r3, #31
 8019f86:	4605      	mov	r5, r0
 8019f88:	d4e0      	bmi.n	8019f4c <_fflush_r+0xc>
 8019f8a:	89a3      	ldrh	r3, [r4, #12]
 8019f8c:	059b      	lsls	r3, r3, #22
 8019f8e:	d4dd      	bmi.n	8019f4c <_fflush_r+0xc>
 8019f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019f92:	f7ff fba1 	bl	80196d8 <__retarget_lock_release_recursive>
 8019f96:	e7d9      	b.n	8019f4c <_fflush_r+0xc>
 8019f98:	4b05      	ldr	r3, [pc, #20]	; (8019fb0 <_fflush_r+0x70>)
 8019f9a:	429c      	cmp	r4, r3
 8019f9c:	d101      	bne.n	8019fa2 <_fflush_r+0x62>
 8019f9e:	68ac      	ldr	r4, [r5, #8]
 8019fa0:	e7df      	b.n	8019f62 <_fflush_r+0x22>
 8019fa2:	4b04      	ldr	r3, [pc, #16]	; (8019fb4 <_fflush_r+0x74>)
 8019fa4:	429c      	cmp	r4, r3
 8019fa6:	bf08      	it	eq
 8019fa8:	68ec      	ldreq	r4, [r5, #12]
 8019faa:	e7da      	b.n	8019f62 <_fflush_r+0x22>
 8019fac:	0801af74 	.word	0x0801af74
 8019fb0:	0801af94 	.word	0x0801af94
 8019fb4:	0801af54 	.word	0x0801af54

08019fb8 <std>:
 8019fb8:	2300      	movs	r3, #0
 8019fba:	b510      	push	{r4, lr}
 8019fbc:	4604      	mov	r4, r0
 8019fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8019fc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019fc6:	6083      	str	r3, [r0, #8]
 8019fc8:	8181      	strh	r1, [r0, #12]
 8019fca:	6643      	str	r3, [r0, #100]	; 0x64
 8019fcc:	81c2      	strh	r2, [r0, #14]
 8019fce:	6183      	str	r3, [r0, #24]
 8019fd0:	4619      	mov	r1, r3
 8019fd2:	2208      	movs	r2, #8
 8019fd4:	305c      	adds	r0, #92	; 0x5c
 8019fd6:	f7fd fa71 	bl	80174bc <memset>
 8019fda:	4b05      	ldr	r3, [pc, #20]	; (8019ff0 <std+0x38>)
 8019fdc:	6263      	str	r3, [r4, #36]	; 0x24
 8019fde:	4b05      	ldr	r3, [pc, #20]	; (8019ff4 <std+0x3c>)
 8019fe0:	62a3      	str	r3, [r4, #40]	; 0x28
 8019fe2:	4b05      	ldr	r3, [pc, #20]	; (8019ff8 <std+0x40>)
 8019fe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019fe6:	4b05      	ldr	r3, [pc, #20]	; (8019ffc <std+0x44>)
 8019fe8:	6224      	str	r4, [r4, #32]
 8019fea:	6323      	str	r3, [r4, #48]	; 0x30
 8019fec:	bd10      	pop	{r4, pc}
 8019fee:	bf00      	nop
 8019ff0:	0801a26d 	.word	0x0801a26d
 8019ff4:	0801a28f 	.word	0x0801a28f
 8019ff8:	0801a2c7 	.word	0x0801a2c7
 8019ffc:	0801a2eb 	.word	0x0801a2eb

0801a000 <_cleanup_r>:
 801a000:	4901      	ldr	r1, [pc, #4]	; (801a008 <_cleanup_r+0x8>)
 801a002:	f000 b8af 	b.w	801a164 <_fwalk_reent>
 801a006:	bf00      	nop
 801a008:	08019f41 	.word	0x08019f41

0801a00c <__sfmoreglue>:
 801a00c:	b570      	push	{r4, r5, r6, lr}
 801a00e:	1e4a      	subs	r2, r1, #1
 801a010:	2568      	movs	r5, #104	; 0x68
 801a012:	4355      	muls	r5, r2
 801a014:	460e      	mov	r6, r1
 801a016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a01a:	f7fd faa7 	bl	801756c <_malloc_r>
 801a01e:	4604      	mov	r4, r0
 801a020:	b140      	cbz	r0, 801a034 <__sfmoreglue+0x28>
 801a022:	2100      	movs	r1, #0
 801a024:	e9c0 1600 	strd	r1, r6, [r0]
 801a028:	300c      	adds	r0, #12
 801a02a:	60a0      	str	r0, [r4, #8]
 801a02c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a030:	f7fd fa44 	bl	80174bc <memset>
 801a034:	4620      	mov	r0, r4
 801a036:	bd70      	pop	{r4, r5, r6, pc}

0801a038 <__sfp_lock_acquire>:
 801a038:	4801      	ldr	r0, [pc, #4]	; (801a040 <__sfp_lock_acquire+0x8>)
 801a03a:	f7ff bb4c 	b.w	80196d6 <__retarget_lock_acquire_recursive>
 801a03e:	bf00      	nop
 801a040:	20000525 	.word	0x20000525

0801a044 <__sfp_lock_release>:
 801a044:	4801      	ldr	r0, [pc, #4]	; (801a04c <__sfp_lock_release+0x8>)
 801a046:	f7ff bb47 	b.w	80196d8 <__retarget_lock_release_recursive>
 801a04a:	bf00      	nop
 801a04c:	20000525 	.word	0x20000525

0801a050 <__sinit_lock_acquire>:
 801a050:	4801      	ldr	r0, [pc, #4]	; (801a058 <__sinit_lock_acquire+0x8>)
 801a052:	f7ff bb40 	b.w	80196d6 <__retarget_lock_acquire_recursive>
 801a056:	bf00      	nop
 801a058:	20000527 	.word	0x20000527

0801a05c <__sinit_lock_release>:
 801a05c:	4801      	ldr	r0, [pc, #4]	; (801a064 <__sinit_lock_release+0x8>)
 801a05e:	f7ff bb3b 	b.w	80196d8 <__retarget_lock_release_recursive>
 801a062:	bf00      	nop
 801a064:	20000527 	.word	0x20000527

0801a068 <__sinit>:
 801a068:	b510      	push	{r4, lr}
 801a06a:	4604      	mov	r4, r0
 801a06c:	f7ff fff0 	bl	801a050 <__sinit_lock_acquire>
 801a070:	69a3      	ldr	r3, [r4, #24]
 801a072:	b11b      	cbz	r3, 801a07c <__sinit+0x14>
 801a074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a078:	f7ff bff0 	b.w	801a05c <__sinit_lock_release>
 801a07c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a080:	6523      	str	r3, [r4, #80]	; 0x50
 801a082:	4b13      	ldr	r3, [pc, #76]	; (801a0d0 <__sinit+0x68>)
 801a084:	4a13      	ldr	r2, [pc, #76]	; (801a0d4 <__sinit+0x6c>)
 801a086:	681b      	ldr	r3, [r3, #0]
 801a088:	62a2      	str	r2, [r4, #40]	; 0x28
 801a08a:	42a3      	cmp	r3, r4
 801a08c:	bf04      	itt	eq
 801a08e:	2301      	moveq	r3, #1
 801a090:	61a3      	streq	r3, [r4, #24]
 801a092:	4620      	mov	r0, r4
 801a094:	f000 f820 	bl	801a0d8 <__sfp>
 801a098:	6060      	str	r0, [r4, #4]
 801a09a:	4620      	mov	r0, r4
 801a09c:	f000 f81c 	bl	801a0d8 <__sfp>
 801a0a0:	60a0      	str	r0, [r4, #8]
 801a0a2:	4620      	mov	r0, r4
 801a0a4:	f000 f818 	bl	801a0d8 <__sfp>
 801a0a8:	2200      	movs	r2, #0
 801a0aa:	60e0      	str	r0, [r4, #12]
 801a0ac:	2104      	movs	r1, #4
 801a0ae:	6860      	ldr	r0, [r4, #4]
 801a0b0:	f7ff ff82 	bl	8019fb8 <std>
 801a0b4:	68a0      	ldr	r0, [r4, #8]
 801a0b6:	2201      	movs	r2, #1
 801a0b8:	2109      	movs	r1, #9
 801a0ba:	f7ff ff7d 	bl	8019fb8 <std>
 801a0be:	68e0      	ldr	r0, [r4, #12]
 801a0c0:	2202      	movs	r2, #2
 801a0c2:	2112      	movs	r1, #18
 801a0c4:	f7ff ff78 	bl	8019fb8 <std>
 801a0c8:	2301      	movs	r3, #1
 801a0ca:	61a3      	str	r3, [r4, #24]
 801a0cc:	e7d2      	b.n	801a074 <__sinit+0xc>
 801a0ce:	bf00      	nop
 801a0d0:	0801ab54 	.word	0x0801ab54
 801a0d4:	0801a001 	.word	0x0801a001

0801a0d8 <__sfp>:
 801a0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0da:	4607      	mov	r7, r0
 801a0dc:	f7ff ffac 	bl	801a038 <__sfp_lock_acquire>
 801a0e0:	4b1e      	ldr	r3, [pc, #120]	; (801a15c <__sfp+0x84>)
 801a0e2:	681e      	ldr	r6, [r3, #0]
 801a0e4:	69b3      	ldr	r3, [r6, #24]
 801a0e6:	b913      	cbnz	r3, 801a0ee <__sfp+0x16>
 801a0e8:	4630      	mov	r0, r6
 801a0ea:	f7ff ffbd 	bl	801a068 <__sinit>
 801a0ee:	3648      	adds	r6, #72	; 0x48
 801a0f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a0f4:	3b01      	subs	r3, #1
 801a0f6:	d503      	bpl.n	801a100 <__sfp+0x28>
 801a0f8:	6833      	ldr	r3, [r6, #0]
 801a0fa:	b30b      	cbz	r3, 801a140 <__sfp+0x68>
 801a0fc:	6836      	ldr	r6, [r6, #0]
 801a0fe:	e7f7      	b.n	801a0f0 <__sfp+0x18>
 801a100:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a104:	b9d5      	cbnz	r5, 801a13c <__sfp+0x64>
 801a106:	4b16      	ldr	r3, [pc, #88]	; (801a160 <__sfp+0x88>)
 801a108:	60e3      	str	r3, [r4, #12]
 801a10a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a10e:	6665      	str	r5, [r4, #100]	; 0x64
 801a110:	f7ff fae0 	bl	80196d4 <__retarget_lock_init_recursive>
 801a114:	f7ff ff96 	bl	801a044 <__sfp_lock_release>
 801a118:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a11c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a120:	6025      	str	r5, [r4, #0]
 801a122:	61a5      	str	r5, [r4, #24]
 801a124:	2208      	movs	r2, #8
 801a126:	4629      	mov	r1, r5
 801a128:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a12c:	f7fd f9c6 	bl	80174bc <memset>
 801a130:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a134:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a138:	4620      	mov	r0, r4
 801a13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a13c:	3468      	adds	r4, #104	; 0x68
 801a13e:	e7d9      	b.n	801a0f4 <__sfp+0x1c>
 801a140:	2104      	movs	r1, #4
 801a142:	4638      	mov	r0, r7
 801a144:	f7ff ff62 	bl	801a00c <__sfmoreglue>
 801a148:	4604      	mov	r4, r0
 801a14a:	6030      	str	r0, [r6, #0]
 801a14c:	2800      	cmp	r0, #0
 801a14e:	d1d5      	bne.n	801a0fc <__sfp+0x24>
 801a150:	f7ff ff78 	bl	801a044 <__sfp_lock_release>
 801a154:	230c      	movs	r3, #12
 801a156:	603b      	str	r3, [r7, #0]
 801a158:	e7ee      	b.n	801a138 <__sfp+0x60>
 801a15a:	bf00      	nop
 801a15c:	0801ab54 	.word	0x0801ab54
 801a160:	ffff0001 	.word	0xffff0001

0801a164 <_fwalk_reent>:
 801a164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a168:	4606      	mov	r6, r0
 801a16a:	4688      	mov	r8, r1
 801a16c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a170:	2700      	movs	r7, #0
 801a172:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a176:	f1b9 0901 	subs.w	r9, r9, #1
 801a17a:	d505      	bpl.n	801a188 <_fwalk_reent+0x24>
 801a17c:	6824      	ldr	r4, [r4, #0]
 801a17e:	2c00      	cmp	r4, #0
 801a180:	d1f7      	bne.n	801a172 <_fwalk_reent+0xe>
 801a182:	4638      	mov	r0, r7
 801a184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a188:	89ab      	ldrh	r3, [r5, #12]
 801a18a:	2b01      	cmp	r3, #1
 801a18c:	d907      	bls.n	801a19e <_fwalk_reent+0x3a>
 801a18e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a192:	3301      	adds	r3, #1
 801a194:	d003      	beq.n	801a19e <_fwalk_reent+0x3a>
 801a196:	4629      	mov	r1, r5
 801a198:	4630      	mov	r0, r6
 801a19a:	47c0      	blx	r8
 801a19c:	4307      	orrs	r7, r0
 801a19e:	3568      	adds	r5, #104	; 0x68
 801a1a0:	e7e9      	b.n	801a176 <_fwalk_reent+0x12>

0801a1a2 <__swhatbuf_r>:
 801a1a2:	b570      	push	{r4, r5, r6, lr}
 801a1a4:	460e      	mov	r6, r1
 801a1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1aa:	2900      	cmp	r1, #0
 801a1ac:	b096      	sub	sp, #88	; 0x58
 801a1ae:	4614      	mov	r4, r2
 801a1b0:	461d      	mov	r5, r3
 801a1b2:	da07      	bge.n	801a1c4 <__swhatbuf_r+0x22>
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	602b      	str	r3, [r5, #0]
 801a1b8:	89b3      	ldrh	r3, [r6, #12]
 801a1ba:	061a      	lsls	r2, r3, #24
 801a1bc:	d410      	bmi.n	801a1e0 <__swhatbuf_r+0x3e>
 801a1be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a1c2:	e00e      	b.n	801a1e2 <__swhatbuf_r+0x40>
 801a1c4:	466a      	mov	r2, sp
 801a1c6:	f000 f8b7 	bl	801a338 <_fstat_r>
 801a1ca:	2800      	cmp	r0, #0
 801a1cc:	dbf2      	blt.n	801a1b4 <__swhatbuf_r+0x12>
 801a1ce:	9a01      	ldr	r2, [sp, #4]
 801a1d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a1d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a1d8:	425a      	negs	r2, r3
 801a1da:	415a      	adcs	r2, r3
 801a1dc:	602a      	str	r2, [r5, #0]
 801a1de:	e7ee      	b.n	801a1be <__swhatbuf_r+0x1c>
 801a1e0:	2340      	movs	r3, #64	; 0x40
 801a1e2:	2000      	movs	r0, #0
 801a1e4:	6023      	str	r3, [r4, #0]
 801a1e6:	b016      	add	sp, #88	; 0x58
 801a1e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a1ec <__smakebuf_r>:
 801a1ec:	898b      	ldrh	r3, [r1, #12]
 801a1ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a1f0:	079d      	lsls	r5, r3, #30
 801a1f2:	4606      	mov	r6, r0
 801a1f4:	460c      	mov	r4, r1
 801a1f6:	d507      	bpl.n	801a208 <__smakebuf_r+0x1c>
 801a1f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a1fc:	6023      	str	r3, [r4, #0]
 801a1fe:	6123      	str	r3, [r4, #16]
 801a200:	2301      	movs	r3, #1
 801a202:	6163      	str	r3, [r4, #20]
 801a204:	b002      	add	sp, #8
 801a206:	bd70      	pop	{r4, r5, r6, pc}
 801a208:	ab01      	add	r3, sp, #4
 801a20a:	466a      	mov	r2, sp
 801a20c:	f7ff ffc9 	bl	801a1a2 <__swhatbuf_r>
 801a210:	9900      	ldr	r1, [sp, #0]
 801a212:	4605      	mov	r5, r0
 801a214:	4630      	mov	r0, r6
 801a216:	f7fd f9a9 	bl	801756c <_malloc_r>
 801a21a:	b948      	cbnz	r0, 801a230 <__smakebuf_r+0x44>
 801a21c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a220:	059a      	lsls	r2, r3, #22
 801a222:	d4ef      	bmi.n	801a204 <__smakebuf_r+0x18>
 801a224:	f023 0303 	bic.w	r3, r3, #3
 801a228:	f043 0302 	orr.w	r3, r3, #2
 801a22c:	81a3      	strh	r3, [r4, #12]
 801a22e:	e7e3      	b.n	801a1f8 <__smakebuf_r+0xc>
 801a230:	4b0d      	ldr	r3, [pc, #52]	; (801a268 <__smakebuf_r+0x7c>)
 801a232:	62b3      	str	r3, [r6, #40]	; 0x28
 801a234:	89a3      	ldrh	r3, [r4, #12]
 801a236:	6020      	str	r0, [r4, #0]
 801a238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a23c:	81a3      	strh	r3, [r4, #12]
 801a23e:	9b00      	ldr	r3, [sp, #0]
 801a240:	6163      	str	r3, [r4, #20]
 801a242:	9b01      	ldr	r3, [sp, #4]
 801a244:	6120      	str	r0, [r4, #16]
 801a246:	b15b      	cbz	r3, 801a260 <__smakebuf_r+0x74>
 801a248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a24c:	4630      	mov	r0, r6
 801a24e:	f000 f885 	bl	801a35c <_isatty_r>
 801a252:	b128      	cbz	r0, 801a260 <__smakebuf_r+0x74>
 801a254:	89a3      	ldrh	r3, [r4, #12]
 801a256:	f023 0303 	bic.w	r3, r3, #3
 801a25a:	f043 0301 	orr.w	r3, r3, #1
 801a25e:	81a3      	strh	r3, [r4, #12]
 801a260:	89a0      	ldrh	r0, [r4, #12]
 801a262:	4305      	orrs	r5, r0
 801a264:	81a5      	strh	r5, [r4, #12]
 801a266:	e7cd      	b.n	801a204 <__smakebuf_r+0x18>
 801a268:	0801a001 	.word	0x0801a001

0801a26c <__sread>:
 801a26c:	b510      	push	{r4, lr}
 801a26e:	460c      	mov	r4, r1
 801a270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a274:	f000 f894 	bl	801a3a0 <_read_r>
 801a278:	2800      	cmp	r0, #0
 801a27a:	bfab      	itete	ge
 801a27c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a27e:	89a3      	ldrhlt	r3, [r4, #12]
 801a280:	181b      	addge	r3, r3, r0
 801a282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a286:	bfac      	ite	ge
 801a288:	6563      	strge	r3, [r4, #84]	; 0x54
 801a28a:	81a3      	strhlt	r3, [r4, #12]
 801a28c:	bd10      	pop	{r4, pc}

0801a28e <__swrite>:
 801a28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a292:	461f      	mov	r7, r3
 801a294:	898b      	ldrh	r3, [r1, #12]
 801a296:	05db      	lsls	r3, r3, #23
 801a298:	4605      	mov	r5, r0
 801a29a:	460c      	mov	r4, r1
 801a29c:	4616      	mov	r6, r2
 801a29e:	d505      	bpl.n	801a2ac <__swrite+0x1e>
 801a2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2a4:	2302      	movs	r3, #2
 801a2a6:	2200      	movs	r2, #0
 801a2a8:	f000 f868 	bl	801a37c <_lseek_r>
 801a2ac:	89a3      	ldrh	r3, [r4, #12]
 801a2ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a2b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a2b6:	81a3      	strh	r3, [r4, #12]
 801a2b8:	4632      	mov	r2, r6
 801a2ba:	463b      	mov	r3, r7
 801a2bc:	4628      	mov	r0, r5
 801a2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a2c2:	f000 b817 	b.w	801a2f4 <_write_r>

0801a2c6 <__sseek>:
 801a2c6:	b510      	push	{r4, lr}
 801a2c8:	460c      	mov	r4, r1
 801a2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2ce:	f000 f855 	bl	801a37c <_lseek_r>
 801a2d2:	1c43      	adds	r3, r0, #1
 801a2d4:	89a3      	ldrh	r3, [r4, #12]
 801a2d6:	bf15      	itete	ne
 801a2d8:	6560      	strne	r0, [r4, #84]	; 0x54
 801a2da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a2de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a2e2:	81a3      	strheq	r3, [r4, #12]
 801a2e4:	bf18      	it	ne
 801a2e6:	81a3      	strhne	r3, [r4, #12]
 801a2e8:	bd10      	pop	{r4, pc}

0801a2ea <__sclose>:
 801a2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2ee:	f000 b813 	b.w	801a318 <_close_r>
	...

0801a2f4 <_write_r>:
 801a2f4:	b538      	push	{r3, r4, r5, lr}
 801a2f6:	4d07      	ldr	r5, [pc, #28]	; (801a314 <_write_r+0x20>)
 801a2f8:	4604      	mov	r4, r0
 801a2fa:	4608      	mov	r0, r1
 801a2fc:	4611      	mov	r1, r2
 801a2fe:	2200      	movs	r2, #0
 801a300:	602a      	str	r2, [r5, #0]
 801a302:	461a      	mov	r2, r3
 801a304:	f7f9 fff3 	bl	80142ee <_write>
 801a308:	1c43      	adds	r3, r0, #1
 801a30a:	d102      	bne.n	801a312 <_write_r+0x1e>
 801a30c:	682b      	ldr	r3, [r5, #0]
 801a30e:	b103      	cbz	r3, 801a312 <_write_r+0x1e>
 801a310:	6023      	str	r3, [r4, #0]
 801a312:	bd38      	pop	{r3, r4, r5, pc}
 801a314:	20000520 	.word	0x20000520

0801a318 <_close_r>:
 801a318:	b538      	push	{r3, r4, r5, lr}
 801a31a:	4d06      	ldr	r5, [pc, #24]	; (801a334 <_close_r+0x1c>)
 801a31c:	2300      	movs	r3, #0
 801a31e:	4604      	mov	r4, r0
 801a320:	4608      	mov	r0, r1
 801a322:	602b      	str	r3, [r5, #0]
 801a324:	f7f9 ffff 	bl	8014326 <_close>
 801a328:	1c43      	adds	r3, r0, #1
 801a32a:	d102      	bne.n	801a332 <_close_r+0x1a>
 801a32c:	682b      	ldr	r3, [r5, #0]
 801a32e:	b103      	cbz	r3, 801a332 <_close_r+0x1a>
 801a330:	6023      	str	r3, [r4, #0]
 801a332:	bd38      	pop	{r3, r4, r5, pc}
 801a334:	20000520 	.word	0x20000520

0801a338 <_fstat_r>:
 801a338:	b538      	push	{r3, r4, r5, lr}
 801a33a:	4d07      	ldr	r5, [pc, #28]	; (801a358 <_fstat_r+0x20>)
 801a33c:	2300      	movs	r3, #0
 801a33e:	4604      	mov	r4, r0
 801a340:	4608      	mov	r0, r1
 801a342:	4611      	mov	r1, r2
 801a344:	602b      	str	r3, [r5, #0]
 801a346:	f7f9 fffa 	bl	801433e <_fstat>
 801a34a:	1c43      	adds	r3, r0, #1
 801a34c:	d102      	bne.n	801a354 <_fstat_r+0x1c>
 801a34e:	682b      	ldr	r3, [r5, #0]
 801a350:	b103      	cbz	r3, 801a354 <_fstat_r+0x1c>
 801a352:	6023      	str	r3, [r4, #0]
 801a354:	bd38      	pop	{r3, r4, r5, pc}
 801a356:	bf00      	nop
 801a358:	20000520 	.word	0x20000520

0801a35c <_isatty_r>:
 801a35c:	b538      	push	{r3, r4, r5, lr}
 801a35e:	4d06      	ldr	r5, [pc, #24]	; (801a378 <_isatty_r+0x1c>)
 801a360:	2300      	movs	r3, #0
 801a362:	4604      	mov	r4, r0
 801a364:	4608      	mov	r0, r1
 801a366:	602b      	str	r3, [r5, #0]
 801a368:	f7f9 fff9 	bl	801435e <_isatty>
 801a36c:	1c43      	adds	r3, r0, #1
 801a36e:	d102      	bne.n	801a376 <_isatty_r+0x1a>
 801a370:	682b      	ldr	r3, [r5, #0]
 801a372:	b103      	cbz	r3, 801a376 <_isatty_r+0x1a>
 801a374:	6023      	str	r3, [r4, #0]
 801a376:	bd38      	pop	{r3, r4, r5, pc}
 801a378:	20000520 	.word	0x20000520

0801a37c <_lseek_r>:
 801a37c:	b538      	push	{r3, r4, r5, lr}
 801a37e:	4d07      	ldr	r5, [pc, #28]	; (801a39c <_lseek_r+0x20>)
 801a380:	4604      	mov	r4, r0
 801a382:	4608      	mov	r0, r1
 801a384:	4611      	mov	r1, r2
 801a386:	2200      	movs	r2, #0
 801a388:	602a      	str	r2, [r5, #0]
 801a38a:	461a      	mov	r2, r3
 801a38c:	f7f9 fff2 	bl	8014374 <_lseek>
 801a390:	1c43      	adds	r3, r0, #1
 801a392:	d102      	bne.n	801a39a <_lseek_r+0x1e>
 801a394:	682b      	ldr	r3, [r5, #0]
 801a396:	b103      	cbz	r3, 801a39a <_lseek_r+0x1e>
 801a398:	6023      	str	r3, [r4, #0]
 801a39a:	bd38      	pop	{r3, r4, r5, pc}
 801a39c:	20000520 	.word	0x20000520

0801a3a0 <_read_r>:
 801a3a0:	b538      	push	{r3, r4, r5, lr}
 801a3a2:	4d07      	ldr	r5, [pc, #28]	; (801a3c0 <_read_r+0x20>)
 801a3a4:	4604      	mov	r4, r0
 801a3a6:	4608      	mov	r0, r1
 801a3a8:	4611      	mov	r1, r2
 801a3aa:	2200      	movs	r2, #0
 801a3ac:	602a      	str	r2, [r5, #0]
 801a3ae:	461a      	mov	r2, r3
 801a3b0:	f7f9 ff80 	bl	80142b4 <_read>
 801a3b4:	1c43      	adds	r3, r0, #1
 801a3b6:	d102      	bne.n	801a3be <_read_r+0x1e>
 801a3b8:	682b      	ldr	r3, [r5, #0]
 801a3ba:	b103      	cbz	r3, 801a3be <_read_r+0x1e>
 801a3bc:	6023      	str	r3, [r4, #0]
 801a3be:	bd38      	pop	{r3, r4, r5, pc}
 801a3c0:	20000520 	.word	0x20000520

0801a3c4 <_init>:
 801a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3c6:	bf00      	nop
 801a3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3ca:	bc08      	pop	{r3}
 801a3cc:	469e      	mov	lr, r3
 801a3ce:	4770      	bx	lr

0801a3d0 <_fini>:
 801a3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3d2:	bf00      	nop
 801a3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3d6:	bc08      	pop	{r3}
 801a3d8:	469e      	mov	lr, r3
 801a3da:	4770      	bx	lr
